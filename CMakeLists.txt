cmake_minimum_required(VERSION 3.5)

# project() must be before checks, see https://stackoverflow.com/a/26437667/10904212
set(PROJECT_NAME "skemgl")
project(${PROJECT_NAME} CXX C)

# NOTE: always FALSE here (change below)
set(TARGET_EMSCRIPTEN FALSE)
set(TARGET_LINUX FALSE)
if(EMSCRIPTEN)
  set(TARGET_EMSCRIPTEN TRUE)
elseif(${CMAKE_SYSTEM_NAME} STREQUAL "Linux")
  set(TARGET_LINUX TRUE)
else()
  set(TARGET_UNKNOWN TRUE)
  message(FATAL_ERROR "platform not supported")
endif()

set(CHROMIUM_DIR ${CMAKE_CURRENT_SOURCE_DIR}/src/chromium/)

set(GN_GEN_DIR ${CHROMIUM_DIR}gen/)

# generated by tools/RunGen.cmake
set(GEN_COMBINED_DIR ${GN_GEN_DIR}gen_combined/)

# generated by tools/RunGen.cmake
#set(GEN_SERVICES_NETWORK_PUBLIC_DIR ${GN_GEN_DIR}gen_services_network_public/)

# generated by tools/RunGen.cmake
#set(GEN_BLINK_PUBLIC_DIR ${GN_GEN_DIR}gen_blink_public/)

# generated by tools/RunGen.cmake
#set(GEN_MOJO_PUBLIC_DIR ${GN_GEN_DIR}gen_mojo_public/)

# autoninja -C out/Default/ components/content_settings/core/common:mojo_bindings
set(GEN_COMPONENTS_CONTENT_SETTINGS_CORE_COMMON_DIR ${GN_GEN_DIR}gen_components_content_settings/)

# autoninja -C out/Default/ third_party/blink/renderer/core/mojo
#set(GEN_BLINK_RENDERER_CORE_DIR ${GN_GEN_DIR}gen_blink_renderer_core/)

set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

# == NOTE: place set(ENABLE_*) before all checks ==

# khronos
if (TARGET_EMSCRIPTEN)
  set(ENABLE_KHRONOS FALSE) # TODO
elseif(TARGET_LINUX)
  set(ENABLE_KHRONOS TRUE) # TODO
else()
  message(FATAL_ERROR "platform not supported")
endif()
#
if(ENABLE_KHRONOS)
  set(khronos_LIB
    khronos
  )
endif(ENABLE_KHRONOS)
# Blink platform
set(ENABLE_BLINK TRUE) # TODO
# cobalt
set(ENABLE_COBALT TRUE)#TRUE)
# SKIA
set(ENABLE_SKIA TRUE)
set(USE_LIBPNG TRUE)
if(TARGET_EMSCRIPTEN)
  if(ENABLE_BLINK OR ENABLE_COBALT)
    set(USE_SK_GPU TRUE)
  else()
    set(USE_SK_GPU FALSE) # TODO
  endif()
else()
  set(USE_SK_GPU TRUE)
endif()
message(STATUS "USE_SK_GPU=${USE_SK_GPU}")
set(ENABLE_SKSG TRUE)
# NOTE: always FALSE here (change below)
set(ENABLE_SKIA_UTILS TRUE) # required by skottie
set(ENABLE_SKOTTIE TRUE)#TRUE) # requires sksg
# see https://github.com/google/skia/blob/81abc43e6f0b1a789e1bf116820c8ede68d778ab/modules/skshaper/BUILD.gn#L23
set(ENABLE_SKSHAPER TRUE)
# WebAssembly
set(ENABLE_WASM TRUE)
if(NOT ENABLE_WASM)
  message(FATAL_ERROR "only WASM build supported for now")
endif(NOT ENABLE_WASM)
# SIMD
#set(ENABLE_SIMD TRUE)
set(ENABLE_SIMD FALSE)
# PTHREADS
set(ENABLE_WEB_PTHREADS TRUE)
#set(ENABLE_WEB_PTHREADS FALSE)
#
set(ENABLE_WEBGL2 TRUE)
#set(ENABLE_WEBGL1 TRUE) # TODO
set(ENABLE_WEBGL_DEBUG_CHECKS TRUE) # only in debug
set(ENABLE_WTF TRUE)
set(ENABLE_GRE2 TRUE)#FALSE)
set(ENABLE_GLIBXML TRUE)#FALSE)
set(ENABLE_LIBYUV TRUE)#FALSE)
set(ENABLE_ICCJPEG TRUE)#FALSE)
set(ENABLE_LIBWEBP TRUE)#FALSE)
set(USE_ICU TRUE)
set(USE_LIBJPEG_TURBO TRUE)#FALSE)
### Find Libraries
if(TARGET_EMSCRIPTEN)
  set(USE_OPENGL_LIB FALSE) # no system OPENGL for wasm
else()
  set(USE_OPENGL_LIB TRUE)
endif()
if(TARGET_EMSCRIPTEN)
  set(USE_OPENGLES2_LIB FALSE) # no system OPENGLES for wasm
  set(USE_OPENGL_LIB FALSE)
else()
  set(USE_OPENGLES2_LIB FALSE) # TODO
  set(USE_OPENGL_LIB TRUE)
endif()
if(NOT USE_OPENGL_LIB)
  # make OpenGL optional
  set(FOUND_OPENGL_LIBRARIES "")
  set(FOUND_OPENGL_INCLUDE_DIR "")
endif()
set(USE_SYSTEM_ZLIB TRUE)
set(ENABLE_HARFBUZZ TRUE)

macro(add_mojo_prefixes_3 ARG_BASE_PATH ARG_WHERE_COLLECT)
  set(CUR_MOJO_TO_PREFIXES
    ${ARG_BASE_PATH}.mojom.cc
    ${ARG_BASE_PATH}.mojom-shared.cc
    ${ARG_BASE_PATH}.mojom-blink.cc
  )
  list(APPEND ${ARG_WHERE_COLLECT}
    ${CUR_MOJO_TO_PREFIXES}
  )
  set(${ARG_WHERE_COLLECT} ${${ARG_WHERE_COLLECT}} PARENT_SCOPE)
endmacro(add_mojo_prefixes_3)

macro(add_mojo_prefixes_2 ARG_BASE_PATH ARG_WHERE_COLLECT)
  set(CUR_MOJO_TO_PREFIXES
    ${ARG_BASE_PATH}.mojom.cc
    ${ARG_BASE_PATH}.mojom-shared.cc
  )
  list(APPEND ${ARG_WHERE_COLLECT}
    ${CUR_MOJO_TO_PREFIXES}
  )
  set(${ARG_WHERE_COLLECT} ${${ARG_WHERE_COLLECT}} PARENT_SCOPE)
endmacro(add_mojo_prefixes_2)

macro(add_mojo_prefixes_1 ARG_BASE_PATH ARG_WHERE_COLLECT)
  set(CUR_MOJO_TO_PREFIXES
    ${ARG_BASE_PATH}.mojom.cc
  )
  list(APPEND ${ARG_WHERE_COLLECT}
    ${CUR_MOJO_TO_PREFIXES}
  )
  set(${ARG_WHERE_COLLECT} ${${ARG_WHERE_COLLECT}} PARENT_SCOPE)
endmacro(add_mojo_prefixes_1)

if (CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_CURRENT_BINARY_DIR)
  message(FATAL_ERROR "You must set your binary directory different from your source")
endif()

# this sets the paths that cmake will use to locate libs (via the FindXXX.cmake or XXConfig.cmake scripts)
list(APPEND CMAKE_PREFIX_PATH ${CMAKE_CURRENT_SOURCE_DIR}/lib/SDL2 )
list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake)
list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake/sdl2)

set(OPTIMIZE_LEVEL "" CACHE STRING "for example, -O0")
if(OPTIMIZE_LEVEL)
  message(STATUS "OPTIMIZE_LEVEL=${OPTIMIZE_LEVEL}")
else(OPTIMIZE_LEVEL)
  message(STATUS "OPTIMIZE_LEVEL will be detected based on BUILD_TYPE/RELEASE_BUILD")
endif(OPTIMIZE_LEVEL)

set(DEBUG_LEVEL "" CACHE STRING "for example, -g4")
if(DEBUG_LEVEL)
  message(STATUS "DEBUG_LEVEL=${DEBUG_LEVEL}")
else(DEBUG_LEVEL)
  message(STATUS "DEBUG_LEVEL will be detected based on BUILD_TYPE/RELEASE_BUILD")
endif(DEBUG_LEVEL)

set(COMMON_THIRDPARTY_DIR ${CMAKE_CURRENT_SOURCE_DIR}/thirdparty/)

# always return on non-void functions to prevent UB
set(COMMON_FLAGS "${COMMON_FLAGS} -Wreturn-type")
# https://gist.github.com/morido/8637535
set(COMMON_FLAGS "${COMMON_FLAGS} -Werror=return-type")

if(USE_ICU)
  set(COMMON_FLAGS "${COMMON_FLAGS} -DHAS_ICU=1")
  set(USE_CUSTOM_ICU TRUE)
  if(USE_CUSTOM_ICU)
    set(COMMON_FLAGS "${COMMON_FLAGS} -DUSE_CUSTOM_ICU=1")
    #
    #
    #
    #set(COMMON_FLAGS "${COMMON_FLAGS} -DSK_USING_THIRD_PARTY_ICU=1")
    # https://github.com/google/skia/blob/master/third_party/icu/BUILD.gn#L15
    #set(COMMON_FLAGS "${COMMON_FLAGS} -DU_USING_ICU_NAMESPACE=0")
    #
    set(ICU_PARENT_FULL_DIR
      #third_party/icu/
      #../../thirdparty/skia/third_party/externals/icu/
      ${COMMON_THIRDPARTY_DIR}/icu_wrapper/
    )

    set(ICU_FULL_DIR
      #third_party/icu/
      #../../thirdparty/skia/third_party/externals/icu/
      ${ICU_PARENT_FULL_DIR}third_party/icu/
    )

    set(OWN_ICU_INCLUDE_DIRS
      ${ICU_PARENT_FULL_DIR}
      ${ICU_FULL_DIR}
      ${ICU_FULL_DIR}source/common/unicode
      ${ICU_FULL_DIR}source/common
      ${ICU_FULL_DIR}source/i18n
    )
    set(CUSTOM_ICU_LIB icu) # see icu.cmake
  else(USE_CUSTOM_ICU)
    set(CUSTOM_ICU_LIB icu) # platform specific
  endif(USE_CUSTOM_ICU)
endif(USE_ICU)

if(TARGET_EMSCRIPTEN)
  set(USE_CUSTOM_LIBPNG FALSE)
else()
  set(USE_CUSTOM_LIBPNG FALSE)
endif()
if(USE_LIBPNG)
  set(COMMON_FLAGS "${COMMON_FLAGS} -DHAS_LIBPNG=1")
  #
  if(USE_CUSTOM_LIBPNG)
    set(USE_SYSTEM_PNG FALSE)
    set(libpng_LIB GLIBPNG)
  else(USE_CUSTOM_LIBPNG)
    if(TARGET_EMSCRIPTEN)
      set(USE_SYSTEM_PNG TRUE) # TODO
      #message(FATAL_ERROR "wasm: only custom LIBPNG is supported for now")
    else()
      set(USE_SYSTEM_PNG TRUE)
    endif(TARGET_EMSCRIPTEN)
  endif(USE_CUSTOM_LIBPNG)
  #
  if(USE_SYSTEM_PNG)
    #message(FATAL_ERROR "NOT SUPPORTED: SYSTEM PNG")
    if(TARGET_EMSCRIPTEN)
      set(EMCC_COMMON "${EMCC_COMMON} -s USE_LIBPNG=1")
    else()
      find_package(PNG REQUIRED) # PNG::PNG
      set(libpng_LIB PNG::PNG)
      #set(libpng_LIB GLIBPNG)
    endif()
  else()
    if(USE_CUSTOM_LIBPNG)
      set(libpng_LIB GLIBPNG)
    else()
      message(FATAL_ERROR "YOU MUST USE SYSTEM PNG OR CUSTOM PNG")
    endif(USE_CUSTOM_LIBPNG)
  endif()
endif(USE_LIBPNG)


# NOTE: SOURCE_MAP requires -g4 and --source-map-base
# see http://webassemblycode.com/using-browsers-debug-webassembly/
set(EMSCRIPTEN_USE_SOURCE_MAP TRUE) # only for debug builds

set(EMSCRIPTEN_USE_SAFE_HEAP TRUE) # only for debug builds

set(EMSCRIPTEN_USE_PROFILING FALSE)

# NOTE: see https://github.com/emscripten-core/emscripten/issues/8755
set(EMSCRIPTEN_ASSERTION_LEVEL "1")

set(EMSCRIPTEN_EMIT_SYMBOL_MAP TRUE) # only for debug builds

set(EMSCRIPTEN_MEMORY_PROFILER FALSE)

set(EMSCRIPTEN_THREAD_PROFILER FALSE)

#include(FindPkgMacros)

message(STATUS "CMAKE_BUILD_TYPE = ${CMAKE_BUILD_TYPE}")
IF( NOT CMAKE_BUILD_TYPE )
   SET( CMAKE_BUILD_TYPE Debug ... FORCE )
ENDIF()

# build mode. separated from CMAKE_BUILD_TYPE to provide custom debug level
# for example, you may want build optimized wasm with debug stack trace support
# NOTE: measure performace on RELEASE builds!
#set(RELEASE_BUILD TRUE)
#set(RELEASE_BUILD FALSE)
option(RELEASE_BUILD "RELEASE_BUILD" OFF)
message(STATUS "RELEASE_BUILD = ${RELEASE_BUILD}")

# Mandatory dependencies
find_program(PYTHON_FOUND python)
if(NOT PYTHON_FOUND)
  message(FATAL_ERROR "\"python\" is required, please install it !")
else()
  message(STATUS "\"python\" found...")
endif(NOT PYTHON_FOUND)

# harfbuzz
#option(ENABLE_HARFBUZZ "ENABLE_HARFBUZZ" ON)
#if((ENABLE_BLINK OR ENABLE_COBALT) AND NOT ENABLE_HARFBUZZ)
#  message(WARNING "AUTO ENABLED HARFBUZZ")
#  option(ENABLE_HARFBUZZ "ENABLE_HARFBUZZ" ON)
#endif()
if(ENABLE_HARFBUZZ)
  set(USE_CUSTOM_HARFBUZZ TRUE)
  set(FORCE_USE_SKIA_HARFBUZZ TRUE)
  #
  # custom flags
  set(COMMON_FLAGS "${COMMON_FLAGS} -DENABLE_HARFBUZZ=1")
  # https://github.com/klzgrad/naiveproxy/blob/master/src/third_party/skia/modules/skshaper/BUILD.gn#L11
  # SK_SHAPER_HARFBUZZ_AVAILABLE # < TODO if skia_use_icu
  #
  set(harfbuzz_FULL_DIR
    ${CHROMIUM_DIR}third_party/skia/third_party/externals/harfbuzz/
  )
  #
  if(USE_CUSTOM_HARFBUZZ)
    #
    set(HARFBUZZ_LIBRARIES harfbuzz)
    set(HARFBUZZ_INCLUDE_DIRS ${harfbuzz_FULL_DIR}/src)
  else(USE_CUSTOM_HARFBUZZ)
    set(EMCC_COMMON "${EMCC_COMMON} -s USE_HARFBUZZ=1")
    # see find_package below for linux
  endif(USE_CUSTOM_HARFBUZZ)
endif(ENABLE_HARFBUZZ)

if(TARGET_EMSCRIPTEN)
  set(ENABLE_BORINGSSL FALSE)
elseif(TARGET_LINUX)
  set(ENABLE_BORINGSSL FALSE) # TODO: add src/chromium/third_party/boringssl/src/ssl/CMakeLists.txt
else()
  message(FATAL_ERROR "platform not supported")
endif()
if(ENABLE_BORINGSSL)
  set(COMMON_FLAGS "${COMMON_FLAGS} -DENABLE_BORINGSSL=1")
  set(BORINGSSL_LIBS
    BORINGSSL
  )
endif(ENABLE_BORINGSSL)

if(TARGET_EMSCRIPTEN)
  set(ENABLE_GNET FALSE)
elseif(TARGET_LINUX)
  set(ENABLE_GNET FALSE) # TODO
else()
  message(FATAL_ERROR "platform not supported")
endif()
if(ENABLE_GNET)
  set(COMMON_FLAGS "${COMMON_FLAGS} -DENABLE_GNET=1")
  #set(COMMON_FLAGS "${COMMON_FLAGS} -DENABLE_NET=1")
  set(COMMON_FLAGS "${COMMON_FLAGS} -DENABLE_NETWORK=1")
  set(GNET_LIBS
    GNET
  )
endif(ENABLE_GNET)

if (ENABLE_SKIA)
  set(ENABLE_WUFFS FALSE)
  if(ENABLE_WUFFS)
    set(WUFFS_LIB_NAME
      wuffs
    )
  endif()
  list(APPEND APP_DEFINITIONS ENABLE_SKIA=1)
  set(SKIA_PARENT_DIR "${CHROMIUM_DIR}third_party/")
  set(SKIA_DIR "${SKIA_PARENT_DIR}skia/")

  #set(SKIA_EXT_PARENT_DIR ${CHROMIUM_DIR})
  #set(SKIA_EXT_DIR ${SKIA_EXT_PARENT_DIR}skia/)
  set(SKIA_EXT_PARENT_DIR ${SKIA_PARENT_DIR})
  set(SKIA_EXT_DIR ${SKIA_EXT_PARENT_DIR}skia/)
endif(ENABLE_SKIA)

if(ENABLE_SKSG)
  set(sksg_LIB sksg)
  list(APPEND APP_DEFINITIONS ENABLE_SKSG=1)
endif(ENABLE_SKSG)

if(ENABLE_SKOTTIE)
  set(skottie_LIB skottie)
  set(COMMON_FLAGS "${COMMON_FLAGS} -DENABLE_SKOTTIE=1")
  set(ENABLE_SKIA_UTILS TRUE)
endif(ENABLE_SKOTTIE)

if (ENABLE_SKSHAPER)
  # SkShaper
  # Shapes text using HarfBuzz
  # and places the shaped text into a TextBlob.
  # If compiled without HarfBuzz,
  # fall back on SkPaint::textToGlyphs.
  set(skshaper_LIB skshaper)
  list(APPEND APP_DEFINITIONS ENABLE_SKSHAPER=1)
endif(ENABLE_SKSHAPER)

# NOTE: Place after all skia libs
if (ENABLE_SKIA)
  set(SKIA_LIBS
    SKIA
    ${sksg_LIB}
    ${skshaper_LIB}
    #particles
    ${skottie_LIB}
    ${WUFFS_LIB_NAME}
    #jpeg # TODO
    #pathkit
  )
endif(ENABLE_SKIA)

if(ENABLE_BLINK)
  if(NOT ENABLE_SKIA)
    message(FATAL_ERROR "BLINK requires SKIA")
  endif(NOT ENABLE_SKIA)
  #
  list(APPEND APP_DEFINITIONS ENABLE_BLINK=1)
  list(APPEND APP_DEFINITIONS ENABLE_BLINK_PLATFORM=1)
  #
  set(BLINK_GFX_LIBS
    #BLINK_RENDERER_CORE
    BLINK_RENDERER_PLATFORM
    COMPONENTS_VIZ_CLIENT
    CC
    BASE_CC
    DEBUG_CC
    PAINT_CC
    ANIMATION_CC
    GPU_COMMAND_BUFFER
    GFX_CODEC
    GFX_GEOMETRY
    GFX_GEOMETRY_SKIA
    GFX_COLOR_SPACE
    GFX_SWITCHES
    GFX_RANGE
    SKIA_EXT
    UI_GFX
    BLINK_PUBLIC_COMMON
    COMPONENTS_VIZ_CLIENT
    COMPONENTS_VIZ_COMMON
    CC
    #G_GPU
    UI_GFX
    GFX_GEOMETRY
    ANIMATION_CC
    BASE_CC
    PAINT_CC
    CC
    LIB_V8_INTERFACE
    MOJO
  )
  list(APPEND BLINK_LIBS
    ${BLINK_GFX_LIBS}
    COMPONENTS_SCHEDULING_METRICS
  )
  if(ENABLE_GNET)
    set(SERVICES_SERVICE_MANAGER_PUBLIC_CPP_LIB
        SERVICES_SERVICE_MANAGER_PUBLIC_CPP
    )
    set(SERVICES_NETWORK_PUBLIC_CPP_LIB
        SERVICES_NETWORK_PUBLIC_CPP
    )
    list(APPEND BLINK_LIBS
      COMPONENTS_CONTENT_SETTINGS_CORE_COMMON
      ${SERVICES_NETWORK_PUBLIC_CPP_LIB}
      ${SERVICES_SERVICE_MANAGER_PUBLIC_CPP_LIB}
    )
  endif(ENABLE_GNET)
endif()

message(STATUS "CMAKE_SYSTEM_NAME = ${CMAKE_SYSTEM_NAME}")
if(TARGET_EMSCRIPTEN)
  message(STATUS "DETECTED EMSCRIPTEN")
  if ("${EMSCRIPTEN_VERSION}" VERSION_GREATER 1.38.20)
    message(STATUS "Emscripten version is ${EMSCRIPTEN_VERSION}")
  else()
    message(FATAL_ERROR "EMSCRIPTEN_VERSION is not present, or is older than 1.38.20: '${EMSCRIPTEN_VERSION}'")
  endif()
  #
  if ("${EMSCRIPTEN_VERSION}" VERSION_GREATER 1.38.22)
    set(EMCC_SUPPORTS_ENVIRONMENT TRUE)
  else()
    set(EMCC_SUPPORTS_ENVIRONMENT FALSE)
  endif()
endif(TARGET_EMSCRIPTEN)

if(TARGET_EMSCRIPTEN)
  set(ENABLE_UKM FALSE) # keep wasm build as small as possible
else()
  set(ENABLE_UKM FALSE) # TODO: UKM NOT SUPPORTED FOR NOW
endif()
if(ENABLE_UKM)
  set(COMMON_FLAGS "${COMMON_FLAGS} -DENABLE_UKM=1")
endif(ENABLE_UKM)

if(ENABLE_BLINK)
  # TODO: keep wasm build as small as possible
  set(ENABLE_GIPC TRUE)
else()
  set(ENABLE_GIPC FALSE)
endif()
if(ENABLE_GIPC)
  set(COMMON_FLAGS "${COMMON_FLAGS} -DENABLE_GIPC=1")
  set(COMMON_FLAGS "${COMMON_FLAGS} -DENABLE_MOJO_IPC=1") # TODO
  set(GIPC_LIB GIPC)
endif(ENABLE_GIPC)

if(RELEASE_BUILD)
  if(NOT CMAKE_BUILD_TYPE MATCHES Release)
    if(TARGET_EMSCRIPTEN)
      message(WARNING "build with -DCMAKE_BUILD_TYPE=Release")
    else(EMSCRIPTEN)
      message(FATAL_ERROR "build with -DCMAKE_BUILD_TYPE=Release")
    endif(TARGET_EMSCRIPTEN)
  endif(NOT CMAKE_BUILD_TYPE MATCHES Release)
else()
  if(NOT CMAKE_BUILD_TYPE MATCHES Debug)
    if(TARGET_EMSCRIPTEN)
      message(WARNING "build with -DCMAKE_BUILD_TYPE=Debug")
    else(EMSCRIPTEN)
      message(FATAL_ERROR "build with -DCMAKE_BUILD_TYPE=Debug")
    endif(TARGET_EMSCRIPTEN)
  endif(NOT CMAKE_BUILD_TYPE MATCHES Debug)
  #
  # Debugging CFLAGS. Turn optimizations off; turn debugging symbols on.
  # see https://github.com/mmatyas/supermariowar/blob/master/CMakeLists.txt#L165
  # see http://www.brendangregg.com/blog/2016-08-09/gdb-example-ncurses.html
  #add_definitions(-DDEBUG=1 -D_DEBUG=1)
  #add_definitions(-D_DEBUG=1)

  # see cobalt/src/cobalt/layout/layout_unit.h
  set(COMMON_FLAGS "${COMMON_FLAGS} -D_DEBUG=1")
  # see https://github.com/blockspacer/cobalt-clone-28052019/blob/master/src/cobalt/renderer/pipeline.cc#L119
  #set(COMMON_FLAGS "${COMMON_FLAGS} -DENABLE_DEBUGGER=1")
endif(RELEASE_BUILD)

include_directories(${CMAKE_CURRENT_SOURCE_DIR}
  ${CMAKE_CURRENT_BINARY_DIR})

# # TODO https://github.com/mbbill/JSC.js
# # # http://userguide.icu-project.org/howtouseicu
# # see http://transit.iut2.upmf-grenoble.fr/doc/icu-doc/html/uconfig_8h.html
# # see https://github.com/sillsdev/icu-dotnet/wiki/Making-a-minimal-build-for-ICU58-or-later
# set(COMMON_CXX_FLAGS "-DLIB_ICU_I18N_STATIC=1")
# set(COMMON_CXX_FLAGS "-DU_CHARSET_IS_UTF8=1")
# #set(COMMON_CXX_FLAGS "-DU_NO_DEFAULT_INCLUDE_UTF_HEADERS=0")
# #set(COMMON_CXX_FLAGS "-DU_NO_DEFAULT_INCLUDE_UTF_HEADERS=0")
# set(COMMON_CXX_FLAGS "-DU_ENABLE_DYLOAD=0")
# #set(COMMON_CXX_FLAGS "-DICU_UTIL_DATA_IMPL=ICU_UTIL_DATA_STATIC")
# set(COMMON_CXX_FLAGS "-DICU_UTIL_DATA_IMPL=ICU_UTIL_DATA_FILE")
# #
# #set(COMMON_CXX_FLAGS "-DU_DISABLE_VERSION_SUFFIX=1")
# #set(COMMON_FLAGS "${COMMON_FLAGS} -DU_USING_ICU_NAMESPACE=0")
# #
# #set(COMMON_CXX_FLAGS "-DUCONFIG_NO_SERVICE=1")
# set(COMMON_CXX_FLAGS "-DU_HAVE_STD_STRING=1")
# set(COMMON_CXX_FLAGS "-DUCONFIG_NO_LEGACY_CONVERSION=1")
# set(COMMON_CXX_FLAGS "-DUCONFIG_ONLY_COLLATION=1")
# set(COMMON_CXX_FLAGS "-DUCONFIG_NO_FILE_IO=1")
# set(COMMON_CXX_FLAGS "-DUCONFIG_NO_CONVERSION=1")
# set(COMMON_CXX_FLAGS "-DUCONFIG_NO_COLLATION=1")
# set(COMMON_CXX_FLAGS "-DUCONFIG_NO_FORMATTING=1")
# set(COMMON_CXX_FLAGS "-DUCONFIG_NO_IDNA=1")
# set(COMMON_CXX_FLAGS "-DUCONFIG_NO_NORMALIZATION=1")
# set(COMMON_CXX_FLAGS "-DUCONFIG_NO_REGULAR_EXPRESSIONS=1")
# set(COMMON_CXX_FLAGS "-DUCONFIG_NO_TRANSLITERATION=1")
# set(COMMON_CXX_FLAGS "-DU_NO_DEFAULT_INCLUDE_UTF_HEADERS=1")
# #
# #set(COMMON_CXX_FLAGS "-DUCONFIG_NO_BREAK_ITERATION=0")
# #set(COMMON_CXX_FLAGS "-DU_STATIC_IMPLEMENTATION=1")
# set(ICU_DEFINES "${ICU_DEFINES} -DUCHAR_TYPE=uint16_t")
# # set(ICU_DEFINES "${ICU_DEFINES} -DU_STATIC_IMPLEMENTATION=1")
# # set(ICU_DEFINES "${ICU_DEFINES} -DU_COMMON_IMPLEMENTATION=1")
# # set(ICU_DEFINES "${ICU_DEFINES} -DU_I18N_IMPLEMENTATION=1")
# # set(ICU_DEFINES "${ICU_DEFINES} -DU_ENABLE_DYLOAD=0")
# # set(ICU_DEFINES "${ICU_DEFINES} -DHAVE_DLFCN_H=0")
# # set(ICU_DEFINES "${ICU_DEFINES} -DHAVE_DLOPEN=0")
# # if(TARGET_EMSCRIPTEN)
# #   # Tell ICU that we are a 32 bit platform, otherwise,
# #   # double-conversion-utils.h doesn't know how to operate.
# #   set(ICU_DEFINES "${ICU_DEFINES} -D__i386__=1")
# # endif()
# # set(ICU_DEFINES "${ICU_DEFINES} -DU_NO_DEFAULT_INCLUDE_UTF_HEADERS=0")
# # # undefines U_ATTRIBUTE_DEPRECATED
# # set(ICU_DEFINES "${ICU_DEFINES} -UU_ATTRIBUTE_DEPRECATED")
# # # undefines U_NO_DEFAULT_INCLUDE_UTF_HEADERS
# # #set(ICU_DEFINES "${ICU_DEFINES} -UU_NO_DEFAULT_INCLUDE_UTF_HEADERS")
#
# # TODO
# #set(COMMON_CXX_FLAGS "-DNEED_SHORT_EXTERNAL_NAMES=1")

# -fno-exceptions
#set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall")
set(COMMON_CXX_FLAGS "${COMMON_CXX_FLAGS} -std=c++17") # use target options

# TODO
set(COMMON_CXX_FLAGS "${COMMON_CXX_FLAGS} -DCODEC_IMPLEMENTATION=1")

if(RELEASE_BUILD)
  set(COMMON_FLAGS "${COMMON_FLAGS} -fno-rtti")
  set(COMMON_FLAGS "${COMMON_FLAGS} -fno-exceptions")
else()
  # https://stackoverflow.com/a/4184877/10904212
  set(COMMON_FLAGS "${COMMON_FLAGS} -frtti")
endif(RELEASE_BUILD)

if (EMSCRIPTEN)
  #set(COMMON_FLAGS "${COMMON_FLAGS} -DUSE_X11=0")
  # custom define
  set(COMMON_FLAGS "${COMMON_FLAGS} -DNO_CHROMIUM_WINDOW=1")
elseif(TARGET_LINUX)
  set(COMMON_FLAGS "${COMMON_FLAGS} -DUSE_X11=1")
  # custom define
  set(COMMON_FLAGS "${COMMON_FLAGS} -DNO_CHROMIUM_WINDOW=1")
else()
  message(FATAL_ERROR "platform not supported")
endif()

set(USE_LIBJPEG FALSE) # NOTE: always FALSE
if(USE_LIBJPEG)
  set(GLIBJPEG_DIR
    ${CHROMIUM_DIR}third_party/libjpeg/
  )
  #
  set(SUPPORTS_JPEG TRUE)
  #
  set(COMMON_FLAGS "${COMMON_FLAGS} -DHAS_LIBJPEG=1")
  # see ui/gfx/codec/jpeg_codec.cc
  set(COMMON_FLAGS "${COMMON_FLAGS} -DUSE_LIBJPEG=1")
  #
  set(USE_CUSTOM_LIBJPEG TRUE)
  if(USE_CUSTOM_LIBJPEG)
    set(USE_EMCC_LIBJPEG_PORT FALSE)
  else(USE_CUSTOM_LIBJPEG)
    set(USE_EMCC_LIBJPEG_PORT TRUE) # TODO
    if(TARGET_EMSCRIPTEN)
      message(FATAL_ERROR "wasm: only custom LIBJPEG is supported for now")
    endif(TARGET_EMSCRIPTEN)
  endif(USE_CUSTOM_LIBJPEG)
  #
  if(TARGET_EMSCRIPTEN)
    set(libjpeg_LIB GLIBJPEG)
  elseif(TARGET_LINUX)
    set(libjpeg_LIB GLIBJPEG)
  else()
    message(FATAL_ERROR "platform not supported")
  endif()
endif(USE_LIBJPEG)

#if((ENABLE_BLINK OR ENABLE_COBALT) AND NOT USE_LIBJPEG_TURBO)
#  message(WARNING "AUTO ENABLED LIBJPEG_TURBO")
#  set(USE_LIBJPEG_TURBO TRUE)
#endif()
if(USE_LIBJPEG_TURBO)
  #
  set(GLIBJPEG_TURBO_DIR
    ${CHROMIUM_DIR}third_party/libjpeg_turbo/
  )
  #
  set(SUPPORTS_JPEG TRUE)
  set(COMMON_FLAGS "${COMMON_FLAGS} -DHAS_LIBJPEG_TURBO=1")
  # see ui/gfx/codec/jpeg_codec.cc
  set(COMMON_FLAGS "${COMMON_FLAGS} -DUSE_LIBJPEG_TURBO=1")
  #
  set(USE_CUSTOM_LIBJPEG_TURBO TRUE)
  if(USE_CUSTOM_LIBJPEG_TURBO)
    set(USE_EMCC_LIBJPEG_PORT FALSE)
  else(USE_CUSTOM_LIBJPEG_TURBO)
    set(USE_EMCC_LIBJPEG_TURBO_PORT TRUE) # TODO
    if(TARGET_EMSCRIPTEN)
      message(FATAL_ERROR "wasm: only custom LIBJPEG_TURBO is supported for now")
    endif(TARGET_EMSCRIPTEN)
  endif(USE_CUSTOM_LIBJPEG_TURBO)
  #
  if(TARGET_EMSCRIPTEN)
    set(libjpeg_TURBO_LIB GLIBJPEG_TURBO)
  elseif(TARGET_LINUX)
    set(libjpeg_TURBO_LIB GLIBJPEG_TURBO)
  else()
    message(FATAL_ERROR "platform not supported")
  endif()
endif(USE_LIBJPEG_TURBO)

if(ENABLE_COBALT)
  list(APPEND APP_DEFINITIONS ENABLE_COBALT=1)
  #set(COMMON_FLAGS "${COMMON_FLAGS} -DCOBALT=1") # see htmlEmitImpliedRootLevelParagraph
  #set(COMMON_FLAGS "${COMMON_FLAGS} -DSTARBOARD=1")
  set(COMMON_FLAGS "${COMMON_FLAGS} -DCOBALT_FORCE_SOFTWARE_RASTERIZER=1")
  # see https://github.com/blockspacer/cobalt-clone-28052019/blob/master/src/starboard/client_porting/poem/strings_poem.h
  list(APPEND STARBOARD_EXTRA_PUBLIC_FLAGS POEM_NO_EMULATION=1)
  set(COBALT_ROOT_PARENT_DIR ${CMAKE_CURRENT_SOURCE_DIR}/src/)
  set(COBALT_ROOT_DIR ${COBALT_ROOT_PARENT_DIR}cobalt/)
  set(COBALT_PORT_DIR ${COBALT_ROOT_DIR}port/)
  set(COBALT_CORE_PARENT_DIR ${COBALT_ROOT_DIR}src/)
  set(COBALT_CORE_DIR ${COBALT_CORE_PARENT_DIR}cobalt/)
  set(COBALT_GEN_DIR
    ${CMAKE_CURRENT_SOURCE_DIR}/src/cobalt/gen/ # to ./cobalt
  )
  set(COBALT_GEN_CSS_PARSER_PARENT_DIR
    ${COBALT_GEN_DIR}cobalt/ # to css_parser/grammar_impl_generated.h
  )
  set(COBALT_GEN_DOM_PARSER_PARENT_DIR
    ${COBALT_GEN_DIR}cobalt/
  )
  set(COBALT_COMMON_DEFINES
    OS_STARBOARD=1
    STARBOARD=1
    COBALT=1
    COBALT_LINUX=1
    #MESA_EGL_NO_X11_HEADERS=1
    #
    #COBALT_ENABLE_VERSION_COMPATIBILITY_VALIDATIONS=1
    #
    STARBOARD_ATOMIC_INCLUDE="${COBALT_ROOT_DIR}port/linux/x64x11/atomic_public.h"
    STARBOARD_THREAD_TYPES_INCLUDE="${COBALT_ROOT_DIR}port/linux/x64x11/thread_types_public.h"
    STARBOARD_CONFIGURATION_INCLUDE="${COBALT_ROOT_DIR}port/linux/x64x11/configuration_public.h"
    #
    #BASE_HASH_DEFINE_LONG_LONG_HASHES=0
    #BASE_HASH_DEFINE_STRING_HASHES=0
    #BASE_HASH_USE_HASH=0
    #BASE_HASH_MAP_INCLUDE="<unordered_map>"
    # TODO #BASE_HASH_NAMESPACE=std  # TODO
    # TODO #BASE_HASH_NAMESPACE=bhash # TODO
    #BASE_HASH_SET_INCLUDE="<unordered_set>"
    #BASE_HASH_USE_HASH_STRUCT=1
    # https://github.com/blockspacer/cobalt-clone-28052019/blob/master/src/cobalt/dom_parser/libxml_html_parser_wrapper.cc#L119
    #USE_SYSTEM_LIBXML=1
    #
    # see https://github.com/blockspacer/cobalt-clone-28052019/blob/master/src/out/qtcreator_projects/linux-x64x11_devel_cobalt.config
    #
    COBALT_MEDIA_BUFFER_STORAGE_TYPE_MEMORY=1
    #LIBXML_STATIC=1
    #OPENSSL_NO_EC_NISTP_64_GCC_128=1
    #OPENSSL_NO_HEARTBEATS=1
    #UCONFIG_NO_REGULAR_EXPRESSIONS=1
    COBALT_MAX_CPU_USAGE_IN_BYTES=-1
    #OPENSSL_NO_DYNAMIC_ENGINE=1
    #OPENSSL_NO_OCSP=1
    #OPENSSL_NO_UI=1
    #OPENSSL_NO_SSL3=1
    #OPENSSL_NO_CAMELLIA=1
    #OPENSSL_NO_CAST=1
    COBALT_OFFSCREEN_TARGET_CACHE_SIZE_IN_BYTES=-1
    #OPENSSL_NO_POSIX_IO=1
    #HAVE_ICU_BUILTIN=1
    #OPENSSL_NO_GOST=1
    #OPENSSL_NO_MDC2=1
    #OPENSSL_NO_SRP=1
    #OPENSSL_NO_STORE=1
    #OPENSSL_NO_COMP=1
    STARBOARD_NO_LOCAL_ISSUER=1
    #THREADSAFE=1
    #ENABLE_PARTIAL_LAYOUT_CONTROL=1
    #OPENSSL_NO_MD4=1
    #NO_WINDOWS_BRAINDEATH=1
    COBALT_MEDIA_BUFFER_ALIGNMENT=1
    #OPENSSL_NO_JPAKE=1
    #OPENSSL_NO_DGRAM=1
    #OPENSSL_NO_BUF_FREELISTS=1
    #OPENSSL_NO_OCB=1
    #OPENSSL_NO_KRB5=1
    #COBALT_FORCE_DIRECT_GLES_RASTERIZER=1
    #OPENSSL_NO_ENGINE=1
    #OPENSSL_NO_RC4=1
    #OPENSSL_NO_RC5=1
    COBALT_MAX_GPU_USAGE_IN_BYTES=-1
    #OPENSSL_NO_RC2=1
    # TODO # ENABLE_WEBDRIVER=1
    #STARBOARD_OLD_ICU=1
    #USE_OPENSSL=1
    #OPENSSL_NO_BF=1
    QUIC_DISABLED_FOR_STARBOARD=1
    #OPENSSL_NO_CAPIENG=1
    #OPENSSL_NO_RIPEMD=1
    #ENABLE_BUILT_IN_DNS=1
    #OPENSSL_NO_CMS=1
    #OPENSSL_NO_RFC3779=1
    #OPENSSL_NO_GMP=1
    #FLAC__NO_DLL=1
    #OPENSSL_NO_SSL2=1
    #HB_NO_MT=1
    #ENABLE_IGNORE_CERTIFICATE_ERRORS=1 # TODO
    #LIBGLESV2_IMPLEMENTATION=1
    HTTP_CACHE_DISABLED_FOR_STARBOARD=1
    #OPENSSL_NO_STATIC_ENGINE=1
    #OPENSSL_NO_HW=1
    #OPENSSL_NO_IDEA=1
    #OPENSSL_NO_THREADS=1
    #OPENSSL_NO_EC2M=1
    #OPENSSL_NO_SOCK=1
    #OPENSSL_NO_SEED=1
    #OPENSSL_NO_SCTP=1
    #OPENSSL_NO_MD2=1
    COBALT_SCRATCH_SURFACE_CACHE_SIZE_IN_BYTES=0
  )
  #message(FATAL_ERROR ${COBALT_CORE_PARENT_DIR}cobalt/base/circular_buffer_shell.h)
  set(COBALT_COMMON_INCLUDES
    ${COBALT_GEN_DIR}
    ${COBALT_GEN_DIR}bindings/browser/source # to cobalt/dom/event_init.h
    ${COBALT_ROOT_DIR}gen # to ./cobalt
    ${CHROMIUM_DIR}src # to ./base/containers/
    ${COBALT_ROOT_DIR}port # to ./starboard/
    ${CHROMIUM_DIR} # to ./base/
    ${COBALT_ROOT_DIR} # to ./port/
    ${COBALT_CORE_PARENT_DIR} # to ./cobalt
  )
  set(COBALT_LIBRARY_NAME COBALT_CORE)
  #
  set(COBALT_BASE_LIB cobalt_base)
  set(COBALT_NANOBASE_LIB cobalt_nanobase)
  set(COBALT_SCRIPT_LIB cobalt_script)
  set(COBALT_SYSTEM_WINDOW_LIB cobalt_system_window)
  set(COBALT_V8_STUB_LIB v8_stub)
  set(COBALT_DOM_EXCEPTION_LIB cobalt_dom_exception)
  set(COBALT_UI_NAVIGATION_LIB cobalt_ui_navigation)
  set(COBALT_MATH_LIB cobalt_math)
  set(COBALT_MEDIA_LIB cobalt_media)
  #set(COBALT_MEDIA_LIB GMEDIA)
  set(COBALT_PAGE_VISIBILITY_LIB cobalt_page_visibility)
  set(COBALT_CSSOM_LIB cobalt_cssom)
  set(COBALT_WEB_ANIMATIONS_LIB cobalt_web_animations)
  set(COBALT_DOM_LIB cobalt_dom)
  set(COBALT_OVERLAY_INFO_LIB cobalt_overlay_info)
  set(COBALT_INPUT_LIB cobalt_input)
  set(COBALT_LAYOUT_LIB cobalt_layout)
  set(COBALT_DOM_PARSER_LIB cobalt_dom_parser)
  set(COBALT_CSS_PARSER_LIB cobalt_css_parser)
  set(ENABLE_COBALT_GLIMP FALSE)
  if(ENABLE_COBALT_GLIMP)
    set(COBALT_GLIMP_LIB cobalt_glimp)
    list(APPEND APP_DEFINITIONS ENABLE_COBALT_GLIMP=1)
  endif(ENABLE_COBALT_GLIMP)
  #
  set(ENABLE_COBALT_RENDERER TRUE)
  if(ENABLE_COBALT_RENDERER)
    list(APPEND APP_DEFINITIONS ENABLE_COBALT_RENDERER=1)
    set(ENABLE_COBALT_RENDERER_STUB TRUE)
    if(ENABLE_COBALT_RENDERER_STUB)
      set(COBALT_RENDERER_LIB cobalt_renderer_stub)
      set(COBALT_RENDERER_LIB_FILE_NAME cobalt_renderer_stub)
    else(ENABLE_COBALT_RENDERER_STUB)
      set(COBALT_RENDERER_LIB cobalt_renderer)
      set(COBALT_RENDERER_LIB_FILE_NAME cobalt_renderer)
    endif(ENABLE_COBALT_RENDERER_STUB)
  endif(ENABLE_COBALT_RENDERER)
  #
  set(STARBOARD_PLATFORM_LIB starboard_platform)
  set(STARBOARD_ICU_INIT_LIB starboard_icu_init)
  set(STARBOARD_EZTIME_LIB starboard_eztime)
  set(STARBOARD_COMMON_LIB starboard_common)
  #
  set(ENABLE_COBALT_RENDER_TREE TRUE)
  if(ENABLE_COBALT_RENDER_TREE)
    set(COBALT_RENDER_TREE_LIB cobalt_render_tree)
    #set(COMMON_FLAGS "${COMMON_FLAGS} -DENABLE_COBALT_RENDER_TREE=1") # TODO
    list(APPEND COBALT_LIBS
      ${COBALT_RENDER_TREE_LIB}
    )
  endif(ENABLE_COBALT_RENDER_TREE)
  #
  list(APPEND COBALT_LIBS
    ${STARBOARD_PLATFORM_LIB}
    ${STARBOARD_ICU_INIT_LIB}
    ${STARBOARD_EZTIME_LIB}
    ${STARBOARD_COMMON_LIB}
    #
    ${COBALT_BASE_LIB}
    ${COBALT_NANOBASE_LIB}
    ${COBALT_SYSTEM_WINDOW_LIB}
    ${COBALT_SCRIPT_LIB}
    ${COBALT_V8_STUB_LIB}
    ${COBALT_DOM_EXCEPTION_LIB}
    ${COBALT_V8_STUB_LIB}
    ${COBALT_DOM_EXCEPTION_LIB}
    ${COBALT_UI_NAVIGATION_LIB}
    ${COBALT_MATH_LIB}
    ${COBALT_MEDIA_LIB}
    ${COBALT_PAGE_VISIBILITY_LIB}
    ${COBALT_CSSOM_LIB}
    ${COBALT_WEB_ANIMATIONS_LIB}
    ${COBALT_DOM_LIB}
    ${COBALT_INPUT_LIB}
    ${COBALT_LAYOUT_LIB}
    ${COBALT_DOM_PARSER_LIB}
    ${COBALT_OVERLAY_INFO_LIB}
    ${COBALT_CSS_PARSER_LIB}
    ${COBALT_GLIMP_LIB}
    ${COBALT_RENDERER_LIB}
  )

  #if(ENABLE_GNET)
  set(COBALT_LOADER_LIB_NAME
    cobalt_loader
  )
  list(APPEND COBALT_LIBS
    ${COBALT_LOADER_LIB_NAME}
  )
  #endif()

  #cobalt_csp
  if(TARGET_EMSCRIPTEN)
    set(ENABLE_COBALT_CSP FALSE)
  elseif(TARGET_LINUX)
    set(ENABLE_COBALT_CSP FALSE)#TRUE) # TODO
  else()
    message(FATAL_ERROR "platform not supported")
  endif()
  if(ENABLE_COBALT_CSP)
    set(COMMON_FLAGS "${COMMON_FLAGS} -DENABLE_COBALT_CSP=1")
    set(COBALT_CSP_LIB_NAME
      cobalt_csp
    )
    list(APPEND COBALT_LIBS
      ${COBALT_CSP_LIB_NAME}
    )
  endif(ENABLE_COBALT_CSP)
endif(ENABLE_COBALT)

# custom debug logger for wasm
set(PORT_OWN_DLOG TRUE)
if (PORT_OWN_DLOG)
  if (EMSCRIPTEN)
    set(EMCC_COMMON "${EMCC_COMMON} -DPORT_OWN_DLOG=1")
  elseif(TARGET_LINUX)
    set(COMMON_FLAGS "${COMMON_FLAGS} -DPORT_OWN_DLOG=1")
  else()
    message(FATAL_ERROR "platform not supported")
  endif()
endif(PORT_OWN_DLOG)

# https://github.com/emscripten-core/emscripten/issues/4932
# https://github.com/kosh04/newlisp/blob/master/newlisp.h#L164
# TODO
set(COMMON_FLAGS "${COMMON_FLAGS} -D_FILE_OFFSET_BITS=64")
set(COMMON_FLAGS "${COMMON_FLAGS} -D_LARGEFILE_SOURCE=1")
if(TARGET_EMSCRIPTEN)
  # TODO: -mnontrapping-fptoint
elseif(TARGET_LINUX)
  set(COMMON_FLAGS "${COMMON_FLAGS} -D_LARGEFILE64_SOURCE=1")
  set(COMMON_FLAGS "${COMMON_FLAGS} -DHAVE_PTHREAD=1")
  # Annotations useful when implementing condition variables such as CondVar,
  # using conditional critical sections (Await/LockWhen) and when constructing
  # user-defined synchronization mechanisms.
  set(COMMON_FLAGS "${COMMON_FLAGS} -DDYNAMIC_ANNOTATIONS_ENABLED=1")
else()
  message(FATAL_ERROR "platform not supported")
endif()

# NVALGRIND used in tcmalloc and third_party/valgrind.h
set(COMMON_FLAGS "${COMMON_FLAGS} -DNVALGRIND=1")

if(USE_SK_GPU)
  set(SK_COMMON_FLAGS "${SK_COMMON_FLAGS} -DSK_SUPPORT_GPU=1") # skia_enable_gpu
  set(SK_COMMON_FLAGS "${SK_COMMON_FLAGS} -DSK_SUPPORT_GPU") # skia_enable_gpu
endif(USE_SK_GPU)

set(SK_COMMON_FLAGS "${SK_COMMON_FLAGS} -DSK_DISABLE_READBUFFER=1")
#set(SK_COMMON_FLAGS "${SK_COMMON_FLAGS} -DLIBANGLE_IMPLEMENTATION=1")
#set(SK_COMMON_FLAGS "${SK_COMMON_FLAGS} -DLIBGLESV2_IMPLEMENTATION=1")
set(SK_COMMON_FLAGS "${SK_COMMON_FLAGS} -DLIBEGL_IMPLEMENTATION=1")
# see modules/skottie/utils/SkottieUtils.cpp
if(ENABLE_SKOTTIE)
  set(SK_COMMON_FLAGS "${SK_COMMON_FLAGS} -DSK_INCLUDE_MANAGED_SKOTTIE=1")
endif(ENABLE_SKOTTIE)

#set(SK_COMMON_FLAGS "${SK_COMMON_FLAGS} -DANGLE_ENABLE_ESSL=1")
#set(SK_COMMON_FLAGS "${SK_COMMON_FLAGS} -DANGLE_ENABLE_GLSL=1")
#set(SK_COMMON_FLAGS "${SK_COMMON_FLAGS} -DANGLE_ENABLE_HLSL=1")
#set(SK_COMMON_FLAGS "${SK_COMMON_FLAGS} -DANGLE_ENABLE_OPENGL=1")
set(SK_COMMON_FLAGS "${SK_COMMON_FLAGS} -DEGL_EGLEXT_PROTOTYPES=1")
#set(SK_COMMON_FLAGS "${SK_COMMON_FLAGS} -DGL_GLEXT_PROTOTYPES=1")
# https://github.com/klzgrad/naiveproxy/blob/master/src/third_party/skia/modules/skottie/BUILD.gn#L14
if(ENABLE_SKOTTIE)
  set(SK_COMMON_FLAGS "${SK_COMMON_FLAGS} -DSK_ENABLE_SKOTTIE=1")
endif(ENABLE_SKOTTIE)

if(TARGET_EMSCRIPTEN)
  # https://github.com/emscripten-core/emscripten/pull/7977
  # https://github.com/emscripten-ports/SDL2/pull/75
  # (new since 1.38.27) — leads to minor code size savings
  # NOTE: will drop support for DISABLE_DEPRECATED_FIND_EVENT_TARGET_BEHAVIOR=0 at 1.39
  # https://github.com/emscripten-core/emscripten/issues/8047
  # set(EMCC_COMMON "${EMCC_COMMON} -s DISABLE_DEPRECATED_FIND_EVENT_TARGET_BEHAVIOR=1")
  if ("${EMSCRIPTEN_VERSION}" VERSION_GREATER 1.38.27)
    # see https://github.com/emscripten-core/emscripten/blob/incoming/ChangeLog.md#v13827-02102019
    set(EMCC_COMMON "${EMCC_COMMON} -s DISABLE_DEPRECATED_FIND_EVENT_TARGET_BEHAVIOR=0")
  endif()

  set(EMCC_COMMON "${EMCC_COMMON} -DTARGET_EMSCRIPTEN")
  #
  if(ENABLE_WASM)
    #
    set(EMCC_COMMON "${EMCC_COMMON} -s WASM=1")
    #
    # Whether we should use binaryen's wasm2js to convert our wasm to JS. Set when
    # wasm backend is in use with WASM=0 (to enable non-wasm output, we compile to
    # wasm normally, then compile that to JS).
    # set(EMCC_COMMON "${EMCC_COMMON} -s WASM2JS=1")
    #
  endif(ENABLE_WASM)
  #
  #set(EMCC_COMMON "${EMCC_COMMON} -DEMSCRIPTEN_HAS_UNBOUND_TYPE_NAMES=0")
  set(EMCC_COMMON "${EMCC_COMMON} -s USE_FREETYPE=1")
  #set(EMCC_COMMON "${EMCC_COMMON} -s USE_LIBPNG=1")
  #set(EMCC_COMMON "${EMCC_COMMON} -D__EMSCRIPTEN__=1")

  # see https://github.com/endlessm/chromium-browser/blob/master/third_party/skia/third_party/skcms/skcms.cc#L1813
  #set(SK_COMMON_FLAGS "${SK_COMMON_FLAGS} -DSKCMS_PORTABLE=1")
  # NOTE: SKCMS_PORTABLE <=> __EMSCRIPTEN_major__

  # see https://github.com/google/skia/blob/e847af7e0d034cb67675ad8d605d5133b6189640/infra/bots/recipe_modules/build/default.py#L174
  # DGR_EGL_TRY_GLES3_THEN_GLES2

  # Tell ICU that we are a 32 bit platform, otherwise,
  # double-conversion-utils.h doesn't know how to operate.
  # set(EMCC_COMMON "${EMCC_COMMON} -D__i386__=1")

  # NOTE: This can add significant runtime overhead
  # Function pointers must be called with the correct type: it is undefined behavior
  # in C and C++ to cast a function pointer to another type and call it that way.
  # This does work in most native platforms, however, despite it being UB,
  # but in asm.js and in wasm it can fail
  # (Invalid function pointer called / implicit declaration of function)
  # see https://emscripten.org/docs/porting/guidelines/function_pointer_issues.html
  # TODO https://groups.google.com/forum/?nomobile=true#!topic/emscripten-discuss/slgrOM-BnCk
  #set(EMCC_COMMON "${EMCC_COMMON} -s EMULATE_FUNCTION_POINTER_CASTS=1")
  #
  # TODO bug: https://github.com/emscripten-core/emscripten/pull/8065
  # the problem comes when we use WASM and EMULATED_FUNCTION_POINTERS together,
  # i.e. dynamic linking. it generates the mftCall_X call but does not translate
  # it to an actual table call in the later passes.
  # -s EMULATED_FUNCTION_POINTERS=2.
  #set(EMCC_COMMON "${EMCC_COMMON} -s EMULATED_FUNCTION_POINTERS=1")

  #set(EMCC_COMMON "${EMCC_COMMON} -s SIDE_MODULE=1")

  if(RELEASE_BUILD)
    # remove duplicate functions, which C++ templates often create.
    # NOTE: done by default for wasm, in -O1 and above
    # NOTE: for wasm there is no need to set ELIMINATE_DUPLICATE_FUNCTIONS,
    # the binaryen optimizer does it automatically
    #set(EMCC_COMMON "${EMCC_COMMON} -s ELIMINATE_DUPLICATE_FUNCTIONS=1")
    #
    # EVAL_CTORS evaluates global data initializer constructors at link time,
    # which would improve startup time and reduce code size of these ctors.
    set(EMCC_COMMON "${EMCC_COMMON} -s EVAL_CTORS=1")
  endif(RELEASE_BUILD)

set(HAS_EMTERPRETIFY FALSE)
set(HAS_ASYNCIFY FALSE)

if (ENABLE_WEB_PTHREADS)
  #custom defines
  set(EMCC_COMMON "${EMCC_COMMON} -DHAVE_PTHREAD=1")
  #
  # PTHREADS
  #
  # pthread_join() on the main browser thread is not going to work!
  # or use PROXY_TO_PTHREAD
  # see https://github.com/emscripten-core/emscripten/pull/8286
  #
  # avoid having main thread synchronously block on a pthread
  # (the ".. sync blocking on main thread is bad.." mantra),
  # so dropping the pthread_join()
  # (and ensuring NO_EXIT_RUNTIME so runtime stays alive)
  # should also avoid the hang
  # https://github.com/emscripten-core/emscripten/issues/7535
  #
  # see https://developers.google.com/web/updates/2018/10/wasm-threads
  # see https://github.com/emscripten-core/emscripten/blob/incoming/tests/gl_only_in_pthread.cpp
  #
  # Embind doesn't work on pthreads
  # https://github.com/emscripten-core/emscripten/issues/8299
  #
  # At runtime, you can use the emscripten_has_threading_support()
  # function to test whether the currently executing code
  # was compiled with pthreads support enabled.
  # If this function returns true, then the currently executing code
  # was compiled with -s USE_PTHREADS=1
  # (and the current browser supports multithreading).
  #
  # Pthreads do not work in non-browser environments yet
  # (need Web Workers, or an alternative to them)
  #
  # DOM operations can only be done on the main thread
  # That includes things like printing to the console (!!!),
  # and even things like XMLHttpRequests!
  #
  # fopen(), fread(), printf(), fprintf() etc. are not multithreaded
  #
  # For backwards compatibility, two separate builds must be done,
  # one with -s USE_PTHREADS=1 and the other with -s USE_PTHREADS=0.
  #
  # see https://github.com/emscripten-core/emscripten/wiki/Pthreads-with-WebAssembly
  set(EMCC_COMMON "${EMCC_COMMON} -s USE_PTHREADS=1")
  # see https://github.com/emscripten-core/emscripten/issues/8503
  set(EMCC_COMMON "${EMCC_COMMON} -pthread")
  #set(EMCC_COMMON "${EMCC_COMMON} -Wl,--shared-memory") # unsupported on wasm
  #
  # When the linker flag -s PTHREAD_POOL_SIZE=<integer> is not specified
  # and pthread_create() is called, the new thread will not actually start
  # to run immediately, but the main JS thread must yield execution back
  # to browser first. This behavior is a result of #1049079.
  # https://github.com/emscripten-core/emscripten/issues/3636
  # NOTE: For web security purposes, there exists a fixed limit
  # (by default 20) of threads that can be spawned
  #set(EMCC_COMMON "${EMCC_COMMON} -s PTHREAD_POOL_SIZE=16")
  #set(EMCC_COMMON "${EMCC_COMMON} -s PTHREAD_POOL_SIZE=19")
  set(EMCC_COMMON "${EMCC_COMMON} -s PTHREAD_POOL_SIZE=8")
  #set(EMCC_COMMON "${EMCC_COMMON} -s PTHREAD_POOL_SIZE=1")
  #
  # see emscripten_num_logical_cores
  # https://github.com/hongkk/urho/blob/master/Source/Urho3D/Core/ProcessUtils.cpp#L449
  #set(EMCC_COMMON "${EMCC_COMMON} -s PTHREAD_HINT_NUM_CORES=8")
  #
  # Use the option -s PROXY_TO_PTHREAD=1 if you want to run
  # the main thread of a multithreaded application in a web worker.
  # if PROXY_TO_PTHREAD see emscripten_pthread_attr_settransferredcanvases
  # also see emscripten_current_thread_process_queued_calls
  # see https://github.com/emscripten-ports/SDL2/pull/77
  # see https://github.com/emscripten-core/emscripten/issues/8325
  # see https://github.com/emscripten-core/emscripten/issues/6009
  # see https://github.com/emscripten-core/emscripten/blob/incoming/tests/canvas_animate_resize.cpp
  # NOTE: USE_SDL and USE_PTHREAD/PROXY_TO_PTHREAD seem to be incompatible.
  # https://github.com/emscripten-core/emscripten/issues/6009
  # https://github.com/emscripten-core/emscripten/pull/8282
  # NOTE In that mode, you can drop the -s PTHREAD_POOL_SIZE
  # https://github.com/emscripten-core/emscripten/issues/8117
  #set(EMCC_COMMON "${EMCC_COMMON} -s PROXY_TO_PTHREAD=1")
  #
  # see https://github.com/emscripten-core/emscripten/pull/7672
  # PROXY_POSIX_SOCKETS
  #
  # PTHREADS_PROFILING
  #
  # debug traces for diagnosing pthreads related issues.
  # see https://github.com/emscripten-core/emscripten/blob/master/src/settings.js#L1117
  if(NOT RELEASE_BUILD)
    # set(EMCC_COMMON "${EMCC_COMMON} -s PTHREADS_DEBUG=1")
  endif(NOT RELEASE_BUILD)
  #
  # dlmalloc is necessary for multithreading, split memory, e.t.c.
  # default: dlmalloc
  # set(EMCC_COMMON "${EMCC_COMMON} -s MALLOC=dlmalloc")
  #
  # PTHREAD_WORKER_FILE
else(ENABLE_WEB_PTHREADS)
  # custom defines
  set(EMCC_COMMON "${EMCC_COMMON} -DDISABLE_PTHREADS=1")
  set(EMCC_COMMON "${EMCC_COMMON} -DUSE_FAKE_THREAD_LS=1")
  set(EMCC_COMMON "${EMCC_COMMON} -DDISABLE_LOCKS=1")
  #
  # deprecated, switching our backend from fastcomp to the upstream LLVM backend.
  # Both Asyncify and the Emterpreter can't work with that backend,
  # see https://github.com/emscripten-core/emscripten/issues/8561
  # ASYNCIFY has a bad worst-case of large code size:
  # If it needs to modify many methods, it can grow code size very significantly (even 10x more was seen)
  # Asyncify can make performance much slower, if it ends up splitting a function which you need to be fast.
  # setjmp/longjmp and C++ exception are not working!
  # emscripten_sleep requires ASYNCIFY!
  # see https://emscripten.org/docs/porting/asyncify.html
  #
  #set(EMCC_COMMON "${EMCC_COMMON} -s ASYNCIFY=1")
  #set(HAS_ASYNCIFY TRUE)
  #
  #
  # ASYNCIFY_WHITELIST=["qsort", "trinkle", "__toread", "__uflow", "__fwritex", "MUSL_vfprintf"]
  #
  # see https://emscripten.org/docs/porting/emterpreter.html
  #
  #set(EMCC_COMMON "${EMCC_COMMON} -s EMTERPRETIFY=1")
  #set(HAS_EMTERPRETIFY TRUE)
  #
  # see https://emscripten.org/docs/porting/emterpreter.html#emterpreter-async-run-synchronous-code
  #set(EMCC_COMMON "${EMCC_COMMON} -s EMTERPRETIFY_ASYNC=1")
  #
  # run parts of your codebase in an interpreter!
  # you can use -s EMTERPRETIFY_WHITELIST=@../empterpreter_whitelist.json
  # see ConditionVariable::Wait, ConditionVariable::TimedWait
  # see https://github.com/caiiiycuk/js-dos/blob/6.22/CMakeLists.txt
  # see https://github.com/caiiiycuk/js-dos/blob/6.22/js-dos-cpp/emterpretify.txt
  #set(EMCC_COMMON "${EMCC_COMMON} -s EMTERPRETIFY_WHITELIST=@${CMAKE_CURRENT_SOURCE_DIR}/assets/emterpretify_whitelist.txt")
  #set(EMCC_COMMON "${EMCC_COMMON} -s EMTERPRETIFY_WHITELIST=["qsort", "trinkle", "__toread", "__uflow", "__fwritex", "MUSL_vfprintf", "__Wait", "__TimedWait"]")
  #
  # ORIGINAL_EXPORTED_FUNCTIONS
  #
  # EXPORT_FUNCTION_TABLES
  #
  # EXPORTED_RUNTIME_METHODS=["FS_createFolder",
  #
  # DEFAULT_LIBRARY_FUNCS_TO_INCLUDE=["memcpy", "memset", "malloc", "free"]'
  # https://stackoverflow.com/a/55933880
  #set(EMCC_COMMON "${EMCC_COMMON} -s EXTRA_EXPORTED_RUNTIME_METHODS=["ccall", "cwrap"]")
  #
  # see https://stackoverflow.com/a/21220605
  # see https://stackoverflow.com/a/16725147
  # Create an "extern c" block.
  # Inside this block define the functions you want to expose to javascript.
  # These functions should be prefixed with an underscore.
  # Inside one of these functions you can instantiate your C++ class.
  # NOTE: EMSCRIPTEN_KEEPALIVE also exports the function, as if it were on EXPORTED_FUNCTIONS.
  # see https://emscripten.org/docs/getting_started/FAQ.html#why-do-functions-in-my-c-c-source-code-vanish-when-i-compile-to-javascript-and-or-i-get-no-functions-to-process
  #set(EMCC_COMMON "${EMCC_COMMON} -s EXPORTED_FUNCTIONS=["_main", "qsort", "trinkle", "__toread", "__uflow", "__fwritex", "MUSL_vfprintf", "__Wait", "__TimedWait"]")
  #set(EMCC_COMMON "${EMCC_COMMON} -s EXPORTED_FUNCTIONS=["_main", "qsort", "trinkle", "__toread", "__uflow", "__fwritex", "MUSL_vfprintf", "_Wait", "_TimedWait"]")
  #
  # You can optionally use -s 'EMTERPRETIFY_FILE="data.binary"' to store the emterpreter bytecode in a file
  #
endif(ENABLE_WEB_PTHREADS)

if (HAS_ASYNCIFY OR HAS_EMTERPRETIFY)
  #custom defines
  message(FATAL_ERROR "TODO: SUPPORT HAS_ASYNC")
  set(EMCC_COMMON "${EMCC_COMMON} -DHAS_ASYNC=1")
endif(HAS_ASYNCIFY OR HAS_EMTERPRETIFY)

  if(USE_SYSTEM_ZLIB)
    set(EMCC_COMMON "${EMCC_COMMON} -s USE_ZLIB=1")
  else()
    message(FATAL_ERROR "wasm requires SYSTEM ZLIB")
  endif(USE_SYSTEM_ZLIB)

  #set(EMCC_COMMON "${EMCC_COMMON} -s USE_BZIP2=1")

  if(USE_ICU AND NOT USE_CUSTOM_ICU)
    set(EMCC_COMMON "${EMCC_COMMON} -s USE_ICU=1")
  endif(USE_ICU AND NOT USE_CUSTOM_ICU)

  #set(EMCC_COMMON "${EMCC_COMMON} -s USE_LIBPNG=1")

  if(USE_EMCC_LIBJPEG_PORT)
    message(FATAL_ERROR "LIBJPEG port not supported yet")
    if ("${EMSCRIPTEN_VERSION}" VERSION_GREATER 1.38.32)
      message(STATUS "using LIBJPEG port, Emscripten version is ${EMSCRIPTEN_VERSION}")
    else()
      message(WARNING "can`t use LIBJPEG port, EMSCRIPTEN_VERSION is not present, or is older than 1.38.32: '${EMSCRIPTEN_VERSION}'")
    endif()
  endif()
  set(EMCC_COMMON "${EMCC_COMMON} -s USE_SDL=2")
  set(EMCC_COMMON "${EMCC_COMMON} -s USE_SDL_IMAGE=2")
  set(EMCC_COMMON "${EMCC_COMMON} -s USE_SDL_TTF=2")

if(RELEASE_BUILD)
  set(ENABLE_WEBGL_DEBUG_CHECKS FALSE)
endif(RELEASE_BUILD)

if (ENABLE_WEBGL2 OR ENABLE_WEBGL1)
  #
  # WEBGL (see also OFFSCREEN_CAVAS settings)
  #
  # see https://bugs.chromium.org/p/skia/issues/detail?id=9052&q=&sort=-modified&colspec=ID%20Type%20Status%20Priority%20M%20Area%20Owner%20Summary%20Modified
  # see https://github.com/emscripten-core/emscripten/blob/master/src/settings.js#L369
  # see https://www.khronos.org/registry/webgl/specs/2.0/#4.1.2
  # TODO: check freezes with threads
  if (ENABLE_WEBGL2)
    set(EMCC_COMMON "${EMCC_COMMON} -s USE_WEBGL2=1")
    # custom defines
    set(EMCC_COMMON "${EMCC_COMMON} -DWEBGL2_SUPPORT=1")
    #
    # emulates some WebGL 1 features on WebGL 2 contexts
    # see https://github.com/emscripten-core/emscripten/blob/master/src/settings.js#L394
    # performs a string search-replace based automatic migration of #version 100 shaders to #version 300 es
    set(EMCC_COMMON "${EMCC_COMMON} -s WEBGL2_BACKWARDS_COMPATIBILITY_EMULATION=1")
  endif(ENABLE_WEBGL2)
  # ES3/ES2
  if (ENABLE_WEBGL2)
    # Forces support for all GLES3 features, not just the WebGL2-friendly subset.
    set(EMCC_COMMON "${EMCC_COMMON} -s FULL_ES3=1")
  elseif (ENABLE_WEBGL1)
    # // Forces support for all GLES2 features, not just the WebGL-friendly subset.
    # set(EMCC_COMMON "${EMCC_COMMON} -s FULL_ES2=1")
  endif(ENABLE_WEBGL2)
  if (ENABLE_WEBGL_DEBUG_CHECKS)
    #
    # see https://emscripten.org/docs/porting/multimedia_and_graphics/OpenGL-support.html?highlight=use_webgl2#emulation-of-older-desktop-opengl-api-features
    # Incomplete but useful
    # cannot emulate both ES2/ES3 and legacy GL
    # set(EMCC_COMMON "${EMCC_COMMON} -s LEGACY_GL_EMULATION=1")

    # see https://github.com/emscripten-core/emscripten/blob/master/src/settings.js#L369
    # debug printing of WebGL related operations
    # set(EMCC_COMMON "${EMCC_COMMON} -s GL_DEBUG=1")
    #
    #set(EMCC_COMMON "${EMCC_COMMON} -s TRACE_WEBGL_CALLS=1")
    #
    # Adds extra checks for error situations in the GL library.
    # Can impact performance.
    # see https://github.com/emscripten-core/emscripten/blob/master/src/settings.js#L362
    set(EMCC_COMMON "${EMCC_COMMON} -s GL_ASSERTIONS=1")
    #
    #set(EMCC_COMMON "${EMCC_COMMON} -s GL_UNSAFE_OPTS=0")
  endif(ENABLE_WEBGL_DEBUG_CHECKS)
endif(ENABLE_WEBGL2 OR ENABLE_WEBGL1)

# BUG: causes functions count of 1344484 exceeds internal limit of 1000000
if(NOT RELEASE_BUILD)
  # NOTE: Catching C++ exceptions is turned off by default in -O1 (and above)
  # see https://github.com/emscripten-core/emscripten/blob/master/src/settings.js#L456
  # DISABLE_EXCEPTION_CATCHING = 0 - generate code to actually catch exceptions
  # DISABLE_EXCEPTION_CATCHING = 1 - disable exception catching at all
  # DISABLE_EXCEPTION_CATCHING = 2 - disable exception catching, but enables
  #                                  catching in whitelist
  #set(EMCC_COMMON "${EMCC_COMMON} -s DISABLE_EXCEPTION_CATCHING=0")
  # Enables catching exception in the listed functions only,
  # if DISABLE_EXCEPTION_CATCHING = 2 is set
  #set(EMCC_COMMON "${EMCC_COMMON} -s EXCEPTION_CATCHING_WHITELIST=[]")
endif(NOT RELEASE_BUILD)

  # https://github.com/emscripten-core/emscripten/issues/3773
  # requires merge of https://github.com/luser/emscripten/commits/webrtc-sockets
  # should be complete and running on master.
  # -s SOCKET_WEBRTC=1

if(NOT RELEASE_BUILD)
  # -s DEMANGLE_SUPPORT to choose whether to compile the
  # application with libcxxabi-provided demangling support ___cxa_demangle().
  # If 1, build in libcxxabi's full c++ demangling code, to allow stackTrace()
  #                        // to emit fully proper demangled c++ names
  # see https://emscripten.org/docs/api_reference/emscripten.h.html?highlight=demangle#c.EM_LOG_DEMANGLE
  # see https://github.com/emscripten-core/emscripten/blob/incoming/src/settings.js#L288
  set(EMCC_COMMON "${EMCC_COMMON} -s DEMANGLE_SUPPORT=1")
else()
  # https://emscripten.org/docs/optimizing/Optimizing-Code.html#c-rtti
  set(EMCC_COMMON "${EMCC_COMMON} -fno-exceptions")
endif(NOT RELEASE_BUILD)

  set(SK_COMMON_FLAGS "${SK_COMMON_FLAGS} -DSK_RELEASE=1")
  set(SK_COMMON_FLAGS "${SK_COMMON_FLAGS} -DNDEBUG=1")

  # https://github.com/google/skia/blob/master/BUILD.gn#L502
  # set(SK_COMMON_FLAGS "${SK_COMMON_FLAGS} -DSKSL_STANDALONE") # if (skia_compile_processors)
  #set(SK_COMMON_FLAGS "${SK_COMMON_FLAGS} -DSK_DISABLE_LEGACY_SHADERCONTEXT=1")
  #set(SK_COMMON_FLAGS "${SK_COMMON_FLAGS} -DSK_DISABLE_LOWP_RASTER_PIPELINE=1")
  #set(SK_COMMON_FLAGS "${SK_COMMON_FLAGS} -DSK_FORCE_RASTER_PIPELINE_BLITTER=1")
  set(SK_COMMON_FLAGS "${SK_COMMON_FLAGS} -DSK_ASSUME_WEBGL=1") # see skia_gl_standard
  #set(SK_COMMON_FLAGS "${SK_COMMON_FLAGS} -DSK_ASSUME_GL_ES=1") # see skia_gl_standard
  #set(SK_COMMON_FLAGS "${SK_COMMON_FLAGS} -DSK_ASSUME_GL=1") # see skia_gl_standard
  set(EMCC_COMMON "${EMCC_COMMON} -DIS_WEBGL=1")
  # see https://github.com/xzwang2005/Prelude/blob/master/third_party/skia/src/pathops/SkPathOpsTypes.cpp#L106
  #if(ENABLE_SKOTTIE)
    #set(SK_COMMON_FLAGS "${SK_COMMON_FLAGS} -DSKOTTIE_HACK")
  #endif(ENABLE_SKOTTIE)
  # https://github.com/qinjidong/qt5.13/blob/master/src/qtwebengine/src/3rdparty/${CHROMIUM_DIR}third_party/skia/experimental/canvaskit/compile.sh
  if(NOT ENABLE_SIMD)
    set(SK_COMMON_FLAGS "${SK_COMMON_FLAGS} -DSKNX_NO_SIMD") # see "-s SIMD=1" and -msimd128
  endif(NOT ENABLE_SIMD)
  set(SK_COMMON_FLAGS "${SK_COMMON_FLAGS} -DSK_DISABLE_AAA")
  set(SK_COMMON_FLAGS "${SK_COMMON_FLAGS} -DSK_DISABLE_EFFECT_DESERIALIZATION")
  set(SK_COMMON_FLAGS "${SK_COMMON_FLAGS} -DWEB_ASSEMBLY=1")
  #set(SK_COMMON_FLAGS "${SK_COMMON_FLAGS} -DSK_BUILD_FOR_PATHKIT=1")
  set(SK_COMMON_FLAGS "${SK_COMMON_FLAGS} -DSK_SUPPORT_OPENCL=0")
  set(SK_COMMON_FLAGS "${SK_COMMON_FLAGS} -DSK_SAMPLES_FOR_X=1") # always set for linux, even if there's no X used
  set(SK_COMMON_FLAGS "${SK_COMMON_FLAGS} -DSK_HAS_PNG_LIBRARY=1") # skia_use_libpng

  # CLANG_ATOMICS for ICU lib
  # see https://github.com/emscripten-core/emscripten/commit/9c4dfa12feb2b3d68bc2a44ad42b95f3b647728d
  # see https://github.com/h-s-c/libKD/blob/master/source/kd_atomic_ops.c#L202
  # set(EMCC_COMMON "${EMCC_COMMON} -DU_HAVE_CLANG_ATOMICS=0")

  # https://github.com/Rusino/skia/blob/master/BUILD.gn#L1688
  # NOTE: on wasm  by default skia don`t use harfbuzz skshaper
  if(ENABLE_SKSHAPER)
    set(SK_COMMON_FLAGS "${SK_COMMON_FLAGS} -DSK_USING_SKSHAPER=1") # skia_enable_skshaper
  endif(ENABLE_SKSHAPER)
  if(ENABLE_WUFFS)
    set(SK_COMMON_FLAGS "${SK_COMMON_FLAGS} -DSK_HAS_WUFFS_LIBRARY=1") # skia_use_wuffs
  endif(ENABLE_WUFFS)
  # SK_HAS_WEBP_LIBRARY # skia_use_libwebp
  # SK_XML # skia_use_expat
  # https://github.com/Rusino/skia/blob/master/BUILD.gn#L191
  #set(SK_COMMON_FLAGS "${SK_COMMON_FLAGS} -DSK_ALLOW_STATIC_GLOBAL_INITIALIZERS=0") # don`t redefine

  # Check each write to the heap, for example, this will give a clear error
  # on what would be segfaults in a native build (like dereferencing 0)
  # see https://github.com/emscripten-core/emscripten/blob/master/src/settings.js#L262
  # see https://emscripten.org/docs/porting/Debugging.html#memory-alignment-issues
  if(NOT RELEASE_BUILD)
    if(EMSCRIPTEN_USE_SAFE_HEAP AND EMSCRIPTEN_USE_SAFE_HEAP)
      message(WARNING "SAFE_HEAP may break SOURCE_MAP, see https://github.com/emscripten-core/emscripten/issues/8584#issuecomment-495411386")
    endif()
    if(EMSCRIPTEN_USE_SAFE_HEAP)
      #
      # NOTE: SAFE_HEAP breaks source maps
      # see https://github.com/emscripten-core/emscripten/issues/8584#issuecomment-495411386
      #
      set(EMCC_COMMON "${EMCC_COMMON} -s SAFE_HEAP=1")
    endif()
    # Build with SAFE_HEAP=1 and function pointer aliasing disabled.
    # This should make it impossible for a function pointer to
    # be called with the wrong type without raising an error
    # ALIASING_FUNCTION_POINTERS=0 is also useful because it ensures
    # that calls to function pointer addresses in the wrong table result
    # in clear errors. Without this setting such calls just execute
    # whatever function is at the address, which can be much harder to debug.
    set(EMCC_COMMON "${EMCC_COMMON} -s ALIASING_FUNCTION_POINTERS=0")
  endif(NOT RELEASE_BUILD)

  # EMTERPRETIFY is not compatible with source maps
  # (maps are not useful in emterpreted code,
  # and splitting out non-emterpreted source maps is not yet implemented)
  if (HAS_EMTERPRETIFY)
    message(FATAL_ERROR "TODO: REMOVE EMTERPRETIFY FLAGS")
  else(HAS_EMTERPRETIFY)
    if(EMSCRIPTEN_USE_SOURCE_MAP)
      # see http://webassemblycode.com/using-browsers-debug-webassembly/
      set(EMCC_COMMON "${EMCC_COMMON} --source-map-base http://localhost:9090/")
    endif()
  endif(HAS_EMTERPRETIFY)

  if(HAS_EMTERPRETIFY AND EMSCRIPTEN_USE_SOURCE_MAP)
    message(FATAL_ERROR "EMTERPRETIFY breaks source map")
  endif()

  if(NOT RELEASE_BUILD)
    # -g4: Preserve LLVM debug information. This is the highest level of debuggability
    # see https://emscripten.org/docs/tools_reference/emcc.html#emcc-compiler-optimization-options
    set(DEBUG_LEVEL_DEFAULT "-g4")
    #
    # NOTE: -01 and higher by default discard LLVM debug information
    if(NOT DEBUG_LEVEL)
      set(DEBUG_LEVEL "${DEBUG_LEVEL} ${DEBUG_LEVEL_DEFAULT}")
    else()
      # NOTE: DEBUG_LEVEL may contain not only "-g4" (multiple flags allowed)
      if(EMSCRIPTEN_USE_SOURCE_MAP AND NOT DEBUG_LEVEL MATCHES "-g4")
        message(WARNING "SOURCE_MAP requires DEBUG_LEVEL = -g4. Your DEBUG_LEVEL=${DEBUG_LEVEL}")
      endif()
    endif(NOT DEBUG_LEVEL)
  else()
    # force g0 to reduce the size
    set(DEBUG_LEVEL "${DEBUG_LEVEL} -g0")
  endif(NOT RELEASE_BUILD)
  # see above
  set(EMCC_COMMON "${EMCC_COMMON} ${DEBUG_LEVEL}")

  # TODO EMCC_LINKER_FLAGS

  # see https://doc.magnum.graphics/magnum/platforms-html5.html#platforms-html5-code-size
  # see https://emscripten.org/docs/tools_reference/emcc.html#emcc-oz
  # NOTE: compile with -O1 or -O0 to see crash message/assert
  if(RELEASE_BUILD)
    #set(EMCC_COMMON "${EMCC_COMMON} -O1")
    # best performance. This is a good setting for a release build (!!!)
    if(NOT OPTIMIZE_LEVEL)
      set(OPTIMIZE_LEVEL "${OPTIMIZE_LEVEL} -O3")
    endif(NOT OPTIMIZE_LEVEL)
    # reduces code size at the expense of performance (!!!)
    #set(EMCC_COMMON "${EMCC_COMMON} -Os")
    # Oz reduces code size even further at the expense of performance (!!!)
    # see https://github.com/emscripten-core/emscripten/issues/362
    # NOTE: -O3 = best performance. -Oz = best size.
    #set(EMCC_COMMON "${EMCC_COMMON} -Oz")
  else(RELEASE_BUILD)
    # set(EMCC_COMMON "${EMCC_COMMON} -O0")
    # NOTE Catching C++ exceptions is turned off by default in -O1 (and above).
    if(NOT OPTIMIZE_LEVEL) # TODO
      set(OPTIMIZE_LEVEL "${OPTIMIZE_LEVEL} -O1")
      #set(OPTIMIZE_LEVEL "${OPTIMIZE_LEVEL} -O2")
    endif(NOT OPTIMIZE_LEVEL)
    #
    if(EMSCRIPTEN_USE_SOURCE_MAP AND EMSCRIPTEN_USE_PROFILING)
      message(WARNING "--profiling may break SOURCE_MAP, see https://github.com/emscripten-core/emscripten/issues/8584#issuecomment-495344200")
    endif()
    if(EMSCRIPTEN_USE_PROFILING)
      #
      # breaks source maps. see https://github.com/emscripten-core/emscripten/issues/8584#issuecomment-495344200
      # see https://emscripten.org/docs/tools_reference/emcc.html#emcc-compiler-optimization-options
      set(EMCC_COMMON "${EMCC_COMMON} --profiling")
      #
      ## see https://emscripten.org/docs/tools_reference/emcc.html#emcc-compiler-optimization-options
      set(EMCC_COMMON "${EMCC_COMMON} --profiling-funcs")
    endif(RELEASE_BUILD)
    #
    message(STATUS "OPTIMIZE_LEVEL=${OPTIMIZE_LEVEL}")
    #
    ## see https://emscripten.org/docs/tools_reference/emcc.html#emcc-compiler-optimization-options
    #set(EMCC_COMMON "${EMCC_COMMON} --tracing")
    #
    ## allows you, for example, to reconstruct meaningful stack traces.
    ## see https://habr.com/ru/post/343784/
    if(EMSCRIPTEN_EMIT_SYMBOL_MAP)
      set(EMCC_COMMON "${EMCC_COMMON} --emit-symbol-map")
    endif(EMSCRIPTEN_EMIT_SYMBOL_MAP)
    #
    ## Enables warnings about the use of absolute paths in -I and -L command line directives.
    ## set(EMCC_COMMON "${EMCC_COMMON} -Wwarn-absolute-paths")
    ## see https://emscripten.org/docs/tools_reference/emcc.html#emcc-compiler-optimization-options
    #
    if(EMSCRIPTEN_MEMORY_PROFILER)
      set(EMCC_COMMON "${EMCC_COMMON} --memoryprofiler")
    endif(EMSCRIPTEN_MEMORY_PROFILER)
    ## see https://emscripten.org/docs/tools_reference/emcc.html#emcc-compiler-optimization-options
    #
    if (ENABLE_WEB_PTHREADS AND EMSCRIPTEN_THREAD_PROFILER)
      set(EMCC_COMMON "${EMCC_COMMON} --threadprofiler")
    endif(ENABLE_WEB_PTHREADS AND EMSCRIPTEN_THREAD_PROFILER)
    #
    #set(EMCC_COMMON "${EMCC_COMMON} -DPATHKIT_TESTING") # TODO
  endif(RELEASE_BUILD)
  # see above
  set(EMCC_COMMON "${EMCC_COMMON} ${OPTIMIZE_LEVEL}")
  #
  # TODO: remove some DEAD FUNCTIONS to improve skia webassembly size
  # -s DEAD_FUNCTIONS
  #
  # With --use-preload-plugins, files can be automatically decoded based on their extension.
  # see https://emscripten.org/docs/porting/files/packaging_files.html
  #set(EMCC_COMMON "${EMCC_COMMON} --preload-file resources --use-preload-plugins")
  # https://emscripten.org/docs/getting_started/FAQ.html#why-does-my-code-break-and-gives-odd-errors-when-using-o2-closure-1
  #set(EMCC_COMMON "${EMCC_COMMON} --closure 1") # UNSAFE optimization
  # Enables LLVM link-time optimizations (LTO)
  # --llvm-lto N: this controls LLVM’s LTO (Link-Time-Optimization) pass,
  # 1 seems to produce the best tradeoff between size and speed for my code.
  # Bigger values seem to do more inlining
  # and produce bigger code for little performance increase.
  #set(EMCC_COMMON "${EMCC_COMMON} --llvm-lto 1") # UNSAFE optimization
  # set(EMCC_COMMON "${EMCC_COMMON} --llvm-lto 3") # UNSAFE optimization
  if(ENABLE_SIMD)
    if(ENABLE_WASM)
      # TODO: test if it may increase performance
      # To enable WASM SIMD, pass the -msimd128 flag at compile time
      # see Limitations and behavioral differences (!!!) from
      # https://github.com/emscripten-core/emscripten/pull/8582/commits/1ab1600024823d430ce08bddd4e000e822d75c7d
      # TODO: check simd test suite
      # cd "$(dirname "$(which emsdk)" )"
      # EMCC_DEBUG=1 python tests/runner.py simd2
      # NOTE: run brower with --js-flags="--experimental-wasm-simd"
      set(EMCC_COMMON "${EMCC_COMMON} -msimd128")
      set(EMCC_COMMON "${EMCC_COMMON} -mmsse")
    else(ENABLE_WASM)
      # NOTE: Emscripten's SIMD.js support should be considered deprecated and may be removed
      # see https://github.com/emscripten-core/emscripten/pull/8582/commits/1ab1600024823d430ce08bddd4e000e822d75c7d
      # set(EMCC_COMMON "${EMCC_COMMON} -s SIMD=1")
      message(FATAL_ERROR "SIMD can be enabled only on WASM, for now")
    endif(ENABLE_WASM)
  endif(ENABLE_SIMD)


  set(EMCC_COMMON "${EMCC_COMMON} -s ERROR_ON_MISSING_LIBRARIES=1")
  set(EMCC_COMMON "${EMCC_COMMON} -s ERROR_ON_UNDEFINED_SYMBOLS=1")
  #set(EMCC_COMMON "${EMCC_COMMON} -s SDL2_IMAGE_FORMATS='[\"png\"]'")

  #
  # FILESYSTEM
  #
  # if your C code uses no files, but you include
  # some JS that does, you might need this.
  # see https://github.com/emscripten-core/emscripten/blob/master/src/settings.js#L549
  #set(EMCC_COMMON "${EMCC_COMMON} -s FORCE_FILESYSTEM=1")
  #
  #set(EMCC_COMMON "${EMCC_COMMON} -s NO_FILESYSTEM=1")
  #
  # If set to 1, uses the multithreaded filesystem that is implemented within the
  # asm.js module, using emscripten_fetch.
  # Implies -s FETCH=1 (!!!)
  # see https://github.com/emscripten-core/emscripten/blob/master/src/settings.js#L1214
  #set(EMCC_COMMON "${EMCC_COMMON} -s ASMFS=1")
  # enables emscripten_fetch API.
  # see https://github.com/emscripten-core/emscripten/blob/master/src/settings.js#L1214
  #set(EMCC_COMMON "${EMCC_COMMON} -s FETCH=1")
  # FETCH_DEBUG
  #
  # Log all FS operations.
  # see https://github.com/emscripten-core/emscripten/blob/master/src/settings.js#L524
  # set(EMCC_COMMON "${EMCC_COMMON} -s FS_LOG=1")
  #
  #set(EMCC_COMMON "${EMCC_COMMON} -s CASE_INSENSITIVE_FS=1")

  #set(EMCC_COMMON "${EMCC_COMMON} -s MODULARIZE=1")

  # also enables STACK_OVERFLOW_CHECK
  # see https://emscripten.org/docs/porting/Debugging.html
  # see https://github.com/emscripten-core/emscripten/blob/master/src/settings.js#L41
  if(NOT RELEASE_BUILD)
    if(EMSCRIPTEN_ASSERTION_LEVEL MATCHES "1")
      set(EMCC_COMMON "${EMCC_COMMON} -s ASSERTIONS=1")
    elseif(EMSCRIPTEN_ASSERTION_LEVEL MATCHES "2")
      # ASSERTIONS == 2 gives even more runtime checks
      set(EMCC_COMMON "${EMCC_COMMON} -s ASSERTIONS=2")
    else()
      message(FATAL_ERROR
        "You need to set EMSCRIPTEN_ASSERTION_LEVEL for debug build.
        Current EMSCRIPTEN_ASSERTION_LEVEL=${EMSCRIPTEN_ASSERTION_LEVEL}"
      )
    endif()
  endif(NOT RELEASE_BUILD)

  # see https://github.com/emscripten-core/emscripten/blob/master/src/settings.js#L443
  #set(EMCC_COMMON "${EMCC_COMMON} -s LZ4=1")

  # In theory there should be no limit, but in practice,
  # 2GB is a practical limit because many (all?)
  # browsers apply that limit, in particular I know Chrome and Firefox do.
  # https://github.com/emscripten-core/emscripten/issues/6566
  # Memory growth is not yet supported with pthreads!
  #set(EMCC_COMMON "${EMCC_COMMON} -s ALLOW_MEMORY_GROWTH=1")
  # TOTAL_MEMORY: multiple of 16MB
  #set(EMCC_COMMON "${EMCC_COMMON} -s TOTAL_MEMORY=512MB")
  set(EMCC_COMMON "${EMCC_COMMON} -s TOTAL_MEMORY=1024MB")
  #set(EMCC_COMMON "${EMCC_COMMON} -s TOTAL_MEMORY=512MB")

  # Also remember to pass -s NO_EXIT_RUNTIME=1 if you want pthreads to stay alive
  # when main() exits on the main thread, otherwise they will be terminated
  # as the C runtime closes at the end of main().
  set(EMCC_COMMON "${EMCC_COMMON} -s NO_EXIT_RUNTIME=1")

  # Warn at compile time about instructions that LLVM tells us are not fully
  # aligned.  This is useful to find places in your code where you might refactor
  # to ensure proper alignment.
  # see https://github.com/emscripten-core/emscripten/blob/incoming/src/settings.js#L161
  if(NOT RELEASE_BUILD)
    # This is currently only supported in asm.js, not  wasm (!!!)
    #set(EMCC_COMMON "${EMCC_COMMON} -s WARN_UNALIGNED=1")
  endif(NOT RELEASE_BUILD)

  # if GL context must be used in web workers - enable SWAP_CONTROL
  #set(HAVE_SWAP_CONTROL TRUE)
  set(HAVE_SWAP_CONTROL FALSE)
  if(HAVE_SWAP_CONTROL)
    # custom defines
    set(EMCC_COMMON "${EMCC_COMMON} -DHAVE_SWAP_CONTROL=1")
    #
    # offscreen canvas
    #
    # emscripten_webgl_commit_frame requires offscreen canvas support
    # see https://github.com/emscripten-core/emscripten/issues/5437
    # see explicitSwapControl
    #
    set(EMCC_COMMON "${EMCC_COMMON} -s OFFSCREENCANVAS_SUPPORT=1")
    #
    # When building simultaneously with both -s OFFSCREEN_FRAMEBUFFER=1
    # and -s OFFSCREENCANVAS_SUPPORT=1 linker flags enabled,
    # offscreen backbuffer can be used as a polyfill-like compatibility
    # fallback to enable rendering WebGL from a pthread when the browser
    # does not support the OffscreenCanvas API.
    # see https://github.com/emscripten-core/emscripten/pull/4412
    set(EMCC_COMMON "${EMCC_COMMON} -s OFFSCREEN_FRAMEBUFFER=1")
  endif(HAVE_SWAP_CONTROL)

else(EMSCRIPTEN)

  if(TARGET_LINUX)
    find_package(LibDL REQUIRED)
    set(libDL_LIB LIBDL::LIBDL)
  endif()

  set(SK_COMMON_FLAGS "${SK_COMMON_FLAGS} -DSK_ASSUME_GL=1")

  # set -DCMAKE_BUILD_TYPE=Debug
  # see https://stackoverflow.com/a/25199377/10904212
  if(NOT RELEASE_BUILD)

    if(NOT DEBUG_LEVEL)
      set(DEBUG_LEVEL "${DEBUG_LEVEL} -g")
    endif(NOT DEBUG_LEVEL)
    if(NOT OPTIMIZE_LEVEL)
      set(OPTIMIZE_LEVEL "${OPTIMIZE_LEVEL} -O0")
    endif(NOT OPTIMIZE_LEVEL)
  else()
    if(NOT OPTIMIZE_LEVEL)
      set(OPTIMIZE_LEVEL "${OPTIMIZE_LEVEL} -O3")
    endif(NOT OPTIMIZE_LEVEL)
    set(COMMON_FLAGS "${COMMON_FLAGS} -O3")
  endif(NOT RELEASE_BUILD)
  # see above
  set(COMMON_FLAGS "${COMMON_FLAGS} ${OPTIMIZE_LEVEL}")
  set(COMMON_FLAGS "${COMMON_FLAGS} ${DEBUG_LEVEL}")

  if(USE_OPENGL_LIB)
    find_package(OpenGL
      COMPONENTS OpenGL EGL
      REQUIRED)
    if(OPENGL_FOUND)
      set(FOUND_OPENGL_LIBRARIES ${OPENGL_LIBRARIES})
      set(FOUND_OPENGL_INCLUDE_DIR ${OPENGL_INCLUDE_DIR})
      #
      message(STATUS "OPENGL_LIBRARIES = ${OPENGL_LIBRARIES} ")
      message(STATUS "OPENGL_INCLUDE_DIR = ${OPENGL_INCLUDE_DIR} ")
    endif()
  endif(USE_OPENGL_LIB)

  if(USE_OPENGLES2_LIB)
    find_package(OpenGLES2 REQUIRED)
    if(OPENGLES2_FOUND)
      message(STATUS "OPENGLES2_DEFINITIONS = ${OPENGLES2_DEFINITIONS} ")
      message(STATUS "OPENGLES2_LIBRARIES = ${OPENGLES2_LIBRARIES} ")
      message(STATUS "OPENGLES2_INCLUDE_DIRS = ${OPENGLES2_INCLUDE_DIRS} ")
      #set(USE_OPENGLES2_LIB TRUE)
    endif()
  endif(USE_OPENGLES2_LIB)

  #message(FATAL_ERROR "OPENGLES2_LIBRARIES = ${OPENGLES2_LIBRARIES} ")

  find_package(SDL2 REQUIRED)
  if(SDL2_FOUND)
    message("Found SDL2 libraries")
    message("SDL2_INCLUDE_DIR = ${SDL2_INCLUDE_DIR} ")
    message("SDL2_LIBRARY = ${SDL2_LIBRARY} ")
    add_definitions(-DUSE_SDL2_LIB)
  endif ()

  #find_package(SDL2_net REQUIRED)
  #if(SDL2_net_FOUND)
  #  message(STATUS "Found SDL2_net libraries")
  #  message(STATUS "SDL2_net_INCLUDE_DIR = ${SDL2_net_INCLUDE_DIR} ")
  #  message(STATUS "SDL2_net_LIBRARY = ${SDL2_net_LIBRARY} ")
  #  add_definitions(-DUSE_SDL2_net_LIB)
  #endif ()

  #include(sdl2/FindSDL2_ttf.cmake)
  find_package(SDL2_ttf REQUIRED)
  if(SDL2_ttf_FOUND)
    message(STATUS "Found SDL2_ttf libraries")
    message(STATUS "SDL2_TTF_INCLUDE_DIR = ${SDL2_TTF_INCLUDE_DIR} ")
    message(STATUS "SDL2_TTF_LIBRARY = ${SDL2_TTF_LIBRARY} ")
    add_definitions(-DUSE_SDL2_ttf_LIB)
  endif ()

  set(HAS_GLEW_LIB FALSE)
  find_package(GLEW REQUIRED) # First try to find using the find_package method (works with vcpkg)
  if(GLEW_FOUND) # Works with some other methods
    message(STATUS "GLEW_INCLUDE_PATH=${GLEW_INCLUDE_PATH}")
    message(STATUS "GLEW_LIBRARY=${GLEW_LIBRARY}")
    set(HAS_GLEW_LIB TRUE)
  endif()

  if(USE_SYSTEM_ZLIB)
    #message(FATAL_ERROR "NOT SUPPORTED") # TODO
    find_package(ZLIB REQUIRED) # ZLIB::ZLIB
    set(libZLIB_LIB ZLIB::ZLIB)
    # see chromium/third_party/zlib/google/compression_utils.cc
    # TODO
    # set(COMMON_FLAGS "${COMMON_FLAGS} -DUSE_SYSTEM_ZLIB=1")
    list(APPEND APP_DEFINITIONS USE_SYSTEM_ZLIB=1)
  else()
    set(libZLIB_LIB GZLIB)
  endif()

  find_package(Freetype)

  if(ENABLE_HARFBUZZ AND NOT USE_CUSTOM_HARFBUZZ)
    # harfbuzz
    set(USE_SHARED_HARFBUZZ "true")
    if(USE_SHARED_HARFBUZZ)
      find_package(HarfBuzz REQUIRED)
    else()
      set(HARFBUZZ_LIBRARIES harfbuzz)
      set(HARFBUZZ_INCLUDE_DIRS ${harfbuzz_FULL_DIR}/src)
    endif()
    message(STATUS "HARFBUZZ_LIBRARIES=${HARFBUZZ_LIBRARIES}")
    message(STATUS "HARFBUZZ_INCLUDE_DIRS=${HARFBUZZ_INCLUDE_DIRS}")
    # custom flags
    set(COMMON_FLAGS "${COMMON_FLAGS} -DENABLE_HARFBUZZ=1")
  endif(ENABLE_HARFBUZZ AND NOT USE_CUSTOM_HARFBUZZ)

endif(TARGET_EMSCRIPTEN)

# custom flags
if(ENABLE_WTF)
  list(APPEND APP_DEFINITIONS ENABLE_BASE=1)
  # NOTE: WTF requires BASE
  list(APPEND APP_DEFINITIONS ENABLE_WTF=1)
endif(ENABLE_WTF)

# NOTE: header from SKIA_EXT
#set(SK_COMMON_FLAGS "${SK_COMMON_FLAGS} -DSK_USER_CONFIG_HEADER=\\\"${SKIA_EXT_DIR}config/SkUserConfig.h\\\"")
# NOTE: modified SkUserConfig.h
#set(SK_COMMON_FLAGS "${SK_COMMON_FLAGS} -DSK_REF_CNT_MIXIN_INCLUDE=\\\"${SKIA_EXT_DIR}config/sk_ref_cnt_ext_release.h\\\"")

#
set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${COMMON_C_FLAGS}")
#
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${COMMON_CXX_FLAGS}")
#
set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${COMMON_FLAGS}")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${COMMON_FLAGS}")

#
set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${SK_COMMON_FLAGS}")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${SK_COMMON_FLAGS}")
#
# set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${ICU_DEFINES}")
# set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${ICU_DEFINES}")
#
if(TARGET_EMSCRIPTEN)
  set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${EMCC_COMMON}")
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${EMCC_COMMON}")
endif(TARGET_EMSCRIPTEN)

include(ExternalProject)

## re2
if((ENABLE_BLINK OR ENABLE_COBALT) AND NOT ENABLE_GRE2)
  message(WARNING "AUTO ENABLED GRE2")
  set(ENABLE_GRE2 TRUE)
endif()
if(ENABLE_GRE2)
  set(GRE2_PARENT_DIR ${CHROMIUM_DIR}third_party/)
  set(GRE2_DIR ${GRE2_PARENT_DIR}re2/)
  include(${CHROMIUM_DIR}GRE2.cmake)
endif(ENABLE_GRE2)
#
## libxml
#if((ENABLE_BLINK OR ENABLE_COBALT) AND NOT ENABLE_GLIBXML)
#  message(WARNING "AUTO ENABLED GLIBXML")
#  set(ENABLE_GLIBXML TRUE)
#endif()
#set(ENABLE_GLIBXML TRUE)
if(ENABLE_GLIBXML)
  if(NOT USE_ICU)
    message(FATAL_ERROR "GLIBXML requires ICU")
  endif(NOT USE_ICU)
  #
  set(GLIBXML_PARENT_DIR
    ${CHROMIUM_DIR}/third_party/
  )
  set(GLIBXML_DIR
    ${GLIBXML_PARENT_DIR}libxml/
  )
  include(${CHROMIUM_DIR}GLIBXML.cmake)
endif(ENABLE_GLIBXML)

if (USE_LIBPNG AND USE_CUSTOM_LIBPNG)
  # GLIBPNG
  include(${CHROMIUM_DIR}GLIBPNG.cmake)
endif()

if(USE_LIBJPEG AND USE_CUSTOM_LIBJPEG)
  message(FATAL_ERROR "GLIBJPEG not supported yet")
  # libjpeg: requires LIBXML
  include(${CHROMIUM_DIR}GLIBJPEG.cmake)
endif(USE_LIBJPEG AND USE_CUSTOM_LIBJPEG)

if(USE_LIBJPEG_TURBO AND USE_CUSTOM_LIBJPEG_TURBO)
  # GLIBJPEG_TURBO: requires LIBJPEG
  include(${CHROMIUM_DIR}GLIBJPEG_TURBO.cmake)
else()
  if(ENABLE_COBALT OR ENABLE_BLINK)
    message(FATAL_ERROR "GLIBJPEG_TURBO must be active")
  endif()
endif(USE_LIBJPEG_TURBO AND USE_CUSTOM_LIBJPEG_TURBO)

#if((ENABLE_BLINK OR ENABLE_COBALT) AND NOT ENABLE_LIBYUV)
#  message(WARNING "AUTO ENABLED LIBYUV")
#  set(ENABLE_LIBYUV TRUE)
#endif()
if(ENABLE_LIBYUV)
  set(libyuv_PARENT_DIR ${CMAKE_CURRENT_SOURCE_DIR}/${CHROMIUM_DIR}third_party/)
  set(libyuv_DIR ${libyuv_PARENT_DIR}libyuv/)
  # libyuv: requires LIBJPEG
  include(${CHROMIUM_DIR}libyuv.cmake)
endif(ENABLE_LIBYUV)

#if((ENABLE_BLINK OR ENABLE_COBALT) AND NOT ENABLE_ICCJPEG)
#  message(WARNING "AUTO ENABLED ICCJPEG")
#  set(ENABLE_ICCJPEG TRUE)
#endif()
if(ENABLE_ICCJPEG)
  # iccjpeg: requires LIBJPEG
  include(${CHROMIUM_DIR}iccjpeg.cmake)
endif(ENABLE_ICCJPEG)

# libwebp: requires libpng, zlib
#if((ENABLE_BLINK OR ENABLE_COBALT) AND NOT ENABLE_LIBWEBP)
#  message(WARNING "AUTO ENABLED LIBWEBP")
#  set(ENABLE_LIBWEBP TRUE)
#endif()
if(ENABLE_LIBWEBP)
  include(${CHROMIUM_DIR}libwebp.cmake)
endif(ENABLE_LIBWEBP)

if(TARGET_LINUX)
  # xdg_mime
  include(xdg_mime.cmake)
  # xdg_user_dirs
  include(xdg_user_dirs.cmake)
endif(TARGET_LINUX)

if (ENABLE_SKIA)
  #
  # skia
  #
  include(skia.cmake)
endif()

#
# ICU
#
if(USE_CUSTOM_ICU)
  include(icu.cmake)
endif(USE_CUSTOM_ICU)

#
# HARFBUZZ
#
if(USE_CUSTOM_HARFBUZZ)
  include(harfbuzz.cmake)
endif(USE_CUSTOM_HARFBUZZ)

#
# WTF
#
if(ENABLE_WTF)
  add_subdirectory(src/chromium) # requires skia above
  set(WTF_LIBRARY_NAME wtf)
  #message(FATAL_ERROR ${WTF_LIBRARY_NAME})
  set(WTF_LIBS
    ${WTF_LIBRARY_NAME}
    #base
    #libevent
    #icu
  )
endif(ENABLE_WTF)

#
# COBALT
#
if(ENABLE_COBALT)
  add_subdirectory(src/cobalt) # requires skia above
  #
  #message(FATAL_ERROR ${WTF_LIBRARY_NAME})
  #set(WTF_LIBS
  #  ${WTF_LIBRARY_NAME}
  #  #base
  #  #libevent
  #  #icu
  #)
endif(ENABLE_COBALT)

#
# PROJECT
#
list(APPEND PROJECT_SRC
  src/main.cpp
)
#
if(ENABLE_COBALT)
  list(APPEND PROJECT_SRC
    src/render_tree_combiner.cc
  )
endif(ENABLE_COBALT)

if (ENABLE_SKIA)
  set(SKIA_INCLUDES
      ${SKIA_HEADERS}
      ${SKIA_EXT_DIR}
      ${SKIA_EXT_PARENT_DIR}
      ${SKIA_PARENT_DIR}
      ${SKIA_DIR}
      ${SKIA_DIR}/include
      ${SKIA_DIR}/include/c
      ${SKIA_DIR}/include/core
      ${SKIA_DIR}/third_party
      ${SKIA_DIR}/third_party/skcms
  )
  if(ENABLE_SKOTTIE)
    list(APPEND PROJECT_SRC
      # skottie
      # https://github.com/klzgrad/naiveproxy/blob/master/src/third_party/skia/modules/skottie/BUILD.gn#L45
      ${SKIA_DIR}/modules/skottie/utils/SkottieUtils.cpp
    )
  endif(ENABLE_SKOTTIE)

  if (ENABLE_BLINK)
    add_dependencies(SKIA_EXT SKIA_build ${sksg_LIB} SKIA ${skshaper_LIB})
    add_dependencies(UI_GFX SKIA_build ${sksg_LIB} SKIA ${skshaper_LIB})
    add_dependencies(CC SKIA_build ${sksg_LIB} SKIA ${skshaper_LIB})
    add_dependencies(ANIMATION_CC SKIA_build ${sksg_LIB} SKIA ${skshaper_LIB})
    add_dependencies(PAINT_CC SKIA_build ${sksg_LIB} SKIA ${skshaper_LIB})
    add_dependencies(DEBUG_CC SKIA_build ${sksg_LIB} SKIA ${skshaper_LIB})
    add_dependencies(BASE_CC SKIA_build ${sksg_LIB} SKIA ${skshaper_LIB})
    add_dependencies(GPU_COMMAND_BUFFER SKIA_build ${sksg_LIB} SKIA ${skshaper_LIB})
    add_dependencies(GFX_CODEC SKIA_build ${sksg_LIB} SKIA ${skshaper_LIB})
    add_dependencies(GFX_GEOMETRY SKIA_build ${sksg_LIB} SKIA ${skshaper_LIB})
    add_dependencies(GFX_GEOMETRY_SKIA SKIA_build ${sksg_LIB} SKIA ${skshaper_LIB})
    add_dependencies(GFX_COLOR_SPACE SKIA_build ${sksg_LIB} SKIA ${skshaper_LIB})
    add_dependencies(GFX_SWITCHES SKIA_build ${sksg_LIB} SKIA ${skshaper_LIB})
    add_dependencies(GFX_RANGE SKIA_build ${sksg_LIB} SKIA ${skshaper_LIB})
  endif(ENABLE_BLINK)
endif(ENABLE_SKIA)

# TODO - not only EMSCRIPTEN
if(EMSCRIPTEN AND ENABLE_SKIA AND ENABLE_SKIA_UTILS)
  list(APPEND PROJECT_SRC
    # skia effects
    #${SKIA_DIR}/src/c/sk_effects.cpp
    #${SKIA_DIR}/src/effects/Sk1DPathEffect.cpp
    #${SKIA_DIR}/src/effects/Sk2DPathEffect.cpp
    #${SKIA_DIR}/src/effects/SkColorMatrix.cpp
    #${SKIA_DIR}/src/effects/SkColorMatrixFilter.cpp
    #${SKIA_DIR}/src/effects/SkCornerPathEffect.cpp
    #${SKIA_DIR}/src/effects/SkDashPathEffect.cpp
    #${SKIA_DIR}/src/effects/SkDiscretePathEffect.cpp
    #${SKIA_DIR}/src/effects/SkEmbossMask.cpp
    #${SKIA_DIR}/src/effects/SkEmbossMaskFilter.cpp
    #${SKIA_DIR}/src/effects/SkHighContrastFilter.cpp
    #${SKIA_DIR}/src/effects/SkLayerDrawLooper.cpp
    #${SKIA_DIR}/src/effects/SkLumaColorFilter.cpp
    #${SKIA_DIR}/src/effects/SkOpPathEffect.cpp
    #${SKIA_DIR}/src/effects/SkOverdrawColorFilter.cpp
    #${SKIA_DIR}/src/effects/SkPackBits.cpp
    #${SKIA_DIR}/src/effects/SkShaderMaskFilter.cpp
    #${SKIA_DIR}/src/effects/SkTableColorFilter.cpp
    #${SKIA_DIR}/src/effects/SkTableMaskFilter.cpp
    #${SKIA_DIR}/src/effects/SkTrimPathEffect.cpp
    #${SKIA_DIR}/src/shaders/SkPerlinNoiseShader.cpp
    #${SKIA_DIR}/src/shaders/gradients/Sk4fGradientBase.cpp
    #${SKIA_DIR}/src/shaders/gradients/Sk4fLinearGradient.cpp
    #${SKIA_DIR}/src/shaders/gradients/SkGradientShader.cpp
    #${SKIA_DIR}/src/shaders/gradients/SkLinearGradient.cpp
    #${SKIA_DIR}/src/shaders/gradients/SkRadialGradient.cpp
    #${SKIA_DIR}/src/shaders/gradients/SkTwoPointConicalGradient.cpp
    #${SKIA_DIR}/src/shaders/gradients/SkSweepGradient.cpp
    # skia utils (utils.gni)
    ${SKIA_DIR}/src/utils/Sk3D.cpp
    ${SKIA_DIR}/src/utils/SkBase64.cpp
    ${SKIA_DIR}/src/utils/SkFrontBufferedStream.cpp
    ${SKIA_DIR}/src/utils/SkCamera.cpp
    ${SKIA_DIR}/src/utils/SkCanvasStack.cpp
    ${SKIA_DIR}/src/utils/SkCanvasStateUtils.cpp
    ${SKIA_DIR}/src/utils/SkDashPath.cpp
    ${SKIA_DIR}/src/utils/SkEventTracer.cpp
    ${SKIA_DIR}/src/utils/SkFloatToDecimal.cpp
    ${SKIA_DIR}/src/utils/SkInterpolator.cpp
    ${SKIA_DIR}/src/utils/SkJSON.cpp
    ${SKIA_DIR}/src/utils/SkJSONWriter.cpp
    ${SKIA_DIR}/src/utils/SkMatrix22.cpp
    ${SKIA_DIR}/src/utils/SkMultiPictureDocument.cpp
    ${SKIA_DIR}/src/utils/SkNWayCanvas.cpp
    ${SKIA_DIR}/src/utils/SkNullCanvas.cpp
    ${SKIA_DIR}/src/utils/SkOSPath.cpp
    ${SKIA_DIR}/src/utils/SkPaintFilterCanvas.cpp
    ${SKIA_DIR}/src/utils/SkParse.cpp
    ${SKIA_DIR}/src/utils/SkParseColor.cpp
    ${SKIA_DIR}/src/utils/SkParsePath.cpp
    ${SKIA_DIR}/src/utils/SkPatchUtils.cpp
    ${SKIA_DIR}/src/utils/SkPolyUtils.cpp
    ${SKIA_DIR}/src/utils/SkShadowTessellator.cpp
    ${SKIA_DIR}/src/utils/SkShadowUtils.cpp
    ${SKIA_DIR}/src/utils/SkThreadUtils_pthread.cpp
    ${SKIA_DIR}/src/utils/SkThreadUtils_win.cpp
    ${SKIA_DIR}/src/utils/SkWhitelistTypefaces.cpp
    #mac
    #"$_src/utils/mac/SkCreateCGImageRef.cpp",
    #windows
    #"$_src/utils/win/SkAutoCoInitialize.h",
    #"$_src/utils/win/SkAutoCoInitialize.cpp",
    #"$_src/utils/win/SkDWrite.h",
    #"$_src/utils/win/SkDWrite.cpp",
    #"$_src/utils/win/SkDWriteFontFileStream.cpp",
    #"$_src/utils/win/SkDWriteFontFileStream.h",
    #"$_src/utils/win/SkDWriteGeometrySink.cpp",
    #"$_src/utils/win/SkDWriteGeometrySink.h",
    #"$_src/utils/win/SkDWriteNTDDI_VERSION.h",
    #"$_src/utils/win/SkHRESULT.h",
    #"$_src/utils/win/SkHRESULT.cpp",
    #"$_src/utils/win/SkIStream.h",
    #"$_src/utils/win/SkIStream.cpp",
    #"$_src/utils/win/SkTScopedComPtr.h",
    #"$_src/utils/win/SkWGL.h",
    #"$_src/utils/win/SkWGL_win.cpp",
    # effects_imagefilters (effects_imagefilters.gni)
    # https://chromium.googlesource.com/skia/+/master/gn/effects_imagefilters.gni
    #${SKIA_DIR}/src/effects/imagefilters/SkAlphaThresholdFilter.cpp
    #${SKIA_DIR}/src/effects/imagefilters/SkArithmeticImageFilter.cpp
    #${SKIA_DIR}/src/effects/imagefilters/SkBlurImageFilter.cpp
    #${SKIA_DIR}/src/effects/imagefilters/SkColorFilterImageFilter.cpp
    #${SKIA_DIR}/src/effects/imagefilters/SkComposeImageFilter.cpp
    #${SKIA_DIR}/src/effects/imagefilters/SkDisplacementMapEffect.cpp
    #${SKIA_DIR}/src/effects/imagefilters/SkDropShadowImageFilter.cpp
    #${SKIA_DIR}/src/effects/imagefilters/SkImageSource.cpp
    #${SKIA_DIR}/src/effects/imagefilters/SkLightingImageFilter.cpp
    #${SKIA_DIR}/src/effects/imagefilters/SkMagnifierImageFilter.cpp
    #${SKIA_DIR}/src/effects/imagefilters/SkMatrixConvolutionImageFilter.cpp
    #${SKIA_DIR}/src/effects/imagefilters/SkMergeImageFilter.cpp
    #${SKIA_DIR}/src/effects/imagefilters/SkMorphologyImageFilter.cpp
    #${SKIA_DIR}/src/effects/imagefilters/SkOffsetImageFilter.cpp
    #${SKIA_DIR}/src/effects/imagefilters/SkPaintImageFilter.cpp
    #${SKIA_DIR}/src/effects/imagefilters/SkPictureImageFilter.cpp
    #${SKIA_DIR}/src/effects/imagefilters/SkTileImageFilter.cpp
    #${SKIA_DIR}/src/effects/imagefilters/SkXfermodeImageFilter.cpp
  )
endif()

# NOTE: -s LINKABLE=1 is not supported with -s USE_PTHREADS>0
# https://www.mail-archive.com/emscripten-discuss@googlegroups.com/msg07864.html
#set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -s SIDE_MODULE=0")
#set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -s MAIN_MODULE=1")
#set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -s MAIN_MODULE=2")

#  -s NO_DYNAMIC_EXECUTION=1 and -s RELOCATABLE=1 build modes are mutually exclusive.

# -s NO_DYNAMIC_EXECUTION=2 which demotes eval() errors
# to warnings at runtime, useful for iterating fixes in a codebase for multiple
# eval()s

add_executable(${PROJECT_NAME}
  ${PROJECT_SRC}
  #DEPENDS SKIA
)

if(ENABLE_SKIA)
  add_dependencies(${PROJECT_NAME}
    ${SKIA_LIBS}
  )
endif(ENABLE_SKIA)

# https://www.mail-archive.com/emscripten-discuss@googlegroups.com/msg07864.html
#set_target_properties(
#  ${PROJECT_NAME}
#  PROPERTIES LINK_FLAGS "-s MAIN_MODULE=1")

# see LINK_OPTIONS
#set_target_properties(${PROJECT_NAME} PROPERTIES LINK_FLAGS
#  "-s MAIN_MODULE=1"
#  "-s FORCE_FILESYSTEM=1"
#)

set_property(TARGET ${PROJECT_NAME} PROPERTY CXX_STANDARD 17)

if(TARGET_EMSCRIPTEN)
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} --emrun")
  # https://emscripten.org/docs/getting_started/Tutorial.html#generating-html
  #set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -o hello.html")
  #set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} --preload-file resources/fonts/FreeSans.ttf")
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} --preload-file resources")
endif() # EMSCRIPTEN

if(TARGET_EMSCRIPTEN)
  if(EMCC_SUPPORTS_ENVIRONMENT)
    if(ENABLE_WEB_PTHREADS)
      # When building with multithreading enabled
      # and a "-s ENVIRONMENT=" directive is specified,
      # it must include "worker" as a target!
      # (Try e.g. -s ENVIRONMENT=web,worker)';
      set(EMCC_ENVIRONMENT "-s ENVIRONMENT='web,worker'")
      #set(EMCC_ENVIRONMENT "web")
    else()
      set(EMCC_ENVIRONMENT "-s ENVIRONMENT='web'")
    endif(ENABLE_WEB_PTHREADS)
  endif(EMCC_SUPPORTS_ENVIRONMENT)
  #
  # It is recommended to use target_link_libraries() for linker flags,
  # not set_target_properties (!!!)
  # see https://stackoverflow.com/a/45905060/10904212
  set (LINK_OPTIONS
    # NOTE: -s LINKABLE=1 is not supported with -s USE_PTHREADS>0
    #"-s MAIN_MODULE=1"
    #
    # if your C code uses no files, but you include
    # some JS that does, you might need this.
    # see https://github.com/emscripten-core/emscripten/blob/master/src/settings.js#L549
    # make the compiler include file system support even though it doesn’t see it being used.
    "-s FORCE_FILESYSTEM=1"
    #
    # The ENVIRONMENT flag lets you specify that the output will
    # only run on the web, or only run in node.js, etc.
    # This prevents the compiler from emitting code to
    # support all possible runtime environments, saving ~2KB.
    # see https://github.com/emscripten-core/emscripten/blob/master/src/settings.js#L441
    # see https://github.com/emscripten-core/emscripten/issues/6717
    # NOTE: notice the single quoted 'web'
    # TODO # "-s ENVIRONMENT=\"'web'\""
    # TODO #
    "${EMCC_ENVIRONMENT}"
    #
  )

  set(HTML_TEMPLATE "${CMAKE_CURRENT_SOURCE_DIR}/assets/index.html")

  #message(STATUS "using template " ${HTML_TEMPLATE})

  #set(TEMPLATE_OPTION "--shell-file ${HTML_TEMPLATE}")

  set(EM_TARGET_NAME ${PROJECT_NAME})
  set(EM_TARGET_JS ${PROJECT_NAME}.js)
  set(EM_TARGET_WASM ${PROJECT_NAME}.wasm)
  configure_file(${HTML_TEMPLATE} index.html @ONLY)
  target_include_directories(${PROJECT_NAME} SYSTEM PRIVATE
    ${SKIA_INCLUDES}
  )
  target_include_directories(${PROJECT_NAME} PRIVATE
    ${GEN_COMBINED_DIR}
    ${COBALT_COMMON_INCLUDES}
    #${CMAKE_CURRENT_SOURCE_DIR}/src # to ./cobalt
  )
  # link order is top down:
  # Top is the executable, followed by directly used libraries.
  # see https://floooh.github.io/2016/01/12/cmake-dependency-juggling.html
  target_link_libraries(${PROJECT_NAME} PUBLIC
    ${COBALT_LIBRARY_NAME}
    ${COBALT_LIBS}
    #
    ${HARFBUZZ_LIBRARIES}
    ${CUSTOM_ICU_LIB}
    ${libZLIB_LIB}
    #
    #base # TODO
    #modp_b64
    #${COBALT_LIBRARY_NAME}
    #cobalt_base
    #cobalt_nanobase
    #${COBALT_CSP_LIB_NAME}
    #cobalt_script
    #v8_stub
    #cobalt_dom_exception
    #cobalt_ui_navigation
    #cobalt_math
    #cobalt_media
    #cobalt_loader
    #cobalt_page_visibility
    #cobalt_cssom
    #cobalt_web_animations
    ##cobalt_dom
    #starboard_icu_init
    #starboard_eztime  # requires starboard_icu_init
    ##starboard_stub
    #starboard_platform # requires starboard_stub
    #starboard_common
    #starboard_core
    #
    #modp_b64
    #base # TODO
    #BLINK_RENDERER_CORE
    #${SERVICES_NETWORK_PUBLIC_CPP_LIB}
    #COMPONENTS_VIZ_CLIENT
    #BLINK_RENDERER_PLATFORM
    #${WTF_LIBRARY_NAME}
    #
    ${SKIA_LIBS}
    #
    #skottie
    #${sksg_LIB}
    #${skshaper_LIB}
    #particles
    #pathkit
    #${WUFFS_LIB_NAME}
    #jpeg
    #
    ${WTF_LIBS}
    # tcmalloc only for posix/linux/e.t.c.
    #tcmalloc
    #
    #UI_GFX
    #CC
    #ANIMATION_CC
    #PAINT_CC
    #DEBUG_CC
    #BASE_CC
    #GPU_COMMAND_BUFFER
    #GFX_CODEC
    #GFX_GEOMETRY
    #GFX_GEOMETRY_SKIA
    #GFX_COLOR_SPACE
    #GFX_SWITCHES
    #GFX_RANGE
    ${BLINK_LIBS}
    ##
    #SKIA_EXT
    ##
    #GNET
    #GURL
    #GCRYPTO
    #BORINGSSL
    #
    ${LINK_OPTIONS}
  )
  #
  target_compile_definitions(${PROJECT_NAME} PRIVATE
    ${APP_DEFINITIONS}
    #GLEW_NO_GLU
    STATICALLY_LINKED_WITH_WTF=1 # NOTE: meaningful only if USE(EXPORT_MACROS)
    #${OPENGLES2_DEFINITIONS}
    # NOTE: prefer #ifndef NDEBUG, see https://stackoverflow.com/a/8594122
    #"$<$<CONFIG:DEBUG>:DEBUG>"
    ${COBALT_COMMON_DEFINES}
  )
else()
  target_include_directories(${PROJECT_NAME} SYSTEM PRIVATE
    ${SKIA_INCLUDES}
    ${GLEW_INCLUDE_PATH}
    ${FOUND_OPENGL_INCLUDE_DIR}
    ${SDL2_INCLUDE_DIRS}
    ${SDL2_TTF_INCLUDE_DIR}
    ${HARFBUZZ_INCLUDE_DIRS}
    ${OPENGLES2_INCLUDE_DIRS}
  )
  target_include_directories(${PROJECT_NAME} PRIVATE
    ${GEN_COMBINED_DIR}
    ${COBALT_COMMON_INCLUDES}
    #${CMAKE_CURRENT_SOURCE_DIR}/src # to ./cobalt
  )
  # link order is top down:
  # Top is the executable, followed by directly used libraries.
  # see https://floooh.github.io/2016/01/12/cmake-dependency-juggling.html
  target_link_libraries(${PROJECT_NAME} PUBLIC
    ${COBALT_LIBRARY_NAME}
    ${COBALT_LIBS}
    #cobalt_
    #cobalt_web_animations
    #${COBALT_LIBRARY_NAME}
    ${WTF_LIBS}
    #BORINGSSL
    GCRYPTO
    GURL
    ${GNET_LIBS}
    # tcmalloc only for posix/linux/e.t.c.
    tcmalloc
    # libevent only for posix/linux/e.t.c.
    libevent
    #
    ${SKIA_LIBS}
    #SKIA
    #${libpng_LIB}
    #skottie
    #${sksg_LIB}
    #${skshaper_LIB}
    #particles
    #pathkit
    #${WUFFS_LIB_NAME}
    #jpeg
    #
    ${libZLIB_LIB}
    #
    ${SDL2_TTF_INCLUDE_DIR}
    ${HARFBUZZ_LIBRARIES}
    ${FOUND_OPENGL_LIBRARIES}
    ${GLEW_LIBRARY}
    SDL2::Main
    #SDL2:Net
    #SDL2:tff # see ${SDL2_TTF_LIBRARY}
    ${SDL2_TTF_LIBRARY}
    #
    ${LINK_OPTIONS}
    #
    #${libpng_LIB}
    #GLIBPNG
    GURL
    ${GNET_LIBS}
    GCRYPTO
    # services/service_manager
    # services/ws/public/cpp/gpu
    #BLINK_WTF
    ${WTF_LIBRARY_NAME}
    # media
    # "//services/ws/public/cpp/gpu",
    #SKIA
    #skcms
    # "//third_party:freetype_harfbuzz",
    #  "//third_party/blink/public/common",
    #MOJO
    ced
    # emoji-segmenter
    ${HARFBUZZ_LIBRARIES}
    ${CUSTOM_ICU_LIB}
    ${libZLIB_LIB}
    # webrtc
    base
    #public_deps = [
    #  ":bindings_buildflags",
    #  ":make_platform_generated",
    #  "//base",
    #  "//cc",
    #  "//cc/animation",
    #  "//cc/paint",
    #  "//gpu/command_buffer/client:client",
    #  "//gpu/command_buffer/client:gles2_interface",
    #  "//gpu/command_buffer/common:common",
    #  "//net",
    #  "//services/device/public/mojom:generic_sensor_blink",
    #  "//services/device/public/mojom:mojom_blink",
    #  "//services/network/public/cpp:cpp",
    #  "//services/network/public/mojom",
    #  "//services/network/public/mojom:mojom_blink",
    #  "//services/resource_coordinator/public/cpp:resource_coordinator_cpp_features",
    #  "//services/resource_coordinator/public/mojom:mojom_blink",
    #  "//services/service_manager/public/mojom:mojom_blink",
    #  "//skia",
    #  "//third_party:jpeg",
    #  "//third_party/blink/public:blink_headers",
    #  "//third_party/blink/public/common",
    #  "//third_party/blink/public/mojom:mojom_platform_blink",
    #  "//third_party/blink/public/mojom:web_bluetooth_mojo_bindings_blink",
    #  "//third_party/blink/renderer/platform/heap:blink_heap_buildflags",
    #  "//third_party/blink/renderer/platform/network:make_generated",
    #  "//third_party/blink/renderer/platform/wtf",
    #  "//third_party/boringssl",
    #  "//third_party/iccjpeg",
    #  "//third_party/libpng",
    #  "//third_party/libwebp",
    #  "//third_party/ots",
    #  "//url",
    #  "//v8",
    #]
    ${BLINK_LIBS}
    ##BLINK_RENDERER_CORE
    #BLINK_RENDERER_PLATFORM
    #COMPONENTS_VIZ_CLIENT
    #CC
    #BASE_CC
    #DEBUG_CC
    #PAINT_CC
    #ANIMATION_CC
    #GPU_COMMAND_BUFFER
    #GFX_CODEC
    #GFX_GEOMETRY
    #GFX_GEOMETRY_SKIA
    #GFX_COLOR_SPACE
    #GFX_SWITCHES
    #GFX_RANGE
    #SKIA_EXT
    #UI_GFX
    #BLINK_PUBLIC_COMMON
    #COMPONENTS_VIZ_CLIENT
    #COMPONENTS_VIZ_COMMON
    #CC
    ##G_GPU
    #UI_GFX
    #GFX_GEOMETRY
    #ANIMATION_CC
    #BASE_CC
    #PAINT_CC
    #CC
    #${SERVICES_NETWORK_PUBLIC_CPP_LIB}
    #libwebp # requires libpng
    #${libjpeg_LIB}
    #${libjpeg_TURBO_LIB}
    #${libpng_LIB}
    ${libDL_LIB}
    #${iccjpeg_LIB}
    #
    # khronos
    #${khronos_LIB}
    #LIB_V8_INTERFACE
    #COMPONENTS_SCHEDULING_METRICS
    ${HARFBUZZ_LIBRARIES}
    #${OPENGLES2_LIBRARIES}
    GLESv2
    #OpenGL::OpenGL
    #OpenGL::EGL
  )
  target_compile_definitions(${PROJECT_NAME} PRIVATE
    ${APP_DEFINITIONS}
    GLEW_NO_GLU
    STATICALLY_LINKED_WITH_WTF=1 # NOTE: meaningful only if USE(EXPORT_MACROS)
    ${OPENGLES2_DEFINITIONS}
    # NOTE: prefer #ifndef NDEBUG, see https://stackoverflow.com/a/8594122
    "$<$<CONFIG:DEBUG>:DEBUG>"
    ${COBALT_COMMON_DEFINES}
  )
endif() # EMSCRIPTEN

target_compile_options(${PROJECT_NAME} PRIVATE
  #-Wno-error
  # always return on non-void functions to prevent UB
  -Wreturn-type
  # https://gist.github.com/morido/8637535
  -Werror=return-type
  -Wall
  -Wextra
  -Weverything # clang
  -Wno-undef
  -Wno-switch
  #-pedantic-errors
  -Wno-pedantic
  -Wno-duplicate-enum
  -Wno-newline-eof
  -Wno-disabled-macro-expansion
  -Wno-c++98-compat-pedantic
  -Wno-c++98-compat-local-type-template-args
  -Wno-c++98-compat
  -Wno-weak-vtables
  -Wno-missing-prototypes
  #-Wno-shadow # TODO
  #-Wnocast-align # TODO
  -Wno-extra-semi
  #-Wno-thread-safety-negative # TODO
  -Wno-documentation
  #-Wno-double-promotion # TODO
  #-Wno-float-equal # TODO
  -Wno-missing-noreturn
  -Wno-exit-time-destructors
  -Wno-inconsistent-missing-destructor-override
  -Wno-global-constructors
  -Wno-documentation-unknown-command
  -Wno-zero-as-null-pointer-constant
  -Wno-shadow-field-in-constructor
  -Wno-padded
  -Wno-old-style-cast
  -Wno-nested-anon-types
  -Wno-deprecated-declarations
  -Wno-deprecated
  -Wno-expansion-to-defined
  -Wno-gnu-zero-variadic-macro-arguments
  -Wno-double-promotion
  -Wno-unused-value
  -Wno-unused-template
  -Wno-unused-parameter
  -Wno-unused-variable
  -Wno-unused-function
  -Wno-unused-member-function
  -Wno-unused-lambda-capture
  -Wno-reserved-id-macro
  -Wno-macro-redefined
  -Wno-implicit-function-declaration
  -Wno-c++11-narrowing
  -Wno-macro-redefined
  #-Wno-undef
  #-Wno-unknown-pragmas
  #-Wno-nonportable-include-path
  #-Wno-unknown-argument
  # Warn for implicit type conversions that may change a value.
  #-Wconversion
  -Wno-c++11-compat
  # This complains about "override", which we use heavily.
  -Wno-c++11-extensions
  # Warns on switches on enums that cover all enum values but
  # also contain a default: branch. Chrome is full of that.
  -Wno-covered-switch-default
  # protobuf uses hash_map.
  -Wno-deprecated
  # Don't warn about the "struct foo f = {0};" initialization pattern.
  -Wno-missing-field-initializers
  # Do not warn for implicit sign conversions.
  -Wno-sign-conversion
  -Wno-unnamed-type-template-args
  # Triggered by the COMPILE_ASSERT macro.
  -Wno-unused-local-typedef
  # Do not warn if a function or variable cannot be implicitly
  # instantiated.
  -Wno-undefined-var-template
  # Do not warn about an implicit exception spec mismatch.
  -Wno-implicit-exception-spec-mismatch
)

add_custom_target(copy-runtime-files ALL
  COMMAND cmake -E copy_directory ${CMAKE_CURRENT_SOURCE_DIR}/resources ${CMAKE_CURRENT_BINARY_DIR}/resources
  #DEPENDS ${PROJECT_NAME}
)

add_dependencies(${PROJECT_NAME} copy-runtime-files)
