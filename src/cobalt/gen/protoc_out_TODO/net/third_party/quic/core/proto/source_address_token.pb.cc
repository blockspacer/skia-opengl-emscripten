// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: source_address_token.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "source_address_token.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace quic {

void protobuf_ShutdownFile_source_5faddress_5ftoken_2eproto() {
  delete SourceAddressToken::default_instance_;
  delete SourceAddressTokens::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_source_5faddress_5ftoken_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_source_5faddress_5ftoken_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::quic::protobuf_AddDesc_cached_5fnetwork_5fparameters_2eproto();
  SourceAddressToken::default_instance_ = new SourceAddressToken();
  SourceAddressTokens::default_instance_ = new SourceAddressTokens();
  SourceAddressToken::default_instance_->InitAsDefaultInstance();
  SourceAddressTokens::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_source_5faddress_5ftoken_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_source_5faddress_5ftoken_2eproto_once_);
void protobuf_AddDesc_source_5faddress_5ftoken_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_source_5faddress_5ftoken_2eproto_once_,
                 &protobuf_AddDesc_source_5faddress_5ftoken_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_source_5faddress_5ftoken_2eproto {
  StaticDescriptorInitializer_source_5faddress_5ftoken_2eproto() {
    protobuf_AddDesc_source_5faddress_5ftoken_2eproto();
  }
} static_descriptor_initializer_source_5faddress_5ftoken_2eproto_;
#endif

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
GOOGLE_ATTRIBUTE_NOINLINE static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

static ::std::string* MutableUnknownFieldsForSourceAddressToken(
    SourceAddressToken* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SourceAddressToken::kIpFieldNumber;
const int SourceAddressToken::kTimestampFieldNumber;
const int SourceAddressToken::kCachedNetworkParametersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SourceAddressToken::SourceAddressToken()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:quic.SourceAddressToken)
}

void SourceAddressToken::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  cached_network_parameters_ = const_cast< ::quic::CachedNetworkParameters*>(
      ::quic::CachedNetworkParameters::internal_default_instance());
#else
  cached_network_parameters_ = const_cast< ::quic::CachedNetworkParameters*>(&::quic::CachedNetworkParameters::default_instance());
#endif
}

SourceAddressToken::SourceAddressToken(const SourceAddressToken& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:quic.SourceAddressToken)
}

void SourceAddressToken::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_ = GOOGLE_LONGLONG(0);
  cached_network_parameters_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SourceAddressToken::~SourceAddressToken() {
  // @@protoc_insertion_point(destructor:quic.SourceAddressToken)
  SharedDtor();
}

void SourceAddressToken::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete cached_network_parameters_;
  }
}

void SourceAddressToken::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SourceAddressToken& SourceAddressToken::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_source_5faddress_5ftoken_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_source_5faddress_5ftoken_2eproto();
#endif
  return *default_instance_;
}

SourceAddressToken* SourceAddressToken::default_instance_ = NULL;

SourceAddressToken* SourceAddressToken::New(::google::protobuf::Arena* arena) const {
  SourceAddressToken* n = new SourceAddressToken;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SourceAddressToken::Clear() {
// @@protoc_insertion_point(message_clear_start:quic.SourceAddressToken)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_ip()) {
      ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    timestamp_ = GOOGLE_LONGLONG(0);
    if (has_cached_network_parameters()) {
      if (cached_network_parameters_ != NULL) cached_network_parameters_->::quic::CachedNetworkParameters::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SourceAddressToken::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForSourceAddressToken, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:quic.SourceAddressToken)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes ip = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ip()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_timestamp;
        break;
      }

      // required int64 timestamp = 2;
      case 2: {
        if (tag == 16) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_cached_network_parameters;
        break;
      }

      // optional .quic.CachedNetworkParameters cached_network_parameters = 3;
      case 3: {
        if (tag == 26) {
         parse_cached_network_parameters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cached_network_parameters()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:quic.SourceAddressToken)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:quic.SourceAddressToken)
  return false;
#undef DO_
}

void SourceAddressToken::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:quic.SourceAddressToken)
  // required bytes ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->ip(), output);
  }

  // required int64 timestamp = 2;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->timestamp(), output);
  }

  // optional .quic.CachedNetworkParameters cached_network_parameters = 3;
  if (has_cached_network_parameters()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->cached_network_parameters_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:quic.SourceAddressToken)
}

int SourceAddressToken::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:quic.SourceAddressToken)
  int total_size = 0;

  if (has_ip()) {
    // required bytes ip = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->ip());
  }

  if (has_timestamp()) {
    // required int64 timestamp = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  return total_size;
}
int SourceAddressToken::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:quic.SourceAddressToken)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes ip = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->ip());

    // required int64 timestamp = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional .quic.CachedNetworkParameters cached_network_parameters = 3;
  if (has_cached_network_parameters()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cached_network_parameters_);
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SourceAddressToken::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SourceAddressToken*>(&from));
}

void SourceAddressToken::MergeFrom(const SourceAddressToken& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quic.SourceAddressToken)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip()) {
      set_has_ip();
      ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_cached_network_parameters()) {
      mutable_cached_network_parameters()->::quic::CachedNetworkParameters::MergeFrom(from.cached_network_parameters());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void SourceAddressToken::CopyFrom(const SourceAddressToken& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quic.SourceAddressToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SourceAddressToken::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SourceAddressToken::Swap(SourceAddressToken* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SourceAddressToken::InternalSwap(SourceAddressToken* other) {
  ip_.Swap(&other->ip_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(cached_network_parameters_, other->cached_network_parameters_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string SourceAddressToken::GetTypeName() const {
  return "quic.SourceAddressToken";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SourceAddressToken

// required bytes ip = 1;
bool SourceAddressToken::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SourceAddressToken::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
void SourceAddressToken::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
void SourceAddressToken::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip();
}
 const ::std::string& SourceAddressToken::ip() const {
  // @@protoc_insertion_point(field_get:quic.SourceAddressToken.ip)
  return ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SourceAddressToken::set_ip(const ::std::string& value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:quic.SourceAddressToken.ip)
}
 void SourceAddressToken::set_ip(const char* value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:quic.SourceAddressToken.ip)
}
 void SourceAddressToken::set_ip(const void* value, size_t size) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:quic.SourceAddressToken.ip)
}
 ::std::string* SourceAddressToken::mutable_ip() {
  set_has_ip();
  // @@protoc_insertion_point(field_mutable:quic.SourceAddressToken.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SourceAddressToken::release_ip() {
  // @@protoc_insertion_point(field_release:quic.SourceAddressToken.ip)
  clear_has_ip();
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SourceAddressToken::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    set_has_ip();
  } else {
    clear_has_ip();
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:quic.SourceAddressToken.ip)
}

// required int64 timestamp = 2;
bool SourceAddressToken::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SourceAddressToken::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
void SourceAddressToken::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
void SourceAddressToken::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
 ::google::protobuf::int64 SourceAddressToken::timestamp() const {
  // @@protoc_insertion_point(field_get:quic.SourceAddressToken.timestamp)
  return timestamp_;
}
 void SourceAddressToken::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:quic.SourceAddressToken.timestamp)
}

// optional .quic.CachedNetworkParameters cached_network_parameters = 3;
bool SourceAddressToken::has_cached_network_parameters() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SourceAddressToken::set_has_cached_network_parameters() {
  _has_bits_[0] |= 0x00000004u;
}
void SourceAddressToken::clear_has_cached_network_parameters() {
  _has_bits_[0] &= ~0x00000004u;
}
void SourceAddressToken::clear_cached_network_parameters() {
  if (cached_network_parameters_ != NULL) cached_network_parameters_->::quic::CachedNetworkParameters::Clear();
  clear_has_cached_network_parameters();
}
const ::quic::CachedNetworkParameters& SourceAddressToken::cached_network_parameters() const {
  // @@protoc_insertion_point(field_get:quic.SourceAddressToken.cached_network_parameters)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return cached_network_parameters_ != NULL ? *cached_network_parameters_ : *default_instance().cached_network_parameters_;
#else
  return cached_network_parameters_ != NULL ? *cached_network_parameters_ : *default_instance_->cached_network_parameters_;
#endif
}
::quic::CachedNetworkParameters* SourceAddressToken::mutable_cached_network_parameters() {
  set_has_cached_network_parameters();
  if (cached_network_parameters_ == NULL) {
    cached_network_parameters_ = new ::quic::CachedNetworkParameters;
  }
  // @@protoc_insertion_point(field_mutable:quic.SourceAddressToken.cached_network_parameters)
  return cached_network_parameters_;
}
::quic::CachedNetworkParameters* SourceAddressToken::release_cached_network_parameters() {
  // @@protoc_insertion_point(field_release:quic.SourceAddressToken.cached_network_parameters)
  clear_has_cached_network_parameters();
  ::quic::CachedNetworkParameters* temp = cached_network_parameters_;
  cached_network_parameters_ = NULL;
  return temp;
}
void SourceAddressToken::set_allocated_cached_network_parameters(::quic::CachedNetworkParameters* cached_network_parameters) {
  delete cached_network_parameters_;
  cached_network_parameters_ = cached_network_parameters;
  if (cached_network_parameters) {
    set_has_cached_network_parameters();
  } else {
    clear_has_cached_network_parameters();
  }
  // @@protoc_insertion_point(field_set_allocated:quic.SourceAddressToken.cached_network_parameters)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForSourceAddressTokens(
    SourceAddressTokens* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SourceAddressTokens::kTokensFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SourceAddressTokens::SourceAddressTokens()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:quic.SourceAddressTokens)
}

void SourceAddressTokens::InitAsDefaultInstance() {
}

SourceAddressTokens::SourceAddressTokens(const SourceAddressTokens& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:quic.SourceAddressTokens)
}

void SourceAddressTokens::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SourceAddressTokens::~SourceAddressTokens() {
  // @@protoc_insertion_point(destructor:quic.SourceAddressTokens)
  SharedDtor();
}

void SourceAddressTokens::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SourceAddressTokens::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SourceAddressTokens& SourceAddressTokens::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_source_5faddress_5ftoken_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_source_5faddress_5ftoken_2eproto();
#endif
  return *default_instance_;
}

SourceAddressTokens* SourceAddressTokens::default_instance_ = NULL;

SourceAddressTokens* SourceAddressTokens::New(::google::protobuf::Arena* arena) const {
  SourceAddressTokens* n = new SourceAddressTokens;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SourceAddressTokens::Clear() {
// @@protoc_insertion_point(message_clear_start:quic.SourceAddressTokens)
  tokens_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SourceAddressTokens::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForSourceAddressTokens, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:quic.SourceAddressTokens)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .quic.SourceAddressToken tokens = 4;
      case 4: {
        if (tag == 34) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_tokens:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_tokens()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_tokens;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:quic.SourceAddressTokens)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:quic.SourceAddressTokens)
  return false;
#undef DO_
}

void SourceAddressTokens::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:quic.SourceAddressTokens)
  // repeated .quic.SourceAddressToken tokens = 4;
  for (unsigned int i = 0, n = this->tokens_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->tokens(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:quic.SourceAddressTokens)
}

int SourceAddressTokens::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:quic.SourceAddressTokens)
  int total_size = 0;

  // repeated .quic.SourceAddressToken tokens = 4;
  total_size += 1 * this->tokens_size();
  for (int i = 0; i < this->tokens_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tokens(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SourceAddressTokens::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SourceAddressTokens*>(&from));
}

void SourceAddressTokens::MergeFrom(const SourceAddressTokens& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quic.SourceAddressTokens)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  tokens_.MergeFrom(from.tokens_);
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void SourceAddressTokens::CopyFrom(const SourceAddressTokens& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quic.SourceAddressTokens)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SourceAddressTokens::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->tokens())) return false;
  return true;
}

void SourceAddressTokens::Swap(SourceAddressTokens* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SourceAddressTokens::InternalSwap(SourceAddressTokens* other) {
  tokens_.UnsafeArenaSwap(&other->tokens_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string SourceAddressTokens::GetTypeName() const {
  return "quic.SourceAddressTokens";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SourceAddressTokens

// repeated .quic.SourceAddressToken tokens = 4;
int SourceAddressTokens::tokens_size() const {
  return tokens_.size();
}
void SourceAddressTokens::clear_tokens() {
  tokens_.Clear();
}
const ::quic::SourceAddressToken& SourceAddressTokens::tokens(int index) const {
  // @@protoc_insertion_point(field_get:quic.SourceAddressTokens.tokens)
  return tokens_.Get(index);
}
::quic::SourceAddressToken* SourceAddressTokens::mutable_tokens(int index) {
  // @@protoc_insertion_point(field_mutable:quic.SourceAddressTokens.tokens)
  return tokens_.Mutable(index);
}
::quic::SourceAddressToken* SourceAddressTokens::add_tokens() {
  // @@protoc_insertion_point(field_add:quic.SourceAddressTokens.tokens)
  return tokens_.Add();
}
::google::protobuf::RepeatedPtrField< ::quic::SourceAddressToken >*
SourceAddressTokens::mutable_tokens() {
  // @@protoc_insertion_point(field_mutable_list:quic.SourceAddressTokens.tokens)
  return &tokens_;
}
const ::google::protobuf::RepeatedPtrField< ::quic::SourceAddressToken >&
SourceAddressTokens::tokens() const {
  // @@protoc_insertion_point(field_list:quic.SourceAddressTokens.tokens)
  return tokens_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace quic

// @@protoc_insertion_point(global_scope)
