

// Copyright 2019 The Cobalt Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// clang-format off

// This file has been auto-generated by bindings/code_generator_cobalt.py. DO NOT MODIFY!
// Auto-generated from template: bindings/v8c/templates/interface.cc.template

#include "cobalt/bindings/shared/idl_conditional_macros.h"

#include "cobalt/cssom/v8c_css_style_declaration.h"

#include "base/trace_event/trace_event.h"
#include "cobalt/base/polymorphic_downcast.h"
#include "cobalt/script/global_environment.h"
#include "cobalt/script/script_value.h"
#include "cobalt/script/value_handle.h"
#include "cobalt/cssom/css_rule.h"
#include "cobalt/cssom/v8c_css_rule.h"

#include "v8c_gen_type_conversion.h"

#include "cobalt/script/callback_interface_traits.h"
#include "cobalt/script/v8c/v8c_array_buffer.h"
#include "cobalt/script/v8c/v8c_array_buffer_view.h"
#include "cobalt/script/v8c/callback_function_conversion.h"
#include "cobalt/script/v8c/conversion_helpers.h"
#include "cobalt/script/v8c/entry_scope.h"
#include "cobalt/script/v8c/helpers.h"
#include "cobalt/script/v8c/native_promise.h"
#include "cobalt/script/v8c/type_traits.h"
#include "cobalt/script/v8c/v8c_typed_arrays.h"
#include "cobalt/script/v8c/v8c_data_view.h"
#include "cobalt/script/v8c/v8c_callback_function.h"
#include "cobalt/script/v8c/v8c_callback_interface_holder.h"
#include "cobalt/script/v8c/v8c_engine.h"
#include "cobalt/script/v8c/v8c_exception_state.h"
#include "cobalt/script/v8c/v8c_global_environment.h"
#include "cobalt/script/v8c/v8c_property_enumerator.h"
#include "cobalt/script/v8c/v8c_value_handle.h"
#include "cobalt/script/v8c/wrapper_private.h"
#include "cobalt/script/v8c/common_v8c_bindings_code.h"
#include "v8/include/v8.h"


namespace {
using cobalt::cssom::CSSStyleDeclaration;
using cobalt::cssom::V8cCSSStyleDeclaration;
using cobalt::cssom::CSSRule;
using cobalt::cssom::V8cCSSRule;
using cobalt::script::CallbackInterfaceTraits;
using cobalt::script::GlobalEnvironment;
using cobalt::script::ScriptValue;
using cobalt::script::ValueHandle;
using cobalt::script::ValueHandle;
using cobalt::script::ValueHandleHolder;
using cobalt::script::Wrappable;

using cobalt::script::v8c::EntryScope;
using cobalt::script::v8c::EscapableEntryScope;
using cobalt::script::v8c::FromJSValue;
using cobalt::script::v8c::kConversionFlagClamped;
using cobalt::script::v8c::kConversionFlagNullable;
using cobalt::script::v8c::kConversionFlagObjectOnly;
using cobalt::script::v8c::kConversionFlagRestricted;
using cobalt::script::v8c::kConversionFlagTreatNullAsEmptyString;
using cobalt::script::v8c::kConversionFlagTreatUndefinedAsEmptyString;
using cobalt::script::v8c::kNoConversionFlags;
using cobalt::script::v8c::NewInternalString;
using cobalt::script::v8c::ToJSValue;
using cobalt::script::v8c::TypeTraits;
using cobalt::script::v8c::V8cExceptionState;
using cobalt::script::v8c::V8cGlobalEnvironment;
using cobalt::script::v8c::V8cPropertyEnumerator;
using cobalt::script::v8c::WrapperFactory;
using cobalt::script::v8c::WrapperPrivate;
}  // namespace

namespace cobalt {
namespace cssom {


namespace {

const int kInterfaceUniqueId = 31;





void IndexedPropertyGetterCallback(
    uint32_t index,
    const v8::PropertyCallbackInfo<v8::Value>& info) {
  v8::Isolate* isolate = info.GetIsolate();
  v8::Local<v8::Object> object = info.Holder();
  V8cExceptionState exception_state{isolate};
  v8::Local<v8::Value> result_value;

  CSSStyleDeclaration* impl =
          script::v8c::shared_bindings::get_impl_from_object<
             CSSStyleDeclaration>(object);
  if (!impl) {
    return;
  }
  if (index >= impl->length()) {
    // |index| is out of bounds, so return undefined.
    return;
  }

  if (!exception_state.is_exception_set()) {
    ToJSValue(isolate,
              impl->Item(index),
              &result_value);
}
  info.GetReturnValue().Set(result_value);
}

void IndexedPropertyDescriptorCallback(
    uint32_t index, const v8::PropertyCallbackInfo<v8::Value>& info) {
  // TODO: Figure out under what conditions this gets called.  It's not
  // getting called in our tests.
  NOTIMPLEMENTED();
}

void IndexedPropertyEnumeratorCallback(
    const v8::PropertyCallbackInfo<v8::Array>& info) {
  v8::Isolate* isolate = info.GetIsolate();
  v8::Local<v8::Object> object = info.Holder();
  CSSStyleDeclaration* impl =
          script::v8c::shared_bindings::get_impl_from_object<
             CSSStyleDeclaration>(object);
  if (!impl) {
    return;
  }
  const uint32_t length = impl->length();
  v8::Local<v8::Array> array = v8::Array::New(isolate, length);
  for (uint32_t i = 0; i < length; ++i) {
    array->Set(i, v8::Integer::New(isolate, i));
  }
  info.GetReturnValue().Set(array);
}

void IndexedPropertyDefinerCallback(
    uint32_t index, const v8::PropertyDescriptor& desc,
    const v8::PropertyCallbackInfo<v8::Value>& info) {
  // TODO: Figure out under what conditions this gets called.  It's not
  // getting called in our tests.
  NOTIMPLEMENTED();
}





void DummyConstructor(const v8::FunctionCallbackInfo<v8::Value>& info) {
  V8cExceptionState exception(info.GetIsolate());
  exception.SetSimpleException(
      script::kTypeError, "CSSStyleDeclaration is not constructible.");
}



void alignContentAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<CSSStyleDeclaration,
                                                    V8cCSSStyleDeclaration>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->align_content(&exception_state),
              &result_value);

  });
}

void alignContentAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<CSSStyleDeclaration, V8cCSSStyleDeclaration>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<std::string >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagTreatNullAsEmptyString), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_align_content(value, &exception_state);
result_value = v8::Undefined(isolate);
  return;
});
}


void alignItemsAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<CSSStyleDeclaration,
                                                    V8cCSSStyleDeclaration>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->align_items(&exception_state),
              &result_value);

  });
}

void alignItemsAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<CSSStyleDeclaration, V8cCSSStyleDeclaration>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<std::string >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagTreatNullAsEmptyString), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_align_items(value, &exception_state);
result_value = v8::Undefined(isolate);
  return;
});
}


void alignSelfAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<CSSStyleDeclaration,
                                                    V8cCSSStyleDeclaration>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->align_self(&exception_state),
              &result_value);

  });
}

void alignSelfAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<CSSStyleDeclaration, V8cCSSStyleDeclaration>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<std::string >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagTreatNullAsEmptyString), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_align_self(value, &exception_state);
result_value = v8::Undefined(isolate);
  return;
});
}


void animationAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<CSSStyleDeclaration,
                                                    V8cCSSStyleDeclaration>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->animation(&exception_state),
              &result_value);

  });
}

void animationAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<CSSStyleDeclaration, V8cCSSStyleDeclaration>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<std::string >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagTreatNullAsEmptyString), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_animation(value, &exception_state);
result_value = v8::Undefined(isolate);
  return;
});
}


void animationDelayAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<CSSStyleDeclaration,
                                                    V8cCSSStyleDeclaration>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->animation_delay(&exception_state),
              &result_value);

  });
}

void animationDelayAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<CSSStyleDeclaration, V8cCSSStyleDeclaration>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<std::string >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagTreatNullAsEmptyString), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_animation_delay(value, &exception_state);
result_value = v8::Undefined(isolate);
  return;
});
}


void animationDirectionAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<CSSStyleDeclaration,
                                                    V8cCSSStyleDeclaration>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->animation_direction(&exception_state),
              &result_value);

  });
}

void animationDirectionAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<CSSStyleDeclaration, V8cCSSStyleDeclaration>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<std::string >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagTreatNullAsEmptyString), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_animation_direction(value, &exception_state);
result_value = v8::Undefined(isolate);
  return;
});
}


void animationDurationAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<CSSStyleDeclaration,
                                                    V8cCSSStyleDeclaration>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->animation_duration(&exception_state),
              &result_value);

  });
}

void animationDurationAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<CSSStyleDeclaration, V8cCSSStyleDeclaration>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<std::string >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagTreatNullAsEmptyString), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_animation_duration(value, &exception_state);
result_value = v8::Undefined(isolate);
  return;
});
}


void animationFillModeAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<CSSStyleDeclaration,
                                                    V8cCSSStyleDeclaration>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->animation_fill_mode(&exception_state),
              &result_value);

  });
}

void animationFillModeAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<CSSStyleDeclaration, V8cCSSStyleDeclaration>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<std::string >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagTreatNullAsEmptyString), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_animation_fill_mode(value, &exception_state);
result_value = v8::Undefined(isolate);
  return;
});
}


void animationIterationCountAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<CSSStyleDeclaration,
                                                    V8cCSSStyleDeclaration>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->animation_iteration_count(&exception_state),
              &result_value);

  });
}

void animationIterationCountAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<CSSStyleDeclaration, V8cCSSStyleDeclaration>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<std::string >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagTreatNullAsEmptyString), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_animation_iteration_count(value, &exception_state);
result_value = v8::Undefined(isolate);
  return;
});
}


void animationNameAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<CSSStyleDeclaration,
                                                    V8cCSSStyleDeclaration>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->animation_name(&exception_state),
              &result_value);

  });
}

void animationNameAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<CSSStyleDeclaration, V8cCSSStyleDeclaration>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<std::string >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagTreatNullAsEmptyString), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_animation_name(value, &exception_state);
result_value = v8::Undefined(isolate);
  return;
});
}


void animationTimingFunctionAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<CSSStyleDeclaration,
                                                    V8cCSSStyleDeclaration>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->animation_timing_function(&exception_state),
              &result_value);

  });
}

void animationTimingFunctionAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<CSSStyleDeclaration, V8cCSSStyleDeclaration>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<std::string >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagTreatNullAsEmptyString), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_animation_timing_function(value, &exception_state);
result_value = v8::Undefined(isolate);
  return;
});
}


void backgroundAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<CSSStyleDeclaration,
                                                    V8cCSSStyleDeclaration>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->background(&exception_state),
              &result_value);

  });
}

void backgroundAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<CSSStyleDeclaration, V8cCSSStyleDeclaration>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<std::string >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagTreatNullAsEmptyString), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_background(value, &exception_state);
result_value = v8::Undefined(isolate);
  return;
});
}


void backgroundColorAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<CSSStyleDeclaration,
                                                    V8cCSSStyleDeclaration>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->background_color(&exception_state),
              &result_value);

  });
}

void backgroundColorAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<CSSStyleDeclaration, V8cCSSStyleDeclaration>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<std::string >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagTreatNullAsEmptyString), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_background_color(value, &exception_state);
result_value = v8::Undefined(isolate);
  return;
});
}


void backgroundImageAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<CSSStyleDeclaration,
                                                    V8cCSSStyleDeclaration>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->background_image(&exception_state),
              &result_value);

  });
}

void backgroundImageAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<CSSStyleDeclaration, V8cCSSStyleDeclaration>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<std::string >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagTreatNullAsEmptyString), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_background_image(value, &exception_state);
result_value = v8::Undefined(isolate);
  return;
});
}


void backgroundPositionAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<CSSStyleDeclaration,
                                                    V8cCSSStyleDeclaration>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->background_position(&exception_state),
              &result_value);

  });
}

void backgroundPositionAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<CSSStyleDeclaration, V8cCSSStyleDeclaration>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<std::string >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagTreatNullAsEmptyString), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_background_position(value, &exception_state);
result_value = v8::Undefined(isolate);
  return;
});
}


void backgroundRepeatAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<CSSStyleDeclaration,
                                                    V8cCSSStyleDeclaration>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->background_repeat(&exception_state),
              &result_value);

  });
}

void backgroundRepeatAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<CSSStyleDeclaration, V8cCSSStyleDeclaration>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<std::string >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagTreatNullAsEmptyString), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_background_repeat(value, &exception_state);
result_value = v8::Undefined(isolate);
  return;
});
}


void backgroundSizeAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<CSSStyleDeclaration,
                                                    V8cCSSStyleDeclaration>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->background_size(&exception_state),
              &result_value);

  });
}

void backgroundSizeAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<CSSStyleDeclaration, V8cCSSStyleDeclaration>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<std::string >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagTreatNullAsEmptyString), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_background_size(value, &exception_state);
result_value = v8::Undefined(isolate);
  return;
});
}


void borderAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<CSSStyleDeclaration,
                                                    V8cCSSStyleDeclaration>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->border(&exception_state),
              &result_value);

  });
}

void borderAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<CSSStyleDeclaration, V8cCSSStyleDeclaration>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<std::string >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagTreatNullAsEmptyString), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_border(value, &exception_state);
result_value = v8::Undefined(isolate);
  return;
});
}


void borderBottomAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<CSSStyleDeclaration,
                                                    V8cCSSStyleDeclaration>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->border_bottom(&exception_state),
              &result_value);

  });
}

void borderBottomAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<CSSStyleDeclaration, V8cCSSStyleDeclaration>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<std::string >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagTreatNullAsEmptyString), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_border_bottom(value, &exception_state);
result_value = v8::Undefined(isolate);
  return;
});
}


void borderBottomColorAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<CSSStyleDeclaration,
                                                    V8cCSSStyleDeclaration>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->border_bottom_color(&exception_state),
              &result_value);

  });
}

void borderBottomColorAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<CSSStyleDeclaration, V8cCSSStyleDeclaration>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<std::string >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagTreatNullAsEmptyString), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_border_bottom_color(value, &exception_state);
result_value = v8::Undefined(isolate);
  return;
});
}


void borderBottomLeftRadiusAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<CSSStyleDeclaration,
                                                    V8cCSSStyleDeclaration>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->border_bottom_left_radius(&exception_state),
              &result_value);

  });
}

void borderBottomLeftRadiusAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<CSSStyleDeclaration, V8cCSSStyleDeclaration>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<std::string >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagTreatNullAsEmptyString), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_border_bottom_left_radius(value, &exception_state);
result_value = v8::Undefined(isolate);
  return;
});
}


void borderBottomRightRadiusAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<CSSStyleDeclaration,
                                                    V8cCSSStyleDeclaration>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->border_bottom_right_radius(&exception_state),
              &result_value);

  });
}

void borderBottomRightRadiusAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<CSSStyleDeclaration, V8cCSSStyleDeclaration>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<std::string >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagTreatNullAsEmptyString), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_border_bottom_right_radius(value, &exception_state);
result_value = v8::Undefined(isolate);
  return;
});
}


void borderBottomStyleAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<CSSStyleDeclaration,
                                                    V8cCSSStyleDeclaration>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->border_bottom_style(&exception_state),
              &result_value);

  });
}

void borderBottomStyleAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<CSSStyleDeclaration, V8cCSSStyleDeclaration>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<std::string >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagTreatNullAsEmptyString), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_border_bottom_style(value, &exception_state);
result_value = v8::Undefined(isolate);
  return;
});
}


void borderBottomWidthAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<CSSStyleDeclaration,
                                                    V8cCSSStyleDeclaration>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->border_bottom_width(&exception_state),
              &result_value);

  });
}

void borderBottomWidthAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<CSSStyleDeclaration, V8cCSSStyleDeclaration>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<std::string >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagTreatNullAsEmptyString), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_border_bottom_width(value, &exception_state);
result_value = v8::Undefined(isolate);
  return;
});
}


void borderColorAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<CSSStyleDeclaration,
                                                    V8cCSSStyleDeclaration>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->border_color(&exception_state),
              &result_value);

  });
}

void borderColorAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<CSSStyleDeclaration, V8cCSSStyleDeclaration>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<std::string >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagTreatNullAsEmptyString), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_border_color(value, &exception_state);
result_value = v8::Undefined(isolate);
  return;
});
}


void borderLeftAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<CSSStyleDeclaration,
                                                    V8cCSSStyleDeclaration>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->border_left(&exception_state),
              &result_value);

  });
}

void borderLeftAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<CSSStyleDeclaration, V8cCSSStyleDeclaration>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<std::string >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagTreatNullAsEmptyString), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_border_left(value, &exception_state);
result_value = v8::Undefined(isolate);
  return;
});
}


void borderLeftColorAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<CSSStyleDeclaration,
                                                    V8cCSSStyleDeclaration>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->border_left_color(&exception_state),
              &result_value);

  });
}

void borderLeftColorAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<CSSStyleDeclaration, V8cCSSStyleDeclaration>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<std::string >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagTreatNullAsEmptyString), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_border_left_color(value, &exception_state);
result_value = v8::Undefined(isolate);
  return;
});
}


void borderLeftStyleAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<CSSStyleDeclaration,
                                                    V8cCSSStyleDeclaration>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->border_left_style(&exception_state),
              &result_value);

  });
}

void borderLeftStyleAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<CSSStyleDeclaration, V8cCSSStyleDeclaration>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<std::string >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagTreatNullAsEmptyString), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_border_left_style(value, &exception_state);
result_value = v8::Undefined(isolate);
  return;
});
}


void borderLeftWidthAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<CSSStyleDeclaration,
                                                    V8cCSSStyleDeclaration>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->border_left_width(&exception_state),
              &result_value);

  });
}

void borderLeftWidthAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<CSSStyleDeclaration, V8cCSSStyleDeclaration>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<std::string >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagTreatNullAsEmptyString), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_border_left_width(value, &exception_state);
result_value = v8::Undefined(isolate);
  return;
});
}


void borderRadiusAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<CSSStyleDeclaration,
                                                    V8cCSSStyleDeclaration>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->border_radius(&exception_state),
              &result_value);

  });
}

void borderRadiusAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<CSSStyleDeclaration, V8cCSSStyleDeclaration>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<std::string >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagTreatNullAsEmptyString), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_border_radius(value, &exception_state);
result_value = v8::Undefined(isolate);
  return;
});
}


void borderRightAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<CSSStyleDeclaration,
                                                    V8cCSSStyleDeclaration>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->border_right(&exception_state),
              &result_value);

  });
}

void borderRightAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<CSSStyleDeclaration, V8cCSSStyleDeclaration>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<std::string >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagTreatNullAsEmptyString), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_border_right(value, &exception_state);
result_value = v8::Undefined(isolate);
  return;
});
}


void borderRightColorAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<CSSStyleDeclaration,
                                                    V8cCSSStyleDeclaration>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->border_right_color(&exception_state),
              &result_value);

  });
}

void borderRightColorAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<CSSStyleDeclaration, V8cCSSStyleDeclaration>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<std::string >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagTreatNullAsEmptyString), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_border_right_color(value, &exception_state);
result_value = v8::Undefined(isolate);
  return;
});
}


void borderRightStyleAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<CSSStyleDeclaration,
                                                    V8cCSSStyleDeclaration>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->border_right_style(&exception_state),
              &result_value);

  });
}

void borderRightStyleAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<CSSStyleDeclaration, V8cCSSStyleDeclaration>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<std::string >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagTreatNullAsEmptyString), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_border_right_style(value, &exception_state);
result_value = v8::Undefined(isolate);
  return;
});
}


void borderRightWidthAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<CSSStyleDeclaration,
                                                    V8cCSSStyleDeclaration>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->border_right_width(&exception_state),
              &result_value);

  });
}

void borderRightWidthAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<CSSStyleDeclaration, V8cCSSStyleDeclaration>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<std::string >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagTreatNullAsEmptyString), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_border_right_width(value, &exception_state);
result_value = v8::Undefined(isolate);
  return;
});
}


void borderStyleAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<CSSStyleDeclaration,
                                                    V8cCSSStyleDeclaration>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->border_style(&exception_state),
              &result_value);

  });
}

void borderStyleAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<CSSStyleDeclaration, V8cCSSStyleDeclaration>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<std::string >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagTreatNullAsEmptyString), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_border_style(value, &exception_state);
result_value = v8::Undefined(isolate);
  return;
});
}


void borderTopAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<CSSStyleDeclaration,
                                                    V8cCSSStyleDeclaration>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->border_top(&exception_state),
              &result_value);

  });
}

void borderTopAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<CSSStyleDeclaration, V8cCSSStyleDeclaration>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<std::string >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagTreatNullAsEmptyString), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_border_top(value, &exception_state);
result_value = v8::Undefined(isolate);
  return;
});
}


void borderTopColorAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<CSSStyleDeclaration,
                                                    V8cCSSStyleDeclaration>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->border_top_color(&exception_state),
              &result_value);

  });
}

void borderTopColorAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<CSSStyleDeclaration, V8cCSSStyleDeclaration>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<std::string >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagTreatNullAsEmptyString), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_border_top_color(value, &exception_state);
result_value = v8::Undefined(isolate);
  return;
});
}


void borderTopLeftRadiusAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<CSSStyleDeclaration,
                                                    V8cCSSStyleDeclaration>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->border_top_left_radius(&exception_state),
              &result_value);

  });
}

void borderTopLeftRadiusAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<CSSStyleDeclaration, V8cCSSStyleDeclaration>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<std::string >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagTreatNullAsEmptyString), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_border_top_left_radius(value, &exception_state);
result_value = v8::Undefined(isolate);
  return;
});
}


void borderTopRightRadiusAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<CSSStyleDeclaration,
                                                    V8cCSSStyleDeclaration>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->border_top_right_radius(&exception_state),
              &result_value);

  });
}

void borderTopRightRadiusAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<CSSStyleDeclaration, V8cCSSStyleDeclaration>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<std::string >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagTreatNullAsEmptyString), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_border_top_right_radius(value, &exception_state);
result_value = v8::Undefined(isolate);
  return;
});
}


void borderTopStyleAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<CSSStyleDeclaration,
                                                    V8cCSSStyleDeclaration>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->border_top_style(&exception_state),
              &result_value);

  });
}

void borderTopStyleAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<CSSStyleDeclaration, V8cCSSStyleDeclaration>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<std::string >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagTreatNullAsEmptyString), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_border_top_style(value, &exception_state);
result_value = v8::Undefined(isolate);
  return;
});
}


void borderTopWidthAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<CSSStyleDeclaration,
                                                    V8cCSSStyleDeclaration>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->border_top_width(&exception_state),
              &result_value);

  });
}

void borderTopWidthAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<CSSStyleDeclaration, V8cCSSStyleDeclaration>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<std::string >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagTreatNullAsEmptyString), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_border_top_width(value, &exception_state);
result_value = v8::Undefined(isolate);
  return;
});
}


void borderWidthAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<CSSStyleDeclaration,
                                                    V8cCSSStyleDeclaration>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->border_width(&exception_state),
              &result_value);

  });
}

void borderWidthAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<CSSStyleDeclaration, V8cCSSStyleDeclaration>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<std::string >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagTreatNullAsEmptyString), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_border_width(value, &exception_state);
result_value = v8::Undefined(isolate);
  return;
});
}


void bottomAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<CSSStyleDeclaration,
                                                    V8cCSSStyleDeclaration>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->bottom(&exception_state),
              &result_value);

  });
}

void bottomAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<CSSStyleDeclaration, V8cCSSStyleDeclaration>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<std::string >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagTreatNullAsEmptyString), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_bottom(value, &exception_state);
result_value = v8::Undefined(isolate);
  return;
});
}


void boxShadowAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<CSSStyleDeclaration,
                                                    V8cCSSStyleDeclaration>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->box_shadow(&exception_state),
              &result_value);

  });
}

void boxShadowAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<CSSStyleDeclaration, V8cCSSStyleDeclaration>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<std::string >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagTreatNullAsEmptyString), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_box_shadow(value, &exception_state);
result_value = v8::Undefined(isolate);
  return;
});
}


void colorAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<CSSStyleDeclaration,
                                                    V8cCSSStyleDeclaration>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->color(&exception_state),
              &result_value);

  });
}

void colorAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<CSSStyleDeclaration, V8cCSSStyleDeclaration>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<std::string >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagTreatNullAsEmptyString), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_color(value, &exception_state);
result_value = v8::Undefined(isolate);
  return;
});
}


void contentAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<CSSStyleDeclaration,
                                                    V8cCSSStyleDeclaration>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->content(&exception_state),
              &result_value);

  });
}

void contentAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<CSSStyleDeclaration, V8cCSSStyleDeclaration>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<std::string >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagTreatNullAsEmptyString), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_content(value, &exception_state);
result_value = v8::Undefined(isolate);
  return;
});
}


void displayAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<CSSStyleDeclaration,
                                                    V8cCSSStyleDeclaration>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->display(&exception_state),
              &result_value);

  });
}

void displayAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<CSSStyleDeclaration, V8cCSSStyleDeclaration>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<std::string >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagTreatNullAsEmptyString), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_display(value, &exception_state);
result_value = v8::Undefined(isolate);
  return;
});
}


void filterAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<CSSStyleDeclaration,
                                                    V8cCSSStyleDeclaration>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->filter(&exception_state),
              &result_value);

  });
}

void filterAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<CSSStyleDeclaration, V8cCSSStyleDeclaration>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<std::string >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagTreatNullAsEmptyString), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_filter(value, &exception_state);
result_value = v8::Undefined(isolate);
  return;
});
}


void flexAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<CSSStyleDeclaration,
                                                    V8cCSSStyleDeclaration>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->flex(&exception_state),
              &result_value);

  });
}

void flexAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<CSSStyleDeclaration, V8cCSSStyleDeclaration>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<std::string >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagTreatNullAsEmptyString), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_flex(value, &exception_state);
result_value = v8::Undefined(isolate);
  return;
});
}


void flexBasisAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<CSSStyleDeclaration,
                                                    V8cCSSStyleDeclaration>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->flex_basis(&exception_state),
              &result_value);

  });
}

void flexBasisAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<CSSStyleDeclaration, V8cCSSStyleDeclaration>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<std::string >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagTreatNullAsEmptyString), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_flex_basis(value, &exception_state);
result_value = v8::Undefined(isolate);
  return;
});
}


void flexDirectionAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<CSSStyleDeclaration,
                                                    V8cCSSStyleDeclaration>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->flex_direction(&exception_state),
              &result_value);

  });
}

void flexDirectionAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<CSSStyleDeclaration, V8cCSSStyleDeclaration>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<std::string >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagTreatNullAsEmptyString), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_flex_direction(value, &exception_state);
result_value = v8::Undefined(isolate);
  return;
});
}


void flexFlowAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<CSSStyleDeclaration,
                                                    V8cCSSStyleDeclaration>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->flex_flow(&exception_state),
              &result_value);

  });
}

void flexFlowAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<CSSStyleDeclaration, V8cCSSStyleDeclaration>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<std::string >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagTreatNullAsEmptyString), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_flex_flow(value, &exception_state);
result_value = v8::Undefined(isolate);
  return;
});
}


void flexGrowAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<CSSStyleDeclaration,
                                                    V8cCSSStyleDeclaration>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->flex_grow(&exception_state),
              &result_value);

  });
}

void flexGrowAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<CSSStyleDeclaration, V8cCSSStyleDeclaration>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<std::string >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagTreatNullAsEmptyString), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_flex_grow(value, &exception_state);
result_value = v8::Undefined(isolate);
  return;
});
}


void flexShrinkAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<CSSStyleDeclaration,
                                                    V8cCSSStyleDeclaration>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->flex_shrink(&exception_state),
              &result_value);

  });
}

void flexShrinkAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<CSSStyleDeclaration, V8cCSSStyleDeclaration>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<std::string >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagTreatNullAsEmptyString), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_flex_shrink(value, &exception_state);
result_value = v8::Undefined(isolate);
  return;
});
}


void flexWrapAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<CSSStyleDeclaration,
                                                    V8cCSSStyleDeclaration>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->flex_wrap(&exception_state),
              &result_value);

  });
}

void flexWrapAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<CSSStyleDeclaration, V8cCSSStyleDeclaration>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<std::string >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagTreatNullAsEmptyString), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_flex_wrap(value, &exception_state);
result_value = v8::Undefined(isolate);
  return;
});
}


void fontAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<CSSStyleDeclaration,
                                                    V8cCSSStyleDeclaration>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->font(&exception_state),
              &result_value);

  });
}

void fontAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<CSSStyleDeclaration, V8cCSSStyleDeclaration>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<std::string >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagTreatNullAsEmptyString), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_font(value, &exception_state);
result_value = v8::Undefined(isolate);
  return;
});
}


void fontFamilyAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<CSSStyleDeclaration,
                                                    V8cCSSStyleDeclaration>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->font_family(&exception_state),
              &result_value);

  });
}

void fontFamilyAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<CSSStyleDeclaration, V8cCSSStyleDeclaration>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<std::string >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagTreatNullAsEmptyString), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_font_family(value, &exception_state);
result_value = v8::Undefined(isolate);
  return;
});
}


void fontSizeAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<CSSStyleDeclaration,
                                                    V8cCSSStyleDeclaration>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->font_size(&exception_state),
              &result_value);

  });
}

void fontSizeAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<CSSStyleDeclaration, V8cCSSStyleDeclaration>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<std::string >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagTreatNullAsEmptyString), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_font_size(value, &exception_state);
result_value = v8::Undefined(isolate);
  return;
});
}


void fontStyleAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<CSSStyleDeclaration,
                                                    V8cCSSStyleDeclaration>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->font_style(&exception_state),
              &result_value);

  });
}

void fontStyleAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<CSSStyleDeclaration, V8cCSSStyleDeclaration>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<std::string >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagTreatNullAsEmptyString), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_font_style(value, &exception_state);
result_value = v8::Undefined(isolate);
  return;
});
}


void fontWeightAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<CSSStyleDeclaration,
                                                    V8cCSSStyleDeclaration>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->font_weight(&exception_state),
              &result_value);

  });
}

void fontWeightAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<CSSStyleDeclaration, V8cCSSStyleDeclaration>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<std::string >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagTreatNullAsEmptyString), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_font_weight(value, &exception_state);
result_value = v8::Undefined(isolate);
  return;
});
}


void heightAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<CSSStyleDeclaration,
                                                    V8cCSSStyleDeclaration>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->height(&exception_state),
              &result_value);

  });
}

void heightAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<CSSStyleDeclaration, V8cCSSStyleDeclaration>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<std::string >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagTreatNullAsEmptyString), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_height(value, &exception_state);
result_value = v8::Undefined(isolate);
  return;
});
}


void justifyContentAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<CSSStyleDeclaration,
                                                    V8cCSSStyleDeclaration>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->justify_content(&exception_state),
              &result_value);

  });
}

void justifyContentAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<CSSStyleDeclaration, V8cCSSStyleDeclaration>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<std::string >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagTreatNullAsEmptyString), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_justify_content(value, &exception_state);
result_value = v8::Undefined(isolate);
  return;
});
}


void leftAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<CSSStyleDeclaration,
                                                    V8cCSSStyleDeclaration>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->left(&exception_state),
              &result_value);

  });
}

void leftAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<CSSStyleDeclaration, V8cCSSStyleDeclaration>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<std::string >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagTreatNullAsEmptyString), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_left(value, &exception_state);
result_value = v8::Undefined(isolate);
  return;
});
}


void lineHeightAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<CSSStyleDeclaration,
                                                    V8cCSSStyleDeclaration>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->line_height(&exception_state),
              &result_value);

  });
}

void lineHeightAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<CSSStyleDeclaration, V8cCSSStyleDeclaration>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<std::string >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagTreatNullAsEmptyString), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_line_height(value, &exception_state);
result_value = v8::Undefined(isolate);
  return;
});
}


void marginAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<CSSStyleDeclaration,
                                                    V8cCSSStyleDeclaration>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->margin(&exception_state),
              &result_value);

  });
}

void marginAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<CSSStyleDeclaration, V8cCSSStyleDeclaration>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<std::string >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagTreatNullAsEmptyString), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_margin(value, &exception_state);
result_value = v8::Undefined(isolate);
  return;
});
}


void marginBottomAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<CSSStyleDeclaration,
                                                    V8cCSSStyleDeclaration>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->margin_bottom(&exception_state),
              &result_value);

  });
}

void marginBottomAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<CSSStyleDeclaration, V8cCSSStyleDeclaration>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<std::string >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagTreatNullAsEmptyString), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_margin_bottom(value, &exception_state);
result_value = v8::Undefined(isolate);
  return;
});
}


void marginLeftAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<CSSStyleDeclaration,
                                                    V8cCSSStyleDeclaration>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->margin_left(&exception_state),
              &result_value);

  });
}

void marginLeftAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<CSSStyleDeclaration, V8cCSSStyleDeclaration>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<std::string >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagTreatNullAsEmptyString), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_margin_left(value, &exception_state);
result_value = v8::Undefined(isolate);
  return;
});
}


void marginRightAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<CSSStyleDeclaration,
                                                    V8cCSSStyleDeclaration>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->margin_right(&exception_state),
              &result_value);

  });
}

void marginRightAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<CSSStyleDeclaration, V8cCSSStyleDeclaration>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<std::string >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagTreatNullAsEmptyString), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_margin_right(value, &exception_state);
result_value = v8::Undefined(isolate);
  return;
});
}


void marginTopAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<CSSStyleDeclaration,
                                                    V8cCSSStyleDeclaration>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->margin_top(&exception_state),
              &result_value);

  });
}

void marginTopAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<CSSStyleDeclaration, V8cCSSStyleDeclaration>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<std::string >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagTreatNullAsEmptyString), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_margin_top(value, &exception_state);
result_value = v8::Undefined(isolate);
  return;
});
}


void maxHeightAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<CSSStyleDeclaration,
                                                    V8cCSSStyleDeclaration>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->max_height(&exception_state),
              &result_value);

  });
}

void maxHeightAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<CSSStyleDeclaration, V8cCSSStyleDeclaration>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<std::string >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagTreatNullAsEmptyString), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_max_height(value, &exception_state);
result_value = v8::Undefined(isolate);
  return;
});
}


void maxWidthAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<CSSStyleDeclaration,
                                                    V8cCSSStyleDeclaration>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->max_width(&exception_state),
              &result_value);

  });
}

void maxWidthAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<CSSStyleDeclaration, V8cCSSStyleDeclaration>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<std::string >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagTreatNullAsEmptyString), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_max_width(value, &exception_state);
result_value = v8::Undefined(isolate);
  return;
});
}


void minHeightAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<CSSStyleDeclaration,
                                                    V8cCSSStyleDeclaration>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->min_height(&exception_state),
              &result_value);

  });
}

void minHeightAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<CSSStyleDeclaration, V8cCSSStyleDeclaration>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<std::string >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagTreatNullAsEmptyString), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_min_height(value, &exception_state);
result_value = v8::Undefined(isolate);
  return;
});
}


void minWidthAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<CSSStyleDeclaration,
                                                    V8cCSSStyleDeclaration>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->min_width(&exception_state),
              &result_value);

  });
}

void minWidthAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<CSSStyleDeclaration, V8cCSSStyleDeclaration>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<std::string >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagTreatNullAsEmptyString), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_min_width(value, &exception_state);
result_value = v8::Undefined(isolate);
  return;
});
}


void opacityAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<CSSStyleDeclaration,
                                                    V8cCSSStyleDeclaration>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->opacity(&exception_state),
              &result_value);

  });
}

void opacityAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<CSSStyleDeclaration, V8cCSSStyleDeclaration>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<std::string >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagTreatNullAsEmptyString), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_opacity(value, &exception_state);
result_value = v8::Undefined(isolate);
  return;
});
}


void orderAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<CSSStyleDeclaration,
                                                    V8cCSSStyleDeclaration>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->order(&exception_state),
              &result_value);

  });
}

void orderAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<CSSStyleDeclaration, V8cCSSStyleDeclaration>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<std::string >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagTreatNullAsEmptyString), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_order(value, &exception_state);
result_value = v8::Undefined(isolate);
  return;
});
}


void outlineAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<CSSStyleDeclaration,
                                                    V8cCSSStyleDeclaration>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->outline(&exception_state),
              &result_value);

  });
}

void outlineAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<CSSStyleDeclaration, V8cCSSStyleDeclaration>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<std::string >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagTreatNullAsEmptyString), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_outline(value, &exception_state);
result_value = v8::Undefined(isolate);
  return;
});
}


void outlineColorAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<CSSStyleDeclaration,
                                                    V8cCSSStyleDeclaration>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->outline_color(&exception_state),
              &result_value);

  });
}

void outlineColorAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<CSSStyleDeclaration, V8cCSSStyleDeclaration>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<std::string >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagTreatNullAsEmptyString), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_outline_color(value, &exception_state);
result_value = v8::Undefined(isolate);
  return;
});
}


void outlineStyleAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<CSSStyleDeclaration,
                                                    V8cCSSStyleDeclaration>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->outline_style(&exception_state),
              &result_value);

  });
}

void outlineStyleAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<CSSStyleDeclaration, V8cCSSStyleDeclaration>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<std::string >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagTreatNullAsEmptyString), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_outline_style(value, &exception_state);
result_value = v8::Undefined(isolate);
  return;
});
}


void outlineWidthAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<CSSStyleDeclaration,
                                                    V8cCSSStyleDeclaration>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->outline_width(&exception_state),
              &result_value);

  });
}

void outlineWidthAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<CSSStyleDeclaration, V8cCSSStyleDeclaration>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<std::string >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagTreatNullAsEmptyString), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_outline_width(value, &exception_state);
result_value = v8::Undefined(isolate);
  return;
});
}


void overflowAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<CSSStyleDeclaration,
                                                    V8cCSSStyleDeclaration>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->overflow(&exception_state),
              &result_value);

  });
}

void overflowAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<CSSStyleDeclaration, V8cCSSStyleDeclaration>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<std::string >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagTreatNullAsEmptyString), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_overflow(value, &exception_state);
result_value = v8::Undefined(isolate);
  return;
});
}


void overflowWrapAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<CSSStyleDeclaration,
                                                    V8cCSSStyleDeclaration>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->overflow_wrap(&exception_state),
              &result_value);

  });
}

void overflowWrapAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<CSSStyleDeclaration, V8cCSSStyleDeclaration>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<std::string >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagTreatNullAsEmptyString), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_overflow_wrap(value, &exception_state);
result_value = v8::Undefined(isolate);
  return;
});
}


void paddingAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<CSSStyleDeclaration,
                                                    V8cCSSStyleDeclaration>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->padding(&exception_state),
              &result_value);

  });
}

void paddingAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<CSSStyleDeclaration, V8cCSSStyleDeclaration>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<std::string >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagTreatNullAsEmptyString), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_padding(value, &exception_state);
result_value = v8::Undefined(isolate);
  return;
});
}


void paddingBottomAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<CSSStyleDeclaration,
                                                    V8cCSSStyleDeclaration>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->padding_bottom(&exception_state),
              &result_value);

  });
}

void paddingBottomAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<CSSStyleDeclaration, V8cCSSStyleDeclaration>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<std::string >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagTreatNullAsEmptyString), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_padding_bottom(value, &exception_state);
result_value = v8::Undefined(isolate);
  return;
});
}


void paddingLeftAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<CSSStyleDeclaration,
                                                    V8cCSSStyleDeclaration>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->padding_left(&exception_state),
              &result_value);

  });
}

void paddingLeftAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<CSSStyleDeclaration, V8cCSSStyleDeclaration>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<std::string >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagTreatNullAsEmptyString), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_padding_left(value, &exception_state);
result_value = v8::Undefined(isolate);
  return;
});
}


void paddingRightAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<CSSStyleDeclaration,
                                                    V8cCSSStyleDeclaration>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->padding_right(&exception_state),
              &result_value);

  });
}

void paddingRightAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<CSSStyleDeclaration, V8cCSSStyleDeclaration>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<std::string >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagTreatNullAsEmptyString), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_padding_right(value, &exception_state);
result_value = v8::Undefined(isolate);
  return;
});
}


void paddingTopAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<CSSStyleDeclaration,
                                                    V8cCSSStyleDeclaration>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->padding_top(&exception_state),
              &result_value);

  });
}

void paddingTopAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<CSSStyleDeclaration, V8cCSSStyleDeclaration>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<std::string >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagTreatNullAsEmptyString), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_padding_top(value, &exception_state);
result_value = v8::Undefined(isolate);
  return;
});
}


void pointerEventsAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<CSSStyleDeclaration,
                                                    V8cCSSStyleDeclaration>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->pointer_events(&exception_state),
              &result_value);

  });
}

void pointerEventsAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<CSSStyleDeclaration, V8cCSSStyleDeclaration>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<std::string >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagTreatNullAsEmptyString), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_pointer_events(value, &exception_state);
result_value = v8::Undefined(isolate);
  return;
});
}


void positionAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<CSSStyleDeclaration,
                                                    V8cCSSStyleDeclaration>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->position(&exception_state),
              &result_value);

  });
}

void positionAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<CSSStyleDeclaration, V8cCSSStyleDeclaration>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<std::string >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagTreatNullAsEmptyString), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_position(value, &exception_state);
result_value = v8::Undefined(isolate);
  return;
});
}


void rightAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<CSSStyleDeclaration,
                                                    V8cCSSStyleDeclaration>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->right(&exception_state),
              &result_value);

  });
}

void rightAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<CSSStyleDeclaration, V8cCSSStyleDeclaration>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<std::string >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagTreatNullAsEmptyString), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_right(value, &exception_state);
result_value = v8::Undefined(isolate);
  return;
});
}


void textAlignAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<CSSStyleDeclaration,
                                                    V8cCSSStyleDeclaration>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->text_align(&exception_state),
              &result_value);

  });
}

void textAlignAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<CSSStyleDeclaration, V8cCSSStyleDeclaration>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<std::string >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagTreatNullAsEmptyString), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_text_align(value, &exception_state);
result_value = v8::Undefined(isolate);
  return;
});
}


void textDecorationAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<CSSStyleDeclaration,
                                                    V8cCSSStyleDeclaration>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->text_decoration(&exception_state),
              &result_value);

  });
}

void textDecorationAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<CSSStyleDeclaration, V8cCSSStyleDeclaration>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<std::string >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagTreatNullAsEmptyString), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_text_decoration(value, &exception_state);
result_value = v8::Undefined(isolate);
  return;
});
}


void textDecorationColorAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<CSSStyleDeclaration,
                                                    V8cCSSStyleDeclaration>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->text_decoration_color(&exception_state),
              &result_value);

  });
}

void textDecorationColorAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<CSSStyleDeclaration, V8cCSSStyleDeclaration>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<std::string >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagTreatNullAsEmptyString), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_text_decoration_color(value, &exception_state);
result_value = v8::Undefined(isolate);
  return;
});
}


void textDecorationLineAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<CSSStyleDeclaration,
                                                    V8cCSSStyleDeclaration>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->text_decoration_line(&exception_state),
              &result_value);

  });
}

void textDecorationLineAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<CSSStyleDeclaration, V8cCSSStyleDeclaration>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<std::string >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagTreatNullAsEmptyString), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_text_decoration_line(value, &exception_state);
result_value = v8::Undefined(isolate);
  return;
});
}


void textIndentAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<CSSStyleDeclaration,
                                                    V8cCSSStyleDeclaration>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->text_indent(&exception_state),
              &result_value);

  });
}

void textIndentAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<CSSStyleDeclaration, V8cCSSStyleDeclaration>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<std::string >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagTreatNullAsEmptyString), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_text_indent(value, &exception_state);
result_value = v8::Undefined(isolate);
  return;
});
}


void textOverflowAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<CSSStyleDeclaration,
                                                    V8cCSSStyleDeclaration>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->text_overflow(&exception_state),
              &result_value);

  });
}

void textOverflowAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<CSSStyleDeclaration, V8cCSSStyleDeclaration>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<std::string >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagTreatNullAsEmptyString), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_text_overflow(value, &exception_state);
result_value = v8::Undefined(isolate);
  return;
});
}


void textShadowAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<CSSStyleDeclaration,
                                                    V8cCSSStyleDeclaration>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->text_shadow(&exception_state),
              &result_value);

  });
}

void textShadowAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<CSSStyleDeclaration, V8cCSSStyleDeclaration>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<std::string >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagTreatNullAsEmptyString), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_text_shadow(value, &exception_state);
result_value = v8::Undefined(isolate);
  return;
});
}


void textTransformAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<CSSStyleDeclaration,
                                                    V8cCSSStyleDeclaration>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->text_transform(&exception_state),
              &result_value);

  });
}

void textTransformAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<CSSStyleDeclaration, V8cCSSStyleDeclaration>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<std::string >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagTreatNullAsEmptyString), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_text_transform(value, &exception_state);
result_value = v8::Undefined(isolate);
  return;
});
}


void topAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<CSSStyleDeclaration,
                                                    V8cCSSStyleDeclaration>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->top(&exception_state),
              &result_value);

  });
}

void topAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<CSSStyleDeclaration, V8cCSSStyleDeclaration>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<std::string >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagTreatNullAsEmptyString), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_top(value, &exception_state);
result_value = v8::Undefined(isolate);
  return;
});
}


void transformAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<CSSStyleDeclaration,
                                                    V8cCSSStyleDeclaration>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->transform(&exception_state),
              &result_value);

  });
}

void transformAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<CSSStyleDeclaration, V8cCSSStyleDeclaration>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<std::string >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagTreatNullAsEmptyString), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_transform(value, &exception_state);
result_value = v8::Undefined(isolate);
  return;
});
}


void transformOriginAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<CSSStyleDeclaration,
                                                    V8cCSSStyleDeclaration>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->transform_origin(&exception_state),
              &result_value);

  });
}

void transformOriginAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<CSSStyleDeclaration, V8cCSSStyleDeclaration>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<std::string >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagTreatNullAsEmptyString), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_transform_origin(value, &exception_state);
result_value = v8::Undefined(isolate);
  return;
});
}


void transitionAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<CSSStyleDeclaration,
                                                    V8cCSSStyleDeclaration>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->transition(&exception_state),
              &result_value);

  });
}

void transitionAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<CSSStyleDeclaration, V8cCSSStyleDeclaration>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<std::string >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagTreatNullAsEmptyString), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_transition(value, &exception_state);
result_value = v8::Undefined(isolate);
  return;
});
}


void transitionDelayAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<CSSStyleDeclaration,
                                                    V8cCSSStyleDeclaration>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->transition_delay(&exception_state),
              &result_value);

  });
}

void transitionDelayAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<CSSStyleDeclaration, V8cCSSStyleDeclaration>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<std::string >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagTreatNullAsEmptyString), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_transition_delay(value, &exception_state);
result_value = v8::Undefined(isolate);
  return;
});
}


void transitionDurationAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<CSSStyleDeclaration,
                                                    V8cCSSStyleDeclaration>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->transition_duration(&exception_state),
              &result_value);

  });
}

void transitionDurationAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<CSSStyleDeclaration, V8cCSSStyleDeclaration>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<std::string >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagTreatNullAsEmptyString), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_transition_duration(value, &exception_state);
result_value = v8::Undefined(isolate);
  return;
});
}


void transitionPropertyAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<CSSStyleDeclaration,
                                                    V8cCSSStyleDeclaration>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->transition_property(&exception_state),
              &result_value);

  });
}

void transitionPropertyAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<CSSStyleDeclaration, V8cCSSStyleDeclaration>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<std::string >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagTreatNullAsEmptyString), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_transition_property(value, &exception_state);
result_value = v8::Undefined(isolate);
  return;
});
}


void transitionTimingFunctionAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<CSSStyleDeclaration,
                                                    V8cCSSStyleDeclaration>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->transition_timing_function(&exception_state),
              &result_value);

  });
}

void transitionTimingFunctionAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<CSSStyleDeclaration, V8cCSSStyleDeclaration>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<std::string >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagTreatNullAsEmptyString), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_transition_timing_function(value, &exception_state);
result_value = v8::Undefined(isolate);
  return;
});
}


void verticalAlignAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<CSSStyleDeclaration,
                                                    V8cCSSStyleDeclaration>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->vertical_align(&exception_state),
              &result_value);

  });
}

void verticalAlignAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<CSSStyleDeclaration, V8cCSSStyleDeclaration>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<std::string >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagTreatNullAsEmptyString), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_vertical_align(value, &exception_state);
result_value = v8::Undefined(isolate);
  return;
});
}


void visibilityAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<CSSStyleDeclaration,
                                                    V8cCSSStyleDeclaration>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->visibility(&exception_state),
              &result_value);

  });
}

void visibilityAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<CSSStyleDeclaration, V8cCSSStyleDeclaration>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<std::string >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagTreatNullAsEmptyString), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_visibility(value, &exception_state);
result_value = v8::Undefined(isolate);
  return;
});
}


void whiteSpaceAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<CSSStyleDeclaration,
                                                    V8cCSSStyleDeclaration>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->white_space(&exception_state),
              &result_value);

  });
}

void whiteSpaceAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<CSSStyleDeclaration, V8cCSSStyleDeclaration>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<std::string >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagTreatNullAsEmptyString), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_white_space(value, &exception_state);
result_value = v8::Undefined(isolate);
  return;
});
}


void widthAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<CSSStyleDeclaration,
                                                    V8cCSSStyleDeclaration>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->width(&exception_state),
              &result_value);

  });
}

void widthAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<CSSStyleDeclaration, V8cCSSStyleDeclaration>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<std::string >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagTreatNullAsEmptyString), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_width(value, &exception_state);
result_value = v8::Undefined(isolate);
  return;
});
}


void wordWrapAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<CSSStyleDeclaration,
                                                    V8cCSSStyleDeclaration>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->word_wrap(&exception_state),
              &result_value);

  });
}

void wordWrapAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<CSSStyleDeclaration, V8cCSSStyleDeclaration>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<std::string >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagTreatNullAsEmptyString), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_word_wrap(value, &exception_state);
result_value = v8::Undefined(isolate);
  return;
});
}


void zIndexAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<CSSStyleDeclaration,
                                                    V8cCSSStyleDeclaration>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->z_index(&exception_state),
              &result_value);

  });
}

void zIndexAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<CSSStyleDeclaration, V8cCSSStyleDeclaration>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<std::string >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagTreatNullAsEmptyString), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_z_index(value, &exception_state);
result_value = v8::Undefined(isolate);
  return;
});
}


void cssTextAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<CSSStyleDeclaration,
                                                    V8cCSSStyleDeclaration>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->css_text(&exception_state),
              &result_value);

  });
}

void cssTextAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<CSSStyleDeclaration, V8cCSSStyleDeclaration>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<std::string >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagTreatNullAsEmptyString), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_css_text(value, &exception_state);
result_value = v8::Undefined(isolate);
  return;
});
}


void lengthAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<CSSStyleDeclaration,
                                                    V8cCSSStyleDeclaration>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->length(),
              &result_value);

  });
}



void parentRuleAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<CSSStyleDeclaration,
                                                    V8cCSSStyleDeclaration>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, CSSStyleDeclaration* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->parent_rule(),
              &result_value);

  });
}




void getPropertyValueMethod(const v8::FunctionCallbackInfo<v8::Value>& info) {
  v8::Isolate* isolate = info.GetIsolate();
  v8::Local<v8::Object> object = info.Holder();
  if (!script::v8c::shared_bindings::object_implements_interface(V8cCSSStyleDeclaration::GetTemplate(isolate), isolate, object)) {
    return;
  }
  V8cExceptionState exception_state{isolate};
  v8::Local<v8::Value> result_value;

  CSSStyleDeclaration* impl =
          script::v8c::shared_bindings::get_impl_from_object<
             CSSStyleDeclaration>(object);
  if (!impl) {
    return;
  }
  const size_t kMinArguments = 1;
  if (info.Length() < kMinArguments) {
    exception_state.SetSimpleException(script::kInvalidNumberOfArguments);
    return;
  }
  // Non-optional arguments
  TypeTraits<std::string >::ConversionType property;
  DCHECK_LT(0, info.Length());
  v8::Local<v8::Value> non_optional_value0 = info[0];
  FromJSValue(isolate,
              non_optional_value0,
              kNoConversionFlags,
              &exception_state, &property);
  if (exception_state.is_exception_set()) {
    return;
  }

  if (!exception_state.is_exception_set()) {
    ToJSValue(isolate,
              impl->GetPropertyValue(property),
              &result_value);
}
  if (!exception_state.is_exception_set()) {
    info.GetReturnValue().Set(result_value);
  }

}



void itemMethod(const v8::FunctionCallbackInfo<v8::Value>& info) {
  v8::Isolate* isolate = info.GetIsolate();
  v8::Local<v8::Object> object = info.Holder();
  if (!script::v8c::shared_bindings::object_implements_interface(V8cCSSStyleDeclaration::GetTemplate(isolate), isolate, object)) {
    return;
  }
  V8cExceptionState exception_state{isolate};
  v8::Local<v8::Value> result_value;

  CSSStyleDeclaration* impl =
          script::v8c::shared_bindings::get_impl_from_object<
             CSSStyleDeclaration>(object);
  if (!impl) {
    return;
  }
  const size_t kMinArguments = 1;
  if (info.Length() < kMinArguments) {
    exception_state.SetSimpleException(script::kInvalidNumberOfArguments);
    return;
  }
  // Non-optional arguments
  TypeTraits<uint32_t >::ConversionType index;
  DCHECK_LT(0, info.Length());
  v8::Local<v8::Value> non_optional_value0 = info[0];
  FromJSValue(isolate,
              non_optional_value0,
              kNoConversionFlags,
              &exception_state, &index);
  if (exception_state.is_exception_set()) {
    return;
  }

  if (!exception_state.is_exception_set()) {
    ToJSValue(isolate,
              impl->Item(index),
              &result_value);
}
  if (!exception_state.is_exception_set()) {
    info.GetReturnValue().Set(result_value);
  }

}



void removePropertyMethod(const v8::FunctionCallbackInfo<v8::Value>& info) {
  v8::Isolate* isolate = info.GetIsolate();
  v8::Local<v8::Object> object = info.Holder();
  if (!script::v8c::shared_bindings::object_implements_interface(V8cCSSStyleDeclaration::GetTemplate(isolate), isolate, object)) {
    return;
  }
  V8cExceptionState exception_state{isolate};
  v8::Local<v8::Value> result_value;

  CSSStyleDeclaration* impl =
          script::v8c::shared_bindings::get_impl_from_object<
             CSSStyleDeclaration>(object);
  if (!impl) {
    return;
  }
  const size_t kMinArguments = 1;
  if (info.Length() < kMinArguments) {
    exception_state.SetSimpleException(script::kInvalidNumberOfArguments);
    return;
  }
  // Non-optional arguments
  TypeTraits<std::string >::ConversionType property;
  DCHECK_LT(0, info.Length());
  v8::Local<v8::Value> non_optional_value0 = info[0];
  FromJSValue(isolate,
              non_optional_value0,
              kNoConversionFlags,
              &exception_state, &property);
  if (exception_state.is_exception_set()) {
    return;
  }

  if (!exception_state.is_exception_set()) {
    ToJSValue(isolate,
              impl->RemoveProperty(property, &exception_state),
              &result_value);
}
  if (!exception_state.is_exception_set()) {
    info.GetReturnValue().Set(result_value);
  }

}



void setPropertyMethod(const v8::FunctionCallbackInfo<v8::Value>& info) {
  v8::Isolate* isolate = info.GetIsolate();
  v8::Local<v8::Object> object = info.Holder();
  if (!script::v8c::shared_bindings::object_implements_interface(V8cCSSStyleDeclaration::GetTemplate(isolate), isolate, object)) {
    return;
  }
  V8cExceptionState exception_state{isolate};
  v8::Local<v8::Value> result_value;

  CSSStyleDeclaration* impl =
          script::v8c::shared_bindings::get_impl_from_object<
             CSSStyleDeclaration>(object);
  if (!impl) {
    return;
  }
  const size_t kMinArguments = 2;
  if (info.Length() < kMinArguments) {
    exception_state.SetSimpleException(script::kInvalidNumberOfArguments);
    return;
  }
  // Non-optional arguments
  TypeTraits<std::string >::ConversionType property;
  TypeTraits<std::string >::ConversionType value;
  // Optional arguments
  TypeTraits<std::string >::ConversionType priority;
  DCHECK_LT(0, info.Length());
  v8::Local<v8::Value> non_optional_value0 = info[0];
  FromJSValue(isolate,
              non_optional_value0,
              kNoConversionFlags,
              &exception_state, &property);
  if (exception_state.is_exception_set()) {
    return;
  }
  DCHECK_LT(1, info.Length());
  v8::Local<v8::Value> non_optional_value1 = info[1];
  FromJSValue(isolate,
              non_optional_value1,
              (kConversionFlagTreatNullAsEmptyString),
              &exception_state, &value);
  if (exception_state.is_exception_set()) {
    return;
  }
  size_t num_set_arguments = 2;
  if (info.Length() > 2) {
    v8::Local<v8::Value> optional_value0 = info[2];
    {
      FromJSValue(isolate,
                  optional_value0,
                  (kConversionFlagTreatNullAsEmptyString),
                  &exception_state,
                  &priority);
    }
    if (exception_state.is_exception_set()) {
      return;
    }
    ++num_set_arguments;
  }
  switch (num_set_arguments) {
    case 2:
      {
          impl->SetProperty(property, value, &exception_state);
        result_value = v8::Undefined(isolate);
      }
      break;
    case 3:
      {
          impl->SetProperty(property, value, priority, &exception_state);
        result_value = v8::Undefined(isolate);
      }
      break;
    default:
      NOTREACHED();
      return;
  }
}



void setPropertyValueMethod(const v8::FunctionCallbackInfo<v8::Value>& info) {
  v8::Isolate* isolate = info.GetIsolate();
  v8::Local<v8::Object> object = info.Holder();
  if (!script::v8c::shared_bindings::object_implements_interface(V8cCSSStyleDeclaration::GetTemplate(isolate), isolate, object)) {
    return;
  }
  V8cExceptionState exception_state{isolate};
  v8::Local<v8::Value> result_value;

  CSSStyleDeclaration* impl =
          script::v8c::shared_bindings::get_impl_from_object<
             CSSStyleDeclaration>(object);
  if (!impl) {
    return;
  }
  const size_t kMinArguments = 2;
  if (info.Length() < kMinArguments) {
    exception_state.SetSimpleException(script::kInvalidNumberOfArguments);
    return;
  }
  // Non-optional arguments
  TypeTraits<std::string >::ConversionType property;
  TypeTraits<std::string >::ConversionType value;
  DCHECK_LT(0, info.Length());
  v8::Local<v8::Value> non_optional_value0 = info[0];
  FromJSValue(isolate,
              non_optional_value0,
              kNoConversionFlags,
              &exception_state, &property);
  if (exception_state.is_exception_set()) {
    return;
  }
  DCHECK_LT(1, info.Length());
  v8::Local<v8::Value> non_optional_value1 = info[1];
  FromJSValue(isolate,
              non_optional_value1,
              (kConversionFlagTreatNullAsEmptyString),
              &exception_state, &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->SetPropertyValue(property, value, &exception_state);
result_value = v8::Undefined(isolate);

}



void InitializeTemplate(v8::Isolate* isolate) {
  // https://heycam.github.io/webidl/#interface-object
  // 3.6.1. Interface object
  //
  // The interface object for a given interface is a built-in function object.
  // It has properties that correspond to the constants and static operations
  // defined on that interface, as described in sections 3.6.6 Constants and
  // 3.6.8 Operations.
  //
  // If the interface is declared with a [Constructor] extended attribute,
  // then the interface object can be called as a constructor to create an
  // object that implements that interface. Calling that interface as a
  // function will throw an exception.
  //
  // Interface objects whose interfaces are not declared with a [Constructor]
  // extended attribute will throw when called, both as a function and as a
  // constructor.
  //
  // An interface object for a non-callback interface has an associated object
  // called the interface prototype object. This object has properties that
  // correspond to the regular attributes and regular operations defined on
  // the interface, and is described in more detail in 3.6.3 Interface
  // prototype object.
  v8::Local<v8::FunctionTemplate> function_template =
      v8::FunctionTemplate::New(
          isolate,
          DummyConstructor,
          v8::Local<v8::Value>(),
          v8::Local<v8::Signature>(),
          0);
  function_template->SetClassName(NewInternalString(isolate, "CSSStyleDeclaration"));
  function_template->ReadOnlyPrototype();

  v8::Local<v8::ObjectTemplate> prototype_template = function_template->PrototypeTemplate();
  v8::Local<v8::ObjectTemplate> instance_template = function_template->InstanceTemplate();
  instance_template->SetInternalFieldCount(WrapperPrivate::kInternalFieldCount);

  V8cGlobalEnvironment* global_environment = V8cGlobalEnvironment::GetFromIsolate(isolate);
  global_environment->AddInterfaceData(kInterfaceUniqueId, function_template);


  // https://heycam.github.io/webidl/#es-constants
  // 3.6.6. Constants
  //
  // For each exposed constant defined on an interface A, there must be a
  // corresponding property. The property has the following characteristics:

  // https://heycam.github.io/webidl/#es-attributes
  // 3.6.7. Attributes
  //
  // For each exposed attribute of the interface there must exist a
  // corresponding property. The characteristics of this property are as
  // follows:
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "alignContent"
                  ,alignContentAttributeGetter
                  ,alignContentAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "alignItems"
                  ,alignItemsAttributeGetter
                  ,alignItemsAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "alignSelf"
                  ,alignSelfAttributeGetter
                  ,alignSelfAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "animation"
                  ,animationAttributeGetter
                  ,animationAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "animationDelay"
                  ,animationDelayAttributeGetter
                  ,animationDelayAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "animationDirection"
                  ,animationDirectionAttributeGetter
                  ,animationDirectionAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "animationDuration"
                  ,animationDurationAttributeGetter
                  ,animationDurationAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "animationFillMode"
                  ,animationFillModeAttributeGetter
                  ,animationFillModeAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "animationIterationCount"
                  ,animationIterationCountAttributeGetter
                  ,animationIterationCountAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "animationName"
                  ,animationNameAttributeGetter
                  ,animationNameAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "animationTimingFunction"
                  ,animationTimingFunctionAttributeGetter
                  ,animationTimingFunctionAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "background"
                  ,backgroundAttributeGetter
                  ,backgroundAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "backgroundColor"
                  ,backgroundColorAttributeGetter
                  ,backgroundColorAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "backgroundImage"
                  ,backgroundImageAttributeGetter
                  ,backgroundImageAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "backgroundPosition"
                  ,backgroundPositionAttributeGetter
                  ,backgroundPositionAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "backgroundRepeat"
                  ,backgroundRepeatAttributeGetter
                  ,backgroundRepeatAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "backgroundSize"
                  ,backgroundSizeAttributeGetter
                  ,backgroundSizeAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "border"
                  ,borderAttributeGetter
                  ,borderAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "borderBottom"
                  ,borderBottomAttributeGetter
                  ,borderBottomAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "borderBottomColor"
                  ,borderBottomColorAttributeGetter
                  ,borderBottomColorAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "borderBottomLeftRadius"
                  ,borderBottomLeftRadiusAttributeGetter
                  ,borderBottomLeftRadiusAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "borderBottomRightRadius"
                  ,borderBottomRightRadiusAttributeGetter
                  ,borderBottomRightRadiusAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "borderBottomStyle"
                  ,borderBottomStyleAttributeGetter
                  ,borderBottomStyleAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "borderBottomWidth"
                  ,borderBottomWidthAttributeGetter
                  ,borderBottomWidthAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "borderColor"
                  ,borderColorAttributeGetter
                  ,borderColorAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "borderLeft"
                  ,borderLeftAttributeGetter
                  ,borderLeftAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "borderLeftColor"
                  ,borderLeftColorAttributeGetter
                  ,borderLeftColorAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "borderLeftStyle"
                  ,borderLeftStyleAttributeGetter
                  ,borderLeftStyleAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "borderLeftWidth"
                  ,borderLeftWidthAttributeGetter
                  ,borderLeftWidthAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "borderRadius"
                  ,borderRadiusAttributeGetter
                  ,borderRadiusAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "borderRight"
                  ,borderRightAttributeGetter
                  ,borderRightAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "borderRightColor"
                  ,borderRightColorAttributeGetter
                  ,borderRightColorAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "borderRightStyle"
                  ,borderRightStyleAttributeGetter
                  ,borderRightStyleAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "borderRightWidth"
                  ,borderRightWidthAttributeGetter
                  ,borderRightWidthAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "borderStyle"
                  ,borderStyleAttributeGetter
                  ,borderStyleAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "borderTop"
                  ,borderTopAttributeGetter
                  ,borderTopAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "borderTopColor"
                  ,borderTopColorAttributeGetter
                  ,borderTopColorAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "borderTopLeftRadius"
                  ,borderTopLeftRadiusAttributeGetter
                  ,borderTopLeftRadiusAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "borderTopRightRadius"
                  ,borderTopRightRadiusAttributeGetter
                  ,borderTopRightRadiusAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "borderTopStyle"
                  ,borderTopStyleAttributeGetter
                  ,borderTopStyleAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "borderTopWidth"
                  ,borderTopWidthAttributeGetter
                  ,borderTopWidthAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "borderWidth"
                  ,borderWidthAttributeGetter
                  ,borderWidthAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "bottom"
                  ,bottomAttributeGetter
                  ,bottomAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "boxShadow"
                  ,boxShadowAttributeGetter
                  ,boxShadowAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "color"
                  ,colorAttributeGetter
                  ,colorAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "content"
                  ,contentAttributeGetter
                  ,contentAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "display"
                  ,displayAttributeGetter
                  ,displayAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "filter"
                  ,filterAttributeGetter
                  ,filterAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "flex"
                  ,flexAttributeGetter
                  ,flexAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "flexBasis"
                  ,flexBasisAttributeGetter
                  ,flexBasisAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "flexDirection"
                  ,flexDirectionAttributeGetter
                  ,flexDirectionAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "flexFlow"
                  ,flexFlowAttributeGetter
                  ,flexFlowAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "flexGrow"
                  ,flexGrowAttributeGetter
                  ,flexGrowAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "flexShrink"
                  ,flexShrinkAttributeGetter
                  ,flexShrinkAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "flexWrap"
                  ,flexWrapAttributeGetter
                  ,flexWrapAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "font"
                  ,fontAttributeGetter
                  ,fontAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "fontFamily"
                  ,fontFamilyAttributeGetter
                  ,fontFamilyAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "fontSize"
                  ,fontSizeAttributeGetter
                  ,fontSizeAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "fontStyle"
                  ,fontStyleAttributeGetter
                  ,fontStyleAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "fontWeight"
                  ,fontWeightAttributeGetter
                  ,fontWeightAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "height"
                  ,heightAttributeGetter
                  ,heightAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "justifyContent"
                  ,justifyContentAttributeGetter
                  ,justifyContentAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "left"
                  ,leftAttributeGetter
                  ,leftAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "lineHeight"
                  ,lineHeightAttributeGetter
                  ,lineHeightAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "margin"
                  ,marginAttributeGetter
                  ,marginAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "marginBottom"
                  ,marginBottomAttributeGetter
                  ,marginBottomAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "marginLeft"
                  ,marginLeftAttributeGetter
                  ,marginLeftAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "marginRight"
                  ,marginRightAttributeGetter
                  ,marginRightAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "marginTop"
                  ,marginTopAttributeGetter
                  ,marginTopAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "maxHeight"
                  ,maxHeightAttributeGetter
                  ,maxHeightAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "maxWidth"
                  ,maxWidthAttributeGetter
                  ,maxWidthAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "minHeight"
                  ,minHeightAttributeGetter
                  ,minHeightAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "minWidth"
                  ,minWidthAttributeGetter
                  ,minWidthAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "opacity"
                  ,opacityAttributeGetter
                  ,opacityAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "order"
                  ,orderAttributeGetter
                  ,orderAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "outline"
                  ,outlineAttributeGetter
                  ,outlineAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "outlineColor"
                  ,outlineColorAttributeGetter
                  ,outlineColorAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "outlineStyle"
                  ,outlineStyleAttributeGetter
                  ,outlineStyleAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "outlineWidth"
                  ,outlineWidthAttributeGetter
                  ,outlineWidthAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "overflow"
                  ,overflowAttributeGetter
                  ,overflowAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "overflowWrap"
                  ,overflowWrapAttributeGetter
                  ,overflowWrapAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "padding"
                  ,paddingAttributeGetter
                  ,paddingAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "paddingBottom"
                  ,paddingBottomAttributeGetter
                  ,paddingBottomAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "paddingLeft"
                  ,paddingLeftAttributeGetter
                  ,paddingLeftAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "paddingRight"
                  ,paddingRightAttributeGetter
                  ,paddingRightAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "paddingTop"
                  ,paddingTopAttributeGetter
                  ,paddingTopAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "pointerEvents"
                  ,pointerEventsAttributeGetter
                  ,pointerEventsAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "position"
                  ,positionAttributeGetter
                  ,positionAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "right"
                  ,rightAttributeGetter
                  ,rightAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "textAlign"
                  ,textAlignAttributeGetter
                  ,textAlignAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "textDecoration"
                  ,textDecorationAttributeGetter
                  ,textDecorationAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "textDecorationColor"
                  ,textDecorationColorAttributeGetter
                  ,textDecorationColorAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "textDecorationLine"
                  ,textDecorationLineAttributeGetter
                  ,textDecorationLineAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "textIndent"
                  ,textIndentAttributeGetter
                  ,textIndentAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "textOverflow"
                  ,textOverflowAttributeGetter
                  ,textOverflowAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "textShadow"
                  ,textShadowAttributeGetter
                  ,textShadowAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "textTransform"
                  ,textTransformAttributeGetter
                  ,textTransformAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "top"
                  ,topAttributeGetter
                  ,topAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "transform"
                  ,transformAttributeGetter
                  ,transformAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "transformOrigin"
                  ,transformOriginAttributeGetter
                  ,transformOriginAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "transition"
                  ,transitionAttributeGetter
                  ,transitionAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "transitionDelay"
                  ,transitionDelayAttributeGetter
                  ,transitionDelayAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "transitionDuration"
                  ,transitionDurationAttributeGetter
                  ,transitionDurationAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "transitionProperty"
                  ,transitionPropertyAttributeGetter
                  ,transitionPropertyAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "transitionTimingFunction"
                  ,transitionTimingFunctionAttributeGetter
                  ,transitionTimingFunctionAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "verticalAlign"
                  ,verticalAlignAttributeGetter
                  ,verticalAlignAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "visibility"
                  ,visibilityAttributeGetter
                  ,visibilityAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "whiteSpace"
                  ,whiteSpaceAttributeGetter
                  ,whiteSpaceAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "width"
                  ,widthAttributeGetter
                  ,widthAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "wordWrap"
                  ,wordWrapAttributeGetter
                  ,wordWrapAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "zIndex"
                  ,zIndexAttributeGetter
                  ,zIndexAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "cssText"
                  ,cssTextAttributeGetter
                  ,cssTextAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  false,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "length"
                  ,lengthAttributeGetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  false,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "parentRule"
                  ,parentRuleAttributeGetter
                  );

  }

  // https://heycam.github.io/webidl/#es-operations
  // 3.6.8. Operations
  //
  // For each unique identifier of an exposed operation defined on the
  // interface, there must exist a corresponding property, unless the effective
  // overload set for that identifier and operation and with an argument count
  // of 0 has no entries.
  //
  // The characteristics of this property are as follows:
  {
    // The name of the property is the identifier.
    v8::Local<v8::String> name = NewInternalString(
        isolate,
        "getPropertyValue");

    // The property has attributes { [[Writable]]: B, [[Enumerable]]: true,
    // [[Configurable]]: B }, where B is false if the operation is unforgeable
    // on the interface, and true otherwise.
    bool B = true;
    v8::PropertyAttribute attributes = static_cast<v8::PropertyAttribute>(
        B ? v8::None : (v8::ReadOnly | v8::DontDelete));

    v8::Local<v8::FunctionTemplate> method_template =
        v8::FunctionTemplate::New(isolate, getPropertyValueMethod);
    method_template->RemovePrototype();
    method_template->SetLength(1);

    // The location of the property is determined as follows:
    // Otherwise, the property exists solely on the interface's interface
    // prototype object.
    prototype_template->
        Set(name, method_template);

    // The value of the property is the result of creating an operation function
    // given the operation, the interface, and the relevant Realm of the object
    // that is the location of the property.

    // Note: that is, even if an includes statement was used to make an
    // operation available on the interface, we pass in the interface which
    // includes the interface mixin, and not the interface mixin on which the
    // operation was originally declared.
  }
  {
    // The name of the property is the identifier.
    v8::Local<v8::String> name = NewInternalString(
        isolate,
        "item");

    // The property has attributes { [[Writable]]: B, [[Enumerable]]: true,
    // [[Configurable]]: B }, where B is false if the operation is unforgeable
    // on the interface, and true otherwise.
    bool B = true;
    v8::PropertyAttribute attributes = static_cast<v8::PropertyAttribute>(
        B ? v8::None : (v8::ReadOnly | v8::DontDelete));

    v8::Local<v8::FunctionTemplate> method_template =
        v8::FunctionTemplate::New(isolate, itemMethod);
    method_template->RemovePrototype();
    method_template->SetLength(1);

    // The location of the property is determined as follows:
    // Otherwise, the property exists solely on the interface's interface
    // prototype object.
    prototype_template->
        Set(name, method_template);

    // The value of the property is the result of creating an operation function
    // given the operation, the interface, and the relevant Realm of the object
    // that is the location of the property.

    // Note: that is, even if an includes statement was used to make an
    // operation available on the interface, we pass in the interface which
    // includes the interface mixin, and not the interface mixin on which the
    // operation was originally declared.
  }
  {
    // The name of the property is the identifier.
    v8::Local<v8::String> name = NewInternalString(
        isolate,
        "removeProperty");

    // The property has attributes { [[Writable]]: B, [[Enumerable]]: true,
    // [[Configurable]]: B }, where B is false if the operation is unforgeable
    // on the interface, and true otherwise.
    bool B = true;
    v8::PropertyAttribute attributes = static_cast<v8::PropertyAttribute>(
        B ? v8::None : (v8::ReadOnly | v8::DontDelete));

    v8::Local<v8::FunctionTemplate> method_template =
        v8::FunctionTemplate::New(isolate, removePropertyMethod);
    method_template->RemovePrototype();
    method_template->SetLength(1);

    // The location of the property is determined as follows:
    // Otherwise, the property exists solely on the interface's interface
    // prototype object.
    prototype_template->
        Set(name, method_template);

    // The value of the property is the result of creating an operation function
    // given the operation, the interface, and the relevant Realm of the object
    // that is the location of the property.

    // Note: that is, even if an includes statement was used to make an
    // operation available on the interface, we pass in the interface which
    // includes the interface mixin, and not the interface mixin on which the
    // operation was originally declared.
  }
  {
    // The name of the property is the identifier.
    v8::Local<v8::String> name = NewInternalString(
        isolate,
        "setProperty");

    // The property has attributes { [[Writable]]: B, [[Enumerable]]: true,
    // [[Configurable]]: B }, where B is false if the operation is unforgeable
    // on the interface, and true otherwise.
    bool B = true;
    v8::PropertyAttribute attributes = static_cast<v8::PropertyAttribute>(
        B ? v8::None : (v8::ReadOnly | v8::DontDelete));

    v8::Local<v8::FunctionTemplate> method_template =
        v8::FunctionTemplate::New(isolate, setPropertyMethod);
    method_template->RemovePrototype();
    method_template->SetLength(2);

    // The location of the property is determined as follows:
    // Otherwise, the property exists solely on the interface's interface
    // prototype object.
    prototype_template->
        Set(name, method_template);

    // The value of the property is the result of creating an operation function
    // given the operation, the interface, and the relevant Realm of the object
    // that is the location of the property.

    // Note: that is, even if an includes statement was used to make an
    // operation available on the interface, we pass in the interface which
    // includes the interface mixin, and not the interface mixin on which the
    // operation was originally declared.
  }
  {
    // The name of the property is the identifier.
    v8::Local<v8::String> name = NewInternalString(
        isolate,
        "setPropertyValue");

    // The property has attributes { [[Writable]]: B, [[Enumerable]]: true,
    // [[Configurable]]: B }, where B is false if the operation is unforgeable
    // on the interface, and true otherwise.
    bool B = true;
    v8::PropertyAttribute attributes = static_cast<v8::PropertyAttribute>(
        B ? v8::None : (v8::ReadOnly | v8::DontDelete));

    v8::Local<v8::FunctionTemplate> method_template =
        v8::FunctionTemplate::New(isolate, setPropertyValueMethod);
    method_template->RemovePrototype();
    method_template->SetLength(2);

    // The location of the property is determined as follows:
    // Otherwise, the property exists solely on the interface's interface
    // prototype object.
    prototype_template->
        Set(name, method_template);

    // The value of the property is the result of creating an operation function
    // given the operation, the interface, and the relevant Realm of the object
    // that is the location of the property.

    // Note: that is, even if an includes statement was used to make an
    // operation available on the interface, we pass in the interface which
    // includes the interface mixin, and not the interface mixin on which the
    // operation was originally declared.
  }

  // https://heycam.github.io/webidl/#es-stringifier
  // 3.6.8.2. Stringifiers
  prototype_template->Set(
      v8::Symbol::GetToStringTag(isolate),
      NewInternalString(isolate, "CSSStyleDeclaration"),
      static_cast<v8::PropertyAttribute>(v8::ReadOnly | v8::DontEnum));




  {
    v8::IndexedPropertyHandlerConfiguration indexed_property_handler_configuration = {
      IndexedPropertyGetterCallback,
      nullptr,
      IndexedPropertyDescriptorCallback,
      nullptr,
      IndexedPropertyEnumeratorCallback,
      IndexedPropertyDefinerCallback
    };
    instance_template->SetHandler(indexed_property_handler_configuration);
  }

}

}  // namespace


v8::Local<v8::Object> V8cCSSStyleDeclaration::CreateWrapper(
    v8::Isolate* isolate, const scoped_refptr<Wrappable>& wrappable) {
  EscapableEntryScope entry_scope(isolate);
  v8::Local<v8::Context> context = isolate->GetCurrentContext();

  V8cGlobalEnvironment* global_environment = V8cGlobalEnvironment::GetFromIsolate(isolate);
  if (!global_environment->HasInterfaceData(kInterfaceUniqueId)) {
    InitializeTemplate(isolate);
  }
  v8::Local<v8::FunctionTemplate> function_template = global_environment->GetInterfaceData(kInterfaceUniqueId);

  DCHECK(function_template->InstanceTemplate()->InternalFieldCount() == WrapperPrivate::kInternalFieldCount);
  v8::Local<v8::Object> object = function_template->InstanceTemplate()->NewInstance(context).ToLocalChecked();
  DCHECK(object->InternalFieldCount() == WrapperPrivate::kInternalFieldCount);

  // This |WrapperPrivate|'s lifetime will be managed by V8.
  new WrapperPrivate(isolate, wrappable, object);
  return entry_scope.Escape(object);
}


v8::Local<v8::FunctionTemplate> V8cCSSStyleDeclaration::GetTemplate(v8::Isolate* isolate) {
  V8cGlobalEnvironment* global_environment = V8cGlobalEnvironment::GetFromIsolate(isolate);
  if (!global_environment->HasInterfaceData(kInterfaceUniqueId)) {
    InitializeTemplate(isolate);
  }
  return global_environment->GetInterfaceData(kInterfaceUniqueId);
}


}  // namespace cssom
}  // namespace cobalt


