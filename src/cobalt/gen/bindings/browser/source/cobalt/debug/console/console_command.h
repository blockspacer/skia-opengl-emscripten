// Copyright 2019 The Cobalt Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// clang-format off

// This file has been auto-generated by bindings/code_generator_cobalt.py. DO NOT MODIFY!
// Auto-generated from template: bindings/templates/dictionary.h.template

#ifndef ConsoleCommand_h
#define ConsoleCommand_h

#include <string>

#include "base/optional.h"
#include "cobalt/script/array_buffer.h"
#include "cobalt/script/array_buffer_view.h"
#include "cobalt/script/script_value.h"
#include "cobalt/script/sequence.h"
#include "cobalt/script/typed_arrays.h"
#include "cobalt/script/value_handle.h"


namespace cobalt {
namespace debug {
namespace console {

class ConsoleCommand {
 public:
  ConsoleCommand() {
    has_command_ = false;
    command_ = std::string();
    has_short_help_ = false;
    short_help_ = std::string();
    has_long_help_ = false;
    long_help_ = std::string();
  }

  ConsoleCommand(const ConsoleCommand& other) {
    has_command_ = other.has_command_;
    command_ = other.command_;
    has_short_help_ = other.has_short_help_;
    short_help_ = other.short_help_;
    has_long_help_ = other.has_long_help_;
    long_help_ = other.long_help_;
  }

  ConsoleCommand& operator=(const ConsoleCommand& other) {
    has_command_ = other.has_command_;
    command_ = other.command_;
    has_short_help_ = other.has_short_help_;
    short_help_ = other.short_help_;
    has_long_help_ = other.has_long_help_;
    long_help_ = other.long_help_;
    return *this;
  }

  bool has_command() const {
    return has_command_;
  }
  const std::string& command() const {
    DCHECK(has_command_);
    return command_;
  }
  void set_command(const std::string& value) {
    has_command_ = true;
    command_ = value;
  }

  bool has_short_help() const {
    return has_short_help_;
  }
  const std::string& short_help() const {
    DCHECK(has_short_help_);
    return short_help_;
  }
  void set_short_help(const std::string& value) {
    has_short_help_ = true;
    short_help_ = value;
  }

  bool has_long_help() const {
    return has_long_help_;
  }
  const std::string& long_help() const {
    DCHECK(has_long_help_);
    return long_help_;
  }
  void set_long_help(const std::string& value) {
    has_long_help_ = true;
    long_help_ = value;
  }


 private:
  bool has_command_;
  std::string command_;
  bool has_short_help_;
  std::string short_help_;
  bool has_long_help_;
  std::string long_help_;
};

// This ostream override is necessary for MOCK_METHODs commonly used
// in idl test code
inline std::ostream& operator<<(
    std::ostream& stream, const cobalt::debug::console::ConsoleCommand& in) {
  SB_UNREFERENCED_PARAMETER(in);
  stream << "[ConsoleCommand]";
  return stream;
}

}  // namespace cobalt
}  // namespace debug
}  // namespace console

#endif  // ConsoleCommand_h
