// Copyright 2019 The Cobalt Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// clang-format off

// This file has been auto-generated by bindings/code_generator_cobalt.py. DO NOT MODIFY!
// Auto-generated from template: bindings/templates/dictionary.h.template

#ifndef MediaRecorderOptions_h
#define MediaRecorderOptions_h

#include <string>

#include "base/optional.h"
#include "cobalt/script/array_buffer.h"
#include "cobalt/script/array_buffer_view.h"
#include "cobalt/script/script_value.h"
#include "cobalt/script/sequence.h"
#include "cobalt/script/typed_arrays.h"
#include "cobalt/script/value_handle.h"


namespace cobalt {
namespace media_capture {

class MediaRecorderOptions {
 public:
  MediaRecorderOptions() {
    has_mime_type_ = false;
    mime_type_ = std::string();
  }

  MediaRecorderOptions(const MediaRecorderOptions& other) {
    has_mime_type_ = other.has_mime_type_;
    mime_type_ = other.mime_type_;
  }

  MediaRecorderOptions& operator=(const MediaRecorderOptions& other) {
    has_mime_type_ = other.has_mime_type_;
    mime_type_ = other.mime_type_;
    return *this;
  }

  bool has_mime_type() const {
    return has_mime_type_;
  }
  const std::string& mime_type() const {
    DCHECK(has_mime_type_);
    return mime_type_;
  }
  void set_mime_type(const std::string& value) {
    has_mime_type_ = true;
    mime_type_ = value;
  }


 private:
  bool has_mime_type_;
  std::string mime_type_;
};

// This ostream override is necessary for MOCK_METHODs commonly used
// in idl test code
inline std::ostream& operator<<(
    std::ostream& stream, const cobalt::media_capture::MediaRecorderOptions& in) {
  SB_UNREFERENCED_PARAMETER(in);
  stream << "[MediaRecorderOptions]";
  return stream;
}

}  // namespace cobalt
}  // namespace media_capture

#endif  // MediaRecorderOptions_h
