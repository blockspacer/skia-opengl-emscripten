// Copyright 2019 The Cobalt Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// clang-format off

// This file has been auto-generated by bindings/code_generator_cobalt.py. DO NOT MODIFY!
// Auto-generated from template: bindings/templates/dictionary.h.template

#ifndef MediaTrackSettings_h
#define MediaTrackSettings_h

#include <string>

#include "base/optional.h"
#include "cobalt/script/array_buffer.h"
#include "cobalt/script/array_buffer_view.h"
#include "cobalt/script/script_value.h"
#include "cobalt/script/sequence.h"
#include "cobalt/script/typed_arrays.h"
#include "cobalt/script/value_handle.h"


namespace cobalt {
namespace media_stream {

class MediaTrackSettings {
 public:
  MediaTrackSettings() {
    has_sample_rate_ = false;
    sample_rate_ = int32_t();
    has_sample_size_ = false;
    sample_size_ = int32_t();
    has_channel_count_ = false;
    channel_count_ = int32_t();
  }

  MediaTrackSettings(const MediaTrackSettings& other) {
    has_sample_rate_ = other.has_sample_rate_;
    sample_rate_ = other.sample_rate_;
    has_sample_size_ = other.has_sample_size_;
    sample_size_ = other.sample_size_;
    has_channel_count_ = other.has_channel_count_;
    channel_count_ = other.channel_count_;
  }

  MediaTrackSettings& operator=(const MediaTrackSettings& other) {
    has_sample_rate_ = other.has_sample_rate_;
    sample_rate_ = other.sample_rate_;
    has_sample_size_ = other.has_sample_size_;
    sample_size_ = other.sample_size_;
    has_channel_count_ = other.has_channel_count_;
    channel_count_ = other.channel_count_;
    return *this;
  }

  bool has_sample_rate() const {
    return has_sample_rate_;
  }
  int32_t sample_rate() const {
    DCHECK(has_sample_rate_);
    return sample_rate_;
  }
  void set_sample_rate(int32_t value) {
    has_sample_rate_ = true;
    sample_rate_ = value;
  }

  bool has_sample_size() const {
    return has_sample_size_;
  }
  int32_t sample_size() const {
    DCHECK(has_sample_size_);
    return sample_size_;
  }
  void set_sample_size(int32_t value) {
    has_sample_size_ = true;
    sample_size_ = value;
  }

  bool has_channel_count() const {
    return has_channel_count_;
  }
  int32_t channel_count() const {
    DCHECK(has_channel_count_);
    return channel_count_;
  }
  void set_channel_count(int32_t value) {
    has_channel_count_ = true;
    channel_count_ = value;
  }


 private:
  bool has_sample_rate_;
  int32_t sample_rate_;
  bool has_sample_size_;
  int32_t sample_size_;
  bool has_channel_count_;
  int32_t channel_count_;
};

// This ostream override is necessary for MOCK_METHODs commonly used
// in idl test code
inline std::ostream& operator<<(
    std::ostream& stream, const cobalt::media_stream::MediaTrackSettings& in) {
  SB_UNREFERENCED_PARAMETER(in);
  stream << "[MediaTrackSettings]";
  return stream;
}

}  // namespace cobalt
}  // namespace media_stream

#endif  // MediaTrackSettings_h
