// Copyright 2019 The Cobalt Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// clang-format off

// This file has been auto-generated by bindings/code_generator_cobalt.py. DO NOT MODIFY!
// Auto-generated from template: bindings/templates/dictionary.h.template

#ifndef IntersectionObserverInit_h
#define IntersectionObserverInit_h

#include <string>

#include "base/optional.h"
#include "cobalt/script/array_buffer.h"
#include "cobalt/script/array_buffer_view.h"
#include "cobalt/script/script_value.h"
#include "cobalt/script/sequence.h"
#include "cobalt/script/typed_arrays.h"
#include "cobalt/script/value_handle.h"
#include "cobalt/dom/element.h"

using cobalt::dom::Element;

namespace cobalt {
namespace dom {

class IntersectionObserverInit {
 public:
  IntersectionObserverInit()
    : root_(NULL),
      root_margin_("0px"),
      threshold_(0) {
  }

  IntersectionObserverInit(const IntersectionObserverInit& other) {
    root_ = other.root_;
    root_margin_ = other.root_margin_;
    threshold_ = other.threshold_;
  }

  IntersectionObserverInit& operator=(const IntersectionObserverInit& other) {
    root_ = other.root_;
    root_margin_ = other.root_margin_;
    threshold_ = other.threshold_;
    return *this;
  }

  bool has_root() const {
    return true;
  }
  const scoped_refptr<Element>& root() const {
    return root_;
  }
  void set_root(const scoped_refptr<Element>& value) {
    root_ = value;
  }

  bool has_root_margin() const {
    return true;
  }
  const std::string& root_margin() const {
    return root_margin_;
  }
  void set_root_margin(const std::string& value) {
    root_margin_ = value;
  }

  bool has_threshold() const {
    return true;
  }
  ::cobalt::script::UnionType2<double, ::cobalt::script::Sequence< double > > threshold() const {
    return threshold_;
  }
  void set_threshold(::cobalt::script::UnionType2<double, ::cobalt::script::Sequence< double > > value) {
    threshold_ = value;
  }


 private:
  scoped_refptr<Element> root_;
  std::string root_margin_;
  ::cobalt::script::UnionType2<double, ::cobalt::script::Sequence< double > > threshold_;
};

// This ostream override is necessary for MOCK_METHODs commonly used
// in idl test code
inline std::ostream& operator<<(
    std::ostream& stream, const cobalt::dom::IntersectionObserverInit& in) {
  SB_UNREFERENCED_PARAMETER(in);
  stream << "[IntersectionObserverInit]";
  return stream;
}

}  // namespace cobalt
}  // namespace dom

#endif  // IntersectionObserverInit_h
