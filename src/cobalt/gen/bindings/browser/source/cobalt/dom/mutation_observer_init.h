// Copyright 2019 The Cobalt Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// clang-format off

// This file has been auto-generated by bindings/code_generator_cobalt.py. DO NOT MODIFY!
// Auto-generated from template: bindings/templates/dictionary.h.template

#ifndef MutationObserverInit_h
#define MutationObserverInit_h

#include <string>

#include "base/optional.h"
#include "cobalt/script/array_buffer.h"
#include "cobalt/script/array_buffer_view.h"
#include "cobalt/script/script_value.h"
#include "cobalt/script/sequence.h"
#include "cobalt/script/typed_arrays.h"
#include "cobalt/script/value_handle.h"


namespace cobalt {
namespace dom {

class MutationObserverInit {
 public:
  MutationObserverInit() {
    child_list_ = false;
    has_attributes_ = false;
    attributes_ = bool();
    has_character_data_ = false;
    character_data_ = bool();
    subtree_ = false;
    has_attribute_old_value_ = false;
    attribute_old_value_ = bool();
    has_character_data_old_value_ = false;
    character_data_old_value_ = bool();
    has_attribute_filter_ = false;
    attribute_filter_ = ::cobalt::script::Sequence< std::string >();
  }

  MutationObserverInit(const MutationObserverInit& other) {
    child_list_ = other.child_list_;
    has_attributes_ = other.has_attributes_;
    attributes_ = other.attributes_;
    has_character_data_ = other.has_character_data_;
    character_data_ = other.character_data_;
    subtree_ = other.subtree_;
    has_attribute_old_value_ = other.has_attribute_old_value_;
    attribute_old_value_ = other.attribute_old_value_;
    has_character_data_old_value_ = other.has_character_data_old_value_;
    character_data_old_value_ = other.character_data_old_value_;
    has_attribute_filter_ = other.has_attribute_filter_;
    attribute_filter_ = other.attribute_filter_;
  }

  MutationObserverInit& operator=(const MutationObserverInit& other) {
    child_list_ = other.child_list_;
    has_attributes_ = other.has_attributes_;
    attributes_ = other.attributes_;
    has_character_data_ = other.has_character_data_;
    character_data_ = other.character_data_;
    subtree_ = other.subtree_;
    has_attribute_old_value_ = other.has_attribute_old_value_;
    attribute_old_value_ = other.attribute_old_value_;
    has_character_data_old_value_ = other.has_character_data_old_value_;
    character_data_old_value_ = other.character_data_old_value_;
    has_attribute_filter_ = other.has_attribute_filter_;
    attribute_filter_ = other.attribute_filter_;
    return *this;
  }

  bool has_child_list() const {
    return true;
  }
  bool child_list() const {
    return child_list_;
  }
  void set_child_list(bool value) {
    child_list_ = value;
  }

  bool has_attributes() const {
    return has_attributes_;
  }
  bool attributes() const {
    DCHECK(has_attributes_);
    return attributes_;
  }
  void set_attributes(bool value) {
    has_attributes_ = true;
    attributes_ = value;
  }

  bool has_character_data() const {
    return has_character_data_;
  }
  bool character_data() const {
    DCHECK(has_character_data_);
    return character_data_;
  }
  void set_character_data(bool value) {
    has_character_data_ = true;
    character_data_ = value;
  }

  bool has_subtree() const {
    return true;
  }
  bool subtree() const {
    return subtree_;
  }
  void set_subtree(bool value) {
    subtree_ = value;
  }

  bool has_attribute_old_value() const {
    return has_attribute_old_value_;
  }
  bool attribute_old_value() const {
    DCHECK(has_attribute_old_value_);
    return attribute_old_value_;
  }
  void set_attribute_old_value(bool value) {
    has_attribute_old_value_ = true;
    attribute_old_value_ = value;
  }

  bool has_character_data_old_value() const {
    return has_character_data_old_value_;
  }
  bool character_data_old_value() const {
    DCHECK(has_character_data_old_value_);
    return character_data_old_value_;
  }
  void set_character_data_old_value(bool value) {
    has_character_data_old_value_ = true;
    character_data_old_value_ = value;
  }

  bool has_attribute_filter() const {
    return has_attribute_filter_;
  }
  ::cobalt::script::Sequence< std::string > attribute_filter() const {
    DCHECK(has_attribute_filter_);
    return attribute_filter_;
  }
  void set_attribute_filter(::cobalt::script::Sequence< std::string > value) {
    has_attribute_filter_ = true;
    attribute_filter_ = value;
  }


 private:
  bool child_list_;
  bool has_attributes_;
  bool attributes_;
  bool has_character_data_;
  bool character_data_;
  bool subtree_;
  bool has_attribute_old_value_;
  bool attribute_old_value_;
  bool has_character_data_old_value_;
  bool character_data_old_value_;
  bool has_attribute_filter_;
  ::cobalt::script::Sequence< std::string > attribute_filter_;
};

// This ostream override is necessary for MOCK_METHODs commonly used
// in idl test code
inline std::ostream& operator<<(
    std::ostream& stream, const cobalt::dom::MutationObserverInit& in) {
  SB_UNREFERENCED_PARAMETER(in);
  stream << "[MutationObserverInit]";
  return stream;
}

}  // namespace cobalt
}  // namespace dom

#endif  // MutationObserverInit_h
