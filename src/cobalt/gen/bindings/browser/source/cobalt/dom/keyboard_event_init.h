// Copyright 2019 The Cobalt Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// clang-format off

// This file has been auto-generated by bindings/code_generator_cobalt.py. DO NOT MODIFY!
// Auto-generated from template: bindings/templates/dictionary.h.template

#ifndef KeyboardEventInit_h
#define KeyboardEventInit_h

#include <string>

#include "base/optional.h"
#include "cobalt/script/array_buffer.h"
#include "cobalt/script/array_buffer_view.h"
#include "cobalt/script/script_value.h"
#include "cobalt/script/sequence.h"
#include "cobalt/script/typed_arrays.h"
#include "cobalt/script/value_handle.h"
#include "cobalt/dom/event_modifier_init.h"

using cobalt::dom::EventModifierInit;

namespace cobalt {
namespace dom {

class KeyboardEventInit : public cobalt::dom::EventModifierInit {
 public:
  KeyboardEventInit()
    : key_(""),
      code_(""),
      location_(0),
      repeat_(false),
      is_composing_(false),
      char_code_(0),
      key_code_(0),
      which_(0) {
  }

  KeyboardEventInit(const KeyboardEventInit& other)
    : cobalt::dom::EventModifierInit(other) {
    key_ = other.key_;
    code_ = other.code_;
    location_ = other.location_;
    repeat_ = other.repeat_;
    is_composing_ = other.is_composing_;
    char_code_ = other.char_code_;
    key_code_ = other.key_code_;
    which_ = other.which_;
  }

  KeyboardEventInit& operator=(const KeyboardEventInit& other) {
    cobalt::dom::EventModifierInit::operator=(other);
    key_ = other.key_;
    code_ = other.code_;
    location_ = other.location_;
    repeat_ = other.repeat_;
    is_composing_ = other.is_composing_;
    char_code_ = other.char_code_;
    key_code_ = other.key_code_;
    which_ = other.which_;
    return *this;
  }

  bool has_key() const {
    return true;
  }
  const std::string& key() const {
    return key_;
  }
  void set_key(const std::string& value) {
    key_ = value;
  }

  bool has_code() const {
    return true;
  }
  const std::string& code() const {
    return code_;
  }
  void set_code(const std::string& value) {
    code_ = value;
  }

  bool has_location() const {
    return true;
  }
  uint32_t location() const {
    return location_;
  }
  void set_location(uint32_t value) {
    location_ = value;
  }

  bool has_repeat() const {
    return true;
  }
  bool repeat() const {
    return repeat_;
  }
  void set_repeat(bool value) {
    repeat_ = value;
  }

  bool has_is_composing() const {
    return true;
  }
  bool is_composing() const {
    return is_composing_;
  }
  void set_is_composing(bool value) {
    is_composing_ = value;
  }

  bool has_char_code() const {
    return true;
  }
  uint32_t char_code() const {
    return char_code_;
  }
  void set_char_code(uint32_t value) {
    char_code_ = value;
  }

  bool has_key_code() const {
    return true;
  }
  uint32_t key_code() const {
    return key_code_;
  }
  void set_key_code(uint32_t value) {
    key_code_ = value;
  }

  bool has_which() const {
    return true;
  }
  uint32_t which() const {
    return which_;
  }
  void set_which(uint32_t value) {
    which_ = value;
  }


 private:
  std::string key_;
  std::string code_;
  uint32_t location_;
  bool repeat_;
  bool is_composing_;
  uint32_t char_code_;
  uint32_t key_code_;
  uint32_t which_;
};

// This ostream override is necessary for MOCK_METHODs commonly used
// in idl test code
inline std::ostream& operator<<(
    std::ostream& stream, const cobalt::dom::KeyboardEventInit& in) {
  SB_UNREFERENCED_PARAMETER(in);
  stream << "[KeyboardEventInit]";
  return stream;
}

}  // namespace cobalt
}  // namespace dom

#endif  // KeyboardEventInit_h
