// Copyright 2019 The Cobalt Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// clang-format off

// This file has been auto-generated by bindings/code_generator_cobalt.py. DO NOT MODIFY!
// Auto-generated from template: bindings/templates/dictionary.h.template

#ifndef IntersectionObserverEntryInit_h
#define IntersectionObserverEntryInit_h

#include <string>

#include "base/optional.h"
#include "cobalt/script/array_buffer.h"
#include "cobalt/script/array_buffer_view.h"
#include "cobalt/script/script_value.h"
#include "cobalt/script/sequence.h"
#include "cobalt/script/typed_arrays.h"
#include "cobalt/script/value_handle.h"
#include "cobalt/dom/dom_rect_read_only.h"
#include "cobalt/dom/element.h"

using cobalt::dom::DOMRectReadOnly;
using cobalt::dom::Element;

namespace cobalt {
namespace dom {

class IntersectionObserverEntryInit {
 public:
  IntersectionObserverEntryInit()
    : has_time_(false),
      time_(double()),
      has_root_bounds_(false),
      root_bounds_(scoped_refptr<DOMRectReadOnly>()),
      has_bounding_client_rect_(false),
      bounding_client_rect_(scoped_refptr<DOMRectReadOnly>()),
      has_intersection_rect_(false),
      intersection_rect_(scoped_refptr<DOMRectReadOnly>()),
      has_is_intersecting_(false),
      is_intersecting_(bool()),
      has_intersection_ratio_(false),
      intersection_ratio_(double()),
      has_target_(false),
      target_(scoped_refptr<Element>()) {
  }

  IntersectionObserverEntryInit(const IntersectionObserverEntryInit& other) {
    has_time_ = other.has_time_;
    time_ = other.time_;
    has_root_bounds_ = other.has_root_bounds_;
    root_bounds_ = other.root_bounds_;
    has_bounding_client_rect_ = other.has_bounding_client_rect_;
    bounding_client_rect_ = other.bounding_client_rect_;
    has_intersection_rect_ = other.has_intersection_rect_;
    intersection_rect_ = other.intersection_rect_;
    has_is_intersecting_ = other.has_is_intersecting_;
    is_intersecting_ = other.is_intersecting_;
    has_intersection_ratio_ = other.has_intersection_ratio_;
    intersection_ratio_ = other.intersection_ratio_;
    has_target_ = other.has_target_;
    target_ = other.target_;
  }

  IntersectionObserverEntryInit& operator=(const IntersectionObserverEntryInit& other) {
    has_time_ = other.has_time_;
    time_ = other.time_;
    has_root_bounds_ = other.has_root_bounds_;
    root_bounds_ = other.root_bounds_;
    has_bounding_client_rect_ = other.has_bounding_client_rect_;
    bounding_client_rect_ = other.bounding_client_rect_;
    has_intersection_rect_ = other.has_intersection_rect_;
    intersection_rect_ = other.intersection_rect_;
    has_is_intersecting_ = other.has_is_intersecting_;
    is_intersecting_ = other.is_intersecting_;
    has_intersection_ratio_ = other.has_intersection_ratio_;
    intersection_ratio_ = other.intersection_ratio_;
    has_target_ = other.has_target_;
    target_ = other.target_;
    return *this;
  }

  bool has_time() const {
    return has_time_;
  }
  const double& time() const {
    DCHECK(has_time_);
    return time_;
  }
  void set_time(const double& value) {
    has_time_ = true;
    time_ = value;
  }

  bool has_root_bounds() const {
    return has_root_bounds_;
  }
  const scoped_refptr<DOMRectReadOnly>& root_bounds() const {
    DCHECK(has_root_bounds_);
    return root_bounds_;
  }
  void set_root_bounds(const scoped_refptr<DOMRectReadOnly>& value) {
    has_root_bounds_ = true;
    root_bounds_ = value;
  }

  bool has_bounding_client_rect() const {
    return has_bounding_client_rect_;
  }
  const scoped_refptr<DOMRectReadOnly>& bounding_client_rect() const {
    DCHECK(has_bounding_client_rect_);
    return bounding_client_rect_;
  }
  void set_bounding_client_rect(const scoped_refptr<DOMRectReadOnly>& value) {
    has_bounding_client_rect_ = true;
    bounding_client_rect_ = value;
  }

  bool has_intersection_rect() const {
    return has_intersection_rect_;
  }
  const scoped_refptr<DOMRectReadOnly>& intersection_rect() const {
    DCHECK(has_intersection_rect_);
    return intersection_rect_;
  }
  void set_intersection_rect(const scoped_refptr<DOMRectReadOnly>& value) {
    has_intersection_rect_ = true;
    intersection_rect_ = value;
  }

  bool has_is_intersecting() const {
    return has_is_intersecting_;
  }
  bool is_intersecting() const {
    DCHECK(has_is_intersecting_);
    return is_intersecting_;
  }
  void set_is_intersecting(bool value) {
    has_is_intersecting_ = true;
    is_intersecting_ = value;
  }

  bool has_intersection_ratio() const {
    return has_intersection_ratio_;
  }
  double intersection_ratio() const {
    DCHECK(has_intersection_ratio_);
    return intersection_ratio_;
  }
  void set_intersection_ratio(double value) {
    has_intersection_ratio_ = true;
    intersection_ratio_ = value;
  }

  bool has_target() const {
    return has_target_;
  }
  const scoped_refptr<Element>& target() const {
    DCHECK(has_target_);
    return target_;
  }
  void set_target(const scoped_refptr<Element>& value) {
    has_target_ = true;
    target_ = value;
  }


 private:
  bool has_time_;
  double time_;
  bool has_root_bounds_;
  scoped_refptr<DOMRectReadOnly> root_bounds_;
  bool has_bounding_client_rect_;
  scoped_refptr<DOMRectReadOnly> bounding_client_rect_;
  bool has_intersection_rect_;
  scoped_refptr<DOMRectReadOnly> intersection_rect_;
  bool has_is_intersecting_;
  bool is_intersecting_;
  bool has_intersection_ratio_;
  double intersection_ratio_;
  bool has_target_;
  scoped_refptr<Element> target_;
};

// This ostream override is necessary for MOCK_METHODs commonly used
// in idl test code
inline std::ostream& operator<<(
    std::ostream& stream, const cobalt::dom::IntersectionObserverEntryInit& in) {
  SB_UNREFERENCED_PARAMETER(in);
  stream << "[IntersectionObserverEntryInit]";
  return stream;
}

}  // namespace cobalt
}  // namespace dom

#endif  // IntersectionObserverEntryInit_h
