

// Copyright 2019 The Cobalt Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// clang-format off

// This file has been auto-generated by bindings/code_generator_cobalt.py. DO NOT MODIFY!
// Auto-generated from template: bindings/v8c/templates/interface.cc.template

#include "cobalt/bindings/shared/idl_conditional_macros.h"

#include "cobalt/dom/v8c_html_element.h"

#include "base/trace_event/trace_event.h"
#include "cobalt/base/polymorphic_downcast.h"
#include "cobalt/script/global_environment.h"
#include "cobalt/script/script_value.h"
#include "cobalt/script/value_handle.h"
#include "cobalt/cssom/css_style_declaration.h"
#include "cobalt/cssom/v8c_css_style_declaration.h"
#include "cobalt/dom/dom_string_map.h"
#include "cobalt/dom/element.h"
#include "cobalt/dom/event_listener.h"
#include "cobalt/dom/on_error_event_listener.h"
#include "cobalt/dom/v8c_dom_string_map.h"
#include "cobalt/dom/v8c_element.h"
#include "cobalt/dom/v8c_event_listener.h"
#include "cobalt/dom/v8c_on_error_event_listener.h"

#include "v8c_gen_type_conversion.h"

#include "cobalt/script/callback_interface_traits.h"
#include "cobalt/script/v8c/v8c_array_buffer.h"
#include "cobalt/script/v8c/v8c_array_buffer_view.h"
#include "cobalt/script/v8c/callback_function_conversion.h"
#include "cobalt/script/v8c/conversion_helpers.h"
#include "cobalt/script/v8c/entry_scope.h"
#include "cobalt/script/v8c/helpers.h"
#include "cobalt/script/v8c/native_promise.h"
#include "cobalt/script/v8c/type_traits.h"
#include "cobalt/script/v8c/v8c_typed_arrays.h"
#include "cobalt/script/v8c/v8c_data_view.h"
#include "cobalt/script/v8c/v8c_callback_function.h"
#include "cobalt/script/v8c/v8c_callback_interface_holder.h"
#include "cobalt/script/v8c/v8c_engine.h"
#include "cobalt/script/v8c/v8c_exception_state.h"
#include "cobalt/script/v8c/v8c_global_environment.h"
#include "cobalt/script/v8c/v8c_property_enumerator.h"
#include "cobalt/script/v8c/v8c_value_handle.h"
#include "cobalt/script/v8c/wrapper_private.h"
#include "cobalt/script/v8c/common_v8c_bindings_code.h"
#include "v8/include/v8.h"


namespace {
using cobalt::dom::HTMLElement;
using cobalt::dom::V8cHTMLElement;
using cobalt::cssom::CSSStyleDeclaration;
using cobalt::cssom::V8cCSSStyleDeclaration;
using cobalt::dom::DOMStringMap;
using cobalt::dom::Element;
using cobalt::dom::EventListener;
using cobalt::dom::OnErrorEventListener;
using cobalt::dom::V8cDOMStringMap;
using cobalt::dom::V8cElement;
using cobalt::dom::V8cEventListener;
using cobalt::dom::V8cOnErrorEventListener;
using cobalt::script::CallbackInterfaceTraits;
using cobalt::script::GlobalEnvironment;
using cobalt::script::ScriptValue;
using cobalt::script::ValueHandle;
using cobalt::script::ValueHandle;
using cobalt::script::ValueHandleHolder;
using cobalt::script::Wrappable;

using cobalt::script::v8c::EntryScope;
using cobalt::script::v8c::EscapableEntryScope;
using cobalt::script::v8c::FromJSValue;
using cobalt::script::v8c::kConversionFlagClamped;
using cobalt::script::v8c::kConversionFlagNullable;
using cobalt::script::v8c::kConversionFlagObjectOnly;
using cobalt::script::v8c::kConversionFlagRestricted;
using cobalt::script::v8c::kConversionFlagTreatNullAsEmptyString;
using cobalt::script::v8c::kConversionFlagTreatUndefinedAsEmptyString;
using cobalt::script::v8c::kNoConversionFlags;
using cobalt::script::v8c::NewInternalString;
using cobalt::script::v8c::ToJSValue;
using cobalt::script::v8c::TypeTraits;
using cobalt::script::v8c::V8cExceptionState;
using cobalt::script::v8c::V8cGlobalEnvironment;
using cobalt::script::v8c::V8cPropertyEnumerator;
using cobalt::script::v8c::WrapperFactory;
using cobalt::script::v8c::WrapperPrivate;
}  // namespace

namespace cobalt {
namespace dom {


namespace {

const int kInterfaceUniqueId = 100;








void DummyConstructor(const v8::FunctionCallbackInfo<v8::Value>& info) {
  V8cExceptionState exception(info.GetIsolate());
  exception.SetSimpleException(
      script::kTypeError, "HTMLElement is not constructible.");
}



void dirAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<HTMLElement,
                                                    V8cHTMLElement>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, HTMLElement* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->dir(),
              &result_value);

  });
}

void dirAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<HTMLElement, V8cHTMLElement>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, HTMLElement* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<std::string >::ConversionType value;
  FromJSValue(isolate, v8_value, kNoConversionFlags, &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_dir(value);
result_value = v8::Undefined(isolate);
  return;
});
}


void datasetAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<HTMLElement,
                                                    V8cHTMLElement>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, HTMLElement* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->dataset(),
              &result_value);

  });
}



void tabIndexAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<HTMLElement,
                                                    V8cHTMLElement>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, HTMLElement* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->tab_index(),
              &result_value);

  });
}

void tabIndexAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<HTMLElement, V8cHTMLElement>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, HTMLElement* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<int32_t >::ConversionType value;
  FromJSValue(isolate, v8_value, kNoConversionFlags, &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_tab_index(value);
result_value = v8::Undefined(isolate);
  return;
});
}


void styleAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<HTMLElement,
                                                    V8cHTMLElement>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, HTMLElement* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->style(),
              &result_value);

  });
}



void onblurAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<HTMLElement,
                                                    V8cHTMLElement>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, HTMLElement* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->onblur(),
              &result_value);

  });
}

void onblurAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<HTMLElement, V8cHTMLElement>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, HTMLElement* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<::cobalt::script::CallbackInterfaceTraits<EventListener > >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagNullable), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_onblur(value);
result_value = v8::Undefined(isolate);
  return;
});
}


void onclickAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<HTMLElement,
                                                    V8cHTMLElement>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, HTMLElement* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->onclick(),
              &result_value);

  });
}

void onclickAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<HTMLElement, V8cHTMLElement>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, HTMLElement* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<::cobalt::script::CallbackInterfaceTraits<EventListener > >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagNullable), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_onclick(value);
result_value = v8::Undefined(isolate);
  return;
});
}


void onerrorAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<HTMLElement,
                                                    V8cHTMLElement>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, HTMLElement* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->onerror(),
              &result_value);

  });
}

void onerrorAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<HTMLElement, V8cHTMLElement>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, HTMLElement* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<::cobalt::script::CallbackInterfaceTraits<OnErrorEventListener > >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagNullable), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_onerror(value);
result_value = v8::Undefined(isolate);
  return;
});
}


void onfocusAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<HTMLElement,
                                                    V8cHTMLElement>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, HTMLElement* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->onfocus(),
              &result_value);

  });
}

void onfocusAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<HTMLElement, V8cHTMLElement>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, HTMLElement* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<::cobalt::script::CallbackInterfaceTraits<EventListener > >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagNullable), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_onfocus(value);
result_value = v8::Undefined(isolate);
  return;
});
}


void onkeydownAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<HTMLElement,
                                                    V8cHTMLElement>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, HTMLElement* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->onkeydown(),
              &result_value);

  });
}

void onkeydownAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<HTMLElement, V8cHTMLElement>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, HTMLElement* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<::cobalt::script::CallbackInterfaceTraits<EventListener > >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagNullable), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_onkeydown(value);
result_value = v8::Undefined(isolate);
  return;
});
}


void onkeypressAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<HTMLElement,
                                                    V8cHTMLElement>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, HTMLElement* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->onkeypress(),
              &result_value);

  });
}

void onkeypressAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<HTMLElement, V8cHTMLElement>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, HTMLElement* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<::cobalt::script::CallbackInterfaceTraits<EventListener > >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagNullable), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_onkeypress(value);
result_value = v8::Undefined(isolate);
  return;
});
}


void onkeyupAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<HTMLElement,
                                                    V8cHTMLElement>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, HTMLElement* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->onkeyup(),
              &result_value);

  });
}

void onkeyupAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<HTMLElement, V8cHTMLElement>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, HTMLElement* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<::cobalt::script::CallbackInterfaceTraits<EventListener > >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagNullable), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_onkeyup(value);
result_value = v8::Undefined(isolate);
  return;
});
}


void onloadAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<HTMLElement,
                                                    V8cHTMLElement>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, HTMLElement* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->onload(),
              &result_value);

  });
}

void onloadAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<HTMLElement, V8cHTMLElement>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, HTMLElement* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<::cobalt::script::CallbackInterfaceTraits<EventListener > >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagNullable), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_onload(value);
result_value = v8::Undefined(isolate);
  return;
});
}


void onloadeddataAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<HTMLElement,
                                                    V8cHTMLElement>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, HTMLElement* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->onloadeddata(),
              &result_value);

  });
}

void onloadeddataAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<HTMLElement, V8cHTMLElement>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, HTMLElement* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<::cobalt::script::CallbackInterfaceTraits<EventListener > >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagNullable), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_onloadeddata(value);
result_value = v8::Undefined(isolate);
  return;
});
}


void onloadedmetadataAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<HTMLElement,
                                                    V8cHTMLElement>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, HTMLElement* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->onloadedmetadata(),
              &result_value);

  });
}

void onloadedmetadataAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<HTMLElement, V8cHTMLElement>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, HTMLElement* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<::cobalt::script::CallbackInterfaceTraits<EventListener > >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagNullable), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_onloadedmetadata(value);
result_value = v8::Undefined(isolate);
  return;
});
}


void onloadstartAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<HTMLElement,
                                                    V8cHTMLElement>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, HTMLElement* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->onloadstart(),
              &result_value);

  });
}

void onloadstartAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<HTMLElement, V8cHTMLElement>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, HTMLElement* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<::cobalt::script::CallbackInterfaceTraits<EventListener > >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagNullable), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_onloadstart(value);
result_value = v8::Undefined(isolate);
  return;
});
}


void onmousedownAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<HTMLElement,
                                                    V8cHTMLElement>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, HTMLElement* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->onmousedown(),
              &result_value);

  });
}

void onmousedownAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<HTMLElement, V8cHTMLElement>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, HTMLElement* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<::cobalt::script::CallbackInterfaceTraits<EventListener > >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagNullable), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_onmousedown(value);
result_value = v8::Undefined(isolate);
  return;
});
}


void onmouseenterAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<HTMLElement,
                                                    V8cHTMLElement>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, HTMLElement* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->onmouseenter(),
              &result_value);

  });
}

void onmouseenterAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<HTMLElement, V8cHTMLElement>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, HTMLElement* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<::cobalt::script::CallbackInterfaceTraits<EventListener > >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagNullable), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_onmouseenter(value);
result_value = v8::Undefined(isolate);
  return;
});
}


void onmouseleaveAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<HTMLElement,
                                                    V8cHTMLElement>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, HTMLElement* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->onmouseleave(),
              &result_value);

  });
}

void onmouseleaveAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<HTMLElement, V8cHTMLElement>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, HTMLElement* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<::cobalt::script::CallbackInterfaceTraits<EventListener > >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagNullable), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_onmouseleave(value);
result_value = v8::Undefined(isolate);
  return;
});
}


void onmousemoveAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<HTMLElement,
                                                    V8cHTMLElement>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, HTMLElement* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->onmousemove(),
              &result_value);

  });
}

void onmousemoveAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<HTMLElement, V8cHTMLElement>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, HTMLElement* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<::cobalt::script::CallbackInterfaceTraits<EventListener > >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagNullable), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_onmousemove(value);
result_value = v8::Undefined(isolate);
  return;
});
}


void onmouseoutAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<HTMLElement,
                                                    V8cHTMLElement>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, HTMLElement* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->onmouseout(),
              &result_value);

  });
}

void onmouseoutAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<HTMLElement, V8cHTMLElement>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, HTMLElement* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<::cobalt::script::CallbackInterfaceTraits<EventListener > >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagNullable), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_onmouseout(value);
result_value = v8::Undefined(isolate);
  return;
});
}


void onmouseoverAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<HTMLElement,
                                                    V8cHTMLElement>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, HTMLElement* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->onmouseover(),
              &result_value);

  });
}

void onmouseoverAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<HTMLElement, V8cHTMLElement>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, HTMLElement* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<::cobalt::script::CallbackInterfaceTraits<EventListener > >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagNullable), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_onmouseover(value);
result_value = v8::Undefined(isolate);
  return;
});
}


void onmouseupAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<HTMLElement,
                                                    V8cHTMLElement>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, HTMLElement* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->onmouseup(),
              &result_value);

  });
}

void onmouseupAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<HTMLElement, V8cHTMLElement>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, HTMLElement* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<::cobalt::script::CallbackInterfaceTraits<EventListener > >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagNullable), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_onmouseup(value);
result_value = v8::Undefined(isolate);
  return;
});
}


void onpauseAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<HTMLElement,
                                                    V8cHTMLElement>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, HTMLElement* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->onpause(),
              &result_value);

  });
}

void onpauseAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<HTMLElement, V8cHTMLElement>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, HTMLElement* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<::cobalt::script::CallbackInterfaceTraits<EventListener > >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagNullable), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_onpause(value);
result_value = v8::Undefined(isolate);
  return;
});
}


void onplayAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<HTMLElement,
                                                    V8cHTMLElement>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, HTMLElement* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->onplay(),
              &result_value);

  });
}

void onplayAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<HTMLElement, V8cHTMLElement>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, HTMLElement* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<::cobalt::script::CallbackInterfaceTraits<EventListener > >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagNullable), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_onplay(value);
result_value = v8::Undefined(isolate);
  return;
});
}


void onplayingAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<HTMLElement,
                                                    V8cHTMLElement>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, HTMLElement* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->onplaying(),
              &result_value);

  });
}

void onplayingAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<HTMLElement, V8cHTMLElement>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, HTMLElement* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<::cobalt::script::CallbackInterfaceTraits<EventListener > >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagNullable), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_onplaying(value);
result_value = v8::Undefined(isolate);
  return;
});
}


void onresizeAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<HTMLElement,
                                                    V8cHTMLElement>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, HTMLElement* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->onresize(),
              &result_value);

  });
}

void onresizeAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<HTMLElement, V8cHTMLElement>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, HTMLElement* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<::cobalt::script::CallbackInterfaceTraits<EventListener > >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagNullable), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_onresize(value);
result_value = v8::Undefined(isolate);
  return;
});
}


void onscrollAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<HTMLElement,
                                                    V8cHTMLElement>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, HTMLElement* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->onscroll(),
              &result_value);

  });
}

void onscrollAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<HTMLElement, V8cHTMLElement>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, HTMLElement* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<::cobalt::script::CallbackInterfaceTraits<EventListener > >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagNullable), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_onscroll(value);
result_value = v8::Undefined(isolate);
  return;
});
}


void ontransitionendAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<HTMLElement,
                                                    V8cHTMLElement>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, HTMLElement* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->ontransitionend(),
              &result_value);

  });
}

void ontransitionendAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<HTMLElement, V8cHTMLElement>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, HTMLElement* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<::cobalt::script::CallbackInterfaceTraits<EventListener > >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagNullable), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_ontransitionend(value);
result_value = v8::Undefined(isolate);
  return;
});
}


void ongotpointercaptureAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<HTMLElement,
                                                    V8cHTMLElement>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, HTMLElement* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->ongotpointercapture(),
              &result_value);

  });
}

void ongotpointercaptureAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<HTMLElement, V8cHTMLElement>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, HTMLElement* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<::cobalt::script::CallbackInterfaceTraits<EventListener > >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagNullable), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_ongotpointercapture(value);
result_value = v8::Undefined(isolate);
  return;
});
}


void onlostpointercaptureAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<HTMLElement,
                                                    V8cHTMLElement>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, HTMLElement* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->onlostpointercapture(),
              &result_value);

  });
}

void onlostpointercaptureAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<HTMLElement, V8cHTMLElement>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, HTMLElement* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<::cobalt::script::CallbackInterfaceTraits<EventListener > >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagNullable), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_onlostpointercapture(value);
result_value = v8::Undefined(isolate);
  return;
});
}


void onpointerdownAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<HTMLElement,
                                                    V8cHTMLElement>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, HTMLElement* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->onpointerdown(),
              &result_value);

  });
}

void onpointerdownAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<HTMLElement, V8cHTMLElement>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, HTMLElement* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<::cobalt::script::CallbackInterfaceTraits<EventListener > >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagNullable), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_onpointerdown(value);
result_value = v8::Undefined(isolate);
  return;
});
}


void onpointerenterAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<HTMLElement,
                                                    V8cHTMLElement>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, HTMLElement* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->onpointerenter(),
              &result_value);

  });
}

void onpointerenterAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<HTMLElement, V8cHTMLElement>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, HTMLElement* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<::cobalt::script::CallbackInterfaceTraits<EventListener > >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagNullable), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_onpointerenter(value);
result_value = v8::Undefined(isolate);
  return;
});
}


void onpointerleaveAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<HTMLElement,
                                                    V8cHTMLElement>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, HTMLElement* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->onpointerleave(),
              &result_value);

  });
}

void onpointerleaveAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<HTMLElement, V8cHTMLElement>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, HTMLElement* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<::cobalt::script::CallbackInterfaceTraits<EventListener > >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagNullable), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_onpointerleave(value);
result_value = v8::Undefined(isolate);
  return;
});
}


void onpointermoveAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<HTMLElement,
                                                    V8cHTMLElement>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, HTMLElement* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->onpointermove(),
              &result_value);

  });
}

void onpointermoveAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<HTMLElement, V8cHTMLElement>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, HTMLElement* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<::cobalt::script::CallbackInterfaceTraits<EventListener > >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagNullable), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_onpointermove(value);
result_value = v8::Undefined(isolate);
  return;
});
}


void onpointeroutAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<HTMLElement,
                                                    V8cHTMLElement>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, HTMLElement* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->onpointerout(),
              &result_value);

  });
}

void onpointeroutAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<HTMLElement, V8cHTMLElement>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, HTMLElement* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<::cobalt::script::CallbackInterfaceTraits<EventListener > >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagNullable), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_onpointerout(value);
result_value = v8::Undefined(isolate);
  return;
});
}


void onpointeroverAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<HTMLElement,
                                                    V8cHTMLElement>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, HTMLElement* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->onpointerover(),
              &result_value);

  });
}

void onpointeroverAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<HTMLElement, V8cHTMLElement>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, HTMLElement* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<::cobalt::script::CallbackInterfaceTraits<EventListener > >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagNullable), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_onpointerover(value);
result_value = v8::Undefined(isolate);
  return;
});
}


void onpointerupAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<HTMLElement,
                                                    V8cHTMLElement>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, HTMLElement* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->onpointerup(),
              &result_value);

  });
}

void onpointerupAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<HTMLElement, V8cHTMLElement>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, HTMLElement* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<::cobalt::script::CallbackInterfaceTraits<EventListener > >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagNullable), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_onpointerup(value);
result_value = v8::Undefined(isolate);
  return;
});
}


void onprogressAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<HTMLElement,
                                                    V8cHTMLElement>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, HTMLElement* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->onprogress(),
              &result_value);

  });
}

void onprogressAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<HTMLElement, V8cHTMLElement>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, HTMLElement* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<::cobalt::script::CallbackInterfaceTraits<EventListener > >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagNullable), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_onprogress(value);
result_value = v8::Undefined(isolate);
  return;
});
}


void onratechangeAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<HTMLElement,
                                                    V8cHTMLElement>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, HTMLElement* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->onratechange(),
              &result_value);

  });
}

void onratechangeAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<HTMLElement, V8cHTMLElement>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, HTMLElement* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<::cobalt::script::CallbackInterfaceTraits<EventListener > >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagNullable), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_onratechange(value);
result_value = v8::Undefined(isolate);
  return;
});
}


void onseekedAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<HTMLElement,
                                                    V8cHTMLElement>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, HTMLElement* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->onseeked(),
              &result_value);

  });
}

void onseekedAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<HTMLElement, V8cHTMLElement>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, HTMLElement* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<::cobalt::script::CallbackInterfaceTraits<EventListener > >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagNullable), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_onseeked(value);
result_value = v8::Undefined(isolate);
  return;
});
}


void onseekingAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<HTMLElement,
                                                    V8cHTMLElement>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, HTMLElement* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->onseeking(),
              &result_value);

  });
}

void onseekingAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<HTMLElement, V8cHTMLElement>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, HTMLElement* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<::cobalt::script::CallbackInterfaceTraits<EventListener > >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagNullable), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_onseeking(value);
result_value = v8::Undefined(isolate);
  return;
});
}


void ontimeupdateAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<HTMLElement,
                                                    V8cHTMLElement>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, HTMLElement* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->ontimeupdate(),
              &result_value);

  });
}

void ontimeupdateAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<HTMLElement, V8cHTMLElement>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, HTMLElement* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<::cobalt::script::CallbackInterfaceTraits<EventListener > >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagNullable), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_ontimeupdate(value);
result_value = v8::Undefined(isolate);
  return;
});
}


void onvolumechangeAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<HTMLElement,
                                                    V8cHTMLElement>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, HTMLElement* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->onvolumechange(),
              &result_value);

  });
}

void onvolumechangeAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<HTMLElement, V8cHTMLElement>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, HTMLElement* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<::cobalt::script::CallbackInterfaceTraits<EventListener > >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagNullable), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_onvolumechange(value);
result_value = v8::Undefined(isolate);
  return;
});
}


void onwaitingAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<HTMLElement,
                                                    V8cHTMLElement>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, HTMLElement* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->onwaiting(),
              &result_value);

  });
}

void onwaitingAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<HTMLElement, V8cHTMLElement>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, HTMLElement* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<::cobalt::script::CallbackInterfaceTraits<EventListener > >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagNullable), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_onwaiting(value);
result_value = v8::Undefined(isolate);
  return;
});
}


void onwheelAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<HTMLElement,
                                                    V8cHTMLElement>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, HTMLElement* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->onwheel(),
              &result_value);

  });
}

void onwheelAttributeSetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeSetterImpl<HTMLElement, V8cHTMLElement>(info,
                    false,
                    false,
                    [](v8::Isolate* isolate, HTMLElement* impl,
                       V8cExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value,
                       v8::Local<v8::Value> v8_value) {
  TypeTraits<::cobalt::script::CallbackInterfaceTraits<EventListener > >::ConversionType value;
  FromJSValue(isolate, v8_value, (kConversionFlagNullable), &exception_state,
              &value);
  if (exception_state.is_exception_set()) {
    return;
  }

  impl->set_onwheel(value);
result_value = v8::Undefined(isolate);
  return;
});
}


void offsetParentAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<HTMLElement,
                                                    V8cHTMLElement>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, HTMLElement* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->offset_parent(),
              &result_value);

  });
}



void offsetTopAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<HTMLElement,
                                                    V8cHTMLElement>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, HTMLElement* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->offset_top(),
              &result_value);

  });
}



void offsetLeftAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<HTMLElement,
                                                    V8cHTMLElement>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, HTMLElement* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->offset_left(),
              &result_value);

  });
}



void offsetWidthAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<HTMLElement,
                                                    V8cHTMLElement>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, HTMLElement* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->offset_width(),
              &result_value);

  });
}



void offsetHeightAttributeGetter(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  script::v8c::shared_bindings::AttributeGetterImpl<HTMLElement,
                                                    V8cHTMLElement>(
                    info,
                    false,
                    false,
                    [](v8::Isolate* isolate, HTMLElement* impl,
                       cobalt::script::ExceptionState& exception_state,
                       v8::Local<v8::Value>& result_value) {
  
      ToJSValue(isolate,
              impl->offset_height(),
              &result_value);

  });
}




void blurMethod(const v8::FunctionCallbackInfo<v8::Value>& info) {
  v8::Isolate* isolate = info.GetIsolate();
  v8::Local<v8::Object> object = info.Holder();
  if (!script::v8c::shared_bindings::object_implements_interface(V8cHTMLElement::GetTemplate(isolate), isolate, object)) {
    return;
  }
  V8cExceptionState exception_state{isolate};
  v8::Local<v8::Value> result_value;

  HTMLElement* impl =
          script::v8c::shared_bindings::get_impl_from_object<
             HTMLElement>(object);
  if (!impl) {
    return;
  }

  impl->Blur();
result_value = v8::Undefined(isolate);

}



void focusMethod(const v8::FunctionCallbackInfo<v8::Value>& info) {
  v8::Isolate* isolate = info.GetIsolate();
  v8::Local<v8::Object> object = info.Holder();
  if (!script::v8c::shared_bindings::object_implements_interface(V8cHTMLElement::GetTemplate(isolate), isolate, object)) {
    return;
  }
  V8cExceptionState exception_state{isolate};
  v8::Local<v8::Value> result_value;

  HTMLElement* impl =
          script::v8c::shared_bindings::get_impl_from_object<
             HTMLElement>(object);
  if (!impl) {
    return;
  }

  impl->Focus();
result_value = v8::Undefined(isolate);

}



void InitializeTemplate(v8::Isolate* isolate) {
  // https://heycam.github.io/webidl/#interface-object
  // 3.6.1. Interface object
  //
  // The interface object for a given interface is a built-in function object.
  // It has properties that correspond to the constants and static operations
  // defined on that interface, as described in sections 3.6.6 Constants and
  // 3.6.8 Operations.
  //
  // If the interface is declared with a [Constructor] extended attribute,
  // then the interface object can be called as a constructor to create an
  // object that implements that interface. Calling that interface as a
  // function will throw an exception.
  //
  // Interface objects whose interfaces are not declared with a [Constructor]
  // extended attribute will throw when called, both as a function and as a
  // constructor.
  //
  // An interface object for a non-callback interface has an associated object
  // called the interface prototype object. This object has properties that
  // correspond to the regular attributes and regular operations defined on
  // the interface, and is described in more detail in 3.6.3 Interface
  // prototype object.
  v8::Local<v8::FunctionTemplate> function_template =
      v8::FunctionTemplate::New(
          isolate,
          DummyConstructor,
          v8::Local<v8::Value>(),
          v8::Local<v8::Signature>(),
          0);
  function_template->SetClassName(NewInternalString(isolate, "HTMLElement"));
  function_template->ReadOnlyPrototype();

  v8::Local<v8::ObjectTemplate> prototype_template = function_template->PrototypeTemplate();
  v8::Local<v8::ObjectTemplate> instance_template = function_template->InstanceTemplate();
  instance_template->SetInternalFieldCount(WrapperPrivate::kInternalFieldCount);

  V8cGlobalEnvironment* global_environment = V8cGlobalEnvironment::GetFromIsolate(isolate);
  global_environment->AddInterfaceData(kInterfaceUniqueId, function_template);

  {
    // An interface can be defined to inherit from another interface. If the
    // identifier of the interface is followed by a U+003A COLON (":") character
    // and an identifier, then that identifier identifies the inherited
    // interface. An object that implements an interface that inherits from
    // another also implements that inherited interface. The object therefore
    // will also have members that correspond to the interface members from the
    // inherited interface.
    v8::Local<v8::FunctionTemplate> parent_template = V8cElement::GetTemplate(isolate);
    function_template->Inherit(parent_template);
    static_assert(
        std::is_base_of<Element, HTMLElement>::value,
        "Expected HTMLElement to have C++ parent class "
        "Element, because that is its WebIDL parent.");
  }

  // https://heycam.github.io/webidl/#es-constants
  // 3.6.6. Constants
  //
  // For each exposed constant defined on an interface A, there must be a
  // corresponding property. The property has the following characteristics:

  // https://heycam.github.io/webidl/#es-attributes
  // 3.6.7. Attributes
  //
  // For each exposed attribute of the interface there must exist a
  // corresponding property. The characteristics of this property are as
  // follows:
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "dir"
                  ,dirAttributeGetter
                  ,dirAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  false,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "dataset"
                  ,datasetAttributeGetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "tabIndex"
                  ,tabIndexAttributeGetter
                  ,tabIndexAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  false,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "style"
                  ,styleAttributeGetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "onblur"
                  ,onblurAttributeGetter
                  ,onblurAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "onclick"
                  ,onclickAttributeGetter
                  ,onclickAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "onerror"
                  ,onerrorAttributeGetter
                  ,onerrorAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "onfocus"
                  ,onfocusAttributeGetter
                  ,onfocusAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "onkeydown"
                  ,onkeydownAttributeGetter
                  ,onkeydownAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "onkeypress"
                  ,onkeypressAttributeGetter
                  ,onkeypressAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "onkeyup"
                  ,onkeyupAttributeGetter
                  ,onkeyupAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "onload"
                  ,onloadAttributeGetter
                  ,onloadAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "onloadeddata"
                  ,onloadeddataAttributeGetter
                  ,onloadeddataAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "onloadedmetadata"
                  ,onloadedmetadataAttributeGetter
                  ,onloadedmetadataAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "onloadstart"
                  ,onloadstartAttributeGetter
                  ,onloadstartAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "onmousedown"
                  ,onmousedownAttributeGetter
                  ,onmousedownAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "onmouseenter"
                  ,onmouseenterAttributeGetter
                  ,onmouseenterAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "onmouseleave"
                  ,onmouseleaveAttributeGetter
                  ,onmouseleaveAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "onmousemove"
                  ,onmousemoveAttributeGetter
                  ,onmousemoveAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "onmouseout"
                  ,onmouseoutAttributeGetter
                  ,onmouseoutAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "onmouseover"
                  ,onmouseoverAttributeGetter
                  ,onmouseoverAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "onmouseup"
                  ,onmouseupAttributeGetter
                  ,onmouseupAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "onpause"
                  ,onpauseAttributeGetter
                  ,onpauseAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "onplay"
                  ,onplayAttributeGetter
                  ,onplayAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "onplaying"
                  ,onplayingAttributeGetter
                  ,onplayingAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "onresize"
                  ,onresizeAttributeGetter
                  ,onresizeAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "onscroll"
                  ,onscrollAttributeGetter
                  ,onscrollAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "ontransitionend"
                  ,ontransitionendAttributeGetter
                  ,ontransitionendAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "ongotpointercapture"
                  ,ongotpointercaptureAttributeGetter
                  ,ongotpointercaptureAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "onlostpointercapture"
                  ,onlostpointercaptureAttributeGetter
                  ,onlostpointercaptureAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "onpointerdown"
                  ,onpointerdownAttributeGetter
                  ,onpointerdownAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "onpointerenter"
                  ,onpointerenterAttributeGetter
                  ,onpointerenterAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "onpointerleave"
                  ,onpointerleaveAttributeGetter
                  ,onpointerleaveAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "onpointermove"
                  ,onpointermoveAttributeGetter
                  ,onpointermoveAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "onpointerout"
                  ,onpointeroutAttributeGetter
                  ,onpointeroutAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "onpointerover"
                  ,onpointeroverAttributeGetter
                  ,onpointeroverAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "onpointerup"
                  ,onpointerupAttributeGetter
                  ,onpointerupAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "onprogress"
                  ,onprogressAttributeGetter
                  ,onprogressAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "onratechange"
                  ,onratechangeAttributeGetter
                  ,onratechangeAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "onseeked"
                  ,onseekedAttributeGetter
                  ,onseekedAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "onseeking"
                  ,onseekingAttributeGetter
                  ,onseekingAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "ontimeupdate"
                  ,ontimeupdateAttributeGetter
                  ,ontimeupdateAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "onvolumechange"
                  ,onvolumechangeAttributeGetter
                  ,onvolumechangeAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "onwaiting"
                  ,onwaitingAttributeGetter
                  ,onwaitingAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  true,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "onwheel"
                  ,onwheelAttributeGetter
                  ,onwheelAttributeSetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  false,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "offsetParent"
                  ,offsetParentAttributeGetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  false,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "offsetTop"
                  ,offsetTopAttributeGetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  false,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "offsetLeft"
                  ,offsetLeftAttributeGetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  false,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "offsetWidth"
                  ,offsetWidthAttributeGetter
                  );

  }
  {

    script::v8c::shared_bindings::set_property_for_nonconstructor_attribute(
                  isolate,
    // The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]:
    // true, [[Configurable]]: configurable }, where: configurable is false if
    // the attribute was declared with the [Unforgeable] extended attribute and
    // true otherwise;
                  true,
                  false,
                  false,
                  false,
                  function_template,
                  instance_template,
                  prototype_template,
                  "offsetHeight"
                  ,offsetHeightAttributeGetter
                  );

  }

  // https://heycam.github.io/webidl/#es-operations
  // 3.6.8. Operations
  //
  // For each unique identifier of an exposed operation defined on the
  // interface, there must exist a corresponding property, unless the effective
  // overload set for that identifier and operation and with an argument count
  // of 0 has no entries.
  //
  // The characteristics of this property are as follows:
  {
    // The name of the property is the identifier.
    v8::Local<v8::String> name = NewInternalString(
        isolate,
        "blur");

    // The property has attributes { [[Writable]]: B, [[Enumerable]]: true,
    // [[Configurable]]: B }, where B is false if the operation is unforgeable
    // on the interface, and true otherwise.
    bool B = true;
    v8::PropertyAttribute attributes = static_cast<v8::PropertyAttribute>(
        B ? v8::None : (v8::ReadOnly | v8::DontDelete));

    v8::Local<v8::FunctionTemplate> method_template =
        v8::FunctionTemplate::New(isolate, blurMethod);
    method_template->RemovePrototype();
    method_template->SetLength(0);

    // The location of the property is determined as follows:
    // Otherwise, the property exists solely on the interface's interface
    // prototype object.
    prototype_template->
        Set(name, method_template);

    // The value of the property is the result of creating an operation function
    // given the operation, the interface, and the relevant Realm of the object
    // that is the location of the property.

    // Note: that is, even if an includes statement was used to make an
    // operation available on the interface, we pass in the interface which
    // includes the interface mixin, and not the interface mixin on which the
    // operation was originally declared.
  }
  {
    // The name of the property is the identifier.
    v8::Local<v8::String> name = NewInternalString(
        isolate,
        "focus");

    // The property has attributes { [[Writable]]: B, [[Enumerable]]: true,
    // [[Configurable]]: B }, where B is false if the operation is unforgeable
    // on the interface, and true otherwise.
    bool B = true;
    v8::PropertyAttribute attributes = static_cast<v8::PropertyAttribute>(
        B ? v8::None : (v8::ReadOnly | v8::DontDelete));

    v8::Local<v8::FunctionTemplate> method_template =
        v8::FunctionTemplate::New(isolate, focusMethod);
    method_template->RemovePrototype();
    method_template->SetLength(0);

    // The location of the property is determined as follows:
    // Otherwise, the property exists solely on the interface's interface
    // prototype object.
    prototype_template->
        Set(name, method_template);

    // The value of the property is the result of creating an operation function
    // given the operation, the interface, and the relevant Realm of the object
    // that is the location of the property.

    // Note: that is, even if an includes statement was used to make an
    // operation available on the interface, we pass in the interface which
    // includes the interface mixin, and not the interface mixin on which the
    // operation was originally declared.
  }

  // https://heycam.github.io/webidl/#es-stringifier
  // 3.6.8.2. Stringifiers
  prototype_template->Set(
      v8::Symbol::GetToStringTag(isolate),
      NewInternalString(isolate, "HTMLElement"),
      static_cast<v8::PropertyAttribute>(v8::ReadOnly | v8::DontEnum));





}

}  // namespace


v8::Local<v8::Object> V8cHTMLElement::CreateWrapper(
    v8::Isolate* isolate, const scoped_refptr<Wrappable>& wrappable) {
  EscapableEntryScope entry_scope(isolate);
  v8::Local<v8::Context> context = isolate->GetCurrentContext();

  V8cGlobalEnvironment* global_environment = V8cGlobalEnvironment::GetFromIsolate(isolate);
  if (!global_environment->HasInterfaceData(kInterfaceUniqueId)) {
    InitializeTemplate(isolate);
  }
  v8::Local<v8::FunctionTemplate> function_template = global_environment->GetInterfaceData(kInterfaceUniqueId);

  DCHECK(function_template->InstanceTemplate()->InternalFieldCount() == WrapperPrivate::kInternalFieldCount);
  v8::Local<v8::Object> object = function_template->InstanceTemplate()->NewInstance(context).ToLocalChecked();
  DCHECK(object->InternalFieldCount() == WrapperPrivate::kInternalFieldCount);

  // This |WrapperPrivate|'s lifetime will be managed by V8.
  new WrapperPrivate(isolate, wrappable, object);
  return entry_scope.Escape(object);
}


v8::Local<v8::FunctionTemplate> V8cHTMLElement::GetTemplate(v8::Isolate* isolate) {
  V8cGlobalEnvironment* global_environment = V8cGlobalEnvironment::GetFromIsolate(isolate);
  if (!global_environment->HasInterfaceData(kInterfaceUniqueId)) {
    InitializeTemplate(isolate);
  }
  return global_environment->GetInterfaceData(kInterfaceUniqueId);
}


}  // namespace dom
}  // namespace cobalt


