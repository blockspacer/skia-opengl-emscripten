// Copyright 2019 The Cobalt Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// clang-format off

// This file has been auto-generated by bindings/code_generator_cobalt.py. DO NOT MODIFY!
// Auto-generated from template: bindings/templates/dictionary.h.template

#ifndef BlobPropertyBag_h
#define BlobPropertyBag_h

#include <string>

#include "base/optional.h"
#include "cobalt/script/array_buffer.h"
#include "cobalt/script/array_buffer_view.h"
#include "cobalt/script/script_value.h"
#include "cobalt/script/sequence.h"
#include "cobalt/script/typed_arrays.h"
#include "cobalt/script/value_handle.h"


namespace cobalt {
namespace dom {

class BlobPropertyBag {
 public:
  BlobPropertyBag() {
    type_ = "";
  }

  BlobPropertyBag(const BlobPropertyBag& other) {
    type_ = other.type_;
  }

  BlobPropertyBag& operator=(const BlobPropertyBag& other) {
    type_ = other.type_;
    return *this;
  }

  bool has_type() const {
    return true;
  }
  const std::string& type() const {
    return type_;
  }
  void set_type(const std::string& value) {
    type_ = value;
  }


 private:
  std::string type_;
};

// This ostream override is necessary for MOCK_METHODs commonly used
// in idl test code
inline std::ostream& operator<<(
    std::ostream& stream, const cobalt::dom::BlobPropertyBag& in) {
  SB_UNREFERENCED_PARAMETER(in);
  stream << "[BlobPropertyBag]";
  return stream;
}

}  // namespace cobalt
}  // namespace dom

#endif  // BlobPropertyBag_h
