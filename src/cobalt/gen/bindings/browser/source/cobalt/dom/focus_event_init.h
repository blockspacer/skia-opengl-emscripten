// Copyright 2019 The Cobalt Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// clang-format off

// This file has been auto-generated by bindings/code_generator_cobalt.py. DO NOT MODIFY!
// Auto-generated from template: bindings/templates/dictionary.h.template

#ifndef FocusEventInit_h
#define FocusEventInit_h

#include <string>

#include "base/optional.h"
#include "cobalt/script/array_buffer.h"
#include "cobalt/script/array_buffer_view.h"
#include "cobalt/script/script_value.h"
#include "cobalt/script/sequence.h"
#include "cobalt/script/typed_arrays.h"
#include "cobalt/script/value_handle.h"
#include "cobalt/dom/event_target.h"
#include "cobalt/dom/ui_event_init.h"

using cobalt::dom::EventTarget;
using cobalt::dom::UIEventInit;

namespace cobalt {
namespace dom {

class FocusEventInit : public cobalt::dom::UIEventInit {
 public:
  FocusEventInit() {
    related_target_ = NULL;
  }

  FocusEventInit(const FocusEventInit& other)
    : cobalt::dom::UIEventInit(other) {
    related_target_ = other.related_target_;
  }

  FocusEventInit& operator=(const FocusEventInit& other) {
    cobalt::dom::UIEventInit::operator=(other);
    related_target_ = other.related_target_;
    return *this;
  }

  bool has_related_target() const {
    return true;
  }
  const scoped_refptr<EventTarget>& related_target() const {
    return related_target_;
  }
  void set_related_target(const scoped_refptr<EventTarget>& value) {
    related_target_ = value;
  }


 private:
  scoped_refptr<EventTarget> related_target_;
};

// This ostream override is necessary for MOCK_METHODs commonly used
// in idl test code
inline std::ostream& operator<<(
    std::ostream& stream, const cobalt::dom::FocusEventInit& in) {
  SB_UNREFERENCED_PARAMETER(in);
  stream << "[FocusEventInit]";
  return stream;
}

}  // namespace cobalt
}  // namespace dom

#endif  // FocusEventInit_h
