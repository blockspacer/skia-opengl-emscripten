// Copyright 2019 The Cobalt Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// clang-format off

// This file has been auto-generated by bindings/code_generator_cobalt.py. DO NOT MODIFY!
// Auto-generated from template: bindings/templates/dictionary.h.template

#ifndef MouseEventInit_h
#define MouseEventInit_h

#include <string>

#include "base/optional.h"
#include "cobalt/script/array_buffer.h"
#include "cobalt/script/array_buffer_view.h"
#include "cobalt/script/script_value.h"
#include "cobalt/script/sequence.h"
#include "cobalt/script/typed_arrays.h"
#include "cobalt/script/value_handle.h"
#include "cobalt/dom/event_modifier_init.h"
#include "cobalt/dom/event_target.h"

using cobalt::dom::EventModifierInit;
using cobalt::dom::EventTarget;

namespace cobalt {
namespace dom {

class MouseEventInit : public cobalt::dom::EventModifierInit {
 public:
  MouseEventInit()
    : screen_x_(0),
      screen_y_(0),
      original_client_x_(0),
      original_client_y_(0),
      client_x_(0),
      client_y_(0),
      button_(0),
      buttons_(0),
      related_target_(NULL) {
  }

  MouseEventInit(const MouseEventInit& other)
    : cobalt::dom::EventModifierInit(other) {
    screen_x_ = other.screen_x_;
    screen_y_ = other.screen_y_;
    original_client_x_ = other.original_client_x_;
    original_client_y_ = other.original_client_y_;
    client_x_ = other.client_x_;
    client_y_ = other.client_y_;
    button_ = other.button_;
    buttons_ = other.buttons_;
    related_target_ = other.related_target_;
  }

  MouseEventInit& operator=(const MouseEventInit& other) {
    cobalt::dom::EventModifierInit::operator=(other);
    screen_x_ = other.screen_x_;
    screen_y_ = other.screen_y_;
    original_client_x_ = other.original_client_x_;
    original_client_y_ = other.original_client_y_;
    client_x_ = other.client_x_;
    client_y_ = other.client_y_;
    button_ = other.button_;
    buttons_ = other.buttons_;
    related_target_ = other.related_target_;
    return *this;
  }

  bool has_screen_x() const {
    return true;
  }
  double screen_x() const {
    return screen_x_;
  }
  void set_screen_x(double value) {
    screen_x_ = value;
  }

  bool has_screen_y() const {
    return true;
  }
  double screen_y() const {
    return screen_y_;
  }
  void set_screen_y(double value) {
    screen_y_ = value;
  }

  bool has_original_client_x() const {
    return true;
  }
  double original_client_x() const {
    return original_client_x_;
  }
  void set_original_client_x(double value) {
    original_client_x_ = value;
  }

  bool has_original_client_y() const {
    return true;
  }
  double original_client_y() const {
    return original_client_y_;
  }
  void set_original_client_y(double value) {
    original_client_y_ = value;
  }

  bool has_client_x() const {
    return true;
  }
  double client_x() const {
    return client_x_;
  }
  void set_client_x(double value) {
    client_x_ = value;
  }

  bool has_client_y() const {
    return true;
  }
  double client_y() const {
    return client_y_;
  }
  void set_client_y(double value) {
    client_y_ = value;
  }

  bool has_button() const {
    return true;
  }
  int16_t button() const {
    return button_;
  }
  void set_button(int16_t value) {
    button_ = value;
  }

  bool has_buttons() const {
    return true;
  }
  uint16_t buttons() const {
    return buttons_;
  }
  void set_buttons(uint16_t value) {
    buttons_ = value;
  }

  bool has_related_target() const {
    return true;
  }
  const scoped_refptr<EventTarget>& related_target() const {
    return related_target_;
  }
  void set_related_target(const scoped_refptr<EventTarget>& value) {
    related_target_ = value;
  }


 private:
  double screen_x_;
  double screen_y_;
  /// \note hack to support scrolling: scroll_delta_x = original_client_x_ - screen_x_
  double original_client_x_;
  /// \note hack to support scrolling: scroll_delta_y = original_client_y_ - screen_y_
  double original_client_y_;
  double client_x_;
  double client_y_;
  int16_t button_;
  uint16_t buttons_;
  scoped_refptr<EventTarget> related_target_;
};

// This ostream override is necessary for MOCK_METHODs commonly used
// in idl test code
inline std::ostream& operator<<(
    std::ostream& stream, const cobalt::dom::MouseEventInit& in) {
  SB_UNREFERENCED_PARAMETER(in);
  stream << "[MouseEventInit]";
  return stream;
}

}  // namespace cobalt
}  // namespace dom

#endif  // MouseEventInit_h
