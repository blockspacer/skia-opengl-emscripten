// Copyright 2019 The Cobalt Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// clang-format off

// This file has been auto-generated by bindings/code_generator_cobalt.py. DO NOT MODIFY!
// Auto-generated from template: bindings/templates/dictionary.h.template

#ifndef EventModifierInit_h
#define EventModifierInit_h

#include <string>

#include "base/optional.h"
#include "cobalt/script/array_buffer.h"
#include "cobalt/script/array_buffer_view.h"
#include "cobalt/script/script_value.h"
#include "cobalt/script/sequence.h"
#include "cobalt/script/typed_arrays.h"
#include "cobalt/script/value_handle.h"
#include "cobalt/dom/ui_event_init.h"

using cobalt::dom::UIEventInit;

namespace cobalt {
namespace dom {

class EventModifierInit : public cobalt::dom::UIEventInit {
 public:
  EventModifierInit() {
    ctrl_key_ = false;
    shift_key_ = false;
    alt_key_ = false;
    meta_key_ = false;
    modifier_alt_graph_ = false;
    modifier_caps_lock_ = false;
    modifier_fn_ = false;
    modifier_fn_lock_ = false;
    modifier_hyper_ = false;
    modifier_num_lock_ = false;
    modifier_scroll_lock_ = false;
    modifier_super_ = false;
    modifier_symbol_ = false;
    modifier_symbol_lock_ = false;
  }

  EventModifierInit(const EventModifierInit& other)
    : cobalt::dom::UIEventInit(other) {
    ctrl_key_ = other.ctrl_key_;
    shift_key_ = other.shift_key_;
    alt_key_ = other.alt_key_;
    meta_key_ = other.meta_key_;
    modifier_alt_graph_ = other.modifier_alt_graph_;
    modifier_caps_lock_ = other.modifier_caps_lock_;
    modifier_fn_ = other.modifier_fn_;
    modifier_fn_lock_ = other.modifier_fn_lock_;
    modifier_hyper_ = other.modifier_hyper_;
    modifier_num_lock_ = other.modifier_num_lock_;
    modifier_scroll_lock_ = other.modifier_scroll_lock_;
    modifier_super_ = other.modifier_super_;
    modifier_symbol_ = other.modifier_symbol_;
    modifier_symbol_lock_ = other.modifier_symbol_lock_;
  }

  EventModifierInit& operator=(const EventModifierInit& other) {
    cobalt::dom::UIEventInit::operator=(other);
    ctrl_key_ = other.ctrl_key_;
    shift_key_ = other.shift_key_;
    alt_key_ = other.alt_key_;
    meta_key_ = other.meta_key_;
    modifier_alt_graph_ = other.modifier_alt_graph_;
    modifier_caps_lock_ = other.modifier_caps_lock_;
    modifier_fn_ = other.modifier_fn_;
    modifier_fn_lock_ = other.modifier_fn_lock_;
    modifier_hyper_ = other.modifier_hyper_;
    modifier_num_lock_ = other.modifier_num_lock_;
    modifier_scroll_lock_ = other.modifier_scroll_lock_;
    modifier_super_ = other.modifier_super_;
    modifier_symbol_ = other.modifier_symbol_;
    modifier_symbol_lock_ = other.modifier_symbol_lock_;
    return *this;
  }

  bool has_ctrl_key() const {
    return true;
  }
  bool ctrl_key() const {
    return ctrl_key_;
  }
  void set_ctrl_key(bool value) {
    ctrl_key_ = value;
  }

  bool has_shift_key() const {
    return true;
  }
  bool shift_key() const {
    return shift_key_;
  }
  void set_shift_key(bool value) {
    shift_key_ = value;
  }

  bool has_alt_key() const {
    return true;
  }
  bool alt_key() const {
    return alt_key_;
  }
  void set_alt_key(bool value) {
    alt_key_ = value;
  }

  bool has_meta_key() const {
    return true;
  }
  bool meta_key() const {
    return meta_key_;
  }
  void set_meta_key(bool value) {
    meta_key_ = value;
  }

  bool has_modifier_alt_graph() const {
    return true;
  }
  bool modifier_alt_graph() const {
    return modifier_alt_graph_;
  }
  void set_modifier_alt_graph(bool value) {
    modifier_alt_graph_ = value;
  }

  bool has_modifier_caps_lock() const {
    return true;
  }
  bool modifier_caps_lock() const {
    return modifier_caps_lock_;
  }
  void set_modifier_caps_lock(bool value) {
    modifier_caps_lock_ = value;
  }

  bool has_modifier_fn() const {
    return true;
  }
  bool modifier_fn() const {
    return modifier_fn_;
  }
  void set_modifier_fn(bool value) {
    modifier_fn_ = value;
  }

  bool has_modifier_fn_lock() const {
    return true;
  }
  bool modifier_fn_lock() const {
    return modifier_fn_lock_;
  }
  void set_modifier_fn_lock(bool value) {
    modifier_fn_lock_ = value;
  }

  bool has_modifier_hyper() const {
    return true;
  }
  bool modifier_hyper() const {
    return modifier_hyper_;
  }
  void set_modifier_hyper(bool value) {
    modifier_hyper_ = value;
  }

  bool has_modifier_num_lock() const {
    return true;
  }
  bool modifier_num_lock() const {
    return modifier_num_lock_;
  }
  void set_modifier_num_lock(bool value) {
    modifier_num_lock_ = value;
  }

  bool has_modifier_scroll_lock() const {
    return true;
  }
  bool modifier_scroll_lock() const {
    return modifier_scroll_lock_;
  }
  void set_modifier_scroll_lock(bool value) {
    modifier_scroll_lock_ = value;
  }

  bool has_modifier_super() const {
    return true;
  }
  bool modifier_super() const {
    return modifier_super_;
  }
  void set_modifier_super(bool value) {
    modifier_super_ = value;
  }

  bool has_modifier_symbol() const {
    return true;
  }
  bool modifier_symbol() const {
    return modifier_symbol_;
  }
  void set_modifier_symbol(bool value) {
    modifier_symbol_ = value;
  }

  bool has_modifier_symbol_lock() const {
    return true;
  }
  bool modifier_symbol_lock() const {
    return modifier_symbol_lock_;
  }
  void set_modifier_symbol_lock(bool value) {
    modifier_symbol_lock_ = value;
  }


 private:
  bool ctrl_key_;
  bool shift_key_;
  bool alt_key_;
  bool meta_key_;
  bool modifier_alt_graph_;
  bool modifier_caps_lock_;
  bool modifier_fn_;
  bool modifier_fn_lock_;
  bool modifier_hyper_;
  bool modifier_num_lock_;
  bool modifier_scroll_lock_;
  bool modifier_super_;
  bool modifier_symbol_;
  bool modifier_symbol_lock_;
};

// This ostream override is necessary for MOCK_METHODs commonly used
// in idl test code
inline std::ostream& operator<<(
    std::ostream& stream, const cobalt::dom::EventModifierInit& in) {
  SB_UNREFERENCED_PARAMETER(in);
  stream << "[EventModifierInit]";
  return stream;
}

}  // namespace cobalt
}  // namespace dom

#endif  // EventModifierInit_h
