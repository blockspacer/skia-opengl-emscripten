// Copyright 2019 The Cobalt Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// clang-format off

// This file has been auto-generated by bindings/code_generator_cobalt.py. DO NOT MODIFY!
// Auto-generated from template: bindings/templates/dictionary.h.template

#ifndef MediaKeyMessageEventInit_h
#define MediaKeyMessageEventInit_h

#include <string>

#include "base/optional.h"
#include "cobalt/script/array_buffer.h"
#include "cobalt/script/array_buffer_view.h"
#include "cobalt/script/script_value.h"
#include "cobalt/script/sequence.h"
#include "cobalt/script/typed_arrays.h"
#include "cobalt/script/value_handle.h"
#include "cobalt/dom/eme/media_key_message_type.h"
#include "cobalt/dom/event_init.h"

using cobalt::dom::EventInit;
using cobalt::dom::eme::MediaKeyMessageType;

namespace cobalt {
namespace dom {
namespace eme {

class MediaKeyMessageEventInit : public cobalt::dom::EventInit {
 public:
  MediaKeyMessageEventInit() {
    has_message_type_ = false;
    message_type_ = MediaKeyMessageType();
    has_message_ = false;
  }

  MediaKeyMessageEventInit(const MediaKeyMessageEventInit& other)
    : cobalt::dom::EventInit(other) {
    has_message_type_ = other.has_message_type_;
    message_type_ = other.message_type_;
    has_message_ = other.has_message_;
    if (other.message_) {
      message_.reset(
          new script::Handle<::cobalt::script::ArrayBuffer>(
              *other.message_));
    }
  }

  MediaKeyMessageEventInit& operator=(const MediaKeyMessageEventInit& other) {
    cobalt::dom::EventInit::operator=(other);
    has_message_type_ = other.has_message_type_;
    message_type_ = other.message_type_;
    has_message_ = other.has_message_;
    if (other.message_) {
      message_.reset(
          new script::Handle<::cobalt::script::ArrayBuffer>(
              *other.message_));
    } else {
      message_.reset();
    }
    return *this;
  }

  bool has_message_type() const {
    return has_message_type_;
  }
  MediaKeyMessageType message_type() const {
    DCHECK(has_message_type_);
    return message_type_;
  }
  void set_message_type(MediaKeyMessageType value) {
    has_message_type_ = true;
    message_type_ = value;
  }

  bool has_message() const {
    return has_message_;
  }
  const ::cobalt::script::ScriptValue<::cobalt::script::ArrayBuffer>* message() const {
    DCHECK(has_message_);
    if (!message_) {
      return NULL;
    }
    return (message_->GetScriptValue());
  }
  void set_message(const ::cobalt::script::ScriptValue<::cobalt::script::ArrayBuffer>* value) {
    has_message_ = true;
    if (value) {
      message_.reset(
          new script::Handle<::cobalt::script::ArrayBuffer>(*value));
    } else {
      message_.reset();
    }
  }


 private:
  bool has_message_type_;
  MediaKeyMessageType message_type_;
  bool has_message_;
  std::unique_ptr<script::Handle<::cobalt::script::ArrayBuffer>> message_;
};

// This ostream override is necessary for MOCK_METHODs commonly used
// in idl test code
inline std::ostream& operator<<(
    std::ostream& stream, const cobalt::dom::eme::MediaKeyMessageEventInit& in) {
  SB_UNREFERENCED_PARAMETER(in);
  stream << "[MediaKeyMessageEventInit]";
  return stream;
}

}  // namespace cobalt
}  // namespace dom
}  // namespace eme

#endif  // MediaKeyMessageEventInit_h
