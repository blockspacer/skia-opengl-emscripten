// Copyright 2019 The Cobalt Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// clang-format off

// This file has been auto-generated by bindings/code_generator_cobalt.py. DO NOT MODIFY!
// Auto-generated from template: bindings/templates/dictionary.h.template

#ifndef MediaMetadataInit_h
#define MediaMetadataInit_h

#include <string>

#include "base/optional.h"
#include "cobalt/script/array_buffer.h"
#include "cobalt/script/array_buffer_view.h"
#include "cobalt/script/script_value.h"
#include "cobalt/script/sequence.h"
#include "cobalt/script/typed_arrays.h"
#include "cobalt/script/value_handle.h"
#include "cobalt/media_session/media_image.h"

using cobalt::media_session::MediaImage;

namespace cobalt {
namespace media_session {

class MediaMetadataInit {
 public:
  MediaMetadataInit() {
    title_ = "";
    artist_ = "";
    album_ = "";
    has_artwork_ = false;
    artwork_ = ::cobalt::script::Sequence< MediaImage >();
  }

  MediaMetadataInit(const MediaMetadataInit& other) {
    title_ = other.title_;
    artist_ = other.artist_;
    album_ = other.album_;
    has_artwork_ = other.has_artwork_;
    artwork_ = other.artwork_;
  }

  MediaMetadataInit& operator=(const MediaMetadataInit& other) {
    title_ = other.title_;
    artist_ = other.artist_;
    album_ = other.album_;
    has_artwork_ = other.has_artwork_;
    artwork_ = other.artwork_;
    return *this;
  }

  bool has_title() const {
    return true;
  }
  const std::string& title() const {
    return title_;
  }
  void set_title(const std::string& value) {
    title_ = value;
  }

  bool has_artist() const {
    return true;
  }
  const std::string& artist() const {
    return artist_;
  }
  void set_artist(const std::string& value) {
    artist_ = value;
  }

  bool has_album() const {
    return true;
  }
  const std::string& album() const {
    return album_;
  }
  void set_album(const std::string& value) {
    album_ = value;
  }

  bool has_artwork() const {
    return has_artwork_;
  }
  ::cobalt::script::Sequence< MediaImage > artwork() const {
    DCHECK(has_artwork_);
    return artwork_;
  }
  void set_artwork(::cobalt::script::Sequence< MediaImage > value) {
    has_artwork_ = true;
    artwork_ = value;
  }


 private:
  std::string title_;
  std::string artist_;
  std::string album_;
  bool has_artwork_;
  ::cobalt::script::Sequence< MediaImage > artwork_;
};

// This ostream override is necessary for MOCK_METHODs commonly used
// in idl test code
inline std::ostream& operator<<(
    std::ostream& stream, const cobalt::media_session::MediaMetadataInit& in) {
  SB_UNREFERENCED_PARAMETER(in);
  stream << "[MediaMetadataInit]";
  return stream;
}

}  // namespace cobalt
}  // namespace media_session

#endif  // MediaMetadataInit_h
