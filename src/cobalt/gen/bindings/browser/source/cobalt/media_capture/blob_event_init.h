// Copyright 2019 The Cobalt Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// clang-format off

// This file has been auto-generated by bindings/code_generator_cobalt.py. DO NOT MODIFY!
// Auto-generated from template: bindings/templates/dictionary.h.template

#ifndef BlobEventInit_h
#define BlobEventInit_h

#include <string>

#include "base/optional.h"
#include "cobalt/script/array_buffer.h"
#include "cobalt/script/array_buffer_view.h"
#include "cobalt/script/script_value.h"
#include "cobalt/script/sequence.h"
#include "cobalt/script/typed_arrays.h"
#include "cobalt/script/value_handle.h"
#include "cobalt/dom/blob.h"

using cobalt::dom::Blob;

namespace cobalt {
namespace media_capture {

class BlobEventInit {
 public:
  BlobEventInit() {
    has_data_ = false;
    data_ = scoped_refptr<Blob>();
    has_timecode_ = false;
    timecode_ = double();
  }

  BlobEventInit(const BlobEventInit& other) {
    has_data_ = other.has_data_;
    data_ = other.data_;
    has_timecode_ = other.has_timecode_;
    timecode_ = other.timecode_;
  }

  BlobEventInit& operator=(const BlobEventInit& other) {
    has_data_ = other.has_data_;
    data_ = other.data_;
    has_timecode_ = other.has_timecode_;
    timecode_ = other.timecode_;
    return *this;
  }

  bool has_data() const {
    return has_data_;
  }
  const scoped_refptr<Blob>& data() const {
    DCHECK(has_data_);
    return data_;
  }
  void set_data(const scoped_refptr<Blob>& value) {
    has_data_ = true;
    data_ = value;
  }

  bool has_timecode() const {
    return has_timecode_;
  }
  const double& timecode() const {
    DCHECK(has_timecode_);
    return timecode_;
  }
  void set_timecode(const double& value) {
    has_timecode_ = true;
    timecode_ = value;
  }


 private:
  bool has_data_;
  scoped_refptr<Blob> data_;
  bool has_timecode_;
  double timecode_;
};

// This ostream override is necessary for MOCK_METHODs commonly used
// in idl test code
inline std::ostream& operator<<(
    std::ostream& stream, const cobalt::media_capture::BlobEventInit& in) {
  SB_UNREFERENCED_PARAMETER(in);
  stream << "[BlobEventInit]";
  return stream;
}

}  // namespace cobalt
}  // namespace media_capture

#endif  // BlobEventInit_h
