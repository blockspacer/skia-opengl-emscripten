
// Copyright 2019 The Cobalt Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// clang-format off

// This file has been auto-generated by bindings/code_generator_cobalt.py. DO NOT MODIFY!
// Auto-generated from template: bindings/v8c/templates/generated-types.h.template

#ifndef GENERATED_TYPE_CONVERSION_H_
#define GENERATED_TYPE_CONVERSION_H_

#include "cobalt/script/exception_state.h"
#include "v8/include/v8.h"

// #includes for generated types.
#include "cobalt/dom/custom_event_init.h"
#include "cobalt/websocket/close_event_init.h"
#include "cobalt/dom/ui_event_init.h"
#include "cobalt/dom/eme/media_encrypted_event_init.h"
#include "cobalt/dom/event_init.h"
#include "cobalt/dom/blob_property_bag.h"
#include "cobalt/dom/event_modifier_init.h"
#include "cobalt/media_capture/blob_event_init.h"
#include "cobalt/dom/mutation_observer_init.h"
#include "cobalt/dom/pointer_event_init.h"
#include "cobalt/debug/console/console_command.h"
#include "cobalt/dom/mouse_event_init.h"
#include "cobalt/dom/focus_event_init.h"
#include "cobalt/dom/eme/media_key_system_media_capability.h"
#include "cobalt/media_session/media_image.h"
#include "cobalt/dom/wheel_event_init.h"
#include "cobalt/media_stream/media_stream_constraints.h"
#include "cobalt/media_stream/media_track_settings.h"
#include "cobalt/media_session/media_metadata_init.h"
#include "cobalt/dom/error_event_init.h"
#include "cobalt/dom/device_orientation_event_init.h"
#include "cobalt/dom/input_event_init.h"
#include "cobalt/dom/eme/media_key_system_configuration.h"
#include "cobalt/media_capture/media_recorder_options.h"
#include "cobalt/dom/keyboard_event_init.h"
#include "cobalt/dom/eme/media_key_message_event_init.h"
#include "cobalt/dom/captions/caption_character_edge_style.h"
#include "cobalt/dom/eme/media_keys_requirement.h"
#include "cobalt/dom/captions/caption_state.h"
#include "cobalt/dom/document_ready_state.h"
#include "cobalt/dom/source_buffer_append_mode.h"
#include "cobalt/dom/dom_parser_supported_type.h"
#include "cobalt/dom/media_source_end_of_stream_error.h"
#include "cobalt/speech/speech_recognition_error_code.h"
#include "cobalt/dom/captions/caption_opacity_percentage.h"
#include "cobalt/dom/eme/media_key_status.h"
#include "cobalt/media_session/media_session_playback_state.h"
#include "cobalt/audio/audio_node_channel_count_mode.h"
#include "cobalt/dom/eme/media_key_session_type.h"
#include "cobalt/media_capture/recording_state.h"
#include "cobalt/audio/audio_node_channel_interpretation.h"
#include "cobalt/dom/track_default_type.h"
#include "cobalt/dom/media_source_ready_state.h"
#include "cobalt/media_session/media_session_action.h"
#include "cobalt/dom/captions/caption_font_size_percentage.h"
#include "cobalt/dom/captions/caption_font_family.h"
#include "cobalt/page_visibility/visibility_state.h"
#include "cobalt/web_animations/animation_fill_mode.h"
#include "cobalt/web_animations/animation_playback_direction.h"
#include "cobalt/dom/eme/media_key_message_type.h"
#include "cobalt/media_capture/media_device_kind.h"
#include "cobalt/dom/captions/caption_color.h"
#include "cobalt/speech/speech_synthesis_error_code.h"

namespace cobalt {
namespace script {
namespace v8c {

// cobalt::dom::CustomEventInit -> JSValue
void ToJSValue(
    v8::Isolate* isolate,
    const cobalt::dom::CustomEventInit& in_value,
    v8::Local<v8::Value>* out_value);

// JSValue -> cobalt::dom::CustomEventInit
void FromJSValue(
    v8::Isolate* isolate,
    v8::Local<v8::Value> value,
    int conversion_flags,
    ExceptionState* exception_state,
    cobalt::dom::CustomEventInit* out_value);

// cobalt::websocket::CloseEventInit -> JSValue
void ToJSValue(
    v8::Isolate* isolate,
    const cobalt::websocket::CloseEventInit& in_value,
    v8::Local<v8::Value>* out_value);

// JSValue -> cobalt::websocket::CloseEventInit
void FromJSValue(
    v8::Isolate* isolate,
    v8::Local<v8::Value> value,
    int conversion_flags,
    ExceptionState* exception_state,
    cobalt::websocket::CloseEventInit* out_value);

// cobalt::dom::UIEventInit -> JSValue
void ToJSValue(
    v8::Isolate* isolate,
    const cobalt::dom::UIEventInit& in_value,
    v8::Local<v8::Value>* out_value);

// JSValue -> cobalt::dom::UIEventInit
void FromJSValue(
    v8::Isolate* isolate,
    v8::Local<v8::Value> value,
    int conversion_flags,
    ExceptionState* exception_state,
    cobalt::dom::UIEventInit* out_value);

// cobalt::dom::eme::MediaEncryptedEventInit -> JSValue
void ToJSValue(
    v8::Isolate* isolate,
    const cobalt::dom::eme::MediaEncryptedEventInit& in_value,
    v8::Local<v8::Value>* out_value);

// JSValue -> cobalt::dom::eme::MediaEncryptedEventInit
void FromJSValue(
    v8::Isolate* isolate,
    v8::Local<v8::Value> value,
    int conversion_flags,
    ExceptionState* exception_state,
    cobalt::dom::eme::MediaEncryptedEventInit* out_value);

// cobalt::dom::EventInit -> JSValue
void ToJSValue(
    v8::Isolate* isolate,
    const cobalt::dom::EventInit& in_value,
    v8::Local<v8::Value>* out_value);

// JSValue -> cobalt::dom::EventInit
void FromJSValue(
    v8::Isolate* isolate,
    v8::Local<v8::Value> value,
    int conversion_flags,
    ExceptionState* exception_state,
    cobalt::dom::EventInit* out_value);

// cobalt::dom::BlobPropertyBag -> JSValue
void ToJSValue(
    v8::Isolate* isolate,
    const cobalt::dom::BlobPropertyBag& in_value,
    v8::Local<v8::Value>* out_value);

// JSValue -> cobalt::dom::BlobPropertyBag
void FromJSValue(
    v8::Isolate* isolate,
    v8::Local<v8::Value> value,
    int conversion_flags,
    ExceptionState* exception_state,
    cobalt::dom::BlobPropertyBag* out_value);

// cobalt::dom::EventModifierInit -> JSValue
void ToJSValue(
    v8::Isolate* isolate,
    const cobalt::dom::EventModifierInit& in_value,
    v8::Local<v8::Value>* out_value);

// JSValue -> cobalt::dom::EventModifierInit
void FromJSValue(
    v8::Isolate* isolate,
    v8::Local<v8::Value> value,
    int conversion_flags,
    ExceptionState* exception_state,
    cobalt::dom::EventModifierInit* out_value);

// cobalt::media_capture::BlobEventInit -> JSValue
void ToJSValue(
    v8::Isolate* isolate,
    const cobalt::media_capture::BlobEventInit& in_value,
    v8::Local<v8::Value>* out_value);

// JSValue -> cobalt::media_capture::BlobEventInit
void FromJSValue(
    v8::Isolate* isolate,
    v8::Local<v8::Value> value,
    int conversion_flags,
    ExceptionState* exception_state,
    cobalt::media_capture::BlobEventInit* out_value);

// cobalt::dom::MutationObserverInit -> JSValue
void ToJSValue(
    v8::Isolate* isolate,
    const cobalt::dom::MutationObserverInit& in_value,
    v8::Local<v8::Value>* out_value);

// JSValue -> cobalt::dom::MutationObserverInit
void FromJSValue(
    v8::Isolate* isolate,
    v8::Local<v8::Value> value,
    int conversion_flags,
    ExceptionState* exception_state,
    cobalt::dom::MutationObserverInit* out_value);

// cobalt::dom::WheelEventInit -> JSValue
void ToJSValue(
    v8::Isolate* isolate,
    const cobalt::dom::WheelEventInit& in_value,
    v8::Local<v8::Value>* out_value);

// JSValue -> cobalt::dom::WheelEventInit
void FromJSValue(
    v8::Isolate* isolate,
    v8::Local<v8::Value> value,
    int conversion_flags,
    ExceptionState* exception_state,
    cobalt::dom::WheelEventInit* out_value);

// cobalt::debug::console::ConsoleCommand -> JSValue
void ToJSValue(
    v8::Isolate* isolate,
    const cobalt::debug::console::ConsoleCommand& in_value,
    v8::Local<v8::Value>* out_value);

// JSValue -> cobalt::debug::console::ConsoleCommand
void FromJSValue(
    v8::Isolate* isolate,
    v8::Local<v8::Value> value,
    int conversion_flags,
    ExceptionState* exception_state,
    cobalt::debug::console::ConsoleCommand* out_value);

// cobalt::dom::MouseEventInit -> JSValue
void ToJSValue(
    v8::Isolate* isolate,
    const cobalt::dom::MouseEventInit& in_value,
    v8::Local<v8::Value>* out_value);

// JSValue -> cobalt::dom::MouseEventInit
void FromJSValue(
    v8::Isolate* isolate,
    v8::Local<v8::Value> value,
    int conversion_flags,
    ExceptionState* exception_state,
    cobalt::dom::MouseEventInit* out_value);

// cobalt::dom::FocusEventInit -> JSValue
void ToJSValue(
    v8::Isolate* isolate,
    const cobalt::dom::FocusEventInit& in_value,
    v8::Local<v8::Value>* out_value);

// JSValue -> cobalt::dom::FocusEventInit
void FromJSValue(
    v8::Isolate* isolate,
    v8::Local<v8::Value> value,
    int conversion_flags,
    ExceptionState* exception_state,
    cobalt::dom::FocusEventInit* out_value);

// cobalt::dom::eme::MediaKeySystemMediaCapability -> JSValue
void ToJSValue(
    v8::Isolate* isolate,
    const cobalt::dom::eme::MediaKeySystemMediaCapability& in_value,
    v8::Local<v8::Value>* out_value);

// JSValue -> cobalt::dom::eme::MediaKeySystemMediaCapability
void FromJSValue(
    v8::Isolate* isolate,
    v8::Local<v8::Value> value,
    int conversion_flags,
    ExceptionState* exception_state,
    cobalt::dom::eme::MediaKeySystemMediaCapability* out_value);

// cobalt::media_session::MediaImage -> JSValue
void ToJSValue(
    v8::Isolate* isolate,
    const cobalt::media_session::MediaImage& in_value,
    v8::Local<v8::Value>* out_value);

// JSValue -> cobalt::media_session::MediaImage
void FromJSValue(
    v8::Isolate* isolate,
    v8::Local<v8::Value> value,
    int conversion_flags,
    ExceptionState* exception_state,
    cobalt::media_session::MediaImage* out_value);

// cobalt::dom::PointerEventInit -> JSValue
void ToJSValue(
    v8::Isolate* isolate,
    const cobalt::dom::PointerEventInit& in_value,
    v8::Local<v8::Value>* out_value);

// JSValue -> cobalt::dom::PointerEventInit
void FromJSValue(
    v8::Isolate* isolate,
    v8::Local<v8::Value> value,
    int conversion_flags,
    ExceptionState* exception_state,
    cobalt::dom::PointerEventInit* out_value);

// cobalt::media_stream::MediaStreamConstraints -> JSValue
void ToJSValue(
    v8::Isolate* isolate,
    const cobalt::media_stream::MediaStreamConstraints& in_value,
    v8::Local<v8::Value>* out_value);

// JSValue -> cobalt::media_stream::MediaStreamConstraints
void FromJSValue(
    v8::Isolate* isolate,
    v8::Local<v8::Value> value,
    int conversion_flags,
    ExceptionState* exception_state,
    cobalt::media_stream::MediaStreamConstraints* out_value);

// cobalt::media_stream::MediaTrackSettings -> JSValue
void ToJSValue(
    v8::Isolate* isolate,
    const cobalt::media_stream::MediaTrackSettings& in_value,
    v8::Local<v8::Value>* out_value);

// JSValue -> cobalt::media_stream::MediaTrackSettings
void FromJSValue(
    v8::Isolate* isolate,
    v8::Local<v8::Value> value,
    int conversion_flags,
    ExceptionState* exception_state,
    cobalt::media_stream::MediaTrackSettings* out_value);

// cobalt::media_session::MediaMetadataInit -> JSValue
void ToJSValue(
    v8::Isolate* isolate,
    const cobalt::media_session::MediaMetadataInit& in_value,
    v8::Local<v8::Value>* out_value);

// JSValue -> cobalt::media_session::MediaMetadataInit
void FromJSValue(
    v8::Isolate* isolate,
    v8::Local<v8::Value> value,
    int conversion_flags,
    ExceptionState* exception_state,
    cobalt::media_session::MediaMetadataInit* out_value);

// cobalt::dom::ErrorEventInit -> JSValue
void ToJSValue(
    v8::Isolate* isolate,
    const cobalt::dom::ErrorEventInit& in_value,
    v8::Local<v8::Value>* out_value);

// JSValue -> cobalt::dom::ErrorEventInit
void FromJSValue(
    v8::Isolate* isolate,
    v8::Local<v8::Value> value,
    int conversion_flags,
    ExceptionState* exception_state,
    cobalt::dom::ErrorEventInit* out_value);

// cobalt::dom::DeviceOrientationEventInit -> JSValue
void ToJSValue(
    v8::Isolate* isolate,
    const cobalt::dom::DeviceOrientationEventInit& in_value,
    v8::Local<v8::Value>* out_value);

// JSValue -> cobalt::dom::DeviceOrientationEventInit
void FromJSValue(
    v8::Isolate* isolate,
    v8::Local<v8::Value> value,
    int conversion_flags,
    ExceptionState* exception_state,
    cobalt::dom::DeviceOrientationEventInit* out_value);

// cobalt::dom::InputEventInit -> JSValue
void ToJSValue(
    v8::Isolate* isolate,
    const cobalt::dom::InputEventInit& in_value,
    v8::Local<v8::Value>* out_value);

// JSValue -> cobalt::dom::InputEventInit
void FromJSValue(
    v8::Isolate* isolate,
    v8::Local<v8::Value> value,
    int conversion_flags,
    ExceptionState* exception_state,
    cobalt::dom::InputEventInit* out_value);

// cobalt::dom::eme::MediaKeySystemConfiguration -> JSValue
void ToJSValue(
    v8::Isolate* isolate,
    const cobalt::dom::eme::MediaKeySystemConfiguration& in_value,
    v8::Local<v8::Value>* out_value);

// JSValue -> cobalt::dom::eme::MediaKeySystemConfiguration
void FromJSValue(
    v8::Isolate* isolate,
    v8::Local<v8::Value> value,
    int conversion_flags,
    ExceptionState* exception_state,
    cobalt::dom::eme::MediaKeySystemConfiguration* out_value);

// cobalt::media_capture::MediaRecorderOptions -> JSValue
void ToJSValue(
    v8::Isolate* isolate,
    const cobalt::media_capture::MediaRecorderOptions& in_value,
    v8::Local<v8::Value>* out_value);

// JSValue -> cobalt::media_capture::MediaRecorderOptions
void FromJSValue(
    v8::Isolate* isolate,
    v8::Local<v8::Value> value,
    int conversion_flags,
    ExceptionState* exception_state,
    cobalt::media_capture::MediaRecorderOptions* out_value);

// cobalt::dom::KeyboardEventInit -> JSValue
void ToJSValue(
    v8::Isolate* isolate,
    const cobalt::dom::KeyboardEventInit& in_value,
    v8::Local<v8::Value>* out_value);

// JSValue -> cobalt::dom::KeyboardEventInit
void FromJSValue(
    v8::Isolate* isolate,
    v8::Local<v8::Value> value,
    int conversion_flags,
    ExceptionState* exception_state,
    cobalt::dom::KeyboardEventInit* out_value);

// cobalt::dom::eme::MediaKeyMessageEventInit -> JSValue
void ToJSValue(
    v8::Isolate* isolate,
    const cobalt::dom::eme::MediaKeyMessageEventInit& in_value,
    v8::Local<v8::Value>* out_value);

// JSValue -> cobalt::dom::eme::MediaKeyMessageEventInit
void FromJSValue(
    v8::Isolate* isolate,
    v8::Local<v8::Value> value,
    int conversion_flags,
    ExceptionState* exception_state,
    cobalt::dom::eme::MediaKeyMessageEventInit* out_value);


// cobalt::dom::captions::CaptionCharacterEdgeStyle -> JSValue
void ToJSValue(
    v8::Isolate* isolate,
    cobalt::dom::captions::CaptionCharacterEdgeStyle in_value,
    v8::Local<v8::Value>* out_value);

// JSValue -> cobalt::dom::captions::CaptionCharacterEdgeStyle
void FromJSValue(
    v8::Isolate* isolate,
    v8::Local<v8::Value> value,
    int conversion_flags,
    ExceptionState* exception_state,
    cobalt::dom::captions::CaptionCharacterEdgeStyle* out_value);
// cobalt::dom::eme::MediaKeysRequirement -> JSValue
void ToJSValue(
    v8::Isolate* isolate,
    cobalt::dom::eme::MediaKeysRequirement in_value,
    v8::Local<v8::Value>* out_value);

// JSValue -> cobalt::dom::eme::MediaKeysRequirement
void FromJSValue(
    v8::Isolate* isolate,
    v8::Local<v8::Value> value,
    int conversion_flags,
    ExceptionState* exception_state,
    cobalt::dom::eme::MediaKeysRequirement* out_value);
// cobalt::dom::captions::CaptionState -> JSValue
void ToJSValue(
    v8::Isolate* isolate,
    cobalt::dom::captions::CaptionState in_value,
    v8::Local<v8::Value>* out_value);

// JSValue -> cobalt::dom::captions::CaptionState
void FromJSValue(
    v8::Isolate* isolate,
    v8::Local<v8::Value> value,
    int conversion_flags,
    ExceptionState* exception_state,
    cobalt::dom::captions::CaptionState* out_value);
// cobalt::dom::DocumentReadyState -> JSValue
void ToJSValue(
    v8::Isolate* isolate,
    cobalt::dom::DocumentReadyState in_value,
    v8::Local<v8::Value>* out_value);

// JSValue -> cobalt::dom::DocumentReadyState
void FromJSValue(
    v8::Isolate* isolate,
    v8::Local<v8::Value> value,
    int conversion_flags,
    ExceptionState* exception_state,
    cobalt::dom::DocumentReadyState* out_value);
// cobalt::dom::SourceBufferAppendMode -> JSValue
void ToJSValue(
    v8::Isolate* isolate,
    cobalt::dom::SourceBufferAppendMode in_value,
    v8::Local<v8::Value>* out_value);

// JSValue -> cobalt::dom::SourceBufferAppendMode
void FromJSValue(
    v8::Isolate* isolate,
    v8::Local<v8::Value> value,
    int conversion_flags,
    ExceptionState* exception_state,
    cobalt::dom::SourceBufferAppendMode* out_value);
// cobalt::dom::DOMParserSupportedType -> JSValue
void ToJSValue(
    v8::Isolate* isolate,
    cobalt::dom::DOMParserSupportedType in_value,
    v8::Local<v8::Value>* out_value);

// JSValue -> cobalt::dom::DOMParserSupportedType
void FromJSValue(
    v8::Isolate* isolate,
    v8::Local<v8::Value> value,
    int conversion_flags,
    ExceptionState* exception_state,
    cobalt::dom::DOMParserSupportedType* out_value);
// cobalt::dom::MediaSourceEndOfStreamError -> JSValue
void ToJSValue(
    v8::Isolate* isolate,
    cobalt::dom::MediaSourceEndOfStreamError in_value,
    v8::Local<v8::Value>* out_value);

// JSValue -> cobalt::dom::MediaSourceEndOfStreamError
void FromJSValue(
    v8::Isolate* isolate,
    v8::Local<v8::Value> value,
    int conversion_flags,
    ExceptionState* exception_state,
    cobalt::dom::MediaSourceEndOfStreamError* out_value);
// cobalt::speech::SpeechRecognitionErrorCode -> JSValue
void ToJSValue(
    v8::Isolate* isolate,
    cobalt::speech::SpeechRecognitionErrorCode in_value,
    v8::Local<v8::Value>* out_value);

// JSValue -> cobalt::speech::SpeechRecognitionErrorCode
void FromJSValue(
    v8::Isolate* isolate,
    v8::Local<v8::Value> value,
    int conversion_flags,
    ExceptionState* exception_state,
    cobalt::speech::SpeechRecognitionErrorCode* out_value);
// cobalt::dom::captions::CaptionOpacityPercentage -> JSValue
void ToJSValue(
    v8::Isolate* isolate,
    cobalt::dom::captions::CaptionOpacityPercentage in_value,
    v8::Local<v8::Value>* out_value);

// JSValue -> cobalt::dom::captions::CaptionOpacityPercentage
void FromJSValue(
    v8::Isolate* isolate,
    v8::Local<v8::Value> value,
    int conversion_flags,
    ExceptionState* exception_state,
    cobalt::dom::captions::CaptionOpacityPercentage* out_value);
// cobalt::dom::eme::MediaKeyStatus -> JSValue
void ToJSValue(
    v8::Isolate* isolate,
    cobalt::dom::eme::MediaKeyStatus in_value,
    v8::Local<v8::Value>* out_value);

// JSValue -> cobalt::dom::eme::MediaKeyStatus
void FromJSValue(
    v8::Isolate* isolate,
    v8::Local<v8::Value> value,
    int conversion_flags,
    ExceptionState* exception_state,
    cobalt::dom::eme::MediaKeyStatus* out_value);
// cobalt::media_session::MediaSessionPlaybackState -> JSValue
void ToJSValue(
    v8::Isolate* isolate,
    cobalt::media_session::MediaSessionPlaybackState in_value,
    v8::Local<v8::Value>* out_value);

// JSValue -> cobalt::media_session::MediaSessionPlaybackState
void FromJSValue(
    v8::Isolate* isolate,
    v8::Local<v8::Value> value,
    int conversion_flags,
    ExceptionState* exception_state,
    cobalt::media_session::MediaSessionPlaybackState* out_value);
// cobalt::dom::captions::CaptionFontFamily -> JSValue
void ToJSValue(
    v8::Isolate* isolate,
    cobalt::dom::captions::CaptionFontFamily in_value,
    v8::Local<v8::Value>* out_value);

// JSValue -> cobalt::dom::captions::CaptionFontFamily
void FromJSValue(
    v8::Isolate* isolate,
    v8::Local<v8::Value> value,
    int conversion_flags,
    ExceptionState* exception_state,
    cobalt::dom::captions::CaptionFontFamily* out_value);
// cobalt::dom::eme::MediaKeySessionType -> JSValue
void ToJSValue(
    v8::Isolate* isolate,
    cobalt::dom::eme::MediaKeySessionType in_value,
    v8::Local<v8::Value>* out_value);

// JSValue -> cobalt::dom::eme::MediaKeySessionType
void FromJSValue(
    v8::Isolate* isolate,
    v8::Local<v8::Value> value,
    int conversion_flags,
    ExceptionState* exception_state,
    cobalt::dom::eme::MediaKeySessionType* out_value);
// cobalt::media_capture::RecordingState -> JSValue
void ToJSValue(
    v8::Isolate* isolate,
    cobalt::media_capture::RecordingState in_value,
    v8::Local<v8::Value>* out_value);

// JSValue -> cobalt::media_capture::RecordingState
void FromJSValue(
    v8::Isolate* isolate,
    v8::Local<v8::Value> value,
    int conversion_flags,
    ExceptionState* exception_state,
    cobalt::media_capture::RecordingState* out_value);
// cobalt::audio::AudioNodeChannelInterpretation -> JSValue
void ToJSValue(
    v8::Isolate* isolate,
    cobalt::audio::AudioNodeChannelInterpretation in_value,
    v8::Local<v8::Value>* out_value);

// JSValue -> cobalt::audio::AudioNodeChannelInterpretation
void FromJSValue(
    v8::Isolate* isolate,
    v8::Local<v8::Value> value,
    int conversion_flags,
    ExceptionState* exception_state,
    cobalt::audio::AudioNodeChannelInterpretation* out_value);
// cobalt::dom::TrackDefaultType -> JSValue
void ToJSValue(
    v8::Isolate* isolate,
    cobalt::dom::TrackDefaultType in_value,
    v8::Local<v8::Value>* out_value);

// JSValue -> cobalt::dom::TrackDefaultType
void FromJSValue(
    v8::Isolate* isolate,
    v8::Local<v8::Value> value,
    int conversion_flags,
    ExceptionState* exception_state,
    cobalt::dom::TrackDefaultType* out_value);
// cobalt::dom::MediaSourceReadyState -> JSValue
void ToJSValue(
    v8::Isolate* isolate,
    cobalt::dom::MediaSourceReadyState in_value,
    v8::Local<v8::Value>* out_value);

// JSValue -> cobalt::dom::MediaSourceReadyState
void FromJSValue(
    v8::Isolate* isolate,
    v8::Local<v8::Value> value,
    int conversion_flags,
    ExceptionState* exception_state,
    cobalt::dom::MediaSourceReadyState* out_value);
// cobalt::media_session::MediaSessionAction -> JSValue
void ToJSValue(
    v8::Isolate* isolate,
    cobalt::media_session::MediaSessionAction in_value,
    v8::Local<v8::Value>* out_value);

// JSValue -> cobalt::media_session::MediaSessionAction
void FromJSValue(
    v8::Isolate* isolate,
    v8::Local<v8::Value> value,
    int conversion_flags,
    ExceptionState* exception_state,
    cobalt::media_session::MediaSessionAction* out_value);
// cobalt::dom::captions::CaptionFontSizePercentage -> JSValue
void ToJSValue(
    v8::Isolate* isolate,
    cobalt::dom::captions::CaptionFontSizePercentage in_value,
    v8::Local<v8::Value>* out_value);

// JSValue -> cobalt::dom::captions::CaptionFontSizePercentage
void FromJSValue(
    v8::Isolate* isolate,
    v8::Local<v8::Value> value,
    int conversion_flags,
    ExceptionState* exception_state,
    cobalt::dom::captions::CaptionFontSizePercentage* out_value);
// cobalt::audio::AudioNodeChannelCountMode -> JSValue
void ToJSValue(
    v8::Isolate* isolate,
    cobalt::audio::AudioNodeChannelCountMode in_value,
    v8::Local<v8::Value>* out_value);

// JSValue -> cobalt::audio::AudioNodeChannelCountMode
void FromJSValue(
    v8::Isolate* isolate,
    v8::Local<v8::Value> value,
    int conversion_flags,
    ExceptionState* exception_state,
    cobalt::audio::AudioNodeChannelCountMode* out_value);
// cobalt::page_visibility::VisibilityState -> JSValue
void ToJSValue(
    v8::Isolate* isolate,
    cobalt::page_visibility::VisibilityState in_value,
    v8::Local<v8::Value>* out_value);

// JSValue -> cobalt::page_visibility::VisibilityState
void FromJSValue(
    v8::Isolate* isolate,
    v8::Local<v8::Value> value,
    int conversion_flags,
    ExceptionState* exception_state,
    cobalt::page_visibility::VisibilityState* out_value);
// cobalt::web_animations::AnimationFillMode -> JSValue
void ToJSValue(
    v8::Isolate* isolate,
    cobalt::web_animations::AnimationFillMode in_value,
    v8::Local<v8::Value>* out_value);

// JSValue -> cobalt::web_animations::AnimationFillMode
void FromJSValue(
    v8::Isolate* isolate,
    v8::Local<v8::Value> value,
    int conversion_flags,
    ExceptionState* exception_state,
    cobalt::web_animations::AnimationFillMode* out_value);
// cobalt::web_animations::AnimationPlaybackDirection -> JSValue
void ToJSValue(
    v8::Isolate* isolate,
    cobalt::web_animations::AnimationPlaybackDirection in_value,
    v8::Local<v8::Value>* out_value);

// JSValue -> cobalt::web_animations::AnimationPlaybackDirection
void FromJSValue(
    v8::Isolate* isolate,
    v8::Local<v8::Value> value,
    int conversion_flags,
    ExceptionState* exception_state,
    cobalt::web_animations::AnimationPlaybackDirection* out_value);
// cobalt::dom::eme::MediaKeyMessageType -> JSValue
void ToJSValue(
    v8::Isolate* isolate,
    cobalt::dom::eme::MediaKeyMessageType in_value,
    v8::Local<v8::Value>* out_value);

// JSValue -> cobalt::dom::eme::MediaKeyMessageType
void FromJSValue(
    v8::Isolate* isolate,
    v8::Local<v8::Value> value,
    int conversion_flags,
    ExceptionState* exception_state,
    cobalt::dom::eme::MediaKeyMessageType* out_value);
// cobalt::media_capture::MediaDeviceKind -> JSValue
void ToJSValue(
    v8::Isolate* isolate,
    cobalt::media_capture::MediaDeviceKind in_value,
    v8::Local<v8::Value>* out_value);

// JSValue -> cobalt::media_capture::MediaDeviceKind
void FromJSValue(
    v8::Isolate* isolate,
    v8::Local<v8::Value> value,
    int conversion_flags,
    ExceptionState* exception_state,
    cobalt::media_capture::MediaDeviceKind* out_value);
// cobalt::dom::captions::CaptionColor -> JSValue
void ToJSValue(
    v8::Isolate* isolate,
    cobalt::dom::captions::CaptionColor in_value,
    v8::Local<v8::Value>* out_value);

// JSValue -> cobalt::dom::captions::CaptionColor
void FromJSValue(
    v8::Isolate* isolate,
    v8::Local<v8::Value> value,
    int conversion_flags,
    ExceptionState* exception_state,
    cobalt::dom::captions::CaptionColor* out_value);
// cobalt::speech::SpeechSynthesisErrorCode -> JSValue
void ToJSValue(
    v8::Isolate* isolate,
    cobalt::speech::SpeechSynthesisErrorCode in_value,
    v8::Local<v8::Value>* out_value);

// JSValue -> cobalt::speech::SpeechSynthesisErrorCode
void FromJSValue(
    v8::Isolate* isolate,
    v8::Local<v8::Value> value,
    int conversion_flags,
    ExceptionState* exception_state,
    cobalt::speech::SpeechSynthesisErrorCode* out_value);

}  // namespace v8c
}  // namespace script
}  // namespace cobalt

// #include this here so the conversion functions for generated types are
// visible refer to template types, such as sequence<T>.
#include "cobalt/script/v8c/conversion_helpers.h"

#endif  // GENERATED_TYPE_CONVERSION_H_
