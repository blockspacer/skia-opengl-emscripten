// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: network_id_proto.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "network_id_proto.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace net {
namespace nqe {
namespace internal {

void protobuf_ShutdownFile_network_5fid_5fproto_2eproto() {
  delete NetworkIDProto::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_network_5fid_5fproto_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_network_5fid_5fproto_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  NetworkIDProto::default_instance_ = new NetworkIDProto();
  NetworkIDProto::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_network_5fid_5fproto_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_network_5fid_5fproto_2eproto_once_);
void protobuf_AddDesc_network_5fid_5fproto_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_network_5fid_5fproto_2eproto_once_,
                 &protobuf_AddDesc_network_5fid_5fproto_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_network_5fid_5fproto_2eproto {
  StaticDescriptorInitializer_network_5fid_5fproto_2eproto() {
    protobuf_AddDesc_network_5fid_5fproto_2eproto();
  }
} static_descriptor_initializer_network_5fid_5fproto_2eproto_;
#endif

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
GOOGLE_ATTRIBUTE_NOINLINE static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

static ::std::string* MutableUnknownFieldsForNetworkIDProto(
    NetworkIDProto* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetworkIDProto::kConnectionTypeFieldNumber;
const int NetworkIDProto::kIdFieldNumber;
const int NetworkIDProto::kSignalStrengthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetworkIDProto::NetworkIDProto()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:net.nqe.internal.NetworkIDProto)
}

void NetworkIDProto::InitAsDefaultInstance() {
}

NetworkIDProto::NetworkIDProto(const NetworkIDProto& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:net.nqe.internal.NetworkIDProto)
}

void NetworkIDProto::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  connection_type_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signal_strength_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetworkIDProto::~NetworkIDProto() {
  // @@protoc_insertion_point(destructor:net.nqe.internal.NetworkIDProto)
  SharedDtor();
}

void NetworkIDProto::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void NetworkIDProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NetworkIDProto& NetworkIDProto::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_network_5fid_5fproto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_network_5fid_5fproto_2eproto();
#endif
  return *default_instance_;
}

NetworkIDProto* NetworkIDProto::default_instance_ = NULL;

NetworkIDProto* NetworkIDProto::New(::google::protobuf::Arena* arena) const {
  NetworkIDProto* n = new NetworkIDProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NetworkIDProto::Clear() {
// @@protoc_insertion_point(message_clear_start:net.nqe.internal.NetworkIDProto)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(NetworkIDProto, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<NetworkIDProto*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(connection_type_, signal_strength_);
    if (has_id()) {
      id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool NetworkIDProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForNetworkIDProto, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:net.nqe.internal.NetworkIDProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 connection_type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &connection_type_)));
          set_has_connection_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_id;
        break;
      }

      // optional string id = 2;
      case 2: {
        if (tag == 18) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_signal_strength;
        break;
      }

      // optional int32 signal_strength = 3;
      case 3: {
        if (tag == 24) {
         parse_signal_strength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &signal_strength_)));
          set_has_signal_strength();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:net.nqe.internal.NetworkIDProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:net.nqe.internal.NetworkIDProto)
  return false;
#undef DO_
}

void NetworkIDProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:net.nqe.internal.NetworkIDProto)
  // optional int32 connection_type = 1;
  if (has_connection_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->connection_type(), output);
  }

  // optional string id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->id(), output);
  }

  // optional int32 signal_strength = 3;
  if (has_signal_strength()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->signal_strength(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:net.nqe.internal.NetworkIDProto)
}

int NetworkIDProto::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:net.nqe.internal.NetworkIDProto)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 connection_type = 1;
    if (has_connection_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->connection_type());
    }

    // optional string id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional int32 signal_strength = 3;
    if (has_signal_strength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->signal_strength());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetworkIDProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NetworkIDProto*>(&from));
}

void NetworkIDProto::MergeFrom(const NetworkIDProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.nqe.internal.NetworkIDProto)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_connection_type()) {
      set_connection_type(from.connection_type());
    }
    if (from.has_id()) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (from.has_signal_strength()) {
      set_signal_strength(from.signal_strength());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void NetworkIDProto::CopyFrom(const NetworkIDProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.nqe.internal.NetworkIDProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkIDProto::IsInitialized() const {

  return true;
}

void NetworkIDProto::Swap(NetworkIDProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetworkIDProto::InternalSwap(NetworkIDProto* other) {
  std::swap(connection_type_, other->connection_type_);
  id_.Swap(&other->id_);
  std::swap(signal_strength_, other->signal_strength_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string NetworkIDProto::GetTypeName() const {
  return "net.nqe.internal.NetworkIDProto";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NetworkIDProto

// optional int32 connection_type = 1;
bool NetworkIDProto::has_connection_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NetworkIDProto::set_has_connection_type() {
  _has_bits_[0] |= 0x00000001u;
}
void NetworkIDProto::clear_has_connection_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void NetworkIDProto::clear_connection_type() {
  connection_type_ = 0;
  clear_has_connection_type();
}
 ::google::protobuf::int32 NetworkIDProto::connection_type() const {
  // @@protoc_insertion_point(field_get:net.nqe.internal.NetworkIDProto.connection_type)
  return connection_type_;
}
 void NetworkIDProto::set_connection_type(::google::protobuf::int32 value) {
  set_has_connection_type();
  connection_type_ = value;
  // @@protoc_insertion_point(field_set:net.nqe.internal.NetworkIDProto.connection_type)
}

// optional string id = 2;
bool NetworkIDProto::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NetworkIDProto::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
void NetworkIDProto::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void NetworkIDProto::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
 const ::std::string& NetworkIDProto::id() const {
  // @@protoc_insertion_point(field_get:net.nqe.internal.NetworkIDProto.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NetworkIDProto::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:net.nqe.internal.NetworkIDProto.id)
}
 void NetworkIDProto::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:net.nqe.internal.NetworkIDProto.id)
}
 void NetworkIDProto::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:net.nqe.internal.NetworkIDProto.id)
}
 ::std::string* NetworkIDProto::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:net.nqe.internal.NetworkIDProto.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* NetworkIDProto::release_id() {
  // @@protoc_insertion_point(field_release:net.nqe.internal.NetworkIDProto.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NetworkIDProto::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:net.nqe.internal.NetworkIDProto.id)
}

// optional int32 signal_strength = 3;
bool NetworkIDProto::has_signal_strength() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void NetworkIDProto::set_has_signal_strength() {
  _has_bits_[0] |= 0x00000004u;
}
void NetworkIDProto::clear_has_signal_strength() {
  _has_bits_[0] &= ~0x00000004u;
}
void NetworkIDProto::clear_signal_strength() {
  signal_strength_ = 0;
  clear_has_signal_strength();
}
 ::google::protobuf::int32 NetworkIDProto::signal_strength() const {
  // @@protoc_insertion_point(field_get:net.nqe.internal.NetworkIDProto.signal_strength)
  return signal_strength_;
}
 void NetworkIDProto::set_signal_strength(::google::protobuf::int32 value) {
  set_has_signal_strength();
  signal_strength_ = value;
  // @@protoc_insertion_point(field_set:net.nqe.internal.NetworkIDProto.signal_strength)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace internal
}  // namespace nqe
}  // namespace net

// @@protoc_insertion_point(global_scope)
