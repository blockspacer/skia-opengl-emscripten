// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: network_id_proto.proto

#ifndef PROTOBUF_INCLUDED_network_5fid_5fproto_2eproto
#define PROTOBUF_INCLUDED_network_5fid_5fproto_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include "net/base/net_export.h"
#define PROTOBUF_INTERNAL_EXPORT_protobuf_network_5fid_5fproto_2eproto NET_EXPORT_PRIVATE

namespace protobuf_network_5fid_5fproto_2eproto {
// Internal implementation detail -- do not use these members.
struct NET_EXPORT_PRIVATE TableStruct {
static const ::google::protobuf::internal::ParseTableField entries[];
static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
static const ::google::protobuf::internal::ParseTable schema[1];
static const ::google::protobuf::internal::FieldMetadata field_metadata[];
static const ::google::protobuf::internal::SerializationTable serialization_table[];
static const ::google::protobuf::uint32 offsets[];
};
}  // namespace protobuf_network_5fid_5fproto_2eproto
namespace net {
namespace nqe {
namespace internal {
class NetworkIDProto;
class NetworkIDProtoDefaultTypeInternal;
NET_EXPORT_PRIVATE extern NetworkIDProtoDefaultTypeInternal _NetworkIDProto_default_instance_;
}  // namespace internal
}  // namespace nqe
}  // namespace net
namespace google {
namespace protobuf {
template<> NET_EXPORT_PRIVATE ::net::nqe::internal::NetworkIDProto* Arena::CreateMaybeMessage<::net::nqe::internal::NetworkIDProto>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace net {
namespace nqe {
namespace internal {

// ===================================================================

class NET_EXPORT_PRIVATE NetworkIDProto : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:net.nqe.internal.NetworkIDProto) */ {
public:
NetworkIDProto();
virtual ~NetworkIDProto();

NetworkIDProto(const NetworkIDProto& from);

inline NetworkIDProto& operator=(const NetworkIDProto& from) {
CopyFrom(from);
return *this;
}
#if LANG_CXX11
NetworkIDProto(NetworkIDProto&& from) noexcept
: NetworkIDProto() {
*this = ::std::move(from);
}

inline NetworkIDProto& operator=(NetworkIDProto&& from) noexcept {
if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
if (this != &from) InternalSwap(&from);
} else {
CopyFrom(from);
}
return *this;
}
#endif
inline const ::std::string& unknown_fields() const {
return _internal_metadata_.unknown_fields();
}
inline ::std::string* mutable_unknown_fields() {
return _internal_metadata_.mutable_unknown_fields();
}

static const NetworkIDProto& default_instance();

static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
static inline const NetworkIDProto* internal_default_instance() {
return reinterpret_cast<const NetworkIDProto*>(
&_NetworkIDProto_default_instance_);
}
static constexpr int kIndexInFileMessages =
0;

GOOGLE_ATTRIBUTE_NOINLINE void Swap(NetworkIDProto* other);
friend void swap(NetworkIDProto& a, NetworkIDProto& b) {
a.Swap(&b);
}

// implements Message ----------------------------------------------

inline NetworkIDProto* New() const final {
return CreateMaybeMessage<NetworkIDProto>(NULL);
}

NetworkIDProto* New(::google::protobuf::Arena* arena) const final {
return CreateMaybeMessage<NetworkIDProto>(arena);
}
void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
final;
void CopyFrom(const NetworkIDProto& from);
void MergeFrom(const NetworkIDProto& from);
void Clear() final;
bool IsInitialized() const final;

size_t ByteSizeLong() const final;
bool MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) final;
void SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const final;
void DiscardUnknownFields();
int GetCachedSize() const final { return _cached_size_.Get(); }

private:
void SharedCtor();
void SharedDtor();
void SetCachedSize(int size) const;
void InternalSwap(NetworkIDProto* other);
private:
inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
return NULL;
}
inline void* MaybeArenaPtr() const {
return NULL;
}
public:

::std::string GetTypeName() const final;

// nested types ----------------------------------------------------

// accessors -------------------------------------------------------

// optional string id = 2;
bool has_id() const;
void clear_id();
static const int kIdFieldNumber = 2;
const ::std::string& id() const;
void set_id(const ::std::string& value);
#if LANG_CXX11
void set_id(::std::string&& value);
#endif
void set_id(const char* value);
void set_id(const char* value, size_t size);
::std::string* mutable_id();
::std::string* release_id();
void set_allocated_id(::std::string* id);

// optional int32 connection_type = 1;
bool has_connection_type() const;
void clear_connection_type();
static const int kConnectionTypeFieldNumber = 1;
::google::protobuf::int32 connection_type() const;
void set_connection_type(::google::protobuf::int32 value);

// optional int32 signal_strength = 3;
bool has_signal_strength() const;
void clear_signal_strength();
static const int kSignalStrengthFieldNumber = 3;
::google::protobuf::int32 signal_strength() const;
void set_signal_strength(::google::protobuf::int32 value);

// @@protoc_insertion_point(class_scope:net.nqe.internal.NetworkIDProto)
private:
void set_has_connection_type();
void clear_has_connection_type();
void set_has_id();
void clear_has_id();
void set_has_signal_strength();
void clear_has_signal_strength();

::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
::google::protobuf::internal::HasBits<1> _has_bits_;
mutable ::google::protobuf::internal::CachedSize _cached_size_;
::google::protobuf::internal::ArenaStringPtr id_;
::google::protobuf::int32 connection_type_;
::google::protobuf::int32 signal_strength_;
friend struct ::protobuf_network_5fid_5fproto_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NetworkIDProto

// optional int32 connection_type = 1;
inline bool NetworkIDProto::has_connection_type() const {
return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetworkIDProto::set_has_connection_type() {
_has_bits_[0] |= 0x00000002u;
}
inline void NetworkIDProto::clear_has_connection_type() {
_has_bits_[0] &= ~0x00000002u;
}
inline void NetworkIDProto::clear_connection_type() {
connection_type_ = 0;
clear_has_connection_type();
}
inline ::google::protobuf::int32 NetworkIDProto::connection_type() const {
// @@protoc_insertion_point(field_get:net.nqe.internal.NetworkIDProto.connection_type)
return connection_type_;
}
inline void NetworkIDProto::set_connection_type(::google::protobuf::int32 value) {
set_has_connection_type();
connection_type_ = value;
// @@protoc_insertion_point(field_set:net.nqe.internal.NetworkIDProto.connection_type)
}

// optional string id = 2;
inline bool NetworkIDProto::has_id() const {
return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetworkIDProto::set_has_id() {
_has_bits_[0] |= 0x00000001u;
}
inline void NetworkIDProto::clear_has_id() {
_has_bits_[0] &= ~0x00000001u;
}
inline void NetworkIDProto::clear_id() {
id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
clear_has_id();
}
inline const ::std::string& NetworkIDProto::id() const {
// @@protoc_insertion_point(field_get:net.nqe.internal.NetworkIDProto.id)
return id_.GetNoArena();
}
inline void NetworkIDProto::set_id(const ::std::string& value) {
set_has_id();
id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:net.nqe.internal.NetworkIDProto.id)
}
#if LANG_CXX11
inline void NetworkIDProto::set_id(::std::string&& value) {
set_has_id();
id_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:net.nqe.internal.NetworkIDProto.id)
}
#endif
inline void NetworkIDProto::set_id(const char* value) {
GOOGLE_DCHECK(value != NULL);
set_has_id();
id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:net.nqe.internal.NetworkIDProto.id)
}
inline void NetworkIDProto::set_id(const char* value, size_t size) {
set_has_id();
id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:net.nqe.internal.NetworkIDProto.id)
}
inline ::std::string* NetworkIDProto::mutable_id() {
set_has_id();
// @@protoc_insertion_point(field_mutable:net.nqe.internal.NetworkIDProto.id)
return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetworkIDProto::release_id() {
// @@protoc_insertion_point(field_release:net.nqe.internal.NetworkIDProto.id)
if (!has_id()) {
return NULL;
}
clear_has_id();
return id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkIDProto::set_allocated_id(::std::string* id) {
if (id != NULL) {
set_has_id();
} else {
clear_has_id();
}
id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
// @@protoc_insertion_point(field_set_allocated:net.nqe.internal.NetworkIDProto.id)
}

// optional int32 signal_strength = 3;
inline bool NetworkIDProto::has_signal_strength() const {
return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetworkIDProto::set_has_signal_strength() {
_has_bits_[0] |= 0x00000004u;
}
inline void NetworkIDProto::clear_has_signal_strength() {
_has_bits_[0] &= ~0x00000004u;
}
inline void NetworkIDProto::clear_signal_strength() {
signal_strength_ = 0;
clear_has_signal_strength();
}
inline ::google::protobuf::int32 NetworkIDProto::signal_strength() const {
// @@protoc_insertion_point(field_get:net.nqe.internal.NetworkIDProto.signal_strength)
return signal_strength_;
}
inline void NetworkIDProto::set_signal_strength(::google::protobuf::int32 value) {
set_has_signal_strength();
signal_strength_ = value;
// @@protoc_insertion_point(field_set:net.nqe.internal.NetworkIDProto.signal_strength)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace internal
}  // namespace nqe
}  // namespace net

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_network_5fid_5fproto_2eproto
