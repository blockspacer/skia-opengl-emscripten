// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: config.proto

#include "config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_config_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_config_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_BitrateController;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_config_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ChannelController;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_config_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Controller_ScoringPoint;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_config_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_DtxController;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_config_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_FecControllerRplrBased_Threshold;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_config_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_FecController_Threshold;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_config_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_FrameLengthController;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_config_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_FecController;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_config_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_FecControllerRplrBased;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_config_2eproto ::google::protobuf::internal::SCCInfo<7> scc_info_Controller;
}  // namespace protobuf_config_2eproto
namespace webrtc {
namespace audio_network_adaptor {
namespace config {
class FecController_ThresholdDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FecController_Threshold>
      _instance;
} _FecController_Threshold_default_instance_;
class FecControllerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FecController>
      _instance;
} _FecController_default_instance_;
class FecControllerRplrBased_ThresholdDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FecControllerRplrBased_Threshold>
      _instance;
} _FecControllerRplrBased_Threshold_default_instance_;
class FecControllerRplrBasedDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FecControllerRplrBased>
      _instance;
} _FecControllerRplrBased_default_instance_;
class FrameLengthControllerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FrameLengthController>
      _instance;
} _FrameLengthController_default_instance_;
class ChannelControllerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ChannelController>
      _instance;
} _ChannelController_default_instance_;
class DtxControllerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DtxController>
      _instance;
} _DtxController_default_instance_;
class BitrateControllerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BitrateController>
      _instance;
} _BitrateController_default_instance_;
class Controller_ScoringPointDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Controller_ScoringPoint>
      _instance;
} _Controller_ScoringPoint_default_instance_;
class ControllerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Controller>
      _instance;
  const ::webrtc::audio_network_adaptor::config::FecController* fec_controller_;
  const ::webrtc::audio_network_adaptor::config::FrameLengthController* frame_length_controller_;
  const ::webrtc::audio_network_adaptor::config::ChannelController* channel_controller_;
  const ::webrtc::audio_network_adaptor::config::DtxController* dtx_controller_;
  const ::webrtc::audio_network_adaptor::config::BitrateController* bitrate_controller_;
  const ::webrtc::audio_network_adaptor::config::FecControllerRplrBased* fec_controller_rplr_based_;
} _Controller_default_instance_;
class ControllerManagerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ControllerManager>
      _instance;
} _ControllerManager_default_instance_;
}  // namespace config
}  // namespace audio_network_adaptor
}  // namespace webrtc
namespace protobuf_config_2eproto {
static void InitDefaultsFecController_Threshold() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::webrtc::audio_network_adaptor::config::_FecController_Threshold_default_instance_;
    new (ptr) ::webrtc::audio_network_adaptor::config::FecController_Threshold();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::webrtc::audio_network_adaptor::config::FecController_Threshold::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FecController_Threshold =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFecController_Threshold}, {}};

static void InitDefaultsFecController() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::webrtc::audio_network_adaptor::config::_FecController_default_instance_;
    new (ptr) ::webrtc::audio_network_adaptor::config::FecController();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::webrtc::audio_network_adaptor::config::FecController::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_FecController =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsFecController}, {
      &protobuf_config_2eproto::scc_info_FecController_Threshold.base,}};

static void InitDefaultsFecControllerRplrBased_Threshold() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::webrtc::audio_network_adaptor::config::_FecControllerRplrBased_Threshold_default_instance_;
    new (ptr) ::webrtc::audio_network_adaptor::config::FecControllerRplrBased_Threshold();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::webrtc::audio_network_adaptor::config::FecControllerRplrBased_Threshold::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FecControllerRplrBased_Threshold =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFecControllerRplrBased_Threshold}, {}};

static void InitDefaultsFecControllerRplrBased() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::webrtc::audio_network_adaptor::config::_FecControllerRplrBased_default_instance_;
    new (ptr) ::webrtc::audio_network_adaptor::config::FecControllerRplrBased();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::webrtc::audio_network_adaptor::config::FecControllerRplrBased::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_FecControllerRplrBased =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsFecControllerRplrBased}, {
      &protobuf_config_2eproto::scc_info_FecControllerRplrBased_Threshold.base,}};

static void InitDefaultsFrameLengthController() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::webrtc::audio_network_adaptor::config::_FrameLengthController_default_instance_;
    new (ptr) ::webrtc::audio_network_adaptor::config::FrameLengthController();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::webrtc::audio_network_adaptor::config::FrameLengthController::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FrameLengthController =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFrameLengthController}, {}};

static void InitDefaultsChannelController() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::webrtc::audio_network_adaptor::config::_ChannelController_default_instance_;
    new (ptr) ::webrtc::audio_network_adaptor::config::ChannelController();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::webrtc::audio_network_adaptor::config::ChannelController::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ChannelController =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsChannelController}, {}};

static void InitDefaultsDtxController() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::webrtc::audio_network_adaptor::config::_DtxController_default_instance_;
    new (ptr) ::webrtc::audio_network_adaptor::config::DtxController();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::webrtc::audio_network_adaptor::config::DtxController::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DtxController =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDtxController}, {}};

static void InitDefaultsBitrateController() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::webrtc::audio_network_adaptor::config::_BitrateController_default_instance_;
    new (ptr) ::webrtc::audio_network_adaptor::config::BitrateController();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::webrtc::audio_network_adaptor::config::BitrateController::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BitrateController =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBitrateController}, {}};

static void InitDefaultsController_ScoringPoint() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::webrtc::audio_network_adaptor::config::_Controller_ScoringPoint_default_instance_;
    new (ptr) ::webrtc::audio_network_adaptor::config::Controller_ScoringPoint();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::webrtc::audio_network_adaptor::config::Controller_ScoringPoint::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Controller_ScoringPoint =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsController_ScoringPoint}, {}};

static void InitDefaultsController() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::webrtc::audio_network_adaptor::config::_Controller_default_instance_;
    new (ptr) ::webrtc::audio_network_adaptor::config::Controller();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::webrtc::audio_network_adaptor::config::Controller::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<7> scc_info_Controller =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 7, InitDefaultsController}, {
      &protobuf_config_2eproto::scc_info_Controller_ScoringPoint.base,
      &protobuf_config_2eproto::scc_info_FecController.base,
      &protobuf_config_2eproto::scc_info_FrameLengthController.base,
      &protobuf_config_2eproto::scc_info_ChannelController.base,
      &protobuf_config_2eproto::scc_info_DtxController.base,
      &protobuf_config_2eproto::scc_info_BitrateController.base,
      &protobuf_config_2eproto::scc_info_FecControllerRplrBased.base,}};

static void InitDefaultsControllerManager() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::webrtc::audio_network_adaptor::config::_ControllerManager_default_instance_;
    new (ptr) ::webrtc::audio_network_adaptor::config::ControllerManager();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::webrtc::audio_network_adaptor::config::ControllerManager::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ControllerManager =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsControllerManager}, {
      &protobuf_config_2eproto::scc_info_Controller.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_FecController_Threshold.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FecController.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FecControllerRplrBased_Threshold.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FecControllerRplrBased.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FrameLengthController.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ChannelController.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DtxController.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BitrateController.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Controller_ScoringPoint.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Controller.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ControllerManager.base);
}

}  // namespace protobuf_config_2eproto
namespace webrtc {
namespace audio_network_adaptor {
namespace config {

// ===================================================================

void FecController_Threshold::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FecController_Threshold::kLowBandwidthBpsFieldNumber;
const int FecController_Threshold::kLowBandwidthPacketLossFieldNumber;
const int FecController_Threshold::kHighBandwidthBpsFieldNumber;
const int FecController_Threshold::kHighBandwidthPacketLossFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FecController_Threshold::FecController_Threshold()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_config_2eproto::scc_info_FecController_Threshold.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:webrtc.audio_network_adaptor.config.FecController.Threshold)
}
FecController_Threshold::FecController_Threshold(const FecController_Threshold& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&low_bandwidth_bps_, &from.low_bandwidth_bps_,
    static_cast<size_t>(reinterpret_cast<char*>(&high_bandwidth_packet_loss_) -
    reinterpret_cast<char*>(&low_bandwidth_bps_)) + sizeof(high_bandwidth_packet_loss_));
  // @@protoc_insertion_point(copy_constructor:webrtc.audio_network_adaptor.config.FecController.Threshold)
}

void FecController_Threshold::SharedCtor() {
  ::memset(&low_bandwidth_bps_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&high_bandwidth_packet_loss_) -
      reinterpret_cast<char*>(&low_bandwidth_bps_)) + sizeof(high_bandwidth_packet_loss_));
}

FecController_Threshold::~FecController_Threshold() {
  // @@protoc_insertion_point(destructor:webrtc.audio_network_adaptor.config.FecController.Threshold)
  SharedDtor();
}

void FecController_Threshold::SharedDtor() {
}

void FecController_Threshold::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FecController_Threshold& FecController_Threshold::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_config_2eproto::scc_info_FecController_Threshold.base);
  return *internal_default_instance();
}


void FecController_Threshold::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.audio_network_adaptor.config.FecController.Threshold)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&low_bandwidth_bps_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&high_bandwidth_packet_loss_) -
        reinterpret_cast<char*>(&low_bandwidth_bps_)) + sizeof(high_bandwidth_packet_loss_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FecController_Threshold::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:webrtc.audio_network_adaptor.config.FecController.Threshold)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 low_bandwidth_bps = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_low_bandwidth_bps();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &low_bandwidth_bps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float low_bandwidth_packet_loss = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_low_bandwidth_packet_loss();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &low_bandwidth_packet_loss_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 high_bandwidth_bps = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_high_bandwidth_bps();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &high_bandwidth_bps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float high_bandwidth_packet_loss = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_high_bandwidth_packet_loss();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &high_bandwidth_packet_loss_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:webrtc.audio_network_adaptor.config.FecController.Threshold)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:webrtc.audio_network_adaptor.config.FecController.Threshold)
  return false;
#undef DO_
}

void FecController_Threshold::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:webrtc.audio_network_adaptor.config.FecController.Threshold)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 low_bandwidth_bps = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->low_bandwidth_bps(), output);
  }

  // optional float low_bandwidth_packet_loss = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->low_bandwidth_packet_loss(), output);
  }

  // optional int32 high_bandwidth_bps = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->high_bandwidth_bps(), output);
  }

  // optional float high_bandwidth_packet_loss = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->high_bandwidth_packet_loss(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:webrtc.audio_network_adaptor.config.FecController.Threshold)
}

size_t FecController_Threshold::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.audio_network_adaptor.config.FecController.Threshold)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 15u) {
    // optional int32 low_bandwidth_bps = 1;
    if (has_low_bandwidth_bps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->low_bandwidth_bps());
    }

    // optional float low_bandwidth_packet_loss = 2;
    if (has_low_bandwidth_packet_loss()) {
      total_size += 1 + 4;
    }

    // optional int32 high_bandwidth_bps = 3;
    if (has_high_bandwidth_bps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->high_bandwidth_bps());
    }

    // optional float high_bandwidth_packet_loss = 4;
    if (has_high_bandwidth_packet_loss()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FecController_Threshold::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FecController_Threshold*>(&from));
}

void FecController_Threshold::MergeFrom(const FecController_Threshold& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.audio_network_adaptor.config.FecController.Threshold)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      low_bandwidth_bps_ = from.low_bandwidth_bps_;
    }
    if (cached_has_bits & 0x00000002u) {
      low_bandwidth_packet_loss_ = from.low_bandwidth_packet_loss_;
    }
    if (cached_has_bits & 0x00000004u) {
      high_bandwidth_bps_ = from.high_bandwidth_bps_;
    }
    if (cached_has_bits & 0x00000008u) {
      high_bandwidth_packet_loss_ = from.high_bandwidth_packet_loss_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FecController_Threshold::CopyFrom(const FecController_Threshold& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.audio_network_adaptor.config.FecController.Threshold)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FecController_Threshold::IsInitialized() const {
  return true;
}

void FecController_Threshold::Swap(FecController_Threshold* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FecController_Threshold::InternalSwap(FecController_Threshold* other) {
  using std::swap;
  swap(low_bandwidth_bps_, other->low_bandwidth_bps_);
  swap(low_bandwidth_packet_loss_, other->low_bandwidth_packet_loss_);
  swap(high_bandwidth_bps_, other->high_bandwidth_bps_);
  swap(high_bandwidth_packet_loss_, other->high_bandwidth_packet_loss_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string FecController_Threshold::GetTypeName() const {
  return "webrtc.audio_network_adaptor.config.FecController.Threshold";
}


// ===================================================================

void FecController::InitAsDefaultInstance() {
  ::webrtc::audio_network_adaptor::config::_FecController_default_instance_._instance.get_mutable()->fec_enabling_threshold_ = const_cast< ::webrtc::audio_network_adaptor::config::FecController_Threshold*>(
      ::webrtc::audio_network_adaptor::config::FecController_Threshold::internal_default_instance());
  ::webrtc::audio_network_adaptor::config::_FecController_default_instance_._instance.get_mutable()->fec_disabling_threshold_ = const_cast< ::webrtc::audio_network_adaptor::config::FecController_Threshold*>(
      ::webrtc::audio_network_adaptor::config::FecController_Threshold::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FecController::kFecEnablingThresholdFieldNumber;
const int FecController::kFecDisablingThresholdFieldNumber;
const int FecController::kTimeConstantMsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FecController::FecController()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_config_2eproto::scc_info_FecController.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:webrtc.audio_network_adaptor.config.FecController)
}
FecController::FecController(const FecController& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_fec_enabling_threshold()) {
    fec_enabling_threshold_ = new ::webrtc::audio_network_adaptor::config::FecController_Threshold(*from.fec_enabling_threshold_);
  } else {
    fec_enabling_threshold_ = NULL;
  }
  if (from.has_fec_disabling_threshold()) {
    fec_disabling_threshold_ = new ::webrtc::audio_network_adaptor::config::FecController_Threshold(*from.fec_disabling_threshold_);
  } else {
    fec_disabling_threshold_ = NULL;
  }
  time_constant_ms_ = from.time_constant_ms_;
  // @@protoc_insertion_point(copy_constructor:webrtc.audio_network_adaptor.config.FecController)
}

void FecController::SharedCtor() {
  ::memset(&fec_enabling_threshold_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_constant_ms_) -
      reinterpret_cast<char*>(&fec_enabling_threshold_)) + sizeof(time_constant_ms_));
}

FecController::~FecController() {
  // @@protoc_insertion_point(destructor:webrtc.audio_network_adaptor.config.FecController)
  SharedDtor();
}

void FecController::SharedDtor() {
  if (this != internal_default_instance()) delete fec_enabling_threshold_;
  if (this != internal_default_instance()) delete fec_disabling_threshold_;
}

void FecController::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FecController& FecController::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_config_2eproto::scc_info_FecController.base);
  return *internal_default_instance();
}


void FecController::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.audio_network_adaptor.config.FecController)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(fec_enabling_threshold_ != NULL);
      fec_enabling_threshold_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(fec_disabling_threshold_ != NULL);
      fec_disabling_threshold_->Clear();
    }
  }
  time_constant_ms_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FecController::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:webrtc.audio_network_adaptor.config.FecController)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .webrtc.audio_network_adaptor.config.FecController.Threshold fec_enabling_threshold = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_fec_enabling_threshold()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .webrtc.audio_network_adaptor.config.FecController.Threshold fec_disabling_threshold = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_fec_disabling_threshold()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 time_constant_ms = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_time_constant_ms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_constant_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:webrtc.audio_network_adaptor.config.FecController)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:webrtc.audio_network_adaptor.config.FecController)
  return false;
#undef DO_
}

void FecController::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:webrtc.audio_network_adaptor.config.FecController)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .webrtc.audio_network_adaptor.config.FecController.Threshold fec_enabling_threshold = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_fec_enabling_threshold(), output);
  }

  // optional .webrtc.audio_network_adaptor.config.FecController.Threshold fec_disabling_threshold = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->_internal_fec_disabling_threshold(), output);
  }

  // optional int32 time_constant_ms = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->time_constant_ms(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:webrtc.audio_network_adaptor.config.FecController)
}

size_t FecController::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.audio_network_adaptor.config.FecController)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 7u) {
    // optional .webrtc.audio_network_adaptor.config.FecController.Threshold fec_enabling_threshold = 1;
    if (has_fec_enabling_threshold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *fec_enabling_threshold_);
    }

    // optional .webrtc.audio_network_adaptor.config.FecController.Threshold fec_disabling_threshold = 2;
    if (has_fec_disabling_threshold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *fec_disabling_threshold_);
    }

    // optional int32 time_constant_ms = 3;
    if (has_time_constant_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time_constant_ms());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FecController::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FecController*>(&from));
}

void FecController::MergeFrom(const FecController& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.audio_network_adaptor.config.FecController)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_fec_enabling_threshold()->::webrtc::audio_network_adaptor::config::FecController_Threshold::MergeFrom(from.fec_enabling_threshold());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_fec_disabling_threshold()->::webrtc::audio_network_adaptor::config::FecController_Threshold::MergeFrom(from.fec_disabling_threshold());
    }
    if (cached_has_bits & 0x00000004u) {
      time_constant_ms_ = from.time_constant_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FecController::CopyFrom(const FecController& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.audio_network_adaptor.config.FecController)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FecController::IsInitialized() const {
  return true;
}

void FecController::Swap(FecController* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FecController::InternalSwap(FecController* other) {
  using std::swap;
  swap(fec_enabling_threshold_, other->fec_enabling_threshold_);
  swap(fec_disabling_threshold_, other->fec_disabling_threshold_);
  swap(time_constant_ms_, other->time_constant_ms_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string FecController::GetTypeName() const {
  return "webrtc.audio_network_adaptor.config.FecController";
}


// ===================================================================

void FecControllerRplrBased_Threshold::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FecControllerRplrBased_Threshold::kLowBandwidthBpsFieldNumber;
const int FecControllerRplrBased_Threshold::kLowBandwidthRecoverablePacketLossFieldNumber;
const int FecControllerRplrBased_Threshold::kHighBandwidthBpsFieldNumber;
const int FecControllerRplrBased_Threshold::kHighBandwidthRecoverablePacketLossFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FecControllerRplrBased_Threshold::FecControllerRplrBased_Threshold()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_config_2eproto::scc_info_FecControllerRplrBased_Threshold.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:webrtc.audio_network_adaptor.config.FecControllerRplrBased.Threshold)
}
FecControllerRplrBased_Threshold::FecControllerRplrBased_Threshold(const FecControllerRplrBased_Threshold& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&low_bandwidth_bps_, &from.low_bandwidth_bps_,
    static_cast<size_t>(reinterpret_cast<char*>(&high_bandwidth_recoverable_packet_loss_) -
    reinterpret_cast<char*>(&low_bandwidth_bps_)) + sizeof(high_bandwidth_recoverable_packet_loss_));
  // @@protoc_insertion_point(copy_constructor:webrtc.audio_network_adaptor.config.FecControllerRplrBased.Threshold)
}

void FecControllerRplrBased_Threshold::SharedCtor() {
  ::memset(&low_bandwidth_bps_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&high_bandwidth_recoverable_packet_loss_) -
      reinterpret_cast<char*>(&low_bandwidth_bps_)) + sizeof(high_bandwidth_recoverable_packet_loss_));
}

FecControllerRplrBased_Threshold::~FecControllerRplrBased_Threshold() {
  // @@protoc_insertion_point(destructor:webrtc.audio_network_adaptor.config.FecControllerRplrBased.Threshold)
  SharedDtor();
}

void FecControllerRplrBased_Threshold::SharedDtor() {
}

void FecControllerRplrBased_Threshold::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FecControllerRplrBased_Threshold& FecControllerRplrBased_Threshold::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_config_2eproto::scc_info_FecControllerRplrBased_Threshold.base);
  return *internal_default_instance();
}


void FecControllerRplrBased_Threshold::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.audio_network_adaptor.config.FecControllerRplrBased.Threshold)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&low_bandwidth_bps_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&high_bandwidth_recoverable_packet_loss_) -
        reinterpret_cast<char*>(&low_bandwidth_bps_)) + sizeof(high_bandwidth_recoverable_packet_loss_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FecControllerRplrBased_Threshold::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:webrtc.audio_network_adaptor.config.FecControllerRplrBased.Threshold)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 low_bandwidth_bps = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_low_bandwidth_bps();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &low_bandwidth_bps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float low_bandwidth_recoverable_packet_loss = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_low_bandwidth_recoverable_packet_loss();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &low_bandwidth_recoverable_packet_loss_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 high_bandwidth_bps = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_high_bandwidth_bps();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &high_bandwidth_bps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float high_bandwidth_recoverable_packet_loss = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_high_bandwidth_recoverable_packet_loss();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &high_bandwidth_recoverable_packet_loss_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:webrtc.audio_network_adaptor.config.FecControllerRplrBased.Threshold)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:webrtc.audio_network_adaptor.config.FecControllerRplrBased.Threshold)
  return false;
#undef DO_
}

void FecControllerRplrBased_Threshold::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:webrtc.audio_network_adaptor.config.FecControllerRplrBased.Threshold)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 low_bandwidth_bps = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->low_bandwidth_bps(), output);
  }

  // optional float low_bandwidth_recoverable_packet_loss = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->low_bandwidth_recoverable_packet_loss(), output);
  }

  // optional int32 high_bandwidth_bps = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->high_bandwidth_bps(), output);
  }

  // optional float high_bandwidth_recoverable_packet_loss = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->high_bandwidth_recoverable_packet_loss(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:webrtc.audio_network_adaptor.config.FecControllerRplrBased.Threshold)
}

size_t FecControllerRplrBased_Threshold::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.audio_network_adaptor.config.FecControllerRplrBased.Threshold)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 15u) {
    // optional int32 low_bandwidth_bps = 1;
    if (has_low_bandwidth_bps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->low_bandwidth_bps());
    }

    // optional float low_bandwidth_recoverable_packet_loss = 2;
    if (has_low_bandwidth_recoverable_packet_loss()) {
      total_size += 1 + 4;
    }

    // optional int32 high_bandwidth_bps = 3;
    if (has_high_bandwidth_bps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->high_bandwidth_bps());
    }

    // optional float high_bandwidth_recoverable_packet_loss = 4;
    if (has_high_bandwidth_recoverable_packet_loss()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FecControllerRplrBased_Threshold::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FecControllerRplrBased_Threshold*>(&from));
}

void FecControllerRplrBased_Threshold::MergeFrom(const FecControllerRplrBased_Threshold& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.audio_network_adaptor.config.FecControllerRplrBased.Threshold)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      low_bandwidth_bps_ = from.low_bandwidth_bps_;
    }
    if (cached_has_bits & 0x00000002u) {
      low_bandwidth_recoverable_packet_loss_ = from.low_bandwidth_recoverable_packet_loss_;
    }
    if (cached_has_bits & 0x00000004u) {
      high_bandwidth_bps_ = from.high_bandwidth_bps_;
    }
    if (cached_has_bits & 0x00000008u) {
      high_bandwidth_recoverable_packet_loss_ = from.high_bandwidth_recoverable_packet_loss_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FecControllerRplrBased_Threshold::CopyFrom(const FecControllerRplrBased_Threshold& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.audio_network_adaptor.config.FecControllerRplrBased.Threshold)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FecControllerRplrBased_Threshold::IsInitialized() const {
  return true;
}

void FecControllerRplrBased_Threshold::Swap(FecControllerRplrBased_Threshold* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FecControllerRplrBased_Threshold::InternalSwap(FecControllerRplrBased_Threshold* other) {
  using std::swap;
  swap(low_bandwidth_bps_, other->low_bandwidth_bps_);
  swap(low_bandwidth_recoverable_packet_loss_, other->low_bandwidth_recoverable_packet_loss_);
  swap(high_bandwidth_bps_, other->high_bandwidth_bps_);
  swap(high_bandwidth_recoverable_packet_loss_, other->high_bandwidth_recoverable_packet_loss_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string FecControllerRplrBased_Threshold::GetTypeName() const {
  return "webrtc.audio_network_adaptor.config.FecControllerRplrBased.Threshold";
}


// ===================================================================

void FecControllerRplrBased::InitAsDefaultInstance() {
  ::webrtc::audio_network_adaptor::config::_FecControllerRplrBased_default_instance_._instance.get_mutable()->fec_enabling_threshold_ = const_cast< ::webrtc::audio_network_adaptor::config::FecControllerRplrBased_Threshold*>(
      ::webrtc::audio_network_adaptor::config::FecControllerRplrBased_Threshold::internal_default_instance());
  ::webrtc::audio_network_adaptor::config::_FecControllerRplrBased_default_instance_._instance.get_mutable()->fec_disabling_threshold_ = const_cast< ::webrtc::audio_network_adaptor::config::FecControllerRplrBased_Threshold*>(
      ::webrtc::audio_network_adaptor::config::FecControllerRplrBased_Threshold::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FecControllerRplrBased::kFecEnablingThresholdFieldNumber;
const int FecControllerRplrBased::kFecDisablingThresholdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FecControllerRplrBased::FecControllerRplrBased()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_config_2eproto::scc_info_FecControllerRplrBased.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:webrtc.audio_network_adaptor.config.FecControllerRplrBased)
}
FecControllerRplrBased::FecControllerRplrBased(const FecControllerRplrBased& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_fec_enabling_threshold()) {
    fec_enabling_threshold_ = new ::webrtc::audio_network_adaptor::config::FecControllerRplrBased_Threshold(*from.fec_enabling_threshold_);
  } else {
    fec_enabling_threshold_ = NULL;
  }
  if (from.has_fec_disabling_threshold()) {
    fec_disabling_threshold_ = new ::webrtc::audio_network_adaptor::config::FecControllerRplrBased_Threshold(*from.fec_disabling_threshold_);
  } else {
    fec_disabling_threshold_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:webrtc.audio_network_adaptor.config.FecControllerRplrBased)
}

void FecControllerRplrBased::SharedCtor() {
  ::memset(&fec_enabling_threshold_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fec_disabling_threshold_) -
      reinterpret_cast<char*>(&fec_enabling_threshold_)) + sizeof(fec_disabling_threshold_));
}

FecControllerRplrBased::~FecControllerRplrBased() {
  // @@protoc_insertion_point(destructor:webrtc.audio_network_adaptor.config.FecControllerRplrBased)
  SharedDtor();
}

void FecControllerRplrBased::SharedDtor() {
  if (this != internal_default_instance()) delete fec_enabling_threshold_;
  if (this != internal_default_instance()) delete fec_disabling_threshold_;
}

void FecControllerRplrBased::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FecControllerRplrBased& FecControllerRplrBased::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_config_2eproto::scc_info_FecControllerRplrBased.base);
  return *internal_default_instance();
}


void FecControllerRplrBased::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.audio_network_adaptor.config.FecControllerRplrBased)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(fec_enabling_threshold_ != NULL);
      fec_enabling_threshold_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(fec_disabling_threshold_ != NULL);
      fec_disabling_threshold_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FecControllerRplrBased::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:webrtc.audio_network_adaptor.config.FecControllerRplrBased)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .webrtc.audio_network_adaptor.config.FecControllerRplrBased.Threshold fec_enabling_threshold = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_fec_enabling_threshold()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .webrtc.audio_network_adaptor.config.FecControllerRplrBased.Threshold fec_disabling_threshold = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_fec_disabling_threshold()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:webrtc.audio_network_adaptor.config.FecControllerRplrBased)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:webrtc.audio_network_adaptor.config.FecControllerRplrBased)
  return false;
#undef DO_
}

void FecControllerRplrBased::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:webrtc.audio_network_adaptor.config.FecControllerRplrBased)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .webrtc.audio_network_adaptor.config.FecControllerRplrBased.Threshold fec_enabling_threshold = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_fec_enabling_threshold(), output);
  }

  // optional .webrtc.audio_network_adaptor.config.FecControllerRplrBased.Threshold fec_disabling_threshold = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->_internal_fec_disabling_threshold(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:webrtc.audio_network_adaptor.config.FecControllerRplrBased)
}

size_t FecControllerRplrBased::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.audio_network_adaptor.config.FecControllerRplrBased)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 3u) {
    // optional .webrtc.audio_network_adaptor.config.FecControllerRplrBased.Threshold fec_enabling_threshold = 1;
    if (has_fec_enabling_threshold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *fec_enabling_threshold_);
    }

    // optional .webrtc.audio_network_adaptor.config.FecControllerRplrBased.Threshold fec_disabling_threshold = 2;
    if (has_fec_disabling_threshold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *fec_disabling_threshold_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FecControllerRplrBased::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FecControllerRplrBased*>(&from));
}

void FecControllerRplrBased::MergeFrom(const FecControllerRplrBased& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.audio_network_adaptor.config.FecControllerRplrBased)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_fec_enabling_threshold()->::webrtc::audio_network_adaptor::config::FecControllerRplrBased_Threshold::MergeFrom(from.fec_enabling_threshold());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_fec_disabling_threshold()->::webrtc::audio_network_adaptor::config::FecControllerRplrBased_Threshold::MergeFrom(from.fec_disabling_threshold());
    }
  }
}

void FecControllerRplrBased::CopyFrom(const FecControllerRplrBased& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.audio_network_adaptor.config.FecControllerRplrBased)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FecControllerRplrBased::IsInitialized() const {
  return true;
}

void FecControllerRplrBased::Swap(FecControllerRplrBased* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FecControllerRplrBased::InternalSwap(FecControllerRplrBased* other) {
  using std::swap;
  swap(fec_enabling_threshold_, other->fec_enabling_threshold_);
  swap(fec_disabling_threshold_, other->fec_disabling_threshold_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string FecControllerRplrBased::GetTypeName() const {
  return "webrtc.audio_network_adaptor.config.FecControllerRplrBased";
}


// ===================================================================

void FrameLengthController::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FrameLengthController::kFlIncreasingPacketLossFractionFieldNumber;
const int FrameLengthController::kFlDecreasingPacketLossFractionFieldNumber;
const int FrameLengthController::kFl20MsTo60MsBandwidthBpsFieldNumber;
const int FrameLengthController::kFl60MsTo20MsBandwidthBpsFieldNumber;
const int FrameLengthController::kFl60MsTo120MsBandwidthBpsFieldNumber;
const int FrameLengthController::kFl120MsTo60MsBandwidthBpsFieldNumber;
const int FrameLengthController::kFlIncreaseOverheadOffsetFieldNumber;
const int FrameLengthController::kFlDecreaseOverheadOffsetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FrameLengthController::FrameLengthController()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_config_2eproto::scc_info_FrameLengthController.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:webrtc.audio_network_adaptor.config.FrameLengthController)
}
FrameLengthController::FrameLengthController(const FrameLengthController& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&fl_increasing_packet_loss_fraction_, &from.fl_increasing_packet_loss_fraction_,
    static_cast<size_t>(reinterpret_cast<char*>(&fl_decrease_overhead_offset_) -
    reinterpret_cast<char*>(&fl_increasing_packet_loss_fraction_)) + sizeof(fl_decrease_overhead_offset_));
  // @@protoc_insertion_point(copy_constructor:webrtc.audio_network_adaptor.config.FrameLengthController)
}

void FrameLengthController::SharedCtor() {
  ::memset(&fl_increasing_packet_loss_fraction_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fl_decrease_overhead_offset_) -
      reinterpret_cast<char*>(&fl_increasing_packet_loss_fraction_)) + sizeof(fl_decrease_overhead_offset_));
}

FrameLengthController::~FrameLengthController() {
  // @@protoc_insertion_point(destructor:webrtc.audio_network_adaptor.config.FrameLengthController)
  SharedDtor();
}

void FrameLengthController::SharedDtor() {
}

void FrameLengthController::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FrameLengthController& FrameLengthController::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_config_2eproto::scc_info_FrameLengthController.base);
  return *internal_default_instance();
}


void FrameLengthController::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.audio_network_adaptor.config.FrameLengthController)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&fl_increasing_packet_loss_fraction_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fl_decrease_overhead_offset_) -
        reinterpret_cast<char*>(&fl_increasing_packet_loss_fraction_)) + sizeof(fl_decrease_overhead_offset_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FrameLengthController::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:webrtc.audio_network_adaptor.config.FrameLengthController)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float fl_increasing_packet_loss_fraction = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_fl_increasing_packet_loss_fraction();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fl_increasing_packet_loss_fraction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float fl_decreasing_packet_loss_fraction = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_fl_decreasing_packet_loss_fraction();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fl_decreasing_packet_loss_fraction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 fl_20ms_to_60ms_bandwidth_bps = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_fl_20ms_to_60ms_bandwidth_bps();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fl_20ms_to_60ms_bandwidth_bps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 fl_60ms_to_20ms_bandwidth_bps = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_fl_60ms_to_20ms_bandwidth_bps();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fl_60ms_to_20ms_bandwidth_bps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 fl_60ms_to_120ms_bandwidth_bps = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_fl_60ms_to_120ms_bandwidth_bps();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fl_60ms_to_120ms_bandwidth_bps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 fl_120ms_to_60ms_bandwidth_bps = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_fl_120ms_to_60ms_bandwidth_bps();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fl_120ms_to_60ms_bandwidth_bps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 fl_increase_overhead_offset = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_fl_increase_overhead_offset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fl_increase_overhead_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 fl_decrease_overhead_offset = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_fl_decrease_overhead_offset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fl_decrease_overhead_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:webrtc.audio_network_adaptor.config.FrameLengthController)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:webrtc.audio_network_adaptor.config.FrameLengthController)
  return false;
#undef DO_
}

void FrameLengthController::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:webrtc.audio_network_adaptor.config.FrameLengthController)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float fl_increasing_packet_loss_fraction = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->fl_increasing_packet_loss_fraction(), output);
  }

  // optional float fl_decreasing_packet_loss_fraction = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->fl_decreasing_packet_loss_fraction(), output);
  }

  // optional int32 fl_20ms_to_60ms_bandwidth_bps = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->fl_20ms_to_60ms_bandwidth_bps(), output);
  }

  // optional int32 fl_60ms_to_20ms_bandwidth_bps = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->fl_60ms_to_20ms_bandwidth_bps(), output);
  }

  // optional int32 fl_60ms_to_120ms_bandwidth_bps = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->fl_60ms_to_120ms_bandwidth_bps(), output);
  }

  // optional int32 fl_120ms_to_60ms_bandwidth_bps = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->fl_120ms_to_60ms_bandwidth_bps(), output);
  }

  // optional int32 fl_increase_overhead_offset = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->fl_increase_overhead_offset(), output);
  }

  // optional int32 fl_decrease_overhead_offset = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->fl_decrease_overhead_offset(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:webrtc.audio_network_adaptor.config.FrameLengthController)
}

size_t FrameLengthController::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.audio_network_adaptor.config.FrameLengthController)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 255u) {
    // optional float fl_increasing_packet_loss_fraction = 1;
    if (has_fl_increasing_packet_loss_fraction()) {
      total_size += 1 + 4;
    }

    // optional float fl_decreasing_packet_loss_fraction = 2;
    if (has_fl_decreasing_packet_loss_fraction()) {
      total_size += 1 + 4;
    }

    // optional int32 fl_20ms_to_60ms_bandwidth_bps = 3;
    if (has_fl_20ms_to_60ms_bandwidth_bps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fl_20ms_to_60ms_bandwidth_bps());
    }

    // optional int32 fl_60ms_to_20ms_bandwidth_bps = 4;
    if (has_fl_60ms_to_20ms_bandwidth_bps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fl_60ms_to_20ms_bandwidth_bps());
    }

    // optional int32 fl_60ms_to_120ms_bandwidth_bps = 5;
    if (has_fl_60ms_to_120ms_bandwidth_bps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fl_60ms_to_120ms_bandwidth_bps());
    }

    // optional int32 fl_120ms_to_60ms_bandwidth_bps = 6;
    if (has_fl_120ms_to_60ms_bandwidth_bps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fl_120ms_to_60ms_bandwidth_bps());
    }

    // optional int32 fl_increase_overhead_offset = 7;
    if (has_fl_increase_overhead_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fl_increase_overhead_offset());
    }

    // optional int32 fl_decrease_overhead_offset = 8;
    if (has_fl_decrease_overhead_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fl_decrease_overhead_offset());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FrameLengthController::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FrameLengthController*>(&from));
}

void FrameLengthController::MergeFrom(const FrameLengthController& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.audio_network_adaptor.config.FrameLengthController)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      fl_increasing_packet_loss_fraction_ = from.fl_increasing_packet_loss_fraction_;
    }
    if (cached_has_bits & 0x00000002u) {
      fl_decreasing_packet_loss_fraction_ = from.fl_decreasing_packet_loss_fraction_;
    }
    if (cached_has_bits & 0x00000004u) {
      fl_20ms_to_60ms_bandwidth_bps_ = from.fl_20ms_to_60ms_bandwidth_bps_;
    }
    if (cached_has_bits & 0x00000008u) {
      fl_60ms_to_20ms_bandwidth_bps_ = from.fl_60ms_to_20ms_bandwidth_bps_;
    }
    if (cached_has_bits & 0x00000010u) {
      fl_60ms_to_120ms_bandwidth_bps_ = from.fl_60ms_to_120ms_bandwidth_bps_;
    }
    if (cached_has_bits & 0x00000020u) {
      fl_120ms_to_60ms_bandwidth_bps_ = from.fl_120ms_to_60ms_bandwidth_bps_;
    }
    if (cached_has_bits & 0x00000040u) {
      fl_increase_overhead_offset_ = from.fl_increase_overhead_offset_;
    }
    if (cached_has_bits & 0x00000080u) {
      fl_decrease_overhead_offset_ = from.fl_decrease_overhead_offset_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FrameLengthController::CopyFrom(const FrameLengthController& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.audio_network_adaptor.config.FrameLengthController)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameLengthController::IsInitialized() const {
  return true;
}

void FrameLengthController::Swap(FrameLengthController* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FrameLengthController::InternalSwap(FrameLengthController* other) {
  using std::swap;
  swap(fl_increasing_packet_loss_fraction_, other->fl_increasing_packet_loss_fraction_);
  swap(fl_decreasing_packet_loss_fraction_, other->fl_decreasing_packet_loss_fraction_);
  swap(fl_20ms_to_60ms_bandwidth_bps_, other->fl_20ms_to_60ms_bandwidth_bps_);
  swap(fl_60ms_to_20ms_bandwidth_bps_, other->fl_60ms_to_20ms_bandwidth_bps_);
  swap(fl_60ms_to_120ms_bandwidth_bps_, other->fl_60ms_to_120ms_bandwidth_bps_);
  swap(fl_120ms_to_60ms_bandwidth_bps_, other->fl_120ms_to_60ms_bandwidth_bps_);
  swap(fl_increase_overhead_offset_, other->fl_increase_overhead_offset_);
  swap(fl_decrease_overhead_offset_, other->fl_decrease_overhead_offset_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string FrameLengthController::GetTypeName() const {
  return "webrtc.audio_network_adaptor.config.FrameLengthController";
}


// ===================================================================

void ChannelController::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChannelController::kChannel1To2BandwidthBpsFieldNumber;
const int ChannelController::kChannel2To1BandwidthBpsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChannelController::ChannelController()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_config_2eproto::scc_info_ChannelController.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:webrtc.audio_network_adaptor.config.ChannelController)
}
ChannelController::ChannelController(const ChannelController& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&channel_1_to_2_bandwidth_bps_, &from.channel_1_to_2_bandwidth_bps_,
    static_cast<size_t>(reinterpret_cast<char*>(&channel_2_to_1_bandwidth_bps_) -
    reinterpret_cast<char*>(&channel_1_to_2_bandwidth_bps_)) + sizeof(channel_2_to_1_bandwidth_bps_));
  // @@protoc_insertion_point(copy_constructor:webrtc.audio_network_adaptor.config.ChannelController)
}

void ChannelController::SharedCtor() {
  ::memset(&channel_1_to_2_bandwidth_bps_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel_2_to_1_bandwidth_bps_) -
      reinterpret_cast<char*>(&channel_1_to_2_bandwidth_bps_)) + sizeof(channel_2_to_1_bandwidth_bps_));
}

ChannelController::~ChannelController() {
  // @@protoc_insertion_point(destructor:webrtc.audio_network_adaptor.config.ChannelController)
  SharedDtor();
}

void ChannelController::SharedDtor() {
}

void ChannelController::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChannelController& ChannelController::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_config_2eproto::scc_info_ChannelController.base);
  return *internal_default_instance();
}


void ChannelController::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.audio_network_adaptor.config.ChannelController)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&channel_1_to_2_bandwidth_bps_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&channel_2_to_1_bandwidth_bps_) -
        reinterpret_cast<char*>(&channel_1_to_2_bandwidth_bps_)) + sizeof(channel_2_to_1_bandwidth_bps_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ChannelController::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:webrtc.audio_network_adaptor.config.ChannelController)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 channel_1_to_2_bandwidth_bps = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_channel_1_to_2_bandwidth_bps();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_1_to_2_bandwidth_bps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 channel_2_to_1_bandwidth_bps = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_channel_2_to_1_bandwidth_bps();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_2_to_1_bandwidth_bps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:webrtc.audio_network_adaptor.config.ChannelController)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:webrtc.audio_network_adaptor.config.ChannelController)
  return false;
#undef DO_
}

void ChannelController::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:webrtc.audio_network_adaptor.config.ChannelController)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 channel_1_to_2_bandwidth_bps = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->channel_1_to_2_bandwidth_bps(), output);
  }

  // optional int32 channel_2_to_1_bandwidth_bps = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->channel_2_to_1_bandwidth_bps(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:webrtc.audio_network_adaptor.config.ChannelController)
}

size_t ChannelController::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.audio_network_adaptor.config.ChannelController)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 channel_1_to_2_bandwidth_bps = 1;
    if (has_channel_1_to_2_bandwidth_bps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channel_1_to_2_bandwidth_bps());
    }

    // optional int32 channel_2_to_1_bandwidth_bps = 2;
    if (has_channel_2_to_1_bandwidth_bps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channel_2_to_1_bandwidth_bps());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChannelController::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ChannelController*>(&from));
}

void ChannelController::MergeFrom(const ChannelController& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.audio_network_adaptor.config.ChannelController)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      channel_1_to_2_bandwidth_bps_ = from.channel_1_to_2_bandwidth_bps_;
    }
    if (cached_has_bits & 0x00000002u) {
      channel_2_to_1_bandwidth_bps_ = from.channel_2_to_1_bandwidth_bps_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChannelController::CopyFrom(const ChannelController& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.audio_network_adaptor.config.ChannelController)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelController::IsInitialized() const {
  return true;
}

void ChannelController::Swap(ChannelController* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChannelController::InternalSwap(ChannelController* other) {
  using std::swap;
  swap(channel_1_to_2_bandwidth_bps_, other->channel_1_to_2_bandwidth_bps_);
  swap(channel_2_to_1_bandwidth_bps_, other->channel_2_to_1_bandwidth_bps_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string ChannelController::GetTypeName() const {
  return "webrtc.audio_network_adaptor.config.ChannelController";
}


// ===================================================================

void DtxController::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DtxController::kDtxEnablingBandwidthBpsFieldNumber;
const int DtxController::kDtxDisablingBandwidthBpsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DtxController::DtxController()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_config_2eproto::scc_info_DtxController.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:webrtc.audio_network_adaptor.config.DtxController)
}
DtxController::DtxController(const DtxController& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&dtx_enabling_bandwidth_bps_, &from.dtx_enabling_bandwidth_bps_,
    static_cast<size_t>(reinterpret_cast<char*>(&dtx_disabling_bandwidth_bps_) -
    reinterpret_cast<char*>(&dtx_enabling_bandwidth_bps_)) + sizeof(dtx_disabling_bandwidth_bps_));
  // @@protoc_insertion_point(copy_constructor:webrtc.audio_network_adaptor.config.DtxController)
}

void DtxController::SharedCtor() {
  ::memset(&dtx_enabling_bandwidth_bps_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dtx_disabling_bandwidth_bps_) -
      reinterpret_cast<char*>(&dtx_enabling_bandwidth_bps_)) + sizeof(dtx_disabling_bandwidth_bps_));
}

DtxController::~DtxController() {
  // @@protoc_insertion_point(destructor:webrtc.audio_network_adaptor.config.DtxController)
  SharedDtor();
}

void DtxController::SharedDtor() {
}

void DtxController::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DtxController& DtxController::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_config_2eproto::scc_info_DtxController.base);
  return *internal_default_instance();
}


void DtxController::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.audio_network_adaptor.config.DtxController)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&dtx_enabling_bandwidth_bps_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dtx_disabling_bandwidth_bps_) -
        reinterpret_cast<char*>(&dtx_enabling_bandwidth_bps_)) + sizeof(dtx_disabling_bandwidth_bps_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DtxController::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:webrtc.audio_network_adaptor.config.DtxController)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 dtx_enabling_bandwidth_bps = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_dtx_enabling_bandwidth_bps();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dtx_enabling_bandwidth_bps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 dtx_disabling_bandwidth_bps = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_dtx_disabling_bandwidth_bps();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dtx_disabling_bandwidth_bps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:webrtc.audio_network_adaptor.config.DtxController)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:webrtc.audio_network_adaptor.config.DtxController)
  return false;
#undef DO_
}

void DtxController::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:webrtc.audio_network_adaptor.config.DtxController)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 dtx_enabling_bandwidth_bps = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dtx_enabling_bandwidth_bps(), output);
  }

  // optional int32 dtx_disabling_bandwidth_bps = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->dtx_disabling_bandwidth_bps(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:webrtc.audio_network_adaptor.config.DtxController)
}

size_t DtxController::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.audio_network_adaptor.config.DtxController)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 dtx_enabling_bandwidth_bps = 1;
    if (has_dtx_enabling_bandwidth_bps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dtx_enabling_bandwidth_bps());
    }

    // optional int32 dtx_disabling_bandwidth_bps = 2;
    if (has_dtx_disabling_bandwidth_bps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dtx_disabling_bandwidth_bps());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DtxController::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DtxController*>(&from));
}

void DtxController::MergeFrom(const DtxController& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.audio_network_adaptor.config.DtxController)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      dtx_enabling_bandwidth_bps_ = from.dtx_enabling_bandwidth_bps_;
    }
    if (cached_has_bits & 0x00000002u) {
      dtx_disabling_bandwidth_bps_ = from.dtx_disabling_bandwidth_bps_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DtxController::CopyFrom(const DtxController& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.audio_network_adaptor.config.DtxController)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DtxController::IsInitialized() const {
  return true;
}

void DtxController::Swap(DtxController* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DtxController::InternalSwap(DtxController* other) {
  using std::swap;
  swap(dtx_enabling_bandwidth_bps_, other->dtx_enabling_bandwidth_bps_);
  swap(dtx_disabling_bandwidth_bps_, other->dtx_disabling_bandwidth_bps_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string DtxController::GetTypeName() const {
  return "webrtc.audio_network_adaptor.config.DtxController";
}


// ===================================================================

void BitrateController::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BitrateController::kFlIncreaseOverheadOffsetFieldNumber;
const int BitrateController::kFlDecreaseOverheadOffsetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BitrateController::BitrateController()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_config_2eproto::scc_info_BitrateController.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:webrtc.audio_network_adaptor.config.BitrateController)
}
BitrateController::BitrateController(const BitrateController& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&fl_increase_overhead_offset_, &from.fl_increase_overhead_offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&fl_decrease_overhead_offset_) -
    reinterpret_cast<char*>(&fl_increase_overhead_offset_)) + sizeof(fl_decrease_overhead_offset_));
  // @@protoc_insertion_point(copy_constructor:webrtc.audio_network_adaptor.config.BitrateController)
}

void BitrateController::SharedCtor() {
  ::memset(&fl_increase_overhead_offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fl_decrease_overhead_offset_) -
      reinterpret_cast<char*>(&fl_increase_overhead_offset_)) + sizeof(fl_decrease_overhead_offset_));
}

BitrateController::~BitrateController() {
  // @@protoc_insertion_point(destructor:webrtc.audio_network_adaptor.config.BitrateController)
  SharedDtor();
}

void BitrateController::SharedDtor() {
}

void BitrateController::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BitrateController& BitrateController::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_config_2eproto::scc_info_BitrateController.base);
  return *internal_default_instance();
}


void BitrateController::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.audio_network_adaptor.config.BitrateController)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&fl_increase_overhead_offset_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fl_decrease_overhead_offset_) -
        reinterpret_cast<char*>(&fl_increase_overhead_offset_)) + sizeof(fl_decrease_overhead_offset_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BitrateController::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:webrtc.audio_network_adaptor.config.BitrateController)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 fl_increase_overhead_offset = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_fl_increase_overhead_offset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fl_increase_overhead_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 fl_decrease_overhead_offset = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_fl_decrease_overhead_offset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fl_decrease_overhead_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:webrtc.audio_network_adaptor.config.BitrateController)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:webrtc.audio_network_adaptor.config.BitrateController)
  return false;
#undef DO_
}

void BitrateController::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:webrtc.audio_network_adaptor.config.BitrateController)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 fl_increase_overhead_offset = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->fl_increase_overhead_offset(), output);
  }

  // optional int32 fl_decrease_overhead_offset = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fl_decrease_overhead_offset(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:webrtc.audio_network_adaptor.config.BitrateController)
}

size_t BitrateController::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.audio_network_adaptor.config.BitrateController)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 fl_increase_overhead_offset = 1;
    if (has_fl_increase_overhead_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fl_increase_overhead_offset());
    }

    // optional int32 fl_decrease_overhead_offset = 2;
    if (has_fl_decrease_overhead_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fl_decrease_overhead_offset());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BitrateController::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BitrateController*>(&from));
}

void BitrateController::MergeFrom(const BitrateController& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.audio_network_adaptor.config.BitrateController)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      fl_increase_overhead_offset_ = from.fl_increase_overhead_offset_;
    }
    if (cached_has_bits & 0x00000002u) {
      fl_decrease_overhead_offset_ = from.fl_decrease_overhead_offset_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BitrateController::CopyFrom(const BitrateController& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.audio_network_adaptor.config.BitrateController)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BitrateController::IsInitialized() const {
  return true;
}

void BitrateController::Swap(BitrateController* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BitrateController::InternalSwap(BitrateController* other) {
  using std::swap;
  swap(fl_increase_overhead_offset_, other->fl_increase_overhead_offset_);
  swap(fl_decrease_overhead_offset_, other->fl_decrease_overhead_offset_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string BitrateController::GetTypeName() const {
  return "webrtc.audio_network_adaptor.config.BitrateController";
}


// ===================================================================

void Controller_ScoringPoint::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Controller_ScoringPoint::kUplinkBandwidthBpsFieldNumber;
const int Controller_ScoringPoint::kUplinkPacketLossFractionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Controller_ScoringPoint::Controller_ScoringPoint()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_config_2eproto::scc_info_Controller_ScoringPoint.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:webrtc.audio_network_adaptor.config.Controller.ScoringPoint)
}
Controller_ScoringPoint::Controller_ScoringPoint(const Controller_ScoringPoint& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&uplink_bandwidth_bps_, &from.uplink_bandwidth_bps_,
    static_cast<size_t>(reinterpret_cast<char*>(&uplink_packet_loss_fraction_) -
    reinterpret_cast<char*>(&uplink_bandwidth_bps_)) + sizeof(uplink_packet_loss_fraction_));
  // @@protoc_insertion_point(copy_constructor:webrtc.audio_network_adaptor.config.Controller.ScoringPoint)
}

void Controller_ScoringPoint::SharedCtor() {
  ::memset(&uplink_bandwidth_bps_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uplink_packet_loss_fraction_) -
      reinterpret_cast<char*>(&uplink_bandwidth_bps_)) + sizeof(uplink_packet_loss_fraction_));
}

Controller_ScoringPoint::~Controller_ScoringPoint() {
  // @@protoc_insertion_point(destructor:webrtc.audio_network_adaptor.config.Controller.ScoringPoint)
  SharedDtor();
}

void Controller_ScoringPoint::SharedDtor() {
}

void Controller_ScoringPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Controller_ScoringPoint& Controller_ScoringPoint::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_config_2eproto::scc_info_Controller_ScoringPoint.base);
  return *internal_default_instance();
}


void Controller_ScoringPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.audio_network_adaptor.config.Controller.ScoringPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&uplink_bandwidth_bps_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&uplink_packet_loss_fraction_) -
        reinterpret_cast<char*>(&uplink_bandwidth_bps_)) + sizeof(uplink_packet_loss_fraction_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Controller_ScoringPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:webrtc.audio_network_adaptor.config.Controller.ScoringPoint)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 uplink_bandwidth_bps = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_uplink_bandwidth_bps();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uplink_bandwidth_bps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float uplink_packet_loss_fraction = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_uplink_packet_loss_fraction();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &uplink_packet_loss_fraction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:webrtc.audio_network_adaptor.config.Controller.ScoringPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:webrtc.audio_network_adaptor.config.Controller.ScoringPoint)
  return false;
#undef DO_
}

void Controller_ScoringPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:webrtc.audio_network_adaptor.config.Controller.ScoringPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 uplink_bandwidth_bps = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uplink_bandwidth_bps(), output);
  }

  // optional float uplink_packet_loss_fraction = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->uplink_packet_loss_fraction(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:webrtc.audio_network_adaptor.config.Controller.ScoringPoint)
}

size_t Controller_ScoringPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.audio_network_adaptor.config.Controller.ScoringPoint)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 uplink_bandwidth_bps = 1;
    if (has_uplink_bandwidth_bps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uplink_bandwidth_bps());
    }

    // optional float uplink_packet_loss_fraction = 2;
    if (has_uplink_packet_loss_fraction()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Controller_ScoringPoint::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Controller_ScoringPoint*>(&from));
}

void Controller_ScoringPoint::MergeFrom(const Controller_ScoringPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.audio_network_adaptor.config.Controller.ScoringPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      uplink_bandwidth_bps_ = from.uplink_bandwidth_bps_;
    }
    if (cached_has_bits & 0x00000002u) {
      uplink_packet_loss_fraction_ = from.uplink_packet_loss_fraction_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Controller_ScoringPoint::CopyFrom(const Controller_ScoringPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.audio_network_adaptor.config.Controller.ScoringPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Controller_ScoringPoint::IsInitialized() const {
  return true;
}

void Controller_ScoringPoint::Swap(Controller_ScoringPoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Controller_ScoringPoint::InternalSwap(Controller_ScoringPoint* other) {
  using std::swap;
  swap(uplink_bandwidth_bps_, other->uplink_bandwidth_bps_);
  swap(uplink_packet_loss_fraction_, other->uplink_packet_loss_fraction_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Controller_ScoringPoint::GetTypeName() const {
  return "webrtc.audio_network_adaptor.config.Controller.ScoringPoint";
}


// ===================================================================

void Controller::InitAsDefaultInstance() {
  ::webrtc::audio_network_adaptor::config::_Controller_default_instance_._instance.get_mutable()->scoring_point_ = const_cast< ::webrtc::audio_network_adaptor::config::Controller_ScoringPoint*>(
      ::webrtc::audio_network_adaptor::config::Controller_ScoringPoint::internal_default_instance());
}
void Controller::set_allocated_fec_controller(::webrtc::audio_network_adaptor::config::FecController* fec_controller) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_controller();
  if (fec_controller) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      fec_controller = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, fec_controller, submessage_arena);
    }
    set_has_fec_controller();
    controller_.fec_controller_ = fec_controller;
  }
  // @@protoc_insertion_point(field_set_allocated:webrtc.audio_network_adaptor.config.Controller.fec_controller)
}
void Controller::set_allocated_frame_length_controller(::webrtc::audio_network_adaptor::config::FrameLengthController* frame_length_controller) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_controller();
  if (frame_length_controller) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      frame_length_controller = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, frame_length_controller, submessage_arena);
    }
    set_has_frame_length_controller();
    controller_.frame_length_controller_ = frame_length_controller;
  }
  // @@protoc_insertion_point(field_set_allocated:webrtc.audio_network_adaptor.config.Controller.frame_length_controller)
}
void Controller::set_allocated_channel_controller(::webrtc::audio_network_adaptor::config::ChannelController* channel_controller) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_controller();
  if (channel_controller) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      channel_controller = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, channel_controller, submessage_arena);
    }
    set_has_channel_controller();
    controller_.channel_controller_ = channel_controller;
  }
  // @@protoc_insertion_point(field_set_allocated:webrtc.audio_network_adaptor.config.Controller.channel_controller)
}
void Controller::set_allocated_dtx_controller(::webrtc::audio_network_adaptor::config::DtxController* dtx_controller) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_controller();
  if (dtx_controller) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      dtx_controller = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dtx_controller, submessage_arena);
    }
    set_has_dtx_controller();
    controller_.dtx_controller_ = dtx_controller;
  }
  // @@protoc_insertion_point(field_set_allocated:webrtc.audio_network_adaptor.config.Controller.dtx_controller)
}
void Controller::set_allocated_bitrate_controller(::webrtc::audio_network_adaptor::config::BitrateController* bitrate_controller) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_controller();
  if (bitrate_controller) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      bitrate_controller = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, bitrate_controller, submessage_arena);
    }
    set_has_bitrate_controller();
    controller_.bitrate_controller_ = bitrate_controller;
  }
  // @@protoc_insertion_point(field_set_allocated:webrtc.audio_network_adaptor.config.Controller.bitrate_controller)
}
void Controller::set_allocated_fec_controller_rplr_based(::webrtc::audio_network_adaptor::config::FecControllerRplrBased* fec_controller_rplr_based) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_controller();
  if (fec_controller_rplr_based) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      fec_controller_rplr_based = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, fec_controller_rplr_based, submessage_arena);
    }
    set_has_fec_controller_rplr_based();
    controller_.fec_controller_rplr_based_ = fec_controller_rplr_based;
  }
  // @@protoc_insertion_point(field_set_allocated:webrtc.audio_network_adaptor.config.Controller.fec_controller_rplr_based)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Controller::kScoringPointFieldNumber;
const int Controller::kFecControllerFieldNumber;
const int Controller::kFrameLengthControllerFieldNumber;
const int Controller::kChannelControllerFieldNumber;
const int Controller::kDtxControllerFieldNumber;
const int Controller::kBitrateControllerFieldNumber;
const int Controller::kFecControllerRplrBasedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Controller::Controller()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_config_2eproto::scc_info_Controller.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:webrtc.audio_network_adaptor.config.Controller)
}
Controller::Controller(const Controller& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_scoring_point()) {
    scoring_point_ = new ::webrtc::audio_network_adaptor::config::Controller_ScoringPoint(*from.scoring_point_);
  } else {
    scoring_point_ = NULL;
  }
  clear_has_controller();
  switch (from.controller_case()) {
    case kFecController: {
      mutable_fec_controller()->::webrtc::audio_network_adaptor::config::FecController::MergeFrom(from.fec_controller());
      break;
    }
    case kFrameLengthController: {
      mutable_frame_length_controller()->::webrtc::audio_network_adaptor::config::FrameLengthController::MergeFrom(from.frame_length_controller());
      break;
    }
    case kChannelController: {
      mutable_channel_controller()->::webrtc::audio_network_adaptor::config::ChannelController::MergeFrom(from.channel_controller());
      break;
    }
    case kDtxController: {
      mutable_dtx_controller()->::webrtc::audio_network_adaptor::config::DtxController::MergeFrom(from.dtx_controller());
      break;
    }
    case kBitrateController: {
      mutable_bitrate_controller()->::webrtc::audio_network_adaptor::config::BitrateController::MergeFrom(from.bitrate_controller());
      break;
    }
    case kFecControllerRplrBased: {
      mutable_fec_controller_rplr_based()->::webrtc::audio_network_adaptor::config::FecControllerRplrBased::MergeFrom(from.fec_controller_rplr_based());
      break;
    }
    case CONTROLLER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:webrtc.audio_network_adaptor.config.Controller)
}

void Controller::SharedCtor() {
  scoring_point_ = NULL;
  clear_has_controller();
}

Controller::~Controller() {
  // @@protoc_insertion_point(destructor:webrtc.audio_network_adaptor.config.Controller)
  SharedDtor();
}

void Controller::SharedDtor() {
  if (this != internal_default_instance()) delete scoring_point_;
  if (has_controller()) {
    clear_controller();
  }
}

void Controller::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Controller& Controller::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_config_2eproto::scc_info_Controller.base);
  return *internal_default_instance();
}


void Controller::clear_controller() {
// @@protoc_insertion_point(one_of_clear_start:webrtc.audio_network_adaptor.config.Controller)
  switch (controller_case()) {
    case kFecController: {
      delete controller_.fec_controller_;
      break;
    }
    case kFrameLengthController: {
      delete controller_.frame_length_controller_;
      break;
    }
    case kChannelController: {
      delete controller_.channel_controller_;
      break;
    }
    case kDtxController: {
      delete controller_.dtx_controller_;
      break;
    }
    case kBitrateController: {
      delete controller_.bitrate_controller_;
      break;
    }
    case kFecControllerRplrBased: {
      delete controller_.fec_controller_rplr_based_;
      break;
    }
    case CONTROLLER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CONTROLLER_NOT_SET;
}


void Controller::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.audio_network_adaptor.config.Controller)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(scoring_point_ != NULL);
    scoring_point_->Clear();
  }
  clear_controller();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Controller::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:webrtc.audio_network_adaptor.config.Controller)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .webrtc.audio_network_adaptor.config.Controller.ScoringPoint scoring_point = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_scoring_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .webrtc.audio_network_adaptor.config.FecController fec_controller = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_fec_controller()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .webrtc.audio_network_adaptor.config.FrameLengthController frame_length_controller = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_frame_length_controller()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .webrtc.audio_network_adaptor.config.ChannelController channel_controller = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 186 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_channel_controller()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .webrtc.audio_network_adaptor.config.DtxController dtx_controller = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 194 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dtx_controller()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .webrtc.audio_network_adaptor.config.BitrateController bitrate_controller = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u /* 202 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_bitrate_controller()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .webrtc.audio_network_adaptor.config.FecControllerRplrBased fec_controller_rplr_based = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u /* 210 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_fec_controller_rplr_based()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:webrtc.audio_network_adaptor.config.Controller)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:webrtc.audio_network_adaptor.config.Controller)
  return false;
#undef DO_
}

void Controller::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:webrtc.audio_network_adaptor.config.Controller)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .webrtc.audio_network_adaptor.config.Controller.ScoringPoint scoring_point = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_scoring_point(), output);
  }

  switch (controller_case()) {
    case kFecController:
      ::google::protobuf::internal::WireFormatLite::WriteMessage(
        21, this->_internal_fec_controller(), output);
      break;
    case kFrameLengthController:
      ::google::protobuf::internal::WireFormatLite::WriteMessage(
        22, this->_internal_frame_length_controller(), output);
      break;
    case kChannelController:
      ::google::protobuf::internal::WireFormatLite::WriteMessage(
        23, this->_internal_channel_controller(), output);
      break;
    case kDtxController:
      ::google::protobuf::internal::WireFormatLite::WriteMessage(
        24, this->_internal_dtx_controller(), output);
      break;
    case kBitrateController:
      ::google::protobuf::internal::WireFormatLite::WriteMessage(
        25, this->_internal_bitrate_controller(), output);
      break;
    case kFecControllerRplrBased:
      ::google::protobuf::internal::WireFormatLite::WriteMessage(
        26, this->_internal_fec_controller_rplr_based(), output);
      break;
    default: ;
  }
  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:webrtc.audio_network_adaptor.config.Controller)
}

size_t Controller::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.audio_network_adaptor.config.Controller)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // optional .webrtc.audio_network_adaptor.config.Controller.ScoringPoint scoring_point = 1;
  if (has_scoring_point()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *scoring_point_);
  }

  switch (controller_case()) {
    // optional .webrtc.audio_network_adaptor.config.FecController fec_controller = 21;
    case kFecController: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *controller_.fec_controller_);
      break;
    }
    // optional .webrtc.audio_network_adaptor.config.FrameLengthController frame_length_controller = 22;
    case kFrameLengthController: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *controller_.frame_length_controller_);
      break;
    }
    // optional .webrtc.audio_network_adaptor.config.ChannelController channel_controller = 23;
    case kChannelController: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *controller_.channel_controller_);
      break;
    }
    // optional .webrtc.audio_network_adaptor.config.DtxController dtx_controller = 24;
    case kDtxController: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *controller_.dtx_controller_);
      break;
    }
    // optional .webrtc.audio_network_adaptor.config.BitrateController bitrate_controller = 25;
    case kBitrateController: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *controller_.bitrate_controller_);
      break;
    }
    // optional .webrtc.audio_network_adaptor.config.FecControllerRplrBased fec_controller_rplr_based = 26;
    case kFecControllerRplrBased: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *controller_.fec_controller_rplr_based_);
      break;
    }
    case CONTROLLER_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Controller::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Controller*>(&from));
}

void Controller::MergeFrom(const Controller& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.audio_network_adaptor.config.Controller)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_scoring_point()) {
    mutable_scoring_point()->::webrtc::audio_network_adaptor::config::Controller_ScoringPoint::MergeFrom(from.scoring_point());
  }
  switch (from.controller_case()) {
    case kFecController: {
      mutable_fec_controller()->::webrtc::audio_network_adaptor::config::FecController::MergeFrom(from.fec_controller());
      break;
    }
    case kFrameLengthController: {
      mutable_frame_length_controller()->::webrtc::audio_network_adaptor::config::FrameLengthController::MergeFrom(from.frame_length_controller());
      break;
    }
    case kChannelController: {
      mutable_channel_controller()->::webrtc::audio_network_adaptor::config::ChannelController::MergeFrom(from.channel_controller());
      break;
    }
    case kDtxController: {
      mutable_dtx_controller()->::webrtc::audio_network_adaptor::config::DtxController::MergeFrom(from.dtx_controller());
      break;
    }
    case kBitrateController: {
      mutable_bitrate_controller()->::webrtc::audio_network_adaptor::config::BitrateController::MergeFrom(from.bitrate_controller());
      break;
    }
    case kFecControllerRplrBased: {
      mutable_fec_controller_rplr_based()->::webrtc::audio_network_adaptor::config::FecControllerRplrBased::MergeFrom(from.fec_controller_rplr_based());
      break;
    }
    case CONTROLLER_NOT_SET: {
      break;
    }
  }
}

void Controller::CopyFrom(const Controller& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.audio_network_adaptor.config.Controller)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Controller::IsInitialized() const {
  return true;
}

void Controller::Swap(Controller* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Controller::InternalSwap(Controller* other) {
  using std::swap;
  swap(scoring_point_, other->scoring_point_);
  swap(controller_, other->controller_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Controller::GetTypeName() const {
  return "webrtc.audio_network_adaptor.config.Controller";
}


// ===================================================================

void ControllerManager::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ControllerManager::kControllersFieldNumber;
const int ControllerManager::kMinReorderingTimeMsFieldNumber;
const int ControllerManager::kMinReorderingSquaredDistanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ControllerManager::ControllerManager()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_config_2eproto::scc_info_ControllerManager.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:webrtc.audio_network_adaptor.config.ControllerManager)
}
ControllerManager::ControllerManager(const ControllerManager& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      controllers_(from.controllers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&min_reordering_time_ms_, &from.min_reordering_time_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&min_reordering_squared_distance_) -
    reinterpret_cast<char*>(&min_reordering_time_ms_)) + sizeof(min_reordering_squared_distance_));
  // @@protoc_insertion_point(copy_constructor:webrtc.audio_network_adaptor.config.ControllerManager)
}

void ControllerManager::SharedCtor() {
  ::memset(&min_reordering_time_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&min_reordering_squared_distance_) -
      reinterpret_cast<char*>(&min_reordering_time_ms_)) + sizeof(min_reordering_squared_distance_));
}

ControllerManager::~ControllerManager() {
  // @@protoc_insertion_point(destructor:webrtc.audio_network_adaptor.config.ControllerManager)
  SharedDtor();
}

void ControllerManager::SharedDtor() {
}

void ControllerManager::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ControllerManager& ControllerManager::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_config_2eproto::scc_info_ControllerManager.base);
  return *internal_default_instance();
}


void ControllerManager::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.audio_network_adaptor.config.ControllerManager)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  controllers_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&min_reordering_time_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&min_reordering_squared_distance_) -
        reinterpret_cast<char*>(&min_reordering_time_ms_)) + sizeof(min_reordering_squared_distance_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ControllerManager::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:webrtc.audio_network_adaptor.config.ControllerManager)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .webrtc.audio_network_adaptor.config.Controller controllers = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_controllers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 min_reordering_time_ms = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_min_reordering_time_ms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_reordering_time_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float min_reordering_squared_distance = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_min_reordering_squared_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_reordering_squared_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:webrtc.audio_network_adaptor.config.ControllerManager)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:webrtc.audio_network_adaptor.config.ControllerManager)
  return false;
#undef DO_
}

void ControllerManager::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:webrtc.audio_network_adaptor.config.ControllerManager)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .webrtc.audio_network_adaptor.config.Controller controllers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->controllers_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1,
      this->controllers(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 min_reordering_time_ms = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->min_reordering_time_ms(), output);
  }

  // optional float min_reordering_squared_distance = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->min_reordering_squared_distance(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:webrtc.audio_network_adaptor.config.ControllerManager)
}

size_t ControllerManager::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.audio_network_adaptor.config.ControllerManager)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // repeated .webrtc.audio_network_adaptor.config.Controller controllers = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->controllers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->controllers(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 min_reordering_time_ms = 2;
    if (has_min_reordering_time_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min_reordering_time_ms());
    }

    // optional float min_reordering_squared_distance = 3;
    if (has_min_reordering_squared_distance()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ControllerManager::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ControllerManager*>(&from));
}

void ControllerManager::MergeFrom(const ControllerManager& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.audio_network_adaptor.config.ControllerManager)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  controllers_.MergeFrom(from.controllers_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      min_reordering_time_ms_ = from.min_reordering_time_ms_;
    }
    if (cached_has_bits & 0x00000002u) {
      min_reordering_squared_distance_ = from.min_reordering_squared_distance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ControllerManager::CopyFrom(const ControllerManager& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.audio_network_adaptor.config.ControllerManager)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControllerManager::IsInitialized() const {
  return true;
}

void ControllerManager::Swap(ControllerManager* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ControllerManager::InternalSwap(ControllerManager* other) {
  using std::swap;
  CastToBase(&controllers_)->InternalSwap(CastToBase(&other->controllers_));
  swap(min_reordering_time_ms_, other->min_reordering_time_ms_);
  swap(min_reordering_squared_distance_, other->min_reordering_squared_distance_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string ControllerManager::GetTypeName() const {
  return "webrtc.audio_network_adaptor.config.ControllerManager";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace config
}  // namespace audio_network_adaptor
}  // namespace webrtc
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::webrtc::audio_network_adaptor::config::FecController_Threshold* Arena::CreateMaybeMessage< ::webrtc::audio_network_adaptor::config::FecController_Threshold >(Arena* arena) {
  return Arena::CreateInternal< ::webrtc::audio_network_adaptor::config::FecController_Threshold >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::webrtc::audio_network_adaptor::config::FecController* Arena::CreateMaybeMessage< ::webrtc::audio_network_adaptor::config::FecController >(Arena* arena) {
  return Arena::CreateInternal< ::webrtc::audio_network_adaptor::config::FecController >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::webrtc::audio_network_adaptor::config::FecControllerRplrBased_Threshold* Arena::CreateMaybeMessage< ::webrtc::audio_network_adaptor::config::FecControllerRplrBased_Threshold >(Arena* arena) {
  return Arena::CreateInternal< ::webrtc::audio_network_adaptor::config::FecControllerRplrBased_Threshold >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::webrtc::audio_network_adaptor::config::FecControllerRplrBased* Arena::CreateMaybeMessage< ::webrtc::audio_network_adaptor::config::FecControllerRplrBased >(Arena* arena) {
  return Arena::CreateInternal< ::webrtc::audio_network_adaptor::config::FecControllerRplrBased >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::webrtc::audio_network_adaptor::config::FrameLengthController* Arena::CreateMaybeMessage< ::webrtc::audio_network_adaptor::config::FrameLengthController >(Arena* arena) {
  return Arena::CreateInternal< ::webrtc::audio_network_adaptor::config::FrameLengthController >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::webrtc::audio_network_adaptor::config::ChannelController* Arena::CreateMaybeMessage< ::webrtc::audio_network_adaptor::config::ChannelController >(Arena* arena) {
  return Arena::CreateInternal< ::webrtc::audio_network_adaptor::config::ChannelController >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::webrtc::audio_network_adaptor::config::DtxController* Arena::CreateMaybeMessage< ::webrtc::audio_network_adaptor::config::DtxController >(Arena* arena) {
  return Arena::CreateInternal< ::webrtc::audio_network_adaptor::config::DtxController >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::webrtc::audio_network_adaptor::config::BitrateController* Arena::CreateMaybeMessage< ::webrtc::audio_network_adaptor::config::BitrateController >(Arena* arena) {
  return Arena::CreateInternal< ::webrtc::audio_network_adaptor::config::BitrateController >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::webrtc::audio_network_adaptor::config::Controller_ScoringPoint* Arena::CreateMaybeMessage< ::webrtc::audio_network_adaptor::config::Controller_ScoringPoint >(Arena* arena) {
  return Arena::CreateInternal< ::webrtc::audio_network_adaptor::config::Controller_ScoringPoint >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::webrtc::audio_network_adaptor::config::Controller* Arena::CreateMaybeMessage< ::webrtc::audio_network_adaptor::config::Controller >(Arena* arena) {
  return Arena::CreateInternal< ::webrtc::audio_network_adaptor::config::Controller >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::webrtc::audio_network_adaptor::config::ControllerManager* Arena::CreateMaybeMessage< ::webrtc::audio_network_adaptor::config::ControllerManager >(Arena* arena) {
  return Arena::CreateInternal< ::webrtc::audio_network_adaptor::config::ControllerManager >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
