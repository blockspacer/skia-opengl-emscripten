// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: crx3.proto

#include "crx3.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_crx3_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_crx3_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_AsymmetricKeyProof;
}  // namespace protobuf_crx3_2eproto
namespace crx_file {
class CrxFileHeaderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CrxFileHeader>
      _instance;
} _CrxFileHeader_default_instance_;
class AsymmetricKeyProofDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AsymmetricKeyProof>
      _instance;
} _AsymmetricKeyProof_default_instance_;
class SignedDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SignedData>
      _instance;
} _SignedData_default_instance_;
}  // namespace crx_file
namespace protobuf_crx3_2eproto {
static void InitDefaultsCrxFileHeader() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::crx_file::_CrxFileHeader_default_instance_;
    new (ptr) ::crx_file::CrxFileHeader();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::crx_file::CrxFileHeader::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CrxFileHeader =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCrxFileHeader}, {
      &protobuf_crx3_2eproto::scc_info_AsymmetricKeyProof.base,}};

static void InitDefaultsAsymmetricKeyProof() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::crx_file::_AsymmetricKeyProof_default_instance_;
    new (ptr) ::crx_file::AsymmetricKeyProof();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::crx_file::AsymmetricKeyProof::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AsymmetricKeyProof =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAsymmetricKeyProof}, {}};

static void InitDefaultsSignedData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::crx_file::_SignedData_default_instance_;
    new (ptr) ::crx_file::SignedData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::crx_file::SignedData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SignedData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSignedData}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_CrxFileHeader.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AsymmetricKeyProof.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SignedData.base);
}

}  // namespace protobuf_crx3_2eproto
namespace crx_file {

// ===================================================================

void CrxFileHeader::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CrxFileHeader::kSha256WithRsaFieldNumber;
const int CrxFileHeader::kSha256WithEcdsaFieldNumber;
const int CrxFileHeader::kSignedHeaderDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CrxFileHeader::CrxFileHeader()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_crx3_2eproto::scc_info_CrxFileHeader.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:crx_file.CrxFileHeader)
}
CrxFileHeader::CrxFileHeader(const CrxFileHeader& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      sha256_with_rsa_(from.sha256_with_rsa_),
      sha256_with_ecdsa_(from.sha256_with_ecdsa_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  signed_header_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_signed_header_data()) {
    signed_header_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signed_header_data_);
  }
  // @@protoc_insertion_point(copy_constructor:crx_file.CrxFileHeader)
}

void CrxFileHeader::SharedCtor() {
  signed_header_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CrxFileHeader::~CrxFileHeader() {
  // @@protoc_insertion_point(destructor:crx_file.CrxFileHeader)
  SharedDtor();
}

void CrxFileHeader::SharedDtor() {
  signed_header_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CrxFileHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CrxFileHeader& CrxFileHeader::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_crx3_2eproto::scc_info_CrxFileHeader.base);
  return *internal_default_instance();
}


void CrxFileHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:crx_file.CrxFileHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sha256_with_rsa_.Clear();
  sha256_with_ecdsa_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    signed_header_data_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CrxFileHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:crx_file.CrxFileHeader)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(80005u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .crx_file.AsymmetricKeyProof sha256_with_rsa = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_sha256_with_rsa()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .crx_file.AsymmetricKeyProof sha256_with_ecdsa = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_sha256_with_ecdsa()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes signed_header_data = 10000;
      case 10000: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 80002 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_signed_header_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:crx_file.CrxFileHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:crx_file.CrxFileHeader)
  return false;
#undef DO_
}

void CrxFileHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:crx_file.CrxFileHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .crx_file.AsymmetricKeyProof sha256_with_rsa = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sha256_with_rsa_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2,
      this->sha256_with_rsa(static_cast<int>(i)),
      output);
  }

  // repeated .crx_file.AsymmetricKeyProof sha256_with_ecdsa = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sha256_with_ecdsa_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3,
      this->sha256_with_ecdsa(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional bytes signed_header_data = 10000;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      10000, this->signed_header_data(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:crx_file.CrxFileHeader)
}

size_t CrxFileHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:crx_file.CrxFileHeader)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // repeated .crx_file.AsymmetricKeyProof sha256_with_rsa = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->sha256_with_rsa_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->sha256_with_rsa(static_cast<int>(i)));
    }
  }

  // repeated .crx_file.AsymmetricKeyProof sha256_with_ecdsa = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->sha256_with_ecdsa_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->sha256_with_ecdsa(static_cast<int>(i)));
    }
  }

  // optional bytes signed_header_data = 10000;
  if (has_signed_header_data()) {
    total_size += 3 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->signed_header_data());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CrxFileHeader::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CrxFileHeader*>(&from));
}

void CrxFileHeader::MergeFrom(const CrxFileHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:crx_file.CrxFileHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sha256_with_rsa_.MergeFrom(from.sha256_with_rsa_);
  sha256_with_ecdsa_.MergeFrom(from.sha256_with_ecdsa_);
  if (from.has_signed_header_data()) {
    set_has_signed_header_data();
    signed_header_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signed_header_data_);
  }
}

void CrxFileHeader::CopyFrom(const CrxFileHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:crx_file.CrxFileHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CrxFileHeader::IsInitialized() const {
  return true;
}

void CrxFileHeader::Swap(CrxFileHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CrxFileHeader::InternalSwap(CrxFileHeader* other) {
  using std::swap;
  CastToBase(&sha256_with_rsa_)->InternalSwap(CastToBase(&other->sha256_with_rsa_));
  CastToBase(&sha256_with_ecdsa_)->InternalSwap(CastToBase(&other->sha256_with_ecdsa_));
  signed_header_data_.Swap(&other->signed_header_data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string CrxFileHeader::GetTypeName() const {
  return "crx_file.CrxFileHeader";
}


// ===================================================================

void AsymmetricKeyProof::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AsymmetricKeyProof::kPublicKeyFieldNumber;
const int AsymmetricKeyProof::kSignatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AsymmetricKeyProof::AsymmetricKeyProof()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_crx3_2eproto::scc_info_AsymmetricKeyProof.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:crx_file.AsymmetricKeyProof)
}
AsymmetricKeyProof::AsymmetricKeyProof(const AsymmetricKeyProof& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  public_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_public_key()) {
    public_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.public_key_);
  }
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_signature()) {
    signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  // @@protoc_insertion_point(copy_constructor:crx_file.AsymmetricKeyProof)
}

void AsymmetricKeyProof::SharedCtor() {
  public_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

AsymmetricKeyProof::~AsymmetricKeyProof() {
  // @@protoc_insertion_point(destructor:crx_file.AsymmetricKeyProof)
  SharedDtor();
}

void AsymmetricKeyProof::SharedDtor() {
  public_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AsymmetricKeyProof::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AsymmetricKeyProof& AsymmetricKeyProof::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_crx3_2eproto::scc_info_AsymmetricKeyProof.base);
  return *internal_default_instance();
}


void AsymmetricKeyProof::Clear() {
// @@protoc_insertion_point(message_clear_start:crx_file.AsymmetricKeyProof)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      public_key_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      signature_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AsymmetricKeyProof::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:crx_file.AsymmetricKeyProof)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes public_key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_public_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes signature = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_signature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:crx_file.AsymmetricKeyProof)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:crx_file.AsymmetricKeyProof)
  return false;
#undef DO_
}

void AsymmetricKeyProof::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:crx_file.AsymmetricKeyProof)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes public_key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->public_key(), output);
  }

  // optional bytes signature = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->signature(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:crx_file.AsymmetricKeyProof)
}

size_t AsymmetricKeyProof::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:crx_file.AsymmetricKeyProof)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes public_key = 1;
    if (has_public_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->public_key());
    }

    // optional bytes signature = 2;
    if (has_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->signature());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AsymmetricKeyProof::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AsymmetricKeyProof*>(&from));
}

void AsymmetricKeyProof::MergeFrom(const AsymmetricKeyProof& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:crx_file.AsymmetricKeyProof)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_public_key();
      public_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.public_key_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_signature();
      signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
    }
  }
}

void AsymmetricKeyProof::CopyFrom(const AsymmetricKeyProof& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:crx_file.AsymmetricKeyProof)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AsymmetricKeyProof::IsInitialized() const {
  return true;
}

void AsymmetricKeyProof::Swap(AsymmetricKeyProof* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AsymmetricKeyProof::InternalSwap(AsymmetricKeyProof* other) {
  using std::swap;
  public_key_.Swap(&other->public_key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  signature_.Swap(&other->signature_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string AsymmetricKeyProof::GetTypeName() const {
  return "crx_file.AsymmetricKeyProof";
}


// ===================================================================

void SignedData::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SignedData::kCrxIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SignedData::SignedData()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_crx3_2eproto::scc_info_SignedData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:crx_file.SignedData)
}
SignedData::SignedData(const SignedData& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  crx_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_crx_id()) {
    crx_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.crx_id_);
  }
  // @@protoc_insertion_point(copy_constructor:crx_file.SignedData)
}

void SignedData::SharedCtor() {
  crx_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SignedData::~SignedData() {
  // @@protoc_insertion_point(destructor:crx_file.SignedData)
  SharedDtor();
}

void SignedData::SharedDtor() {
  crx_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SignedData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SignedData& SignedData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_crx3_2eproto::scc_info_SignedData.base);
  return *internal_default_instance();
}


void SignedData::Clear() {
// @@protoc_insertion_point(message_clear_start:crx_file.SignedData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    crx_id_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SignedData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:crx_file.SignedData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes crx_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_crx_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:crx_file.SignedData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:crx_file.SignedData)
  return false;
#undef DO_
}

void SignedData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:crx_file.SignedData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes crx_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->crx_id(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:crx_file.SignedData)
}

size_t SignedData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:crx_file.SignedData)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // optional bytes crx_id = 1;
  if (has_crx_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->crx_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SignedData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SignedData*>(&from));
}

void SignedData::MergeFrom(const SignedData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:crx_file.SignedData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_crx_id()) {
    set_has_crx_id();
    crx_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.crx_id_);
  }
}

void SignedData::CopyFrom(const SignedData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:crx_file.SignedData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignedData::IsInitialized() const {
  return true;
}

void SignedData::Swap(SignedData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SignedData::InternalSwap(SignedData* other) {
  using std::swap;
  crx_id_.Swap(&other->crx_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string SignedData::GetTypeName() const {
  return "crx_file.SignedData";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace crx_file
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::crx_file::CrxFileHeader* Arena::CreateMaybeMessage< ::crx_file::CrxFileHeader >(Arena* arena) {
  return Arena::CreateInternal< ::crx_file::CrxFileHeader >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::crx_file::AsymmetricKeyProof* Arena::CreateMaybeMessage< ::crx_file::AsymmetricKeyProof >(Arena* arena) {
  return Arena::CreateInternal< ::crx_file::AsymmetricKeyProof >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::crx_file::SignedData* Arena::CreateMaybeMessage< ::crx_file::SignedData >(Arena* arena) {
  return Arena::CreateInternal< ::crx_file::SignedData >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
