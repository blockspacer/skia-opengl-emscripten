// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: crx3.proto

#ifndef PROTOBUF_INCLUDED_crx3_2eproto
#define PROTOBUF_INCLUDED_crx3_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_crx3_2eproto 

namespace protobuf_crx3_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
}  // namespace protobuf_crx3_2eproto
namespace crx_file {
class AsymmetricKeyProof;
class AsymmetricKeyProofDefaultTypeInternal;
extern AsymmetricKeyProofDefaultTypeInternal _AsymmetricKeyProof_default_instance_;
class CrxFileHeader;
class CrxFileHeaderDefaultTypeInternal;
extern CrxFileHeaderDefaultTypeInternal _CrxFileHeader_default_instance_;
class SignedData;
class SignedDataDefaultTypeInternal;
extern SignedDataDefaultTypeInternal _SignedData_default_instance_;
}  // namespace crx_file
namespace google {
namespace protobuf {
template<> ::crx_file::AsymmetricKeyProof* Arena::CreateMaybeMessage<::crx_file::AsymmetricKeyProof>(Arena*);
template<> ::crx_file::CrxFileHeader* Arena::CreateMaybeMessage<::crx_file::CrxFileHeader>(Arena*);
template<> ::crx_file::SignedData* Arena::CreateMaybeMessage<::crx_file::SignedData>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace crx_file {

// ===================================================================

class CrxFileHeader : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:crx_file.CrxFileHeader) */ {
 public:
  CrxFileHeader();
  virtual ~CrxFileHeader();

  CrxFileHeader(const CrxFileHeader& from);

  inline CrxFileHeader& operator=(const CrxFileHeader& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CrxFileHeader(CrxFileHeader&& from) noexcept
    : CrxFileHeader() {
    *this = ::std::move(from);
  }

  inline CrxFileHeader& operator=(CrxFileHeader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const CrxFileHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CrxFileHeader* internal_default_instance() {
    return reinterpret_cast<const CrxFileHeader*>(
               &_CrxFileHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(CrxFileHeader* other);
  friend void swap(CrxFileHeader& a, CrxFileHeader& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CrxFileHeader* New() const final {
    return CreateMaybeMessage<CrxFileHeader>(NULL);
  }

  CrxFileHeader* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CrxFileHeader>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const CrxFileHeader& from);
  void MergeFrom(const CrxFileHeader& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CrxFileHeader* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .crx_file.AsymmetricKeyProof sha256_with_rsa = 2;
  int sha256_with_rsa_size() const;
  void clear_sha256_with_rsa();
  static const int kSha256WithRsaFieldNumber = 2;
  ::crx_file::AsymmetricKeyProof* mutable_sha256_with_rsa(int index);
  ::google::protobuf::RepeatedPtrField< ::crx_file::AsymmetricKeyProof >*
      mutable_sha256_with_rsa();
  const ::crx_file::AsymmetricKeyProof& sha256_with_rsa(int index) const;
  ::crx_file::AsymmetricKeyProof* add_sha256_with_rsa();
  const ::google::protobuf::RepeatedPtrField< ::crx_file::AsymmetricKeyProof >&
      sha256_with_rsa() const;

  // repeated .crx_file.AsymmetricKeyProof sha256_with_ecdsa = 3;
  int sha256_with_ecdsa_size() const;
  void clear_sha256_with_ecdsa();
  static const int kSha256WithEcdsaFieldNumber = 3;
  ::crx_file::AsymmetricKeyProof* mutable_sha256_with_ecdsa(int index);
  ::google::protobuf::RepeatedPtrField< ::crx_file::AsymmetricKeyProof >*
      mutable_sha256_with_ecdsa();
  const ::crx_file::AsymmetricKeyProof& sha256_with_ecdsa(int index) const;
  ::crx_file::AsymmetricKeyProof* add_sha256_with_ecdsa();
  const ::google::protobuf::RepeatedPtrField< ::crx_file::AsymmetricKeyProof >&
      sha256_with_ecdsa() const;

  // optional bytes signed_header_data = 10000;
  bool has_signed_header_data() const;
  void clear_signed_header_data();
  static const int kSignedHeaderDataFieldNumber = 10000;
  const ::std::string& signed_header_data() const;
  void set_signed_header_data(const ::std::string& value);
  #if LANG_CXX11
  void set_signed_header_data(::std::string&& value);
  #endif
  void set_signed_header_data(const char* value);
  void set_signed_header_data(const void* value, size_t size);
  ::std::string* mutable_signed_header_data();
  ::std::string* release_signed_header_data();
  void set_allocated_signed_header_data(::std::string* signed_header_data);

  // @@protoc_insertion_point(class_scope:crx_file.CrxFileHeader)
 private:
  void set_has_signed_header_data();
  void clear_has_signed_header_data();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::crx_file::AsymmetricKeyProof > sha256_with_rsa_;
  ::google::protobuf::RepeatedPtrField< ::crx_file::AsymmetricKeyProof > sha256_with_ecdsa_;
  ::google::protobuf::internal::ArenaStringPtr signed_header_data_;
  friend struct ::protobuf_crx3_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AsymmetricKeyProof : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:crx_file.AsymmetricKeyProof) */ {
 public:
  AsymmetricKeyProof();
  virtual ~AsymmetricKeyProof();

  AsymmetricKeyProof(const AsymmetricKeyProof& from);

  inline AsymmetricKeyProof& operator=(const AsymmetricKeyProof& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AsymmetricKeyProof(AsymmetricKeyProof&& from) noexcept
    : AsymmetricKeyProof() {
    *this = ::std::move(from);
  }

  inline AsymmetricKeyProof& operator=(AsymmetricKeyProof&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const AsymmetricKeyProof& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AsymmetricKeyProof* internal_default_instance() {
    return reinterpret_cast<const AsymmetricKeyProof*>(
               &_AsymmetricKeyProof_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(AsymmetricKeyProof* other);
  friend void swap(AsymmetricKeyProof& a, AsymmetricKeyProof& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AsymmetricKeyProof* New() const final {
    return CreateMaybeMessage<AsymmetricKeyProof>(NULL);
  }

  AsymmetricKeyProof* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AsymmetricKeyProof>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const AsymmetricKeyProof& from);
  void MergeFrom(const AsymmetricKeyProof& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AsymmetricKeyProof* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes public_key = 1;
  bool has_public_key() const;
  void clear_public_key();
  static const int kPublicKeyFieldNumber = 1;
  const ::std::string& public_key() const;
  void set_public_key(const ::std::string& value);
  #if LANG_CXX11
  void set_public_key(::std::string&& value);
  #endif
  void set_public_key(const char* value);
  void set_public_key(const void* value, size_t size);
  ::std::string* mutable_public_key();
  ::std::string* release_public_key();
  void set_allocated_public_key(::std::string* public_key);

  // optional bytes signature = 2;
  bool has_signature() const;
  void clear_signature();
  static const int kSignatureFieldNumber = 2;
  const ::std::string& signature() const;
  void set_signature(const ::std::string& value);
  #if LANG_CXX11
  void set_signature(::std::string&& value);
  #endif
  void set_signature(const char* value);
  void set_signature(const void* value, size_t size);
  ::std::string* mutable_signature();
  ::std::string* release_signature();
  void set_allocated_signature(::std::string* signature);

  // @@protoc_insertion_point(class_scope:crx_file.AsymmetricKeyProof)
 private:
  void set_has_public_key();
  void clear_has_public_key();
  void set_has_signature();
  void clear_has_signature();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr public_key_;
  ::google::protobuf::internal::ArenaStringPtr signature_;
  friend struct ::protobuf_crx3_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SignedData : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:crx_file.SignedData) */ {
 public:
  SignedData();
  virtual ~SignedData();

  SignedData(const SignedData& from);

  inline SignedData& operator=(const SignedData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SignedData(SignedData&& from) noexcept
    : SignedData() {
    *this = ::std::move(from);
  }

  inline SignedData& operator=(SignedData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SignedData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SignedData* internal_default_instance() {
    return reinterpret_cast<const SignedData*>(
               &_SignedData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(SignedData* other);
  friend void swap(SignedData& a, SignedData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SignedData* New() const final {
    return CreateMaybeMessage<SignedData>(NULL);
  }

  SignedData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SignedData>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const SignedData& from);
  void MergeFrom(const SignedData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SignedData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes crx_id = 1;
  bool has_crx_id() const;
  void clear_crx_id();
  static const int kCrxIdFieldNumber = 1;
  const ::std::string& crx_id() const;
  void set_crx_id(const ::std::string& value);
  #if LANG_CXX11
  void set_crx_id(::std::string&& value);
  #endif
  void set_crx_id(const char* value);
  void set_crx_id(const void* value, size_t size);
  ::std::string* mutable_crx_id();
  ::std::string* release_crx_id();
  void set_allocated_crx_id(::std::string* crx_id);

  // @@protoc_insertion_point(class_scope:crx_file.SignedData)
 private:
  void set_has_crx_id();
  void clear_has_crx_id();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr crx_id_;
  friend struct ::protobuf_crx3_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CrxFileHeader

// repeated .crx_file.AsymmetricKeyProof sha256_with_rsa = 2;
inline int CrxFileHeader::sha256_with_rsa_size() const {
  return sha256_with_rsa_.size();
}
inline void CrxFileHeader::clear_sha256_with_rsa() {
  sha256_with_rsa_.Clear();
}
inline ::crx_file::AsymmetricKeyProof* CrxFileHeader::mutable_sha256_with_rsa(int index) {
  // @@protoc_insertion_point(field_mutable:crx_file.CrxFileHeader.sha256_with_rsa)
  return sha256_with_rsa_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::crx_file::AsymmetricKeyProof >*
CrxFileHeader::mutable_sha256_with_rsa() {
  // @@protoc_insertion_point(field_mutable_list:crx_file.CrxFileHeader.sha256_with_rsa)
  return &sha256_with_rsa_;
}
inline const ::crx_file::AsymmetricKeyProof& CrxFileHeader::sha256_with_rsa(int index) const {
  // @@protoc_insertion_point(field_get:crx_file.CrxFileHeader.sha256_with_rsa)
  return sha256_with_rsa_.Get(index);
}
inline ::crx_file::AsymmetricKeyProof* CrxFileHeader::add_sha256_with_rsa() {
  // @@protoc_insertion_point(field_add:crx_file.CrxFileHeader.sha256_with_rsa)
  return sha256_with_rsa_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::crx_file::AsymmetricKeyProof >&
CrxFileHeader::sha256_with_rsa() const {
  // @@protoc_insertion_point(field_list:crx_file.CrxFileHeader.sha256_with_rsa)
  return sha256_with_rsa_;
}

// repeated .crx_file.AsymmetricKeyProof sha256_with_ecdsa = 3;
inline int CrxFileHeader::sha256_with_ecdsa_size() const {
  return sha256_with_ecdsa_.size();
}
inline void CrxFileHeader::clear_sha256_with_ecdsa() {
  sha256_with_ecdsa_.Clear();
}
inline ::crx_file::AsymmetricKeyProof* CrxFileHeader::mutable_sha256_with_ecdsa(int index) {
  // @@protoc_insertion_point(field_mutable:crx_file.CrxFileHeader.sha256_with_ecdsa)
  return sha256_with_ecdsa_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::crx_file::AsymmetricKeyProof >*
CrxFileHeader::mutable_sha256_with_ecdsa() {
  // @@protoc_insertion_point(field_mutable_list:crx_file.CrxFileHeader.sha256_with_ecdsa)
  return &sha256_with_ecdsa_;
}
inline const ::crx_file::AsymmetricKeyProof& CrxFileHeader::sha256_with_ecdsa(int index) const {
  // @@protoc_insertion_point(field_get:crx_file.CrxFileHeader.sha256_with_ecdsa)
  return sha256_with_ecdsa_.Get(index);
}
inline ::crx_file::AsymmetricKeyProof* CrxFileHeader::add_sha256_with_ecdsa() {
  // @@protoc_insertion_point(field_add:crx_file.CrxFileHeader.sha256_with_ecdsa)
  return sha256_with_ecdsa_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::crx_file::AsymmetricKeyProof >&
CrxFileHeader::sha256_with_ecdsa() const {
  // @@protoc_insertion_point(field_list:crx_file.CrxFileHeader.sha256_with_ecdsa)
  return sha256_with_ecdsa_;
}

// optional bytes signed_header_data = 10000;
inline bool CrxFileHeader::has_signed_header_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CrxFileHeader::set_has_signed_header_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CrxFileHeader::clear_has_signed_header_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CrxFileHeader::clear_signed_header_data() {
  signed_header_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_signed_header_data();
}
inline const ::std::string& CrxFileHeader::signed_header_data() const {
  // @@protoc_insertion_point(field_get:crx_file.CrxFileHeader.signed_header_data)
  return signed_header_data_.GetNoArena();
}
inline void CrxFileHeader::set_signed_header_data(const ::std::string& value) {
  set_has_signed_header_data();
  signed_header_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:crx_file.CrxFileHeader.signed_header_data)
}
#if LANG_CXX11
inline void CrxFileHeader::set_signed_header_data(::std::string&& value) {
  set_has_signed_header_data();
  signed_header_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:crx_file.CrxFileHeader.signed_header_data)
}
#endif
inline void CrxFileHeader::set_signed_header_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_signed_header_data();
  signed_header_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:crx_file.CrxFileHeader.signed_header_data)
}
inline void CrxFileHeader::set_signed_header_data(const void* value, size_t size) {
  set_has_signed_header_data();
  signed_header_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:crx_file.CrxFileHeader.signed_header_data)
}
inline ::std::string* CrxFileHeader::mutable_signed_header_data() {
  set_has_signed_header_data();
  // @@protoc_insertion_point(field_mutable:crx_file.CrxFileHeader.signed_header_data)
  return signed_header_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CrxFileHeader::release_signed_header_data() {
  // @@protoc_insertion_point(field_release:crx_file.CrxFileHeader.signed_header_data)
  if (!has_signed_header_data()) {
    return NULL;
  }
  clear_has_signed_header_data();
  return signed_header_data_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CrxFileHeader::set_allocated_signed_header_data(::std::string* signed_header_data) {
  if (signed_header_data != NULL) {
    set_has_signed_header_data();
  } else {
    clear_has_signed_header_data();
  }
  signed_header_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signed_header_data);
  // @@protoc_insertion_point(field_set_allocated:crx_file.CrxFileHeader.signed_header_data)
}

// -------------------------------------------------------------------

// AsymmetricKeyProof

// optional bytes public_key = 1;
inline bool AsymmetricKeyProof::has_public_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AsymmetricKeyProof::set_has_public_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AsymmetricKeyProof::clear_has_public_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AsymmetricKeyProof::clear_public_key() {
  public_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_public_key();
}
inline const ::std::string& AsymmetricKeyProof::public_key() const {
  // @@protoc_insertion_point(field_get:crx_file.AsymmetricKeyProof.public_key)
  return public_key_.GetNoArena();
}
inline void AsymmetricKeyProof::set_public_key(const ::std::string& value) {
  set_has_public_key();
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:crx_file.AsymmetricKeyProof.public_key)
}
#if LANG_CXX11
inline void AsymmetricKeyProof::set_public_key(::std::string&& value) {
  set_has_public_key();
  public_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:crx_file.AsymmetricKeyProof.public_key)
}
#endif
inline void AsymmetricKeyProof::set_public_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_public_key();
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:crx_file.AsymmetricKeyProof.public_key)
}
inline void AsymmetricKeyProof::set_public_key(const void* value, size_t size) {
  set_has_public_key();
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:crx_file.AsymmetricKeyProof.public_key)
}
inline ::std::string* AsymmetricKeyProof::mutable_public_key() {
  set_has_public_key();
  // @@protoc_insertion_point(field_mutable:crx_file.AsymmetricKeyProof.public_key)
  return public_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AsymmetricKeyProof::release_public_key() {
  // @@protoc_insertion_point(field_release:crx_file.AsymmetricKeyProof.public_key)
  if (!has_public_key()) {
    return NULL;
  }
  clear_has_public_key();
  return public_key_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AsymmetricKeyProof::set_allocated_public_key(::std::string* public_key) {
  if (public_key != NULL) {
    set_has_public_key();
  } else {
    clear_has_public_key();
  }
  public_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), public_key);
  // @@protoc_insertion_point(field_set_allocated:crx_file.AsymmetricKeyProof.public_key)
}

// optional bytes signature = 2;
inline bool AsymmetricKeyProof::has_signature() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AsymmetricKeyProof::set_has_signature() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AsymmetricKeyProof::clear_has_signature() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AsymmetricKeyProof::clear_signature() {
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_signature();
}
inline const ::std::string& AsymmetricKeyProof::signature() const {
  // @@protoc_insertion_point(field_get:crx_file.AsymmetricKeyProof.signature)
  return signature_.GetNoArena();
}
inline void AsymmetricKeyProof::set_signature(const ::std::string& value) {
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:crx_file.AsymmetricKeyProof.signature)
}
#if LANG_CXX11
inline void AsymmetricKeyProof::set_signature(::std::string&& value) {
  set_has_signature();
  signature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:crx_file.AsymmetricKeyProof.signature)
}
#endif
inline void AsymmetricKeyProof::set_signature(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:crx_file.AsymmetricKeyProof.signature)
}
inline void AsymmetricKeyProof::set_signature(const void* value, size_t size) {
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:crx_file.AsymmetricKeyProof.signature)
}
inline ::std::string* AsymmetricKeyProof::mutable_signature() {
  set_has_signature();
  // @@protoc_insertion_point(field_mutable:crx_file.AsymmetricKeyProof.signature)
  return signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AsymmetricKeyProof::release_signature() {
  // @@protoc_insertion_point(field_release:crx_file.AsymmetricKeyProof.signature)
  if (!has_signature()) {
    return NULL;
  }
  clear_has_signature();
  return signature_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AsymmetricKeyProof::set_allocated_signature(::std::string* signature) {
  if (signature != NULL) {
    set_has_signature();
  } else {
    clear_has_signature();
  }
  signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:crx_file.AsymmetricKeyProof.signature)
}

// -------------------------------------------------------------------

// SignedData

// optional bytes crx_id = 1;
inline bool SignedData::has_crx_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SignedData::set_has_crx_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SignedData::clear_has_crx_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SignedData::clear_crx_id() {
  crx_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_crx_id();
}
inline const ::std::string& SignedData::crx_id() const {
  // @@protoc_insertion_point(field_get:crx_file.SignedData.crx_id)
  return crx_id_.GetNoArena();
}
inline void SignedData::set_crx_id(const ::std::string& value) {
  set_has_crx_id();
  crx_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:crx_file.SignedData.crx_id)
}
#if LANG_CXX11
inline void SignedData::set_crx_id(::std::string&& value) {
  set_has_crx_id();
  crx_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:crx_file.SignedData.crx_id)
}
#endif
inline void SignedData::set_crx_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_crx_id();
  crx_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:crx_file.SignedData.crx_id)
}
inline void SignedData::set_crx_id(const void* value, size_t size) {
  set_has_crx_id();
  crx_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:crx_file.SignedData.crx_id)
}
inline ::std::string* SignedData::mutable_crx_id() {
  set_has_crx_id();
  // @@protoc_insertion_point(field_mutable:crx_file.SignedData.crx_id)
  return crx_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SignedData::release_crx_id() {
  // @@protoc_insertion_point(field_release:crx_file.SignedData.crx_id)
  if (!has_crx_id()) {
    return NULL;
  }
  clear_has_crx_id();
  return crx_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SignedData::set_allocated_crx_id(::std::string* crx_id) {
  if (crx_id != NULL) {
    set_has_crx_id();
  } else {
    clear_has_crx_id();
  }
  crx_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), crx_id);
  // @@protoc_insertion_point(field_set_allocated:crx_file.SignedData.crx_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace crx_file

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_crx3_2eproto
