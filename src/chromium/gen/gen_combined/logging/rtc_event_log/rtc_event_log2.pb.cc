// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rtc_event_log2.proto

#include "rtc_event_log2.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_rtc_5fevent_5flog2_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_rtc_5fevent_5flog2_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_AlrState;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_rtc_5fevent_5flog2_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_AudioNetworkAdaptations;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_rtc_5fevent_5flog2_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_AudioPlayoutEvents;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_rtc_5fevent_5flog2_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_BeginLogEvent;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_rtc_5fevent_5flog2_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_BweProbeCluster;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_rtc_5fevent_5flog2_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_BweProbeResultFailure;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_rtc_5fevent_5flog2_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_BweProbeResultSuccess;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_rtc_5fevent_5flog2_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_DelayBasedBweUpdates;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_rtc_5fevent_5flog2_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_DtlsTransportStateEvent;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_rtc_5fevent_5flog2_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_DtlsWritableState;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_rtc_5fevent_5flog2_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_EndLogEvent;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_rtc_5fevent_5flog2_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Event;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_rtc_5fevent_5flog2_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GenericAckReceived;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_rtc_5fevent_5flog2_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GenericPacketReceived;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_rtc_5fevent_5flog2_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GenericPacketSent;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_rtc_5fevent_5flog2_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_IceCandidatePairConfig;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_rtc_5fevent_5flog2_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_IceCandidatePairEvent;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_rtc_5fevent_5flog2_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_IncomingRtcpPackets;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_rtc_5fevent_5flog2_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_IncomingRtpPackets;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_rtc_5fevent_5flog2_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_LossBasedBweUpdates;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_rtc_5fevent_5flog2_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_OutgoingRtcpPackets;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_rtc_5fevent_5flog2_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_OutgoingRtpPackets;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_rtc_5fevent_5flog2_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RtpHeaderExtensionConfig;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_rtc_5fevent_5flog2_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_AudioRecvStreamConfig;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_rtc_5fevent_5flog2_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_AudioSendStreamConfig;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_rtc_5fevent_5flog2_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_VideoRecvStreamConfig;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_rtc_5fevent_5flog2_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_VideoSendStreamConfig;
}  // namespace protobuf_rtc_5fevent_5flog2_2eproto
namespace webrtc {
namespace rtclog2 {
class EventStreamDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EventStream>
      _instance;
} _EventStream_default_instance_;
class EventDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Event>
      _instance;
} _Event_default_instance_;
class GenericPacketReceivedDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GenericPacketReceived>
      _instance;
} _GenericPacketReceived_default_instance_;
class GenericPacketSentDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GenericPacketSent>
      _instance;
} _GenericPacketSent_default_instance_;
class GenericAckReceivedDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GenericAckReceived>
      _instance;
} _GenericAckReceived_default_instance_;
class IncomingRtpPacketsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IncomingRtpPackets>
      _instance;
} _IncomingRtpPackets_default_instance_;
class OutgoingRtpPacketsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OutgoingRtpPackets>
      _instance;
} _OutgoingRtpPackets_default_instance_;
class IncomingRtcpPacketsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IncomingRtcpPackets>
      _instance;
} _IncomingRtcpPackets_default_instance_;
class OutgoingRtcpPacketsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OutgoingRtcpPackets>
      _instance;
} _OutgoingRtcpPackets_default_instance_;
class AudioPlayoutEventsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AudioPlayoutEvents>
      _instance;
} _AudioPlayoutEvents_default_instance_;
class BeginLogEventDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BeginLogEvent>
      _instance;
} _BeginLogEvent_default_instance_;
class EndLogEventDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EndLogEvent>
      _instance;
} _EndLogEvent_default_instance_;
class LossBasedBweUpdatesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LossBasedBweUpdates>
      _instance;
} _LossBasedBweUpdates_default_instance_;
class DelayBasedBweUpdatesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DelayBasedBweUpdates>
      _instance;
} _DelayBasedBweUpdates_default_instance_;
class RtpHeaderExtensionConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RtpHeaderExtensionConfig>
      _instance;
} _RtpHeaderExtensionConfig_default_instance_;
class VideoRecvStreamConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VideoRecvStreamConfig>
      _instance;
} _VideoRecvStreamConfig_default_instance_;
class VideoSendStreamConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VideoSendStreamConfig>
      _instance;
} _VideoSendStreamConfig_default_instance_;
class AudioRecvStreamConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AudioRecvStreamConfig>
      _instance;
} _AudioRecvStreamConfig_default_instance_;
class AudioSendStreamConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AudioSendStreamConfig>
      _instance;
} _AudioSendStreamConfig_default_instance_;
class AudioNetworkAdaptationsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AudioNetworkAdaptations>
      _instance;
} _AudioNetworkAdaptations_default_instance_;
class BweProbeClusterDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BweProbeCluster>
      _instance;
} _BweProbeCluster_default_instance_;
class BweProbeResultSuccessDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BweProbeResultSuccess>
      _instance;
} _BweProbeResultSuccess_default_instance_;
class BweProbeResultFailureDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BweProbeResultFailure>
      _instance;
} _BweProbeResultFailure_default_instance_;
class AlrStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AlrState>
      _instance;
} _AlrState_default_instance_;
class IceCandidatePairConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IceCandidatePairConfig>
      _instance;
} _IceCandidatePairConfig_default_instance_;
class IceCandidatePairEventDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IceCandidatePairEvent>
      _instance;
} _IceCandidatePairEvent_default_instance_;
class DtlsTransportStateEventDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DtlsTransportStateEvent>
      _instance;
} _DtlsTransportStateEvent_default_instance_;
class DtlsWritableStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DtlsWritableState>
      _instance;
} _DtlsWritableState_default_instance_;
}  // namespace rtclog2
}  // namespace webrtc
namespace protobuf_rtc_5fevent_5flog2_2eproto {
static void InitDefaultsEventStream() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::webrtc::rtclog2::_EventStream_default_instance_;
    new (ptr) ::webrtc::rtclog2::EventStream();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::webrtc::rtclog2::EventStream::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<26> scc_info_EventStream =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 26, InitDefaultsEventStream}, {
      &protobuf_rtc_5fevent_5flog2_2eproto::scc_info_Event.base,
      &protobuf_rtc_5fevent_5flog2_2eproto::scc_info_IncomingRtpPackets.base,
      &protobuf_rtc_5fevent_5flog2_2eproto::scc_info_OutgoingRtpPackets.base,
      &protobuf_rtc_5fevent_5flog2_2eproto::scc_info_IncomingRtcpPackets.base,
      &protobuf_rtc_5fevent_5flog2_2eproto::scc_info_OutgoingRtcpPackets.base,
      &protobuf_rtc_5fevent_5flog2_2eproto::scc_info_AudioPlayoutEvents.base,
      &protobuf_rtc_5fevent_5flog2_2eproto::scc_info_BeginLogEvent.base,
      &protobuf_rtc_5fevent_5flog2_2eproto::scc_info_EndLogEvent.base,
      &protobuf_rtc_5fevent_5flog2_2eproto::scc_info_LossBasedBweUpdates.base,
      &protobuf_rtc_5fevent_5flog2_2eproto::scc_info_DelayBasedBweUpdates.base,
      &protobuf_rtc_5fevent_5flog2_2eproto::scc_info_AudioNetworkAdaptations.base,
      &protobuf_rtc_5fevent_5flog2_2eproto::scc_info_BweProbeCluster.base,
      &protobuf_rtc_5fevent_5flog2_2eproto::scc_info_BweProbeResultSuccess.base,
      &protobuf_rtc_5fevent_5flog2_2eproto::scc_info_BweProbeResultFailure.base,
      &protobuf_rtc_5fevent_5flog2_2eproto::scc_info_AlrState.base,
      &protobuf_rtc_5fevent_5flog2_2eproto::scc_info_IceCandidatePairConfig.base,
      &protobuf_rtc_5fevent_5flog2_2eproto::scc_info_IceCandidatePairEvent.base,
      &protobuf_rtc_5fevent_5flog2_2eproto::scc_info_DtlsTransportStateEvent.base,
      &protobuf_rtc_5fevent_5flog2_2eproto::scc_info_DtlsWritableState.base,
      &protobuf_rtc_5fevent_5flog2_2eproto::scc_info_GenericPacketSent.base,
      &protobuf_rtc_5fevent_5flog2_2eproto::scc_info_GenericPacketReceived.base,
      &protobuf_rtc_5fevent_5flog2_2eproto::scc_info_GenericAckReceived.base,
      &protobuf_rtc_5fevent_5flog2_2eproto::scc_info_AudioRecvStreamConfig.base,
      &protobuf_rtc_5fevent_5flog2_2eproto::scc_info_AudioSendStreamConfig.base,
      &protobuf_rtc_5fevent_5flog2_2eproto::scc_info_VideoRecvStreamConfig.base,
      &protobuf_rtc_5fevent_5flog2_2eproto::scc_info_VideoSendStreamConfig.base,}};

static void InitDefaultsEvent() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::webrtc::rtclog2::_Event_default_instance_;
    new (ptr) ::webrtc::rtclog2::Event();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::webrtc::rtclog2::Event::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Event =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEvent}, {}};

static void InitDefaultsGenericPacketReceived() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::webrtc::rtclog2::_GenericPacketReceived_default_instance_;
    new (ptr) ::webrtc::rtclog2::GenericPacketReceived();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::webrtc::rtclog2::GenericPacketReceived::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GenericPacketReceived =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGenericPacketReceived}, {}};

static void InitDefaultsGenericPacketSent() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::webrtc::rtclog2::_GenericPacketSent_default_instance_;
    new (ptr) ::webrtc::rtclog2::GenericPacketSent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::webrtc::rtclog2::GenericPacketSent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GenericPacketSent =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGenericPacketSent}, {}};

static void InitDefaultsGenericAckReceived() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::webrtc::rtclog2::_GenericAckReceived_default_instance_;
    new (ptr) ::webrtc::rtclog2::GenericAckReceived();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::webrtc::rtclog2::GenericAckReceived::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GenericAckReceived =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGenericAckReceived}, {}};

static void InitDefaultsIncomingRtpPackets() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::webrtc::rtclog2::_IncomingRtpPackets_default_instance_;
    new (ptr) ::webrtc::rtclog2::IncomingRtpPackets();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::webrtc::rtclog2::IncomingRtpPackets::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_IncomingRtpPackets =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsIncomingRtpPackets}, {}};

static void InitDefaultsOutgoingRtpPackets() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::webrtc::rtclog2::_OutgoingRtpPackets_default_instance_;
    new (ptr) ::webrtc::rtclog2::OutgoingRtpPackets();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::webrtc::rtclog2::OutgoingRtpPackets::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_OutgoingRtpPackets =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOutgoingRtpPackets}, {}};

static void InitDefaultsIncomingRtcpPackets() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::webrtc::rtclog2::_IncomingRtcpPackets_default_instance_;
    new (ptr) ::webrtc::rtclog2::IncomingRtcpPackets();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::webrtc::rtclog2::IncomingRtcpPackets::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_IncomingRtcpPackets =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsIncomingRtcpPackets}, {}};

static void InitDefaultsOutgoingRtcpPackets() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::webrtc::rtclog2::_OutgoingRtcpPackets_default_instance_;
    new (ptr) ::webrtc::rtclog2::OutgoingRtcpPackets();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::webrtc::rtclog2::OutgoingRtcpPackets::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_OutgoingRtcpPackets =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOutgoingRtcpPackets}, {}};

static void InitDefaultsAudioPlayoutEvents() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::webrtc::rtclog2::_AudioPlayoutEvents_default_instance_;
    new (ptr) ::webrtc::rtclog2::AudioPlayoutEvents();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::webrtc::rtclog2::AudioPlayoutEvents::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AudioPlayoutEvents =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAudioPlayoutEvents}, {}};

static void InitDefaultsBeginLogEvent() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::webrtc::rtclog2::_BeginLogEvent_default_instance_;
    new (ptr) ::webrtc::rtclog2::BeginLogEvent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::webrtc::rtclog2::BeginLogEvent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BeginLogEvent =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBeginLogEvent}, {}};

static void InitDefaultsEndLogEvent() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::webrtc::rtclog2::_EndLogEvent_default_instance_;
    new (ptr) ::webrtc::rtclog2::EndLogEvent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::webrtc::rtclog2::EndLogEvent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_EndLogEvent =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEndLogEvent}, {}};

static void InitDefaultsLossBasedBweUpdates() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::webrtc::rtclog2::_LossBasedBweUpdates_default_instance_;
    new (ptr) ::webrtc::rtclog2::LossBasedBweUpdates();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::webrtc::rtclog2::LossBasedBweUpdates::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LossBasedBweUpdates =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLossBasedBweUpdates}, {}};

static void InitDefaultsDelayBasedBweUpdates() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::webrtc::rtclog2::_DelayBasedBweUpdates_default_instance_;
    new (ptr) ::webrtc::rtclog2::DelayBasedBweUpdates();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::webrtc::rtclog2::DelayBasedBweUpdates::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DelayBasedBweUpdates =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDelayBasedBweUpdates}, {}};

static void InitDefaultsRtpHeaderExtensionConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::webrtc::rtclog2::_RtpHeaderExtensionConfig_default_instance_;
    new (ptr) ::webrtc::rtclog2::RtpHeaderExtensionConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::webrtc::rtclog2::RtpHeaderExtensionConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RtpHeaderExtensionConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRtpHeaderExtensionConfig}, {}};

static void InitDefaultsVideoRecvStreamConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::webrtc::rtclog2::_VideoRecvStreamConfig_default_instance_;
    new (ptr) ::webrtc::rtclog2::VideoRecvStreamConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::webrtc::rtclog2::VideoRecvStreamConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_VideoRecvStreamConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsVideoRecvStreamConfig}, {
      &protobuf_rtc_5fevent_5flog2_2eproto::scc_info_RtpHeaderExtensionConfig.base,}};

static void InitDefaultsVideoSendStreamConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::webrtc::rtclog2::_VideoSendStreamConfig_default_instance_;
    new (ptr) ::webrtc::rtclog2::VideoSendStreamConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::webrtc::rtclog2::VideoSendStreamConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_VideoSendStreamConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsVideoSendStreamConfig}, {
      &protobuf_rtc_5fevent_5flog2_2eproto::scc_info_RtpHeaderExtensionConfig.base,}};

static void InitDefaultsAudioRecvStreamConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::webrtc::rtclog2::_AudioRecvStreamConfig_default_instance_;
    new (ptr) ::webrtc::rtclog2::AudioRecvStreamConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::webrtc::rtclog2::AudioRecvStreamConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AudioRecvStreamConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAudioRecvStreamConfig}, {
      &protobuf_rtc_5fevent_5flog2_2eproto::scc_info_RtpHeaderExtensionConfig.base,}};

static void InitDefaultsAudioSendStreamConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::webrtc::rtclog2::_AudioSendStreamConfig_default_instance_;
    new (ptr) ::webrtc::rtclog2::AudioSendStreamConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::webrtc::rtclog2::AudioSendStreamConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AudioSendStreamConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAudioSendStreamConfig}, {
      &protobuf_rtc_5fevent_5flog2_2eproto::scc_info_RtpHeaderExtensionConfig.base,}};

static void InitDefaultsAudioNetworkAdaptations() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::webrtc::rtclog2::_AudioNetworkAdaptations_default_instance_;
    new (ptr) ::webrtc::rtclog2::AudioNetworkAdaptations();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::webrtc::rtclog2::AudioNetworkAdaptations::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AudioNetworkAdaptations =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAudioNetworkAdaptations}, {}};

static void InitDefaultsBweProbeCluster() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::webrtc::rtclog2::_BweProbeCluster_default_instance_;
    new (ptr) ::webrtc::rtclog2::BweProbeCluster();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::webrtc::rtclog2::BweProbeCluster::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BweProbeCluster =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBweProbeCluster}, {}};

static void InitDefaultsBweProbeResultSuccess() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::webrtc::rtclog2::_BweProbeResultSuccess_default_instance_;
    new (ptr) ::webrtc::rtclog2::BweProbeResultSuccess();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::webrtc::rtclog2::BweProbeResultSuccess::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BweProbeResultSuccess =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBweProbeResultSuccess}, {}};

static void InitDefaultsBweProbeResultFailure() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::webrtc::rtclog2::_BweProbeResultFailure_default_instance_;
    new (ptr) ::webrtc::rtclog2::BweProbeResultFailure();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::webrtc::rtclog2::BweProbeResultFailure::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BweProbeResultFailure =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBweProbeResultFailure}, {}};

static void InitDefaultsAlrState() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::webrtc::rtclog2::_AlrState_default_instance_;
    new (ptr) ::webrtc::rtclog2::AlrState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::webrtc::rtclog2::AlrState::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AlrState =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAlrState}, {}};

static void InitDefaultsIceCandidatePairConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::webrtc::rtclog2::_IceCandidatePairConfig_default_instance_;
    new (ptr) ::webrtc::rtclog2::IceCandidatePairConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::webrtc::rtclog2::IceCandidatePairConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_IceCandidatePairConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsIceCandidatePairConfig}, {}};

static void InitDefaultsIceCandidatePairEvent() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::webrtc::rtclog2::_IceCandidatePairEvent_default_instance_;
    new (ptr) ::webrtc::rtclog2::IceCandidatePairEvent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::webrtc::rtclog2::IceCandidatePairEvent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_IceCandidatePairEvent =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsIceCandidatePairEvent}, {}};

static void InitDefaultsDtlsTransportStateEvent() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::webrtc::rtclog2::_DtlsTransportStateEvent_default_instance_;
    new (ptr) ::webrtc::rtclog2::DtlsTransportStateEvent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::webrtc::rtclog2::DtlsTransportStateEvent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DtlsTransportStateEvent =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDtlsTransportStateEvent}, {}};

static void InitDefaultsDtlsWritableState() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::webrtc::rtclog2::_DtlsWritableState_default_instance_;
    new (ptr) ::webrtc::rtclog2::DtlsWritableState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::webrtc::rtclog2::DtlsWritableState::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DtlsWritableState =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDtlsWritableState}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_EventStream.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Event.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GenericPacketReceived.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GenericPacketSent.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GenericAckReceived.base);
  ::google::protobuf::internal::InitSCC(&scc_info_IncomingRtpPackets.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OutgoingRtpPackets.base);
  ::google::protobuf::internal::InitSCC(&scc_info_IncomingRtcpPackets.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OutgoingRtcpPackets.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AudioPlayoutEvents.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BeginLogEvent.base);
  ::google::protobuf::internal::InitSCC(&scc_info_EndLogEvent.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LossBasedBweUpdates.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DelayBasedBweUpdates.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RtpHeaderExtensionConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_VideoRecvStreamConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_VideoSendStreamConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AudioRecvStreamConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AudioSendStreamConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AudioNetworkAdaptations.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BweProbeCluster.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BweProbeResultSuccess.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BweProbeResultFailure.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AlrState.base);
  ::google::protobuf::internal::InitSCC(&scc_info_IceCandidatePairConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_IceCandidatePairEvent.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DtlsTransportStateEvent.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DtlsWritableState.base);
}

}  // namespace protobuf_rtc_5fevent_5flog2_2eproto
namespace webrtc {
namespace rtclog2 {
bool DelayBasedBweUpdates_DetectorState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DelayBasedBweUpdates_DetectorState DelayBasedBweUpdates::BWE_UNKNOWN_STATE;
const DelayBasedBweUpdates_DetectorState DelayBasedBweUpdates::BWE_NORMAL;
const DelayBasedBweUpdates_DetectorState DelayBasedBweUpdates::BWE_UNDERUSING;
const DelayBasedBweUpdates_DetectorState DelayBasedBweUpdates::BWE_OVERUSING;
const DelayBasedBweUpdates_DetectorState DelayBasedBweUpdates::DetectorState_MIN;
const DelayBasedBweUpdates_DetectorState DelayBasedBweUpdates::DetectorState_MAX;
const int DelayBasedBweUpdates::DetectorState_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool BweProbeResultFailure_FailureReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const BweProbeResultFailure_FailureReason BweProbeResultFailure::UNKNOWN;
const BweProbeResultFailure_FailureReason BweProbeResultFailure::INVALID_SEND_RECEIVE_INTERVAL;
const BweProbeResultFailure_FailureReason BweProbeResultFailure::INVALID_SEND_RECEIVE_RATIO;
const BweProbeResultFailure_FailureReason BweProbeResultFailure::TIMEOUT;
const BweProbeResultFailure_FailureReason BweProbeResultFailure::FailureReason_MIN;
const BweProbeResultFailure_FailureReason BweProbeResultFailure::FailureReason_MAX;
const int BweProbeResultFailure::FailureReason_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool IceCandidatePairConfig_IceCandidatePairConfigType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const IceCandidatePairConfig_IceCandidatePairConfigType IceCandidatePairConfig::UNKNOWN_CONFIG_TYPE;
const IceCandidatePairConfig_IceCandidatePairConfigType IceCandidatePairConfig::ADDED;
const IceCandidatePairConfig_IceCandidatePairConfigType IceCandidatePairConfig::UPDATED;
const IceCandidatePairConfig_IceCandidatePairConfigType IceCandidatePairConfig::DESTROYED;
const IceCandidatePairConfig_IceCandidatePairConfigType IceCandidatePairConfig::SELECTED;
const IceCandidatePairConfig_IceCandidatePairConfigType IceCandidatePairConfig::IceCandidatePairConfigType_MIN;
const IceCandidatePairConfig_IceCandidatePairConfigType IceCandidatePairConfig::IceCandidatePairConfigType_MAX;
const int IceCandidatePairConfig::IceCandidatePairConfigType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool IceCandidatePairConfig_IceCandidateType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const IceCandidatePairConfig_IceCandidateType IceCandidatePairConfig::UNKNOWN_CANDIDATE_TYPE;
const IceCandidatePairConfig_IceCandidateType IceCandidatePairConfig::LOCAL;
const IceCandidatePairConfig_IceCandidateType IceCandidatePairConfig::STUN;
const IceCandidatePairConfig_IceCandidateType IceCandidatePairConfig::PRFLX;
const IceCandidatePairConfig_IceCandidateType IceCandidatePairConfig::RELAY;
const IceCandidatePairConfig_IceCandidateType IceCandidatePairConfig::IceCandidateType_MIN;
const IceCandidatePairConfig_IceCandidateType IceCandidatePairConfig::IceCandidateType_MAX;
const int IceCandidatePairConfig::IceCandidateType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool IceCandidatePairConfig_Protocol_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const IceCandidatePairConfig_Protocol IceCandidatePairConfig::UNKNOWN_PROTOCOL;
const IceCandidatePairConfig_Protocol IceCandidatePairConfig::UDP;
const IceCandidatePairConfig_Protocol IceCandidatePairConfig::TCP;
const IceCandidatePairConfig_Protocol IceCandidatePairConfig::SSLTCP;
const IceCandidatePairConfig_Protocol IceCandidatePairConfig::TLS;
const IceCandidatePairConfig_Protocol IceCandidatePairConfig::Protocol_MIN;
const IceCandidatePairConfig_Protocol IceCandidatePairConfig::Protocol_MAX;
const int IceCandidatePairConfig::Protocol_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool IceCandidatePairConfig_AddressFamily_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const IceCandidatePairConfig_AddressFamily IceCandidatePairConfig::UNKNOWN_ADDRESS_FAMILY;
const IceCandidatePairConfig_AddressFamily IceCandidatePairConfig::IPV4;
const IceCandidatePairConfig_AddressFamily IceCandidatePairConfig::IPV6;
const IceCandidatePairConfig_AddressFamily IceCandidatePairConfig::AddressFamily_MIN;
const IceCandidatePairConfig_AddressFamily IceCandidatePairConfig::AddressFamily_MAX;
const int IceCandidatePairConfig::AddressFamily_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool IceCandidatePairConfig_NetworkType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const IceCandidatePairConfig_NetworkType IceCandidatePairConfig::UNKNOWN_NETWORK_TYPE;
const IceCandidatePairConfig_NetworkType IceCandidatePairConfig::ETHERNET;
const IceCandidatePairConfig_NetworkType IceCandidatePairConfig::WIFI;
const IceCandidatePairConfig_NetworkType IceCandidatePairConfig::CELLULAR;
const IceCandidatePairConfig_NetworkType IceCandidatePairConfig::VPN;
const IceCandidatePairConfig_NetworkType IceCandidatePairConfig::LOOPBACK;
const IceCandidatePairConfig_NetworkType IceCandidatePairConfig::NetworkType_MIN;
const IceCandidatePairConfig_NetworkType IceCandidatePairConfig::NetworkType_MAX;
const int IceCandidatePairConfig::NetworkType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool IceCandidatePairEvent_IceCandidatePairEventType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const IceCandidatePairEvent_IceCandidatePairEventType IceCandidatePairEvent::UNKNOWN_CHECK_TYPE;
const IceCandidatePairEvent_IceCandidatePairEventType IceCandidatePairEvent::CHECK_SENT;
const IceCandidatePairEvent_IceCandidatePairEventType IceCandidatePairEvent::CHECK_RECEIVED;
const IceCandidatePairEvent_IceCandidatePairEventType IceCandidatePairEvent::CHECK_RESPONSE_SENT;
const IceCandidatePairEvent_IceCandidatePairEventType IceCandidatePairEvent::CHECK_RESPONSE_RECEIVED;
const IceCandidatePairEvent_IceCandidatePairEventType IceCandidatePairEvent::IceCandidatePairEventType_MIN;
const IceCandidatePairEvent_IceCandidatePairEventType IceCandidatePairEvent::IceCandidatePairEventType_MAX;
const int IceCandidatePairEvent::IceCandidatePairEventType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool DtlsTransportStateEvent_DtlsTransportState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DtlsTransportStateEvent_DtlsTransportState DtlsTransportStateEvent::UNKNOWN_DTLS_TRANSPORT_STATE;
const DtlsTransportStateEvent_DtlsTransportState DtlsTransportStateEvent::DTLS_TRANSPORT_NEW;
const DtlsTransportStateEvent_DtlsTransportState DtlsTransportStateEvent::DTLS_TRANSPORT_CONNECTING;
const DtlsTransportStateEvent_DtlsTransportState DtlsTransportStateEvent::DTLS_TRANSPORT_CONNECTED;
const DtlsTransportStateEvent_DtlsTransportState DtlsTransportStateEvent::DTLS_TRANSPORT_CLOSED;
const DtlsTransportStateEvent_DtlsTransportState DtlsTransportStateEvent::DTLS_TRANSPORT_FAILED;
const DtlsTransportStateEvent_DtlsTransportState DtlsTransportStateEvent::DtlsTransportState_MIN;
const DtlsTransportStateEvent_DtlsTransportState DtlsTransportStateEvent::DtlsTransportState_MAX;
const int DtlsTransportStateEvent::DtlsTransportState_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void EventStream::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EventStream::kStreamFieldNumber;
const int EventStream::kIncomingRtpPacketsFieldNumber;
const int EventStream::kOutgoingRtpPacketsFieldNumber;
const int EventStream::kIncomingRtcpPacketsFieldNumber;
const int EventStream::kOutgoingRtcpPacketsFieldNumber;
const int EventStream::kAudioPlayoutEventsFieldNumber;
const int EventStream::kBeginLogEventsFieldNumber;
const int EventStream::kEndLogEventsFieldNumber;
const int EventStream::kLossBasedBweUpdatesFieldNumber;
const int EventStream::kDelayBasedBweUpdatesFieldNumber;
const int EventStream::kAudioNetworkAdaptationsFieldNumber;
const int EventStream::kProbeClustersFieldNumber;
const int EventStream::kProbeSuccessFieldNumber;
const int EventStream::kProbeFailureFieldNumber;
const int EventStream::kAlrStatesFieldNumber;
const int EventStream::kIceCandidateConfigsFieldNumber;
const int EventStream::kIceCandidateEventsFieldNumber;
const int EventStream::kDtlsTransportStateEventsFieldNumber;
const int EventStream::kDtlsWritableStatesFieldNumber;
const int EventStream::kGenericPacketsSentFieldNumber;
const int EventStream::kGenericPacketsReceivedFieldNumber;
const int EventStream::kGenericAcksReceivedFieldNumber;
const int EventStream::kAudioRecvStreamConfigsFieldNumber;
const int EventStream::kAudioSendStreamConfigsFieldNumber;
const int EventStream::kVideoRecvStreamConfigsFieldNumber;
const int EventStream::kVideoSendStreamConfigsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EventStream::EventStream()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_rtc_5fevent_5flog2_2eproto::scc_info_EventStream.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:webrtc.rtclog2.EventStream)
}
EventStream::EventStream(const EventStream& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      stream_(from.stream_),
      incoming_rtp_packets_(from.incoming_rtp_packets_),
      outgoing_rtp_packets_(from.outgoing_rtp_packets_),
      incoming_rtcp_packets_(from.incoming_rtcp_packets_),
      outgoing_rtcp_packets_(from.outgoing_rtcp_packets_),
      audio_playout_events_(from.audio_playout_events_),
      begin_log_events_(from.begin_log_events_),
      end_log_events_(from.end_log_events_),
      loss_based_bwe_updates_(from.loss_based_bwe_updates_),
      delay_based_bwe_updates_(from.delay_based_bwe_updates_),
      audio_network_adaptations_(from.audio_network_adaptations_),
      probe_clusters_(from.probe_clusters_),
      probe_success_(from.probe_success_),
      probe_failure_(from.probe_failure_),
      alr_states_(from.alr_states_),
      ice_candidate_configs_(from.ice_candidate_configs_),
      ice_candidate_events_(from.ice_candidate_events_),
      dtls_transport_state_events_(from.dtls_transport_state_events_),
      dtls_writable_states_(from.dtls_writable_states_),
      generic_packets_sent_(from.generic_packets_sent_),
      generic_packets_received_(from.generic_packets_received_),
      generic_acks_received_(from.generic_acks_received_),
      audio_recv_stream_configs_(from.audio_recv_stream_configs_),
      audio_send_stream_configs_(from.audio_send_stream_configs_),
      video_recv_stream_configs_(from.video_recv_stream_configs_),
      video_send_stream_configs_(from.video_send_stream_configs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog2.EventStream)
}

void EventStream::SharedCtor() {
}

EventStream::~EventStream() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog2.EventStream)
  SharedDtor();
}

void EventStream::SharedDtor() {
}

void EventStream::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EventStream& EventStream::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_rtc_5fevent_5flog2_2eproto::scc_info_EventStream.base);
  return *internal_default_instance();
}


void EventStream::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog2.EventStream)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stream_.Clear();
  incoming_rtp_packets_.Clear();
  outgoing_rtp_packets_.Clear();
  incoming_rtcp_packets_.Clear();
  outgoing_rtcp_packets_.Clear();
  audio_playout_events_.Clear();
  begin_log_events_.Clear();
  end_log_events_.Clear();
  loss_based_bwe_updates_.Clear();
  delay_based_bwe_updates_.Clear();
  audio_network_adaptations_.Clear();
  probe_clusters_.Clear();
  probe_success_.Clear();
  probe_failure_.Clear();
  alr_states_.Clear();
  ice_candidate_configs_.Clear();
  ice_candidate_events_.Clear();
  dtls_transport_state_events_.Clear();
  dtls_writable_states_.Clear();
  generic_packets_sent_.Clear();
  generic_packets_received_.Clear();
  generic_acks_received_.Clear();
  audio_recv_stream_configs_.Clear();
  audio_send_stream_configs_.Clear();
  video_recv_stream_configs_.Clear();
  video_send_stream_configs_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool EventStream::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:webrtc.rtclog2.EventStream)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .webrtc.rtclog2.Event stream = 1 [deprecated = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_stream()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .webrtc.rtclog2.IncomingRtpPackets incoming_rtp_packets = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_incoming_rtp_packets()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .webrtc.rtclog2.OutgoingRtpPackets outgoing_rtp_packets = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_outgoing_rtp_packets()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .webrtc.rtclog2.IncomingRtcpPackets incoming_rtcp_packets = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_incoming_rtcp_packets()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .webrtc.rtclog2.OutgoingRtcpPackets outgoing_rtcp_packets = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_outgoing_rtcp_packets()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .webrtc.rtclog2.AudioPlayoutEvents audio_playout_events = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_audio_playout_events()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .webrtc.rtclog2.BeginLogEvent begin_log_events = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_begin_log_events()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .webrtc.rtclog2.EndLogEvent end_log_events = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_end_log_events()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .webrtc.rtclog2.LossBasedBweUpdates loss_based_bwe_updates = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_loss_based_bwe_updates()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .webrtc.rtclog2.DelayBasedBweUpdates delay_based_bwe_updates = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_delay_based_bwe_updates()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .webrtc.rtclog2.AudioNetworkAdaptations audio_network_adaptations = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_audio_network_adaptations()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .webrtc.rtclog2.BweProbeCluster probe_clusters = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_probe_clusters()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .webrtc.rtclog2.BweProbeResultSuccess probe_success = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_probe_success()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .webrtc.rtclog2.BweProbeResultFailure probe_failure = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 186 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_probe_failure()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .webrtc.rtclog2.AlrState alr_states = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 194 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_alr_states()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .webrtc.rtclog2.IceCandidatePairConfig ice_candidate_configs = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u /* 202 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_ice_candidate_configs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .webrtc.rtclog2.IceCandidatePairEvent ice_candidate_events = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u /* 210 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_ice_candidate_events()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .webrtc.rtclog2.DtlsTransportStateEvent dtls_transport_state_events = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(218u /* 218 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_dtls_transport_state_events()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .webrtc.rtclog2.DtlsWritableState dtls_writable_states = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(226u /* 226 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_dtls_writable_states()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .webrtc.rtclog2.GenericPacketSent generic_packets_sent = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u /* 234 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_generic_packets_sent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .webrtc.rtclog2.GenericPacketReceived generic_packets_received = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 242 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_generic_packets_received()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .webrtc.rtclog2.GenericAckReceived generic_acks_received = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(250u /* 250 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_generic_acks_received()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .webrtc.rtclog2.AudioRecvStreamConfig audio_recv_stream_configs = 101;
      case 101: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 810 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_audio_recv_stream_configs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .webrtc.rtclog2.AudioSendStreamConfig audio_send_stream_configs = 102;
      case 102: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 818 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_audio_send_stream_configs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .webrtc.rtclog2.VideoRecvStreamConfig video_recv_stream_configs = 103;
      case 103: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 826 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_video_recv_stream_configs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .webrtc.rtclog2.VideoSendStreamConfig video_send_stream_configs = 104;
      case 104: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 834 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_video_send_stream_configs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:webrtc.rtclog2.EventStream)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:webrtc.rtclog2.EventStream)
  return false;
#undef DO_
}

void EventStream::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:webrtc.rtclog2.EventStream)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .webrtc.rtclog2.Event stream = 1 [deprecated = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stream_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1,
      this->stream(static_cast<int>(i)),
      output);
  }

  // repeated .webrtc.rtclog2.IncomingRtpPackets incoming_rtp_packets = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->incoming_rtp_packets_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2,
      this->incoming_rtp_packets(static_cast<int>(i)),
      output);
  }

  // repeated .webrtc.rtclog2.OutgoingRtpPackets outgoing_rtp_packets = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->outgoing_rtp_packets_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3,
      this->outgoing_rtp_packets(static_cast<int>(i)),
      output);
  }

  // repeated .webrtc.rtclog2.IncomingRtcpPackets incoming_rtcp_packets = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->incoming_rtcp_packets_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4,
      this->incoming_rtcp_packets(static_cast<int>(i)),
      output);
  }

  // repeated .webrtc.rtclog2.OutgoingRtcpPackets outgoing_rtcp_packets = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->outgoing_rtcp_packets_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5,
      this->outgoing_rtcp_packets(static_cast<int>(i)),
      output);
  }

  // repeated .webrtc.rtclog2.AudioPlayoutEvents audio_playout_events = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->audio_playout_events_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6,
      this->audio_playout_events(static_cast<int>(i)),
      output);
  }

  // repeated .webrtc.rtclog2.BeginLogEvent begin_log_events = 16;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->begin_log_events_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      16,
      this->begin_log_events(static_cast<int>(i)),
      output);
  }

  // repeated .webrtc.rtclog2.EndLogEvent end_log_events = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->end_log_events_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      17,
      this->end_log_events(static_cast<int>(i)),
      output);
  }

  // repeated .webrtc.rtclog2.LossBasedBweUpdates loss_based_bwe_updates = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->loss_based_bwe_updates_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      18,
      this->loss_based_bwe_updates(static_cast<int>(i)),
      output);
  }

  // repeated .webrtc.rtclog2.DelayBasedBweUpdates delay_based_bwe_updates = 19;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->delay_based_bwe_updates_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      19,
      this->delay_based_bwe_updates(static_cast<int>(i)),
      output);
  }

  // repeated .webrtc.rtclog2.AudioNetworkAdaptations audio_network_adaptations = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->audio_network_adaptations_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      20,
      this->audio_network_adaptations(static_cast<int>(i)),
      output);
  }

  // repeated .webrtc.rtclog2.BweProbeCluster probe_clusters = 21;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->probe_clusters_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      21,
      this->probe_clusters(static_cast<int>(i)),
      output);
  }

  // repeated .webrtc.rtclog2.BweProbeResultSuccess probe_success = 22;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->probe_success_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      22,
      this->probe_success(static_cast<int>(i)),
      output);
  }

  // repeated .webrtc.rtclog2.BweProbeResultFailure probe_failure = 23;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->probe_failure_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      23,
      this->probe_failure(static_cast<int>(i)),
      output);
  }

  // repeated .webrtc.rtclog2.AlrState alr_states = 24;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->alr_states_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      24,
      this->alr_states(static_cast<int>(i)),
      output);
  }

  // repeated .webrtc.rtclog2.IceCandidatePairConfig ice_candidate_configs = 25;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ice_candidate_configs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      25,
      this->ice_candidate_configs(static_cast<int>(i)),
      output);
  }

  // repeated .webrtc.rtclog2.IceCandidatePairEvent ice_candidate_events = 26;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ice_candidate_events_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      26,
      this->ice_candidate_events(static_cast<int>(i)),
      output);
  }

  // repeated .webrtc.rtclog2.DtlsTransportStateEvent dtls_transport_state_events = 27;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dtls_transport_state_events_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      27,
      this->dtls_transport_state_events(static_cast<int>(i)),
      output);
  }

  // repeated .webrtc.rtclog2.DtlsWritableState dtls_writable_states = 28;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dtls_writable_states_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      28,
      this->dtls_writable_states(static_cast<int>(i)),
      output);
  }

  // repeated .webrtc.rtclog2.GenericPacketSent generic_packets_sent = 29;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->generic_packets_sent_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      29,
      this->generic_packets_sent(static_cast<int>(i)),
      output);
  }

  // repeated .webrtc.rtclog2.GenericPacketReceived generic_packets_received = 30;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->generic_packets_received_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      30,
      this->generic_packets_received(static_cast<int>(i)),
      output);
  }

  // repeated .webrtc.rtclog2.GenericAckReceived generic_acks_received = 31;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->generic_acks_received_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      31,
      this->generic_acks_received(static_cast<int>(i)),
      output);
  }

  // repeated .webrtc.rtclog2.AudioRecvStreamConfig audio_recv_stream_configs = 101;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->audio_recv_stream_configs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      101,
      this->audio_recv_stream_configs(static_cast<int>(i)),
      output);
  }

  // repeated .webrtc.rtclog2.AudioSendStreamConfig audio_send_stream_configs = 102;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->audio_send_stream_configs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      102,
      this->audio_send_stream_configs(static_cast<int>(i)),
      output);
  }

  // repeated .webrtc.rtclog2.VideoRecvStreamConfig video_recv_stream_configs = 103;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->video_recv_stream_configs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      103,
      this->video_recv_stream_configs(static_cast<int>(i)),
      output);
  }

  // repeated .webrtc.rtclog2.VideoSendStreamConfig video_send_stream_configs = 104;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->video_send_stream_configs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      104,
      this->video_send_stream_configs(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:webrtc.rtclog2.EventStream)
}

size_t EventStream::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog2.EventStream)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // repeated .webrtc.rtclog2.Event stream = 1 [deprecated = true];
  {
    unsigned int count = static_cast<unsigned int>(this->stream_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->stream(static_cast<int>(i)));
    }
  }

  // repeated .webrtc.rtclog2.IncomingRtpPackets incoming_rtp_packets = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->incoming_rtp_packets_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->incoming_rtp_packets(static_cast<int>(i)));
    }
  }

  // repeated .webrtc.rtclog2.OutgoingRtpPackets outgoing_rtp_packets = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->outgoing_rtp_packets_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->outgoing_rtp_packets(static_cast<int>(i)));
    }
  }

  // repeated .webrtc.rtclog2.IncomingRtcpPackets incoming_rtcp_packets = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->incoming_rtcp_packets_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->incoming_rtcp_packets(static_cast<int>(i)));
    }
  }

  // repeated .webrtc.rtclog2.OutgoingRtcpPackets outgoing_rtcp_packets = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->outgoing_rtcp_packets_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->outgoing_rtcp_packets(static_cast<int>(i)));
    }
  }

  // repeated .webrtc.rtclog2.AudioPlayoutEvents audio_playout_events = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->audio_playout_events_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->audio_playout_events(static_cast<int>(i)));
    }
  }

  // repeated .webrtc.rtclog2.BeginLogEvent begin_log_events = 16;
  {
    unsigned int count = static_cast<unsigned int>(this->begin_log_events_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->begin_log_events(static_cast<int>(i)));
    }
  }

  // repeated .webrtc.rtclog2.EndLogEvent end_log_events = 17;
  {
    unsigned int count = static_cast<unsigned int>(this->end_log_events_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->end_log_events(static_cast<int>(i)));
    }
  }

  // repeated .webrtc.rtclog2.LossBasedBweUpdates loss_based_bwe_updates = 18;
  {
    unsigned int count = static_cast<unsigned int>(this->loss_based_bwe_updates_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->loss_based_bwe_updates(static_cast<int>(i)));
    }
  }

  // repeated .webrtc.rtclog2.DelayBasedBweUpdates delay_based_bwe_updates = 19;
  {
    unsigned int count = static_cast<unsigned int>(this->delay_based_bwe_updates_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->delay_based_bwe_updates(static_cast<int>(i)));
    }
  }

  // repeated .webrtc.rtclog2.AudioNetworkAdaptations audio_network_adaptations = 20;
  {
    unsigned int count = static_cast<unsigned int>(this->audio_network_adaptations_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->audio_network_adaptations(static_cast<int>(i)));
    }
  }

  // repeated .webrtc.rtclog2.BweProbeCluster probe_clusters = 21;
  {
    unsigned int count = static_cast<unsigned int>(this->probe_clusters_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->probe_clusters(static_cast<int>(i)));
    }
  }

  // repeated .webrtc.rtclog2.BweProbeResultSuccess probe_success = 22;
  {
    unsigned int count = static_cast<unsigned int>(this->probe_success_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->probe_success(static_cast<int>(i)));
    }
  }

  // repeated .webrtc.rtclog2.BweProbeResultFailure probe_failure = 23;
  {
    unsigned int count = static_cast<unsigned int>(this->probe_failure_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->probe_failure(static_cast<int>(i)));
    }
  }

  // repeated .webrtc.rtclog2.AlrState alr_states = 24;
  {
    unsigned int count = static_cast<unsigned int>(this->alr_states_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->alr_states(static_cast<int>(i)));
    }
  }

  // repeated .webrtc.rtclog2.IceCandidatePairConfig ice_candidate_configs = 25;
  {
    unsigned int count = static_cast<unsigned int>(this->ice_candidate_configs_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->ice_candidate_configs(static_cast<int>(i)));
    }
  }

  // repeated .webrtc.rtclog2.IceCandidatePairEvent ice_candidate_events = 26;
  {
    unsigned int count = static_cast<unsigned int>(this->ice_candidate_events_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->ice_candidate_events(static_cast<int>(i)));
    }
  }

  // repeated .webrtc.rtclog2.DtlsTransportStateEvent dtls_transport_state_events = 27;
  {
    unsigned int count = static_cast<unsigned int>(this->dtls_transport_state_events_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->dtls_transport_state_events(static_cast<int>(i)));
    }
  }

  // repeated .webrtc.rtclog2.DtlsWritableState dtls_writable_states = 28;
  {
    unsigned int count = static_cast<unsigned int>(this->dtls_writable_states_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->dtls_writable_states(static_cast<int>(i)));
    }
  }

  // repeated .webrtc.rtclog2.GenericPacketSent generic_packets_sent = 29;
  {
    unsigned int count = static_cast<unsigned int>(this->generic_packets_sent_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->generic_packets_sent(static_cast<int>(i)));
    }
  }

  // repeated .webrtc.rtclog2.GenericPacketReceived generic_packets_received = 30;
  {
    unsigned int count = static_cast<unsigned int>(this->generic_packets_received_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->generic_packets_received(static_cast<int>(i)));
    }
  }

  // repeated .webrtc.rtclog2.GenericAckReceived generic_acks_received = 31;
  {
    unsigned int count = static_cast<unsigned int>(this->generic_acks_received_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->generic_acks_received(static_cast<int>(i)));
    }
  }

  // repeated .webrtc.rtclog2.AudioRecvStreamConfig audio_recv_stream_configs = 101;
  {
    unsigned int count = static_cast<unsigned int>(this->audio_recv_stream_configs_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->audio_recv_stream_configs(static_cast<int>(i)));
    }
  }

  // repeated .webrtc.rtclog2.AudioSendStreamConfig audio_send_stream_configs = 102;
  {
    unsigned int count = static_cast<unsigned int>(this->audio_send_stream_configs_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->audio_send_stream_configs(static_cast<int>(i)));
    }
  }

  // repeated .webrtc.rtclog2.VideoRecvStreamConfig video_recv_stream_configs = 103;
  {
    unsigned int count = static_cast<unsigned int>(this->video_recv_stream_configs_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->video_recv_stream_configs(static_cast<int>(i)));
    }
  }

  // repeated .webrtc.rtclog2.VideoSendStreamConfig video_send_stream_configs = 104;
  {
    unsigned int count = static_cast<unsigned int>(this->video_send_stream_configs_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->video_send_stream_configs(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EventStream::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EventStream*>(&from));
}

void EventStream::MergeFrom(const EventStream& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog2.EventStream)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stream_.MergeFrom(from.stream_);
  incoming_rtp_packets_.MergeFrom(from.incoming_rtp_packets_);
  outgoing_rtp_packets_.MergeFrom(from.outgoing_rtp_packets_);
  incoming_rtcp_packets_.MergeFrom(from.incoming_rtcp_packets_);
  outgoing_rtcp_packets_.MergeFrom(from.outgoing_rtcp_packets_);
  audio_playout_events_.MergeFrom(from.audio_playout_events_);
  begin_log_events_.MergeFrom(from.begin_log_events_);
  end_log_events_.MergeFrom(from.end_log_events_);
  loss_based_bwe_updates_.MergeFrom(from.loss_based_bwe_updates_);
  delay_based_bwe_updates_.MergeFrom(from.delay_based_bwe_updates_);
  audio_network_adaptations_.MergeFrom(from.audio_network_adaptations_);
  probe_clusters_.MergeFrom(from.probe_clusters_);
  probe_success_.MergeFrom(from.probe_success_);
  probe_failure_.MergeFrom(from.probe_failure_);
  alr_states_.MergeFrom(from.alr_states_);
  ice_candidate_configs_.MergeFrom(from.ice_candidate_configs_);
  ice_candidate_events_.MergeFrom(from.ice_candidate_events_);
  dtls_transport_state_events_.MergeFrom(from.dtls_transport_state_events_);
  dtls_writable_states_.MergeFrom(from.dtls_writable_states_);
  generic_packets_sent_.MergeFrom(from.generic_packets_sent_);
  generic_packets_received_.MergeFrom(from.generic_packets_received_);
  generic_acks_received_.MergeFrom(from.generic_acks_received_);
  audio_recv_stream_configs_.MergeFrom(from.audio_recv_stream_configs_);
  audio_send_stream_configs_.MergeFrom(from.audio_send_stream_configs_);
  video_recv_stream_configs_.MergeFrom(from.video_recv_stream_configs_);
  video_send_stream_configs_.MergeFrom(from.video_send_stream_configs_);
}

void EventStream::CopyFrom(const EventStream& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog2.EventStream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventStream::IsInitialized() const {
  return true;
}

void EventStream::Swap(EventStream* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EventStream::InternalSwap(EventStream* other) {
  using std::swap;
  CastToBase(&stream_)->InternalSwap(CastToBase(&other->stream_));
  CastToBase(&incoming_rtp_packets_)->InternalSwap(CastToBase(&other->incoming_rtp_packets_));
  CastToBase(&outgoing_rtp_packets_)->InternalSwap(CastToBase(&other->outgoing_rtp_packets_));
  CastToBase(&incoming_rtcp_packets_)->InternalSwap(CastToBase(&other->incoming_rtcp_packets_));
  CastToBase(&outgoing_rtcp_packets_)->InternalSwap(CastToBase(&other->outgoing_rtcp_packets_));
  CastToBase(&audio_playout_events_)->InternalSwap(CastToBase(&other->audio_playout_events_));
  CastToBase(&begin_log_events_)->InternalSwap(CastToBase(&other->begin_log_events_));
  CastToBase(&end_log_events_)->InternalSwap(CastToBase(&other->end_log_events_));
  CastToBase(&loss_based_bwe_updates_)->InternalSwap(CastToBase(&other->loss_based_bwe_updates_));
  CastToBase(&delay_based_bwe_updates_)->InternalSwap(CastToBase(&other->delay_based_bwe_updates_));
  CastToBase(&audio_network_adaptations_)->InternalSwap(CastToBase(&other->audio_network_adaptations_));
  CastToBase(&probe_clusters_)->InternalSwap(CastToBase(&other->probe_clusters_));
  CastToBase(&probe_success_)->InternalSwap(CastToBase(&other->probe_success_));
  CastToBase(&probe_failure_)->InternalSwap(CastToBase(&other->probe_failure_));
  CastToBase(&alr_states_)->InternalSwap(CastToBase(&other->alr_states_));
  CastToBase(&ice_candidate_configs_)->InternalSwap(CastToBase(&other->ice_candidate_configs_));
  CastToBase(&ice_candidate_events_)->InternalSwap(CastToBase(&other->ice_candidate_events_));
  CastToBase(&dtls_transport_state_events_)->InternalSwap(CastToBase(&other->dtls_transport_state_events_));
  CastToBase(&dtls_writable_states_)->InternalSwap(CastToBase(&other->dtls_writable_states_));
  CastToBase(&generic_packets_sent_)->InternalSwap(CastToBase(&other->generic_packets_sent_));
  CastToBase(&generic_packets_received_)->InternalSwap(CastToBase(&other->generic_packets_received_));
  CastToBase(&generic_acks_received_)->InternalSwap(CastToBase(&other->generic_acks_received_));
  CastToBase(&audio_recv_stream_configs_)->InternalSwap(CastToBase(&other->audio_recv_stream_configs_));
  CastToBase(&audio_send_stream_configs_)->InternalSwap(CastToBase(&other->audio_send_stream_configs_));
  CastToBase(&video_recv_stream_configs_)->InternalSwap(CastToBase(&other->video_recv_stream_configs_));
  CastToBase(&video_send_stream_configs_)->InternalSwap(CastToBase(&other->video_send_stream_configs_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string EventStream::GetTypeName() const {
  return "webrtc.rtclog2.EventStream";
}


// ===================================================================

void Event::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Event::Event()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_rtc_5fevent_5flog2_2eproto::scc_info_Event.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:webrtc.rtclog2.Event)
}
Event::Event(const Event& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog2.Event)
}

void Event::SharedCtor() {
}

Event::~Event() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog2.Event)
  SharedDtor();
}

void Event::SharedDtor() {
}

void Event::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Event& Event::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_rtc_5fevent_5flog2_2eproto::scc_info_Event.base);
  return *internal_default_instance();
}


void Event::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog2.Event)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Event::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:webrtc.rtclog2.Event)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:webrtc.rtclog2.Event)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:webrtc.rtclog2.Event)
  return false;
#undef DO_
}

void Event::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:webrtc.rtclog2.Event)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:webrtc.rtclog2.Event)
}

size_t Event::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog2.Event)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Event::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Event*>(&from));
}

void Event::MergeFrom(const Event& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog2.Event)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Event::CopyFrom(const Event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog2.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event::IsInitialized() const {
  return true;
}

void Event::Swap(Event* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Event::InternalSwap(Event* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Event::GetTypeName() const {
  return "webrtc.rtclog2.Event";
}


// ===================================================================

void GenericPacketReceived::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GenericPacketReceived::kTimestampMsFieldNumber;
const int GenericPacketReceived::kPacketNumberFieldNumber;
const int GenericPacketReceived::kPacketLengthFieldNumber;
const int GenericPacketReceived::kNumberOfDeltasFieldNumber;
const int GenericPacketReceived::kTimestampMsDeltasFieldNumber;
const int GenericPacketReceived::kPacketNumberDeltasFieldNumber;
const int GenericPacketReceived::kPacketLengthDeltasFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GenericPacketReceived::GenericPacketReceived()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_rtc_5fevent_5flog2_2eproto::scc_info_GenericPacketReceived.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:webrtc.rtclog2.GenericPacketReceived)
}
GenericPacketReceived::GenericPacketReceived(const GenericPacketReceived& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  timestamp_ms_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_timestamp_ms_deltas()) {
    timestamp_ms_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timestamp_ms_deltas_);
  }
  packet_number_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_packet_number_deltas()) {
    packet_number_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.packet_number_deltas_);
  }
  packet_length_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_packet_length_deltas()) {
    packet_length_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.packet_length_deltas_);
  }
  ::memcpy(&timestamp_ms_, &from.timestamp_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&number_of_deltas_) -
    reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(number_of_deltas_));
  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog2.GenericPacketReceived)
}

void GenericPacketReceived::SharedCtor() {
  timestamp_ms_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  packet_number_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  packet_length_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&number_of_deltas_) -
      reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(number_of_deltas_));
}

GenericPacketReceived::~GenericPacketReceived() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog2.GenericPacketReceived)
  SharedDtor();
}

void GenericPacketReceived::SharedDtor() {
  timestamp_ms_deltas_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  packet_number_deltas_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  packet_length_deltas_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GenericPacketReceived::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GenericPacketReceived& GenericPacketReceived::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_rtc_5fevent_5flog2_2eproto::scc_info_GenericPacketReceived.base);
  return *internal_default_instance();
}


void GenericPacketReceived::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog2.GenericPacketReceived)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      timestamp_ms_deltas_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      packet_number_deltas_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      packet_length_deltas_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 120u) {
    ::memset(&timestamp_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&number_of_deltas_) -
        reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(number_of_deltas_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GenericPacketReceived::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:webrtc.rtclog2.GenericPacketReceived)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp_ms = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_timestamp_ms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 packet_number = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_packet_number();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &packet_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 packet_length = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_packet_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &packet_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 number_of_deltas = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_number_of_deltas();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_of_deltas_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes timestamp_ms_deltas = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_timestamp_ms_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes packet_number_deltas = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_packet_number_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes packet_length_deltas = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_packet_length_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:webrtc.rtclog2.GenericPacketReceived)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:webrtc.rtclog2.GenericPacketReceived)
  return false;
#undef DO_
}

void GenericPacketReceived::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:webrtc.rtclog2.GenericPacketReceived)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp_ms = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp_ms(), output);
  }

  // optional int64 packet_number = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->packet_number(), output);
  }

  // optional int32 packet_length = 3;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->packet_length(), output);
  }

  // optional uint32 number_of_deltas = 16;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->number_of_deltas(), output);
  }

  // optional bytes timestamp_ms_deltas = 17;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      17, this->timestamp_ms_deltas(), output);
  }

  // optional bytes packet_number_deltas = 18;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      18, this->packet_number_deltas(), output);
  }

  // optional bytes packet_length_deltas = 19;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      19, this->packet_length_deltas(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:webrtc.rtclog2.GenericPacketReceived)
}

size_t GenericPacketReceived::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog2.GenericPacketReceived)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 127u) {
    // optional bytes timestamp_ms_deltas = 17;
    if (has_timestamp_ms_deltas()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->timestamp_ms_deltas());
    }

    // optional bytes packet_number_deltas = 18;
    if (has_packet_number_deltas()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->packet_number_deltas());
    }

    // optional bytes packet_length_deltas = 19;
    if (has_packet_length_deltas()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->packet_length_deltas());
    }

    // optional int64 timestamp_ms = 1;
    if (has_timestamp_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp_ms());
    }

    // optional int64 packet_number = 2;
    if (has_packet_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->packet_number());
    }

    // optional int32 packet_length = 3;
    if (has_packet_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->packet_length());
    }

    // optional uint32 number_of_deltas = 16;
    if (has_number_of_deltas()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->number_of_deltas());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GenericPacketReceived::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GenericPacketReceived*>(&from));
}

void GenericPacketReceived::MergeFrom(const GenericPacketReceived& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog2.GenericPacketReceived)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_timestamp_ms_deltas();
      timestamp_ms_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timestamp_ms_deltas_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_packet_number_deltas();
      packet_number_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.packet_number_deltas_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_packet_length_deltas();
      packet_length_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.packet_length_deltas_);
    }
    if (cached_has_bits & 0x00000008u) {
      timestamp_ms_ = from.timestamp_ms_;
    }
    if (cached_has_bits & 0x00000010u) {
      packet_number_ = from.packet_number_;
    }
    if (cached_has_bits & 0x00000020u) {
      packet_length_ = from.packet_length_;
    }
    if (cached_has_bits & 0x00000040u) {
      number_of_deltas_ = from.number_of_deltas_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GenericPacketReceived::CopyFrom(const GenericPacketReceived& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog2.GenericPacketReceived)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenericPacketReceived::IsInitialized() const {
  return true;
}

void GenericPacketReceived::Swap(GenericPacketReceived* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GenericPacketReceived::InternalSwap(GenericPacketReceived* other) {
  using std::swap;
  timestamp_ms_deltas_.Swap(&other->timestamp_ms_deltas_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  packet_number_deltas_.Swap(&other->packet_number_deltas_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  packet_length_deltas_.Swap(&other->packet_length_deltas_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(timestamp_ms_, other->timestamp_ms_);
  swap(packet_number_, other->packet_number_);
  swap(packet_length_, other->packet_length_);
  swap(number_of_deltas_, other->number_of_deltas_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string GenericPacketReceived::GetTypeName() const {
  return "webrtc.rtclog2.GenericPacketReceived";
}


// ===================================================================

void GenericPacketSent::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GenericPacketSent::kTimestampMsFieldNumber;
const int GenericPacketSent::kPacketNumberFieldNumber;
const int GenericPacketSent::kOverheadLengthFieldNumber;
const int GenericPacketSent::kPayloadLengthFieldNumber;
const int GenericPacketSent::kPaddingLengthFieldNumber;
const int GenericPacketSent::kNumberOfDeltasFieldNumber;
const int GenericPacketSent::kTimestampMsDeltasFieldNumber;
const int GenericPacketSent::kPacketNumberDeltasFieldNumber;
const int GenericPacketSent::kOverheadLengthDeltasFieldNumber;
const int GenericPacketSent::kPayloadLengthDeltasFieldNumber;
const int GenericPacketSent::kPaddingLengthDeltasFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GenericPacketSent::GenericPacketSent()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_rtc_5fevent_5flog2_2eproto::scc_info_GenericPacketSent.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:webrtc.rtclog2.GenericPacketSent)
}
GenericPacketSent::GenericPacketSent(const GenericPacketSent& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  timestamp_ms_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_timestamp_ms_deltas()) {
    timestamp_ms_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timestamp_ms_deltas_);
  }
  packet_number_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_packet_number_deltas()) {
    packet_number_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.packet_number_deltas_);
  }
  overhead_length_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_overhead_length_deltas()) {
    overhead_length_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.overhead_length_deltas_);
  }
  payload_length_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_payload_length_deltas()) {
    payload_length_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_length_deltas_);
  }
  padding_length_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_padding_length_deltas()) {
    padding_length_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.padding_length_deltas_);
  }
  ::memcpy(&timestamp_ms_, &from.timestamp_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&number_of_deltas_) -
    reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(number_of_deltas_));
  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog2.GenericPacketSent)
}

void GenericPacketSent::SharedCtor() {
  timestamp_ms_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  packet_number_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  overhead_length_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  payload_length_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  padding_length_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&number_of_deltas_) -
      reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(number_of_deltas_));
}

GenericPacketSent::~GenericPacketSent() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog2.GenericPacketSent)
  SharedDtor();
}

void GenericPacketSent::SharedDtor() {
  timestamp_ms_deltas_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  packet_number_deltas_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  overhead_length_deltas_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  payload_length_deltas_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  padding_length_deltas_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GenericPacketSent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GenericPacketSent& GenericPacketSent::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_rtc_5fevent_5flog2_2eproto::scc_info_GenericPacketSent.base);
  return *internal_default_instance();
}


void GenericPacketSent::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog2.GenericPacketSent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      timestamp_ms_deltas_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      packet_number_deltas_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      overhead_length_deltas_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      payload_length_deltas_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      padding_length_deltas_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 224u) {
    ::memset(&timestamp_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&overhead_length_) -
        reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(overhead_length_));
  }
  if (cached_has_bits & 1792u) {
    ::memset(&payload_length_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&number_of_deltas_) -
        reinterpret_cast<char*>(&payload_length_)) + sizeof(number_of_deltas_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GenericPacketSent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:webrtc.rtclog2.GenericPacketSent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp_ms = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_timestamp_ms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 packet_number = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_packet_number();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &packet_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 overhead_length = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_overhead_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &overhead_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 payload_length = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_payload_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &payload_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 padding_length = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_padding_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &padding_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 number_of_deltas = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_number_of_deltas();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_of_deltas_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes timestamp_ms_deltas = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_timestamp_ms_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes packet_number_deltas = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_packet_number_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes overhead_length_deltas = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_overhead_length_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes payload_length_deltas = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload_length_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes padding_length_deltas = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_padding_length_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:webrtc.rtclog2.GenericPacketSent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:webrtc.rtclog2.GenericPacketSent)
  return false;
#undef DO_
}

void GenericPacketSent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:webrtc.rtclog2.GenericPacketSent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp_ms = 1;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp_ms(), output);
  }

  // optional int64 packet_number = 2;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->packet_number(), output);
  }

  // optional int32 overhead_length = 3;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->overhead_length(), output);
  }

  // optional int32 payload_length = 4;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->payload_length(), output);
  }

  // optional int32 padding_length = 5;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->padding_length(), output);
  }

  // optional uint32 number_of_deltas = 16;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->number_of_deltas(), output);
  }

  // optional bytes timestamp_ms_deltas = 17;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      17, this->timestamp_ms_deltas(), output);
  }

  // optional bytes packet_number_deltas = 18;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      18, this->packet_number_deltas(), output);
  }

  // optional bytes overhead_length_deltas = 19;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      19, this->overhead_length_deltas(), output);
  }

  // optional bytes payload_length_deltas = 20;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->payload_length_deltas(), output);
  }

  // optional bytes padding_length_deltas = 21;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      21, this->padding_length_deltas(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:webrtc.rtclog2.GenericPacketSent)
}

size_t GenericPacketSent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog2.GenericPacketSent)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 255u) {
    // optional bytes timestamp_ms_deltas = 17;
    if (has_timestamp_ms_deltas()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->timestamp_ms_deltas());
    }

    // optional bytes packet_number_deltas = 18;
    if (has_packet_number_deltas()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->packet_number_deltas());
    }

    // optional bytes overhead_length_deltas = 19;
    if (has_overhead_length_deltas()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->overhead_length_deltas());
    }

    // optional bytes payload_length_deltas = 20;
    if (has_payload_length_deltas()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->payload_length_deltas());
    }

    // optional bytes padding_length_deltas = 21;
    if (has_padding_length_deltas()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->padding_length_deltas());
    }

    // optional int64 timestamp_ms = 1;
    if (has_timestamp_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp_ms());
    }

    // optional int64 packet_number = 2;
    if (has_packet_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->packet_number());
    }

    // optional int32 overhead_length = 3;
    if (has_overhead_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->overhead_length());
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional int32 payload_length = 4;
    if (has_payload_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->payload_length());
    }

    // optional int32 padding_length = 5;
    if (has_padding_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->padding_length());
    }

    // optional uint32 number_of_deltas = 16;
    if (has_number_of_deltas()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->number_of_deltas());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GenericPacketSent::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GenericPacketSent*>(&from));
}

void GenericPacketSent::MergeFrom(const GenericPacketSent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog2.GenericPacketSent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_timestamp_ms_deltas();
      timestamp_ms_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timestamp_ms_deltas_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_packet_number_deltas();
      packet_number_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.packet_number_deltas_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_overhead_length_deltas();
      overhead_length_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.overhead_length_deltas_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_payload_length_deltas();
      payload_length_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_length_deltas_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_padding_length_deltas();
      padding_length_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.padding_length_deltas_);
    }
    if (cached_has_bits & 0x00000020u) {
      timestamp_ms_ = from.timestamp_ms_;
    }
    if (cached_has_bits & 0x00000040u) {
      packet_number_ = from.packet_number_;
    }
    if (cached_has_bits & 0x00000080u) {
      overhead_length_ = from.overhead_length_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      payload_length_ = from.payload_length_;
    }
    if (cached_has_bits & 0x00000200u) {
      padding_length_ = from.padding_length_;
    }
    if (cached_has_bits & 0x00000400u) {
      number_of_deltas_ = from.number_of_deltas_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GenericPacketSent::CopyFrom(const GenericPacketSent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog2.GenericPacketSent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenericPacketSent::IsInitialized() const {
  return true;
}

void GenericPacketSent::Swap(GenericPacketSent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GenericPacketSent::InternalSwap(GenericPacketSent* other) {
  using std::swap;
  timestamp_ms_deltas_.Swap(&other->timestamp_ms_deltas_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  packet_number_deltas_.Swap(&other->packet_number_deltas_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  overhead_length_deltas_.Swap(&other->overhead_length_deltas_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  payload_length_deltas_.Swap(&other->payload_length_deltas_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  padding_length_deltas_.Swap(&other->padding_length_deltas_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(timestamp_ms_, other->timestamp_ms_);
  swap(packet_number_, other->packet_number_);
  swap(overhead_length_, other->overhead_length_);
  swap(payload_length_, other->payload_length_);
  swap(padding_length_, other->padding_length_);
  swap(number_of_deltas_, other->number_of_deltas_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string GenericPacketSent::GetTypeName() const {
  return "webrtc.rtclog2.GenericPacketSent";
}


// ===================================================================

void GenericAckReceived::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GenericAckReceived::kTimestampMsFieldNumber;
const int GenericAckReceived::kPacketNumberFieldNumber;
const int GenericAckReceived::kAckedPacketNumberFieldNumber;
const int GenericAckReceived::kReceiveAckedPacketTimeMsFieldNumber;
const int GenericAckReceived::kNumberOfDeltasFieldNumber;
const int GenericAckReceived::kTimestampMsDeltasFieldNumber;
const int GenericAckReceived::kPacketNumberDeltasFieldNumber;
const int GenericAckReceived::kAckedPacketNumberDeltasFieldNumber;
const int GenericAckReceived::kReceiveAckedPacketTimeMsDeltasFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GenericAckReceived::GenericAckReceived()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_rtc_5fevent_5flog2_2eproto::scc_info_GenericAckReceived.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:webrtc.rtclog2.GenericAckReceived)
}
GenericAckReceived::GenericAckReceived(const GenericAckReceived& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  timestamp_ms_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_timestamp_ms_deltas()) {
    timestamp_ms_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timestamp_ms_deltas_);
  }
  packet_number_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_packet_number_deltas()) {
    packet_number_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.packet_number_deltas_);
  }
  acked_packet_number_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_acked_packet_number_deltas()) {
    acked_packet_number_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.acked_packet_number_deltas_);
  }
  receive_acked_packet_time_ms_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_receive_acked_packet_time_ms_deltas()) {
    receive_acked_packet_time_ms_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.receive_acked_packet_time_ms_deltas_);
  }
  ::memcpy(&timestamp_ms_, &from.timestamp_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&number_of_deltas_) -
    reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(number_of_deltas_));
  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog2.GenericAckReceived)
}

void GenericAckReceived::SharedCtor() {
  timestamp_ms_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  packet_number_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  acked_packet_number_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  receive_acked_packet_time_ms_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&number_of_deltas_) -
      reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(number_of_deltas_));
}

GenericAckReceived::~GenericAckReceived() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog2.GenericAckReceived)
  SharedDtor();
}

void GenericAckReceived::SharedDtor() {
  timestamp_ms_deltas_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  packet_number_deltas_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  acked_packet_number_deltas_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  receive_acked_packet_time_ms_deltas_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GenericAckReceived::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GenericAckReceived& GenericAckReceived::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_rtc_5fevent_5flog2_2eproto::scc_info_GenericAckReceived.base);
  return *internal_default_instance();
}


void GenericAckReceived::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog2.GenericAckReceived)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      timestamp_ms_deltas_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      packet_number_deltas_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      acked_packet_number_deltas_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      receive_acked_packet_time_ms_deltas_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 240u) {
    ::memset(&timestamp_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&receive_acked_packet_time_ms_) -
        reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(receive_acked_packet_time_ms_));
  }
  number_of_deltas_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GenericAckReceived::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:webrtc.rtclog2.GenericAckReceived)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp_ms = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_timestamp_ms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 packet_number = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_packet_number();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &packet_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 acked_packet_number = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_acked_packet_number();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &acked_packet_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 receive_acked_packet_time_ms = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_receive_acked_packet_time_ms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &receive_acked_packet_time_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 number_of_deltas = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_number_of_deltas();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_of_deltas_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes timestamp_ms_deltas = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_timestamp_ms_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes packet_number_deltas = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_packet_number_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes acked_packet_number_deltas = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_acked_packet_number_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes receive_acked_packet_time_ms_deltas = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_receive_acked_packet_time_ms_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:webrtc.rtclog2.GenericAckReceived)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:webrtc.rtclog2.GenericAckReceived)
  return false;
#undef DO_
}

void GenericAckReceived::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:webrtc.rtclog2.GenericAckReceived)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp_ms = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp_ms(), output);
  }

  // optional int64 packet_number = 2;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->packet_number(), output);
  }

  // optional int64 acked_packet_number = 3;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->acked_packet_number(), output);
  }

  // optional int64 receive_acked_packet_time_ms = 4;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->receive_acked_packet_time_ms(), output);
  }

  // optional uint32 number_of_deltas = 16;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->number_of_deltas(), output);
  }

  // optional bytes timestamp_ms_deltas = 17;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      17, this->timestamp_ms_deltas(), output);
  }

  // optional bytes packet_number_deltas = 18;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      18, this->packet_number_deltas(), output);
  }

  // optional bytes acked_packet_number_deltas = 19;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      19, this->acked_packet_number_deltas(), output);
  }

  // optional bytes receive_acked_packet_time_ms_deltas = 20;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->receive_acked_packet_time_ms_deltas(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:webrtc.rtclog2.GenericAckReceived)
}

size_t GenericAckReceived::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog2.GenericAckReceived)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 255u) {
    // optional bytes timestamp_ms_deltas = 17;
    if (has_timestamp_ms_deltas()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->timestamp_ms_deltas());
    }

    // optional bytes packet_number_deltas = 18;
    if (has_packet_number_deltas()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->packet_number_deltas());
    }

    // optional bytes acked_packet_number_deltas = 19;
    if (has_acked_packet_number_deltas()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->acked_packet_number_deltas());
    }

    // optional bytes receive_acked_packet_time_ms_deltas = 20;
    if (has_receive_acked_packet_time_ms_deltas()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->receive_acked_packet_time_ms_deltas());
    }

    // optional int64 timestamp_ms = 1;
    if (has_timestamp_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp_ms());
    }

    // optional int64 packet_number = 2;
    if (has_packet_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->packet_number());
    }

    // optional int64 acked_packet_number = 3;
    if (has_acked_packet_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->acked_packet_number());
    }

    // optional int64 receive_acked_packet_time_ms = 4;
    if (has_receive_acked_packet_time_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->receive_acked_packet_time_ms());
    }

  }
  // optional uint32 number_of_deltas = 16;
  if (has_number_of_deltas()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->number_of_deltas());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GenericAckReceived::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GenericAckReceived*>(&from));
}

void GenericAckReceived::MergeFrom(const GenericAckReceived& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog2.GenericAckReceived)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_timestamp_ms_deltas();
      timestamp_ms_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timestamp_ms_deltas_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_packet_number_deltas();
      packet_number_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.packet_number_deltas_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_acked_packet_number_deltas();
      acked_packet_number_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.acked_packet_number_deltas_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_receive_acked_packet_time_ms_deltas();
      receive_acked_packet_time_ms_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.receive_acked_packet_time_ms_deltas_);
    }
    if (cached_has_bits & 0x00000010u) {
      timestamp_ms_ = from.timestamp_ms_;
    }
    if (cached_has_bits & 0x00000020u) {
      packet_number_ = from.packet_number_;
    }
    if (cached_has_bits & 0x00000040u) {
      acked_packet_number_ = from.acked_packet_number_;
    }
    if (cached_has_bits & 0x00000080u) {
      receive_acked_packet_time_ms_ = from.receive_acked_packet_time_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_number_of_deltas(from.number_of_deltas());
  }
}

void GenericAckReceived::CopyFrom(const GenericAckReceived& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog2.GenericAckReceived)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenericAckReceived::IsInitialized() const {
  return true;
}

void GenericAckReceived::Swap(GenericAckReceived* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GenericAckReceived::InternalSwap(GenericAckReceived* other) {
  using std::swap;
  timestamp_ms_deltas_.Swap(&other->timestamp_ms_deltas_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  packet_number_deltas_.Swap(&other->packet_number_deltas_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  acked_packet_number_deltas_.Swap(&other->acked_packet_number_deltas_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  receive_acked_packet_time_ms_deltas_.Swap(&other->receive_acked_packet_time_ms_deltas_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(timestamp_ms_, other->timestamp_ms_);
  swap(packet_number_, other->packet_number_);
  swap(acked_packet_number_, other->acked_packet_number_);
  swap(receive_acked_packet_time_ms_, other->receive_acked_packet_time_ms_);
  swap(number_of_deltas_, other->number_of_deltas_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string GenericAckReceived::GetTypeName() const {
  return "webrtc.rtclog2.GenericAckReceived";
}


// ===================================================================

void IncomingRtpPackets::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IncomingRtpPackets::kTimestampMsFieldNumber;
const int IncomingRtpPackets::kMarkerFieldNumber;
const int IncomingRtpPackets::kPayloadTypeFieldNumber;
const int IncomingRtpPackets::kSequenceNumberFieldNumber;
const int IncomingRtpPackets::kRtpTimestampFieldNumber;
const int IncomingRtpPackets::kSsrcFieldNumber;
const int IncomingRtpPackets::kPayloadSizeFieldNumber;
const int IncomingRtpPackets::kHeaderSizeFieldNumber;
const int IncomingRtpPackets::kPaddingSizeFieldNumber;
const int IncomingRtpPackets::kNumberOfDeltasFieldNumber;
const int IncomingRtpPackets::kTransportSequenceNumberFieldNumber;
const int IncomingRtpPackets::kTransmissionTimeOffsetFieldNumber;
const int IncomingRtpPackets::kAbsoluteSendTimeFieldNumber;
const int IncomingRtpPackets::kVideoRotationFieldNumber;
const int IncomingRtpPackets::kAudioLevelFieldNumber;
const int IncomingRtpPackets::kVoiceActivityFieldNumber;
const int IncomingRtpPackets::kTimestampMsDeltasFieldNumber;
const int IncomingRtpPackets::kMarkerDeltasFieldNumber;
const int IncomingRtpPackets::kPayloadTypeDeltasFieldNumber;
const int IncomingRtpPackets::kSequenceNumberDeltasFieldNumber;
const int IncomingRtpPackets::kRtpTimestampDeltasFieldNumber;
const int IncomingRtpPackets::kSsrcDeltasFieldNumber;
const int IncomingRtpPackets::kPayloadSizeDeltasFieldNumber;
const int IncomingRtpPackets::kHeaderSizeDeltasFieldNumber;
const int IncomingRtpPackets::kPaddingSizeDeltasFieldNumber;
const int IncomingRtpPackets::kTransportSequenceNumberDeltasFieldNumber;
const int IncomingRtpPackets::kTransmissionTimeOffsetDeltasFieldNumber;
const int IncomingRtpPackets::kAbsoluteSendTimeDeltasFieldNumber;
const int IncomingRtpPackets::kVideoRotationDeltasFieldNumber;
const int IncomingRtpPackets::kAudioLevelDeltasFieldNumber;
const int IncomingRtpPackets::kVoiceActivityDeltasFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IncomingRtpPackets::IncomingRtpPackets()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_rtc_5fevent_5flog2_2eproto::scc_info_IncomingRtpPackets.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:webrtc.rtclog2.IncomingRtpPackets)
}
IncomingRtpPackets::IncomingRtpPackets(const IncomingRtpPackets& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  timestamp_ms_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_timestamp_ms_deltas()) {
    timestamp_ms_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timestamp_ms_deltas_);
  }
  marker_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_marker_deltas()) {
    marker_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.marker_deltas_);
  }
  payload_type_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_payload_type_deltas()) {
    payload_type_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_type_deltas_);
  }
  sequence_number_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sequence_number_deltas()) {
    sequence_number_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sequence_number_deltas_);
  }
  rtp_timestamp_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_rtp_timestamp_deltas()) {
    rtp_timestamp_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rtp_timestamp_deltas_);
  }
  ssrc_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ssrc_deltas()) {
    ssrc_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ssrc_deltas_);
  }
  payload_size_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_payload_size_deltas()) {
    payload_size_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_size_deltas_);
  }
  header_size_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_header_size_deltas()) {
    header_size_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.header_size_deltas_);
  }
  padding_size_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_padding_size_deltas()) {
    padding_size_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.padding_size_deltas_);
  }
  transport_sequence_number_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_transport_sequence_number_deltas()) {
    transport_sequence_number_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.transport_sequence_number_deltas_);
  }
  transmission_time_offset_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_transmission_time_offset_deltas()) {
    transmission_time_offset_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.transmission_time_offset_deltas_);
  }
  absolute_send_time_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_absolute_send_time_deltas()) {
    absolute_send_time_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.absolute_send_time_deltas_);
  }
  video_rotation_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_video_rotation_deltas()) {
    video_rotation_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.video_rotation_deltas_);
  }
  audio_level_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_audio_level_deltas()) {
    audio_level_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.audio_level_deltas_);
  }
  voice_activity_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_voice_activity_deltas()) {
    voice_activity_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.voice_activity_deltas_);
  }
  ::memcpy(&timestamp_ms_, &from.timestamp_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&audio_level_) -
    reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(audio_level_));
  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog2.IncomingRtpPackets)
}

void IncomingRtpPackets::SharedCtor() {
  timestamp_ms_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  marker_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  payload_type_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sequence_number_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rtp_timestamp_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ssrc_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  payload_size_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  header_size_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  padding_size_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transport_sequence_number_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transmission_time_offset_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  absolute_send_time_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  video_rotation_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  audio_level_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  voice_activity_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&audio_level_) -
      reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(audio_level_));
}

IncomingRtpPackets::~IncomingRtpPackets() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog2.IncomingRtpPackets)
  SharedDtor();
}

void IncomingRtpPackets::SharedDtor() {
  timestamp_ms_deltas_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  marker_deltas_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  payload_type_deltas_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sequence_number_deltas_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rtp_timestamp_deltas_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ssrc_deltas_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  payload_size_deltas_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  header_size_deltas_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  padding_size_deltas_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transport_sequence_number_deltas_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transmission_time_offset_deltas_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  absolute_send_time_deltas_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  video_rotation_deltas_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  audio_level_deltas_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  voice_activity_deltas_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void IncomingRtpPackets::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IncomingRtpPackets& IncomingRtpPackets::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_rtc_5fevent_5flog2_2eproto::scc_info_IncomingRtpPackets.base);
  return *internal_default_instance();
}


void IncomingRtpPackets::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog2.IncomingRtpPackets)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      timestamp_ms_deltas_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      marker_deltas_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      payload_type_deltas_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      sequence_number_deltas_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      rtp_timestamp_deltas_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      ssrc_deltas_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000040u) {
      payload_size_deltas_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000080u) {
      header_size_deltas_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 32512u) {
    if (cached_has_bits & 0x00000100u) {
      padding_size_deltas_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000200u) {
      transport_sequence_number_deltas_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000400u) {
      transmission_time_offset_deltas_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000800u) {
      absolute_send_time_deltas_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00001000u) {
      video_rotation_deltas_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00002000u) {
      audio_level_deltas_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00004000u) {
      voice_activity_deltas_.ClearNonDefaultToEmptyNoArena();
    }
  }
  timestamp_ms_ = GOOGLE_LONGLONG(0);
  if (cached_has_bits & 16711680u) {
    ::memset(&payload_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&number_of_deltas_) -
        reinterpret_cast<char*>(&payload_type_)) + sizeof(number_of_deltas_));
  }
  if (cached_has_bits & 2130706432u) {
    ::memset(&marker_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&audio_level_) -
        reinterpret_cast<char*>(&marker_)) + sizeof(audio_level_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool IncomingRtpPackets::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:webrtc.rtclog2.IncomingRtpPackets)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp_ms = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_timestamp_ms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool marker = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_marker();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &marker_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 payload_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_payload_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &payload_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 sequence_number = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_sequence_number();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sequence_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 rtp_timestamp = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_rtp_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &rtp_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 ssrc = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
          set_has_ssrc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &ssrc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 payload_size = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_payload_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &payload_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 header_size = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_header_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &header_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 padding_size = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_padding_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &padding_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 number_of_deltas = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_number_of_deltas();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_of_deltas_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 transport_sequence_number = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_transport_sequence_number();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &transport_sequence_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 transmission_time_offset = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_transmission_time_offset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &transmission_time_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 absolute_send_time = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_absolute_send_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &absolute_send_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 video_rotation = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          set_has_video_rotation();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &video_rotation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 audio_level = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          set_has_audio_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &audio_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool voice_activity = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          set_has_voice_activity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &voice_activity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes timestamp_ms_deltas = 101;
      case 101: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 810 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_timestamp_ms_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes marker_deltas = 102;
      case 102: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 818 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_marker_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes payload_type_deltas = 103;
      case 103: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 826 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload_type_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes sequence_number_deltas = 104;
      case 104: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 834 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sequence_number_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes rtp_timestamp_deltas = 105;
      case 105: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 842 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_rtp_timestamp_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes ssrc_deltas = 106;
      case 106: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 850 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ssrc_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes payload_size_deltas = 108;
      case 108: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 866 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload_size_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes header_size_deltas = 109;
      case 109: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 874 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_header_size_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes padding_size_deltas = 110;
      case 110: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 882 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_padding_size_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes transport_sequence_number_deltas = 115;
      case 115: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 922 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_transport_sequence_number_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes transmission_time_offset_deltas = 116;
      case 116: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 930 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_transmission_time_offset_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes absolute_send_time_deltas = 117;
      case 117: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 938 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_absolute_send_time_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes video_rotation_deltas = 118;
      case 118: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 946 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_video_rotation_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes audio_level_deltas = 119;
      case 119: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 954 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_audio_level_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes voice_activity_deltas = 120;
      case 120: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 962 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_voice_activity_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:webrtc.rtclog2.IncomingRtpPackets)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:webrtc.rtclog2.IncomingRtpPackets)
  return false;
#undef DO_
}

void IncomingRtpPackets::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:webrtc.rtclog2.IncomingRtpPackets)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp_ms = 1;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp_ms(), output);
  }

  // optional bool marker = 2;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->marker(), output);
  }

  // optional uint32 payload_type = 3;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->payload_type(), output);
  }

  // optional uint32 sequence_number = 4;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sequence_number(), output);
  }

  // optional fixed32 rtp_timestamp = 5;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(5, this->rtp_timestamp(), output);
  }

  // optional fixed32 ssrc = 6;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(6, this->ssrc(), output);
  }

  // optional uint32 payload_size = 8;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->payload_size(), output);
  }

  // optional uint32 header_size = 9;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->header_size(), output);
  }

  // optional uint32 padding_size = 10;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->padding_size(), output);
  }

  // optional uint32 number_of_deltas = 11;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->number_of_deltas(), output);
  }

  // optional uint32 transport_sequence_number = 15;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->transport_sequence_number(), output);
  }

  // optional int32 transmission_time_offset = 16;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->transmission_time_offset(), output);
  }

  // optional uint32 absolute_send_time = 17;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->absolute_send_time(), output);
  }

  // optional uint32 video_rotation = 18;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->video_rotation(), output);
  }

  // optional uint32 audio_level = 19;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->audio_level(), output);
  }

  // optional bool voice_activity = 20;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->voice_activity(), output);
  }

  // optional bytes timestamp_ms_deltas = 101;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      101, this->timestamp_ms_deltas(), output);
  }

  // optional bytes marker_deltas = 102;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      102, this->marker_deltas(), output);
  }

  // optional bytes payload_type_deltas = 103;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      103, this->payload_type_deltas(), output);
  }

  // optional bytes sequence_number_deltas = 104;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      104, this->sequence_number_deltas(), output);
  }

  // optional bytes rtp_timestamp_deltas = 105;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      105, this->rtp_timestamp_deltas(), output);
  }

  // optional bytes ssrc_deltas = 106;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      106, this->ssrc_deltas(), output);
  }

  // optional bytes payload_size_deltas = 108;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      108, this->payload_size_deltas(), output);
  }

  // optional bytes header_size_deltas = 109;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      109, this->header_size_deltas(), output);
  }

  // optional bytes padding_size_deltas = 110;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      110, this->padding_size_deltas(), output);
  }

  // optional bytes transport_sequence_number_deltas = 115;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      115, this->transport_sequence_number_deltas(), output);
  }

  // optional bytes transmission_time_offset_deltas = 116;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      116, this->transmission_time_offset_deltas(), output);
  }

  // optional bytes absolute_send_time_deltas = 117;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      117, this->absolute_send_time_deltas(), output);
  }

  // optional bytes video_rotation_deltas = 118;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      118, this->video_rotation_deltas(), output);
  }

  // optional bytes audio_level_deltas = 119;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      119, this->audio_level_deltas(), output);
  }

  // optional bytes voice_activity_deltas = 120;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      120, this->voice_activity_deltas(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:webrtc.rtclog2.IncomingRtpPackets)
}

size_t IncomingRtpPackets::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog2.IncomingRtpPackets)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 255u) {
    // optional bytes timestamp_ms_deltas = 101;
    if (has_timestamp_ms_deltas()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->timestamp_ms_deltas());
    }

    // optional bytes marker_deltas = 102;
    if (has_marker_deltas()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->marker_deltas());
    }

    // optional bytes payload_type_deltas = 103;
    if (has_payload_type_deltas()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->payload_type_deltas());
    }

    // optional bytes sequence_number_deltas = 104;
    if (has_sequence_number_deltas()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sequence_number_deltas());
    }

    // optional bytes rtp_timestamp_deltas = 105;
    if (has_rtp_timestamp_deltas()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->rtp_timestamp_deltas());
    }

    // optional bytes ssrc_deltas = 106;
    if (has_ssrc_deltas()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ssrc_deltas());
    }

    // optional bytes payload_size_deltas = 108;
    if (has_payload_size_deltas()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->payload_size_deltas());
    }

    // optional bytes header_size_deltas = 109;
    if (has_header_size_deltas()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->header_size_deltas());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional bytes padding_size_deltas = 110;
    if (has_padding_size_deltas()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->padding_size_deltas());
    }

    // optional bytes transport_sequence_number_deltas = 115;
    if (has_transport_sequence_number_deltas()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->transport_sequence_number_deltas());
    }

    // optional bytes transmission_time_offset_deltas = 116;
    if (has_transmission_time_offset_deltas()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->transmission_time_offset_deltas());
    }

    // optional bytes absolute_send_time_deltas = 117;
    if (has_absolute_send_time_deltas()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->absolute_send_time_deltas());
    }

    // optional bytes video_rotation_deltas = 118;
    if (has_video_rotation_deltas()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->video_rotation_deltas());
    }

    // optional bytes audio_level_deltas = 119;
    if (has_audio_level_deltas()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->audio_level_deltas());
    }

    // optional bytes voice_activity_deltas = 120;
    if (has_voice_activity_deltas()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->voice_activity_deltas());
    }

    // optional int64 timestamp_ms = 1;
    if (has_timestamp_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp_ms());
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional uint32 payload_type = 3;
    if (has_payload_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->payload_type());
    }

    // optional uint32 sequence_number = 4;
    if (has_sequence_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sequence_number());
    }

    // optional fixed32 rtp_timestamp = 5;
    if (has_rtp_timestamp()) {
      total_size += 1 + 4;
    }

    // optional fixed32 ssrc = 6;
    if (has_ssrc()) {
      total_size += 1 + 4;
    }

    // optional uint32 payload_size = 8;
    if (has_payload_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->payload_size());
    }

    // optional uint32 header_size = 9;
    if (has_header_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->header_size());
    }

    // optional uint32 padding_size = 10;
    if (has_padding_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->padding_size());
    }

    // optional uint32 number_of_deltas = 11;
    if (has_number_of_deltas()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->number_of_deltas());
    }

  }
  if (_has_bits_[24 / 32] & 2130706432u) {
    // optional bool marker = 2;
    if (has_marker()) {
      total_size += 1 + 1;
    }

    // optional bool voice_activity = 20;
    if (has_voice_activity()) {
      total_size += 2 + 1;
    }

    // optional uint32 transport_sequence_number = 15;
    if (has_transport_sequence_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->transport_sequence_number());
    }

    // optional int32 transmission_time_offset = 16;
    if (has_transmission_time_offset()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->transmission_time_offset());
    }

    // optional uint32 absolute_send_time = 17;
    if (has_absolute_send_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->absolute_send_time());
    }

    // optional uint32 video_rotation = 18;
    if (has_video_rotation()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->video_rotation());
    }

    // optional uint32 audio_level = 19;
    if (has_audio_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->audio_level());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IncomingRtpPackets::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IncomingRtpPackets*>(&from));
}

void IncomingRtpPackets::MergeFrom(const IncomingRtpPackets& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog2.IncomingRtpPackets)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_timestamp_ms_deltas();
      timestamp_ms_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timestamp_ms_deltas_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_marker_deltas();
      marker_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.marker_deltas_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_payload_type_deltas();
      payload_type_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_type_deltas_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_sequence_number_deltas();
      sequence_number_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sequence_number_deltas_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_rtp_timestamp_deltas();
      rtp_timestamp_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rtp_timestamp_deltas_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_ssrc_deltas();
      ssrc_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ssrc_deltas_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_payload_size_deltas();
      payload_size_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_size_deltas_);
    }
    if (cached_has_bits & 0x00000080u) {
      set_has_header_size_deltas();
      header_size_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.header_size_deltas_);
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      set_has_padding_size_deltas();
      padding_size_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.padding_size_deltas_);
    }
    if (cached_has_bits & 0x00000200u) {
      set_has_transport_sequence_number_deltas();
      transport_sequence_number_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.transport_sequence_number_deltas_);
    }
    if (cached_has_bits & 0x00000400u) {
      set_has_transmission_time_offset_deltas();
      transmission_time_offset_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.transmission_time_offset_deltas_);
    }
    if (cached_has_bits & 0x00000800u) {
      set_has_absolute_send_time_deltas();
      absolute_send_time_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.absolute_send_time_deltas_);
    }
    if (cached_has_bits & 0x00001000u) {
      set_has_video_rotation_deltas();
      video_rotation_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.video_rotation_deltas_);
    }
    if (cached_has_bits & 0x00002000u) {
      set_has_audio_level_deltas();
      audio_level_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.audio_level_deltas_);
    }
    if (cached_has_bits & 0x00004000u) {
      set_has_voice_activity_deltas();
      voice_activity_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.voice_activity_deltas_);
    }
    if (cached_has_bits & 0x00008000u) {
      timestamp_ms_ = from.timestamp_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      payload_type_ = from.payload_type_;
    }
    if (cached_has_bits & 0x00020000u) {
      sequence_number_ = from.sequence_number_;
    }
    if (cached_has_bits & 0x00040000u) {
      rtp_timestamp_ = from.rtp_timestamp_;
    }
    if (cached_has_bits & 0x00080000u) {
      ssrc_ = from.ssrc_;
    }
    if (cached_has_bits & 0x00100000u) {
      payload_size_ = from.payload_size_;
    }
    if (cached_has_bits & 0x00200000u) {
      header_size_ = from.header_size_;
    }
    if (cached_has_bits & 0x00400000u) {
      padding_size_ = from.padding_size_;
    }
    if (cached_has_bits & 0x00800000u) {
      number_of_deltas_ = from.number_of_deltas_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 2130706432u) {
    if (cached_has_bits & 0x01000000u) {
      marker_ = from.marker_;
    }
    if (cached_has_bits & 0x02000000u) {
      voice_activity_ = from.voice_activity_;
    }
    if (cached_has_bits & 0x04000000u) {
      transport_sequence_number_ = from.transport_sequence_number_;
    }
    if (cached_has_bits & 0x08000000u) {
      transmission_time_offset_ = from.transmission_time_offset_;
    }
    if (cached_has_bits & 0x10000000u) {
      absolute_send_time_ = from.absolute_send_time_;
    }
    if (cached_has_bits & 0x20000000u) {
      video_rotation_ = from.video_rotation_;
    }
    if (cached_has_bits & 0x40000000u) {
      audio_level_ = from.audio_level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void IncomingRtpPackets::CopyFrom(const IncomingRtpPackets& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog2.IncomingRtpPackets)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IncomingRtpPackets::IsInitialized() const {
  return true;
}

void IncomingRtpPackets::Swap(IncomingRtpPackets* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IncomingRtpPackets::InternalSwap(IncomingRtpPackets* other) {
  using std::swap;
  timestamp_ms_deltas_.Swap(&other->timestamp_ms_deltas_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  marker_deltas_.Swap(&other->marker_deltas_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  payload_type_deltas_.Swap(&other->payload_type_deltas_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sequence_number_deltas_.Swap(&other->sequence_number_deltas_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  rtp_timestamp_deltas_.Swap(&other->rtp_timestamp_deltas_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ssrc_deltas_.Swap(&other->ssrc_deltas_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  payload_size_deltas_.Swap(&other->payload_size_deltas_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  header_size_deltas_.Swap(&other->header_size_deltas_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  padding_size_deltas_.Swap(&other->padding_size_deltas_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  transport_sequence_number_deltas_.Swap(&other->transport_sequence_number_deltas_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  transmission_time_offset_deltas_.Swap(&other->transmission_time_offset_deltas_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  absolute_send_time_deltas_.Swap(&other->absolute_send_time_deltas_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  video_rotation_deltas_.Swap(&other->video_rotation_deltas_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  audio_level_deltas_.Swap(&other->audio_level_deltas_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  voice_activity_deltas_.Swap(&other->voice_activity_deltas_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(timestamp_ms_, other->timestamp_ms_);
  swap(payload_type_, other->payload_type_);
  swap(sequence_number_, other->sequence_number_);
  swap(rtp_timestamp_, other->rtp_timestamp_);
  swap(ssrc_, other->ssrc_);
  swap(payload_size_, other->payload_size_);
  swap(header_size_, other->header_size_);
  swap(padding_size_, other->padding_size_);
  swap(number_of_deltas_, other->number_of_deltas_);
  swap(marker_, other->marker_);
  swap(voice_activity_, other->voice_activity_);
  swap(transport_sequence_number_, other->transport_sequence_number_);
  swap(transmission_time_offset_, other->transmission_time_offset_);
  swap(absolute_send_time_, other->absolute_send_time_);
  swap(video_rotation_, other->video_rotation_);
  swap(audio_level_, other->audio_level_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string IncomingRtpPackets::GetTypeName() const {
  return "webrtc.rtclog2.IncomingRtpPackets";
}


// ===================================================================

void OutgoingRtpPackets::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OutgoingRtpPackets::kTimestampMsFieldNumber;
const int OutgoingRtpPackets::kMarkerFieldNumber;
const int OutgoingRtpPackets::kPayloadTypeFieldNumber;
const int OutgoingRtpPackets::kSequenceNumberFieldNumber;
const int OutgoingRtpPackets::kRtpTimestampFieldNumber;
const int OutgoingRtpPackets::kSsrcFieldNumber;
const int OutgoingRtpPackets::kPayloadSizeFieldNumber;
const int OutgoingRtpPackets::kHeaderSizeFieldNumber;
const int OutgoingRtpPackets::kPaddingSizeFieldNumber;
const int OutgoingRtpPackets::kNumberOfDeltasFieldNumber;
const int OutgoingRtpPackets::kTransportSequenceNumberFieldNumber;
const int OutgoingRtpPackets::kTransmissionTimeOffsetFieldNumber;
const int OutgoingRtpPackets::kAbsoluteSendTimeFieldNumber;
const int OutgoingRtpPackets::kVideoRotationFieldNumber;
const int OutgoingRtpPackets::kAudioLevelFieldNumber;
const int OutgoingRtpPackets::kVoiceActivityFieldNumber;
const int OutgoingRtpPackets::kTimestampMsDeltasFieldNumber;
const int OutgoingRtpPackets::kMarkerDeltasFieldNumber;
const int OutgoingRtpPackets::kPayloadTypeDeltasFieldNumber;
const int OutgoingRtpPackets::kSequenceNumberDeltasFieldNumber;
const int OutgoingRtpPackets::kRtpTimestampDeltasFieldNumber;
const int OutgoingRtpPackets::kSsrcDeltasFieldNumber;
const int OutgoingRtpPackets::kPayloadSizeDeltasFieldNumber;
const int OutgoingRtpPackets::kHeaderSizeDeltasFieldNumber;
const int OutgoingRtpPackets::kPaddingSizeDeltasFieldNumber;
const int OutgoingRtpPackets::kTransportSequenceNumberDeltasFieldNumber;
const int OutgoingRtpPackets::kTransmissionTimeOffsetDeltasFieldNumber;
const int OutgoingRtpPackets::kAbsoluteSendTimeDeltasFieldNumber;
const int OutgoingRtpPackets::kVideoRotationDeltasFieldNumber;
const int OutgoingRtpPackets::kAudioLevelDeltasFieldNumber;
const int OutgoingRtpPackets::kVoiceActivityDeltasFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OutgoingRtpPackets::OutgoingRtpPackets()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_rtc_5fevent_5flog2_2eproto::scc_info_OutgoingRtpPackets.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:webrtc.rtclog2.OutgoingRtpPackets)
}
OutgoingRtpPackets::OutgoingRtpPackets(const OutgoingRtpPackets& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  timestamp_ms_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_timestamp_ms_deltas()) {
    timestamp_ms_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timestamp_ms_deltas_);
  }
  marker_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_marker_deltas()) {
    marker_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.marker_deltas_);
  }
  payload_type_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_payload_type_deltas()) {
    payload_type_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_type_deltas_);
  }
  sequence_number_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sequence_number_deltas()) {
    sequence_number_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sequence_number_deltas_);
  }
  rtp_timestamp_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_rtp_timestamp_deltas()) {
    rtp_timestamp_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rtp_timestamp_deltas_);
  }
  ssrc_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ssrc_deltas()) {
    ssrc_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ssrc_deltas_);
  }
  payload_size_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_payload_size_deltas()) {
    payload_size_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_size_deltas_);
  }
  header_size_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_header_size_deltas()) {
    header_size_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.header_size_deltas_);
  }
  padding_size_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_padding_size_deltas()) {
    padding_size_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.padding_size_deltas_);
  }
  transport_sequence_number_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_transport_sequence_number_deltas()) {
    transport_sequence_number_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.transport_sequence_number_deltas_);
  }
  transmission_time_offset_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_transmission_time_offset_deltas()) {
    transmission_time_offset_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.transmission_time_offset_deltas_);
  }
  absolute_send_time_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_absolute_send_time_deltas()) {
    absolute_send_time_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.absolute_send_time_deltas_);
  }
  video_rotation_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_video_rotation_deltas()) {
    video_rotation_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.video_rotation_deltas_);
  }
  audio_level_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_audio_level_deltas()) {
    audio_level_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.audio_level_deltas_);
  }
  voice_activity_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_voice_activity_deltas()) {
    voice_activity_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.voice_activity_deltas_);
  }
  ::memcpy(&timestamp_ms_, &from.timestamp_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&audio_level_) -
    reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(audio_level_));
  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog2.OutgoingRtpPackets)
}

void OutgoingRtpPackets::SharedCtor() {
  timestamp_ms_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  marker_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  payload_type_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sequence_number_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rtp_timestamp_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ssrc_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  payload_size_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  header_size_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  padding_size_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transport_sequence_number_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transmission_time_offset_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  absolute_send_time_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  video_rotation_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  audio_level_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  voice_activity_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&audio_level_) -
      reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(audio_level_));
}

OutgoingRtpPackets::~OutgoingRtpPackets() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog2.OutgoingRtpPackets)
  SharedDtor();
}

void OutgoingRtpPackets::SharedDtor() {
  timestamp_ms_deltas_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  marker_deltas_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  payload_type_deltas_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sequence_number_deltas_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rtp_timestamp_deltas_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ssrc_deltas_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  payload_size_deltas_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  header_size_deltas_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  padding_size_deltas_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transport_sequence_number_deltas_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transmission_time_offset_deltas_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  absolute_send_time_deltas_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  video_rotation_deltas_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  audio_level_deltas_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  voice_activity_deltas_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OutgoingRtpPackets::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OutgoingRtpPackets& OutgoingRtpPackets::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_rtc_5fevent_5flog2_2eproto::scc_info_OutgoingRtpPackets.base);
  return *internal_default_instance();
}


void OutgoingRtpPackets::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog2.OutgoingRtpPackets)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      timestamp_ms_deltas_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      marker_deltas_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      payload_type_deltas_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      sequence_number_deltas_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      rtp_timestamp_deltas_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      ssrc_deltas_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000040u) {
      payload_size_deltas_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000080u) {
      header_size_deltas_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 32512u) {
    if (cached_has_bits & 0x00000100u) {
      padding_size_deltas_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000200u) {
      transport_sequence_number_deltas_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000400u) {
      transmission_time_offset_deltas_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000800u) {
      absolute_send_time_deltas_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00001000u) {
      video_rotation_deltas_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00002000u) {
      audio_level_deltas_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00004000u) {
      voice_activity_deltas_.ClearNonDefaultToEmptyNoArena();
    }
  }
  timestamp_ms_ = GOOGLE_LONGLONG(0);
  if (cached_has_bits & 16711680u) {
    ::memset(&payload_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&number_of_deltas_) -
        reinterpret_cast<char*>(&payload_type_)) + sizeof(number_of_deltas_));
  }
  if (cached_has_bits & 2130706432u) {
    ::memset(&marker_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&audio_level_) -
        reinterpret_cast<char*>(&marker_)) + sizeof(audio_level_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OutgoingRtpPackets::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:webrtc.rtclog2.OutgoingRtpPackets)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp_ms = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_timestamp_ms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool marker = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_marker();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &marker_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 payload_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_payload_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &payload_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 sequence_number = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_sequence_number();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sequence_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 rtp_timestamp = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_rtp_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &rtp_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 ssrc = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
          set_has_ssrc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &ssrc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 payload_size = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_payload_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &payload_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 header_size = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_header_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &header_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 padding_size = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_padding_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &padding_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 number_of_deltas = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_number_of_deltas();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_of_deltas_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 transport_sequence_number = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_transport_sequence_number();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &transport_sequence_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 transmission_time_offset = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_transmission_time_offset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &transmission_time_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 absolute_send_time = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_absolute_send_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &absolute_send_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 video_rotation = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          set_has_video_rotation();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &video_rotation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 audio_level = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          set_has_audio_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &audio_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool voice_activity = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          set_has_voice_activity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &voice_activity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes timestamp_ms_deltas = 101;
      case 101: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 810 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_timestamp_ms_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes marker_deltas = 102;
      case 102: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 818 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_marker_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes payload_type_deltas = 103;
      case 103: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 826 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload_type_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes sequence_number_deltas = 104;
      case 104: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 834 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sequence_number_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes rtp_timestamp_deltas = 105;
      case 105: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 842 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_rtp_timestamp_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes ssrc_deltas = 106;
      case 106: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 850 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ssrc_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes payload_size_deltas = 108;
      case 108: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 866 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload_size_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes header_size_deltas = 109;
      case 109: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 874 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_header_size_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes padding_size_deltas = 110;
      case 110: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 882 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_padding_size_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes transport_sequence_number_deltas = 115;
      case 115: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 922 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_transport_sequence_number_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes transmission_time_offset_deltas = 116;
      case 116: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 930 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_transmission_time_offset_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes absolute_send_time_deltas = 117;
      case 117: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 938 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_absolute_send_time_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes video_rotation_deltas = 118;
      case 118: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 946 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_video_rotation_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes audio_level_deltas = 119;
      case 119: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 954 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_audio_level_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes voice_activity_deltas = 120;
      case 120: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 962 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_voice_activity_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:webrtc.rtclog2.OutgoingRtpPackets)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:webrtc.rtclog2.OutgoingRtpPackets)
  return false;
#undef DO_
}

void OutgoingRtpPackets::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:webrtc.rtclog2.OutgoingRtpPackets)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp_ms = 1;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp_ms(), output);
  }

  // optional bool marker = 2;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->marker(), output);
  }

  // optional uint32 payload_type = 3;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->payload_type(), output);
  }

  // optional uint32 sequence_number = 4;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sequence_number(), output);
  }

  // optional fixed32 rtp_timestamp = 5;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(5, this->rtp_timestamp(), output);
  }

  // optional fixed32 ssrc = 6;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(6, this->ssrc(), output);
  }

  // optional uint32 payload_size = 8;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->payload_size(), output);
  }

  // optional uint32 header_size = 9;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->header_size(), output);
  }

  // optional uint32 padding_size = 10;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->padding_size(), output);
  }

  // optional uint32 number_of_deltas = 11;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->number_of_deltas(), output);
  }

  // optional uint32 transport_sequence_number = 15;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->transport_sequence_number(), output);
  }

  // optional int32 transmission_time_offset = 16;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->transmission_time_offset(), output);
  }

  // optional uint32 absolute_send_time = 17;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->absolute_send_time(), output);
  }

  // optional uint32 video_rotation = 18;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->video_rotation(), output);
  }

  // optional uint32 audio_level = 19;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->audio_level(), output);
  }

  // optional bool voice_activity = 20;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->voice_activity(), output);
  }

  // optional bytes timestamp_ms_deltas = 101;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      101, this->timestamp_ms_deltas(), output);
  }

  // optional bytes marker_deltas = 102;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      102, this->marker_deltas(), output);
  }

  // optional bytes payload_type_deltas = 103;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      103, this->payload_type_deltas(), output);
  }

  // optional bytes sequence_number_deltas = 104;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      104, this->sequence_number_deltas(), output);
  }

  // optional bytes rtp_timestamp_deltas = 105;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      105, this->rtp_timestamp_deltas(), output);
  }

  // optional bytes ssrc_deltas = 106;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      106, this->ssrc_deltas(), output);
  }

  // optional bytes payload_size_deltas = 108;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      108, this->payload_size_deltas(), output);
  }

  // optional bytes header_size_deltas = 109;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      109, this->header_size_deltas(), output);
  }

  // optional bytes padding_size_deltas = 110;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      110, this->padding_size_deltas(), output);
  }

  // optional bytes transport_sequence_number_deltas = 115;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      115, this->transport_sequence_number_deltas(), output);
  }

  // optional bytes transmission_time_offset_deltas = 116;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      116, this->transmission_time_offset_deltas(), output);
  }

  // optional bytes absolute_send_time_deltas = 117;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      117, this->absolute_send_time_deltas(), output);
  }

  // optional bytes video_rotation_deltas = 118;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      118, this->video_rotation_deltas(), output);
  }

  // optional bytes audio_level_deltas = 119;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      119, this->audio_level_deltas(), output);
  }

  // optional bytes voice_activity_deltas = 120;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      120, this->voice_activity_deltas(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:webrtc.rtclog2.OutgoingRtpPackets)
}

size_t OutgoingRtpPackets::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog2.OutgoingRtpPackets)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 255u) {
    // optional bytes timestamp_ms_deltas = 101;
    if (has_timestamp_ms_deltas()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->timestamp_ms_deltas());
    }

    // optional bytes marker_deltas = 102;
    if (has_marker_deltas()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->marker_deltas());
    }

    // optional bytes payload_type_deltas = 103;
    if (has_payload_type_deltas()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->payload_type_deltas());
    }

    // optional bytes sequence_number_deltas = 104;
    if (has_sequence_number_deltas()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sequence_number_deltas());
    }

    // optional bytes rtp_timestamp_deltas = 105;
    if (has_rtp_timestamp_deltas()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->rtp_timestamp_deltas());
    }

    // optional bytes ssrc_deltas = 106;
    if (has_ssrc_deltas()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ssrc_deltas());
    }

    // optional bytes payload_size_deltas = 108;
    if (has_payload_size_deltas()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->payload_size_deltas());
    }

    // optional bytes header_size_deltas = 109;
    if (has_header_size_deltas()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->header_size_deltas());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional bytes padding_size_deltas = 110;
    if (has_padding_size_deltas()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->padding_size_deltas());
    }

    // optional bytes transport_sequence_number_deltas = 115;
    if (has_transport_sequence_number_deltas()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->transport_sequence_number_deltas());
    }

    // optional bytes transmission_time_offset_deltas = 116;
    if (has_transmission_time_offset_deltas()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->transmission_time_offset_deltas());
    }

    // optional bytes absolute_send_time_deltas = 117;
    if (has_absolute_send_time_deltas()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->absolute_send_time_deltas());
    }

    // optional bytes video_rotation_deltas = 118;
    if (has_video_rotation_deltas()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->video_rotation_deltas());
    }

    // optional bytes audio_level_deltas = 119;
    if (has_audio_level_deltas()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->audio_level_deltas());
    }

    // optional bytes voice_activity_deltas = 120;
    if (has_voice_activity_deltas()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->voice_activity_deltas());
    }

    // optional int64 timestamp_ms = 1;
    if (has_timestamp_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp_ms());
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional uint32 payload_type = 3;
    if (has_payload_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->payload_type());
    }

    // optional uint32 sequence_number = 4;
    if (has_sequence_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sequence_number());
    }

    // optional fixed32 rtp_timestamp = 5;
    if (has_rtp_timestamp()) {
      total_size += 1 + 4;
    }

    // optional fixed32 ssrc = 6;
    if (has_ssrc()) {
      total_size += 1 + 4;
    }

    // optional uint32 payload_size = 8;
    if (has_payload_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->payload_size());
    }

    // optional uint32 header_size = 9;
    if (has_header_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->header_size());
    }

    // optional uint32 padding_size = 10;
    if (has_padding_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->padding_size());
    }

    // optional uint32 number_of_deltas = 11;
    if (has_number_of_deltas()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->number_of_deltas());
    }

  }
  if (_has_bits_[24 / 32] & 2130706432u) {
    // optional bool marker = 2;
    if (has_marker()) {
      total_size += 1 + 1;
    }

    // optional bool voice_activity = 20;
    if (has_voice_activity()) {
      total_size += 2 + 1;
    }

    // optional uint32 transport_sequence_number = 15;
    if (has_transport_sequence_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->transport_sequence_number());
    }

    // optional int32 transmission_time_offset = 16;
    if (has_transmission_time_offset()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->transmission_time_offset());
    }

    // optional uint32 absolute_send_time = 17;
    if (has_absolute_send_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->absolute_send_time());
    }

    // optional uint32 video_rotation = 18;
    if (has_video_rotation()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->video_rotation());
    }

    // optional uint32 audio_level = 19;
    if (has_audio_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->audio_level());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OutgoingRtpPackets::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const OutgoingRtpPackets*>(&from));
}

void OutgoingRtpPackets::MergeFrom(const OutgoingRtpPackets& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog2.OutgoingRtpPackets)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_timestamp_ms_deltas();
      timestamp_ms_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timestamp_ms_deltas_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_marker_deltas();
      marker_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.marker_deltas_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_payload_type_deltas();
      payload_type_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_type_deltas_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_sequence_number_deltas();
      sequence_number_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sequence_number_deltas_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_rtp_timestamp_deltas();
      rtp_timestamp_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rtp_timestamp_deltas_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_ssrc_deltas();
      ssrc_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ssrc_deltas_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_payload_size_deltas();
      payload_size_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_size_deltas_);
    }
    if (cached_has_bits & 0x00000080u) {
      set_has_header_size_deltas();
      header_size_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.header_size_deltas_);
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      set_has_padding_size_deltas();
      padding_size_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.padding_size_deltas_);
    }
    if (cached_has_bits & 0x00000200u) {
      set_has_transport_sequence_number_deltas();
      transport_sequence_number_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.transport_sequence_number_deltas_);
    }
    if (cached_has_bits & 0x00000400u) {
      set_has_transmission_time_offset_deltas();
      transmission_time_offset_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.transmission_time_offset_deltas_);
    }
    if (cached_has_bits & 0x00000800u) {
      set_has_absolute_send_time_deltas();
      absolute_send_time_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.absolute_send_time_deltas_);
    }
    if (cached_has_bits & 0x00001000u) {
      set_has_video_rotation_deltas();
      video_rotation_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.video_rotation_deltas_);
    }
    if (cached_has_bits & 0x00002000u) {
      set_has_audio_level_deltas();
      audio_level_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.audio_level_deltas_);
    }
    if (cached_has_bits & 0x00004000u) {
      set_has_voice_activity_deltas();
      voice_activity_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.voice_activity_deltas_);
    }
    if (cached_has_bits & 0x00008000u) {
      timestamp_ms_ = from.timestamp_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      payload_type_ = from.payload_type_;
    }
    if (cached_has_bits & 0x00020000u) {
      sequence_number_ = from.sequence_number_;
    }
    if (cached_has_bits & 0x00040000u) {
      rtp_timestamp_ = from.rtp_timestamp_;
    }
    if (cached_has_bits & 0x00080000u) {
      ssrc_ = from.ssrc_;
    }
    if (cached_has_bits & 0x00100000u) {
      payload_size_ = from.payload_size_;
    }
    if (cached_has_bits & 0x00200000u) {
      header_size_ = from.header_size_;
    }
    if (cached_has_bits & 0x00400000u) {
      padding_size_ = from.padding_size_;
    }
    if (cached_has_bits & 0x00800000u) {
      number_of_deltas_ = from.number_of_deltas_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 2130706432u) {
    if (cached_has_bits & 0x01000000u) {
      marker_ = from.marker_;
    }
    if (cached_has_bits & 0x02000000u) {
      voice_activity_ = from.voice_activity_;
    }
    if (cached_has_bits & 0x04000000u) {
      transport_sequence_number_ = from.transport_sequence_number_;
    }
    if (cached_has_bits & 0x08000000u) {
      transmission_time_offset_ = from.transmission_time_offset_;
    }
    if (cached_has_bits & 0x10000000u) {
      absolute_send_time_ = from.absolute_send_time_;
    }
    if (cached_has_bits & 0x20000000u) {
      video_rotation_ = from.video_rotation_;
    }
    if (cached_has_bits & 0x40000000u) {
      audio_level_ = from.audio_level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OutgoingRtpPackets::CopyFrom(const OutgoingRtpPackets& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog2.OutgoingRtpPackets)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OutgoingRtpPackets::IsInitialized() const {
  return true;
}

void OutgoingRtpPackets::Swap(OutgoingRtpPackets* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OutgoingRtpPackets::InternalSwap(OutgoingRtpPackets* other) {
  using std::swap;
  timestamp_ms_deltas_.Swap(&other->timestamp_ms_deltas_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  marker_deltas_.Swap(&other->marker_deltas_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  payload_type_deltas_.Swap(&other->payload_type_deltas_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sequence_number_deltas_.Swap(&other->sequence_number_deltas_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  rtp_timestamp_deltas_.Swap(&other->rtp_timestamp_deltas_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ssrc_deltas_.Swap(&other->ssrc_deltas_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  payload_size_deltas_.Swap(&other->payload_size_deltas_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  header_size_deltas_.Swap(&other->header_size_deltas_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  padding_size_deltas_.Swap(&other->padding_size_deltas_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  transport_sequence_number_deltas_.Swap(&other->transport_sequence_number_deltas_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  transmission_time_offset_deltas_.Swap(&other->transmission_time_offset_deltas_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  absolute_send_time_deltas_.Swap(&other->absolute_send_time_deltas_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  video_rotation_deltas_.Swap(&other->video_rotation_deltas_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  audio_level_deltas_.Swap(&other->audio_level_deltas_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  voice_activity_deltas_.Swap(&other->voice_activity_deltas_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(timestamp_ms_, other->timestamp_ms_);
  swap(payload_type_, other->payload_type_);
  swap(sequence_number_, other->sequence_number_);
  swap(rtp_timestamp_, other->rtp_timestamp_);
  swap(ssrc_, other->ssrc_);
  swap(payload_size_, other->payload_size_);
  swap(header_size_, other->header_size_);
  swap(padding_size_, other->padding_size_);
  swap(number_of_deltas_, other->number_of_deltas_);
  swap(marker_, other->marker_);
  swap(voice_activity_, other->voice_activity_);
  swap(transport_sequence_number_, other->transport_sequence_number_);
  swap(transmission_time_offset_, other->transmission_time_offset_);
  swap(absolute_send_time_, other->absolute_send_time_);
  swap(video_rotation_, other->video_rotation_);
  swap(audio_level_, other->audio_level_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string OutgoingRtpPackets::GetTypeName() const {
  return "webrtc.rtclog2.OutgoingRtpPackets";
}


// ===================================================================

void IncomingRtcpPackets::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IncomingRtcpPackets::kTimestampMsFieldNumber;
const int IncomingRtcpPackets::kRawPacketFieldNumber;
const int IncomingRtcpPackets::kNumberOfDeltasFieldNumber;
const int IncomingRtcpPackets::kTimestampMsDeltasFieldNumber;
const int IncomingRtcpPackets::kRawPacketBlobsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IncomingRtcpPackets::IncomingRtcpPackets()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_rtc_5fevent_5flog2_2eproto::scc_info_IncomingRtcpPackets.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:webrtc.rtclog2.IncomingRtcpPackets)
}
IncomingRtcpPackets::IncomingRtcpPackets(const IncomingRtcpPackets& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  raw_packet_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_raw_packet()) {
    raw_packet_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.raw_packet_);
  }
  timestamp_ms_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_timestamp_ms_deltas()) {
    timestamp_ms_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timestamp_ms_deltas_);
  }
  raw_packet_blobs_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_raw_packet_blobs()) {
    raw_packet_blobs_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.raw_packet_blobs_);
  }
  ::memcpy(&timestamp_ms_, &from.timestamp_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&number_of_deltas_) -
    reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(number_of_deltas_));
  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog2.IncomingRtcpPackets)
}

void IncomingRtcpPackets::SharedCtor() {
  raw_packet_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_ms_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  raw_packet_blobs_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&number_of_deltas_) -
      reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(number_of_deltas_));
}

IncomingRtcpPackets::~IncomingRtcpPackets() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog2.IncomingRtcpPackets)
  SharedDtor();
}

void IncomingRtcpPackets::SharedDtor() {
  raw_packet_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_ms_deltas_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  raw_packet_blobs_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void IncomingRtcpPackets::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IncomingRtcpPackets& IncomingRtcpPackets::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_rtc_5fevent_5flog2_2eproto::scc_info_IncomingRtcpPackets.base);
  return *internal_default_instance();
}


void IncomingRtcpPackets::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog2.IncomingRtcpPackets)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      raw_packet_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_ms_deltas_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      raw_packet_blobs_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 24u) {
    ::memset(&timestamp_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&number_of_deltas_) -
        reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(number_of_deltas_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool IncomingRtcpPackets::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:webrtc.rtclog2.IncomingRtcpPackets)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp_ms = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_timestamp_ms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes raw_packet = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_raw_packet()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 number_of_deltas = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_number_of_deltas();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_of_deltas_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes timestamp_ms_deltas = 101;
      case 101: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 810 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_timestamp_ms_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes raw_packet_blobs = 102;
      case 102: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 818 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_raw_packet_blobs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:webrtc.rtclog2.IncomingRtcpPackets)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:webrtc.rtclog2.IncomingRtcpPackets)
  return false;
#undef DO_
}

void IncomingRtcpPackets::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:webrtc.rtclog2.IncomingRtcpPackets)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp_ms = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp_ms(), output);
  }

  // optional bytes raw_packet = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->raw_packet(), output);
  }

  // optional uint32 number_of_deltas = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->number_of_deltas(), output);
  }

  // optional bytes timestamp_ms_deltas = 101;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      101, this->timestamp_ms_deltas(), output);
  }

  // optional bytes raw_packet_blobs = 102;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      102, this->raw_packet_blobs(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:webrtc.rtclog2.IncomingRtcpPackets)
}

size_t IncomingRtcpPackets::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog2.IncomingRtcpPackets)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 31u) {
    // optional bytes raw_packet = 2;
    if (has_raw_packet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->raw_packet());
    }

    // optional bytes timestamp_ms_deltas = 101;
    if (has_timestamp_ms_deltas()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->timestamp_ms_deltas());
    }

    // optional bytes raw_packet_blobs = 102;
    if (has_raw_packet_blobs()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->raw_packet_blobs());
    }

    // optional int64 timestamp_ms = 1;
    if (has_timestamp_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp_ms());
    }

    // optional uint32 number_of_deltas = 3;
    if (has_number_of_deltas()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->number_of_deltas());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IncomingRtcpPackets::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IncomingRtcpPackets*>(&from));
}

void IncomingRtcpPackets::MergeFrom(const IncomingRtcpPackets& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog2.IncomingRtcpPackets)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_raw_packet();
      raw_packet_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.raw_packet_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_timestamp_ms_deltas();
      timestamp_ms_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timestamp_ms_deltas_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_raw_packet_blobs();
      raw_packet_blobs_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.raw_packet_blobs_);
    }
    if (cached_has_bits & 0x00000008u) {
      timestamp_ms_ = from.timestamp_ms_;
    }
    if (cached_has_bits & 0x00000010u) {
      number_of_deltas_ = from.number_of_deltas_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void IncomingRtcpPackets::CopyFrom(const IncomingRtcpPackets& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog2.IncomingRtcpPackets)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IncomingRtcpPackets::IsInitialized() const {
  return true;
}

void IncomingRtcpPackets::Swap(IncomingRtcpPackets* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IncomingRtcpPackets::InternalSwap(IncomingRtcpPackets* other) {
  using std::swap;
  raw_packet_.Swap(&other->raw_packet_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  timestamp_ms_deltas_.Swap(&other->timestamp_ms_deltas_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  raw_packet_blobs_.Swap(&other->raw_packet_blobs_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(timestamp_ms_, other->timestamp_ms_);
  swap(number_of_deltas_, other->number_of_deltas_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string IncomingRtcpPackets::GetTypeName() const {
  return "webrtc.rtclog2.IncomingRtcpPackets";
}


// ===================================================================

void OutgoingRtcpPackets::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OutgoingRtcpPackets::kTimestampMsFieldNumber;
const int OutgoingRtcpPackets::kRawPacketFieldNumber;
const int OutgoingRtcpPackets::kNumberOfDeltasFieldNumber;
const int OutgoingRtcpPackets::kTimestampMsDeltasFieldNumber;
const int OutgoingRtcpPackets::kRawPacketBlobsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OutgoingRtcpPackets::OutgoingRtcpPackets()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_rtc_5fevent_5flog2_2eproto::scc_info_OutgoingRtcpPackets.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:webrtc.rtclog2.OutgoingRtcpPackets)
}
OutgoingRtcpPackets::OutgoingRtcpPackets(const OutgoingRtcpPackets& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  raw_packet_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_raw_packet()) {
    raw_packet_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.raw_packet_);
  }
  timestamp_ms_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_timestamp_ms_deltas()) {
    timestamp_ms_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timestamp_ms_deltas_);
  }
  raw_packet_blobs_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_raw_packet_blobs()) {
    raw_packet_blobs_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.raw_packet_blobs_);
  }
  ::memcpy(&timestamp_ms_, &from.timestamp_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&number_of_deltas_) -
    reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(number_of_deltas_));
  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog2.OutgoingRtcpPackets)
}

void OutgoingRtcpPackets::SharedCtor() {
  raw_packet_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_ms_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  raw_packet_blobs_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&number_of_deltas_) -
      reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(number_of_deltas_));
}

OutgoingRtcpPackets::~OutgoingRtcpPackets() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog2.OutgoingRtcpPackets)
  SharedDtor();
}

void OutgoingRtcpPackets::SharedDtor() {
  raw_packet_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_ms_deltas_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  raw_packet_blobs_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OutgoingRtcpPackets::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OutgoingRtcpPackets& OutgoingRtcpPackets::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_rtc_5fevent_5flog2_2eproto::scc_info_OutgoingRtcpPackets.base);
  return *internal_default_instance();
}


void OutgoingRtcpPackets::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog2.OutgoingRtcpPackets)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      raw_packet_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_ms_deltas_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      raw_packet_blobs_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 24u) {
    ::memset(&timestamp_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&number_of_deltas_) -
        reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(number_of_deltas_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OutgoingRtcpPackets::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:webrtc.rtclog2.OutgoingRtcpPackets)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp_ms = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_timestamp_ms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes raw_packet = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_raw_packet()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 number_of_deltas = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_number_of_deltas();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_of_deltas_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes timestamp_ms_deltas = 101;
      case 101: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 810 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_timestamp_ms_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes raw_packet_blobs = 102;
      case 102: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 818 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_raw_packet_blobs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:webrtc.rtclog2.OutgoingRtcpPackets)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:webrtc.rtclog2.OutgoingRtcpPackets)
  return false;
#undef DO_
}

void OutgoingRtcpPackets::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:webrtc.rtclog2.OutgoingRtcpPackets)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp_ms = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp_ms(), output);
  }

  // optional bytes raw_packet = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->raw_packet(), output);
  }

  // optional uint32 number_of_deltas = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->number_of_deltas(), output);
  }

  // optional bytes timestamp_ms_deltas = 101;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      101, this->timestamp_ms_deltas(), output);
  }

  // optional bytes raw_packet_blobs = 102;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      102, this->raw_packet_blobs(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:webrtc.rtclog2.OutgoingRtcpPackets)
}

size_t OutgoingRtcpPackets::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog2.OutgoingRtcpPackets)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 31u) {
    // optional bytes raw_packet = 2;
    if (has_raw_packet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->raw_packet());
    }

    // optional bytes timestamp_ms_deltas = 101;
    if (has_timestamp_ms_deltas()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->timestamp_ms_deltas());
    }

    // optional bytes raw_packet_blobs = 102;
    if (has_raw_packet_blobs()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->raw_packet_blobs());
    }

    // optional int64 timestamp_ms = 1;
    if (has_timestamp_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp_ms());
    }

    // optional uint32 number_of_deltas = 3;
    if (has_number_of_deltas()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->number_of_deltas());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OutgoingRtcpPackets::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const OutgoingRtcpPackets*>(&from));
}

void OutgoingRtcpPackets::MergeFrom(const OutgoingRtcpPackets& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog2.OutgoingRtcpPackets)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_raw_packet();
      raw_packet_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.raw_packet_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_timestamp_ms_deltas();
      timestamp_ms_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timestamp_ms_deltas_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_raw_packet_blobs();
      raw_packet_blobs_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.raw_packet_blobs_);
    }
    if (cached_has_bits & 0x00000008u) {
      timestamp_ms_ = from.timestamp_ms_;
    }
    if (cached_has_bits & 0x00000010u) {
      number_of_deltas_ = from.number_of_deltas_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OutgoingRtcpPackets::CopyFrom(const OutgoingRtcpPackets& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog2.OutgoingRtcpPackets)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OutgoingRtcpPackets::IsInitialized() const {
  return true;
}

void OutgoingRtcpPackets::Swap(OutgoingRtcpPackets* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OutgoingRtcpPackets::InternalSwap(OutgoingRtcpPackets* other) {
  using std::swap;
  raw_packet_.Swap(&other->raw_packet_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  timestamp_ms_deltas_.Swap(&other->timestamp_ms_deltas_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  raw_packet_blobs_.Swap(&other->raw_packet_blobs_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(timestamp_ms_, other->timestamp_ms_);
  swap(number_of_deltas_, other->number_of_deltas_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string OutgoingRtcpPackets::GetTypeName() const {
  return "webrtc.rtclog2.OutgoingRtcpPackets";
}


// ===================================================================

void AudioPlayoutEvents::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AudioPlayoutEvents::kTimestampMsFieldNumber;
const int AudioPlayoutEvents::kLocalSsrcFieldNumber;
const int AudioPlayoutEvents::kNumberOfDeltasFieldNumber;
const int AudioPlayoutEvents::kTimestampMsDeltasFieldNumber;
const int AudioPlayoutEvents::kLocalSsrcDeltasFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AudioPlayoutEvents::AudioPlayoutEvents()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_rtc_5fevent_5flog2_2eproto::scc_info_AudioPlayoutEvents.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:webrtc.rtclog2.AudioPlayoutEvents)
}
AudioPlayoutEvents::AudioPlayoutEvents(const AudioPlayoutEvents& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  timestamp_ms_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_timestamp_ms_deltas()) {
    timestamp_ms_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timestamp_ms_deltas_);
  }
  local_ssrc_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_local_ssrc_deltas()) {
    local_ssrc_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.local_ssrc_deltas_);
  }
  ::memcpy(&timestamp_ms_, &from.timestamp_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&number_of_deltas_) -
    reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(number_of_deltas_));
  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog2.AudioPlayoutEvents)
}

void AudioPlayoutEvents::SharedCtor() {
  timestamp_ms_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  local_ssrc_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&number_of_deltas_) -
      reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(number_of_deltas_));
}

AudioPlayoutEvents::~AudioPlayoutEvents() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog2.AudioPlayoutEvents)
  SharedDtor();
}

void AudioPlayoutEvents::SharedDtor() {
  timestamp_ms_deltas_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  local_ssrc_deltas_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AudioPlayoutEvents::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AudioPlayoutEvents& AudioPlayoutEvents::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_rtc_5fevent_5flog2_2eproto::scc_info_AudioPlayoutEvents.base);
  return *internal_default_instance();
}


void AudioPlayoutEvents::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog2.AudioPlayoutEvents)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      timestamp_ms_deltas_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      local_ssrc_deltas_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 28u) {
    ::memset(&timestamp_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&number_of_deltas_) -
        reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(number_of_deltas_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AudioPlayoutEvents::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:webrtc.rtclog2.AudioPlayoutEvents)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp_ms = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_timestamp_ms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 local_ssrc = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_local_ssrc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &local_ssrc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 number_of_deltas = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_number_of_deltas();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_of_deltas_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes timestamp_ms_deltas = 101;
      case 101: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 810 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_timestamp_ms_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes local_ssrc_deltas = 102;
      case 102: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 818 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_local_ssrc_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:webrtc.rtclog2.AudioPlayoutEvents)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:webrtc.rtclog2.AudioPlayoutEvents)
  return false;
#undef DO_
}

void AudioPlayoutEvents::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:webrtc.rtclog2.AudioPlayoutEvents)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp_ms = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp_ms(), output);
  }

  // optional uint32 local_ssrc = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->local_ssrc(), output);
  }

  // optional uint32 number_of_deltas = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->number_of_deltas(), output);
  }

  // optional bytes timestamp_ms_deltas = 101;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      101, this->timestamp_ms_deltas(), output);
  }

  // optional bytes local_ssrc_deltas = 102;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      102, this->local_ssrc_deltas(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:webrtc.rtclog2.AudioPlayoutEvents)
}

size_t AudioPlayoutEvents::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog2.AudioPlayoutEvents)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 31u) {
    // optional bytes timestamp_ms_deltas = 101;
    if (has_timestamp_ms_deltas()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->timestamp_ms_deltas());
    }

    // optional bytes local_ssrc_deltas = 102;
    if (has_local_ssrc_deltas()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->local_ssrc_deltas());
    }

    // optional int64 timestamp_ms = 1;
    if (has_timestamp_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp_ms());
    }

    // optional uint32 local_ssrc = 2;
    if (has_local_ssrc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->local_ssrc());
    }

    // optional uint32 number_of_deltas = 3;
    if (has_number_of_deltas()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->number_of_deltas());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AudioPlayoutEvents::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AudioPlayoutEvents*>(&from));
}

void AudioPlayoutEvents::MergeFrom(const AudioPlayoutEvents& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog2.AudioPlayoutEvents)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_timestamp_ms_deltas();
      timestamp_ms_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timestamp_ms_deltas_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_local_ssrc_deltas();
      local_ssrc_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.local_ssrc_deltas_);
    }
    if (cached_has_bits & 0x00000004u) {
      timestamp_ms_ = from.timestamp_ms_;
    }
    if (cached_has_bits & 0x00000008u) {
      local_ssrc_ = from.local_ssrc_;
    }
    if (cached_has_bits & 0x00000010u) {
      number_of_deltas_ = from.number_of_deltas_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AudioPlayoutEvents::CopyFrom(const AudioPlayoutEvents& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog2.AudioPlayoutEvents)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioPlayoutEvents::IsInitialized() const {
  return true;
}

void AudioPlayoutEvents::Swap(AudioPlayoutEvents* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AudioPlayoutEvents::InternalSwap(AudioPlayoutEvents* other) {
  using std::swap;
  timestamp_ms_deltas_.Swap(&other->timestamp_ms_deltas_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  local_ssrc_deltas_.Swap(&other->local_ssrc_deltas_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(timestamp_ms_, other->timestamp_ms_);
  swap(local_ssrc_, other->local_ssrc_);
  swap(number_of_deltas_, other->number_of_deltas_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string AudioPlayoutEvents::GetTypeName() const {
  return "webrtc.rtclog2.AudioPlayoutEvents";
}


// ===================================================================

void BeginLogEvent::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BeginLogEvent::kTimestampMsFieldNumber;
const int BeginLogEvent::kVersionFieldNumber;
const int BeginLogEvent::kUtcTimeMsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BeginLogEvent::BeginLogEvent()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_rtc_5fevent_5flog2_2eproto::scc_info_BeginLogEvent.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:webrtc.rtclog2.BeginLogEvent)
}
BeginLogEvent::BeginLogEvent(const BeginLogEvent& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&timestamp_ms_, &from.timestamp_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(version_));
  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog2.BeginLogEvent)
}

void BeginLogEvent::SharedCtor() {
  ::memset(&timestamp_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(version_));
}

BeginLogEvent::~BeginLogEvent() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog2.BeginLogEvent)
  SharedDtor();
}

void BeginLogEvent::SharedDtor() {
}

void BeginLogEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BeginLogEvent& BeginLogEvent::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_rtc_5fevent_5flog2_2eproto::scc_info_BeginLogEvent.base);
  return *internal_default_instance();
}


void BeginLogEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog2.BeginLogEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&timestamp_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&version_) -
        reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(version_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BeginLogEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:webrtc.rtclog2.BeginLogEvent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp_ms = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_timestamp_ms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 utc_time_ms = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_utc_time_ms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &utc_time_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:webrtc.rtclog2.BeginLogEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:webrtc.rtclog2.BeginLogEvent)
  return false;
#undef DO_
}

void BeginLogEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:webrtc.rtclog2.BeginLogEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp_ms = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp_ms(), output);
  }

  // optional uint32 version = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->version(), output);
  }

  // optional int64 utc_time_ms = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->utc_time_ms(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:webrtc.rtclog2.BeginLogEvent)
}

size_t BeginLogEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog2.BeginLogEvent)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 7u) {
    // optional int64 timestamp_ms = 1;
    if (has_timestamp_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp_ms());
    }

    // optional int64 utc_time_ms = 3;
    if (has_utc_time_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->utc_time_ms());
    }

    // optional uint32 version = 2;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BeginLogEvent::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BeginLogEvent*>(&from));
}

void BeginLogEvent::MergeFrom(const BeginLogEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog2.BeginLogEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      timestamp_ms_ = from.timestamp_ms_;
    }
    if (cached_has_bits & 0x00000002u) {
      utc_time_ms_ = from.utc_time_ms_;
    }
    if (cached_has_bits & 0x00000004u) {
      version_ = from.version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BeginLogEvent::CopyFrom(const BeginLogEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog2.BeginLogEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BeginLogEvent::IsInitialized() const {
  return true;
}

void BeginLogEvent::Swap(BeginLogEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BeginLogEvent::InternalSwap(BeginLogEvent* other) {
  using std::swap;
  swap(timestamp_ms_, other->timestamp_ms_);
  swap(utc_time_ms_, other->utc_time_ms_);
  swap(version_, other->version_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string BeginLogEvent::GetTypeName() const {
  return "webrtc.rtclog2.BeginLogEvent";
}


// ===================================================================

void EndLogEvent::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EndLogEvent::kTimestampMsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EndLogEvent::EndLogEvent()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_rtc_5fevent_5flog2_2eproto::scc_info_EndLogEvent.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:webrtc.rtclog2.EndLogEvent)
}
EndLogEvent::EndLogEvent(const EndLogEvent& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  timestamp_ms_ = from.timestamp_ms_;
  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog2.EndLogEvent)
}

void EndLogEvent::SharedCtor() {
  timestamp_ms_ = GOOGLE_LONGLONG(0);
}

EndLogEvent::~EndLogEvent() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog2.EndLogEvent)
  SharedDtor();
}

void EndLogEvent::SharedDtor() {
}

void EndLogEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EndLogEvent& EndLogEvent::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_rtc_5fevent_5flog2_2eproto::scc_info_EndLogEvent.base);
  return *internal_default_instance();
}


void EndLogEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog2.EndLogEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  timestamp_ms_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool EndLogEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:webrtc.rtclog2.EndLogEvent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp_ms = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_timestamp_ms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:webrtc.rtclog2.EndLogEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:webrtc.rtclog2.EndLogEvent)
  return false;
#undef DO_
}

void EndLogEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:webrtc.rtclog2.EndLogEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp_ms = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp_ms(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:webrtc.rtclog2.EndLogEvent)
}

size_t EndLogEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog2.EndLogEvent)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // optional int64 timestamp_ms = 1;
  if (has_timestamp_ms()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp_ms());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EndLogEvent::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EndLogEvent*>(&from));
}

void EndLogEvent::MergeFrom(const EndLogEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog2.EndLogEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_timestamp_ms()) {
    set_timestamp_ms(from.timestamp_ms());
  }
}

void EndLogEvent::CopyFrom(const EndLogEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog2.EndLogEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EndLogEvent::IsInitialized() const {
  return true;
}

void EndLogEvent::Swap(EndLogEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EndLogEvent::InternalSwap(EndLogEvent* other) {
  using std::swap;
  swap(timestamp_ms_, other->timestamp_ms_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string EndLogEvent::GetTypeName() const {
  return "webrtc.rtclog2.EndLogEvent";
}


// ===================================================================

void LossBasedBweUpdates::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LossBasedBweUpdates::kTimestampMsFieldNumber;
const int LossBasedBweUpdates::kBitrateBpsFieldNumber;
const int LossBasedBweUpdates::kFractionLossFieldNumber;
const int LossBasedBweUpdates::kTotalPacketsFieldNumber;
const int LossBasedBweUpdates::kNumberOfDeltasFieldNumber;
const int LossBasedBweUpdates::kTimestampMsDeltasFieldNumber;
const int LossBasedBweUpdates::kBitrateBpsDeltasFieldNumber;
const int LossBasedBweUpdates::kFractionLossDeltasFieldNumber;
const int LossBasedBweUpdates::kTotalPacketsDeltasFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LossBasedBweUpdates::LossBasedBweUpdates()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_rtc_5fevent_5flog2_2eproto::scc_info_LossBasedBweUpdates.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:webrtc.rtclog2.LossBasedBweUpdates)
}
LossBasedBweUpdates::LossBasedBweUpdates(const LossBasedBweUpdates& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  timestamp_ms_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_timestamp_ms_deltas()) {
    timestamp_ms_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timestamp_ms_deltas_);
  }
  bitrate_bps_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_bitrate_bps_deltas()) {
    bitrate_bps_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bitrate_bps_deltas_);
  }
  fraction_loss_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_fraction_loss_deltas()) {
    fraction_loss_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fraction_loss_deltas_);
  }
  total_packets_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_total_packets_deltas()) {
    total_packets_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.total_packets_deltas_);
  }
  ::memcpy(&timestamp_ms_, &from.timestamp_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&number_of_deltas_) -
    reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(number_of_deltas_));
  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog2.LossBasedBweUpdates)
}

void LossBasedBweUpdates::SharedCtor() {
  timestamp_ms_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bitrate_bps_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fraction_loss_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  total_packets_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&number_of_deltas_) -
      reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(number_of_deltas_));
}

LossBasedBweUpdates::~LossBasedBweUpdates() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog2.LossBasedBweUpdates)
  SharedDtor();
}

void LossBasedBweUpdates::SharedDtor() {
  timestamp_ms_deltas_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bitrate_bps_deltas_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fraction_loss_deltas_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  total_packets_deltas_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LossBasedBweUpdates::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LossBasedBweUpdates& LossBasedBweUpdates::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_rtc_5fevent_5flog2_2eproto::scc_info_LossBasedBweUpdates.base);
  return *internal_default_instance();
}


void LossBasedBweUpdates::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog2.LossBasedBweUpdates)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      timestamp_ms_deltas_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      bitrate_bps_deltas_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      fraction_loss_deltas_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      total_packets_deltas_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 240u) {
    ::memset(&timestamp_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&total_packets_) -
        reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(total_packets_));
  }
  number_of_deltas_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LossBasedBweUpdates::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:webrtc.rtclog2.LossBasedBweUpdates)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp_ms = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_timestamp_ms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 bitrate_bps = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_bitrate_bps();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bitrate_bps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 fraction_loss = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_fraction_loss();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fraction_loss_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 total_packets = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_total_packets();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_packets_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 number_of_deltas = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_number_of_deltas();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_of_deltas_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes timestamp_ms_deltas = 101;
      case 101: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 810 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_timestamp_ms_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes bitrate_bps_deltas = 102;
      case 102: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 818 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bitrate_bps_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes fraction_loss_deltas = 103;
      case 103: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 826 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_fraction_loss_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes total_packets_deltas = 104;
      case 104: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 834 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_total_packets_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:webrtc.rtclog2.LossBasedBweUpdates)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:webrtc.rtclog2.LossBasedBweUpdates)
  return false;
#undef DO_
}

void LossBasedBweUpdates::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:webrtc.rtclog2.LossBasedBweUpdates)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp_ms = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp_ms(), output);
  }

  // optional uint32 bitrate_bps = 2;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->bitrate_bps(), output);
  }

  // optional uint32 fraction_loss = 3;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->fraction_loss(), output);
  }

  // optional uint32 total_packets = 4;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->total_packets(), output);
  }

  // optional uint32 number_of_deltas = 5;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->number_of_deltas(), output);
  }

  // optional bytes timestamp_ms_deltas = 101;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      101, this->timestamp_ms_deltas(), output);
  }

  // optional bytes bitrate_bps_deltas = 102;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      102, this->bitrate_bps_deltas(), output);
  }

  // optional bytes fraction_loss_deltas = 103;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      103, this->fraction_loss_deltas(), output);
  }

  // optional bytes total_packets_deltas = 104;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      104, this->total_packets_deltas(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:webrtc.rtclog2.LossBasedBweUpdates)
}

size_t LossBasedBweUpdates::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog2.LossBasedBweUpdates)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 255u) {
    // optional bytes timestamp_ms_deltas = 101;
    if (has_timestamp_ms_deltas()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->timestamp_ms_deltas());
    }

    // optional bytes bitrate_bps_deltas = 102;
    if (has_bitrate_bps_deltas()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bitrate_bps_deltas());
    }

    // optional bytes fraction_loss_deltas = 103;
    if (has_fraction_loss_deltas()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->fraction_loss_deltas());
    }

    // optional bytes total_packets_deltas = 104;
    if (has_total_packets_deltas()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->total_packets_deltas());
    }

    // optional int64 timestamp_ms = 1;
    if (has_timestamp_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp_ms());
    }

    // optional uint32 bitrate_bps = 2;
    if (has_bitrate_bps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bitrate_bps());
    }

    // optional uint32 fraction_loss = 3;
    if (has_fraction_loss()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fraction_loss());
    }

    // optional uint32 total_packets = 4;
    if (has_total_packets()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_packets());
    }

  }
  // optional uint32 number_of_deltas = 5;
  if (has_number_of_deltas()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->number_of_deltas());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LossBasedBweUpdates::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LossBasedBweUpdates*>(&from));
}

void LossBasedBweUpdates::MergeFrom(const LossBasedBweUpdates& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog2.LossBasedBweUpdates)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_timestamp_ms_deltas();
      timestamp_ms_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timestamp_ms_deltas_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_bitrate_bps_deltas();
      bitrate_bps_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bitrate_bps_deltas_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_fraction_loss_deltas();
      fraction_loss_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fraction_loss_deltas_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_total_packets_deltas();
      total_packets_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.total_packets_deltas_);
    }
    if (cached_has_bits & 0x00000010u) {
      timestamp_ms_ = from.timestamp_ms_;
    }
    if (cached_has_bits & 0x00000020u) {
      bitrate_bps_ = from.bitrate_bps_;
    }
    if (cached_has_bits & 0x00000040u) {
      fraction_loss_ = from.fraction_loss_;
    }
    if (cached_has_bits & 0x00000080u) {
      total_packets_ = from.total_packets_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_number_of_deltas(from.number_of_deltas());
  }
}

void LossBasedBweUpdates::CopyFrom(const LossBasedBweUpdates& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog2.LossBasedBweUpdates)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LossBasedBweUpdates::IsInitialized() const {
  return true;
}

void LossBasedBweUpdates::Swap(LossBasedBweUpdates* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LossBasedBweUpdates::InternalSwap(LossBasedBweUpdates* other) {
  using std::swap;
  timestamp_ms_deltas_.Swap(&other->timestamp_ms_deltas_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  bitrate_bps_deltas_.Swap(&other->bitrate_bps_deltas_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  fraction_loss_deltas_.Swap(&other->fraction_loss_deltas_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  total_packets_deltas_.Swap(&other->total_packets_deltas_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(timestamp_ms_, other->timestamp_ms_);
  swap(bitrate_bps_, other->bitrate_bps_);
  swap(fraction_loss_, other->fraction_loss_);
  swap(total_packets_, other->total_packets_);
  swap(number_of_deltas_, other->number_of_deltas_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string LossBasedBweUpdates::GetTypeName() const {
  return "webrtc.rtclog2.LossBasedBweUpdates";
}


// ===================================================================

void DelayBasedBweUpdates::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DelayBasedBweUpdates::kTimestampMsFieldNumber;
const int DelayBasedBweUpdates::kBitrateBpsFieldNumber;
const int DelayBasedBweUpdates::kDetectorStateFieldNumber;
const int DelayBasedBweUpdates::kNumberOfDeltasFieldNumber;
const int DelayBasedBweUpdates::kTimestampMsDeltasFieldNumber;
const int DelayBasedBweUpdates::kBitrateBpsDeltasFieldNumber;
const int DelayBasedBweUpdates::kDetectorStateDeltasFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DelayBasedBweUpdates::DelayBasedBweUpdates()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_rtc_5fevent_5flog2_2eproto::scc_info_DelayBasedBweUpdates.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:webrtc.rtclog2.DelayBasedBweUpdates)
}
DelayBasedBweUpdates::DelayBasedBweUpdates(const DelayBasedBweUpdates& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  timestamp_ms_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_timestamp_ms_deltas()) {
    timestamp_ms_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timestamp_ms_deltas_);
  }
  bitrate_bps_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_bitrate_bps_deltas()) {
    bitrate_bps_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bitrate_bps_deltas_);
  }
  detector_state_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_detector_state_deltas()) {
    detector_state_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.detector_state_deltas_);
  }
  ::memcpy(&timestamp_ms_, &from.timestamp_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&number_of_deltas_) -
    reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(number_of_deltas_));
  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog2.DelayBasedBweUpdates)
}

void DelayBasedBweUpdates::SharedCtor() {
  timestamp_ms_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bitrate_bps_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  detector_state_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&number_of_deltas_) -
      reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(number_of_deltas_));
}

DelayBasedBweUpdates::~DelayBasedBweUpdates() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog2.DelayBasedBweUpdates)
  SharedDtor();
}

void DelayBasedBweUpdates::SharedDtor() {
  timestamp_ms_deltas_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bitrate_bps_deltas_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  detector_state_deltas_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DelayBasedBweUpdates::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DelayBasedBweUpdates& DelayBasedBweUpdates::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_rtc_5fevent_5flog2_2eproto::scc_info_DelayBasedBweUpdates.base);
  return *internal_default_instance();
}


void DelayBasedBweUpdates::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog2.DelayBasedBweUpdates)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      timestamp_ms_deltas_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      bitrate_bps_deltas_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      detector_state_deltas_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 120u) {
    ::memset(&timestamp_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&number_of_deltas_) -
        reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(number_of_deltas_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DelayBasedBweUpdates::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:webrtc.rtclog2.DelayBasedBweUpdates)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp_ms = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_timestamp_ms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 bitrate_bps = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_bitrate_bps();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bitrate_bps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .webrtc.rtclog2.DelayBasedBweUpdates.DetectorState detector_state = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::webrtc::rtclog2::DelayBasedBweUpdates_DetectorState_IsValid(value)) {
            set_detector_state(static_cast< ::webrtc::rtclog2::DelayBasedBweUpdates_DetectorState >(value));
          } else {
            unknown_fields_stream.WriteVarint32(24u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 number_of_deltas = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_number_of_deltas();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_of_deltas_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes timestamp_ms_deltas = 101;
      case 101: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 810 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_timestamp_ms_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes bitrate_bps_deltas = 102;
      case 102: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 818 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bitrate_bps_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes detector_state_deltas = 103;
      case 103: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 826 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_detector_state_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:webrtc.rtclog2.DelayBasedBweUpdates)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:webrtc.rtclog2.DelayBasedBweUpdates)
  return false;
#undef DO_
}

void DelayBasedBweUpdates::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:webrtc.rtclog2.DelayBasedBweUpdates)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp_ms = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp_ms(), output);
  }

  // optional uint32 bitrate_bps = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->bitrate_bps(), output);
  }

  // optional .webrtc.rtclog2.DelayBasedBweUpdates.DetectorState detector_state = 3;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->detector_state(), output);
  }

  // optional uint32 number_of_deltas = 4;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->number_of_deltas(), output);
  }

  // optional bytes timestamp_ms_deltas = 101;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      101, this->timestamp_ms_deltas(), output);
  }

  // optional bytes bitrate_bps_deltas = 102;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      102, this->bitrate_bps_deltas(), output);
  }

  // optional bytes detector_state_deltas = 103;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      103, this->detector_state_deltas(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:webrtc.rtclog2.DelayBasedBweUpdates)
}

size_t DelayBasedBweUpdates::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog2.DelayBasedBweUpdates)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 127u) {
    // optional bytes timestamp_ms_deltas = 101;
    if (has_timestamp_ms_deltas()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->timestamp_ms_deltas());
    }

    // optional bytes bitrate_bps_deltas = 102;
    if (has_bitrate_bps_deltas()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bitrate_bps_deltas());
    }

    // optional bytes detector_state_deltas = 103;
    if (has_detector_state_deltas()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->detector_state_deltas());
    }

    // optional int64 timestamp_ms = 1;
    if (has_timestamp_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp_ms());
    }

    // optional uint32 bitrate_bps = 2;
    if (has_bitrate_bps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bitrate_bps());
    }

    // optional .webrtc.rtclog2.DelayBasedBweUpdates.DetectorState detector_state = 3;
    if (has_detector_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->detector_state());
    }

    // optional uint32 number_of_deltas = 4;
    if (has_number_of_deltas()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->number_of_deltas());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DelayBasedBweUpdates::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DelayBasedBweUpdates*>(&from));
}

void DelayBasedBweUpdates::MergeFrom(const DelayBasedBweUpdates& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog2.DelayBasedBweUpdates)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_timestamp_ms_deltas();
      timestamp_ms_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timestamp_ms_deltas_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_bitrate_bps_deltas();
      bitrate_bps_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bitrate_bps_deltas_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_detector_state_deltas();
      detector_state_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.detector_state_deltas_);
    }
    if (cached_has_bits & 0x00000008u) {
      timestamp_ms_ = from.timestamp_ms_;
    }
    if (cached_has_bits & 0x00000010u) {
      bitrate_bps_ = from.bitrate_bps_;
    }
    if (cached_has_bits & 0x00000020u) {
      detector_state_ = from.detector_state_;
    }
    if (cached_has_bits & 0x00000040u) {
      number_of_deltas_ = from.number_of_deltas_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DelayBasedBweUpdates::CopyFrom(const DelayBasedBweUpdates& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog2.DelayBasedBweUpdates)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelayBasedBweUpdates::IsInitialized() const {
  return true;
}

void DelayBasedBweUpdates::Swap(DelayBasedBweUpdates* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DelayBasedBweUpdates::InternalSwap(DelayBasedBweUpdates* other) {
  using std::swap;
  timestamp_ms_deltas_.Swap(&other->timestamp_ms_deltas_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  bitrate_bps_deltas_.Swap(&other->bitrate_bps_deltas_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  detector_state_deltas_.Swap(&other->detector_state_deltas_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(timestamp_ms_, other->timestamp_ms_);
  swap(bitrate_bps_, other->bitrate_bps_);
  swap(detector_state_, other->detector_state_);
  swap(number_of_deltas_, other->number_of_deltas_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string DelayBasedBweUpdates::GetTypeName() const {
  return "webrtc.rtclog2.DelayBasedBweUpdates";
}


// ===================================================================

void RtpHeaderExtensionConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RtpHeaderExtensionConfig::kTransmissionTimeOffsetIdFieldNumber;
const int RtpHeaderExtensionConfig::kAbsoluteSendTimeIdFieldNumber;
const int RtpHeaderExtensionConfig::kTransportSequenceNumberIdFieldNumber;
const int RtpHeaderExtensionConfig::kVideoRotationIdFieldNumber;
const int RtpHeaderExtensionConfig::kAudioLevelIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RtpHeaderExtensionConfig::RtpHeaderExtensionConfig()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_rtc_5fevent_5flog2_2eproto::scc_info_RtpHeaderExtensionConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:webrtc.rtclog2.RtpHeaderExtensionConfig)
}
RtpHeaderExtensionConfig::RtpHeaderExtensionConfig(const RtpHeaderExtensionConfig& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&transmission_time_offset_id_, &from.transmission_time_offset_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&audio_level_id_) -
    reinterpret_cast<char*>(&transmission_time_offset_id_)) + sizeof(audio_level_id_));
  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog2.RtpHeaderExtensionConfig)
}

void RtpHeaderExtensionConfig::SharedCtor() {
  ::memset(&transmission_time_offset_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&audio_level_id_) -
      reinterpret_cast<char*>(&transmission_time_offset_id_)) + sizeof(audio_level_id_));
}

RtpHeaderExtensionConfig::~RtpHeaderExtensionConfig() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog2.RtpHeaderExtensionConfig)
  SharedDtor();
}

void RtpHeaderExtensionConfig::SharedDtor() {
}

void RtpHeaderExtensionConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RtpHeaderExtensionConfig& RtpHeaderExtensionConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_rtc_5fevent_5flog2_2eproto::scc_info_RtpHeaderExtensionConfig.base);
  return *internal_default_instance();
}


void RtpHeaderExtensionConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog2.RtpHeaderExtensionConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    ::memset(&transmission_time_offset_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&audio_level_id_) -
        reinterpret_cast<char*>(&transmission_time_offset_id_)) + sizeof(audio_level_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RtpHeaderExtensionConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:webrtc.rtclog2.RtpHeaderExtensionConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 transmission_time_offset_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_transmission_time_offset_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &transmission_time_offset_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 absolute_send_time_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_absolute_send_time_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &absolute_send_time_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 transport_sequence_number_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_transport_sequence_number_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &transport_sequence_number_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 video_rotation_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_video_rotation_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &video_rotation_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 audio_level_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_audio_level_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &audio_level_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:webrtc.rtclog2.RtpHeaderExtensionConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:webrtc.rtclog2.RtpHeaderExtensionConfig)
  return false;
#undef DO_
}

void RtpHeaderExtensionConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:webrtc.rtclog2.RtpHeaderExtensionConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 transmission_time_offset_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->transmission_time_offset_id(), output);
  }

  // optional int32 absolute_send_time_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->absolute_send_time_id(), output);
  }

  // optional int32 transport_sequence_number_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->transport_sequence_number_id(), output);
  }

  // optional int32 video_rotation_id = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->video_rotation_id(), output);
  }

  // optional int32 audio_level_id = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->audio_level_id(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:webrtc.rtclog2.RtpHeaderExtensionConfig)
}

size_t RtpHeaderExtensionConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog2.RtpHeaderExtensionConfig)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 31u) {
    // optional int32 transmission_time_offset_id = 1;
    if (has_transmission_time_offset_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->transmission_time_offset_id());
    }

    // optional int32 absolute_send_time_id = 2;
    if (has_absolute_send_time_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->absolute_send_time_id());
    }

    // optional int32 transport_sequence_number_id = 3;
    if (has_transport_sequence_number_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->transport_sequence_number_id());
    }

    // optional int32 video_rotation_id = 4;
    if (has_video_rotation_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->video_rotation_id());
    }

    // optional int32 audio_level_id = 5;
    if (has_audio_level_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->audio_level_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RtpHeaderExtensionConfig::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RtpHeaderExtensionConfig*>(&from));
}

void RtpHeaderExtensionConfig::MergeFrom(const RtpHeaderExtensionConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog2.RtpHeaderExtensionConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      transmission_time_offset_id_ = from.transmission_time_offset_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      absolute_send_time_id_ = from.absolute_send_time_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      transport_sequence_number_id_ = from.transport_sequence_number_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      video_rotation_id_ = from.video_rotation_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      audio_level_id_ = from.audio_level_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RtpHeaderExtensionConfig::CopyFrom(const RtpHeaderExtensionConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog2.RtpHeaderExtensionConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtpHeaderExtensionConfig::IsInitialized() const {
  return true;
}

void RtpHeaderExtensionConfig::Swap(RtpHeaderExtensionConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RtpHeaderExtensionConfig::InternalSwap(RtpHeaderExtensionConfig* other) {
  using std::swap;
  swap(transmission_time_offset_id_, other->transmission_time_offset_id_);
  swap(absolute_send_time_id_, other->absolute_send_time_id_);
  swap(transport_sequence_number_id_, other->transport_sequence_number_id_);
  swap(video_rotation_id_, other->video_rotation_id_);
  swap(audio_level_id_, other->audio_level_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string RtpHeaderExtensionConfig::GetTypeName() const {
  return "webrtc.rtclog2.RtpHeaderExtensionConfig";
}


// ===================================================================

void VideoRecvStreamConfig::InitAsDefaultInstance() {
  ::webrtc::rtclog2::_VideoRecvStreamConfig_default_instance_._instance.get_mutable()->header_extensions_ = const_cast< ::webrtc::rtclog2::RtpHeaderExtensionConfig*>(
      ::webrtc::rtclog2::RtpHeaderExtensionConfig::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VideoRecvStreamConfig::kTimestampMsFieldNumber;
const int VideoRecvStreamConfig::kRemoteSsrcFieldNumber;
const int VideoRecvStreamConfig::kLocalSsrcFieldNumber;
const int VideoRecvStreamConfig::kRtxSsrcFieldNumber;
const int VideoRecvStreamConfig::kHeaderExtensionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VideoRecvStreamConfig::VideoRecvStreamConfig()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_rtc_5fevent_5flog2_2eproto::scc_info_VideoRecvStreamConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:webrtc.rtclog2.VideoRecvStreamConfig)
}
VideoRecvStreamConfig::VideoRecvStreamConfig(const VideoRecvStreamConfig& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header_extensions()) {
    header_extensions_ = new ::webrtc::rtclog2::RtpHeaderExtensionConfig(*from.header_extensions_);
  } else {
    header_extensions_ = NULL;
  }
  ::memcpy(&timestamp_ms_, &from.timestamp_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&rtx_ssrc_) -
    reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(rtx_ssrc_));
  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog2.VideoRecvStreamConfig)
}

void VideoRecvStreamConfig::SharedCtor() {
  ::memset(&header_extensions_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rtx_ssrc_) -
      reinterpret_cast<char*>(&header_extensions_)) + sizeof(rtx_ssrc_));
}

VideoRecvStreamConfig::~VideoRecvStreamConfig() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog2.VideoRecvStreamConfig)
  SharedDtor();
}

void VideoRecvStreamConfig::SharedDtor() {
  if (this != internal_default_instance()) delete header_extensions_;
}

void VideoRecvStreamConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VideoRecvStreamConfig& VideoRecvStreamConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_rtc_5fevent_5flog2_2eproto::scc_info_VideoRecvStreamConfig.base);
  return *internal_default_instance();
}


void VideoRecvStreamConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog2.VideoRecvStreamConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(header_extensions_ != NULL);
    header_extensions_->Clear();
  }
  if (cached_has_bits & 30u) {
    ::memset(&timestamp_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rtx_ssrc_) -
        reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(rtx_ssrc_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VideoRecvStreamConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:webrtc.rtclog2.VideoRecvStreamConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp_ms = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_timestamp_ms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 remote_ssrc = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_remote_ssrc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remote_ssrc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 local_ssrc = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_local_ssrc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &local_ssrc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rtx_ssrc = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_rtx_ssrc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rtx_ssrc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .webrtc.rtclog2.RtpHeaderExtensionConfig header_extensions = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header_extensions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:webrtc.rtclog2.VideoRecvStreamConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:webrtc.rtclog2.VideoRecvStreamConfig)
  return false;
#undef DO_
}

void VideoRecvStreamConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:webrtc.rtclog2.VideoRecvStreamConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp_ms = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp_ms(), output);
  }

  // optional uint32 remote_ssrc = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->remote_ssrc(), output);
  }

  // optional uint32 local_ssrc = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->local_ssrc(), output);
  }

  // optional uint32 rtx_ssrc = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->rtx_ssrc(), output);
  }

  // optional .webrtc.rtclog2.RtpHeaderExtensionConfig header_extensions = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->_internal_header_extensions(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:webrtc.rtclog2.VideoRecvStreamConfig)
}

size_t VideoRecvStreamConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog2.VideoRecvStreamConfig)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 31u) {
    // optional .webrtc.rtclog2.RtpHeaderExtensionConfig header_extensions = 5;
    if (has_header_extensions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *header_extensions_);
    }

    // optional int64 timestamp_ms = 1;
    if (has_timestamp_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp_ms());
    }

    // optional uint32 remote_ssrc = 2;
    if (has_remote_ssrc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->remote_ssrc());
    }

    // optional uint32 local_ssrc = 3;
    if (has_local_ssrc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->local_ssrc());
    }

    // optional uint32 rtx_ssrc = 4;
    if (has_rtx_ssrc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rtx_ssrc());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VideoRecvStreamConfig::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const VideoRecvStreamConfig*>(&from));
}

void VideoRecvStreamConfig::MergeFrom(const VideoRecvStreamConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog2.VideoRecvStreamConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header_extensions()->::webrtc::rtclog2::RtpHeaderExtensionConfig::MergeFrom(from.header_extensions());
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_ms_ = from.timestamp_ms_;
    }
    if (cached_has_bits & 0x00000004u) {
      remote_ssrc_ = from.remote_ssrc_;
    }
    if (cached_has_bits & 0x00000008u) {
      local_ssrc_ = from.local_ssrc_;
    }
    if (cached_has_bits & 0x00000010u) {
      rtx_ssrc_ = from.rtx_ssrc_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VideoRecvStreamConfig::CopyFrom(const VideoRecvStreamConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog2.VideoRecvStreamConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoRecvStreamConfig::IsInitialized() const {
  return true;
}

void VideoRecvStreamConfig::Swap(VideoRecvStreamConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VideoRecvStreamConfig::InternalSwap(VideoRecvStreamConfig* other) {
  using std::swap;
  swap(header_extensions_, other->header_extensions_);
  swap(timestamp_ms_, other->timestamp_ms_);
  swap(remote_ssrc_, other->remote_ssrc_);
  swap(local_ssrc_, other->local_ssrc_);
  swap(rtx_ssrc_, other->rtx_ssrc_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string VideoRecvStreamConfig::GetTypeName() const {
  return "webrtc.rtclog2.VideoRecvStreamConfig";
}


// ===================================================================

void VideoSendStreamConfig::InitAsDefaultInstance() {
  ::webrtc::rtclog2::_VideoSendStreamConfig_default_instance_._instance.get_mutable()->header_extensions_ = const_cast< ::webrtc::rtclog2::RtpHeaderExtensionConfig*>(
      ::webrtc::rtclog2::RtpHeaderExtensionConfig::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VideoSendStreamConfig::kTimestampMsFieldNumber;
const int VideoSendStreamConfig::kSsrcFieldNumber;
const int VideoSendStreamConfig::kRtxSsrcFieldNumber;
const int VideoSendStreamConfig::kHeaderExtensionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VideoSendStreamConfig::VideoSendStreamConfig()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_rtc_5fevent_5flog2_2eproto::scc_info_VideoSendStreamConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:webrtc.rtclog2.VideoSendStreamConfig)
}
VideoSendStreamConfig::VideoSendStreamConfig(const VideoSendStreamConfig& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header_extensions()) {
    header_extensions_ = new ::webrtc::rtclog2::RtpHeaderExtensionConfig(*from.header_extensions_);
  } else {
    header_extensions_ = NULL;
  }
  ::memcpy(&timestamp_ms_, &from.timestamp_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&rtx_ssrc_) -
    reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(rtx_ssrc_));
  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog2.VideoSendStreamConfig)
}

void VideoSendStreamConfig::SharedCtor() {
  ::memset(&header_extensions_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rtx_ssrc_) -
      reinterpret_cast<char*>(&header_extensions_)) + sizeof(rtx_ssrc_));
}

VideoSendStreamConfig::~VideoSendStreamConfig() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog2.VideoSendStreamConfig)
  SharedDtor();
}

void VideoSendStreamConfig::SharedDtor() {
  if (this != internal_default_instance()) delete header_extensions_;
}

void VideoSendStreamConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VideoSendStreamConfig& VideoSendStreamConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_rtc_5fevent_5flog2_2eproto::scc_info_VideoSendStreamConfig.base);
  return *internal_default_instance();
}


void VideoSendStreamConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog2.VideoSendStreamConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(header_extensions_ != NULL);
    header_extensions_->Clear();
  }
  if (cached_has_bits & 14u) {
    ::memset(&timestamp_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rtx_ssrc_) -
        reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(rtx_ssrc_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VideoSendStreamConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:webrtc.rtclog2.VideoSendStreamConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp_ms = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_timestamp_ms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ssrc = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_ssrc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ssrc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rtx_ssrc = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_rtx_ssrc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rtx_ssrc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .webrtc.rtclog2.RtpHeaderExtensionConfig header_extensions = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header_extensions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:webrtc.rtclog2.VideoSendStreamConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:webrtc.rtclog2.VideoSendStreamConfig)
  return false;
#undef DO_
}

void VideoSendStreamConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:webrtc.rtclog2.VideoSendStreamConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp_ms = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp_ms(), output);
  }

  // optional uint32 ssrc = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ssrc(), output);
  }

  // optional uint32 rtx_ssrc = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->rtx_ssrc(), output);
  }

  // optional .webrtc.rtclog2.RtpHeaderExtensionConfig header_extensions = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->_internal_header_extensions(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:webrtc.rtclog2.VideoSendStreamConfig)
}

size_t VideoSendStreamConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog2.VideoSendStreamConfig)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 15u) {
    // optional .webrtc.rtclog2.RtpHeaderExtensionConfig header_extensions = 4;
    if (has_header_extensions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *header_extensions_);
    }

    // optional int64 timestamp_ms = 1;
    if (has_timestamp_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp_ms());
    }

    // optional uint32 ssrc = 2;
    if (has_ssrc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ssrc());
    }

    // optional uint32 rtx_ssrc = 3;
    if (has_rtx_ssrc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rtx_ssrc());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VideoSendStreamConfig::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const VideoSendStreamConfig*>(&from));
}

void VideoSendStreamConfig::MergeFrom(const VideoSendStreamConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog2.VideoSendStreamConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header_extensions()->::webrtc::rtclog2::RtpHeaderExtensionConfig::MergeFrom(from.header_extensions());
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_ms_ = from.timestamp_ms_;
    }
    if (cached_has_bits & 0x00000004u) {
      ssrc_ = from.ssrc_;
    }
    if (cached_has_bits & 0x00000008u) {
      rtx_ssrc_ = from.rtx_ssrc_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VideoSendStreamConfig::CopyFrom(const VideoSendStreamConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog2.VideoSendStreamConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoSendStreamConfig::IsInitialized() const {
  return true;
}

void VideoSendStreamConfig::Swap(VideoSendStreamConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VideoSendStreamConfig::InternalSwap(VideoSendStreamConfig* other) {
  using std::swap;
  swap(header_extensions_, other->header_extensions_);
  swap(timestamp_ms_, other->timestamp_ms_);
  swap(ssrc_, other->ssrc_);
  swap(rtx_ssrc_, other->rtx_ssrc_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string VideoSendStreamConfig::GetTypeName() const {
  return "webrtc.rtclog2.VideoSendStreamConfig";
}


// ===================================================================

void AudioRecvStreamConfig::InitAsDefaultInstance() {
  ::webrtc::rtclog2::_AudioRecvStreamConfig_default_instance_._instance.get_mutable()->header_extensions_ = const_cast< ::webrtc::rtclog2::RtpHeaderExtensionConfig*>(
      ::webrtc::rtclog2::RtpHeaderExtensionConfig::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AudioRecvStreamConfig::kTimestampMsFieldNumber;
const int AudioRecvStreamConfig::kRemoteSsrcFieldNumber;
const int AudioRecvStreamConfig::kLocalSsrcFieldNumber;
const int AudioRecvStreamConfig::kHeaderExtensionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AudioRecvStreamConfig::AudioRecvStreamConfig()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_rtc_5fevent_5flog2_2eproto::scc_info_AudioRecvStreamConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:webrtc.rtclog2.AudioRecvStreamConfig)
}
AudioRecvStreamConfig::AudioRecvStreamConfig(const AudioRecvStreamConfig& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header_extensions()) {
    header_extensions_ = new ::webrtc::rtclog2::RtpHeaderExtensionConfig(*from.header_extensions_);
  } else {
    header_extensions_ = NULL;
  }
  ::memcpy(&timestamp_ms_, &from.timestamp_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&local_ssrc_) -
    reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(local_ssrc_));
  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog2.AudioRecvStreamConfig)
}

void AudioRecvStreamConfig::SharedCtor() {
  ::memset(&header_extensions_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&local_ssrc_) -
      reinterpret_cast<char*>(&header_extensions_)) + sizeof(local_ssrc_));
}

AudioRecvStreamConfig::~AudioRecvStreamConfig() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog2.AudioRecvStreamConfig)
  SharedDtor();
}

void AudioRecvStreamConfig::SharedDtor() {
  if (this != internal_default_instance()) delete header_extensions_;
}

void AudioRecvStreamConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AudioRecvStreamConfig& AudioRecvStreamConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_rtc_5fevent_5flog2_2eproto::scc_info_AudioRecvStreamConfig.base);
  return *internal_default_instance();
}


void AudioRecvStreamConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog2.AudioRecvStreamConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(header_extensions_ != NULL);
    header_extensions_->Clear();
  }
  if (cached_has_bits & 14u) {
    ::memset(&timestamp_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&local_ssrc_) -
        reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(local_ssrc_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AudioRecvStreamConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:webrtc.rtclog2.AudioRecvStreamConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp_ms = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_timestamp_ms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 remote_ssrc = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_remote_ssrc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remote_ssrc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 local_ssrc = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_local_ssrc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &local_ssrc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .webrtc.rtclog2.RtpHeaderExtensionConfig header_extensions = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header_extensions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:webrtc.rtclog2.AudioRecvStreamConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:webrtc.rtclog2.AudioRecvStreamConfig)
  return false;
#undef DO_
}

void AudioRecvStreamConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:webrtc.rtclog2.AudioRecvStreamConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp_ms = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp_ms(), output);
  }

  // optional uint32 remote_ssrc = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->remote_ssrc(), output);
  }

  // optional uint32 local_ssrc = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->local_ssrc(), output);
  }

  // optional .webrtc.rtclog2.RtpHeaderExtensionConfig header_extensions = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->_internal_header_extensions(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:webrtc.rtclog2.AudioRecvStreamConfig)
}

size_t AudioRecvStreamConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog2.AudioRecvStreamConfig)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 15u) {
    // optional .webrtc.rtclog2.RtpHeaderExtensionConfig header_extensions = 5;
    if (has_header_extensions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *header_extensions_);
    }

    // optional int64 timestamp_ms = 1;
    if (has_timestamp_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp_ms());
    }

    // optional uint32 remote_ssrc = 2;
    if (has_remote_ssrc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->remote_ssrc());
    }

    // optional uint32 local_ssrc = 3;
    if (has_local_ssrc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->local_ssrc());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AudioRecvStreamConfig::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AudioRecvStreamConfig*>(&from));
}

void AudioRecvStreamConfig::MergeFrom(const AudioRecvStreamConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog2.AudioRecvStreamConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header_extensions()->::webrtc::rtclog2::RtpHeaderExtensionConfig::MergeFrom(from.header_extensions());
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_ms_ = from.timestamp_ms_;
    }
    if (cached_has_bits & 0x00000004u) {
      remote_ssrc_ = from.remote_ssrc_;
    }
    if (cached_has_bits & 0x00000008u) {
      local_ssrc_ = from.local_ssrc_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AudioRecvStreamConfig::CopyFrom(const AudioRecvStreamConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog2.AudioRecvStreamConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioRecvStreamConfig::IsInitialized() const {
  return true;
}

void AudioRecvStreamConfig::Swap(AudioRecvStreamConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AudioRecvStreamConfig::InternalSwap(AudioRecvStreamConfig* other) {
  using std::swap;
  swap(header_extensions_, other->header_extensions_);
  swap(timestamp_ms_, other->timestamp_ms_);
  swap(remote_ssrc_, other->remote_ssrc_);
  swap(local_ssrc_, other->local_ssrc_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string AudioRecvStreamConfig::GetTypeName() const {
  return "webrtc.rtclog2.AudioRecvStreamConfig";
}


// ===================================================================

void AudioSendStreamConfig::InitAsDefaultInstance() {
  ::webrtc::rtclog2::_AudioSendStreamConfig_default_instance_._instance.get_mutable()->header_extensions_ = const_cast< ::webrtc::rtclog2::RtpHeaderExtensionConfig*>(
      ::webrtc::rtclog2::RtpHeaderExtensionConfig::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AudioSendStreamConfig::kTimestampMsFieldNumber;
const int AudioSendStreamConfig::kSsrcFieldNumber;
const int AudioSendStreamConfig::kHeaderExtensionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AudioSendStreamConfig::AudioSendStreamConfig()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_rtc_5fevent_5flog2_2eproto::scc_info_AudioSendStreamConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:webrtc.rtclog2.AudioSendStreamConfig)
}
AudioSendStreamConfig::AudioSendStreamConfig(const AudioSendStreamConfig& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header_extensions()) {
    header_extensions_ = new ::webrtc::rtclog2::RtpHeaderExtensionConfig(*from.header_extensions_);
  } else {
    header_extensions_ = NULL;
  }
  ::memcpy(&timestamp_ms_, &from.timestamp_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&ssrc_) -
    reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(ssrc_));
  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog2.AudioSendStreamConfig)
}

void AudioSendStreamConfig::SharedCtor() {
  ::memset(&header_extensions_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ssrc_) -
      reinterpret_cast<char*>(&header_extensions_)) + sizeof(ssrc_));
}

AudioSendStreamConfig::~AudioSendStreamConfig() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog2.AudioSendStreamConfig)
  SharedDtor();
}

void AudioSendStreamConfig::SharedDtor() {
  if (this != internal_default_instance()) delete header_extensions_;
}

void AudioSendStreamConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AudioSendStreamConfig& AudioSendStreamConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_rtc_5fevent_5flog2_2eproto::scc_info_AudioSendStreamConfig.base);
  return *internal_default_instance();
}


void AudioSendStreamConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog2.AudioSendStreamConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(header_extensions_ != NULL);
    header_extensions_->Clear();
  }
  if (cached_has_bits & 6u) {
    ::memset(&timestamp_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ssrc_) -
        reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(ssrc_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AudioSendStreamConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:webrtc.rtclog2.AudioSendStreamConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp_ms = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_timestamp_ms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ssrc = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_ssrc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ssrc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .webrtc.rtclog2.RtpHeaderExtensionConfig header_extensions = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header_extensions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:webrtc.rtclog2.AudioSendStreamConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:webrtc.rtclog2.AudioSendStreamConfig)
  return false;
#undef DO_
}

void AudioSendStreamConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:webrtc.rtclog2.AudioSendStreamConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp_ms = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp_ms(), output);
  }

  // optional uint32 ssrc = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ssrc(), output);
  }

  // optional .webrtc.rtclog2.RtpHeaderExtensionConfig header_extensions = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->_internal_header_extensions(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:webrtc.rtclog2.AudioSendStreamConfig)
}

size_t AudioSendStreamConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog2.AudioSendStreamConfig)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 7u) {
    // optional .webrtc.rtclog2.RtpHeaderExtensionConfig header_extensions = 4;
    if (has_header_extensions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *header_extensions_);
    }

    // optional int64 timestamp_ms = 1;
    if (has_timestamp_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp_ms());
    }

    // optional uint32 ssrc = 2;
    if (has_ssrc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ssrc());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AudioSendStreamConfig::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AudioSendStreamConfig*>(&from));
}

void AudioSendStreamConfig::MergeFrom(const AudioSendStreamConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog2.AudioSendStreamConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header_extensions()->::webrtc::rtclog2::RtpHeaderExtensionConfig::MergeFrom(from.header_extensions());
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_ms_ = from.timestamp_ms_;
    }
    if (cached_has_bits & 0x00000004u) {
      ssrc_ = from.ssrc_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AudioSendStreamConfig::CopyFrom(const AudioSendStreamConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog2.AudioSendStreamConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioSendStreamConfig::IsInitialized() const {
  return true;
}

void AudioSendStreamConfig::Swap(AudioSendStreamConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AudioSendStreamConfig::InternalSwap(AudioSendStreamConfig* other) {
  using std::swap;
  swap(header_extensions_, other->header_extensions_);
  swap(timestamp_ms_, other->timestamp_ms_);
  swap(ssrc_, other->ssrc_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string AudioSendStreamConfig::GetTypeName() const {
  return "webrtc.rtclog2.AudioSendStreamConfig";
}


// ===================================================================

void AudioNetworkAdaptations::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AudioNetworkAdaptations::kTimestampMsFieldNumber;
const int AudioNetworkAdaptations::kBitrateBpsFieldNumber;
const int AudioNetworkAdaptations::kFrameLengthMsFieldNumber;
const int AudioNetworkAdaptations::kUplinkPacketLossFractionFieldNumber;
const int AudioNetworkAdaptations::kEnableFecFieldNumber;
const int AudioNetworkAdaptations::kEnableDtxFieldNumber;
const int AudioNetworkAdaptations::kNumChannelsFieldNumber;
const int AudioNetworkAdaptations::kNumberOfDeltasFieldNumber;
const int AudioNetworkAdaptations::kTimestampMsDeltasFieldNumber;
const int AudioNetworkAdaptations::kBitrateBpsDeltasFieldNumber;
const int AudioNetworkAdaptations::kFrameLengthMsDeltasFieldNumber;
const int AudioNetworkAdaptations::kUplinkPacketLossFractionDeltasFieldNumber;
const int AudioNetworkAdaptations::kEnableFecDeltasFieldNumber;
const int AudioNetworkAdaptations::kEnableDtxDeltasFieldNumber;
const int AudioNetworkAdaptations::kNumChannelsDeltasFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AudioNetworkAdaptations::AudioNetworkAdaptations()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_rtc_5fevent_5flog2_2eproto::scc_info_AudioNetworkAdaptations.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:webrtc.rtclog2.AudioNetworkAdaptations)
}
AudioNetworkAdaptations::AudioNetworkAdaptations(const AudioNetworkAdaptations& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  timestamp_ms_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_timestamp_ms_deltas()) {
    timestamp_ms_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timestamp_ms_deltas_);
  }
  bitrate_bps_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_bitrate_bps_deltas()) {
    bitrate_bps_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bitrate_bps_deltas_);
  }
  frame_length_ms_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_frame_length_ms_deltas()) {
    frame_length_ms_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.frame_length_ms_deltas_);
  }
  uplink_packet_loss_fraction_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_uplink_packet_loss_fraction_deltas()) {
    uplink_packet_loss_fraction_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uplink_packet_loss_fraction_deltas_);
  }
  enable_fec_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_enable_fec_deltas()) {
    enable_fec_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.enable_fec_deltas_);
  }
  enable_dtx_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_enable_dtx_deltas()) {
    enable_dtx_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.enable_dtx_deltas_);
  }
  num_channels_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_num_channels_deltas()) {
    num_channels_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.num_channels_deltas_);
  }
  ::memcpy(&timestamp_ms_, &from.timestamp_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&number_of_deltas_) -
    reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(number_of_deltas_));
  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog2.AudioNetworkAdaptations)
}

void AudioNetworkAdaptations::SharedCtor() {
  timestamp_ms_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bitrate_bps_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  frame_length_ms_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uplink_packet_loss_fraction_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enable_fec_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enable_dtx_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  num_channels_deltas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&number_of_deltas_) -
      reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(number_of_deltas_));
}

AudioNetworkAdaptations::~AudioNetworkAdaptations() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog2.AudioNetworkAdaptations)
  SharedDtor();
}

void AudioNetworkAdaptations::SharedDtor() {
  timestamp_ms_deltas_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bitrate_bps_deltas_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  frame_length_ms_deltas_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uplink_packet_loss_fraction_deltas_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enable_fec_deltas_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enable_dtx_deltas_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  num_channels_deltas_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AudioNetworkAdaptations::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AudioNetworkAdaptations& AudioNetworkAdaptations::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_rtc_5fevent_5flog2_2eproto::scc_info_AudioNetworkAdaptations.base);
  return *internal_default_instance();
}


void AudioNetworkAdaptations::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog2.AudioNetworkAdaptations)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      timestamp_ms_deltas_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      bitrate_bps_deltas_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      frame_length_ms_deltas_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      uplink_packet_loss_fraction_deltas_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      enable_fec_deltas_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      enable_dtx_deltas_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000040u) {
      num_channels_deltas_.ClearNonDefaultToEmptyNoArena();
    }
  }
  timestamp_ms_ = GOOGLE_LONGLONG(0);
  if (cached_has_bits & 32512u) {
    ::memset(&bitrate_bps_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&number_of_deltas_) -
        reinterpret_cast<char*>(&bitrate_bps_)) + sizeof(number_of_deltas_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AudioNetworkAdaptations::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:webrtc.rtclog2.AudioNetworkAdaptations)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp_ms = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_timestamp_ms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 bitrate_bps = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_bitrate_bps();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bitrate_bps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 frame_length_ms = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_frame_length_ms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frame_length_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 uplink_packet_loss_fraction = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_uplink_packet_loss_fraction();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uplink_packet_loss_fraction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_fec = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_enable_fec();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_fec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_dtx = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_enable_dtx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_dtx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 num_channels = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_num_channels();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_channels_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 number_of_deltas = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_number_of_deltas();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_of_deltas_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes timestamp_ms_deltas = 101;
      case 101: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 810 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_timestamp_ms_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes bitrate_bps_deltas = 102;
      case 102: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 818 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bitrate_bps_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes frame_length_ms_deltas = 103;
      case 103: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 826 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_frame_length_ms_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes uplink_packet_loss_fraction_deltas = 104;
      case 104: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 834 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_uplink_packet_loss_fraction_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes enable_fec_deltas = 105;
      case 105: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 842 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_enable_fec_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes enable_dtx_deltas = 106;
      case 106: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 850 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_enable_dtx_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes num_channels_deltas = 107;
      case 107: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 858 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_num_channels_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:webrtc.rtclog2.AudioNetworkAdaptations)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:webrtc.rtclog2.AudioNetworkAdaptations)
  return false;
#undef DO_
}

void AudioNetworkAdaptations::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:webrtc.rtclog2.AudioNetworkAdaptations)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp_ms = 1;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp_ms(), output);
  }

  // optional int32 bitrate_bps = 2;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bitrate_bps(), output);
  }

  // optional int32 frame_length_ms = 3;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->frame_length_ms(), output);
  }

  // optional uint32 uplink_packet_loss_fraction = 4;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->uplink_packet_loss_fraction(), output);
  }

  // optional bool enable_fec = 5;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->enable_fec(), output);
  }

  // optional bool enable_dtx = 6;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->enable_dtx(), output);
  }

  // optional uint32 num_channels = 7;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->num_channels(), output);
  }

  // optional uint32 number_of_deltas = 8;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->number_of_deltas(), output);
  }

  // optional bytes timestamp_ms_deltas = 101;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      101, this->timestamp_ms_deltas(), output);
  }

  // optional bytes bitrate_bps_deltas = 102;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      102, this->bitrate_bps_deltas(), output);
  }

  // optional bytes frame_length_ms_deltas = 103;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      103, this->frame_length_ms_deltas(), output);
  }

  // optional bytes uplink_packet_loss_fraction_deltas = 104;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      104, this->uplink_packet_loss_fraction_deltas(), output);
  }

  // optional bytes enable_fec_deltas = 105;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      105, this->enable_fec_deltas(), output);
  }

  // optional bytes enable_dtx_deltas = 106;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      106, this->enable_dtx_deltas(), output);
  }

  // optional bytes num_channels_deltas = 107;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      107, this->num_channels_deltas(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:webrtc.rtclog2.AudioNetworkAdaptations)
}

size_t AudioNetworkAdaptations::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog2.AudioNetworkAdaptations)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 255u) {
    // optional bytes timestamp_ms_deltas = 101;
    if (has_timestamp_ms_deltas()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->timestamp_ms_deltas());
    }

    // optional bytes bitrate_bps_deltas = 102;
    if (has_bitrate_bps_deltas()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bitrate_bps_deltas());
    }

    // optional bytes frame_length_ms_deltas = 103;
    if (has_frame_length_ms_deltas()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->frame_length_ms_deltas());
    }

    // optional bytes uplink_packet_loss_fraction_deltas = 104;
    if (has_uplink_packet_loss_fraction_deltas()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->uplink_packet_loss_fraction_deltas());
    }

    // optional bytes enable_fec_deltas = 105;
    if (has_enable_fec_deltas()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->enable_fec_deltas());
    }

    // optional bytes enable_dtx_deltas = 106;
    if (has_enable_dtx_deltas()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->enable_dtx_deltas());
    }

    // optional bytes num_channels_deltas = 107;
    if (has_num_channels_deltas()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->num_channels_deltas());
    }

    // optional int64 timestamp_ms = 1;
    if (has_timestamp_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp_ms());
    }

  }
  if (_has_bits_[8 / 32] & 32512u) {
    // optional int32 bitrate_bps = 2;
    if (has_bitrate_bps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bitrate_bps());
    }

    // optional int32 frame_length_ms = 3;
    if (has_frame_length_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->frame_length_ms());
    }

    // optional uint32 uplink_packet_loss_fraction = 4;
    if (has_uplink_packet_loss_fraction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uplink_packet_loss_fraction());
    }

    // optional bool enable_fec = 5;
    if (has_enable_fec()) {
      total_size += 1 + 1;
    }

    // optional bool enable_dtx = 6;
    if (has_enable_dtx()) {
      total_size += 1 + 1;
    }

    // optional uint32 num_channels = 7;
    if (has_num_channels()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_channels());
    }

    // optional uint32 number_of_deltas = 8;
    if (has_number_of_deltas()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->number_of_deltas());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AudioNetworkAdaptations::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AudioNetworkAdaptations*>(&from));
}

void AudioNetworkAdaptations::MergeFrom(const AudioNetworkAdaptations& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog2.AudioNetworkAdaptations)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_timestamp_ms_deltas();
      timestamp_ms_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timestamp_ms_deltas_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_bitrate_bps_deltas();
      bitrate_bps_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bitrate_bps_deltas_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_frame_length_ms_deltas();
      frame_length_ms_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.frame_length_ms_deltas_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_uplink_packet_loss_fraction_deltas();
      uplink_packet_loss_fraction_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uplink_packet_loss_fraction_deltas_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_enable_fec_deltas();
      enable_fec_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.enable_fec_deltas_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_enable_dtx_deltas();
      enable_dtx_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.enable_dtx_deltas_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_num_channels_deltas();
      num_channels_deltas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.num_channels_deltas_);
    }
    if (cached_has_bits & 0x00000080u) {
      timestamp_ms_ = from.timestamp_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 32512u) {
    if (cached_has_bits & 0x00000100u) {
      bitrate_bps_ = from.bitrate_bps_;
    }
    if (cached_has_bits & 0x00000200u) {
      frame_length_ms_ = from.frame_length_ms_;
    }
    if (cached_has_bits & 0x00000400u) {
      uplink_packet_loss_fraction_ = from.uplink_packet_loss_fraction_;
    }
    if (cached_has_bits & 0x00000800u) {
      enable_fec_ = from.enable_fec_;
    }
    if (cached_has_bits & 0x00001000u) {
      enable_dtx_ = from.enable_dtx_;
    }
    if (cached_has_bits & 0x00002000u) {
      num_channels_ = from.num_channels_;
    }
    if (cached_has_bits & 0x00004000u) {
      number_of_deltas_ = from.number_of_deltas_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AudioNetworkAdaptations::CopyFrom(const AudioNetworkAdaptations& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog2.AudioNetworkAdaptations)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioNetworkAdaptations::IsInitialized() const {
  return true;
}

void AudioNetworkAdaptations::Swap(AudioNetworkAdaptations* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AudioNetworkAdaptations::InternalSwap(AudioNetworkAdaptations* other) {
  using std::swap;
  timestamp_ms_deltas_.Swap(&other->timestamp_ms_deltas_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  bitrate_bps_deltas_.Swap(&other->bitrate_bps_deltas_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  frame_length_ms_deltas_.Swap(&other->frame_length_ms_deltas_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  uplink_packet_loss_fraction_deltas_.Swap(&other->uplink_packet_loss_fraction_deltas_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  enable_fec_deltas_.Swap(&other->enable_fec_deltas_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  enable_dtx_deltas_.Swap(&other->enable_dtx_deltas_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  num_channels_deltas_.Swap(&other->num_channels_deltas_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(timestamp_ms_, other->timestamp_ms_);
  swap(bitrate_bps_, other->bitrate_bps_);
  swap(frame_length_ms_, other->frame_length_ms_);
  swap(uplink_packet_loss_fraction_, other->uplink_packet_loss_fraction_);
  swap(enable_fec_, other->enable_fec_);
  swap(enable_dtx_, other->enable_dtx_);
  swap(num_channels_, other->num_channels_);
  swap(number_of_deltas_, other->number_of_deltas_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string AudioNetworkAdaptations::GetTypeName() const {
  return "webrtc.rtclog2.AudioNetworkAdaptations";
}


// ===================================================================

void BweProbeCluster::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BweProbeCluster::kTimestampMsFieldNumber;
const int BweProbeCluster::kIdFieldNumber;
const int BweProbeCluster::kBitrateBpsFieldNumber;
const int BweProbeCluster::kMinPacketsFieldNumber;
const int BweProbeCluster::kMinBytesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BweProbeCluster::BweProbeCluster()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_rtc_5fevent_5flog2_2eproto::scc_info_BweProbeCluster.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:webrtc.rtclog2.BweProbeCluster)
}
BweProbeCluster::BweProbeCluster(const BweProbeCluster& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&timestamp_ms_, &from.timestamp_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&min_bytes_) -
    reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(min_bytes_));
  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog2.BweProbeCluster)
}

void BweProbeCluster::SharedCtor() {
  ::memset(&timestamp_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&min_bytes_) -
      reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(min_bytes_));
}

BweProbeCluster::~BweProbeCluster() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog2.BweProbeCluster)
  SharedDtor();
}

void BweProbeCluster::SharedDtor() {
}

void BweProbeCluster::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BweProbeCluster& BweProbeCluster::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_rtc_5fevent_5flog2_2eproto::scc_info_BweProbeCluster.base);
  return *internal_default_instance();
}


void BweProbeCluster::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog2.BweProbeCluster)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    ::memset(&timestamp_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&min_bytes_) -
        reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(min_bytes_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BweProbeCluster::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:webrtc.rtclog2.BweProbeCluster)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp_ms = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_timestamp_ms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 bitrate_bps = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_bitrate_bps();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bitrate_bps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 min_packets = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_min_packets();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_packets_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 min_bytes = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_min_bytes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:webrtc.rtclog2.BweProbeCluster)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:webrtc.rtclog2.BweProbeCluster)
  return false;
#undef DO_
}

void BweProbeCluster::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:webrtc.rtclog2.BweProbeCluster)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp_ms = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp_ms(), output);
  }

  // optional uint32 id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  // optional uint32 bitrate_bps = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->bitrate_bps(), output);
  }

  // optional uint32 min_packets = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->min_packets(), output);
  }

  // optional uint32 min_bytes = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->min_bytes(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:webrtc.rtclog2.BweProbeCluster)
}

size_t BweProbeCluster::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog2.BweProbeCluster)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 31u) {
    // optional int64 timestamp_ms = 1;
    if (has_timestamp_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp_ms());
    }

    // optional uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 bitrate_bps = 3;
    if (has_bitrate_bps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bitrate_bps());
    }

    // optional uint32 min_packets = 4;
    if (has_min_packets()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_packets());
    }

    // optional uint32 min_bytes = 5;
    if (has_min_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_bytes());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BweProbeCluster::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BweProbeCluster*>(&from));
}

void BweProbeCluster::MergeFrom(const BweProbeCluster& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog2.BweProbeCluster)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      timestamp_ms_ = from.timestamp_ms_;
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      bitrate_bps_ = from.bitrate_bps_;
    }
    if (cached_has_bits & 0x00000008u) {
      min_packets_ = from.min_packets_;
    }
    if (cached_has_bits & 0x00000010u) {
      min_bytes_ = from.min_bytes_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BweProbeCluster::CopyFrom(const BweProbeCluster& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog2.BweProbeCluster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BweProbeCluster::IsInitialized() const {
  return true;
}

void BweProbeCluster::Swap(BweProbeCluster* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BweProbeCluster::InternalSwap(BweProbeCluster* other) {
  using std::swap;
  swap(timestamp_ms_, other->timestamp_ms_);
  swap(id_, other->id_);
  swap(bitrate_bps_, other->bitrate_bps_);
  swap(min_packets_, other->min_packets_);
  swap(min_bytes_, other->min_bytes_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string BweProbeCluster::GetTypeName() const {
  return "webrtc.rtclog2.BweProbeCluster";
}


// ===================================================================

void BweProbeResultSuccess::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BweProbeResultSuccess::kTimestampMsFieldNumber;
const int BweProbeResultSuccess::kIdFieldNumber;
const int BweProbeResultSuccess::kBitrateBpsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BweProbeResultSuccess::BweProbeResultSuccess()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_rtc_5fevent_5flog2_2eproto::scc_info_BweProbeResultSuccess.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:webrtc.rtclog2.BweProbeResultSuccess)
}
BweProbeResultSuccess::BweProbeResultSuccess(const BweProbeResultSuccess& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&timestamp_ms_, &from.timestamp_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&bitrate_bps_) -
    reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(bitrate_bps_));
  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog2.BweProbeResultSuccess)
}

void BweProbeResultSuccess::SharedCtor() {
  ::memset(&timestamp_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bitrate_bps_) -
      reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(bitrate_bps_));
}

BweProbeResultSuccess::~BweProbeResultSuccess() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog2.BweProbeResultSuccess)
  SharedDtor();
}

void BweProbeResultSuccess::SharedDtor() {
}

void BweProbeResultSuccess::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BweProbeResultSuccess& BweProbeResultSuccess::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_rtc_5fevent_5flog2_2eproto::scc_info_BweProbeResultSuccess.base);
  return *internal_default_instance();
}


void BweProbeResultSuccess::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog2.BweProbeResultSuccess)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&timestamp_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bitrate_bps_) -
        reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(bitrate_bps_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BweProbeResultSuccess::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:webrtc.rtclog2.BweProbeResultSuccess)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp_ms = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_timestamp_ms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 bitrate_bps = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_bitrate_bps();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bitrate_bps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:webrtc.rtclog2.BweProbeResultSuccess)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:webrtc.rtclog2.BweProbeResultSuccess)
  return false;
#undef DO_
}

void BweProbeResultSuccess::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:webrtc.rtclog2.BweProbeResultSuccess)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp_ms = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp_ms(), output);
  }

  // optional uint32 id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  // optional uint32 bitrate_bps = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->bitrate_bps(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:webrtc.rtclog2.BweProbeResultSuccess)
}

size_t BweProbeResultSuccess::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog2.BweProbeResultSuccess)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 7u) {
    // optional int64 timestamp_ms = 1;
    if (has_timestamp_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp_ms());
    }

    // optional uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 bitrate_bps = 3;
    if (has_bitrate_bps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bitrate_bps());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BweProbeResultSuccess::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BweProbeResultSuccess*>(&from));
}

void BweProbeResultSuccess::MergeFrom(const BweProbeResultSuccess& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog2.BweProbeResultSuccess)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      timestamp_ms_ = from.timestamp_ms_;
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      bitrate_bps_ = from.bitrate_bps_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BweProbeResultSuccess::CopyFrom(const BweProbeResultSuccess& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog2.BweProbeResultSuccess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BweProbeResultSuccess::IsInitialized() const {
  return true;
}

void BweProbeResultSuccess::Swap(BweProbeResultSuccess* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BweProbeResultSuccess::InternalSwap(BweProbeResultSuccess* other) {
  using std::swap;
  swap(timestamp_ms_, other->timestamp_ms_);
  swap(id_, other->id_);
  swap(bitrate_bps_, other->bitrate_bps_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string BweProbeResultSuccess::GetTypeName() const {
  return "webrtc.rtclog2.BweProbeResultSuccess";
}


// ===================================================================

void BweProbeResultFailure::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BweProbeResultFailure::kTimestampMsFieldNumber;
const int BweProbeResultFailure::kIdFieldNumber;
const int BweProbeResultFailure::kFailureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BweProbeResultFailure::BweProbeResultFailure()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_rtc_5fevent_5flog2_2eproto::scc_info_BweProbeResultFailure.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:webrtc.rtclog2.BweProbeResultFailure)
}
BweProbeResultFailure::BweProbeResultFailure(const BweProbeResultFailure& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&timestamp_ms_, &from.timestamp_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&failure_) -
    reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(failure_));
  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog2.BweProbeResultFailure)
}

void BweProbeResultFailure::SharedCtor() {
  ::memset(&timestamp_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&failure_) -
      reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(failure_));
}

BweProbeResultFailure::~BweProbeResultFailure() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog2.BweProbeResultFailure)
  SharedDtor();
}

void BweProbeResultFailure::SharedDtor() {
}

void BweProbeResultFailure::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BweProbeResultFailure& BweProbeResultFailure::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_rtc_5fevent_5flog2_2eproto::scc_info_BweProbeResultFailure.base);
  return *internal_default_instance();
}


void BweProbeResultFailure::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog2.BweProbeResultFailure)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&timestamp_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&failure_) -
        reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(failure_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BweProbeResultFailure::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:webrtc.rtclog2.BweProbeResultFailure)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp_ms = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_timestamp_ms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .webrtc.rtclog2.BweProbeResultFailure.FailureReason failure = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::webrtc::rtclog2::BweProbeResultFailure_FailureReason_IsValid(value)) {
            set_failure(static_cast< ::webrtc::rtclog2::BweProbeResultFailure_FailureReason >(value));
          } else {
            unknown_fields_stream.WriteVarint32(24u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:webrtc.rtclog2.BweProbeResultFailure)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:webrtc.rtclog2.BweProbeResultFailure)
  return false;
#undef DO_
}

void BweProbeResultFailure::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:webrtc.rtclog2.BweProbeResultFailure)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp_ms = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp_ms(), output);
  }

  // optional uint32 id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  // optional .webrtc.rtclog2.BweProbeResultFailure.FailureReason failure = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->failure(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:webrtc.rtclog2.BweProbeResultFailure)
}

size_t BweProbeResultFailure::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog2.BweProbeResultFailure)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 7u) {
    // optional int64 timestamp_ms = 1;
    if (has_timestamp_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp_ms());
    }

    // optional uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional .webrtc.rtclog2.BweProbeResultFailure.FailureReason failure = 3;
    if (has_failure()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->failure());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BweProbeResultFailure::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BweProbeResultFailure*>(&from));
}

void BweProbeResultFailure::MergeFrom(const BweProbeResultFailure& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog2.BweProbeResultFailure)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      timestamp_ms_ = from.timestamp_ms_;
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      failure_ = from.failure_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BweProbeResultFailure::CopyFrom(const BweProbeResultFailure& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog2.BweProbeResultFailure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BweProbeResultFailure::IsInitialized() const {
  return true;
}

void BweProbeResultFailure::Swap(BweProbeResultFailure* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BweProbeResultFailure::InternalSwap(BweProbeResultFailure* other) {
  using std::swap;
  swap(timestamp_ms_, other->timestamp_ms_);
  swap(id_, other->id_);
  swap(failure_, other->failure_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string BweProbeResultFailure::GetTypeName() const {
  return "webrtc.rtclog2.BweProbeResultFailure";
}


// ===================================================================

void AlrState::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AlrState::kTimestampMsFieldNumber;
const int AlrState::kInAlrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AlrState::AlrState()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_rtc_5fevent_5flog2_2eproto::scc_info_AlrState.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:webrtc.rtclog2.AlrState)
}
AlrState::AlrState(const AlrState& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&timestamp_ms_, &from.timestamp_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&in_alr_) -
    reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(in_alr_));
  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog2.AlrState)
}

void AlrState::SharedCtor() {
  ::memset(&timestamp_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&in_alr_) -
      reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(in_alr_));
}

AlrState::~AlrState() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog2.AlrState)
  SharedDtor();
}

void AlrState::SharedDtor() {
}

void AlrState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AlrState& AlrState::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_rtc_5fevent_5flog2_2eproto::scc_info_AlrState.base);
  return *internal_default_instance();
}


void AlrState::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog2.AlrState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&timestamp_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&in_alr_) -
        reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(in_alr_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AlrState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:webrtc.rtclog2.AlrState)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp_ms = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_timestamp_ms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool in_alr = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_in_alr();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &in_alr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:webrtc.rtclog2.AlrState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:webrtc.rtclog2.AlrState)
  return false;
#undef DO_
}

void AlrState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:webrtc.rtclog2.AlrState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp_ms = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp_ms(), output);
  }

  // optional bool in_alr = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->in_alr(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:webrtc.rtclog2.AlrState)
}

size_t AlrState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog2.AlrState)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 3u) {
    // optional int64 timestamp_ms = 1;
    if (has_timestamp_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp_ms());
    }

    // optional bool in_alr = 2;
    if (has_in_alr()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AlrState::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AlrState*>(&from));
}

void AlrState::MergeFrom(const AlrState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog2.AlrState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      timestamp_ms_ = from.timestamp_ms_;
    }
    if (cached_has_bits & 0x00000002u) {
      in_alr_ = from.in_alr_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AlrState::CopyFrom(const AlrState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog2.AlrState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlrState::IsInitialized() const {
  return true;
}

void AlrState::Swap(AlrState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AlrState::InternalSwap(AlrState* other) {
  using std::swap;
  swap(timestamp_ms_, other->timestamp_ms_);
  swap(in_alr_, other->in_alr_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string AlrState::GetTypeName() const {
  return "webrtc.rtclog2.AlrState";
}


// ===================================================================

void IceCandidatePairConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IceCandidatePairConfig::kTimestampMsFieldNumber;
const int IceCandidatePairConfig::kConfigTypeFieldNumber;
const int IceCandidatePairConfig::kCandidatePairIdFieldNumber;
const int IceCandidatePairConfig::kLocalCandidateTypeFieldNumber;
const int IceCandidatePairConfig::kLocalRelayProtocolFieldNumber;
const int IceCandidatePairConfig::kLocalNetworkTypeFieldNumber;
const int IceCandidatePairConfig::kLocalAddressFamilyFieldNumber;
const int IceCandidatePairConfig::kRemoteCandidateTypeFieldNumber;
const int IceCandidatePairConfig::kRemoteAddressFamilyFieldNumber;
const int IceCandidatePairConfig::kCandidatePairProtocolFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IceCandidatePairConfig::IceCandidatePairConfig()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_rtc_5fevent_5flog2_2eproto::scc_info_IceCandidatePairConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:webrtc.rtclog2.IceCandidatePairConfig)
}
IceCandidatePairConfig::IceCandidatePairConfig(const IceCandidatePairConfig& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&timestamp_ms_, &from.timestamp_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&candidate_pair_protocol_) -
    reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(candidate_pair_protocol_));
  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog2.IceCandidatePairConfig)
}

void IceCandidatePairConfig::SharedCtor() {
  ::memset(&timestamp_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&candidate_pair_protocol_) -
      reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(candidate_pair_protocol_));
}

IceCandidatePairConfig::~IceCandidatePairConfig() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog2.IceCandidatePairConfig)
  SharedDtor();
}

void IceCandidatePairConfig::SharedDtor() {
}

void IceCandidatePairConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IceCandidatePairConfig& IceCandidatePairConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_rtc_5fevent_5flog2_2eproto::scc_info_IceCandidatePairConfig.base);
  return *internal_default_instance();
}


void IceCandidatePairConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog2.IceCandidatePairConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&timestamp_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&remote_candidate_type_) -
        reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(remote_candidate_type_));
  }
  if (cached_has_bits & 768u) {
    ::memset(&remote_address_family_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&candidate_pair_protocol_) -
        reinterpret_cast<char*>(&remote_address_family_)) + sizeof(candidate_pair_protocol_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool IceCandidatePairConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:webrtc.rtclog2.IceCandidatePairConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp_ms = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_timestamp_ms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .webrtc.rtclog2.IceCandidatePairConfig.IceCandidatePairConfigType config_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::webrtc::rtclog2::IceCandidatePairConfig_IceCandidatePairConfigType_IsValid(value)) {
            set_config_type(static_cast< ::webrtc::rtclog2::IceCandidatePairConfig_IceCandidatePairConfigType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 candidate_pair_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_candidate_pair_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &candidate_pair_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .webrtc.rtclog2.IceCandidatePairConfig.IceCandidateType local_candidate_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::webrtc::rtclog2::IceCandidatePairConfig_IceCandidateType_IsValid(value)) {
            set_local_candidate_type(static_cast< ::webrtc::rtclog2::IceCandidatePairConfig_IceCandidateType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(32u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .webrtc.rtclog2.IceCandidatePairConfig.Protocol local_relay_protocol = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::webrtc::rtclog2::IceCandidatePairConfig_Protocol_IsValid(value)) {
            set_local_relay_protocol(static_cast< ::webrtc::rtclog2::IceCandidatePairConfig_Protocol >(value));
          } else {
            unknown_fields_stream.WriteVarint32(40u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .webrtc.rtclog2.IceCandidatePairConfig.NetworkType local_network_type = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::webrtc::rtclog2::IceCandidatePairConfig_NetworkType_IsValid(value)) {
            set_local_network_type(static_cast< ::webrtc::rtclog2::IceCandidatePairConfig_NetworkType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(48u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .webrtc.rtclog2.IceCandidatePairConfig.AddressFamily local_address_family = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::webrtc::rtclog2::IceCandidatePairConfig_AddressFamily_IsValid(value)) {
            set_local_address_family(static_cast< ::webrtc::rtclog2::IceCandidatePairConfig_AddressFamily >(value));
          } else {
            unknown_fields_stream.WriteVarint32(56u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .webrtc.rtclog2.IceCandidatePairConfig.IceCandidateType remote_candidate_type = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::webrtc::rtclog2::IceCandidatePairConfig_IceCandidateType_IsValid(value)) {
            set_remote_candidate_type(static_cast< ::webrtc::rtclog2::IceCandidatePairConfig_IceCandidateType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(64u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .webrtc.rtclog2.IceCandidatePairConfig.AddressFamily remote_address_family = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::webrtc::rtclog2::IceCandidatePairConfig_AddressFamily_IsValid(value)) {
            set_remote_address_family(static_cast< ::webrtc::rtclog2::IceCandidatePairConfig_AddressFamily >(value));
          } else {
            unknown_fields_stream.WriteVarint32(72u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .webrtc.rtclog2.IceCandidatePairConfig.Protocol candidate_pair_protocol = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::webrtc::rtclog2::IceCandidatePairConfig_Protocol_IsValid(value)) {
            set_candidate_pair_protocol(static_cast< ::webrtc::rtclog2::IceCandidatePairConfig_Protocol >(value));
          } else {
            unknown_fields_stream.WriteVarint32(80u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:webrtc.rtclog2.IceCandidatePairConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:webrtc.rtclog2.IceCandidatePairConfig)
  return false;
#undef DO_
}

void IceCandidatePairConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:webrtc.rtclog2.IceCandidatePairConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp_ms = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp_ms(), output);
  }

  // optional .webrtc.rtclog2.IceCandidatePairConfig.IceCandidatePairConfigType config_type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->config_type(), output);
  }

  // optional uint32 candidate_pair_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->candidate_pair_id(), output);
  }

  // optional .webrtc.rtclog2.IceCandidatePairConfig.IceCandidateType local_candidate_type = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->local_candidate_type(), output);
  }

  // optional .webrtc.rtclog2.IceCandidatePairConfig.Protocol local_relay_protocol = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->local_relay_protocol(), output);
  }

  // optional .webrtc.rtclog2.IceCandidatePairConfig.NetworkType local_network_type = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->local_network_type(), output);
  }

  // optional .webrtc.rtclog2.IceCandidatePairConfig.AddressFamily local_address_family = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->local_address_family(), output);
  }

  // optional .webrtc.rtclog2.IceCandidatePairConfig.IceCandidateType remote_candidate_type = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->remote_candidate_type(), output);
  }

  // optional .webrtc.rtclog2.IceCandidatePairConfig.AddressFamily remote_address_family = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->remote_address_family(), output);
  }

  // optional .webrtc.rtclog2.IceCandidatePairConfig.Protocol candidate_pair_protocol = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->candidate_pair_protocol(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:webrtc.rtclog2.IceCandidatePairConfig)
}

size_t IceCandidatePairConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog2.IceCandidatePairConfig)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 255u) {
    // optional int64 timestamp_ms = 1;
    if (has_timestamp_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp_ms());
    }

    // optional .webrtc.rtclog2.IceCandidatePairConfig.IceCandidatePairConfigType config_type = 2;
    if (has_config_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->config_type());
    }

    // optional uint32 candidate_pair_id = 3;
    if (has_candidate_pair_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->candidate_pair_id());
    }

    // optional .webrtc.rtclog2.IceCandidatePairConfig.IceCandidateType local_candidate_type = 4;
    if (has_local_candidate_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->local_candidate_type());
    }

    // optional .webrtc.rtclog2.IceCandidatePairConfig.Protocol local_relay_protocol = 5;
    if (has_local_relay_protocol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->local_relay_protocol());
    }

    // optional .webrtc.rtclog2.IceCandidatePairConfig.NetworkType local_network_type = 6;
    if (has_local_network_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->local_network_type());
    }

    // optional .webrtc.rtclog2.IceCandidatePairConfig.AddressFamily local_address_family = 7;
    if (has_local_address_family()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->local_address_family());
    }

    // optional .webrtc.rtclog2.IceCandidatePairConfig.IceCandidateType remote_candidate_type = 8;
    if (has_remote_candidate_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->remote_candidate_type());
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional .webrtc.rtclog2.IceCandidatePairConfig.AddressFamily remote_address_family = 9;
    if (has_remote_address_family()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->remote_address_family());
    }

    // optional .webrtc.rtclog2.IceCandidatePairConfig.Protocol candidate_pair_protocol = 10;
    if (has_candidate_pair_protocol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->candidate_pair_protocol());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IceCandidatePairConfig::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IceCandidatePairConfig*>(&from));
}

void IceCandidatePairConfig::MergeFrom(const IceCandidatePairConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog2.IceCandidatePairConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      timestamp_ms_ = from.timestamp_ms_;
    }
    if (cached_has_bits & 0x00000002u) {
      config_type_ = from.config_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      candidate_pair_id_ = from.candidate_pair_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      local_candidate_type_ = from.local_candidate_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      local_relay_protocol_ = from.local_relay_protocol_;
    }
    if (cached_has_bits & 0x00000020u) {
      local_network_type_ = from.local_network_type_;
    }
    if (cached_has_bits & 0x00000040u) {
      local_address_family_ = from.local_address_family_;
    }
    if (cached_has_bits & 0x00000080u) {
      remote_candidate_type_ = from.remote_candidate_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      remote_address_family_ = from.remote_address_family_;
    }
    if (cached_has_bits & 0x00000200u) {
      candidate_pair_protocol_ = from.candidate_pair_protocol_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void IceCandidatePairConfig::CopyFrom(const IceCandidatePairConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog2.IceCandidatePairConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IceCandidatePairConfig::IsInitialized() const {
  return true;
}

void IceCandidatePairConfig::Swap(IceCandidatePairConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IceCandidatePairConfig::InternalSwap(IceCandidatePairConfig* other) {
  using std::swap;
  swap(timestamp_ms_, other->timestamp_ms_);
  swap(config_type_, other->config_type_);
  swap(candidate_pair_id_, other->candidate_pair_id_);
  swap(local_candidate_type_, other->local_candidate_type_);
  swap(local_relay_protocol_, other->local_relay_protocol_);
  swap(local_network_type_, other->local_network_type_);
  swap(local_address_family_, other->local_address_family_);
  swap(remote_candidate_type_, other->remote_candidate_type_);
  swap(remote_address_family_, other->remote_address_family_);
  swap(candidate_pair_protocol_, other->candidate_pair_protocol_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string IceCandidatePairConfig::GetTypeName() const {
  return "webrtc.rtclog2.IceCandidatePairConfig";
}


// ===================================================================

void IceCandidatePairEvent::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IceCandidatePairEvent::kTimestampMsFieldNumber;
const int IceCandidatePairEvent::kEventTypeFieldNumber;
const int IceCandidatePairEvent::kCandidatePairIdFieldNumber;
const int IceCandidatePairEvent::kTransactionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IceCandidatePairEvent::IceCandidatePairEvent()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_rtc_5fevent_5flog2_2eproto::scc_info_IceCandidatePairEvent.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:webrtc.rtclog2.IceCandidatePairEvent)
}
IceCandidatePairEvent::IceCandidatePairEvent(const IceCandidatePairEvent& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&timestamp_ms_, &from.timestamp_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&transaction_id_) -
    reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(transaction_id_));
  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog2.IceCandidatePairEvent)
}

void IceCandidatePairEvent::SharedCtor() {
  ::memset(&timestamp_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&transaction_id_) -
      reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(transaction_id_));
}

IceCandidatePairEvent::~IceCandidatePairEvent() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog2.IceCandidatePairEvent)
  SharedDtor();
}

void IceCandidatePairEvent::SharedDtor() {
}

void IceCandidatePairEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IceCandidatePairEvent& IceCandidatePairEvent::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_rtc_5fevent_5flog2_2eproto::scc_info_IceCandidatePairEvent.base);
  return *internal_default_instance();
}


void IceCandidatePairEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog2.IceCandidatePairEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&timestamp_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&transaction_id_) -
        reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(transaction_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool IceCandidatePairEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:webrtc.rtclog2.IceCandidatePairEvent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp_ms = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_timestamp_ms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .webrtc.rtclog2.IceCandidatePairEvent.IceCandidatePairEventType event_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::webrtc::rtclog2::IceCandidatePairEvent_IceCandidatePairEventType_IsValid(value)) {
            set_event_type(static_cast< ::webrtc::rtclog2::IceCandidatePairEvent_IceCandidatePairEventType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 candidate_pair_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_candidate_pair_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &candidate_pair_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 transaction_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_transaction_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &transaction_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:webrtc.rtclog2.IceCandidatePairEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:webrtc.rtclog2.IceCandidatePairEvent)
  return false;
#undef DO_
}

void IceCandidatePairEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:webrtc.rtclog2.IceCandidatePairEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp_ms = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp_ms(), output);
  }

  // optional .webrtc.rtclog2.IceCandidatePairEvent.IceCandidatePairEventType event_type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->event_type(), output);
  }

  // optional uint32 candidate_pair_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->candidate_pair_id(), output);
  }

  // optional uint32 transaction_id = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->transaction_id(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:webrtc.rtclog2.IceCandidatePairEvent)
}

size_t IceCandidatePairEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog2.IceCandidatePairEvent)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 15u) {
    // optional int64 timestamp_ms = 1;
    if (has_timestamp_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp_ms());
    }

    // optional .webrtc.rtclog2.IceCandidatePairEvent.IceCandidatePairEventType event_type = 2;
    if (has_event_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->event_type());
    }

    // optional uint32 candidate_pair_id = 3;
    if (has_candidate_pair_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->candidate_pair_id());
    }

    // optional uint32 transaction_id = 4;
    if (has_transaction_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->transaction_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IceCandidatePairEvent::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IceCandidatePairEvent*>(&from));
}

void IceCandidatePairEvent::MergeFrom(const IceCandidatePairEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog2.IceCandidatePairEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      timestamp_ms_ = from.timestamp_ms_;
    }
    if (cached_has_bits & 0x00000002u) {
      event_type_ = from.event_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      candidate_pair_id_ = from.candidate_pair_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      transaction_id_ = from.transaction_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void IceCandidatePairEvent::CopyFrom(const IceCandidatePairEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog2.IceCandidatePairEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IceCandidatePairEvent::IsInitialized() const {
  return true;
}

void IceCandidatePairEvent::Swap(IceCandidatePairEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IceCandidatePairEvent::InternalSwap(IceCandidatePairEvent* other) {
  using std::swap;
  swap(timestamp_ms_, other->timestamp_ms_);
  swap(event_type_, other->event_type_);
  swap(candidate_pair_id_, other->candidate_pair_id_);
  swap(transaction_id_, other->transaction_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string IceCandidatePairEvent::GetTypeName() const {
  return "webrtc.rtclog2.IceCandidatePairEvent";
}


// ===================================================================

void DtlsTransportStateEvent::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DtlsTransportStateEvent::kTimestampMsFieldNumber;
const int DtlsTransportStateEvent::kDtlsTransportStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DtlsTransportStateEvent::DtlsTransportStateEvent()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_rtc_5fevent_5flog2_2eproto::scc_info_DtlsTransportStateEvent.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:webrtc.rtclog2.DtlsTransportStateEvent)
}
DtlsTransportStateEvent::DtlsTransportStateEvent(const DtlsTransportStateEvent& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&timestamp_ms_, &from.timestamp_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&dtls_transport_state_) -
    reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(dtls_transport_state_));
  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog2.DtlsTransportStateEvent)
}

void DtlsTransportStateEvent::SharedCtor() {
  ::memset(&timestamp_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dtls_transport_state_) -
      reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(dtls_transport_state_));
}

DtlsTransportStateEvent::~DtlsTransportStateEvent() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog2.DtlsTransportStateEvent)
  SharedDtor();
}

void DtlsTransportStateEvent::SharedDtor() {
}

void DtlsTransportStateEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DtlsTransportStateEvent& DtlsTransportStateEvent::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_rtc_5fevent_5flog2_2eproto::scc_info_DtlsTransportStateEvent.base);
  return *internal_default_instance();
}


void DtlsTransportStateEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog2.DtlsTransportStateEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&timestamp_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dtls_transport_state_) -
        reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(dtls_transport_state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DtlsTransportStateEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:webrtc.rtclog2.DtlsTransportStateEvent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp_ms = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_timestamp_ms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .webrtc.rtclog2.DtlsTransportStateEvent.DtlsTransportState dtls_transport_state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::webrtc::rtclog2::DtlsTransportStateEvent_DtlsTransportState_IsValid(value)) {
            set_dtls_transport_state(static_cast< ::webrtc::rtclog2::DtlsTransportStateEvent_DtlsTransportState >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:webrtc.rtclog2.DtlsTransportStateEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:webrtc.rtclog2.DtlsTransportStateEvent)
  return false;
#undef DO_
}

void DtlsTransportStateEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:webrtc.rtclog2.DtlsTransportStateEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp_ms = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp_ms(), output);
  }

  // optional .webrtc.rtclog2.DtlsTransportStateEvent.DtlsTransportState dtls_transport_state = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->dtls_transport_state(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:webrtc.rtclog2.DtlsTransportStateEvent)
}

size_t DtlsTransportStateEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog2.DtlsTransportStateEvent)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 3u) {
    // optional int64 timestamp_ms = 1;
    if (has_timestamp_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp_ms());
    }

    // optional .webrtc.rtclog2.DtlsTransportStateEvent.DtlsTransportState dtls_transport_state = 2;
    if (has_dtls_transport_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->dtls_transport_state());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DtlsTransportStateEvent::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DtlsTransportStateEvent*>(&from));
}

void DtlsTransportStateEvent::MergeFrom(const DtlsTransportStateEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog2.DtlsTransportStateEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      timestamp_ms_ = from.timestamp_ms_;
    }
    if (cached_has_bits & 0x00000002u) {
      dtls_transport_state_ = from.dtls_transport_state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DtlsTransportStateEvent::CopyFrom(const DtlsTransportStateEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog2.DtlsTransportStateEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DtlsTransportStateEvent::IsInitialized() const {
  return true;
}

void DtlsTransportStateEvent::Swap(DtlsTransportStateEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DtlsTransportStateEvent::InternalSwap(DtlsTransportStateEvent* other) {
  using std::swap;
  swap(timestamp_ms_, other->timestamp_ms_);
  swap(dtls_transport_state_, other->dtls_transport_state_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string DtlsTransportStateEvent::GetTypeName() const {
  return "webrtc.rtclog2.DtlsTransportStateEvent";
}


// ===================================================================

void DtlsWritableState::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DtlsWritableState::kTimestampMsFieldNumber;
const int DtlsWritableState::kWritableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DtlsWritableState::DtlsWritableState()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_rtc_5fevent_5flog2_2eproto::scc_info_DtlsWritableState.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:webrtc.rtclog2.DtlsWritableState)
}
DtlsWritableState::DtlsWritableState(const DtlsWritableState& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&timestamp_ms_, &from.timestamp_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&writable_) -
    reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(writable_));
  // @@protoc_insertion_point(copy_constructor:webrtc.rtclog2.DtlsWritableState)
}

void DtlsWritableState::SharedCtor() {
  ::memset(&timestamp_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&writable_) -
      reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(writable_));
}

DtlsWritableState::~DtlsWritableState() {
  // @@protoc_insertion_point(destructor:webrtc.rtclog2.DtlsWritableState)
  SharedDtor();
}

void DtlsWritableState::SharedDtor() {
}

void DtlsWritableState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DtlsWritableState& DtlsWritableState::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_rtc_5fevent_5flog2_2eproto::scc_info_DtlsWritableState.base);
  return *internal_default_instance();
}


void DtlsWritableState::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.rtclog2.DtlsWritableState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&timestamp_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&writable_) -
        reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(writable_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DtlsWritableState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:webrtc.rtclog2.DtlsWritableState)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp_ms = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_timestamp_ms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool writable = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_writable();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &writable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:webrtc.rtclog2.DtlsWritableState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:webrtc.rtclog2.DtlsWritableState)
  return false;
#undef DO_
}

void DtlsWritableState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:webrtc.rtclog2.DtlsWritableState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp_ms = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp_ms(), output);
  }

  // optional bool writable = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->writable(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:webrtc.rtclog2.DtlsWritableState)
}

size_t DtlsWritableState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.rtclog2.DtlsWritableState)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 3u) {
    // optional int64 timestamp_ms = 1;
    if (has_timestamp_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp_ms());
    }

    // optional bool writable = 2;
    if (has_writable()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DtlsWritableState::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DtlsWritableState*>(&from));
}

void DtlsWritableState::MergeFrom(const DtlsWritableState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.rtclog2.DtlsWritableState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      timestamp_ms_ = from.timestamp_ms_;
    }
    if (cached_has_bits & 0x00000002u) {
      writable_ = from.writable_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DtlsWritableState::CopyFrom(const DtlsWritableState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.rtclog2.DtlsWritableState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DtlsWritableState::IsInitialized() const {
  return true;
}

void DtlsWritableState::Swap(DtlsWritableState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DtlsWritableState::InternalSwap(DtlsWritableState* other) {
  using std::swap;
  swap(timestamp_ms_, other->timestamp_ms_);
  swap(writable_, other->writable_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string DtlsWritableState::GetTypeName() const {
  return "webrtc.rtclog2.DtlsWritableState";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace rtclog2
}  // namespace webrtc
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::webrtc::rtclog2::EventStream* Arena::CreateMaybeMessage< ::webrtc::rtclog2::EventStream >(Arena* arena) {
  return Arena::CreateInternal< ::webrtc::rtclog2::EventStream >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::webrtc::rtclog2::Event* Arena::CreateMaybeMessage< ::webrtc::rtclog2::Event >(Arena* arena) {
  return Arena::CreateInternal< ::webrtc::rtclog2::Event >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::webrtc::rtclog2::GenericPacketReceived* Arena::CreateMaybeMessage< ::webrtc::rtclog2::GenericPacketReceived >(Arena* arena) {
  return Arena::CreateInternal< ::webrtc::rtclog2::GenericPacketReceived >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::webrtc::rtclog2::GenericPacketSent* Arena::CreateMaybeMessage< ::webrtc::rtclog2::GenericPacketSent >(Arena* arena) {
  return Arena::CreateInternal< ::webrtc::rtclog2::GenericPacketSent >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::webrtc::rtclog2::GenericAckReceived* Arena::CreateMaybeMessage< ::webrtc::rtclog2::GenericAckReceived >(Arena* arena) {
  return Arena::CreateInternal< ::webrtc::rtclog2::GenericAckReceived >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::webrtc::rtclog2::IncomingRtpPackets* Arena::CreateMaybeMessage< ::webrtc::rtclog2::IncomingRtpPackets >(Arena* arena) {
  return Arena::CreateInternal< ::webrtc::rtclog2::IncomingRtpPackets >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::webrtc::rtclog2::OutgoingRtpPackets* Arena::CreateMaybeMessage< ::webrtc::rtclog2::OutgoingRtpPackets >(Arena* arena) {
  return Arena::CreateInternal< ::webrtc::rtclog2::OutgoingRtpPackets >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::webrtc::rtclog2::IncomingRtcpPackets* Arena::CreateMaybeMessage< ::webrtc::rtclog2::IncomingRtcpPackets >(Arena* arena) {
  return Arena::CreateInternal< ::webrtc::rtclog2::IncomingRtcpPackets >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::webrtc::rtclog2::OutgoingRtcpPackets* Arena::CreateMaybeMessage< ::webrtc::rtclog2::OutgoingRtcpPackets >(Arena* arena) {
  return Arena::CreateInternal< ::webrtc::rtclog2::OutgoingRtcpPackets >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::webrtc::rtclog2::AudioPlayoutEvents* Arena::CreateMaybeMessage< ::webrtc::rtclog2::AudioPlayoutEvents >(Arena* arena) {
  return Arena::CreateInternal< ::webrtc::rtclog2::AudioPlayoutEvents >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::webrtc::rtclog2::BeginLogEvent* Arena::CreateMaybeMessage< ::webrtc::rtclog2::BeginLogEvent >(Arena* arena) {
  return Arena::CreateInternal< ::webrtc::rtclog2::BeginLogEvent >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::webrtc::rtclog2::EndLogEvent* Arena::CreateMaybeMessage< ::webrtc::rtclog2::EndLogEvent >(Arena* arena) {
  return Arena::CreateInternal< ::webrtc::rtclog2::EndLogEvent >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::webrtc::rtclog2::LossBasedBweUpdates* Arena::CreateMaybeMessage< ::webrtc::rtclog2::LossBasedBweUpdates >(Arena* arena) {
  return Arena::CreateInternal< ::webrtc::rtclog2::LossBasedBweUpdates >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::webrtc::rtclog2::DelayBasedBweUpdates* Arena::CreateMaybeMessage< ::webrtc::rtclog2::DelayBasedBweUpdates >(Arena* arena) {
  return Arena::CreateInternal< ::webrtc::rtclog2::DelayBasedBweUpdates >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::webrtc::rtclog2::RtpHeaderExtensionConfig* Arena::CreateMaybeMessage< ::webrtc::rtclog2::RtpHeaderExtensionConfig >(Arena* arena) {
  return Arena::CreateInternal< ::webrtc::rtclog2::RtpHeaderExtensionConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::webrtc::rtclog2::VideoRecvStreamConfig* Arena::CreateMaybeMessage< ::webrtc::rtclog2::VideoRecvStreamConfig >(Arena* arena) {
  return Arena::CreateInternal< ::webrtc::rtclog2::VideoRecvStreamConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::webrtc::rtclog2::VideoSendStreamConfig* Arena::CreateMaybeMessage< ::webrtc::rtclog2::VideoSendStreamConfig >(Arena* arena) {
  return Arena::CreateInternal< ::webrtc::rtclog2::VideoSendStreamConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::webrtc::rtclog2::AudioRecvStreamConfig* Arena::CreateMaybeMessage< ::webrtc::rtclog2::AudioRecvStreamConfig >(Arena* arena) {
  return Arena::CreateInternal< ::webrtc::rtclog2::AudioRecvStreamConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::webrtc::rtclog2::AudioSendStreamConfig* Arena::CreateMaybeMessage< ::webrtc::rtclog2::AudioSendStreamConfig >(Arena* arena) {
  return Arena::CreateInternal< ::webrtc::rtclog2::AudioSendStreamConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::webrtc::rtclog2::AudioNetworkAdaptations* Arena::CreateMaybeMessage< ::webrtc::rtclog2::AudioNetworkAdaptations >(Arena* arena) {
  return Arena::CreateInternal< ::webrtc::rtclog2::AudioNetworkAdaptations >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::webrtc::rtclog2::BweProbeCluster* Arena::CreateMaybeMessage< ::webrtc::rtclog2::BweProbeCluster >(Arena* arena) {
  return Arena::CreateInternal< ::webrtc::rtclog2::BweProbeCluster >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::webrtc::rtclog2::BweProbeResultSuccess* Arena::CreateMaybeMessage< ::webrtc::rtclog2::BweProbeResultSuccess >(Arena* arena) {
  return Arena::CreateInternal< ::webrtc::rtclog2::BweProbeResultSuccess >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::webrtc::rtclog2::BweProbeResultFailure* Arena::CreateMaybeMessage< ::webrtc::rtclog2::BweProbeResultFailure >(Arena* arena) {
  return Arena::CreateInternal< ::webrtc::rtclog2::BweProbeResultFailure >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::webrtc::rtclog2::AlrState* Arena::CreateMaybeMessage< ::webrtc::rtclog2::AlrState >(Arena* arena) {
  return Arena::CreateInternal< ::webrtc::rtclog2::AlrState >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::webrtc::rtclog2::IceCandidatePairConfig* Arena::CreateMaybeMessage< ::webrtc::rtclog2::IceCandidatePairConfig >(Arena* arena) {
  return Arena::CreateInternal< ::webrtc::rtclog2::IceCandidatePairConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::webrtc::rtclog2::IceCandidatePairEvent* Arena::CreateMaybeMessage< ::webrtc::rtclog2::IceCandidatePairEvent >(Arena* arena) {
  return Arena::CreateInternal< ::webrtc::rtclog2::IceCandidatePairEvent >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::webrtc::rtclog2::DtlsTransportStateEvent* Arena::CreateMaybeMessage< ::webrtc::rtclog2::DtlsTransportStateEvent >(Arena* arena) {
  return Arena::CreateInternal< ::webrtc::rtclog2::DtlsTransportStateEvent >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::webrtc::rtclog2::DtlsWritableState* Arena::CreateMaybeMessage< ::webrtc::rtclog2::DtlsWritableState >(Arena* arena) {
  return Arena::CreateInternal< ::webrtc::rtclog2::DtlsWritableState >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
