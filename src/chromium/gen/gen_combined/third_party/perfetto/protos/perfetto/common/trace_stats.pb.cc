// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: perfetto/common/trace_stats.proto

#include "perfetto/common/trace_stats.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_perfetto_2fcommon_2ftrace_5fstats_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_perfetto_2fcommon_2ftrace_5fstats_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TraceStats_BufferStats;
}  // namespace protobuf_perfetto_2fcommon_2ftrace_5fstats_2eproto
namespace perfetto {
namespace protos {
class TraceStats_BufferStatsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TraceStats_BufferStats>
      _instance;
} _TraceStats_BufferStats_default_instance_;
class TraceStatsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TraceStats>
      _instance;
} _TraceStats_default_instance_;
}  // namespace protos
}  // namespace perfetto
namespace protobuf_perfetto_2fcommon_2ftrace_5fstats_2eproto {
static void InitDefaultsTraceStats_BufferStats() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_TraceStats_BufferStats_default_instance_;
    new (ptr) ::perfetto::protos::TraceStats_BufferStats();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::TraceStats_BufferStats::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TraceStats_BufferStats =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTraceStats_BufferStats}, {}};

static void InitDefaultsTraceStats() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_TraceStats_default_instance_;
    new (ptr) ::perfetto::protos::TraceStats();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::TraceStats::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TraceStats =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTraceStats}, {
      &protobuf_perfetto_2fcommon_2ftrace_5fstats_2eproto::scc_info_TraceStats_BufferStats.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_TraceStats_BufferStats.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TraceStats.base);
}

}  // namespace protobuf_perfetto_2fcommon_2ftrace_5fstats_2eproto
namespace perfetto {
namespace protos {

// ===================================================================

void TraceStats_BufferStats::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TraceStats_BufferStats::kBufferSizeFieldNumber;
const int TraceStats_BufferStats::kBytesWrittenFieldNumber;
const int TraceStats_BufferStats::kBytesOverwrittenFieldNumber;
const int TraceStats_BufferStats::kBytesReadFieldNumber;
const int TraceStats_BufferStats::kPaddingBytesWrittenFieldNumber;
const int TraceStats_BufferStats::kPaddingBytesClearedFieldNumber;
const int TraceStats_BufferStats::kChunksWrittenFieldNumber;
const int TraceStats_BufferStats::kChunksRewrittenFieldNumber;
const int TraceStats_BufferStats::kChunksOverwrittenFieldNumber;
const int TraceStats_BufferStats::kChunksDiscardedFieldNumber;
const int TraceStats_BufferStats::kChunksReadFieldNumber;
const int TraceStats_BufferStats::kChunksCommittedOutOfOrderFieldNumber;
const int TraceStats_BufferStats::kWriteWrapCountFieldNumber;
const int TraceStats_BufferStats::kPatchesSucceededFieldNumber;
const int TraceStats_BufferStats::kPatchesFailedFieldNumber;
const int TraceStats_BufferStats::kReadaheadsSucceededFieldNumber;
const int TraceStats_BufferStats::kReadaheadsFailedFieldNumber;
const int TraceStats_BufferStats::kAbiViolationsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TraceStats_BufferStats::TraceStats_BufferStats()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_perfetto_2fcommon_2ftrace_5fstats_2eproto::scc_info_TraceStats_BufferStats.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.TraceStats.BufferStats)
}
TraceStats_BufferStats::TraceStats_BufferStats(const TraceStats_BufferStats& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&bytes_written_, &from.bytes_written_,
    static_cast<size_t>(reinterpret_cast<char*>(&chunks_discarded_) -
    reinterpret_cast<char*>(&bytes_written_)) + sizeof(chunks_discarded_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TraceStats.BufferStats)
}

void TraceStats_BufferStats::SharedCtor() {
  ::memset(&bytes_written_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chunks_discarded_) -
      reinterpret_cast<char*>(&bytes_written_)) + sizeof(chunks_discarded_));
}

TraceStats_BufferStats::~TraceStats_BufferStats() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TraceStats.BufferStats)
  SharedDtor();
}

void TraceStats_BufferStats::SharedDtor() {
}

void TraceStats_BufferStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TraceStats_BufferStats& TraceStats_BufferStats::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_perfetto_2fcommon_2ftrace_5fstats_2eproto::scc_info_TraceStats_BufferStats.base);
  return *internal_default_instance();
}


void TraceStats_BufferStats::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TraceStats.BufferStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&bytes_written_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&readaheads_failed_) -
        reinterpret_cast<char*>(&bytes_written_)) + sizeof(readaheads_failed_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&abi_violations_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&padding_bytes_cleared_) -
        reinterpret_cast<char*>(&abi_violations_)) + sizeof(padding_bytes_cleared_));
  }
  if (cached_has_bits & 196608u) {
    ::memset(&chunks_read_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&chunks_discarded_) -
        reinterpret_cast<char*>(&chunks_read_)) + sizeof(chunks_discarded_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TraceStats_BufferStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.TraceStats.BufferStats)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 bytes_written = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_bytes_written();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bytes_written_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 chunks_written = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_chunks_written();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chunks_written_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 chunks_overwritten = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_chunks_overwritten();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chunks_overwritten_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 write_wrap_count = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_write_wrap_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &write_wrap_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 patches_succeeded = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_patches_succeeded();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &patches_succeeded_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 patches_failed = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_patches_failed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &patches_failed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 readaheads_succeeded = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_readaheads_succeeded();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &readaheads_succeeded_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 readaheads_failed = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_readaheads_failed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &readaheads_failed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 abi_violations = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_abi_violations();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &abi_violations_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 chunks_rewritten = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_chunks_rewritten();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chunks_rewritten_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 chunks_committed_out_of_order = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_chunks_committed_out_of_order();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chunks_committed_out_of_order_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 buffer_size = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_buffer_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &buffer_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 bytes_overwritten = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_bytes_overwritten();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bytes_overwritten_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 bytes_read = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_bytes_read();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bytes_read_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 padding_bytes_written = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_padding_bytes_written();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &padding_bytes_written_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 padding_bytes_cleared = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_padding_bytes_cleared();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &padding_bytes_cleared_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 chunks_read = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_chunks_read();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chunks_read_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 chunks_discarded = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          set_has_chunks_discarded();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chunks_discarded_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.TraceStats.BufferStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.TraceStats.BufferStats)
  return false;
#undef DO_
}

void TraceStats_BufferStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.TraceStats.BufferStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 bytes_written = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->bytes_written(), output);
  }

  // optional uint64 chunks_written = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->chunks_written(), output);
  }

  // optional uint64 chunks_overwritten = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->chunks_overwritten(), output);
  }

  // optional uint64 write_wrap_count = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->write_wrap_count(), output);
  }

  // optional uint64 patches_succeeded = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->patches_succeeded(), output);
  }

  // optional uint64 patches_failed = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->patches_failed(), output);
  }

  // optional uint64 readaheads_succeeded = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->readaheads_succeeded(), output);
  }

  // optional uint64 readaheads_failed = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->readaheads_failed(), output);
  }

  // optional uint64 abi_violations = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->abi_violations(), output);
  }

  // optional uint64 chunks_rewritten = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->chunks_rewritten(), output);
  }

  // optional uint64 chunks_committed_out_of_order = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->chunks_committed_out_of_order(), output);
  }

  // optional uint64 buffer_size = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->buffer_size(), output);
  }

  // optional uint64 bytes_overwritten = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->bytes_overwritten(), output);
  }

  // optional uint64 bytes_read = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->bytes_read(), output);
  }

  // optional uint64 padding_bytes_written = 15;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(15, this->padding_bytes_written(), output);
  }

  // optional uint64 padding_bytes_cleared = 16;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(16, this->padding_bytes_cleared(), output);
  }

  // optional uint64 chunks_read = 17;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(17, this->chunks_read(), output);
  }

  // optional uint64 chunks_discarded = 18;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(18, this->chunks_discarded(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.TraceStats.BufferStats)
}

size_t TraceStats_BufferStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TraceStats.BufferStats)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 255u) {
    // optional uint64 bytes_written = 1;
    if (has_bytes_written()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bytes_written());
    }

    // optional uint64 chunks_written = 2;
    if (has_chunks_written()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->chunks_written());
    }

    // optional uint64 chunks_overwritten = 3;
    if (has_chunks_overwritten()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->chunks_overwritten());
    }

    // optional uint64 write_wrap_count = 4;
    if (has_write_wrap_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->write_wrap_count());
    }

    // optional uint64 patches_succeeded = 5;
    if (has_patches_succeeded()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->patches_succeeded());
    }

    // optional uint64 patches_failed = 6;
    if (has_patches_failed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->patches_failed());
    }

    // optional uint64 readaheads_succeeded = 7;
    if (has_readaheads_succeeded()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->readaheads_succeeded());
    }

    // optional uint64 readaheads_failed = 8;
    if (has_readaheads_failed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->readaheads_failed());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional uint64 abi_violations = 9;
    if (has_abi_violations()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->abi_violations());
    }

    // optional uint64 chunks_rewritten = 10;
    if (has_chunks_rewritten()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->chunks_rewritten());
    }

    // optional uint64 chunks_committed_out_of_order = 11;
    if (has_chunks_committed_out_of_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->chunks_committed_out_of_order());
    }

    // optional uint64 buffer_size = 12;
    if (has_buffer_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->buffer_size());
    }

    // optional uint64 bytes_overwritten = 13;
    if (has_bytes_overwritten()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bytes_overwritten());
    }

    // optional uint64 bytes_read = 14;
    if (has_bytes_read()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bytes_read());
    }

    // optional uint64 padding_bytes_written = 15;
    if (has_padding_bytes_written()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->padding_bytes_written());
    }

    // optional uint64 padding_bytes_cleared = 16;
    if (has_padding_bytes_cleared()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->padding_bytes_cleared());
    }

  }
  if (_has_bits_[16 / 32] & 196608u) {
    // optional uint64 chunks_read = 17;
    if (has_chunks_read()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->chunks_read());
    }

    // optional uint64 chunks_discarded = 18;
    if (has_chunks_discarded()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->chunks_discarded());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TraceStats_BufferStats::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TraceStats_BufferStats*>(&from));
}

void TraceStats_BufferStats::MergeFrom(const TraceStats_BufferStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TraceStats.BufferStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      bytes_written_ = from.bytes_written_;
    }
    if (cached_has_bits & 0x00000002u) {
      chunks_written_ = from.chunks_written_;
    }
    if (cached_has_bits & 0x00000004u) {
      chunks_overwritten_ = from.chunks_overwritten_;
    }
    if (cached_has_bits & 0x00000008u) {
      write_wrap_count_ = from.write_wrap_count_;
    }
    if (cached_has_bits & 0x00000010u) {
      patches_succeeded_ = from.patches_succeeded_;
    }
    if (cached_has_bits & 0x00000020u) {
      patches_failed_ = from.patches_failed_;
    }
    if (cached_has_bits & 0x00000040u) {
      readaheads_succeeded_ = from.readaheads_succeeded_;
    }
    if (cached_has_bits & 0x00000080u) {
      readaheads_failed_ = from.readaheads_failed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      abi_violations_ = from.abi_violations_;
    }
    if (cached_has_bits & 0x00000200u) {
      chunks_rewritten_ = from.chunks_rewritten_;
    }
    if (cached_has_bits & 0x00000400u) {
      chunks_committed_out_of_order_ = from.chunks_committed_out_of_order_;
    }
    if (cached_has_bits & 0x00000800u) {
      buffer_size_ = from.buffer_size_;
    }
    if (cached_has_bits & 0x00001000u) {
      bytes_overwritten_ = from.bytes_overwritten_;
    }
    if (cached_has_bits & 0x00002000u) {
      bytes_read_ = from.bytes_read_;
    }
    if (cached_has_bits & 0x00004000u) {
      padding_bytes_written_ = from.padding_bytes_written_;
    }
    if (cached_has_bits & 0x00008000u) {
      padding_bytes_cleared_ = from.padding_bytes_cleared_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 196608u) {
    if (cached_has_bits & 0x00010000u) {
      chunks_read_ = from.chunks_read_;
    }
    if (cached_has_bits & 0x00020000u) {
      chunks_discarded_ = from.chunks_discarded_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TraceStats_BufferStats::CopyFrom(const TraceStats_BufferStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TraceStats.BufferStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TraceStats_BufferStats::IsInitialized() const {
  return true;
}

void TraceStats_BufferStats::Swap(TraceStats_BufferStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TraceStats_BufferStats::InternalSwap(TraceStats_BufferStats* other) {
  using std::swap;
  swap(bytes_written_, other->bytes_written_);
  swap(chunks_written_, other->chunks_written_);
  swap(chunks_overwritten_, other->chunks_overwritten_);
  swap(write_wrap_count_, other->write_wrap_count_);
  swap(patches_succeeded_, other->patches_succeeded_);
  swap(patches_failed_, other->patches_failed_);
  swap(readaheads_succeeded_, other->readaheads_succeeded_);
  swap(readaheads_failed_, other->readaheads_failed_);
  swap(abi_violations_, other->abi_violations_);
  swap(chunks_rewritten_, other->chunks_rewritten_);
  swap(chunks_committed_out_of_order_, other->chunks_committed_out_of_order_);
  swap(buffer_size_, other->buffer_size_);
  swap(bytes_overwritten_, other->bytes_overwritten_);
  swap(bytes_read_, other->bytes_read_);
  swap(padding_bytes_written_, other->padding_bytes_written_);
  swap(padding_bytes_cleared_, other->padding_bytes_cleared_);
  swap(chunks_read_, other->chunks_read_);
  swap(chunks_discarded_, other->chunks_discarded_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string TraceStats_BufferStats::GetTypeName() const {
  return "perfetto.protos.TraceStats.BufferStats";
}


// ===================================================================

void TraceStats::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TraceStats::kBufferStatsFieldNumber;
const int TraceStats::kProducersConnectedFieldNumber;
const int TraceStats::kProducersSeenFieldNumber;
const int TraceStats::kDataSourcesRegisteredFieldNumber;
const int TraceStats::kDataSourcesSeenFieldNumber;
const int TraceStats::kTracingSessionsFieldNumber;
const int TraceStats::kTotalBuffersFieldNumber;
const int TraceStats::kChunksDiscardedFieldNumber;
const int TraceStats::kPatchesDiscardedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TraceStats::TraceStats()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_perfetto_2fcommon_2ftrace_5fstats_2eproto::scc_info_TraceStats.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.TraceStats)
}
TraceStats::TraceStats(const TraceStats& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      buffer_stats_(from.buffer_stats_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&producers_seen_, &from.producers_seen_,
    static_cast<size_t>(reinterpret_cast<char*>(&patches_discarded_) -
    reinterpret_cast<char*>(&producers_seen_)) + sizeof(patches_discarded_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TraceStats)
}

void TraceStats::SharedCtor() {
  ::memset(&producers_seen_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&patches_discarded_) -
      reinterpret_cast<char*>(&producers_seen_)) + sizeof(patches_discarded_));
}

TraceStats::~TraceStats() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TraceStats)
  SharedDtor();
}

void TraceStats::SharedDtor() {
}

void TraceStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TraceStats& TraceStats::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_perfetto_2fcommon_2ftrace_5fstats_2eproto::scc_info_TraceStats.base);
  return *internal_default_instance();
}


void TraceStats::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TraceStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  buffer_stats_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&producers_seen_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&patches_discarded_) -
        reinterpret_cast<char*>(&producers_seen_)) + sizeof(patches_discarded_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TraceStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.TraceStats)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .perfetto.protos.TraceStats.BufferStats buffer_stats = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_buffer_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 producers_connected = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_producers_connected();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &producers_connected_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 producers_seen = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_producers_seen();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &producers_seen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 data_sources_registered = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_data_sources_registered();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_sources_registered_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 data_sources_seen = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_data_sources_seen();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &data_sources_seen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tracing_sessions = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_tracing_sessions();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tracing_sessions_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 total_buffers = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_total_buffers();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_buffers_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 chunks_discarded = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_chunks_discarded();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chunks_discarded_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 patches_discarded = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_patches_discarded();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &patches_discarded_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.TraceStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.TraceStats)
  return false;
#undef DO_
}

void TraceStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.TraceStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .perfetto.protos.TraceStats.BufferStats buffer_stats = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->buffer_stats_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1,
      this->buffer_stats(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 producers_connected = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->producers_connected(), output);
  }

  // optional uint64 producers_seen = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->producers_seen(), output);
  }

  // optional uint32 data_sources_registered = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->data_sources_registered(), output);
  }

  // optional uint64 data_sources_seen = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->data_sources_seen(), output);
  }

  // optional uint32 tracing_sessions = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->tracing_sessions(), output);
  }

  // optional uint32 total_buffers = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->total_buffers(), output);
  }

  // optional uint64 chunks_discarded = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->chunks_discarded(), output);
  }

  // optional uint64 patches_discarded = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->patches_discarded(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.TraceStats)
}

size_t TraceStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TraceStats)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // repeated .perfetto.protos.TraceStats.BufferStats buffer_stats = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->buffer_stats_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->buffer_stats(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional uint64 producers_seen = 3;
    if (has_producers_seen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->producers_seen());
    }

    // optional uint32 producers_connected = 2;
    if (has_producers_connected()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->producers_connected());
    }

    // optional uint32 data_sources_registered = 4;
    if (has_data_sources_registered()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->data_sources_registered());
    }

    // optional uint64 data_sources_seen = 5;
    if (has_data_sources_seen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->data_sources_seen());
    }

    // optional uint32 tracing_sessions = 6;
    if (has_tracing_sessions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tracing_sessions());
    }

    // optional uint32 total_buffers = 7;
    if (has_total_buffers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_buffers());
    }

    // optional uint64 chunks_discarded = 8;
    if (has_chunks_discarded()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->chunks_discarded());
    }

    // optional uint64 patches_discarded = 9;
    if (has_patches_discarded()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->patches_discarded());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TraceStats::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TraceStats*>(&from));
}

void TraceStats::MergeFrom(const TraceStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TraceStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  buffer_stats_.MergeFrom(from.buffer_stats_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      producers_seen_ = from.producers_seen_;
    }
    if (cached_has_bits & 0x00000002u) {
      producers_connected_ = from.producers_connected_;
    }
    if (cached_has_bits & 0x00000004u) {
      data_sources_registered_ = from.data_sources_registered_;
    }
    if (cached_has_bits & 0x00000008u) {
      data_sources_seen_ = from.data_sources_seen_;
    }
    if (cached_has_bits & 0x00000010u) {
      tracing_sessions_ = from.tracing_sessions_;
    }
    if (cached_has_bits & 0x00000020u) {
      total_buffers_ = from.total_buffers_;
    }
    if (cached_has_bits & 0x00000040u) {
      chunks_discarded_ = from.chunks_discarded_;
    }
    if (cached_has_bits & 0x00000080u) {
      patches_discarded_ = from.patches_discarded_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TraceStats::CopyFrom(const TraceStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TraceStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TraceStats::IsInitialized() const {
  return true;
}

void TraceStats::Swap(TraceStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TraceStats::InternalSwap(TraceStats* other) {
  using std::swap;
  CastToBase(&buffer_stats_)->InternalSwap(CastToBase(&other->buffer_stats_));
  swap(producers_seen_, other->producers_seen_);
  swap(producers_connected_, other->producers_connected_);
  swap(data_sources_registered_, other->data_sources_registered_);
  swap(data_sources_seen_, other->data_sources_seen_);
  swap(tracing_sessions_, other->tracing_sessions_);
  swap(total_buffers_, other->total_buffers_);
  swap(chunks_discarded_, other->chunks_discarded_);
  swap(patches_discarded_, other->patches_discarded_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string TraceStats::GetTypeName() const {
  return "perfetto.protos.TraceStats";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::perfetto::protos::TraceStats_BufferStats* Arena::CreateMaybeMessage< ::perfetto::protos::TraceStats_BufferStats >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::TraceStats_BufferStats >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::perfetto::protos::TraceStats* Arena::CreateMaybeMessage< ::perfetto::protos::TraceStats >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::TraceStats >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
