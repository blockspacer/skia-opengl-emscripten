// Autogenerated by the ProtoZero compiler plugin. DO NOT EDIT.

#ifndef PERFETTO_PROTOS_PERFETTO_TRACE_POWER_POWER_RAILS_PROTO_H_
#define PERFETTO_PROTOS_PERFETTO_TRACE_POWER_POWER_RAILS_PROTO_H_

#include <stddef.h>
#include <stdint.h>

#include "perfetto/base/export.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/message.h"

namespace perfetto {
namespace protos {
namespace pbzero {

class PowerRails_EnergyData;
class PowerRails_RailDescriptor;

class PERFETTO_EXPORT PowerRails : public ::protozero::Message {
 public:
  enum : int32_t {
    kRailDescriptorFieldNumber = 1,
    kEnergyDataFieldNumber = 2,
  };
  class Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/2, /*HAS_REPEATED_FIELDS=*/true> {
   public:
    Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
    bool has_rail_descriptor() const { return at<1>().valid(); }
    ::protozero::RepeatedFieldIterator rail_descriptor() const { return GetRepeated(1); }
    bool has_energy_data() const { return at<2>().valid(); }
    ::protozero::RepeatedFieldIterator energy_data() const { return GetRepeated(2); }
  };
  using RailDescriptor = ::perfetto::protos::pbzero::PowerRails_RailDescriptor;
  using EnergyData = ::perfetto::protos::pbzero::PowerRails_EnergyData;
  template <typename T = PowerRails_RailDescriptor> T* add_rail_descriptor() {
    return BeginNestedMessage<T>(1);
  }

  template <typename T = PowerRails_EnergyData> T* add_energy_data() {
    return BeginNestedMessage<T>(2);
  }

};

class PERFETTO_EXPORT PowerRails_EnergyData : public ::protozero::Message {
 public:
  enum : int32_t {
    kIndexFieldNumber = 1,
    kTimestampMsFieldNumber = 2,
    kEnergyFieldNumber = 3,
  };
  class Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/3, /*HAS_REPEATED_FIELDS=*/false> {
   public:
    Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
    bool has_index() const { return at<1>().valid(); }
    uint32_t index() const { return at<1>().as_uint32(); }
    bool has_timestamp_ms() const { return at<2>().valid(); }
    uint64_t timestamp_ms() const { return at<2>().as_uint64(); }
    bool has_energy() const { return at<3>().valid(); }
    uint64_t energy() const { return at<3>().as_uint64(); }
  };
  void set_index(uint32_t value) {
    AppendVarInt(1, value);
  }
  void set_timestamp_ms(uint64_t value) {
    AppendVarInt(2, value);
  }
  void set_energy(uint64_t value) {
    AppendVarInt(3, value);
  }
};

class PERFETTO_EXPORT PowerRails_RailDescriptor : public ::protozero::Message {
 public:
  enum : int32_t {
    kIndexFieldNumber = 1,
    kRailNameFieldNumber = 2,
    kSubsysNameFieldNumber = 3,
    kSamplingRateFieldNumber = 4,
  };
  class Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/4, /*HAS_REPEATED_FIELDS=*/false> {
   public:
    Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
    bool has_index() const { return at<1>().valid(); }
    uint32_t index() const { return at<1>().as_uint32(); }
    bool has_rail_name() const { return at<2>().valid(); }
    ::protozero::ConstChars rail_name() const { return at<2>().as_string(); }
    bool has_subsys_name() const { return at<3>().valid(); }
    ::protozero::ConstChars subsys_name() const { return at<3>().as_string(); }
    bool has_sampling_rate() const { return at<4>().valid(); }
    uint32_t sampling_rate() const { return at<4>().as_uint32(); }
  };
  void set_index(uint32_t value) {
    AppendVarInt(1, value);
  }
  void set_rail_name(const char* value) {
    AppendString(2, value);
  }
  // Doesn't check for null terminator.
  // Expects |value| to be at least |size| long.
  void set_rail_name(const char* value, size_t size) {
    AppendBytes(2, value, size);
  }
  void set_subsys_name(const char* value) {
    AppendString(3, value);
  }
  // Doesn't check for null terminator.
  // Expects |value| to be at least |size| long.
  void set_subsys_name(const char* value, size_t size) {
    AppendBytes(3, value, size);
  }
  void set_sampling_rate(uint32_t value) {
    AppendVarInt(4, value);
  }
};

} // Namespace.
} // Namespace.
} // Namespace.
#endif  // Include guard.
