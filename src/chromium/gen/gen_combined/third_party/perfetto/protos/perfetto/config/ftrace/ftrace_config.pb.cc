// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: perfetto/config/ftrace/ftrace_config.proto

#include "perfetto/config/ftrace/ftrace_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace perfetto {
namespace protos {
class FtraceConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FtraceConfig>
      _instance;
} _FtraceConfig_default_instance_;
}  // namespace protos
}  // namespace perfetto
namespace protobuf_perfetto_2fconfig_2fftrace_2fftrace_5fconfig_2eproto {
static void InitDefaultsFtraceConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_FtraceConfig_default_instance_;
    new (ptr) ::perfetto::protos::FtraceConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::FtraceConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FtraceConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFtraceConfig}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_FtraceConfig.base);
}

}  // namespace protobuf_perfetto_2fconfig_2fftrace_2fftrace_5fconfig_2eproto
namespace perfetto {
namespace protos {

// ===================================================================

void FtraceConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FtraceConfig::kFtraceEventsFieldNumber;
const int FtraceConfig::kAtraceCategoriesFieldNumber;
const int FtraceConfig::kAtraceAppsFieldNumber;
const int FtraceConfig::kBufferSizeKbFieldNumber;
const int FtraceConfig::kDrainPeriodMsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FtraceConfig::FtraceConfig()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_perfetto_2fconfig_2fftrace_2fftrace_5fconfig_2eproto::scc_info_FtraceConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.FtraceConfig)
}
FtraceConfig::FtraceConfig(const FtraceConfig& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      ftrace_events_(from.ftrace_events_),
      atrace_categories_(from.atrace_categories_),
      atrace_apps_(from.atrace_apps_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&buffer_size_kb_, &from.buffer_size_kb_,
    static_cast<size_t>(reinterpret_cast<char*>(&drain_period_ms_) -
    reinterpret_cast<char*>(&buffer_size_kb_)) + sizeof(drain_period_ms_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.FtraceConfig)
}

void FtraceConfig::SharedCtor() {
  ::memset(&buffer_size_kb_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&drain_period_ms_) -
      reinterpret_cast<char*>(&buffer_size_kb_)) + sizeof(drain_period_ms_));
}

FtraceConfig::~FtraceConfig() {
  // @@protoc_insertion_point(destructor:perfetto.protos.FtraceConfig)
  SharedDtor();
}

void FtraceConfig::SharedDtor() {
}

void FtraceConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FtraceConfig& FtraceConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_perfetto_2fconfig_2fftrace_2fftrace_5fconfig_2eproto::scc_info_FtraceConfig.base);
  return *internal_default_instance();
}


void FtraceConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.FtraceConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ftrace_events_.Clear();
  atrace_categories_.Clear();
  atrace_apps_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&buffer_size_kb_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&drain_period_ms_) -
        reinterpret_cast<char*>(&buffer_size_kb_)) + sizeof(drain_period_ms_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FtraceConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.FtraceConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string ftrace_events = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_ftrace_events()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string atrace_categories = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_atrace_categories()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string atrace_apps = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_atrace_apps()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 buffer_size_kb = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_buffer_size_kb();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buffer_size_kb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 drain_period_ms = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_drain_period_ms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &drain_period_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.FtraceConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.FtraceConfig)
  return false;
#undef DO_
}

void FtraceConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.FtraceConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string ftrace_events = 1;
  for (int i = 0, n = this->ftrace_events_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->ftrace_events(i), output);
  }

  // repeated string atrace_categories = 2;
  for (int i = 0, n = this->atrace_categories_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->atrace_categories(i), output);
  }

  // repeated string atrace_apps = 3;
  for (int i = 0, n = this->atrace_apps_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->atrace_apps(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 buffer_size_kb = 10;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->buffer_size_kb(), output);
  }

  // optional uint32 drain_period_ms = 11;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->drain_period_ms(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.FtraceConfig)
}

size_t FtraceConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.FtraceConfig)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // repeated string ftrace_events = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->ftrace_events_size());
  for (int i = 0, n = this->ftrace_events_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->ftrace_events(i));
  }

  // repeated string atrace_categories = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->atrace_categories_size());
  for (int i = 0, n = this->atrace_categories_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->atrace_categories(i));
  }

  // repeated string atrace_apps = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->atrace_apps_size());
  for (int i = 0, n = this->atrace_apps_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->atrace_apps(i));
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 buffer_size_kb = 10;
    if (has_buffer_size_kb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buffer_size_kb());
    }

    // optional uint32 drain_period_ms = 11;
    if (has_drain_period_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->drain_period_ms());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FtraceConfig::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FtraceConfig*>(&from));
}

void FtraceConfig::MergeFrom(const FtraceConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.FtraceConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ftrace_events_.MergeFrom(from.ftrace_events_);
  atrace_categories_.MergeFrom(from.atrace_categories_);
  atrace_apps_.MergeFrom(from.atrace_apps_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      buffer_size_kb_ = from.buffer_size_kb_;
    }
    if (cached_has_bits & 0x00000002u) {
      drain_period_ms_ = from.drain_period_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FtraceConfig::CopyFrom(const FtraceConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.FtraceConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FtraceConfig::IsInitialized() const {
  return true;
}

void FtraceConfig::Swap(FtraceConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FtraceConfig::InternalSwap(FtraceConfig* other) {
  using std::swap;
  ftrace_events_.InternalSwap(CastToBase(&other->ftrace_events_));
  atrace_categories_.InternalSwap(CastToBase(&other->atrace_categories_));
  atrace_apps_.InternalSwap(CastToBase(&other->atrace_apps_));
  swap(buffer_size_kb_, other->buffer_size_kb_);
  swap(drain_period_ms_, other->drain_period_ms_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string FtraceConfig::GetTypeName() const {
  return "perfetto.protos.FtraceConfig";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::perfetto::protos::FtraceConfig* Arena::CreateMaybeMessage< ::perfetto::protos::FtraceConfig >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::FtraceConfig >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
