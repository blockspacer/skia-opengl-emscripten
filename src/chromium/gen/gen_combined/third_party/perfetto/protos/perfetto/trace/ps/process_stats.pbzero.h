// Autogenerated by the ProtoZero compiler plugin. DO NOT EDIT.

#ifndef PERFETTO_PROTOS_PERFETTO_TRACE_PS_PROCESS_STATS_PROTO_H_
#define PERFETTO_PROTOS_PERFETTO_TRACE_PS_PROCESS_STATS_PROTO_H_

#include <stddef.h>
#include <stdint.h>

#include "perfetto/base/export.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/message.h"

namespace perfetto {
namespace protos {
namespace pbzero {

class ProcessStats_Process;

class PERFETTO_EXPORT ProcessStats : public ::protozero::Message {
 public:
  enum : int32_t {
    kProcessesFieldNumber = 1,
  };
  class Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/1, /*HAS_REPEATED_FIELDS=*/true> {
   public:
    Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
    bool has_processes() const { return at<1>().valid(); }
    ::protozero::RepeatedFieldIterator processes() const { return GetRepeated(1); }
  };
  using Process = ::perfetto::protos::pbzero::ProcessStats_Process;
  template <typename T = ProcessStats_Process> T* add_processes() {
    return BeginNestedMessage<T>(1);
  }

};

class PERFETTO_EXPORT ProcessStats_Process : public ::protozero::Message {
 public:
  enum : int32_t {
    kPidFieldNumber = 1,
    kVmSizeKbFieldNumber = 2,
    kVmRssKbFieldNumber = 3,
    kRssAnonKbFieldNumber = 4,
    kRssFileKbFieldNumber = 5,
    kRssShmemKbFieldNumber = 6,
    kVmSwapKbFieldNumber = 7,
    kVmLockedKbFieldNumber = 8,
    kVmHwmKbFieldNumber = 9,
    kOomScoreAdjFieldNumber = 10,
  };
  class Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/10, /*HAS_REPEATED_FIELDS=*/false> {
   public:
    Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
    bool has_pid() const { return at<1>().valid(); }
    int32_t pid() const { return at<1>().as_int32(); }
    bool has_vm_size_kb() const { return at<2>().valid(); }
    uint64_t vm_size_kb() const { return at<2>().as_uint64(); }
    bool has_vm_rss_kb() const { return at<3>().valid(); }
    uint64_t vm_rss_kb() const { return at<3>().as_uint64(); }
    bool has_rss_anon_kb() const { return at<4>().valid(); }
    uint64_t rss_anon_kb() const { return at<4>().as_uint64(); }
    bool has_rss_file_kb() const { return at<5>().valid(); }
    uint64_t rss_file_kb() const { return at<5>().as_uint64(); }
    bool has_rss_shmem_kb() const { return at<6>().valid(); }
    uint64_t rss_shmem_kb() const { return at<6>().as_uint64(); }
    bool has_vm_swap_kb() const { return at<7>().valid(); }
    uint64_t vm_swap_kb() const { return at<7>().as_uint64(); }
    bool has_vm_locked_kb() const { return at<8>().valid(); }
    uint64_t vm_locked_kb() const { return at<8>().as_uint64(); }
    bool has_vm_hwm_kb() const { return at<9>().valid(); }
    uint64_t vm_hwm_kb() const { return at<9>().as_uint64(); }
    bool has_oom_score_adj() const { return at<10>().valid(); }
    int64_t oom_score_adj() const { return at<10>().as_int64(); }
  };
  void set_pid(int32_t value) {
    AppendVarInt(1, value);
  }
  void set_vm_size_kb(uint64_t value) {
    AppendVarInt(2, value);
  }
  void set_vm_rss_kb(uint64_t value) {
    AppendVarInt(3, value);
  }
  void set_rss_anon_kb(uint64_t value) {
    AppendVarInt(4, value);
  }
  void set_rss_file_kb(uint64_t value) {
    AppendVarInt(5, value);
  }
  void set_rss_shmem_kb(uint64_t value) {
    AppendVarInt(6, value);
  }
  void set_vm_swap_kb(uint64_t value) {
    AppendVarInt(7, value);
  }
  void set_vm_locked_kb(uint64_t value) {
    AppendVarInt(8, value);
  }
  void set_vm_hwm_kb(uint64_t value) {
    AppendVarInt(9, value);
  }
  void set_oom_score_adj(int64_t value) {
    AppendVarInt(10, value);
  }
};

} // Namespace.
} // Namespace.
} // Namespace.
#endif  // Include guard.
