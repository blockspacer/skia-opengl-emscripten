// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: perfetto/config/test_config.proto

#include "perfetto/config/test_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_perfetto_2fconfig_2ftest_5fconfig_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_perfetto_2fconfig_2ftest_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TestConfig_DummyFields;
}  // namespace protobuf_perfetto_2fconfig_2ftest_5fconfig_2eproto
namespace perfetto {
namespace protos {
class TestConfig_DummyFieldsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TestConfig_DummyFields>
      _instance;
} _TestConfig_DummyFields_default_instance_;
class TestConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TestConfig>
      _instance;
} _TestConfig_default_instance_;
}  // namespace protos
}  // namespace perfetto
namespace protobuf_perfetto_2fconfig_2ftest_5fconfig_2eproto {
static void InitDefaultsTestConfig_DummyFields() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_TestConfig_DummyFields_default_instance_;
    new (ptr) ::perfetto::protos::TestConfig_DummyFields();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::TestConfig_DummyFields::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TestConfig_DummyFields =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTestConfig_DummyFields}, {}};

static void InitDefaultsTestConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_TestConfig_default_instance_;
    new (ptr) ::perfetto::protos::TestConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::TestConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TestConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTestConfig}, {
      &protobuf_perfetto_2fconfig_2ftest_5fconfig_2eproto::scc_info_TestConfig_DummyFields.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_TestConfig_DummyFields.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TestConfig.base);
}

}  // namespace protobuf_perfetto_2fconfig_2ftest_5fconfig_2eproto
namespace perfetto {
namespace protos {

// ===================================================================

void TestConfig_DummyFields::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TestConfig_DummyFields::kFieldUint32FieldNumber;
const int TestConfig_DummyFields::kFieldInt32FieldNumber;
const int TestConfig_DummyFields::kFieldUint64FieldNumber;
const int TestConfig_DummyFields::kFieldInt64FieldNumber;
const int TestConfig_DummyFields::kFieldFixed64FieldNumber;
const int TestConfig_DummyFields::kFieldSfixed64FieldNumber;
const int TestConfig_DummyFields::kFieldFixed32FieldNumber;
const int TestConfig_DummyFields::kFieldSfixed32FieldNumber;
const int TestConfig_DummyFields::kFieldDoubleFieldNumber;
const int TestConfig_DummyFields::kFieldFloatFieldNumber;
const int TestConfig_DummyFields::kFieldSint64FieldNumber;
const int TestConfig_DummyFields::kFieldSint32FieldNumber;
const int TestConfig_DummyFields::kFieldStringFieldNumber;
const int TestConfig_DummyFields::kFieldBytesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TestConfig_DummyFields::TestConfig_DummyFields()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_perfetto_2fconfig_2ftest_5fconfig_2eproto::scc_info_TestConfig_DummyFields.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.TestConfig.DummyFields)
}
TestConfig_DummyFields::TestConfig_DummyFields(const TestConfig_DummyFields& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  field_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_field_string()) {
    field_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.field_string_);
  }
  field_bytes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_field_bytes()) {
    field_bytes_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.field_bytes_);
  }
  ::memcpy(&field_uint32_, &from.field_uint32_,
    static_cast<size_t>(reinterpret_cast<char*>(&field_sint32_) -
    reinterpret_cast<char*>(&field_uint32_)) + sizeof(field_sint32_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TestConfig.DummyFields)
}

void TestConfig_DummyFields::SharedCtor() {
  field_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  field_bytes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&field_uint32_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&field_sint32_) -
      reinterpret_cast<char*>(&field_uint32_)) + sizeof(field_sint32_));
}

TestConfig_DummyFields::~TestConfig_DummyFields() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TestConfig.DummyFields)
  SharedDtor();
}

void TestConfig_DummyFields::SharedDtor() {
  field_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  field_bytes_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TestConfig_DummyFields::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestConfig_DummyFields& TestConfig_DummyFields::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_perfetto_2fconfig_2ftest_5fconfig_2eproto::scc_info_TestConfig_DummyFields.base);
  return *internal_default_instance();
}


void TestConfig_DummyFields::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TestConfig.DummyFields)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      field_string_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      field_bytes_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 252u) {
    ::memset(&field_uint32_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&field_sfixed64_) -
        reinterpret_cast<char*>(&field_uint32_)) + sizeof(field_sfixed64_));
  }
  if (cached_has_bits & 16128u) {
    ::memset(&field_fixed32_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&field_sint32_) -
        reinterpret_cast<char*>(&field_fixed32_)) + sizeof(field_sint32_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TestConfig_DummyFields::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.TestConfig.DummyFields)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 field_uint32 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_field_uint32();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &field_uint32_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 field_int32 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_field_int32();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &field_int32_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 field_uint64 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_field_uint64();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &field_uint64_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 field_int64 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_field_int64();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &field_int64_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 field_fixed64 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_field_fixed64();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &field_fixed64_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sfixed64 field_sfixed64 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_field_sfixed64();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &field_sfixed64_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 field_fixed32 = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {
          set_has_field_fixed32();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &field_fixed32_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sfixed32 field_sfixed32 = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {
          set_has_field_sfixed32();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &field_sfixed32_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double field_double = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {
          set_has_field_double();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &field_double_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float field_float = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {
          set_has_field_float();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &field_float_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint64 field_sint64 = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_field_sint64();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &field_sint64_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 field_sint32 = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_field_sint32();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &field_sint32_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string field_string = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_field_string()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes field_bytes = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_field_bytes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.TestConfig.DummyFields)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.TestConfig.DummyFields)
  return false;
#undef DO_
}

void TestConfig_DummyFields::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.TestConfig.DummyFields)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 field_uint32 = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->field_uint32(), output);
  }

  // optional int32 field_int32 = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->field_int32(), output);
  }

  // optional uint64 field_uint64 = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->field_uint64(), output);
  }

  // optional int64 field_int64 = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->field_int64(), output);
  }

  // optional fixed64 field_fixed64 = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->field_fixed64(), output);
  }

  // optional sfixed64 field_sfixed64 = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(6, this->field_sfixed64(), output);
  }

  // optional fixed32 field_fixed32 = 7;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(7, this->field_fixed32(), output);
  }

  // optional sfixed32 field_sfixed32 = 8;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(8, this->field_sfixed32(), output);
  }

  // optional double field_double = 9;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->field_double(), output);
  }

  // optional float field_float = 10;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->field_float(), output);
  }

  // optional sint64 field_sint64 = 11;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(11, this->field_sint64(), output);
  }

  // optional sint32 field_sint32 = 12;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(12, this->field_sint32(), output);
  }

  // optional string field_string = 13;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->field_string(), output);
  }

  // optional bytes field_bytes = 14;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      14, this->field_bytes(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.TestConfig.DummyFields)
}

size_t TestConfig_DummyFields::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TestConfig.DummyFields)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 255u) {
    // optional string field_string = 13;
    if (has_field_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->field_string());
    }

    // optional bytes field_bytes = 14;
    if (has_field_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->field_bytes());
    }

    // optional uint32 field_uint32 = 1;
    if (has_field_uint32()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->field_uint32());
    }

    // optional int32 field_int32 = 2;
    if (has_field_int32()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->field_int32());
    }

    // optional uint64 field_uint64 = 3;
    if (has_field_uint64()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->field_uint64());
    }

    // optional int64 field_int64 = 4;
    if (has_field_int64()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->field_int64());
    }

    // optional fixed64 field_fixed64 = 5;
    if (has_field_fixed64()) {
      total_size += 1 + 8;
    }

    // optional sfixed64 field_sfixed64 = 6;
    if (has_field_sfixed64()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 16128u) {
    // optional fixed32 field_fixed32 = 7;
    if (has_field_fixed32()) {
      total_size += 1 + 4;
    }

    // optional sfixed32 field_sfixed32 = 8;
    if (has_field_sfixed32()) {
      total_size += 1 + 4;
    }

    // optional double field_double = 9;
    if (has_field_double()) {
      total_size += 1 + 8;
    }

    // optional sint64 field_sint64 = 11;
    if (has_field_sint64()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->field_sint64());
    }

    // optional float field_float = 10;
    if (has_field_float()) {
      total_size += 1 + 4;
    }

    // optional sint32 field_sint32 = 12;
    if (has_field_sint32()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->field_sint32());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestConfig_DummyFields::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TestConfig_DummyFields*>(&from));
}

void TestConfig_DummyFields::MergeFrom(const TestConfig_DummyFields& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TestConfig.DummyFields)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_field_string();
      field_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.field_string_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_field_bytes();
      field_bytes_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.field_bytes_);
    }
    if (cached_has_bits & 0x00000004u) {
      field_uint32_ = from.field_uint32_;
    }
    if (cached_has_bits & 0x00000008u) {
      field_int32_ = from.field_int32_;
    }
    if (cached_has_bits & 0x00000010u) {
      field_uint64_ = from.field_uint64_;
    }
    if (cached_has_bits & 0x00000020u) {
      field_int64_ = from.field_int64_;
    }
    if (cached_has_bits & 0x00000040u) {
      field_fixed64_ = from.field_fixed64_;
    }
    if (cached_has_bits & 0x00000080u) {
      field_sfixed64_ = from.field_sfixed64_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16128u) {
    if (cached_has_bits & 0x00000100u) {
      field_fixed32_ = from.field_fixed32_;
    }
    if (cached_has_bits & 0x00000200u) {
      field_sfixed32_ = from.field_sfixed32_;
    }
    if (cached_has_bits & 0x00000400u) {
      field_double_ = from.field_double_;
    }
    if (cached_has_bits & 0x00000800u) {
      field_sint64_ = from.field_sint64_;
    }
    if (cached_has_bits & 0x00001000u) {
      field_float_ = from.field_float_;
    }
    if (cached_has_bits & 0x00002000u) {
      field_sint32_ = from.field_sint32_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TestConfig_DummyFields::CopyFrom(const TestConfig_DummyFields& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TestConfig.DummyFields)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestConfig_DummyFields::IsInitialized() const {
  return true;
}

void TestConfig_DummyFields::Swap(TestConfig_DummyFields* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TestConfig_DummyFields::InternalSwap(TestConfig_DummyFields* other) {
  using std::swap;
  field_string_.Swap(&other->field_string_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  field_bytes_.Swap(&other->field_bytes_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(field_uint32_, other->field_uint32_);
  swap(field_int32_, other->field_int32_);
  swap(field_uint64_, other->field_uint64_);
  swap(field_int64_, other->field_int64_);
  swap(field_fixed64_, other->field_fixed64_);
  swap(field_sfixed64_, other->field_sfixed64_);
  swap(field_fixed32_, other->field_fixed32_);
  swap(field_sfixed32_, other->field_sfixed32_);
  swap(field_double_, other->field_double_);
  swap(field_sint64_, other->field_sint64_);
  swap(field_float_, other->field_float_);
  swap(field_sint32_, other->field_sint32_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string TestConfig_DummyFields::GetTypeName() const {
  return "perfetto.protos.TestConfig.DummyFields";
}


// ===================================================================

void TestConfig::InitAsDefaultInstance() {
  ::perfetto::protos::_TestConfig_default_instance_._instance.get_mutable()->dummy_fields_ = const_cast< ::perfetto::protos::TestConfig_DummyFields*>(
      ::perfetto::protos::TestConfig_DummyFields::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TestConfig::kMessageCountFieldNumber;
const int TestConfig::kMaxMessagesPerSecondFieldNumber;
const int TestConfig::kSeedFieldNumber;
const int TestConfig::kMessageSizeFieldNumber;
const int TestConfig::kSendBatchOnRegisterFieldNumber;
const int TestConfig::kDummyFieldsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TestConfig::TestConfig()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_perfetto_2fconfig_2ftest_5fconfig_2eproto::scc_info_TestConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.TestConfig)
}
TestConfig::TestConfig(const TestConfig& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_dummy_fields()) {
    dummy_fields_ = new ::perfetto::protos::TestConfig_DummyFields(*from.dummy_fields_);
  } else {
    dummy_fields_ = NULL;
  }
  ::memcpy(&message_count_, &from.message_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&send_batch_on_register_) -
    reinterpret_cast<char*>(&message_count_)) + sizeof(send_batch_on_register_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TestConfig)
}

void TestConfig::SharedCtor() {
  ::memset(&dummy_fields_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&send_batch_on_register_) -
      reinterpret_cast<char*>(&dummy_fields_)) + sizeof(send_batch_on_register_));
}

TestConfig::~TestConfig() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TestConfig)
  SharedDtor();
}

void TestConfig::SharedDtor() {
  if (this != internal_default_instance()) delete dummy_fields_;
}

void TestConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestConfig& TestConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_perfetto_2fconfig_2ftest_5fconfig_2eproto::scc_info_TestConfig.base);
  return *internal_default_instance();
}


void TestConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TestConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(dummy_fields_ != NULL);
    dummy_fields_->Clear();
  }
  if (cached_has_bits & 62u) {
    ::memset(&message_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&send_batch_on_register_) -
        reinterpret_cast<char*>(&message_count_)) + sizeof(send_batch_on_register_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TestConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.TestConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 message_count = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_message_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &message_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_messages_per_second = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_max_messages_per_second();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_messages_per_second_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 seed = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_seed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 message_size = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_message_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &message_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool send_batch_on_register = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_send_batch_on_register();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &send_batch_on_register_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.TestConfig.DummyFields dummy_fields = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dummy_fields()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.TestConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.TestConfig)
  return false;
#undef DO_
}

void TestConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.TestConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 message_count = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->message_count(), output);
  }

  // optional uint32 max_messages_per_second = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->max_messages_per_second(), output);
  }

  // optional uint32 seed = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->seed(), output);
  }

  // optional uint32 message_size = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->message_size(), output);
  }

  // optional bool send_batch_on_register = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->send_batch_on_register(), output);
  }

  // optional .perfetto.protos.TestConfig.DummyFields dummy_fields = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->_internal_dummy_fields(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.TestConfig)
}

size_t TestConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TestConfig)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 63u) {
    // optional .perfetto.protos.TestConfig.DummyFields dummy_fields = 6;
    if (has_dummy_fields()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *dummy_fields_);
    }

    // optional uint32 message_count = 1;
    if (has_message_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->message_count());
    }

    // optional uint32 max_messages_per_second = 2;
    if (has_max_messages_per_second()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_messages_per_second());
    }

    // optional uint32 seed = 3;
    if (has_seed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seed());
    }

    // optional uint32 message_size = 4;
    if (has_message_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->message_size());
    }

    // optional bool send_batch_on_register = 5;
    if (has_send_batch_on_register()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestConfig::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TestConfig*>(&from));
}

void TestConfig::MergeFrom(const TestConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TestConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_dummy_fields()->::perfetto::protos::TestConfig_DummyFields::MergeFrom(from.dummy_fields());
    }
    if (cached_has_bits & 0x00000002u) {
      message_count_ = from.message_count_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_messages_per_second_ = from.max_messages_per_second_;
    }
    if (cached_has_bits & 0x00000008u) {
      seed_ = from.seed_;
    }
    if (cached_has_bits & 0x00000010u) {
      message_size_ = from.message_size_;
    }
    if (cached_has_bits & 0x00000020u) {
      send_batch_on_register_ = from.send_batch_on_register_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TestConfig::CopyFrom(const TestConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TestConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestConfig::IsInitialized() const {
  return true;
}

void TestConfig::Swap(TestConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TestConfig::InternalSwap(TestConfig* other) {
  using std::swap;
  swap(dummy_fields_, other->dummy_fields_);
  swap(message_count_, other->message_count_);
  swap(max_messages_per_second_, other->max_messages_per_second_);
  swap(seed_, other->seed_);
  swap(message_size_, other->message_size_);
  swap(send_batch_on_register_, other->send_batch_on_register_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string TestConfig::GetTypeName() const {
  return "perfetto.protos.TestConfig";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::perfetto::protos::TestConfig_DummyFields* Arena::CreateMaybeMessage< ::perfetto::protos::TestConfig_DummyFields >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::TestConfig_DummyFields >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::perfetto::protos::TestConfig* Arena::CreateMaybeMessage< ::perfetto::protos::TestConfig >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::TestConfig >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
