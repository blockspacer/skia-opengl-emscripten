// Autogenerated by the ProtoZero compiler plugin. DO NOT EDIT.

#ifndef PERFETTO_PROTOS_PERFETTO_TRACE_TRACK_EVENT_DEBUG_ANNOTATION_PROTO_H_
#define PERFETTO_PROTOS_PERFETTO_TRACE_TRACK_EVENT_DEBUG_ANNOTATION_PROTO_H_

#include <stddef.h>
#include <stdint.h>

#include "perfetto/base/export.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/message.h"

namespace perfetto {
namespace protos {
namespace pbzero {

class DebugAnnotation_NestedValue;
enum DebugAnnotation_NestedValue_NestedType : int32_t;

enum DebugAnnotation_NestedValue_NestedType : int32_t {
  DebugAnnotation_NestedValue_NestedType_UNSPECIFIED = 0,
  DebugAnnotation_NestedValue_NestedType_DICT = 1,
  DebugAnnotation_NestedValue_NestedType_ARRAY = 2,
};

class PERFETTO_EXPORT DebugAnnotationName : public ::protozero::Message {
 public:
  enum : int32_t {
    kIidFieldNumber = 1,
    kNameFieldNumber = 2,
  };
  class Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/2, /*HAS_REPEATED_FIELDS=*/false> {
   public:
    Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
    bool has_iid() const { return at<1>().valid(); }
    uint32_t iid() const { return at<1>().as_uint32(); }
    bool has_name() const { return at<2>().valid(); }
    ::protozero::ConstChars name() const { return at<2>().as_string(); }
  };
  void set_iid(uint32_t value) {
    AppendVarInt(1, value);
  }
  void set_name(const char* value) {
    AppendString(2, value);
  }
  // Doesn't check for null terminator.
  // Expects |value| to be at least |size| long.
  void set_name(const char* value, size_t size) {
    AppendBytes(2, value, size);
  }
};

class PERFETTO_EXPORT DebugAnnotation : public ::protozero::Message {
 public:
  enum : int32_t {
    kNameIidFieldNumber = 1,
    kBoolValueFieldNumber = 2,
    kUintValueFieldNumber = 3,
    kIntValueFieldNumber = 4,
    kDoubleValueFieldNumber = 5,
    kStringValueFieldNumber = 6,
    kPointerValueFieldNumber = 7,
    kNestedValueFieldNumber = 8,
    kLegacyJsonValueFieldNumber = 9,
  };
  class Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/9, /*HAS_REPEATED_FIELDS=*/false> {
   public:
    Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
    bool has_name_iid() const { return at<1>().valid(); }
    uint32_t name_iid() const { return at<1>().as_uint32(); }
    bool has_bool_value() const { return at<2>().valid(); }
    bool bool_value() const { return at<2>().as_bool(); }
    bool has_uint_value() const { return at<3>().valid(); }
    uint64_t uint_value() const { return at<3>().as_uint64(); }
    bool has_int_value() const { return at<4>().valid(); }
    int64_t int_value() const { return at<4>().as_int64(); }
    bool has_double_value() const { return at<5>().valid(); }
    double double_value() const { return at<5>().as_double(); }
    bool has_string_value() const { return at<6>().valid(); }
    ::protozero::ConstChars string_value() const { return at<6>().as_string(); }
    bool has_pointer_value() const { return at<7>().valid(); }
    uint64_t pointer_value() const { return at<7>().as_uint64(); }
    bool has_nested_value() const { return at<8>().valid(); }
    ::protozero::ConstBytes nested_value() const { return at<8>().as_bytes(); }
    bool has_legacy_json_value() const { return at<9>().valid(); }
    ::protozero::ConstChars legacy_json_value() const { return at<9>().as_string(); }
  };
  using NestedValue = ::perfetto::protos::pbzero::DebugAnnotation_NestedValue;
  void set_name_iid(uint32_t value) {
    AppendVarInt(1, value);
  }
  void set_bool_value(bool value) {
    AppendTinyVarInt(2, value);
  }
  void set_uint_value(uint64_t value) {
    AppendVarInt(3, value);
  }
  void set_int_value(int64_t value) {
    AppendVarInt(4, value);
  }
  void set_double_value(double value) {
    AppendFixed(5, value);
  }
  void set_string_value(const char* value) {
    AppendString(6, value);
  }
  // Doesn't check for null terminator.
  // Expects |value| to be at least |size| long.
  void set_string_value(const char* value, size_t size) {
    AppendBytes(6, value, size);
  }
  void set_pointer_value(uint64_t value) {
    AppendVarInt(7, value);
  }
  template <typename T = DebugAnnotation_NestedValue> T* set_nested_value() {
    return BeginNestedMessage<T>(8);
  }

  void set_legacy_json_value(const char* value) {
    AppendString(9, value);
  }
  // Doesn't check for null terminator.
  // Expects |value| to be at least |size| long.
  void set_legacy_json_value(const char* value, size_t size) {
    AppendBytes(9, value, size);
  }
};

class PERFETTO_EXPORT DebugAnnotation_NestedValue : public ::protozero::Message {
 public:
  enum : int32_t {
    kNestedTypeFieldNumber = 1,
    kDictKeysFieldNumber = 2,
    kDictValuesFieldNumber = 3,
    kArrayValuesFieldNumber = 4,
    kIntValueFieldNumber = 5,
    kDoubleValueFieldNumber = 6,
    kBoolValueFieldNumber = 7,
    kStringValueFieldNumber = 8,
  };
  class Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/8, /*HAS_REPEATED_FIELDS=*/true> {
   public:
    Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
    bool has_nested_type() const { return at<1>().valid(); }
    int32_t nested_type() const { return at<1>().as_int32(); }
    bool has_dict_keys() const { return at<2>().valid(); }
    ::protozero::RepeatedFieldIterator dict_keys() const { return GetRepeated(2); }
    bool has_dict_values() const { return at<3>().valid(); }
    ::protozero::RepeatedFieldIterator dict_values() const { return GetRepeated(3); }
    bool has_array_values() const { return at<4>().valid(); }
    ::protozero::RepeatedFieldIterator array_values() const { return GetRepeated(4); }
    bool has_int_value() const { return at<5>().valid(); }
    int64_t int_value() const { return at<5>().as_int64(); }
    bool has_double_value() const { return at<6>().valid(); }
    double double_value() const { return at<6>().as_double(); }
    bool has_bool_value() const { return at<7>().valid(); }
    bool bool_value() const { return at<7>().as_bool(); }
    bool has_string_value() const { return at<8>().valid(); }
    ::protozero::ConstChars string_value() const { return at<8>().as_string(); }
  };
  using NestedType = ::perfetto::protos::pbzero::DebugAnnotation_NestedValue_NestedType;
  static const NestedType UNSPECIFIED = DebugAnnotation_NestedValue_NestedType_UNSPECIFIED;
  static const NestedType DICT = DebugAnnotation_NestedValue_NestedType_DICT;
  static const NestedType ARRAY = DebugAnnotation_NestedValue_NestedType_ARRAY;
  void set_nested_type(::perfetto::protos::pbzero::DebugAnnotation_NestedValue_NestedType value) {
    AppendTinyVarInt(1, value);
  }
  void add_dict_keys(const char* value) {
    AppendString(2, value);
  }
  // Doesn't check for null terminator.
  // Expects |value| to be at least |size| long.
  void add_dict_keys(const char* value, size_t size) {
    AppendBytes(2, value, size);
  }
  template <typename T = DebugAnnotation_NestedValue> T* add_dict_values() {
    return BeginNestedMessage<T>(3);
  }

  template <typename T = DebugAnnotation_NestedValue> T* add_array_values() {
    return BeginNestedMessage<T>(4);
  }

  void set_int_value(int64_t value) {
    AppendVarInt(5, value);
  }
  void set_double_value(double value) {
    AppendFixed(6, value);
  }
  void set_bool_value(bool value) {
    AppendTinyVarInt(7, value);
  }
  void set_string_value(const char* value) {
    AppendString(8, value);
  }
  // Doesn't check for null terminator.
  // Expects |value| to be at least |size| long.
  void set_string_value(const char* value, size_t size) {
    AppendBytes(8, value, size);
  }
};

} // Namespace.
} // Namespace.
} // Namespace.
#endif  // Include guard.
