// Autogenerated by the ProtoZero compiler plugin. DO NOT EDIT.

#ifndef PERFETTO_PROTOS_PERFETTO_TRACE_ANDROID_ANDROID_LOG_PROTO_H_
#define PERFETTO_PROTOS_PERFETTO_TRACE_ANDROID_ANDROID_LOG_PROTO_H_

#include <stddef.h>
#include <stdint.h>

#include "perfetto/base/export.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/message.h"

namespace perfetto {
namespace protos {
namespace pbzero {

class AndroidLogPacket_LogEvent;
class AndroidLogPacket_LogEvent_Arg;
class AndroidLogPacket_Stats;
enum AndroidLogId : int32_t;
enum AndroidLogPriority : int32_t;

class PERFETTO_EXPORT AndroidLogPacket : public ::protozero::Message {
 public:
  enum : int32_t {
    kEventsFieldNumber = 1,
    kStatsFieldNumber = 2,
  };
  class Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/2, /*HAS_REPEATED_FIELDS=*/true> {
   public:
    Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
    bool has_events() const { return at<1>().valid(); }
    ::protozero::RepeatedFieldIterator events() const { return GetRepeated(1); }
    bool has_stats() const { return at<2>().valid(); }
    ::protozero::ConstBytes stats() const { return at<2>().as_bytes(); }
  };
  using LogEvent = ::perfetto::protos::pbzero::AndroidLogPacket_LogEvent;
  using Stats = ::perfetto::protos::pbzero::AndroidLogPacket_Stats;
  template <typename T = AndroidLogPacket_LogEvent> T* add_events() {
    return BeginNestedMessage<T>(1);
  }

  template <typename T = AndroidLogPacket_Stats> T* set_stats() {
    return BeginNestedMessage<T>(2);
  }

};

class PERFETTO_EXPORT AndroidLogPacket_Stats : public ::protozero::Message {
 public:
  enum : int32_t {
    kNumTotalFieldNumber = 1,
    kNumFailedFieldNumber = 2,
    kNumSkippedFieldNumber = 3,
  };
  class Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/3, /*HAS_REPEATED_FIELDS=*/false> {
   public:
    Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
    bool has_num_total() const { return at<1>().valid(); }
    uint64_t num_total() const { return at<1>().as_uint64(); }
    bool has_num_failed() const { return at<2>().valid(); }
    uint64_t num_failed() const { return at<2>().as_uint64(); }
    bool has_num_skipped() const { return at<3>().valid(); }
    uint64_t num_skipped() const { return at<3>().as_uint64(); }
  };
  void set_num_total(uint64_t value) {
    AppendVarInt(1, value);
  }
  void set_num_failed(uint64_t value) {
    AppendVarInt(2, value);
  }
  void set_num_skipped(uint64_t value) {
    AppendVarInt(3, value);
  }
};

class PERFETTO_EXPORT AndroidLogPacket_LogEvent : public ::protozero::Message {
 public:
  enum : int32_t {
    kLogIdFieldNumber = 1,
    kPidFieldNumber = 2,
    kTidFieldNumber = 3,
    kUidFieldNumber = 4,
    kTimestampFieldNumber = 5,
    kTagFieldNumber = 6,
    kPrioFieldNumber = 7,
    kMessageFieldNumber = 8,
    kArgsFieldNumber = 9,
  };
  class Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/9, /*HAS_REPEATED_FIELDS=*/true> {
   public:
    Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
    bool has_log_id() const { return at<1>().valid(); }
    int32_t log_id() const { return at<1>().as_int32(); }
    bool has_pid() const { return at<2>().valid(); }
    int32_t pid() const { return at<2>().as_int32(); }
    bool has_tid() const { return at<3>().valid(); }
    int32_t tid() const { return at<3>().as_int32(); }
    bool has_uid() const { return at<4>().valid(); }
    int32_t uid() const { return at<4>().as_int32(); }
    bool has_timestamp() const { return at<5>().valid(); }
    uint64_t timestamp() const { return at<5>().as_uint64(); }
    bool has_tag() const { return at<6>().valid(); }
    ::protozero::ConstChars tag() const { return at<6>().as_string(); }
    bool has_prio() const { return at<7>().valid(); }
    int32_t prio() const { return at<7>().as_int32(); }
    bool has_message() const { return at<8>().valid(); }
    ::protozero::ConstChars message() const { return at<8>().as_string(); }
    bool has_args() const { return at<9>().valid(); }
    ::protozero::RepeatedFieldIterator args() const { return GetRepeated(9); }
  };
  using Arg = ::perfetto::protos::pbzero::AndroidLogPacket_LogEvent_Arg;
  void set_log_id(::perfetto::protos::pbzero::AndroidLogId value) {
    AppendTinyVarInt(1, value);
  }
  void set_pid(int32_t value) {
    AppendVarInt(2, value);
  }
  void set_tid(int32_t value) {
    AppendVarInt(3, value);
  }
  void set_uid(int32_t value) {
    AppendVarInt(4, value);
  }
  void set_timestamp(uint64_t value) {
    AppendVarInt(5, value);
  }
  void set_tag(const char* value) {
    AppendString(6, value);
  }
  // Doesn't check for null terminator.
  // Expects |value| to be at least |size| long.
  void set_tag(const char* value, size_t size) {
    AppendBytes(6, value, size);
  }
  void set_prio(::perfetto::protos::pbzero::AndroidLogPriority value) {
    AppendTinyVarInt(7, value);
  }
  void set_message(const char* value) {
    AppendString(8, value);
  }
  // Doesn't check for null terminator.
  // Expects |value| to be at least |size| long.
  void set_message(const char* value, size_t size) {
    AppendBytes(8, value, size);
  }
  template <typename T = AndroidLogPacket_LogEvent_Arg> T* add_args() {
    return BeginNestedMessage<T>(9);
  }

};

class PERFETTO_EXPORT AndroidLogPacket_LogEvent_Arg : public ::protozero::Message {
 public:
  enum : int32_t {
    kNameFieldNumber = 1,
    kIntValueFieldNumber = 2,
    kFloatValueFieldNumber = 3,
    kStringValueFieldNumber = 4,
  };
  class Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/4, /*HAS_REPEATED_FIELDS=*/false> {
   public:
    Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
    bool has_name() const { return at<1>().valid(); }
    ::protozero::ConstChars name() const { return at<1>().as_string(); }
    bool has_int_value() const { return at<2>().valid(); }
    int64_t int_value() const { return at<2>().as_int64(); }
    bool has_float_value() const { return at<3>().valid(); }
    float float_value() const { return at<3>().as_float(); }
    bool has_string_value() const { return at<4>().valid(); }
    ::protozero::ConstChars string_value() const { return at<4>().as_string(); }
  };
  void set_name(const char* value) {
    AppendString(1, value);
  }
  // Doesn't check for null terminator.
  // Expects |value| to be at least |size| long.
  void set_name(const char* value, size_t size) {
    AppendBytes(1, value, size);
  }
  void set_int_value(int64_t value) {
    AppendVarInt(2, value);
  }
  void set_float_value(float value) {
    AppendFixed(3, value);
  }
  void set_string_value(const char* value) {
    AppendString(4, value);
  }
  // Doesn't check for null terminator.
  // Expects |value| to be at least |size| long.
  void set_string_value(const char* value, size_t size) {
    AppendBytes(4, value, size);
  }
};

} // Namespace.
} // Namespace.
} // Namespace.
#endif  // Include guard.
