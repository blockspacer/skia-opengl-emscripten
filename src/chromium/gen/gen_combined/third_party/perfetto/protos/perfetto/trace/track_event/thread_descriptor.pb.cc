// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: perfetto/trace/track_event/thread_descriptor.proto

#include "perfetto/trace/track_event/thread_descriptor.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace perfetto {
namespace protos {
class ThreadDescriptorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ThreadDescriptor>
      _instance;
} _ThreadDescriptor_default_instance_;
}  // namespace protos
}  // namespace perfetto
namespace protobuf_perfetto_2ftrace_2ftrack_5fevent_2fthread_5fdescriptor_2eproto {
static void InitDefaultsThreadDescriptor() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_ThreadDescriptor_default_instance_;
    new (ptr) ::perfetto::protos::ThreadDescriptor();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::ThreadDescriptor::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ThreadDescriptor =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsThreadDescriptor}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_ThreadDescriptor.base);
}

}  // namespace protobuf_perfetto_2ftrace_2ftrack_5fevent_2fthread_5fdescriptor_2eproto
namespace perfetto {
namespace protos {
bool ThreadDescriptor_ChromeThreadType_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ThreadDescriptor_ChromeThreadType ThreadDescriptor::THREAD_UNSPECIFIED;
const ThreadDescriptor_ChromeThreadType ThreadDescriptor::ChromeThreadType_MIN;
const ThreadDescriptor_ChromeThreadType ThreadDescriptor::ChromeThreadType_MAX;
const int ThreadDescriptor::ChromeThreadType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void ThreadDescriptor::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ThreadDescriptor::kPidFieldNumber;
const int ThreadDescriptor::kTidFieldNumber;
const int ThreadDescriptor::kLegacySortIndexFieldNumber;
const int ThreadDescriptor::kChromeThreadTypeFieldNumber;
const int ThreadDescriptor::kThreadNameFieldNumber;
const int ThreadDescriptor::kReferenceTimestampUsFieldNumber;
const int ThreadDescriptor::kReferenceThreadTimeUsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ThreadDescriptor::ThreadDescriptor()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_perfetto_2ftrace_2ftrack_5fevent_2fthread_5fdescriptor_2eproto::scc_info_ThreadDescriptor.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.ThreadDescriptor)
}
ThreadDescriptor::ThreadDescriptor(const ThreadDescriptor& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  thread_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_thread_name()) {
    thread_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.thread_name_);
  }
  ::memcpy(&pid_, &from.pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&reference_thread_time_us_) -
    reinterpret_cast<char*>(&pid_)) + sizeof(reference_thread_time_us_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.ThreadDescriptor)
}

void ThreadDescriptor::SharedCtor() {
  thread_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&pid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reference_thread_time_us_) -
      reinterpret_cast<char*>(&pid_)) + sizeof(reference_thread_time_us_));
}

ThreadDescriptor::~ThreadDescriptor() {
  // @@protoc_insertion_point(destructor:perfetto.protos.ThreadDescriptor)
  SharedDtor();
}

void ThreadDescriptor::SharedDtor() {
  thread_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ThreadDescriptor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ThreadDescriptor& ThreadDescriptor::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_perfetto_2ftrace_2ftrack_5fevent_2fthread_5fdescriptor_2eproto::scc_info_ThreadDescriptor.base);
  return *internal_default_instance();
}


void ThreadDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.ThreadDescriptor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    thread_name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 126u) {
    ::memset(&pid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&reference_thread_time_us_) -
        reinterpret_cast<char*>(&pid_)) + sizeof(reference_thread_time_us_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ThreadDescriptor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.ThreadDescriptor)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 pid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_pid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_tid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 legacy_sort_index = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_legacy_sort_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &legacy_sort_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.ThreadDescriptor.ChromeThreadType chrome_thread_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::perfetto::protos::ThreadDescriptor_ChromeThreadType_IsValid(value)) {
            set_chrome_thread_type(static_cast< ::perfetto::protos::ThreadDescriptor_ChromeThreadType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(32u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string thread_name = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_thread_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 reference_timestamp_us = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_reference_timestamp_us();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &reference_timestamp_us_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 reference_thread_time_us = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_reference_thread_time_us();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &reference_thread_time_us_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.ThreadDescriptor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.ThreadDescriptor)
  return false;
#undef DO_
}

void ThreadDescriptor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.ThreadDescriptor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 pid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pid(), output);
  }

  // optional int32 tid = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tid(), output);
  }

  // optional int32 legacy_sort_index = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->legacy_sort_index(), output);
  }

  // optional .perfetto.protos.ThreadDescriptor.ChromeThreadType chrome_thread_type = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->chrome_thread_type(), output);
  }

  // optional string thread_name = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->thread_name(), output);
  }

  // optional int64 reference_timestamp_us = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->reference_timestamp_us(), output);
  }

  // optional int64 reference_thread_time_us = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->reference_thread_time_us(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.ThreadDescriptor)
}

size_t ThreadDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.ThreadDescriptor)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 127u) {
    // optional string thread_name = 5;
    if (has_thread_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->thread_name());
    }

    // optional int32 pid = 1;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pid());
    }

    // optional int32 tid = 2;
    if (has_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tid());
    }

    // optional int32 legacy_sort_index = 3;
    if (has_legacy_sort_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->legacy_sort_index());
    }

    // optional .perfetto.protos.ThreadDescriptor.ChromeThreadType chrome_thread_type = 4;
    if (has_chrome_thread_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->chrome_thread_type());
    }

    // optional int64 reference_timestamp_us = 6;
    if (has_reference_timestamp_us()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->reference_timestamp_us());
    }

    // optional int64 reference_thread_time_us = 7;
    if (has_reference_thread_time_us()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->reference_thread_time_us());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ThreadDescriptor::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ThreadDescriptor*>(&from));
}

void ThreadDescriptor::MergeFrom(const ThreadDescriptor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.ThreadDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_thread_name();
      thread_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.thread_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      pid_ = from.pid_;
    }
    if (cached_has_bits & 0x00000004u) {
      tid_ = from.tid_;
    }
    if (cached_has_bits & 0x00000008u) {
      legacy_sort_index_ = from.legacy_sort_index_;
    }
    if (cached_has_bits & 0x00000010u) {
      chrome_thread_type_ = from.chrome_thread_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      reference_timestamp_us_ = from.reference_timestamp_us_;
    }
    if (cached_has_bits & 0x00000040u) {
      reference_thread_time_us_ = from.reference_thread_time_us_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ThreadDescriptor::CopyFrom(const ThreadDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.ThreadDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThreadDescriptor::IsInitialized() const {
  return true;
}

void ThreadDescriptor::Swap(ThreadDescriptor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ThreadDescriptor::InternalSwap(ThreadDescriptor* other) {
  using std::swap;
  thread_name_.Swap(&other->thread_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(pid_, other->pid_);
  swap(tid_, other->tid_);
  swap(legacy_sort_index_, other->legacy_sort_index_);
  swap(chrome_thread_type_, other->chrome_thread_type_);
  swap(reference_timestamp_us_, other->reference_timestamp_us_);
  swap(reference_thread_time_us_, other->reference_thread_time_us_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string ThreadDescriptor::GetTypeName() const {
  return "perfetto.protos.ThreadDescriptor";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::perfetto::protos::ThreadDescriptor* Arena::CreateMaybeMessage< ::perfetto::protos::ThreadDescriptor >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::ThreadDescriptor >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
