// Autogenerated by the ProtoZero compiler plugin. DO NOT EDIT.

#ifndef PERFETTO_PROTOS_PERFETTO_TRACE_FTRACE_BINDER_PROTO_H_
#define PERFETTO_PROTOS_PERFETTO_TRACE_FTRACE_BINDER_PROTO_H_

#include <stddef.h>
#include <stdint.h>

#include "perfetto/base/export.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/message.h"

namespace perfetto {
namespace protos {
namespace pbzero {


class PERFETTO_EXPORT BinderTransactionAllocBufFtraceEvent : public ::protozero::Message {
 public:
  enum : int32_t {
    kDataSizeFieldNumber = 1,
    kDebugIdFieldNumber = 2,
    kOffsetsSizeFieldNumber = 3,
  };
  class Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/3, /*HAS_REPEATED_FIELDS=*/false> {
   public:
    Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
    bool has_data_size() const { return at<1>().valid(); }
    uint64_t data_size() const { return at<1>().as_uint64(); }
    bool has_debug_id() const { return at<2>().valid(); }
    int32_t debug_id() const { return at<2>().as_int32(); }
    bool has_offsets_size() const { return at<3>().valid(); }
    uint64_t offsets_size() const { return at<3>().as_uint64(); }
  };
  void set_data_size(uint64_t value) {
    AppendVarInt(1, value);
  }
  void set_debug_id(int32_t value) {
    AppendVarInt(2, value);
  }
  void set_offsets_size(uint64_t value) {
    AppendVarInt(3, value);
  }
};

class PERFETTO_EXPORT BinderUnlockFtraceEvent : public ::protozero::Message {
 public:
  enum : int32_t {
    kTagFieldNumber = 1,
  };
  class Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/1, /*HAS_REPEATED_FIELDS=*/false> {
   public:
    Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
    bool has_tag() const { return at<1>().valid(); }
    ::protozero::ConstChars tag() const { return at<1>().as_string(); }
  };
  void set_tag(const char* value) {
    AppendString(1, value);
  }
  // Doesn't check for null terminator.
  // Expects |value| to be at least |size| long.
  void set_tag(const char* value, size_t size) {
    AppendBytes(1, value, size);
  }
};

class PERFETTO_EXPORT BinderLockedFtraceEvent : public ::protozero::Message {
 public:
  enum : int32_t {
    kTagFieldNumber = 1,
  };
  class Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/1, /*HAS_REPEATED_FIELDS=*/false> {
   public:
    Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
    bool has_tag() const { return at<1>().valid(); }
    ::protozero::ConstChars tag() const { return at<1>().as_string(); }
  };
  void set_tag(const char* value) {
    AppendString(1, value);
  }
  // Doesn't check for null terminator.
  // Expects |value| to be at least |size| long.
  void set_tag(const char* value, size_t size) {
    AppendBytes(1, value, size);
  }
};

class PERFETTO_EXPORT BinderLockFtraceEvent : public ::protozero::Message {
 public:
  enum : int32_t {
    kTagFieldNumber = 1,
  };
  class Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/1, /*HAS_REPEATED_FIELDS=*/false> {
   public:
    Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
    bool has_tag() const { return at<1>().valid(); }
    ::protozero::ConstChars tag() const { return at<1>().as_string(); }
  };
  void set_tag(const char* value) {
    AppendString(1, value);
  }
  // Doesn't check for null terminator.
  // Expects |value| to be at least |size| long.
  void set_tag(const char* value, size_t size) {
    AppendBytes(1, value, size);
  }
};

class PERFETTO_EXPORT BinderSetPriorityFtraceEvent : public ::protozero::Message {
 public:
  enum : int32_t {
    kProcFieldNumber = 1,
    kThreadFieldNumber = 2,
    kOldPrioFieldNumber = 3,
    kNewPrioFieldNumber = 4,
    kDesiredPrioFieldNumber = 5,
  };
  class Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/5, /*HAS_REPEATED_FIELDS=*/false> {
   public:
    Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
    bool has_proc() const { return at<1>().valid(); }
    int32_t proc() const { return at<1>().as_int32(); }
    bool has_thread() const { return at<2>().valid(); }
    int32_t thread() const { return at<2>().as_int32(); }
    bool has_old_prio() const { return at<3>().valid(); }
    uint32_t old_prio() const { return at<3>().as_uint32(); }
    bool has_new_prio() const { return at<4>().valid(); }
    uint32_t new_prio() const { return at<4>().as_uint32(); }
    bool has_desired_prio() const { return at<5>().valid(); }
    uint32_t desired_prio() const { return at<5>().as_uint32(); }
  };
  void set_proc(int32_t value) {
    AppendVarInt(1, value);
  }
  void set_thread(int32_t value) {
    AppendVarInt(2, value);
  }
  void set_old_prio(uint32_t value) {
    AppendVarInt(3, value);
  }
  void set_new_prio(uint32_t value) {
    AppendVarInt(4, value);
  }
  void set_desired_prio(uint32_t value) {
    AppendVarInt(5, value);
  }
};

class PERFETTO_EXPORT BinderTransactionReceivedFtraceEvent : public ::protozero::Message {
 public:
  enum : int32_t {
    kDebugIdFieldNumber = 1,
  };
  class Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/1, /*HAS_REPEATED_FIELDS=*/false> {
   public:
    Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
    bool has_debug_id() const { return at<1>().valid(); }
    int32_t debug_id() const { return at<1>().as_int32(); }
  };
  void set_debug_id(int32_t value) {
    AppendVarInt(1, value);
  }
};

class PERFETTO_EXPORT BinderTransactionFtraceEvent : public ::protozero::Message {
 public:
  enum : int32_t {
    kDebugIdFieldNumber = 1,
    kTargetNodeFieldNumber = 2,
    kToProcFieldNumber = 3,
    kToThreadFieldNumber = 4,
    kReplyFieldNumber = 5,
    kCodeFieldNumber = 6,
    kFlagsFieldNumber = 7,
  };
  class Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/7, /*HAS_REPEATED_FIELDS=*/false> {
   public:
    Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
    bool has_debug_id() const { return at<1>().valid(); }
    int32_t debug_id() const { return at<1>().as_int32(); }
    bool has_target_node() const { return at<2>().valid(); }
    int32_t target_node() const { return at<2>().as_int32(); }
    bool has_to_proc() const { return at<3>().valid(); }
    int32_t to_proc() const { return at<3>().as_int32(); }
    bool has_to_thread() const { return at<4>().valid(); }
    int32_t to_thread() const { return at<4>().as_int32(); }
    bool has_reply() const { return at<5>().valid(); }
    int32_t reply() const { return at<5>().as_int32(); }
    bool has_code() const { return at<6>().valid(); }
    uint32_t code() const { return at<6>().as_uint32(); }
    bool has_flags() const { return at<7>().valid(); }
    uint32_t flags() const { return at<7>().as_uint32(); }
  };
  void set_debug_id(int32_t value) {
    AppendVarInt(1, value);
  }
  void set_target_node(int32_t value) {
    AppendVarInt(2, value);
  }
  void set_to_proc(int32_t value) {
    AppendVarInt(3, value);
  }
  void set_to_thread(int32_t value) {
    AppendVarInt(4, value);
  }
  void set_reply(int32_t value) {
    AppendVarInt(5, value);
  }
  void set_code(uint32_t value) {
    AppendVarInt(6, value);
  }
  void set_flags(uint32_t value) {
    AppendVarInt(7, value);
  }
};

} // Namespace.
} // Namespace.
} // Namespace.
#endif  // Include guard.
