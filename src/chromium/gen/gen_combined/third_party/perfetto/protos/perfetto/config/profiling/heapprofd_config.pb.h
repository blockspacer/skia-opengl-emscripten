// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: perfetto/config/profiling/heapprofd_config.proto

#ifndef PROTOBUF_INCLUDED_perfetto_2fconfig_2fprofiling_2fheapprofd_5fconfig_2eproto
#define PROTOBUF_INCLUDED_perfetto_2fconfig_2fprofiling_2fheapprofd_5fconfig_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_perfetto_2fconfig_2fprofiling_2fheapprofd_5fconfig_2eproto 

namespace protobuf_perfetto_2fconfig_2fprofiling_2fheapprofd_5fconfig_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
}  // namespace protobuf_perfetto_2fconfig_2fprofiling_2fheapprofd_5fconfig_2eproto
namespace perfetto {
namespace protos {
class HeapprofdConfig;
class HeapprofdConfigDefaultTypeInternal;
extern HeapprofdConfigDefaultTypeInternal _HeapprofdConfig_default_instance_;
class HeapprofdConfig_ContinuousDumpConfig;
class HeapprofdConfig_ContinuousDumpConfigDefaultTypeInternal;
extern HeapprofdConfig_ContinuousDumpConfigDefaultTypeInternal _HeapprofdConfig_ContinuousDumpConfig_default_instance_;
}  // namespace protos
}  // namespace perfetto
namespace google {
namespace protobuf {
template<> ::perfetto::protos::HeapprofdConfig* Arena::CreateMaybeMessage<::perfetto::protos::HeapprofdConfig>(Arena*);
template<> ::perfetto::protos::HeapprofdConfig_ContinuousDumpConfig* Arena::CreateMaybeMessage<::perfetto::protos::HeapprofdConfig_ContinuousDumpConfig>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace perfetto {
namespace protos {

// ===================================================================

class HeapprofdConfig_ContinuousDumpConfig : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.HeapprofdConfig.ContinuousDumpConfig) */ {
 public:
  HeapprofdConfig_ContinuousDumpConfig();
  virtual ~HeapprofdConfig_ContinuousDumpConfig();

  HeapprofdConfig_ContinuousDumpConfig(const HeapprofdConfig_ContinuousDumpConfig& from);

  inline HeapprofdConfig_ContinuousDumpConfig& operator=(const HeapprofdConfig_ContinuousDumpConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HeapprofdConfig_ContinuousDumpConfig(HeapprofdConfig_ContinuousDumpConfig&& from) noexcept
    : HeapprofdConfig_ContinuousDumpConfig() {
    *this = ::std::move(from);
  }

  inline HeapprofdConfig_ContinuousDumpConfig& operator=(HeapprofdConfig_ContinuousDumpConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const HeapprofdConfig_ContinuousDumpConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HeapprofdConfig_ContinuousDumpConfig* internal_default_instance() {
    return reinterpret_cast<const HeapprofdConfig_ContinuousDumpConfig*>(
               &_HeapprofdConfig_ContinuousDumpConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(HeapprofdConfig_ContinuousDumpConfig* other);
  friend void swap(HeapprofdConfig_ContinuousDumpConfig& a, HeapprofdConfig_ContinuousDumpConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HeapprofdConfig_ContinuousDumpConfig* New() const final {
    return CreateMaybeMessage<HeapprofdConfig_ContinuousDumpConfig>(NULL);
  }

  HeapprofdConfig_ContinuousDumpConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<HeapprofdConfig_ContinuousDumpConfig>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const HeapprofdConfig_ContinuousDumpConfig& from);
  void MergeFrom(const HeapprofdConfig_ContinuousDumpConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HeapprofdConfig_ContinuousDumpConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 dump_phase_ms = 5;
  bool has_dump_phase_ms() const;
  void clear_dump_phase_ms();
  static const int kDumpPhaseMsFieldNumber = 5;
  ::google::protobuf::uint32 dump_phase_ms() const;
  void set_dump_phase_ms(::google::protobuf::uint32 value);

  // optional uint32 dump_interval_ms = 6;
  bool has_dump_interval_ms() const;
  void clear_dump_interval_ms();
  static const int kDumpIntervalMsFieldNumber = 6;
  ::google::protobuf::uint32 dump_interval_ms() const;
  void set_dump_interval_ms(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.HeapprofdConfig.ContinuousDumpConfig)
 private:
  void set_has_dump_phase_ms();
  void clear_has_dump_phase_ms();
  void set_has_dump_interval_ms();
  void clear_has_dump_interval_ms();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 dump_phase_ms_;
  ::google::protobuf::uint32 dump_interval_ms_;
  friend struct ::protobuf_perfetto_2fconfig_2fprofiling_2fheapprofd_5fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HeapprofdConfig : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.HeapprofdConfig) */ {
 public:
  HeapprofdConfig();
  virtual ~HeapprofdConfig();

  HeapprofdConfig(const HeapprofdConfig& from);

  inline HeapprofdConfig& operator=(const HeapprofdConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HeapprofdConfig(HeapprofdConfig&& from) noexcept
    : HeapprofdConfig() {
    *this = ::std::move(from);
  }

  inline HeapprofdConfig& operator=(HeapprofdConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const HeapprofdConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HeapprofdConfig* internal_default_instance() {
    return reinterpret_cast<const HeapprofdConfig*>(
               &_HeapprofdConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(HeapprofdConfig* other);
  friend void swap(HeapprofdConfig& a, HeapprofdConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HeapprofdConfig* New() const final {
    return CreateMaybeMessage<HeapprofdConfig>(NULL);
  }

  HeapprofdConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<HeapprofdConfig>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const HeapprofdConfig& from);
  void MergeFrom(const HeapprofdConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HeapprofdConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef HeapprofdConfig_ContinuousDumpConfig ContinuousDumpConfig;

  // accessors -------------------------------------------------------

  // repeated string process_cmdline = 2;
  int process_cmdline_size() const;
  void clear_process_cmdline();
  static const int kProcessCmdlineFieldNumber = 2;
  const ::std::string& process_cmdline(int index) const;
  ::std::string* mutable_process_cmdline(int index);
  void set_process_cmdline(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_process_cmdline(int index, ::std::string&& value);
  #endif
  void set_process_cmdline(int index, const char* value);
  void set_process_cmdline(int index, const char* value, size_t size);
  ::std::string* add_process_cmdline();
  void add_process_cmdline(const ::std::string& value);
  #if LANG_CXX11
  void add_process_cmdline(::std::string&& value);
  #endif
  void add_process_cmdline(const char* value);
  void add_process_cmdline(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& process_cmdline() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_process_cmdline();

  // repeated uint64 pid = 4;
  int pid_size() const;
  void clear_pid();
  static const int kPidFieldNumber = 4;
  ::google::protobuf::uint64 pid(int index) const;
  void set_pid(int index, ::google::protobuf::uint64 value);
  void add_pid(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      pid() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_pid();

  // repeated string skip_symbol_prefix = 7;
  int skip_symbol_prefix_size() const;
  void clear_skip_symbol_prefix();
  static const int kSkipSymbolPrefixFieldNumber = 7;
  const ::std::string& skip_symbol_prefix(int index) const;
  ::std::string* mutable_skip_symbol_prefix(int index);
  void set_skip_symbol_prefix(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_skip_symbol_prefix(int index, ::std::string&& value);
  #endif
  void set_skip_symbol_prefix(int index, const char* value);
  void set_skip_symbol_prefix(int index, const char* value, size_t size);
  ::std::string* add_skip_symbol_prefix();
  void add_skip_symbol_prefix(const ::std::string& value);
  #if LANG_CXX11
  void add_skip_symbol_prefix(::std::string&& value);
  #endif
  void add_skip_symbol_prefix(const char* value);
  void add_skip_symbol_prefix(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& skip_symbol_prefix() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_skip_symbol_prefix();

  // optional .perfetto.protos.HeapprofdConfig.ContinuousDumpConfig continuous_dump_config = 6;
  bool has_continuous_dump_config() const;
  void clear_continuous_dump_config();
  static const int kContinuousDumpConfigFieldNumber = 6;
  private:
  const ::perfetto::protos::HeapprofdConfig_ContinuousDumpConfig& _internal_continuous_dump_config() const;
  public:
  const ::perfetto::protos::HeapprofdConfig_ContinuousDumpConfig& continuous_dump_config() const;
  ::perfetto::protos::HeapprofdConfig_ContinuousDumpConfig* release_continuous_dump_config();
  ::perfetto::protos::HeapprofdConfig_ContinuousDumpConfig* mutable_continuous_dump_config();
  void set_allocated_continuous_dump_config(::perfetto::protos::HeapprofdConfig_ContinuousDumpConfig* continuous_dump_config);

  // optional uint64 sampling_interval_bytes = 1;
  bool has_sampling_interval_bytes() const;
  void clear_sampling_interval_bytes();
  static const int kSamplingIntervalBytesFieldNumber = 1;
  ::google::protobuf::uint64 sampling_interval_bytes() const;
  void set_sampling_interval_bytes(::google::protobuf::uint64 value);

  // optional uint64 shmem_size_bytes = 8;
  bool has_shmem_size_bytes() const;
  void clear_shmem_size_bytes();
  static const int kShmemSizeBytesFieldNumber = 8;
  ::google::protobuf::uint64 shmem_size_bytes() const;
  void set_shmem_size_bytes(::google::protobuf::uint64 value);

  // optional bool all = 5;
  bool has_all() const;
  void clear_all();
  static const int kAllFieldNumber = 5;
  bool all() const;
  void set_all(bool value);

  // optional bool block_client = 9;
  bool has_block_client() const;
  void clear_block_client();
  static const int kBlockClientFieldNumber = 9;
  bool block_client() const;
  void set_block_client(bool value);

  // optional bool no_startup = 10;
  bool has_no_startup() const;
  void clear_no_startup();
  static const int kNoStartupFieldNumber = 10;
  bool no_startup() const;
  void set_no_startup(bool value);

  // optional bool no_running = 11;
  bool has_no_running() const;
  void clear_no_running();
  static const int kNoRunningFieldNumber = 11;
  bool no_running() const;
  void set_no_running(bool value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.HeapprofdConfig)
 private:
  void set_has_sampling_interval_bytes();
  void clear_has_sampling_interval_bytes();
  void set_has_all();
  void clear_has_all();
  void set_has_continuous_dump_config();
  void clear_has_continuous_dump_config();
  void set_has_shmem_size_bytes();
  void clear_has_shmem_size_bytes();
  void set_has_block_client();
  void clear_has_block_client();
  void set_has_no_startup();
  void clear_has_no_startup();
  void set_has_no_running();
  void clear_has_no_running();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> process_cmdline_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > pid_;
  ::google::protobuf::RepeatedPtrField< ::std::string> skip_symbol_prefix_;
  ::perfetto::protos::HeapprofdConfig_ContinuousDumpConfig* continuous_dump_config_;
  ::google::protobuf::uint64 sampling_interval_bytes_;
  ::google::protobuf::uint64 shmem_size_bytes_;
  bool all_;
  bool block_client_;
  bool no_startup_;
  bool no_running_;
  friend struct ::protobuf_perfetto_2fconfig_2fprofiling_2fheapprofd_5fconfig_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// HeapprofdConfig_ContinuousDumpConfig

// optional uint32 dump_phase_ms = 5;
inline bool HeapprofdConfig_ContinuousDumpConfig::has_dump_phase_ms() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HeapprofdConfig_ContinuousDumpConfig::set_has_dump_phase_ms() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HeapprofdConfig_ContinuousDumpConfig::clear_has_dump_phase_ms() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HeapprofdConfig_ContinuousDumpConfig::clear_dump_phase_ms() {
  dump_phase_ms_ = 0u;
  clear_has_dump_phase_ms();
}
inline ::google::protobuf::uint32 HeapprofdConfig_ContinuousDumpConfig::dump_phase_ms() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.HeapprofdConfig.ContinuousDumpConfig.dump_phase_ms)
  return dump_phase_ms_;
}
inline void HeapprofdConfig_ContinuousDumpConfig::set_dump_phase_ms(::google::protobuf::uint32 value) {
  set_has_dump_phase_ms();
  dump_phase_ms_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.HeapprofdConfig.ContinuousDumpConfig.dump_phase_ms)
}

// optional uint32 dump_interval_ms = 6;
inline bool HeapprofdConfig_ContinuousDumpConfig::has_dump_interval_ms() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HeapprofdConfig_ContinuousDumpConfig::set_has_dump_interval_ms() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HeapprofdConfig_ContinuousDumpConfig::clear_has_dump_interval_ms() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HeapprofdConfig_ContinuousDumpConfig::clear_dump_interval_ms() {
  dump_interval_ms_ = 0u;
  clear_has_dump_interval_ms();
}
inline ::google::protobuf::uint32 HeapprofdConfig_ContinuousDumpConfig::dump_interval_ms() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.HeapprofdConfig.ContinuousDumpConfig.dump_interval_ms)
  return dump_interval_ms_;
}
inline void HeapprofdConfig_ContinuousDumpConfig::set_dump_interval_ms(::google::protobuf::uint32 value) {
  set_has_dump_interval_ms();
  dump_interval_ms_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.HeapprofdConfig.ContinuousDumpConfig.dump_interval_ms)
}

// -------------------------------------------------------------------

// HeapprofdConfig

// optional uint64 sampling_interval_bytes = 1;
inline bool HeapprofdConfig::has_sampling_interval_bytes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HeapprofdConfig::set_has_sampling_interval_bytes() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HeapprofdConfig::clear_has_sampling_interval_bytes() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HeapprofdConfig::clear_sampling_interval_bytes() {
  sampling_interval_bytes_ = GOOGLE_ULONGLONG(0);
  clear_has_sampling_interval_bytes();
}
inline ::google::protobuf::uint64 HeapprofdConfig::sampling_interval_bytes() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.HeapprofdConfig.sampling_interval_bytes)
  return sampling_interval_bytes_;
}
inline void HeapprofdConfig::set_sampling_interval_bytes(::google::protobuf::uint64 value) {
  set_has_sampling_interval_bytes();
  sampling_interval_bytes_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.HeapprofdConfig.sampling_interval_bytes)
}

// repeated string process_cmdline = 2;
inline int HeapprofdConfig::process_cmdline_size() const {
  return process_cmdline_.size();
}
inline void HeapprofdConfig::clear_process_cmdline() {
  process_cmdline_.Clear();
}
inline const ::std::string& HeapprofdConfig::process_cmdline(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.HeapprofdConfig.process_cmdline)
  return process_cmdline_.Get(index);
}
inline ::std::string* HeapprofdConfig::mutable_process_cmdline(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.HeapprofdConfig.process_cmdline)
  return process_cmdline_.Mutable(index);
}
inline void HeapprofdConfig::set_process_cmdline(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.HeapprofdConfig.process_cmdline)
  process_cmdline_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void HeapprofdConfig::set_process_cmdline(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.HeapprofdConfig.process_cmdline)
  process_cmdline_.Mutable(index)->assign(std::move(value));
}
#endif
inline void HeapprofdConfig::set_process_cmdline(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  process_cmdline_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:perfetto.protos.HeapprofdConfig.process_cmdline)
}
inline void HeapprofdConfig::set_process_cmdline(int index, const char* value, size_t size) {
  process_cmdline_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.HeapprofdConfig.process_cmdline)
}
inline ::std::string* HeapprofdConfig::add_process_cmdline() {
  // @@protoc_insertion_point(field_add_mutable:perfetto.protos.HeapprofdConfig.process_cmdline)
  return process_cmdline_.Add();
}
inline void HeapprofdConfig::add_process_cmdline(const ::std::string& value) {
  process_cmdline_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.HeapprofdConfig.process_cmdline)
}
#if LANG_CXX11
inline void HeapprofdConfig::add_process_cmdline(::std::string&& value) {
  process_cmdline_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:perfetto.protos.HeapprofdConfig.process_cmdline)
}
#endif
inline void HeapprofdConfig::add_process_cmdline(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  process_cmdline_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:perfetto.protos.HeapprofdConfig.process_cmdline)
}
inline void HeapprofdConfig::add_process_cmdline(const char* value, size_t size) {
  process_cmdline_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:perfetto.protos.HeapprofdConfig.process_cmdline)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
HeapprofdConfig::process_cmdline() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.HeapprofdConfig.process_cmdline)
  return process_cmdline_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
HeapprofdConfig::mutable_process_cmdline() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.HeapprofdConfig.process_cmdline)
  return &process_cmdline_;
}

// repeated uint64 pid = 4;
inline int HeapprofdConfig::pid_size() const {
  return pid_.size();
}
inline void HeapprofdConfig::clear_pid() {
  pid_.Clear();
}
inline ::google::protobuf::uint64 HeapprofdConfig::pid(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.HeapprofdConfig.pid)
  return pid_.Get(index);
}
inline void HeapprofdConfig::set_pid(int index, ::google::protobuf::uint64 value) {
  pid_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.HeapprofdConfig.pid)
}
inline void HeapprofdConfig::add_pid(::google::protobuf::uint64 value) {
  pid_.Add(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.HeapprofdConfig.pid)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
HeapprofdConfig::pid() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.HeapprofdConfig.pid)
  return pid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
HeapprofdConfig::mutable_pid() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.HeapprofdConfig.pid)
  return &pid_;
}

// optional bool all = 5;
inline bool HeapprofdConfig::has_all() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void HeapprofdConfig::set_has_all() {
  _has_bits_[0] |= 0x00000008u;
}
inline void HeapprofdConfig::clear_has_all() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void HeapprofdConfig::clear_all() {
  all_ = false;
  clear_has_all();
}
inline bool HeapprofdConfig::all() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.HeapprofdConfig.all)
  return all_;
}
inline void HeapprofdConfig::set_all(bool value) {
  set_has_all();
  all_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.HeapprofdConfig.all)
}

// repeated string skip_symbol_prefix = 7;
inline int HeapprofdConfig::skip_symbol_prefix_size() const {
  return skip_symbol_prefix_.size();
}
inline void HeapprofdConfig::clear_skip_symbol_prefix() {
  skip_symbol_prefix_.Clear();
}
inline const ::std::string& HeapprofdConfig::skip_symbol_prefix(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.HeapprofdConfig.skip_symbol_prefix)
  return skip_symbol_prefix_.Get(index);
}
inline ::std::string* HeapprofdConfig::mutable_skip_symbol_prefix(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.HeapprofdConfig.skip_symbol_prefix)
  return skip_symbol_prefix_.Mutable(index);
}
inline void HeapprofdConfig::set_skip_symbol_prefix(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.HeapprofdConfig.skip_symbol_prefix)
  skip_symbol_prefix_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void HeapprofdConfig::set_skip_symbol_prefix(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.HeapprofdConfig.skip_symbol_prefix)
  skip_symbol_prefix_.Mutable(index)->assign(std::move(value));
}
#endif
inline void HeapprofdConfig::set_skip_symbol_prefix(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  skip_symbol_prefix_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:perfetto.protos.HeapprofdConfig.skip_symbol_prefix)
}
inline void HeapprofdConfig::set_skip_symbol_prefix(int index, const char* value, size_t size) {
  skip_symbol_prefix_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.HeapprofdConfig.skip_symbol_prefix)
}
inline ::std::string* HeapprofdConfig::add_skip_symbol_prefix() {
  // @@protoc_insertion_point(field_add_mutable:perfetto.protos.HeapprofdConfig.skip_symbol_prefix)
  return skip_symbol_prefix_.Add();
}
inline void HeapprofdConfig::add_skip_symbol_prefix(const ::std::string& value) {
  skip_symbol_prefix_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.HeapprofdConfig.skip_symbol_prefix)
}
#if LANG_CXX11
inline void HeapprofdConfig::add_skip_symbol_prefix(::std::string&& value) {
  skip_symbol_prefix_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:perfetto.protos.HeapprofdConfig.skip_symbol_prefix)
}
#endif
inline void HeapprofdConfig::add_skip_symbol_prefix(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  skip_symbol_prefix_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:perfetto.protos.HeapprofdConfig.skip_symbol_prefix)
}
inline void HeapprofdConfig::add_skip_symbol_prefix(const char* value, size_t size) {
  skip_symbol_prefix_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:perfetto.protos.HeapprofdConfig.skip_symbol_prefix)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
HeapprofdConfig::skip_symbol_prefix() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.HeapprofdConfig.skip_symbol_prefix)
  return skip_symbol_prefix_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
HeapprofdConfig::mutable_skip_symbol_prefix() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.HeapprofdConfig.skip_symbol_prefix)
  return &skip_symbol_prefix_;
}

// optional .perfetto.protos.HeapprofdConfig.ContinuousDumpConfig continuous_dump_config = 6;
inline bool HeapprofdConfig::has_continuous_dump_config() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HeapprofdConfig::set_has_continuous_dump_config() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HeapprofdConfig::clear_has_continuous_dump_config() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HeapprofdConfig::clear_continuous_dump_config() {
  if (continuous_dump_config_ != NULL) continuous_dump_config_->Clear();
  clear_has_continuous_dump_config();
}
inline const ::perfetto::protos::HeapprofdConfig_ContinuousDumpConfig& HeapprofdConfig::_internal_continuous_dump_config() const {
  return *continuous_dump_config_;
}
inline const ::perfetto::protos::HeapprofdConfig_ContinuousDumpConfig& HeapprofdConfig::continuous_dump_config() const {
  const ::perfetto::protos::HeapprofdConfig_ContinuousDumpConfig* p = continuous_dump_config_;
  // @@protoc_insertion_point(field_get:perfetto.protos.HeapprofdConfig.continuous_dump_config)
  return p != NULL ? *p : *reinterpret_cast<const ::perfetto::protos::HeapprofdConfig_ContinuousDumpConfig*>(
      &::perfetto::protos::_HeapprofdConfig_ContinuousDumpConfig_default_instance_);
}
inline ::perfetto::protos::HeapprofdConfig_ContinuousDumpConfig* HeapprofdConfig::release_continuous_dump_config() {
  // @@protoc_insertion_point(field_release:perfetto.protos.HeapprofdConfig.continuous_dump_config)
  clear_has_continuous_dump_config();
  ::perfetto::protos::HeapprofdConfig_ContinuousDumpConfig* temp = continuous_dump_config_;
  continuous_dump_config_ = NULL;
  return temp;
}
inline ::perfetto::protos::HeapprofdConfig_ContinuousDumpConfig* HeapprofdConfig::mutable_continuous_dump_config() {
  set_has_continuous_dump_config();
  if (continuous_dump_config_ == NULL) {
    auto* p = CreateMaybeMessage<::perfetto::protos::HeapprofdConfig_ContinuousDumpConfig>(GetArenaNoVirtual());
    continuous_dump_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.HeapprofdConfig.continuous_dump_config)
  return continuous_dump_config_;
}
inline void HeapprofdConfig::set_allocated_continuous_dump_config(::perfetto::protos::HeapprofdConfig_ContinuousDumpConfig* continuous_dump_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete continuous_dump_config_;
  }
  if (continuous_dump_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      continuous_dump_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, continuous_dump_config, submessage_arena);
    }
    set_has_continuous_dump_config();
  } else {
    clear_has_continuous_dump_config();
  }
  continuous_dump_config_ = continuous_dump_config;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.HeapprofdConfig.continuous_dump_config)
}

// optional uint64 shmem_size_bytes = 8;
inline bool HeapprofdConfig::has_shmem_size_bytes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HeapprofdConfig::set_has_shmem_size_bytes() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HeapprofdConfig::clear_has_shmem_size_bytes() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HeapprofdConfig::clear_shmem_size_bytes() {
  shmem_size_bytes_ = GOOGLE_ULONGLONG(0);
  clear_has_shmem_size_bytes();
}
inline ::google::protobuf::uint64 HeapprofdConfig::shmem_size_bytes() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.HeapprofdConfig.shmem_size_bytes)
  return shmem_size_bytes_;
}
inline void HeapprofdConfig::set_shmem_size_bytes(::google::protobuf::uint64 value) {
  set_has_shmem_size_bytes();
  shmem_size_bytes_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.HeapprofdConfig.shmem_size_bytes)
}

// optional bool block_client = 9;
inline bool HeapprofdConfig::has_block_client() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void HeapprofdConfig::set_has_block_client() {
  _has_bits_[0] |= 0x00000010u;
}
inline void HeapprofdConfig::clear_has_block_client() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void HeapprofdConfig::clear_block_client() {
  block_client_ = false;
  clear_has_block_client();
}
inline bool HeapprofdConfig::block_client() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.HeapprofdConfig.block_client)
  return block_client_;
}
inline void HeapprofdConfig::set_block_client(bool value) {
  set_has_block_client();
  block_client_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.HeapprofdConfig.block_client)
}

// optional bool no_startup = 10;
inline bool HeapprofdConfig::has_no_startup() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void HeapprofdConfig::set_has_no_startup() {
  _has_bits_[0] |= 0x00000020u;
}
inline void HeapprofdConfig::clear_has_no_startup() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void HeapprofdConfig::clear_no_startup() {
  no_startup_ = false;
  clear_has_no_startup();
}
inline bool HeapprofdConfig::no_startup() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.HeapprofdConfig.no_startup)
  return no_startup_;
}
inline void HeapprofdConfig::set_no_startup(bool value) {
  set_has_no_startup();
  no_startup_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.HeapprofdConfig.no_startup)
}

// optional bool no_running = 11;
inline bool HeapprofdConfig::has_no_running() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void HeapprofdConfig::set_has_no_running() {
  _has_bits_[0] |= 0x00000040u;
}
inline void HeapprofdConfig::clear_has_no_running() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void HeapprofdConfig::clear_no_running() {
  no_running_ = false;
  clear_has_no_running();
}
inline bool HeapprofdConfig::no_running() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.HeapprofdConfig.no_running)
  return no_running_;
}
inline void HeapprofdConfig::set_no_running(bool value) {
  set_has_no_running();
  no_running_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.HeapprofdConfig.no_running)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_perfetto_2fconfig_2fprofiling_2fheapprofd_5fconfig_2eproto
