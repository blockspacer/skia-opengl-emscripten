// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: perfetto/config/chrome/chrome_config.proto

#ifndef PROTOBUF_INCLUDED_perfetto_2fconfig_2fchrome_2fchrome_5fconfig_2eproto
#define PROTOBUF_INCLUDED_perfetto_2fconfig_2fchrome_2fchrome_5fconfig_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_perfetto_2fconfig_2fchrome_2fchrome_5fconfig_2eproto 

namespace protobuf_perfetto_2fconfig_2fchrome_2fchrome_5fconfig_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
}  // namespace protobuf_perfetto_2fconfig_2fchrome_2fchrome_5fconfig_2eproto
namespace perfetto {
namespace protos {
class ChromeConfig;
class ChromeConfigDefaultTypeInternal;
extern ChromeConfigDefaultTypeInternal _ChromeConfig_default_instance_;
}  // namespace protos
}  // namespace perfetto
namespace google {
namespace protobuf {
template<> ::perfetto::protos::ChromeConfig* Arena::CreateMaybeMessage<::perfetto::protos::ChromeConfig>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace perfetto {
namespace protos {

// ===================================================================

class ChromeConfig : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.ChromeConfig) */ {
 public:
  ChromeConfig();
  virtual ~ChromeConfig();

  ChromeConfig(const ChromeConfig& from);

  inline ChromeConfig& operator=(const ChromeConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChromeConfig(ChromeConfig&& from) noexcept
    : ChromeConfig() {
    *this = ::std::move(from);
  }

  inline ChromeConfig& operator=(ChromeConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ChromeConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChromeConfig* internal_default_instance() {
    return reinterpret_cast<const ChromeConfig*>(
               &_ChromeConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(ChromeConfig* other);
  friend void swap(ChromeConfig& a, ChromeConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChromeConfig* New() const final {
    return CreateMaybeMessage<ChromeConfig>(NULL);
  }

  ChromeConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ChromeConfig>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const ChromeConfig& from);
  void MergeFrom(const ChromeConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ChromeConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string trace_config = 1;
  bool has_trace_config() const;
  void clear_trace_config();
  static const int kTraceConfigFieldNumber = 1;
  const ::std::string& trace_config() const;
  void set_trace_config(const ::std::string& value);
  #if LANG_CXX11
  void set_trace_config(::std::string&& value);
  #endif
  void set_trace_config(const char* value);
  void set_trace_config(const char* value, size_t size);
  ::std::string* mutable_trace_config();
  ::std::string* release_trace_config();
  void set_allocated_trace_config(::std::string* trace_config);

  // optional bool privacy_filtering_enabled = 2;
  bool has_privacy_filtering_enabled() const;
  void clear_privacy_filtering_enabled();
  static const int kPrivacyFilteringEnabledFieldNumber = 2;
  bool privacy_filtering_enabled() const;
  void set_privacy_filtering_enabled(bool value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.ChromeConfig)
 private:
  void set_has_trace_config();
  void clear_has_trace_config();
  void set_has_privacy_filtering_enabled();
  void clear_has_privacy_filtering_enabled();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr trace_config_;
  bool privacy_filtering_enabled_;
  friend struct ::protobuf_perfetto_2fconfig_2fchrome_2fchrome_5fconfig_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ChromeConfig

// optional string trace_config = 1;
inline bool ChromeConfig::has_trace_config() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChromeConfig::set_has_trace_config() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChromeConfig::clear_has_trace_config() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChromeConfig::clear_trace_config() {
  trace_config_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_trace_config();
}
inline const ::std::string& ChromeConfig::trace_config() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeConfig.trace_config)
  return trace_config_.GetNoArena();
}
inline void ChromeConfig::set_trace_config(const ::std::string& value) {
  set_has_trace_config();
  trace_config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeConfig.trace_config)
}
#if LANG_CXX11
inline void ChromeConfig::set_trace_config(::std::string&& value) {
  set_has_trace_config();
  trace_config_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.ChromeConfig.trace_config)
}
#endif
inline void ChromeConfig::set_trace_config(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_trace_config();
  trace_config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.ChromeConfig.trace_config)
}
inline void ChromeConfig::set_trace_config(const char* value, size_t size) {
  set_has_trace_config();
  trace_config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.ChromeConfig.trace_config)
}
inline ::std::string* ChromeConfig::mutable_trace_config() {
  set_has_trace_config();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ChromeConfig.trace_config)
  return trace_config_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChromeConfig::release_trace_config() {
  // @@protoc_insertion_point(field_release:perfetto.protos.ChromeConfig.trace_config)
  if (!has_trace_config()) {
    return NULL;
  }
  clear_has_trace_config();
  return trace_config_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChromeConfig::set_allocated_trace_config(::std::string* trace_config) {
  if (trace_config != NULL) {
    set_has_trace_config();
  } else {
    clear_has_trace_config();
  }
  trace_config_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trace_config);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.ChromeConfig.trace_config)
}

// optional bool privacy_filtering_enabled = 2;
inline bool ChromeConfig::has_privacy_filtering_enabled() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChromeConfig::set_has_privacy_filtering_enabled() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChromeConfig::clear_has_privacy_filtering_enabled() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChromeConfig::clear_privacy_filtering_enabled() {
  privacy_filtering_enabled_ = false;
  clear_has_privacy_filtering_enabled();
}
inline bool ChromeConfig::privacy_filtering_enabled() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeConfig.privacy_filtering_enabled)
  return privacy_filtering_enabled_;
}
inline void ChromeConfig::set_privacy_filtering_enabled(bool value) {
  set_has_privacy_filtering_enabled();
  privacy_filtering_enabled_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeConfig.privacy_filtering_enabled)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_perfetto_2fconfig_2fchrome_2fchrome_5fconfig_2eproto
