// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: perfetto/trace/track_event/process_descriptor.proto

#ifndef PROTOBUF_INCLUDED_perfetto_2ftrace_2ftrack_5fevent_2fprocess_5fdescriptor_2eproto
#define PROTOBUF_INCLUDED_perfetto_2ftrace_2ftrack_5fevent_2fprocess_5fdescriptor_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_perfetto_2ftrace_2ftrack_5fevent_2fprocess_5fdescriptor_2eproto 

namespace protobuf_perfetto_2ftrace_2ftrack_5fevent_2fprocess_5fdescriptor_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
}  // namespace protobuf_perfetto_2ftrace_2ftrack_5fevent_2fprocess_5fdescriptor_2eproto
namespace perfetto {
namespace protos {
class ProcessDescriptor;
class ProcessDescriptorDefaultTypeInternal;
extern ProcessDescriptorDefaultTypeInternal _ProcessDescriptor_default_instance_;
}  // namespace protos
}  // namespace perfetto
namespace google {
namespace protobuf {
template<> ::perfetto::protos::ProcessDescriptor* Arena::CreateMaybeMessage<::perfetto::protos::ProcessDescriptor>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace perfetto {
namespace protos {

enum ProcessDescriptor_ChromeProcessType {
  ProcessDescriptor_ChromeProcessType_PROCESS_UNSPECIFIED = 0,
  ProcessDescriptor_ChromeProcessType_PROCESS_BROWSER = 1,
  ProcessDescriptor_ChromeProcessType_PROCESS_RENDERER = 2,
  ProcessDescriptor_ChromeProcessType_PROCESS_UTILITY = 3,
  ProcessDescriptor_ChromeProcessType_PROCESS_ZYGOTE = 4,
  ProcessDescriptor_ChromeProcessType_PROCESS_SANDBOX_HELPER = 5,
  ProcessDescriptor_ChromeProcessType_PROCESS_GPU = 6,
  ProcessDescriptor_ChromeProcessType_PROCESS_PPAPI_PLUGIN = 7,
  ProcessDescriptor_ChromeProcessType_PROCESS_PPAPI_BROKER = 8
};
bool ProcessDescriptor_ChromeProcessType_IsValid(int value);
const ProcessDescriptor_ChromeProcessType ProcessDescriptor_ChromeProcessType_ChromeProcessType_MIN = ProcessDescriptor_ChromeProcessType_PROCESS_UNSPECIFIED;
const ProcessDescriptor_ChromeProcessType ProcessDescriptor_ChromeProcessType_ChromeProcessType_MAX = ProcessDescriptor_ChromeProcessType_PROCESS_PPAPI_BROKER;
const int ProcessDescriptor_ChromeProcessType_ChromeProcessType_ARRAYSIZE = ProcessDescriptor_ChromeProcessType_ChromeProcessType_MAX + 1;

// ===================================================================

class ProcessDescriptor : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.ProcessDescriptor) */ {
 public:
  ProcessDescriptor();
  virtual ~ProcessDescriptor();

  ProcessDescriptor(const ProcessDescriptor& from);

  inline ProcessDescriptor& operator=(const ProcessDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProcessDescriptor(ProcessDescriptor&& from) noexcept
    : ProcessDescriptor() {
    *this = ::std::move(from);
  }

  inline ProcessDescriptor& operator=(ProcessDescriptor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ProcessDescriptor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProcessDescriptor* internal_default_instance() {
    return reinterpret_cast<const ProcessDescriptor*>(
               &_ProcessDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(ProcessDescriptor* other);
  friend void swap(ProcessDescriptor& a, ProcessDescriptor& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProcessDescriptor* New() const final {
    return CreateMaybeMessage<ProcessDescriptor>(NULL);
  }

  ProcessDescriptor* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ProcessDescriptor>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const ProcessDescriptor& from);
  void MergeFrom(const ProcessDescriptor& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ProcessDescriptor* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ProcessDescriptor_ChromeProcessType ChromeProcessType;
  static const ChromeProcessType PROCESS_UNSPECIFIED =
    ProcessDescriptor_ChromeProcessType_PROCESS_UNSPECIFIED;
  static const ChromeProcessType PROCESS_BROWSER =
    ProcessDescriptor_ChromeProcessType_PROCESS_BROWSER;
  static const ChromeProcessType PROCESS_RENDERER =
    ProcessDescriptor_ChromeProcessType_PROCESS_RENDERER;
  static const ChromeProcessType PROCESS_UTILITY =
    ProcessDescriptor_ChromeProcessType_PROCESS_UTILITY;
  static const ChromeProcessType PROCESS_ZYGOTE =
    ProcessDescriptor_ChromeProcessType_PROCESS_ZYGOTE;
  static const ChromeProcessType PROCESS_SANDBOX_HELPER =
    ProcessDescriptor_ChromeProcessType_PROCESS_SANDBOX_HELPER;
  static const ChromeProcessType PROCESS_GPU =
    ProcessDescriptor_ChromeProcessType_PROCESS_GPU;
  static const ChromeProcessType PROCESS_PPAPI_PLUGIN =
    ProcessDescriptor_ChromeProcessType_PROCESS_PPAPI_PLUGIN;
  static const ChromeProcessType PROCESS_PPAPI_BROKER =
    ProcessDescriptor_ChromeProcessType_PROCESS_PPAPI_BROKER;
  static inline bool ChromeProcessType_IsValid(int value) {
    return ProcessDescriptor_ChromeProcessType_IsValid(value);
  }
  static const ChromeProcessType ChromeProcessType_MIN =
    ProcessDescriptor_ChromeProcessType_ChromeProcessType_MIN;
  static const ChromeProcessType ChromeProcessType_MAX =
    ProcessDescriptor_ChromeProcessType_ChromeProcessType_MAX;
  static const int ChromeProcessType_ARRAYSIZE =
    ProcessDescriptor_ChromeProcessType_ChromeProcessType_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // repeated string cmdline = 2;
  int cmdline_size() const;
  void clear_cmdline();
  static const int kCmdlineFieldNumber = 2;
  const ::std::string& cmdline(int index) const;
  ::std::string* mutable_cmdline(int index);
  void set_cmdline(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_cmdline(int index, ::std::string&& value);
  #endif
  void set_cmdline(int index, const char* value);
  void set_cmdline(int index, const char* value, size_t size);
  ::std::string* add_cmdline();
  void add_cmdline(const ::std::string& value);
  #if LANG_CXX11
  void add_cmdline(::std::string&& value);
  #endif
  void add_cmdline(const char* value);
  void add_cmdline(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& cmdline() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_cmdline();

  // optional int32 pid = 1;
  bool has_pid() const;
  void clear_pid();
  static const int kPidFieldNumber = 1;
  ::google::protobuf::int32 pid() const;
  void set_pid(::google::protobuf::int32 value);

  // optional int32 legacy_sort_index = 3;
  bool has_legacy_sort_index() const;
  void clear_legacy_sort_index();
  static const int kLegacySortIndexFieldNumber = 3;
  ::google::protobuf::int32 legacy_sort_index() const;
  void set_legacy_sort_index(::google::protobuf::int32 value);

  // optional .perfetto.protos.ProcessDescriptor.ChromeProcessType chrome_process_type = 4;
  bool has_chrome_process_type() const;
  void clear_chrome_process_type();
  static const int kChromeProcessTypeFieldNumber = 4;
  ::perfetto::protos::ProcessDescriptor_ChromeProcessType chrome_process_type() const;
  void set_chrome_process_type(::perfetto::protos::ProcessDescriptor_ChromeProcessType value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.ProcessDescriptor)
 private:
  void set_has_pid();
  void clear_has_pid();
  void set_has_legacy_sort_index();
  void clear_has_legacy_sort_index();
  void set_has_chrome_process_type();
  void clear_has_chrome_process_type();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> cmdline_;
  ::google::protobuf::int32 pid_;
  ::google::protobuf::int32 legacy_sort_index_;
  int chrome_process_type_;
  friend struct ::protobuf_perfetto_2ftrace_2ftrack_5fevent_2fprocess_5fdescriptor_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ProcessDescriptor

// optional int32 pid = 1;
inline bool ProcessDescriptor::has_pid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProcessDescriptor::set_has_pid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProcessDescriptor::clear_has_pid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProcessDescriptor::clear_pid() {
  pid_ = 0;
  clear_has_pid();
}
inline ::google::protobuf::int32 ProcessDescriptor::pid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProcessDescriptor.pid)
  return pid_;
}
inline void ProcessDescriptor::set_pid(::google::protobuf::int32 value) {
  set_has_pid();
  pid_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ProcessDescriptor.pid)
}

// repeated string cmdline = 2;
inline int ProcessDescriptor::cmdline_size() const {
  return cmdline_.size();
}
inline void ProcessDescriptor::clear_cmdline() {
  cmdline_.Clear();
}
inline const ::std::string& ProcessDescriptor::cmdline(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProcessDescriptor.cmdline)
  return cmdline_.Get(index);
}
inline ::std::string* ProcessDescriptor::mutable_cmdline(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ProcessDescriptor.cmdline)
  return cmdline_.Mutable(index);
}
inline void ProcessDescriptor::set_cmdline(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.ProcessDescriptor.cmdline)
  cmdline_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ProcessDescriptor::set_cmdline(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.ProcessDescriptor.cmdline)
  cmdline_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ProcessDescriptor::set_cmdline(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  cmdline_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:perfetto.protos.ProcessDescriptor.cmdline)
}
inline void ProcessDescriptor::set_cmdline(int index, const char* value, size_t size) {
  cmdline_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.ProcessDescriptor.cmdline)
}
inline ::std::string* ProcessDescriptor::add_cmdline() {
  // @@protoc_insertion_point(field_add_mutable:perfetto.protos.ProcessDescriptor.cmdline)
  return cmdline_.Add();
}
inline void ProcessDescriptor::add_cmdline(const ::std::string& value) {
  cmdline_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.ProcessDescriptor.cmdline)
}
#if LANG_CXX11
inline void ProcessDescriptor::add_cmdline(::std::string&& value) {
  cmdline_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:perfetto.protos.ProcessDescriptor.cmdline)
}
#endif
inline void ProcessDescriptor::add_cmdline(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  cmdline_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:perfetto.protos.ProcessDescriptor.cmdline)
}
inline void ProcessDescriptor::add_cmdline(const char* value, size_t size) {
  cmdline_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:perfetto.protos.ProcessDescriptor.cmdline)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ProcessDescriptor::cmdline() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.ProcessDescriptor.cmdline)
  return cmdline_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ProcessDescriptor::mutable_cmdline() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.ProcessDescriptor.cmdline)
  return &cmdline_;
}

// optional int32 legacy_sort_index = 3;
inline bool ProcessDescriptor::has_legacy_sort_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProcessDescriptor::set_has_legacy_sort_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProcessDescriptor::clear_has_legacy_sort_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProcessDescriptor::clear_legacy_sort_index() {
  legacy_sort_index_ = 0;
  clear_has_legacy_sort_index();
}
inline ::google::protobuf::int32 ProcessDescriptor::legacy_sort_index() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProcessDescriptor.legacy_sort_index)
  return legacy_sort_index_;
}
inline void ProcessDescriptor::set_legacy_sort_index(::google::protobuf::int32 value) {
  set_has_legacy_sort_index();
  legacy_sort_index_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ProcessDescriptor.legacy_sort_index)
}

// optional .perfetto.protos.ProcessDescriptor.ChromeProcessType chrome_process_type = 4;
inline bool ProcessDescriptor::has_chrome_process_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProcessDescriptor::set_has_chrome_process_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProcessDescriptor::clear_has_chrome_process_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProcessDescriptor::clear_chrome_process_type() {
  chrome_process_type_ = 0;
  clear_has_chrome_process_type();
}
inline ::perfetto::protos::ProcessDescriptor_ChromeProcessType ProcessDescriptor::chrome_process_type() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProcessDescriptor.chrome_process_type)
  return static_cast< ::perfetto::protos::ProcessDescriptor_ChromeProcessType >(chrome_process_type_);
}
inline void ProcessDescriptor::set_chrome_process_type(::perfetto::protos::ProcessDescriptor_ChromeProcessType value) {
  assert(::perfetto::protos::ProcessDescriptor_ChromeProcessType_IsValid(value));
  set_has_chrome_process_type();
  chrome_process_type_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ProcessDescriptor.chrome_process_type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::perfetto::protos::ProcessDescriptor_ChromeProcessType> : ::std::true_type {};

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_perfetto_2ftrace_2ftrack_5fevent_2fprocess_5fdescriptor_2eproto
