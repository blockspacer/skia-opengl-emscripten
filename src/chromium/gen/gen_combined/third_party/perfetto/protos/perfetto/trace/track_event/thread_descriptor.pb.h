// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: perfetto/trace/track_event/thread_descriptor.proto

#ifndef PROTOBUF_INCLUDED_perfetto_2ftrace_2ftrack_5fevent_2fthread_5fdescriptor_2eproto
#define PROTOBUF_INCLUDED_perfetto_2ftrace_2ftrack_5fevent_2fthread_5fdescriptor_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_perfetto_2ftrace_2ftrack_5fevent_2fthread_5fdescriptor_2eproto 

namespace protobuf_perfetto_2ftrace_2ftrack_5fevent_2fthread_5fdescriptor_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
}  // namespace protobuf_perfetto_2ftrace_2ftrack_5fevent_2fthread_5fdescriptor_2eproto
namespace perfetto {
namespace protos {
class ThreadDescriptor;
class ThreadDescriptorDefaultTypeInternal;
extern ThreadDescriptorDefaultTypeInternal _ThreadDescriptor_default_instance_;
}  // namespace protos
}  // namespace perfetto
namespace google {
namespace protobuf {
template<> ::perfetto::protos::ThreadDescriptor* Arena::CreateMaybeMessage<::perfetto::protos::ThreadDescriptor>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace perfetto {
namespace protos {

enum ThreadDescriptor_ChromeThreadType {
  ThreadDescriptor_ChromeThreadType_THREAD_UNSPECIFIED = 0
};
bool ThreadDescriptor_ChromeThreadType_IsValid(int value);
const ThreadDescriptor_ChromeThreadType ThreadDescriptor_ChromeThreadType_ChromeThreadType_MIN = ThreadDescriptor_ChromeThreadType_THREAD_UNSPECIFIED;
const ThreadDescriptor_ChromeThreadType ThreadDescriptor_ChromeThreadType_ChromeThreadType_MAX = ThreadDescriptor_ChromeThreadType_THREAD_UNSPECIFIED;
const int ThreadDescriptor_ChromeThreadType_ChromeThreadType_ARRAYSIZE = ThreadDescriptor_ChromeThreadType_ChromeThreadType_MAX + 1;

// ===================================================================

class ThreadDescriptor : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.ThreadDescriptor) */ {
 public:
  ThreadDescriptor();
  virtual ~ThreadDescriptor();

  ThreadDescriptor(const ThreadDescriptor& from);

  inline ThreadDescriptor& operator=(const ThreadDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ThreadDescriptor(ThreadDescriptor&& from) noexcept
    : ThreadDescriptor() {
    *this = ::std::move(from);
  }

  inline ThreadDescriptor& operator=(ThreadDescriptor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ThreadDescriptor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ThreadDescriptor* internal_default_instance() {
    return reinterpret_cast<const ThreadDescriptor*>(
               &_ThreadDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(ThreadDescriptor* other);
  friend void swap(ThreadDescriptor& a, ThreadDescriptor& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ThreadDescriptor* New() const final {
    return CreateMaybeMessage<ThreadDescriptor>(NULL);
  }

  ThreadDescriptor* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ThreadDescriptor>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const ThreadDescriptor& from);
  void MergeFrom(const ThreadDescriptor& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ThreadDescriptor* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ThreadDescriptor_ChromeThreadType ChromeThreadType;
  static const ChromeThreadType THREAD_UNSPECIFIED =
    ThreadDescriptor_ChromeThreadType_THREAD_UNSPECIFIED;
  static inline bool ChromeThreadType_IsValid(int value) {
    return ThreadDescriptor_ChromeThreadType_IsValid(value);
  }
  static const ChromeThreadType ChromeThreadType_MIN =
    ThreadDescriptor_ChromeThreadType_ChromeThreadType_MIN;
  static const ChromeThreadType ChromeThreadType_MAX =
    ThreadDescriptor_ChromeThreadType_ChromeThreadType_MAX;
  static const int ChromeThreadType_ARRAYSIZE =
    ThreadDescriptor_ChromeThreadType_ChromeThreadType_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // optional string thread_name = 5;
  bool has_thread_name() const;
  void clear_thread_name();
  static const int kThreadNameFieldNumber = 5;
  const ::std::string& thread_name() const;
  void set_thread_name(const ::std::string& value);
  #if LANG_CXX11
  void set_thread_name(::std::string&& value);
  #endif
  void set_thread_name(const char* value);
  void set_thread_name(const char* value, size_t size);
  ::std::string* mutable_thread_name();
  ::std::string* release_thread_name();
  void set_allocated_thread_name(::std::string* thread_name);

  // optional int32 pid = 1;
  bool has_pid() const;
  void clear_pid();
  static const int kPidFieldNumber = 1;
  ::google::protobuf::int32 pid() const;
  void set_pid(::google::protobuf::int32 value);

  // optional int32 tid = 2;
  bool has_tid() const;
  void clear_tid();
  static const int kTidFieldNumber = 2;
  ::google::protobuf::int32 tid() const;
  void set_tid(::google::protobuf::int32 value);

  // optional int32 legacy_sort_index = 3;
  bool has_legacy_sort_index() const;
  void clear_legacy_sort_index();
  static const int kLegacySortIndexFieldNumber = 3;
  ::google::protobuf::int32 legacy_sort_index() const;
  void set_legacy_sort_index(::google::protobuf::int32 value);

  // optional .perfetto.protos.ThreadDescriptor.ChromeThreadType chrome_thread_type = 4;
  bool has_chrome_thread_type() const;
  void clear_chrome_thread_type();
  static const int kChromeThreadTypeFieldNumber = 4;
  ::perfetto::protos::ThreadDescriptor_ChromeThreadType chrome_thread_type() const;
  void set_chrome_thread_type(::perfetto::protos::ThreadDescriptor_ChromeThreadType value);

  // optional int64 reference_timestamp_us = 6;
  bool has_reference_timestamp_us() const;
  void clear_reference_timestamp_us();
  static const int kReferenceTimestampUsFieldNumber = 6;
  ::google::protobuf::int64 reference_timestamp_us() const;
  void set_reference_timestamp_us(::google::protobuf::int64 value);

  // optional int64 reference_thread_time_us = 7;
  bool has_reference_thread_time_us() const;
  void clear_reference_thread_time_us();
  static const int kReferenceThreadTimeUsFieldNumber = 7;
  ::google::protobuf::int64 reference_thread_time_us() const;
  void set_reference_thread_time_us(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.ThreadDescriptor)
 private:
  void set_has_pid();
  void clear_has_pid();
  void set_has_tid();
  void clear_has_tid();
  void set_has_legacy_sort_index();
  void clear_has_legacy_sort_index();
  void set_has_chrome_thread_type();
  void clear_has_chrome_thread_type();
  void set_has_thread_name();
  void clear_has_thread_name();
  void set_has_reference_timestamp_us();
  void clear_has_reference_timestamp_us();
  void set_has_reference_thread_time_us();
  void clear_has_reference_thread_time_us();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr thread_name_;
  ::google::protobuf::int32 pid_;
  ::google::protobuf::int32 tid_;
  ::google::protobuf::int32 legacy_sort_index_;
  int chrome_thread_type_;
  ::google::protobuf::int64 reference_timestamp_us_;
  ::google::protobuf::int64 reference_thread_time_us_;
  friend struct ::protobuf_perfetto_2ftrace_2ftrack_5fevent_2fthread_5fdescriptor_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ThreadDescriptor

// optional int32 pid = 1;
inline bool ThreadDescriptor::has_pid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ThreadDescriptor::set_has_pid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ThreadDescriptor::clear_has_pid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ThreadDescriptor::clear_pid() {
  pid_ = 0;
  clear_has_pid();
}
inline ::google::protobuf::int32 ThreadDescriptor::pid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ThreadDescriptor.pid)
  return pid_;
}
inline void ThreadDescriptor::set_pid(::google::protobuf::int32 value) {
  set_has_pid();
  pid_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ThreadDescriptor.pid)
}

// optional int32 tid = 2;
inline bool ThreadDescriptor::has_tid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ThreadDescriptor::set_has_tid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ThreadDescriptor::clear_has_tid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ThreadDescriptor::clear_tid() {
  tid_ = 0;
  clear_has_tid();
}
inline ::google::protobuf::int32 ThreadDescriptor::tid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ThreadDescriptor.tid)
  return tid_;
}
inline void ThreadDescriptor::set_tid(::google::protobuf::int32 value) {
  set_has_tid();
  tid_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ThreadDescriptor.tid)
}

// optional int32 legacy_sort_index = 3;
inline bool ThreadDescriptor::has_legacy_sort_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ThreadDescriptor::set_has_legacy_sort_index() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ThreadDescriptor::clear_has_legacy_sort_index() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ThreadDescriptor::clear_legacy_sort_index() {
  legacy_sort_index_ = 0;
  clear_has_legacy_sort_index();
}
inline ::google::protobuf::int32 ThreadDescriptor::legacy_sort_index() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ThreadDescriptor.legacy_sort_index)
  return legacy_sort_index_;
}
inline void ThreadDescriptor::set_legacy_sort_index(::google::protobuf::int32 value) {
  set_has_legacy_sort_index();
  legacy_sort_index_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ThreadDescriptor.legacy_sort_index)
}

// optional .perfetto.protos.ThreadDescriptor.ChromeThreadType chrome_thread_type = 4;
inline bool ThreadDescriptor::has_chrome_thread_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ThreadDescriptor::set_has_chrome_thread_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ThreadDescriptor::clear_has_chrome_thread_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ThreadDescriptor::clear_chrome_thread_type() {
  chrome_thread_type_ = 0;
  clear_has_chrome_thread_type();
}
inline ::perfetto::protos::ThreadDescriptor_ChromeThreadType ThreadDescriptor::chrome_thread_type() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ThreadDescriptor.chrome_thread_type)
  return static_cast< ::perfetto::protos::ThreadDescriptor_ChromeThreadType >(chrome_thread_type_);
}
inline void ThreadDescriptor::set_chrome_thread_type(::perfetto::protos::ThreadDescriptor_ChromeThreadType value) {
  assert(::perfetto::protos::ThreadDescriptor_ChromeThreadType_IsValid(value));
  set_has_chrome_thread_type();
  chrome_thread_type_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ThreadDescriptor.chrome_thread_type)
}

// optional string thread_name = 5;
inline bool ThreadDescriptor::has_thread_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ThreadDescriptor::set_has_thread_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ThreadDescriptor::clear_has_thread_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ThreadDescriptor::clear_thread_name() {
  thread_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_thread_name();
}
inline const ::std::string& ThreadDescriptor::thread_name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ThreadDescriptor.thread_name)
  return thread_name_.GetNoArena();
}
inline void ThreadDescriptor::set_thread_name(const ::std::string& value) {
  set_has_thread_name();
  thread_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ThreadDescriptor.thread_name)
}
#if LANG_CXX11
inline void ThreadDescriptor::set_thread_name(::std::string&& value) {
  set_has_thread_name();
  thread_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.ThreadDescriptor.thread_name)
}
#endif
inline void ThreadDescriptor::set_thread_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_thread_name();
  thread_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.ThreadDescriptor.thread_name)
}
inline void ThreadDescriptor::set_thread_name(const char* value, size_t size) {
  set_has_thread_name();
  thread_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.ThreadDescriptor.thread_name)
}
inline ::std::string* ThreadDescriptor::mutable_thread_name() {
  set_has_thread_name();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ThreadDescriptor.thread_name)
  return thread_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ThreadDescriptor::release_thread_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.ThreadDescriptor.thread_name)
  if (!has_thread_name()) {
    return NULL;
  }
  clear_has_thread_name();
  return thread_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ThreadDescriptor::set_allocated_thread_name(::std::string* thread_name) {
  if (thread_name != NULL) {
    set_has_thread_name();
  } else {
    clear_has_thread_name();
  }
  thread_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), thread_name);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.ThreadDescriptor.thread_name)
}

// optional int64 reference_timestamp_us = 6;
inline bool ThreadDescriptor::has_reference_timestamp_us() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ThreadDescriptor::set_has_reference_timestamp_us() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ThreadDescriptor::clear_has_reference_timestamp_us() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ThreadDescriptor::clear_reference_timestamp_us() {
  reference_timestamp_us_ = GOOGLE_LONGLONG(0);
  clear_has_reference_timestamp_us();
}
inline ::google::protobuf::int64 ThreadDescriptor::reference_timestamp_us() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ThreadDescriptor.reference_timestamp_us)
  return reference_timestamp_us_;
}
inline void ThreadDescriptor::set_reference_timestamp_us(::google::protobuf::int64 value) {
  set_has_reference_timestamp_us();
  reference_timestamp_us_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ThreadDescriptor.reference_timestamp_us)
}

// optional int64 reference_thread_time_us = 7;
inline bool ThreadDescriptor::has_reference_thread_time_us() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ThreadDescriptor::set_has_reference_thread_time_us() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ThreadDescriptor::clear_has_reference_thread_time_us() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ThreadDescriptor::clear_reference_thread_time_us() {
  reference_thread_time_us_ = GOOGLE_LONGLONG(0);
  clear_has_reference_thread_time_us();
}
inline ::google::protobuf::int64 ThreadDescriptor::reference_thread_time_us() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ThreadDescriptor.reference_thread_time_us)
  return reference_thread_time_us_;
}
inline void ThreadDescriptor::set_reference_thread_time_us(::google::protobuf::int64 value) {
  set_has_reference_thread_time_us();
  reference_thread_time_us_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ThreadDescriptor.reference_thread_time_us)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::perfetto::protos::ThreadDescriptor_ChromeThreadType> : ::std::true_type {};

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_perfetto_2ftrace_2ftrack_5fevent_2fthread_5fdescriptor_2eproto
