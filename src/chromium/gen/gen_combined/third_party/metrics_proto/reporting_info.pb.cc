// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: reporting_info.proto

#include "reporting_info.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace metrics {
class ReportingInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReportingInfo>
      _instance;
} _ReportingInfo_default_instance_;
}  // namespace metrics
namespace protobuf_reporting_5finfo_2eproto {
static void InitDefaultsReportingInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metrics::_ReportingInfo_default_instance_;
    new (ptr) ::metrics::ReportingInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metrics::ReportingInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ReportingInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsReportingInfo}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_ReportingInfo.base);
}

}  // namespace protobuf_reporting_5finfo_2eproto
namespace metrics {

// ===================================================================

void ReportingInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReportingInfo::kAttemptCountFieldNumber;
const int ReportingInfo::kLastResponseCodeFieldNumber;
const int ReportingInfo::kLastErrorCodeFieldNumber;
const int ReportingInfo::kLastAttemptWasHttpsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReportingInfo::ReportingInfo()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_reporting_5finfo_2eproto::scc_info_ReportingInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.ReportingInfo)
}
ReportingInfo::ReportingInfo(const ReportingInfo& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&attempt_count_, &from.attempt_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_attempt_was_https_) -
    reinterpret_cast<char*>(&attempt_count_)) + sizeof(last_attempt_was_https_));
  // @@protoc_insertion_point(copy_constructor:metrics.ReportingInfo)
}

void ReportingInfo::SharedCtor() {
  ::memset(&attempt_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_attempt_was_https_) -
      reinterpret_cast<char*>(&attempt_count_)) + sizeof(last_attempt_was_https_));
}

ReportingInfo::~ReportingInfo() {
  // @@protoc_insertion_point(destructor:metrics.ReportingInfo)
  SharedDtor();
}

void ReportingInfo::SharedDtor() {
}

void ReportingInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReportingInfo& ReportingInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_reporting_5finfo_2eproto::scc_info_ReportingInfo.base);
  return *internal_default_instance();
}


void ReportingInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.ReportingInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&attempt_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&last_attempt_was_https_) -
        reinterpret_cast<char*>(&attempt_count_)) + sizeof(last_attempt_was_https_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ReportingInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:metrics.ReportingInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 attempt_count = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_attempt_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attempt_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 last_response_code = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_last_response_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &last_response_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 last_error_code = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_last_error_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &last_error_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool last_attempt_was_https = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_last_attempt_was_https();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &last_attempt_was_https_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.ReportingInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.ReportingInfo)
  return false;
#undef DO_
}

void ReportingInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.ReportingInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 attempt_count = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->attempt_count(), output);
  }

  // optional int32 last_response_code = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->last_response_code(), output);
  }

  // optional int32 last_error_code = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->last_error_code(), output);
  }

  // optional bool last_attempt_was_https = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->last_attempt_was_https(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:metrics.ReportingInfo)
}

size_t ReportingInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.ReportingInfo)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 15u) {
    // optional int32 attempt_count = 1;
    if (has_attempt_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attempt_count());
    }

    // optional int32 last_response_code = 2;
    if (has_last_response_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->last_response_code());
    }

    // optional int32 last_error_code = 3;
    if (has_last_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->last_error_code());
    }

    // optional bool last_attempt_was_https = 4;
    if (has_last_attempt_was_https()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReportingInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ReportingInfo*>(&from));
}

void ReportingInfo::MergeFrom(const ReportingInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.ReportingInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      attempt_count_ = from.attempt_count_;
    }
    if (cached_has_bits & 0x00000002u) {
      last_response_code_ = from.last_response_code_;
    }
    if (cached_has_bits & 0x00000004u) {
      last_error_code_ = from.last_error_code_;
    }
    if (cached_has_bits & 0x00000008u) {
      last_attempt_was_https_ = from.last_attempt_was_https_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ReportingInfo::CopyFrom(const ReportingInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.ReportingInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportingInfo::IsInitialized() const {
  return true;
}

void ReportingInfo::Swap(ReportingInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReportingInfo::InternalSwap(ReportingInfo* other) {
  using std::swap;
  swap(attempt_count_, other->attempt_count_);
  swap(last_response_code_, other->last_response_code_);
  swap(last_error_code_, other->last_error_code_);
  swap(last_attempt_was_https_, other->last_attempt_was_https_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string ReportingInfo::GetTypeName() const {
  return "metrics.ReportingInfo";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace metrics
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metrics::ReportingInfo* Arena::CreateMaybeMessage< ::metrics::ReportingInfo >(Arena* arena) {
  return Arena::CreateInternal< ::metrics::ReportingInfo >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
