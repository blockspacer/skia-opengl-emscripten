// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ukm/source.proto

#include "ukm/source.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_ukm_2fsource_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ukm_2fsource_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Source_UrlInfo;
}  // namespace protobuf_ukm_2fsource_2eproto
namespace ukm {
class Source_UrlInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Source_UrlInfo>
      _instance;
} _Source_UrlInfo_default_instance_;
class SourceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Source>
      _instance;
} _Source_default_instance_;
}  // namespace ukm
namespace protobuf_ukm_2fsource_2eproto {
static void InitDefaultsSource_UrlInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ukm::_Source_UrlInfo_default_instance_;
    new (ptr) ::ukm::Source_UrlInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ukm::Source_UrlInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Source_UrlInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSource_UrlInfo}, {}};

static void InitDefaultsSource() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ukm::_Source_default_instance_;
    new (ptr) ::ukm::Source();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ukm::Source::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Source =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSource}, {
      &protobuf_ukm_2fsource_2eproto::scc_info_Source_UrlInfo.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Source_UrlInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Source.base);
}

}  // namespace protobuf_ukm_2fsource_2eproto
namespace ukm {
bool Source_UrlScheme_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Source_UrlScheme Source::UNSUPPORTED;
const Source_UrlScheme Source::HTTP;
const Source_UrlScheme Source::HTTPS;
const Source_UrlScheme Source::FTP;
const Source_UrlScheme Source::ABOUT;
const Source_UrlScheme Source::CHROME;
const Source_UrlScheme Source::CHROME_EXTENSION;
const Source_UrlScheme Source::APP;
const Source_UrlScheme Source::UrlScheme_MIN;
const Source_UrlScheme Source::UrlScheme_MAX;
const int Source::UrlScheme_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void Source_UrlInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Source_UrlInfo::kUrlFieldNumber;
const int Source_UrlInfo::kPreviousUrlCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Source_UrlInfo::Source_UrlInfo()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ukm_2fsource_2eproto::scc_info_Source_UrlInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ukm.Source.UrlInfo)
}
Source_UrlInfo::Source_UrlInfo(const Source_UrlInfo& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  previous_url_count_ = from.previous_url_count_;
  // @@protoc_insertion_point(copy_constructor:ukm.Source.UrlInfo)
}

void Source_UrlInfo::SharedCtor() {
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  previous_url_count_ = 0;
}

Source_UrlInfo::~Source_UrlInfo() {
  // @@protoc_insertion_point(destructor:ukm.Source.UrlInfo)
  SharedDtor();
}

void Source_UrlInfo::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Source_UrlInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Source_UrlInfo& Source_UrlInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ukm_2fsource_2eproto::scc_info_Source_UrlInfo.base);
  return *internal_default_instance();
}


void Source_UrlInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ukm.Source.UrlInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    url_.ClearNonDefaultToEmptyNoArena();
  }
  previous_url_count_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Source_UrlInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:ukm.Source.UrlInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string url = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 previous_url_count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_previous_url_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &previous_url_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ukm.Source.UrlInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ukm.Source.UrlInfo)
  return false;
#undef DO_
}

void Source_UrlInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ukm.Source.UrlInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->url(), output);
  }

  // optional int32 previous_url_count = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->previous_url_count(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:ukm.Source.UrlInfo)
}

size_t Source_UrlInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ukm.Source.UrlInfo)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 3u) {
    // optional string url = 1;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional int32 previous_url_count = 2;
    if (has_previous_url_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->previous_url_count());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Source_UrlInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Source_UrlInfo*>(&from));
}

void Source_UrlInfo::MergeFrom(const Source_UrlInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ukm.Source.UrlInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      previous_url_count_ = from.previous_url_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Source_UrlInfo::CopyFrom(const Source_UrlInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ukm.Source.UrlInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Source_UrlInfo::IsInitialized() const {
  return true;
}

void Source_UrlInfo::Swap(Source_UrlInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Source_UrlInfo::InternalSwap(Source_UrlInfo* other) {
  using std::swap;
  url_.Swap(&other->url_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(previous_url_count_, other->previous_url_count_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Source_UrlInfo::GetTypeName() const {
  return "ukm.Source.UrlInfo";
}


// ===================================================================

void Source::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Source::kIdFieldNumber;
const int Source::kPreviousSourceIdFieldNumber;
const int Source::kPreviousSameDocumentSourceIdFieldNumber;
const int Source::kOpenerSourceIdFieldNumber;
const int Source::kUrlsFieldNumber;
const int Source::kIsSameDocumentNavigationFieldNumber;
const int Source::kUrlFieldNumber;
const int Source::kInitialUrlFieldNumber;
const int Source::kIsCustomTabFieldNumber;
const int Source::kNavigationTimeMsecFieldNumber;
const int Source::kTabIdFieldNumber;
const int Source::kFirstContentfulPaintMsecFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Source::Source()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ukm_2fsource_2eproto::scc_info_Source.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ukm.Source)
}
Source::Source(const Source& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      urls_(from.urls_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  initial_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_initial_url()) {
    initial_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.initial_url_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&previous_same_document_source_id_) -
    reinterpret_cast<char*>(&id_)) + sizeof(previous_same_document_source_id_));
  // @@protoc_insertion_point(copy_constructor:ukm.Source)
}

void Source::SharedCtor() {
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  initial_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&previous_same_document_source_id_) -
      reinterpret_cast<char*>(&id_)) + sizeof(previous_same_document_source_id_));
}

Source::~Source() {
  // @@protoc_insertion_point(destructor:ukm.Source)
  SharedDtor();
}

void Source::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  initial_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Source::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Source& Source::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ukm_2fsource_2eproto::scc_info_Source.base);
  return *internal_default_instance();
}


void Source::Clear() {
// @@protoc_insertion_point(message_clear_start:ukm.Source)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  urls_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      url_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      initial_url_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 252u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&opener_source_id_) -
        reinterpret_cast<char*>(&id_)) + sizeof(opener_source_id_));
  }
  if (cached_has_bits & 1792u) {
    ::memset(&is_same_document_navigation_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&previous_same_document_source_id_) -
        reinterpret_cast<char*>(&is_same_document_navigation_)) + sizeof(previous_same_document_source_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Source::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:ukm.Source)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string url = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 navigation_time_msec = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_navigation_time_msec();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &navigation_time_msec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 first_contentful_paint_msec = 4 [deprecated = true];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_first_contentful_paint_msec();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &first_contentful_paint_msec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string initial_url = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_initial_url()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_custom_tab = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_is_custom_tab();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_custom_tab_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ukm.Source.UrlInfo urls = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_urls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 tab_id = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_tab_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tab_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 previous_source_id = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_previous_source_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &previous_source_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 opener_source_id = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_opener_source_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &opener_source_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_same_document_navigation = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_is_same_document_navigation();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_same_document_navigation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 previous_same_document_source_id = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_previous_same_document_source_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &previous_same_document_source_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ukm.Source)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ukm.Source)
  return false;
#undef DO_
}

void Source::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ukm.Source)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional string url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->url(), output);
  }

  // optional int64 navigation_time_msec = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->navigation_time_msec(), output);
  }

  // optional int64 first_contentful_paint_msec = 4 [deprecated = true];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->first_contentful_paint_msec(), output);
  }

  // optional string initial_url = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->initial_url(), output);
  }

  // optional bool is_custom_tab = 7;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_custom_tab(), output);
  }

  // repeated .ukm.Source.UrlInfo urls = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->urls_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8,
      this->urls(static_cast<int>(i)),
      output);
  }

  // optional int64 tab_id = 10;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->tab_id(), output);
  }

  // optional int64 previous_source_id = 11;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->previous_source_id(), output);
  }

  // optional int64 opener_source_id = 12;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->opener_source_id(), output);
  }

  // optional bool is_same_document_navigation = 13;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->is_same_document_navigation(), output);
  }

  // optional int64 previous_same_document_source_id = 14;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->previous_same_document_source_id(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:ukm.Source)
}

size_t Source::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ukm.Source)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // repeated .ukm.Source.UrlInfo urls = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->urls_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->urls(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string url = 2;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional string initial_url = 6;
    if (has_initial_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->initial_url());
    }

    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional int64 navigation_time_msec = 3;
    if (has_navigation_time_msec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->navigation_time_msec());
    }

    // optional int64 first_contentful_paint_msec = 4 [deprecated = true];
    if (has_first_contentful_paint_msec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->first_contentful_paint_msec());
    }

    // optional int64 tab_id = 10;
    if (has_tab_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->tab_id());
    }

    // optional int64 previous_source_id = 11;
    if (has_previous_source_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->previous_source_id());
    }

    // optional int64 opener_source_id = 12;
    if (has_opener_source_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->opener_source_id());
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional bool is_same_document_navigation = 13;
    if (has_is_same_document_navigation()) {
      total_size += 1 + 1;
    }

    // optional bool is_custom_tab = 7;
    if (has_is_custom_tab()) {
      total_size += 1 + 1;
    }

    // optional int64 previous_same_document_source_id = 14;
    if (has_previous_same_document_source_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->previous_same_document_source_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Source::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Source*>(&from));
}

void Source::MergeFrom(const Source& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ukm.Source)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  urls_.MergeFrom(from.urls_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_initial_url();
      initial_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.initial_url_);
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000008u) {
      navigation_time_msec_ = from.navigation_time_msec_;
    }
    if (cached_has_bits & 0x00000010u) {
      first_contentful_paint_msec_ = from.first_contentful_paint_msec_;
    }
    if (cached_has_bits & 0x00000020u) {
      tab_id_ = from.tab_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      previous_source_id_ = from.previous_source_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      opener_source_id_ = from.opener_source_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      is_same_document_navigation_ = from.is_same_document_navigation_;
    }
    if (cached_has_bits & 0x00000200u) {
      is_custom_tab_ = from.is_custom_tab_;
    }
    if (cached_has_bits & 0x00000400u) {
      previous_same_document_source_id_ = from.previous_same_document_source_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Source::CopyFrom(const Source& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ukm.Source)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Source::IsInitialized() const {
  return true;
}

void Source::Swap(Source* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Source::InternalSwap(Source* other) {
  using std::swap;
  CastToBase(&urls_)->InternalSwap(CastToBase(&other->urls_));
  url_.Swap(&other->url_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  initial_url_.Swap(&other->initial_url_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(navigation_time_msec_, other->navigation_time_msec_);
  swap(first_contentful_paint_msec_, other->first_contentful_paint_msec_);
  swap(tab_id_, other->tab_id_);
  swap(previous_source_id_, other->previous_source_id_);
  swap(opener_source_id_, other->opener_source_id_);
  swap(is_same_document_navigation_, other->is_same_document_navigation_);
  swap(is_custom_tab_, other->is_custom_tab_);
  swap(previous_same_document_source_id_, other->previous_same_document_source_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Source::GetTypeName() const {
  return "ukm.Source";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ukm
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ukm::Source_UrlInfo* Arena::CreateMaybeMessage< ::ukm::Source_UrlInfo >(Arena* arena) {
  return Arena::CreateInternal< ::ukm::Source_UrlInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ukm::Source* Arena::CreateMaybeMessage< ::ukm::Source >(Arena* arena) {
  return Arena::CreateInternal< ::ukm::Source >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
