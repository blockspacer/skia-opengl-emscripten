// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ukm/aggregate.proto

#ifndef PROTOBUF_INCLUDED_ukm_2faggregate_2eproto
#define PROTOBUF_INCLUDED_ukm_2faggregate_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_ukm_2faggregate_2eproto 

namespace protobuf_ukm_2faggregate_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
}  // namespace protobuf_ukm_2faggregate_2eproto
namespace ukm {
class Aggregate;
class AggregateDefaultTypeInternal;
extern AggregateDefaultTypeInternal _Aggregate_default_instance_;
class Aggregate_Metric;
class Aggregate_MetricDefaultTypeInternal;
extern Aggregate_MetricDefaultTypeInternal _Aggregate_Metric_default_instance_;
}  // namespace ukm
namespace google {
namespace protobuf {
template<> ::ukm::Aggregate* Arena::CreateMaybeMessage<::ukm::Aggregate>(Arena*);
template<> ::ukm::Aggregate_Metric* Arena::CreateMaybeMessage<::ukm::Aggregate_Metric>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace ukm {

// ===================================================================

class Aggregate_Metric : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:ukm.Aggregate.Metric) */ {
 public:
  Aggregate_Metric();
  virtual ~Aggregate_Metric();

  Aggregate_Metric(const Aggregate_Metric& from);

  inline Aggregate_Metric& operator=(const Aggregate_Metric& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Aggregate_Metric(Aggregate_Metric&& from) noexcept
    : Aggregate_Metric() {
    *this = ::std::move(from);
  }

  inline Aggregate_Metric& operator=(Aggregate_Metric&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Aggregate_Metric& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Aggregate_Metric* internal_default_instance() {
    return reinterpret_cast<const Aggregate_Metric*>(
               &_Aggregate_Metric_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(Aggregate_Metric* other);
  friend void swap(Aggregate_Metric& a, Aggregate_Metric& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Aggregate_Metric* New() const final {
    return CreateMaybeMessage<Aggregate_Metric>(NULL);
  }

  Aggregate_Metric* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Aggregate_Metric>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const Aggregate_Metric& from);
  void MergeFrom(const Aggregate_Metric& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Aggregate_Metric* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 metric_hash = 1;
  bool has_metric_hash() const;
  void clear_metric_hash();
  static const int kMetricHashFieldNumber = 1;
  ::google::protobuf::uint64 metric_hash() const;
  void set_metric_hash(::google::protobuf::uint64 value);

  // optional double value_sum = 2;
  bool has_value_sum() const;
  void clear_value_sum();
  static const int kValueSumFieldNumber = 2;
  double value_sum() const;
  void set_value_sum(double value);

  // optional double value_square_sum = 3;
  bool has_value_square_sum() const;
  void clear_value_square_sum();
  static const int kValueSquareSumFieldNumber = 3;
  double value_square_sum() const;
  void set_value_square_sum(double value);

  // optional uint64 total_count = 4;
  bool has_total_count() const;
  void clear_total_count();
  static const int kTotalCountFieldNumber = 4;
  ::google::protobuf::uint64 total_count() const;
  void set_total_count(::google::protobuf::uint64 value);

  // optional uint64 dropped_due_to_limits = 5;
  bool has_dropped_due_to_limits() const;
  void clear_dropped_due_to_limits();
  static const int kDroppedDueToLimitsFieldNumber = 5;
  ::google::protobuf::uint64 dropped_due_to_limits() const;
  void set_dropped_due_to_limits(::google::protobuf::uint64 value);

  // optional uint64 dropped_due_to_sampling = 6;
  bool has_dropped_due_to_sampling() const;
  void clear_dropped_due_to_sampling();
  static const int kDroppedDueToSamplingFieldNumber = 6;
  ::google::protobuf::uint64 dropped_due_to_sampling() const;
  void set_dropped_due_to_sampling(::google::protobuf::uint64 value);

  // optional uint64 dropped_due_to_whitelist = 7;
  bool has_dropped_due_to_whitelist() const;
  void clear_dropped_due_to_whitelist();
  static const int kDroppedDueToWhitelistFieldNumber = 7;
  ::google::protobuf::uint64 dropped_due_to_whitelist() const;
  void set_dropped_due_to_whitelist(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:ukm.Aggregate.Metric)
 private:
  void set_has_metric_hash();
  void clear_has_metric_hash();
  void set_has_value_sum();
  void clear_has_value_sum();
  void set_has_value_square_sum();
  void clear_has_value_square_sum();
  void set_has_total_count();
  void clear_has_total_count();
  void set_has_dropped_due_to_limits();
  void clear_has_dropped_due_to_limits();
  void set_has_dropped_due_to_sampling();
  void clear_has_dropped_due_to_sampling();
  void set_has_dropped_due_to_whitelist();
  void clear_has_dropped_due_to_whitelist();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 metric_hash_;
  double value_sum_;
  double value_square_sum_;
  ::google::protobuf::uint64 total_count_;
  ::google::protobuf::uint64 dropped_due_to_limits_;
  ::google::protobuf::uint64 dropped_due_to_sampling_;
  ::google::protobuf::uint64 dropped_due_to_whitelist_;
  friend struct ::protobuf_ukm_2faggregate_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Aggregate : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:ukm.Aggregate) */ {
 public:
  Aggregate();
  virtual ~Aggregate();

  Aggregate(const Aggregate& from);

  inline Aggregate& operator=(const Aggregate& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Aggregate(Aggregate&& from) noexcept
    : Aggregate() {
    *this = ::std::move(from);
  }

  inline Aggregate& operator=(Aggregate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Aggregate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Aggregate* internal_default_instance() {
    return reinterpret_cast<const Aggregate*>(
               &_Aggregate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(Aggregate* other);
  friend void swap(Aggregate& a, Aggregate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Aggregate* New() const final {
    return CreateMaybeMessage<Aggregate>(NULL);
  }

  Aggregate* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Aggregate>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const Aggregate& from);
  void MergeFrom(const Aggregate& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Aggregate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef Aggregate_Metric Metric;

  // accessors -------------------------------------------------------

  // repeated .ukm.Aggregate.Metric metrics = 6;
  int metrics_size() const;
  void clear_metrics();
  static const int kMetricsFieldNumber = 6;
  ::ukm::Aggregate_Metric* mutable_metrics(int index);
  ::google::protobuf::RepeatedPtrField< ::ukm::Aggregate_Metric >*
      mutable_metrics();
  const ::ukm::Aggregate_Metric& metrics(int index) const;
  ::ukm::Aggregate_Metric* add_metrics();
  const ::google::protobuf::RepeatedPtrField< ::ukm::Aggregate_Metric >&
      metrics() const;

  // optional int64 source_id = 1;
  bool has_source_id() const;
  void clear_source_id();
  static const int kSourceIdFieldNumber = 1;
  ::google::protobuf::int64 source_id() const;
  void set_source_id(::google::protobuf::int64 value);

  // optional fixed64 event_hash = 2;
  bool has_event_hash() const;
  void clear_event_hash();
  static const int kEventHashFieldNumber = 2;
  ::google::protobuf::uint64 event_hash() const;
  void set_event_hash(::google::protobuf::uint64 value);

  // optional uint64 total_count = 3;
  bool has_total_count() const;
  void clear_total_count();
  static const int kTotalCountFieldNumber = 3;
  ::google::protobuf::uint64 total_count() const;
  void set_total_count(::google::protobuf::uint64 value);

  // optional uint64 dropped_due_to_limits = 4;
  bool has_dropped_due_to_limits() const;
  void clear_dropped_due_to_limits();
  static const int kDroppedDueToLimitsFieldNumber = 4;
  ::google::protobuf::uint64 dropped_due_to_limits() const;
  void set_dropped_due_to_limits(::google::protobuf::uint64 value);

  // optional uint64 dropped_due_to_sampling = 5;
  bool has_dropped_due_to_sampling() const;
  void clear_dropped_due_to_sampling();
  static const int kDroppedDueToSamplingFieldNumber = 5;
  ::google::protobuf::uint64 dropped_due_to_sampling() const;
  void set_dropped_due_to_sampling(::google::protobuf::uint64 value);

  // optional uint64 dropped_due_to_whitelist = 7;
  bool has_dropped_due_to_whitelist() const;
  void clear_dropped_due_to_whitelist();
  static const int kDroppedDueToWhitelistFieldNumber = 7;
  ::google::protobuf::uint64 dropped_due_to_whitelist() const;
  void set_dropped_due_to_whitelist(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:ukm.Aggregate)
 private:
  void set_has_source_id();
  void clear_has_source_id();
  void set_has_event_hash();
  void clear_has_event_hash();
  void set_has_total_count();
  void clear_has_total_count();
  void set_has_dropped_due_to_limits();
  void clear_has_dropped_due_to_limits();
  void set_has_dropped_due_to_sampling();
  void clear_has_dropped_due_to_sampling();
  void set_has_dropped_due_to_whitelist();
  void clear_has_dropped_due_to_whitelist();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ukm::Aggregate_Metric > metrics_;
  ::google::protobuf::int64 source_id_;
  ::google::protobuf::uint64 event_hash_;
  ::google::protobuf::uint64 total_count_;
  ::google::protobuf::uint64 dropped_due_to_limits_;
  ::google::protobuf::uint64 dropped_due_to_sampling_;
  ::google::protobuf::uint64 dropped_due_to_whitelist_;
  friend struct ::protobuf_ukm_2faggregate_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Aggregate_Metric

// optional fixed64 metric_hash = 1;
inline bool Aggregate_Metric::has_metric_hash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Aggregate_Metric::set_has_metric_hash() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Aggregate_Metric::clear_has_metric_hash() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Aggregate_Metric::clear_metric_hash() {
  metric_hash_ = GOOGLE_ULONGLONG(0);
  clear_has_metric_hash();
}
inline ::google::protobuf::uint64 Aggregate_Metric::metric_hash() const {
  // @@protoc_insertion_point(field_get:ukm.Aggregate.Metric.metric_hash)
  return metric_hash_;
}
inline void Aggregate_Metric::set_metric_hash(::google::protobuf::uint64 value) {
  set_has_metric_hash();
  metric_hash_ = value;
  // @@protoc_insertion_point(field_set:ukm.Aggregate.Metric.metric_hash)
}

// optional double value_sum = 2;
inline bool Aggregate_Metric::has_value_sum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Aggregate_Metric::set_has_value_sum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Aggregate_Metric::clear_has_value_sum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Aggregate_Metric::clear_value_sum() {
  value_sum_ = 0;
  clear_has_value_sum();
}
inline double Aggregate_Metric::value_sum() const {
  // @@protoc_insertion_point(field_get:ukm.Aggregate.Metric.value_sum)
  return value_sum_;
}
inline void Aggregate_Metric::set_value_sum(double value) {
  set_has_value_sum();
  value_sum_ = value;
  // @@protoc_insertion_point(field_set:ukm.Aggregate.Metric.value_sum)
}

// optional double value_square_sum = 3;
inline bool Aggregate_Metric::has_value_square_sum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Aggregate_Metric::set_has_value_square_sum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Aggregate_Metric::clear_has_value_square_sum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Aggregate_Metric::clear_value_square_sum() {
  value_square_sum_ = 0;
  clear_has_value_square_sum();
}
inline double Aggregate_Metric::value_square_sum() const {
  // @@protoc_insertion_point(field_get:ukm.Aggregate.Metric.value_square_sum)
  return value_square_sum_;
}
inline void Aggregate_Metric::set_value_square_sum(double value) {
  set_has_value_square_sum();
  value_square_sum_ = value;
  // @@protoc_insertion_point(field_set:ukm.Aggregate.Metric.value_square_sum)
}

// optional uint64 total_count = 4;
inline bool Aggregate_Metric::has_total_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Aggregate_Metric::set_has_total_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Aggregate_Metric::clear_has_total_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Aggregate_Metric::clear_total_count() {
  total_count_ = GOOGLE_ULONGLONG(0);
  clear_has_total_count();
}
inline ::google::protobuf::uint64 Aggregate_Metric::total_count() const {
  // @@protoc_insertion_point(field_get:ukm.Aggregate.Metric.total_count)
  return total_count_;
}
inline void Aggregate_Metric::set_total_count(::google::protobuf::uint64 value) {
  set_has_total_count();
  total_count_ = value;
  // @@protoc_insertion_point(field_set:ukm.Aggregate.Metric.total_count)
}

// optional uint64 dropped_due_to_limits = 5;
inline bool Aggregate_Metric::has_dropped_due_to_limits() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Aggregate_Metric::set_has_dropped_due_to_limits() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Aggregate_Metric::clear_has_dropped_due_to_limits() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Aggregate_Metric::clear_dropped_due_to_limits() {
  dropped_due_to_limits_ = GOOGLE_ULONGLONG(0);
  clear_has_dropped_due_to_limits();
}
inline ::google::protobuf::uint64 Aggregate_Metric::dropped_due_to_limits() const {
  // @@protoc_insertion_point(field_get:ukm.Aggregate.Metric.dropped_due_to_limits)
  return dropped_due_to_limits_;
}
inline void Aggregate_Metric::set_dropped_due_to_limits(::google::protobuf::uint64 value) {
  set_has_dropped_due_to_limits();
  dropped_due_to_limits_ = value;
  // @@protoc_insertion_point(field_set:ukm.Aggregate.Metric.dropped_due_to_limits)
}

// optional uint64 dropped_due_to_sampling = 6;
inline bool Aggregate_Metric::has_dropped_due_to_sampling() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Aggregate_Metric::set_has_dropped_due_to_sampling() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Aggregate_Metric::clear_has_dropped_due_to_sampling() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Aggregate_Metric::clear_dropped_due_to_sampling() {
  dropped_due_to_sampling_ = GOOGLE_ULONGLONG(0);
  clear_has_dropped_due_to_sampling();
}
inline ::google::protobuf::uint64 Aggregate_Metric::dropped_due_to_sampling() const {
  // @@protoc_insertion_point(field_get:ukm.Aggregate.Metric.dropped_due_to_sampling)
  return dropped_due_to_sampling_;
}
inline void Aggregate_Metric::set_dropped_due_to_sampling(::google::protobuf::uint64 value) {
  set_has_dropped_due_to_sampling();
  dropped_due_to_sampling_ = value;
  // @@protoc_insertion_point(field_set:ukm.Aggregate.Metric.dropped_due_to_sampling)
}

// optional uint64 dropped_due_to_whitelist = 7;
inline bool Aggregate_Metric::has_dropped_due_to_whitelist() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Aggregate_Metric::set_has_dropped_due_to_whitelist() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Aggregate_Metric::clear_has_dropped_due_to_whitelist() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Aggregate_Metric::clear_dropped_due_to_whitelist() {
  dropped_due_to_whitelist_ = GOOGLE_ULONGLONG(0);
  clear_has_dropped_due_to_whitelist();
}
inline ::google::protobuf::uint64 Aggregate_Metric::dropped_due_to_whitelist() const {
  // @@protoc_insertion_point(field_get:ukm.Aggregate.Metric.dropped_due_to_whitelist)
  return dropped_due_to_whitelist_;
}
inline void Aggregate_Metric::set_dropped_due_to_whitelist(::google::protobuf::uint64 value) {
  set_has_dropped_due_to_whitelist();
  dropped_due_to_whitelist_ = value;
  // @@protoc_insertion_point(field_set:ukm.Aggregate.Metric.dropped_due_to_whitelist)
}

// -------------------------------------------------------------------

// Aggregate

// optional int64 source_id = 1;
inline bool Aggregate::has_source_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Aggregate::set_has_source_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Aggregate::clear_has_source_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Aggregate::clear_source_id() {
  source_id_ = GOOGLE_LONGLONG(0);
  clear_has_source_id();
}
inline ::google::protobuf::int64 Aggregate::source_id() const {
  // @@protoc_insertion_point(field_get:ukm.Aggregate.source_id)
  return source_id_;
}
inline void Aggregate::set_source_id(::google::protobuf::int64 value) {
  set_has_source_id();
  source_id_ = value;
  // @@protoc_insertion_point(field_set:ukm.Aggregate.source_id)
}

// optional fixed64 event_hash = 2;
inline bool Aggregate::has_event_hash() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Aggregate::set_has_event_hash() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Aggregate::clear_has_event_hash() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Aggregate::clear_event_hash() {
  event_hash_ = GOOGLE_ULONGLONG(0);
  clear_has_event_hash();
}
inline ::google::protobuf::uint64 Aggregate::event_hash() const {
  // @@protoc_insertion_point(field_get:ukm.Aggregate.event_hash)
  return event_hash_;
}
inline void Aggregate::set_event_hash(::google::protobuf::uint64 value) {
  set_has_event_hash();
  event_hash_ = value;
  // @@protoc_insertion_point(field_set:ukm.Aggregate.event_hash)
}

// optional uint64 total_count = 3;
inline bool Aggregate::has_total_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Aggregate::set_has_total_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Aggregate::clear_has_total_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Aggregate::clear_total_count() {
  total_count_ = GOOGLE_ULONGLONG(0);
  clear_has_total_count();
}
inline ::google::protobuf::uint64 Aggregate::total_count() const {
  // @@protoc_insertion_point(field_get:ukm.Aggregate.total_count)
  return total_count_;
}
inline void Aggregate::set_total_count(::google::protobuf::uint64 value) {
  set_has_total_count();
  total_count_ = value;
  // @@protoc_insertion_point(field_set:ukm.Aggregate.total_count)
}

// optional uint64 dropped_due_to_limits = 4;
inline bool Aggregate::has_dropped_due_to_limits() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Aggregate::set_has_dropped_due_to_limits() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Aggregate::clear_has_dropped_due_to_limits() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Aggregate::clear_dropped_due_to_limits() {
  dropped_due_to_limits_ = GOOGLE_ULONGLONG(0);
  clear_has_dropped_due_to_limits();
}
inline ::google::protobuf::uint64 Aggregate::dropped_due_to_limits() const {
  // @@protoc_insertion_point(field_get:ukm.Aggregate.dropped_due_to_limits)
  return dropped_due_to_limits_;
}
inline void Aggregate::set_dropped_due_to_limits(::google::protobuf::uint64 value) {
  set_has_dropped_due_to_limits();
  dropped_due_to_limits_ = value;
  // @@protoc_insertion_point(field_set:ukm.Aggregate.dropped_due_to_limits)
}

// optional uint64 dropped_due_to_sampling = 5;
inline bool Aggregate::has_dropped_due_to_sampling() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Aggregate::set_has_dropped_due_to_sampling() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Aggregate::clear_has_dropped_due_to_sampling() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Aggregate::clear_dropped_due_to_sampling() {
  dropped_due_to_sampling_ = GOOGLE_ULONGLONG(0);
  clear_has_dropped_due_to_sampling();
}
inline ::google::protobuf::uint64 Aggregate::dropped_due_to_sampling() const {
  // @@protoc_insertion_point(field_get:ukm.Aggregate.dropped_due_to_sampling)
  return dropped_due_to_sampling_;
}
inline void Aggregate::set_dropped_due_to_sampling(::google::protobuf::uint64 value) {
  set_has_dropped_due_to_sampling();
  dropped_due_to_sampling_ = value;
  // @@protoc_insertion_point(field_set:ukm.Aggregate.dropped_due_to_sampling)
}

// optional uint64 dropped_due_to_whitelist = 7;
inline bool Aggregate::has_dropped_due_to_whitelist() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Aggregate::set_has_dropped_due_to_whitelist() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Aggregate::clear_has_dropped_due_to_whitelist() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Aggregate::clear_dropped_due_to_whitelist() {
  dropped_due_to_whitelist_ = GOOGLE_ULONGLONG(0);
  clear_has_dropped_due_to_whitelist();
}
inline ::google::protobuf::uint64 Aggregate::dropped_due_to_whitelist() const {
  // @@protoc_insertion_point(field_get:ukm.Aggregate.dropped_due_to_whitelist)
  return dropped_due_to_whitelist_;
}
inline void Aggregate::set_dropped_due_to_whitelist(::google::protobuf::uint64 value) {
  set_has_dropped_due_to_whitelist();
  dropped_due_to_whitelist_ = value;
  // @@protoc_insertion_point(field_set:ukm.Aggregate.dropped_due_to_whitelist)
}

// repeated .ukm.Aggregate.Metric metrics = 6;
inline int Aggregate::metrics_size() const {
  return metrics_.size();
}
inline void Aggregate::clear_metrics() {
  metrics_.Clear();
}
inline ::ukm::Aggregate_Metric* Aggregate::mutable_metrics(int index) {
  // @@protoc_insertion_point(field_mutable:ukm.Aggregate.metrics)
  return metrics_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ukm::Aggregate_Metric >*
Aggregate::mutable_metrics() {
  // @@protoc_insertion_point(field_mutable_list:ukm.Aggregate.metrics)
  return &metrics_;
}
inline const ::ukm::Aggregate_Metric& Aggregate::metrics(int index) const {
  // @@protoc_insertion_point(field_get:ukm.Aggregate.metrics)
  return metrics_.Get(index);
}
inline ::ukm::Aggregate_Metric* Aggregate::add_metrics() {
  // @@protoc_insertion_point(field_add:ukm.Aggregate.metrics)
  return metrics_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ukm::Aggregate_Metric >&
Aggregate::metrics() const {
  // @@protoc_insertion_point(field_list:ukm.Aggregate.metrics)
  return metrics_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ukm

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_ukm_2faggregate_2eproto
