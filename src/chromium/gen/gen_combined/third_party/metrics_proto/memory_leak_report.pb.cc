// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: memory_leak_report.proto

#include "memory_leak_report.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_memory_5fleak_5freport_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_memory_5fleak_5freport_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_MemoryLeakReportProto_AllocationBreakdown;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_memory_5fleak_5freport_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_MemoryLeakReportProto_MemoryUsageInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_memory_5fleak_5freport_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_MemoryLeakReportProto_Params;
}  // namespace protobuf_memory_5fleak_5freport_2eproto
namespace metrics {
class MemoryLeakReportProto_ParamsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MemoryLeakReportProto_Params>
      _instance;
} _MemoryLeakReportProto_Params_default_instance_;
class MemoryLeakReportProto_AllocationBreakdownDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MemoryLeakReportProto_AllocationBreakdown>
      _instance;
} _MemoryLeakReportProto_AllocationBreakdown_default_instance_;
class MemoryLeakReportProto_MemoryUsageInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MemoryLeakReportProto_MemoryUsageInfo>
      _instance;
} _MemoryLeakReportProto_MemoryUsageInfo_default_instance_;
class MemoryLeakReportProtoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MemoryLeakReportProto>
      _instance;
} _MemoryLeakReportProto_default_instance_;
}  // namespace metrics
namespace protobuf_memory_5fleak_5freport_2eproto {
static void InitDefaultsMemoryLeakReportProto_Params() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metrics::_MemoryLeakReportProto_Params_default_instance_;
    new (ptr) ::metrics::MemoryLeakReportProto_Params();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metrics::MemoryLeakReportProto_Params::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MemoryLeakReportProto_Params =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMemoryLeakReportProto_Params}, {}};

static void InitDefaultsMemoryLeakReportProto_AllocationBreakdown() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metrics::_MemoryLeakReportProto_AllocationBreakdown_default_instance_;
    new (ptr) ::metrics::MemoryLeakReportProto_AllocationBreakdown();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metrics::MemoryLeakReportProto_AllocationBreakdown::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MemoryLeakReportProto_AllocationBreakdown =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMemoryLeakReportProto_AllocationBreakdown}, {}};

static void InitDefaultsMemoryLeakReportProto_MemoryUsageInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metrics::_MemoryLeakReportProto_MemoryUsageInfo_default_instance_;
    new (ptr) ::metrics::MemoryLeakReportProto_MemoryUsageInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metrics::MemoryLeakReportProto_MemoryUsageInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MemoryLeakReportProto_MemoryUsageInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMemoryLeakReportProto_MemoryUsageInfo}, {}};

static void InitDefaultsMemoryLeakReportProto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metrics::_MemoryLeakReportProto_default_instance_;
    new (ptr) ::metrics::MemoryLeakReportProto();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metrics::MemoryLeakReportProto::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_MemoryLeakReportProto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsMemoryLeakReportProto}, {
      &protobuf_memory_5fleak_5freport_2eproto::scc_info_MemoryLeakReportProto_Params.base,
      &protobuf_memory_5fleak_5freport_2eproto::scc_info_MemoryLeakReportProto_AllocationBreakdown.base,
      &protobuf_memory_5fleak_5freport_2eproto::scc_info_MemoryLeakReportProto_MemoryUsageInfo.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_MemoryLeakReportProto_Params.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MemoryLeakReportProto_AllocationBreakdown.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MemoryLeakReportProto_MemoryUsageInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MemoryLeakReportProto.base);
}

}  // namespace protobuf_memory_5fleak_5freport_2eproto
namespace metrics {
bool MemoryLeakReportProto_ProcessType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const MemoryLeakReportProto_ProcessType MemoryLeakReportProto::UNKNOWN_PROCESS;
const MemoryLeakReportProto_ProcessType MemoryLeakReportProto::BROWSER_PROCESS;
const MemoryLeakReportProto_ProcessType MemoryLeakReportProto::RENDERER_PROCESS;
const MemoryLeakReportProto_ProcessType MemoryLeakReportProto::ProcessType_MIN;
const MemoryLeakReportProto_ProcessType MemoryLeakReportProto::ProcessType_MAX;
const int MemoryLeakReportProto::ProcessType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void MemoryLeakReportProto_Params::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MemoryLeakReportProto_Params::kSamplingRateFieldNumber;
const int MemoryLeakReportProto_Params::kMaxStackDepthFieldNumber;
const int MemoryLeakReportProto_Params::kAnalysisIntervalBytesFieldNumber;
const int MemoryLeakReportProto_Params::kSizeSuspicionThresholdFieldNumber;
const int MemoryLeakReportProto_Params::kCallStackSuspicionThresholdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MemoryLeakReportProto_Params::MemoryLeakReportProto_Params()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_memory_5fleak_5freport_2eproto::scc_info_MemoryLeakReportProto_Params.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.MemoryLeakReportProto.Params)
}
MemoryLeakReportProto_Params::MemoryLeakReportProto_Params(const MemoryLeakReportProto_Params& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&sampling_rate_, &from.sampling_rate_,
    static_cast<size_t>(reinterpret_cast<char*>(&call_stack_suspicion_threshold_) -
    reinterpret_cast<char*>(&sampling_rate_)) + sizeof(call_stack_suspicion_threshold_));
  // @@protoc_insertion_point(copy_constructor:metrics.MemoryLeakReportProto.Params)
}

void MemoryLeakReportProto_Params::SharedCtor() {
  ::memset(&sampling_rate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&call_stack_suspicion_threshold_) -
      reinterpret_cast<char*>(&sampling_rate_)) + sizeof(call_stack_suspicion_threshold_));
}

MemoryLeakReportProto_Params::~MemoryLeakReportProto_Params() {
  // @@protoc_insertion_point(destructor:metrics.MemoryLeakReportProto.Params)
  SharedDtor();
}

void MemoryLeakReportProto_Params::SharedDtor() {
}

void MemoryLeakReportProto_Params::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MemoryLeakReportProto_Params& MemoryLeakReportProto_Params::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_memory_5fleak_5freport_2eproto::scc_info_MemoryLeakReportProto_Params.base);
  return *internal_default_instance();
}


void MemoryLeakReportProto_Params::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.MemoryLeakReportProto.Params)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    ::memset(&sampling_rate_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&call_stack_suspicion_threshold_) -
        reinterpret_cast<char*>(&sampling_rate_)) + sizeof(call_stack_suspicion_threshold_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MemoryLeakReportProto_Params::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:metrics.MemoryLeakReportProto.Params)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float sampling_rate = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_sampling_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sampling_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_stack_depth = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_max_stack_depth();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_stack_depth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 analysis_interval_bytes = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_analysis_interval_bytes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &analysis_interval_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 size_suspicion_threshold = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_size_suspicion_threshold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &size_suspicion_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 call_stack_suspicion_threshold = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_call_stack_suspicion_threshold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &call_stack_suspicion_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.MemoryLeakReportProto.Params)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.MemoryLeakReportProto.Params)
  return false;
#undef DO_
}

void MemoryLeakReportProto_Params::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.MemoryLeakReportProto.Params)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float sampling_rate = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->sampling_rate(), output);
  }

  // optional uint32 max_stack_depth = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->max_stack_depth(), output);
  }

  // optional uint64 analysis_interval_bytes = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->analysis_interval_bytes(), output);
  }

  // optional uint32 size_suspicion_threshold = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->size_suspicion_threshold(), output);
  }

  // optional uint32 call_stack_suspicion_threshold = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->call_stack_suspicion_threshold(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:metrics.MemoryLeakReportProto.Params)
}

size_t MemoryLeakReportProto_Params::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.MemoryLeakReportProto.Params)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 31u) {
    // optional float sampling_rate = 1;
    if (has_sampling_rate()) {
      total_size += 1 + 4;
    }

    // optional uint32 max_stack_depth = 2;
    if (has_max_stack_depth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_stack_depth());
    }

    // optional uint64 analysis_interval_bytes = 3;
    if (has_analysis_interval_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->analysis_interval_bytes());
    }

    // optional uint32 size_suspicion_threshold = 4;
    if (has_size_suspicion_threshold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->size_suspicion_threshold());
    }

    // optional uint32 call_stack_suspicion_threshold = 5;
    if (has_call_stack_suspicion_threshold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->call_stack_suspicion_threshold());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MemoryLeakReportProto_Params::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MemoryLeakReportProto_Params*>(&from));
}

void MemoryLeakReportProto_Params::MergeFrom(const MemoryLeakReportProto_Params& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.MemoryLeakReportProto.Params)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      sampling_rate_ = from.sampling_rate_;
    }
    if (cached_has_bits & 0x00000002u) {
      max_stack_depth_ = from.max_stack_depth_;
    }
    if (cached_has_bits & 0x00000004u) {
      analysis_interval_bytes_ = from.analysis_interval_bytes_;
    }
    if (cached_has_bits & 0x00000008u) {
      size_suspicion_threshold_ = from.size_suspicion_threshold_;
    }
    if (cached_has_bits & 0x00000010u) {
      call_stack_suspicion_threshold_ = from.call_stack_suspicion_threshold_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MemoryLeakReportProto_Params::CopyFrom(const MemoryLeakReportProto_Params& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.MemoryLeakReportProto.Params)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemoryLeakReportProto_Params::IsInitialized() const {
  return true;
}

void MemoryLeakReportProto_Params::Swap(MemoryLeakReportProto_Params* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MemoryLeakReportProto_Params::InternalSwap(MemoryLeakReportProto_Params* other) {
  using std::swap;
  swap(sampling_rate_, other->sampling_rate_);
  swap(max_stack_depth_, other->max_stack_depth_);
  swap(analysis_interval_bytes_, other->analysis_interval_bytes_);
  swap(size_suspicion_threshold_, other->size_suspicion_threshold_);
  swap(call_stack_suspicion_threshold_, other->call_stack_suspicion_threshold_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string MemoryLeakReportProto_Params::GetTypeName() const {
  return "metrics.MemoryLeakReportProto.Params";
}


// ===================================================================

void MemoryLeakReportProto_AllocationBreakdown::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MemoryLeakReportProto_AllocationBreakdown::kCountsBySizeFieldNumber;
const int MemoryLeakReportProto_AllocationBreakdown::kCountForCallStackFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MemoryLeakReportProto_AllocationBreakdown::MemoryLeakReportProto_AllocationBreakdown()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_memory_5fleak_5freport_2eproto::scc_info_MemoryLeakReportProto_AllocationBreakdown.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.MemoryLeakReportProto.AllocationBreakdown)
}
MemoryLeakReportProto_AllocationBreakdown::MemoryLeakReportProto_AllocationBreakdown(const MemoryLeakReportProto_AllocationBreakdown& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      counts_by_size_(from.counts_by_size_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  count_for_call_stack_ = from.count_for_call_stack_;
  // @@protoc_insertion_point(copy_constructor:metrics.MemoryLeakReportProto.AllocationBreakdown)
}

void MemoryLeakReportProto_AllocationBreakdown::SharedCtor() {
  count_for_call_stack_ = 0u;
}

MemoryLeakReportProto_AllocationBreakdown::~MemoryLeakReportProto_AllocationBreakdown() {
  // @@protoc_insertion_point(destructor:metrics.MemoryLeakReportProto.AllocationBreakdown)
  SharedDtor();
}

void MemoryLeakReportProto_AllocationBreakdown::SharedDtor() {
}

void MemoryLeakReportProto_AllocationBreakdown::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MemoryLeakReportProto_AllocationBreakdown& MemoryLeakReportProto_AllocationBreakdown::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_memory_5fleak_5freport_2eproto::scc_info_MemoryLeakReportProto_AllocationBreakdown.base);
  return *internal_default_instance();
}


void MemoryLeakReportProto_AllocationBreakdown::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.MemoryLeakReportProto.AllocationBreakdown)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  counts_by_size_.Clear();
  count_for_call_stack_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MemoryLeakReportProto_AllocationBreakdown::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:metrics.MemoryLeakReportProto.AllocationBreakdown)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 counts_by_size = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8u, input, this->mutable_counts_by_size())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_counts_by_size())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 count_for_call_stack = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_count_for_call_stack();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_for_call_stack_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.MemoryLeakReportProto.AllocationBreakdown)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.MemoryLeakReportProto.AllocationBreakdown)
  return false;
#undef DO_
}

void MemoryLeakReportProto_AllocationBreakdown::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.MemoryLeakReportProto.AllocationBreakdown)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 counts_by_size = 1;
  for (int i = 0, n = this->counts_by_size_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->counts_by_size(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 count_for_call_stack = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count_for_call_stack(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:metrics.MemoryLeakReportProto.AllocationBreakdown)
}

size_t MemoryLeakReportProto_AllocationBreakdown::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.MemoryLeakReportProto.AllocationBreakdown)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // repeated uint32 counts_by_size = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->counts_by_size_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->counts_by_size_size());
    total_size += data_size;
  }

  // optional uint32 count_for_call_stack = 2;
  if (has_count_for_call_stack()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count_for_call_stack());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MemoryLeakReportProto_AllocationBreakdown::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MemoryLeakReportProto_AllocationBreakdown*>(&from));
}

void MemoryLeakReportProto_AllocationBreakdown::MergeFrom(const MemoryLeakReportProto_AllocationBreakdown& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.MemoryLeakReportProto.AllocationBreakdown)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  counts_by_size_.MergeFrom(from.counts_by_size_);
  if (from.has_count_for_call_stack()) {
    set_count_for_call_stack(from.count_for_call_stack());
  }
}

void MemoryLeakReportProto_AllocationBreakdown::CopyFrom(const MemoryLeakReportProto_AllocationBreakdown& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.MemoryLeakReportProto.AllocationBreakdown)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemoryLeakReportProto_AllocationBreakdown::IsInitialized() const {
  return true;
}

void MemoryLeakReportProto_AllocationBreakdown::Swap(MemoryLeakReportProto_AllocationBreakdown* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MemoryLeakReportProto_AllocationBreakdown::InternalSwap(MemoryLeakReportProto_AllocationBreakdown* other) {
  using std::swap;
  counts_by_size_.InternalSwap(&other->counts_by_size_);
  swap(count_for_call_stack_, other->count_for_call_stack_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string MemoryLeakReportProto_AllocationBreakdown::GetTypeName() const {
  return "metrics.MemoryLeakReportProto.AllocationBreakdown";
}


// ===================================================================

void MemoryLeakReportProto_MemoryUsageInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MemoryLeakReportProto_MemoryUsageInfo::kAvailableRamMbFieldNumber;
const int MemoryLeakReportProto_MemoryUsageInfo::kChromeRamUsageMbFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MemoryLeakReportProto_MemoryUsageInfo::MemoryLeakReportProto_MemoryUsageInfo()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_memory_5fleak_5freport_2eproto::scc_info_MemoryLeakReportProto_MemoryUsageInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.MemoryLeakReportProto.MemoryUsageInfo)
}
MemoryLeakReportProto_MemoryUsageInfo::MemoryLeakReportProto_MemoryUsageInfo(const MemoryLeakReportProto_MemoryUsageInfo& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&available_ram_mb_, &from.available_ram_mb_,
    static_cast<size_t>(reinterpret_cast<char*>(&chrome_ram_usage_mb_) -
    reinterpret_cast<char*>(&available_ram_mb_)) + sizeof(chrome_ram_usage_mb_));
  // @@protoc_insertion_point(copy_constructor:metrics.MemoryLeakReportProto.MemoryUsageInfo)
}

void MemoryLeakReportProto_MemoryUsageInfo::SharedCtor() {
  ::memset(&available_ram_mb_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chrome_ram_usage_mb_) -
      reinterpret_cast<char*>(&available_ram_mb_)) + sizeof(chrome_ram_usage_mb_));
}

MemoryLeakReportProto_MemoryUsageInfo::~MemoryLeakReportProto_MemoryUsageInfo() {
  // @@protoc_insertion_point(destructor:metrics.MemoryLeakReportProto.MemoryUsageInfo)
  SharedDtor();
}

void MemoryLeakReportProto_MemoryUsageInfo::SharedDtor() {
}

void MemoryLeakReportProto_MemoryUsageInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MemoryLeakReportProto_MemoryUsageInfo& MemoryLeakReportProto_MemoryUsageInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_memory_5fleak_5freport_2eproto::scc_info_MemoryLeakReportProto_MemoryUsageInfo.base);
  return *internal_default_instance();
}


void MemoryLeakReportProto_MemoryUsageInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.MemoryLeakReportProto.MemoryUsageInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&available_ram_mb_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&chrome_ram_usage_mb_) -
        reinterpret_cast<char*>(&available_ram_mb_)) + sizeof(chrome_ram_usage_mb_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MemoryLeakReportProto_MemoryUsageInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:metrics.MemoryLeakReportProto.MemoryUsageInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 available_ram_mb = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_available_ram_mb();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &available_ram_mb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 chrome_ram_usage_mb = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_chrome_ram_usage_mb();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chrome_ram_usage_mb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.MemoryLeakReportProto.MemoryUsageInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.MemoryLeakReportProto.MemoryUsageInfo)
  return false;
#undef DO_
}

void MemoryLeakReportProto_MemoryUsageInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.MemoryLeakReportProto.MemoryUsageInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 available_ram_mb = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->available_ram_mb(), output);
  }

  // optional uint64 chrome_ram_usage_mb = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->chrome_ram_usage_mb(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:metrics.MemoryLeakReportProto.MemoryUsageInfo)
}

size_t MemoryLeakReportProto_MemoryUsageInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.MemoryLeakReportProto.MemoryUsageInfo)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 available_ram_mb = 1;
    if (has_available_ram_mb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->available_ram_mb());
    }

    // optional uint64 chrome_ram_usage_mb = 2;
    if (has_chrome_ram_usage_mb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->chrome_ram_usage_mb());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MemoryLeakReportProto_MemoryUsageInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MemoryLeakReportProto_MemoryUsageInfo*>(&from));
}

void MemoryLeakReportProto_MemoryUsageInfo::MergeFrom(const MemoryLeakReportProto_MemoryUsageInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.MemoryLeakReportProto.MemoryUsageInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      available_ram_mb_ = from.available_ram_mb_;
    }
    if (cached_has_bits & 0x00000002u) {
      chrome_ram_usage_mb_ = from.chrome_ram_usage_mb_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MemoryLeakReportProto_MemoryUsageInfo::CopyFrom(const MemoryLeakReportProto_MemoryUsageInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.MemoryLeakReportProto.MemoryUsageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemoryLeakReportProto_MemoryUsageInfo::IsInitialized() const {
  return true;
}

void MemoryLeakReportProto_MemoryUsageInfo::Swap(MemoryLeakReportProto_MemoryUsageInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MemoryLeakReportProto_MemoryUsageInfo::InternalSwap(MemoryLeakReportProto_MemoryUsageInfo* other) {
  using std::swap;
  swap(available_ram_mb_, other->available_ram_mb_);
  swap(chrome_ram_usage_mb_, other->chrome_ram_usage_mb_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string MemoryLeakReportProto_MemoryUsageInfo::GetTypeName() const {
  return "metrics.MemoryLeakReportProto.MemoryUsageInfo";
}


// ===================================================================

void MemoryLeakReportProto::InitAsDefaultInstance() {
  ::metrics::_MemoryLeakReportProto_default_instance_._instance.get_mutable()->params_ = const_cast< ::metrics::MemoryLeakReportProto_Params*>(
      ::metrics::MemoryLeakReportProto_Params::internal_default_instance());
  ::metrics::_MemoryLeakReportProto_default_instance_._instance.get_mutable()->memory_usage_info_ = const_cast< ::metrics::MemoryLeakReportProto_MemoryUsageInfo*>(
      ::metrics::MemoryLeakReportProto_MemoryUsageInfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MemoryLeakReportProto::kCallStackFieldNumber;
const int MemoryLeakReportProto::kSizeBytesFieldNumber;
const int MemoryLeakReportProto::kParamsFieldNumber;
const int MemoryLeakReportProto::kSourceProcessFieldNumber;
const int MemoryLeakReportProto::kBuildIdFieldNumber;
const int MemoryLeakReportProto::kAllocBreakdownHistoryFieldNumber;
const int MemoryLeakReportProto::kNumRisingIntervalsFieldNumber;
const int MemoryLeakReportProto::kNumAllocsIncreaseFieldNumber;
const int MemoryLeakReportProto::kMemoryUsageInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MemoryLeakReportProto::MemoryLeakReportProto()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_memory_5fleak_5freport_2eproto::scc_info_MemoryLeakReportProto.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.MemoryLeakReportProto)
}
MemoryLeakReportProto::MemoryLeakReportProto(const MemoryLeakReportProto& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      call_stack_(from.call_stack_),
      alloc_breakdown_history_(from.alloc_breakdown_history_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  build_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_build_id()) {
    build_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.build_id_);
  }
  if (from.has_params()) {
    params_ = new ::metrics::MemoryLeakReportProto_Params(*from.params_);
  } else {
    params_ = NULL;
  }
  if (from.has_memory_usage_info()) {
    memory_usage_info_ = new ::metrics::MemoryLeakReportProto_MemoryUsageInfo(*from.memory_usage_info_);
  } else {
    memory_usage_info_ = NULL;
  }
  ::memcpy(&size_bytes_, &from.size_bytes_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_allocs_increase_) -
    reinterpret_cast<char*>(&size_bytes_)) + sizeof(num_allocs_increase_));
  // @@protoc_insertion_point(copy_constructor:metrics.MemoryLeakReportProto)
}

void MemoryLeakReportProto::SharedCtor() {
  build_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&params_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_allocs_increase_) -
      reinterpret_cast<char*>(&params_)) + sizeof(num_allocs_increase_));
}

MemoryLeakReportProto::~MemoryLeakReportProto() {
  // @@protoc_insertion_point(destructor:metrics.MemoryLeakReportProto)
  SharedDtor();
}

void MemoryLeakReportProto::SharedDtor() {
  build_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete params_;
  if (this != internal_default_instance()) delete memory_usage_info_;
}

void MemoryLeakReportProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MemoryLeakReportProto& MemoryLeakReportProto::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_memory_5fleak_5freport_2eproto::scc_info_MemoryLeakReportProto.base);
  return *internal_default_instance();
}


void MemoryLeakReportProto::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.MemoryLeakReportProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  call_stack_.Clear();
  alloc_breakdown_history_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      build_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(params_ != NULL);
      params_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(memory_usage_info_ != NULL);
      memory_usage_info_->Clear();
    }
  }
  if (cached_has_bits & 120u) {
    ::memset(&size_bytes_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_allocs_increase_) -
        reinterpret_cast<char*>(&size_bytes_)) + sizeof(num_allocs_increase_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MemoryLeakReportProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:metrics.MemoryLeakReportProto)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 call_stack = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8u, input, this->mutable_call_stack())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_call_stack())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 size_bytes = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_size_bytes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &size_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .metrics.MemoryLeakReportProto.Params params = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .metrics.MemoryLeakReportProto.AllocationBreakdown alloc_breakdown_history = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_alloc_breakdown_history()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .metrics.MemoryLeakReportProto.ProcessType source_process = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::metrics::MemoryLeakReportProto_ProcessType_IsValid(value)) {
            set_source_process(static_cast< ::metrics::MemoryLeakReportProto_ProcessType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(40u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes build_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_build_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 num_rising_intervals = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_num_rising_intervals();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_rising_intervals_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 num_allocs_increase = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_num_allocs_increase();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_allocs_increase_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .metrics.MemoryLeakReportProto.MemoryUsageInfo memory_usage_info = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_memory_usage_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.MemoryLeakReportProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.MemoryLeakReportProto)
  return false;
#undef DO_
}

void MemoryLeakReportProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.MemoryLeakReportProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 call_stack = 1;
  for (int i = 0, n = this->call_stack_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->call_stack(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 size_bytes = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->size_bytes(), output);
  }

  // optional .metrics.MemoryLeakReportProto.Params params = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->_internal_params(), output);
  }

  // repeated .metrics.MemoryLeakReportProto.AllocationBreakdown alloc_breakdown_history = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->alloc_breakdown_history_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4,
      this->alloc_breakdown_history(static_cast<int>(i)),
      output);
  }

  // optional .metrics.MemoryLeakReportProto.ProcessType source_process = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->source_process(), output);
  }

  // optional bytes build_id = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->build_id(), output);
  }

  // optional uint32 num_rising_intervals = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->num_rising_intervals(), output);
  }

  // optional uint32 num_allocs_increase = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->num_allocs_increase(), output);
  }

  // optional .metrics.MemoryLeakReportProto.MemoryUsageInfo memory_usage_info = 9;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, this->_internal_memory_usage_info(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:metrics.MemoryLeakReportProto)
}

size_t MemoryLeakReportProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.MemoryLeakReportProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // repeated uint64 call_stack = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->call_stack_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->call_stack_size());
    total_size += data_size;
  }

  // repeated .metrics.MemoryLeakReportProto.AllocationBreakdown alloc_breakdown_history = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->alloc_breakdown_history_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->alloc_breakdown_history(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 127u) {
    // optional bytes build_id = 6;
    if (has_build_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->build_id());
    }

    // optional .metrics.MemoryLeakReportProto.Params params = 3;
    if (has_params()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *params_);
    }

    // optional .metrics.MemoryLeakReportProto.MemoryUsageInfo memory_usage_info = 9;
    if (has_memory_usage_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *memory_usage_info_);
    }

    // optional uint32 size_bytes = 2;
    if (has_size_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->size_bytes());
    }

    // optional .metrics.MemoryLeakReportProto.ProcessType source_process = 5;
    if (has_source_process()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->source_process());
    }

    // optional uint32 num_rising_intervals = 7;
    if (has_num_rising_intervals()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_rising_intervals());
    }

    // optional uint32 num_allocs_increase = 8;
    if (has_num_allocs_increase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_allocs_increase());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MemoryLeakReportProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MemoryLeakReportProto*>(&from));
}

void MemoryLeakReportProto::MergeFrom(const MemoryLeakReportProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.MemoryLeakReportProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  call_stack_.MergeFrom(from.call_stack_);
  alloc_breakdown_history_.MergeFrom(from.alloc_breakdown_history_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_build_id();
      build_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.build_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_params()->::metrics::MemoryLeakReportProto_Params::MergeFrom(from.params());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_memory_usage_info()->::metrics::MemoryLeakReportProto_MemoryUsageInfo::MergeFrom(from.memory_usage_info());
    }
    if (cached_has_bits & 0x00000008u) {
      size_bytes_ = from.size_bytes_;
    }
    if (cached_has_bits & 0x00000010u) {
      source_process_ = from.source_process_;
    }
    if (cached_has_bits & 0x00000020u) {
      num_rising_intervals_ = from.num_rising_intervals_;
    }
    if (cached_has_bits & 0x00000040u) {
      num_allocs_increase_ = from.num_allocs_increase_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MemoryLeakReportProto::CopyFrom(const MemoryLeakReportProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.MemoryLeakReportProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemoryLeakReportProto::IsInitialized() const {
  return true;
}

void MemoryLeakReportProto::Swap(MemoryLeakReportProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MemoryLeakReportProto::InternalSwap(MemoryLeakReportProto* other) {
  using std::swap;
  call_stack_.InternalSwap(&other->call_stack_);
  CastToBase(&alloc_breakdown_history_)->InternalSwap(CastToBase(&other->alloc_breakdown_history_));
  build_id_.Swap(&other->build_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(params_, other->params_);
  swap(memory_usage_info_, other->memory_usage_info_);
  swap(size_bytes_, other->size_bytes_);
  swap(source_process_, other->source_process_);
  swap(num_rising_intervals_, other->num_rising_intervals_);
  swap(num_allocs_increase_, other->num_allocs_increase_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string MemoryLeakReportProto::GetTypeName() const {
  return "metrics.MemoryLeakReportProto";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace metrics
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metrics::MemoryLeakReportProto_Params* Arena::CreateMaybeMessage< ::metrics::MemoryLeakReportProto_Params >(Arena* arena) {
  return Arena::CreateInternal< ::metrics::MemoryLeakReportProto_Params >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metrics::MemoryLeakReportProto_AllocationBreakdown* Arena::CreateMaybeMessage< ::metrics::MemoryLeakReportProto_AllocationBreakdown >(Arena* arena) {
  return Arena::CreateInternal< ::metrics::MemoryLeakReportProto_AllocationBreakdown >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metrics::MemoryLeakReportProto_MemoryUsageInfo* Arena::CreateMaybeMessage< ::metrics::MemoryLeakReportProto_MemoryUsageInfo >(Arena* arena) {
  return Arena::CreateInternal< ::metrics::MemoryLeakReportProto_MemoryUsageInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metrics::MemoryLeakReportProto* Arena::CreateMaybeMessage< ::metrics::MemoryLeakReportProto >(Arena* arena) {
  return Arena::CreateInternal< ::metrics::MemoryLeakReportProto >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
