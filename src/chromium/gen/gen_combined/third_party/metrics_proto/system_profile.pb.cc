// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: system_profile.proto

#include "system_profile.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_extension_5finstall_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_extension_5finstall_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ExtensionInstallProto;
}  // namespace protobuf_extension_5finstall_2eproto
namespace protobuf_system_5fprofile_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_system_5fprofile_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SystemProfileProto_AntiVirusProduct;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_system_5fprofile_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SystemProfileProto_ChromeComponent;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_system_5fprofile_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SystemProfileProto_ExternalAccessPoint;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_system_5fprofile_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SystemProfileProto_ExternalAudioVideoDevice_AudioDescription;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_system_5fprofile_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SystemProfileProto_ExternalAudioVideoDevice_CECCommand;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_system_5fprofile_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SystemProfileProto_FieldTrial;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_system_5fprofile_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SystemProfileProto_GoogleUpdate_ProductInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_system_5fprofile_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SystemProfileProto_Hardware_Bluetooth_PairedDevice;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_system_5fprofile_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SystemProfileProto_Hardware_CPU;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_system_5fprofile_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SystemProfileProto_Hardware_DeprecatedTouchScreen;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_system_5fprofile_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SystemProfileProto_Hardware_Drive;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_system_5fprofile_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SystemProfileProto_Hardware_Graphics;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_system_5fprofile_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SystemProfileProto_LinkedAndroidPhoneData;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_system_5fprofile_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SystemProfileProto_Network_WifiAccessPoint_VendorInformation;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_system_5fprofile_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SystemProfileProto_OS_Arc;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_system_5fprofile_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SystemProfileProto_Plugin;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_system_5fprofile_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_SystemProfileProto_GoogleUpdate;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_system_5fprofile_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_SystemProfileProto_Hardware_Bluetooth;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_system_5fprofile_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_SystemProfileProto_Network;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_system_5fprofile_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_SystemProfileProto_Network_WifiAccessPoint;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_system_5fprofile_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_SystemProfileProto_OS;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_system_5fprofile_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_SystemProfileProto_Stability;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_system_5fprofile_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_SystemProfileProto_Stability_PluginStability;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_system_5fprofile_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_SystemProfileProto_ExternalAudioVideoDevice;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_system_5fprofile_2eproto ::google::protobuf::internal::SCCInfo<5> scc_info_SystemProfileProto_Hardware;
}  // namespace protobuf_system_5fprofile_2eproto
namespace metrics {
class SystemProfileProto_OS_ArcDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SystemProfileProto_OS_Arc>
      _instance;
} _SystemProfileProto_OS_Arc_default_instance_;
class SystemProfileProto_OSDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SystemProfileProto_OS>
      _instance;
} _SystemProfileProto_OS_default_instance_;
class SystemProfileProto_Hardware_CPUDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SystemProfileProto_Hardware_CPU>
      _instance;
} _SystemProfileProto_Hardware_CPU_default_instance_;
class SystemProfileProto_Hardware_GraphicsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SystemProfileProto_Hardware_Graphics>
      _instance;
} _SystemProfileProto_Hardware_Graphics_default_instance_;
class SystemProfileProto_Hardware_Bluetooth_PairedDeviceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SystemProfileProto_Hardware_Bluetooth_PairedDevice>
      _instance;
} _SystemProfileProto_Hardware_Bluetooth_PairedDevice_default_instance_;
class SystemProfileProto_Hardware_BluetoothDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SystemProfileProto_Hardware_Bluetooth>
      _instance;
} _SystemProfileProto_Hardware_Bluetooth_default_instance_;
class SystemProfileProto_Hardware_DeprecatedTouchScreenDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SystemProfileProto_Hardware_DeprecatedTouchScreen>
      _instance;
} _SystemProfileProto_Hardware_DeprecatedTouchScreen_default_instance_;
class SystemProfileProto_Hardware_DriveDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SystemProfileProto_Hardware_Drive>
      _instance;
} _SystemProfileProto_Hardware_Drive_default_instance_;
class SystemProfileProto_HardwareDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SystemProfileProto_Hardware>
      _instance;
} _SystemProfileProto_Hardware_default_instance_;
class SystemProfileProto_Network_WifiAccessPoint_VendorInformationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SystemProfileProto_Network_WifiAccessPoint_VendorInformation>
      _instance;
} _SystemProfileProto_Network_WifiAccessPoint_VendorInformation_default_instance_;
class SystemProfileProto_Network_WifiAccessPointDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SystemProfileProto_Network_WifiAccessPoint>
      _instance;
} _SystemProfileProto_Network_WifiAccessPoint_default_instance_;
class SystemProfileProto_NetworkDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SystemProfileProto_Network>
      _instance;
} _SystemProfileProto_Network_default_instance_;
class SystemProfileProto_GoogleUpdate_ProductInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SystemProfileProto_GoogleUpdate_ProductInfo>
      _instance;
} _SystemProfileProto_GoogleUpdate_ProductInfo_default_instance_;
class SystemProfileProto_GoogleUpdateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SystemProfileProto_GoogleUpdate>
      _instance;
} _SystemProfileProto_GoogleUpdate_default_instance_;
class SystemProfileProto_PluginDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SystemProfileProto_Plugin>
      _instance;
} _SystemProfileProto_Plugin_default_instance_;
class SystemProfileProto_Stability_PluginStabilityDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SystemProfileProto_Stability_PluginStability>
      _instance;
} _SystemProfileProto_Stability_PluginStability_default_instance_;
class SystemProfileProto_StabilityDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SystemProfileProto_Stability>
      _instance;
} _SystemProfileProto_Stability_default_instance_;
class SystemProfileProto_FieldTrialDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SystemProfileProto_FieldTrial>
      _instance;
} _SystemProfileProto_FieldTrial_default_instance_;
class SystemProfileProto_ExternalAudioVideoDevice_AudioDescriptionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SystemProfileProto_ExternalAudioVideoDevice_AudioDescription>
      _instance;
} _SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_default_instance_;
class SystemProfileProto_ExternalAudioVideoDevice_CECCommandDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SystemProfileProto_ExternalAudioVideoDevice_CECCommand>
      _instance;
} _SystemProfileProto_ExternalAudioVideoDevice_CECCommand_default_instance_;
class SystemProfileProto_ExternalAudioVideoDeviceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SystemProfileProto_ExternalAudioVideoDevice>
      _instance;
} _SystemProfileProto_ExternalAudioVideoDevice_default_instance_;
class SystemProfileProto_ExternalAccessPointDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SystemProfileProto_ExternalAccessPoint>
      _instance;
} _SystemProfileProto_ExternalAccessPoint_default_instance_;
class SystemProfileProto_AntiVirusProductDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SystemProfileProto_AntiVirusProduct>
      _instance;
} _SystemProfileProto_AntiVirusProduct_default_instance_;
class SystemProfileProto_ChromeComponentDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SystemProfileProto_ChromeComponent>
      _instance;
} _SystemProfileProto_ChromeComponent_default_instance_;
class SystemProfileProto_LinkedAndroidPhoneDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SystemProfileProto_LinkedAndroidPhoneData>
      _instance;
} _SystemProfileProto_LinkedAndroidPhoneData_default_instance_;
class SystemProfileProtoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SystemProfileProto>
      _instance;
} _SystemProfileProto_default_instance_;
}  // namespace metrics
namespace protobuf_system_5fprofile_2eproto {
static void InitDefaultsSystemProfileProto_OS_Arc() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metrics::_SystemProfileProto_OS_Arc_default_instance_;
    new (ptr) ::metrics::SystemProfileProto_OS_Arc();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metrics::SystemProfileProto_OS_Arc::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SystemProfileProto_OS_Arc =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSystemProfileProto_OS_Arc}, {}};

static void InitDefaultsSystemProfileProto_OS() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metrics::_SystemProfileProto_OS_default_instance_;
    new (ptr) ::metrics::SystemProfileProto_OS();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metrics::SystemProfileProto_OS::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SystemProfileProto_OS =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSystemProfileProto_OS}, {
      &protobuf_system_5fprofile_2eproto::scc_info_SystemProfileProto_OS_Arc.base,}};

static void InitDefaultsSystemProfileProto_Hardware_CPU() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metrics::_SystemProfileProto_Hardware_CPU_default_instance_;
    new (ptr) ::metrics::SystemProfileProto_Hardware_CPU();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metrics::SystemProfileProto_Hardware_CPU::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SystemProfileProto_Hardware_CPU =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSystemProfileProto_Hardware_CPU}, {}};

static void InitDefaultsSystemProfileProto_Hardware_Graphics() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metrics::_SystemProfileProto_Hardware_Graphics_default_instance_;
    new (ptr) ::metrics::SystemProfileProto_Hardware_Graphics();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metrics::SystemProfileProto_Hardware_Graphics::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SystemProfileProto_Hardware_Graphics =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSystemProfileProto_Hardware_Graphics}, {}};

static void InitDefaultsSystemProfileProto_Hardware_Bluetooth_PairedDevice() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metrics::_SystemProfileProto_Hardware_Bluetooth_PairedDevice_default_instance_;
    new (ptr) ::metrics::SystemProfileProto_Hardware_Bluetooth_PairedDevice();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metrics::SystemProfileProto_Hardware_Bluetooth_PairedDevice::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SystemProfileProto_Hardware_Bluetooth_PairedDevice =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSystemProfileProto_Hardware_Bluetooth_PairedDevice}, {}};

static void InitDefaultsSystemProfileProto_Hardware_Bluetooth() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metrics::_SystemProfileProto_Hardware_Bluetooth_default_instance_;
    new (ptr) ::metrics::SystemProfileProto_Hardware_Bluetooth();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metrics::SystemProfileProto_Hardware_Bluetooth::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SystemProfileProto_Hardware_Bluetooth =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSystemProfileProto_Hardware_Bluetooth}, {
      &protobuf_system_5fprofile_2eproto::scc_info_SystemProfileProto_Hardware_Bluetooth_PairedDevice.base,}};

static void InitDefaultsSystemProfileProto_Hardware_DeprecatedTouchScreen() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metrics::_SystemProfileProto_Hardware_DeprecatedTouchScreen_default_instance_;
    new (ptr) ::metrics::SystemProfileProto_Hardware_DeprecatedTouchScreen();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metrics::SystemProfileProto_Hardware_DeprecatedTouchScreen::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SystemProfileProto_Hardware_DeprecatedTouchScreen =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSystemProfileProto_Hardware_DeprecatedTouchScreen}, {}};

static void InitDefaultsSystemProfileProto_Hardware_Drive() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metrics::_SystemProfileProto_Hardware_Drive_default_instance_;
    new (ptr) ::metrics::SystemProfileProto_Hardware_Drive();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metrics::SystemProfileProto_Hardware_Drive::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SystemProfileProto_Hardware_Drive =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSystemProfileProto_Hardware_Drive}, {}};

static void InitDefaultsSystemProfileProto_Hardware() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metrics::_SystemProfileProto_Hardware_default_instance_;
    new (ptr) ::metrics::SystemProfileProto_Hardware();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metrics::SystemProfileProto_Hardware::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<5> scc_info_SystemProfileProto_Hardware =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsSystemProfileProto_Hardware}, {
      &protobuf_system_5fprofile_2eproto::scc_info_SystemProfileProto_Hardware_CPU.base,
      &protobuf_system_5fprofile_2eproto::scc_info_SystemProfileProto_Hardware_Graphics.base,
      &protobuf_system_5fprofile_2eproto::scc_info_SystemProfileProto_Hardware_Bluetooth.base,
      &protobuf_system_5fprofile_2eproto::scc_info_SystemProfileProto_Hardware_DeprecatedTouchScreen.base,
      &protobuf_system_5fprofile_2eproto::scc_info_SystemProfileProto_Hardware_Drive.base,}};

static void InitDefaultsSystemProfileProto_Network_WifiAccessPoint_VendorInformation() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metrics::_SystemProfileProto_Network_WifiAccessPoint_VendorInformation_default_instance_;
    new (ptr) ::metrics::SystemProfileProto_Network_WifiAccessPoint_VendorInformation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metrics::SystemProfileProto_Network_WifiAccessPoint_VendorInformation::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SystemProfileProto_Network_WifiAccessPoint_VendorInformation =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSystemProfileProto_Network_WifiAccessPoint_VendorInformation}, {}};

static void InitDefaultsSystemProfileProto_Network_WifiAccessPoint() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metrics::_SystemProfileProto_Network_WifiAccessPoint_default_instance_;
    new (ptr) ::metrics::SystemProfileProto_Network_WifiAccessPoint();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metrics::SystemProfileProto_Network_WifiAccessPoint::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SystemProfileProto_Network_WifiAccessPoint =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSystemProfileProto_Network_WifiAccessPoint}, {
      &protobuf_system_5fprofile_2eproto::scc_info_SystemProfileProto_Network_WifiAccessPoint_VendorInformation.base,}};

static void InitDefaultsSystemProfileProto_Network() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metrics::_SystemProfileProto_Network_default_instance_;
    new (ptr) ::metrics::SystemProfileProto_Network();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metrics::SystemProfileProto_Network::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SystemProfileProto_Network =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSystemProfileProto_Network}, {
      &protobuf_system_5fprofile_2eproto::scc_info_SystemProfileProto_Network_WifiAccessPoint.base,}};

static void InitDefaultsSystemProfileProto_GoogleUpdate_ProductInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metrics::_SystemProfileProto_GoogleUpdate_ProductInfo_default_instance_;
    new (ptr) ::metrics::SystemProfileProto_GoogleUpdate_ProductInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metrics::SystemProfileProto_GoogleUpdate_ProductInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SystemProfileProto_GoogleUpdate_ProductInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSystemProfileProto_GoogleUpdate_ProductInfo}, {}};

static void InitDefaultsSystemProfileProto_GoogleUpdate() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metrics::_SystemProfileProto_GoogleUpdate_default_instance_;
    new (ptr) ::metrics::SystemProfileProto_GoogleUpdate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metrics::SystemProfileProto_GoogleUpdate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SystemProfileProto_GoogleUpdate =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSystemProfileProto_GoogleUpdate}, {
      &protobuf_system_5fprofile_2eproto::scc_info_SystemProfileProto_GoogleUpdate_ProductInfo.base,}};

static void InitDefaultsSystemProfileProto_Plugin() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metrics::_SystemProfileProto_Plugin_default_instance_;
    new (ptr) ::metrics::SystemProfileProto_Plugin();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metrics::SystemProfileProto_Plugin::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SystemProfileProto_Plugin =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSystemProfileProto_Plugin}, {}};

static void InitDefaultsSystemProfileProto_Stability_PluginStability() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metrics::_SystemProfileProto_Stability_PluginStability_default_instance_;
    new (ptr) ::metrics::SystemProfileProto_Stability_PluginStability();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metrics::SystemProfileProto_Stability_PluginStability::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SystemProfileProto_Stability_PluginStability =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSystemProfileProto_Stability_PluginStability}, {
      &protobuf_system_5fprofile_2eproto::scc_info_SystemProfileProto_Plugin.base,}};

static void InitDefaultsSystemProfileProto_Stability() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metrics::_SystemProfileProto_Stability_default_instance_;
    new (ptr) ::metrics::SystemProfileProto_Stability();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metrics::SystemProfileProto_Stability::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SystemProfileProto_Stability =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSystemProfileProto_Stability}, {
      &protobuf_system_5fprofile_2eproto::scc_info_SystemProfileProto_Stability_PluginStability.base,}};

static void InitDefaultsSystemProfileProto_FieldTrial() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metrics::_SystemProfileProto_FieldTrial_default_instance_;
    new (ptr) ::metrics::SystemProfileProto_FieldTrial();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metrics::SystemProfileProto_FieldTrial::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SystemProfileProto_FieldTrial =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSystemProfileProto_FieldTrial}, {}};

static void InitDefaultsSystemProfileProto_ExternalAudioVideoDevice_AudioDescription() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metrics::_SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_default_instance_;
    new (ptr) ::metrics::SystemProfileProto_ExternalAudioVideoDevice_AudioDescription();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metrics::SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SystemProfileProto_ExternalAudioVideoDevice_AudioDescription =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSystemProfileProto_ExternalAudioVideoDevice_AudioDescription}, {}};

static void InitDefaultsSystemProfileProto_ExternalAudioVideoDevice_CECCommand() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metrics::_SystemProfileProto_ExternalAudioVideoDevice_CECCommand_default_instance_;
    new (ptr) ::metrics::SystemProfileProto_ExternalAudioVideoDevice_CECCommand();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metrics::SystemProfileProto_ExternalAudioVideoDevice_CECCommand::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SystemProfileProto_ExternalAudioVideoDevice_CECCommand =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSystemProfileProto_ExternalAudioVideoDevice_CECCommand}, {}};

static void InitDefaultsSystemProfileProto_ExternalAudioVideoDevice() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metrics::_SystemProfileProto_ExternalAudioVideoDevice_default_instance_;
    new (ptr) ::metrics::SystemProfileProto_ExternalAudioVideoDevice();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metrics::SystemProfileProto_ExternalAudioVideoDevice::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_SystemProfileProto_ExternalAudioVideoDevice =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsSystemProfileProto_ExternalAudioVideoDevice}, {
      &protobuf_system_5fprofile_2eproto::scc_info_SystemProfileProto_ExternalAudioVideoDevice_AudioDescription.base,
      &protobuf_system_5fprofile_2eproto::scc_info_SystemProfileProto_ExternalAudioVideoDevice_CECCommand.base,}};

static void InitDefaultsSystemProfileProto_ExternalAccessPoint() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metrics::_SystemProfileProto_ExternalAccessPoint_default_instance_;
    new (ptr) ::metrics::SystemProfileProto_ExternalAccessPoint();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metrics::SystemProfileProto_ExternalAccessPoint::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SystemProfileProto_ExternalAccessPoint =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSystemProfileProto_ExternalAccessPoint}, {}};

static void InitDefaultsSystemProfileProto_AntiVirusProduct() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metrics::_SystemProfileProto_AntiVirusProduct_default_instance_;
    new (ptr) ::metrics::SystemProfileProto_AntiVirusProduct();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metrics::SystemProfileProto_AntiVirusProduct::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SystemProfileProto_AntiVirusProduct =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSystemProfileProto_AntiVirusProduct}, {}};

static void InitDefaultsSystemProfileProto_ChromeComponent() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metrics::_SystemProfileProto_ChromeComponent_default_instance_;
    new (ptr) ::metrics::SystemProfileProto_ChromeComponent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metrics::SystemProfileProto_ChromeComponent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SystemProfileProto_ChromeComponent =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSystemProfileProto_ChromeComponent}, {}};

static void InitDefaultsSystemProfileProto_LinkedAndroidPhoneData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metrics::_SystemProfileProto_LinkedAndroidPhoneData_default_instance_;
    new (ptr) ::metrics::SystemProfileProto_LinkedAndroidPhoneData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metrics::SystemProfileProto_LinkedAndroidPhoneData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SystemProfileProto_LinkedAndroidPhoneData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSystemProfileProto_LinkedAndroidPhoneData}, {}};

static void InitDefaultsSystemProfileProto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metrics::_SystemProfileProto_default_instance_;
    new (ptr) ::metrics::SystemProfileProto();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metrics::SystemProfileProto::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<13> scc_info_SystemProfileProto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 13, InitDefaultsSystemProfileProto}, {
      &protobuf_system_5fprofile_2eproto::scc_info_SystemProfileProto_OS.base,
      &protobuf_system_5fprofile_2eproto::scc_info_SystemProfileProto_Hardware.base,
      &protobuf_system_5fprofile_2eproto::scc_info_SystemProfileProto_Network.base,
      &protobuf_system_5fprofile_2eproto::scc_info_SystemProfileProto_GoogleUpdate.base,
      &protobuf_system_5fprofile_2eproto::scc_info_SystemProfileProto_Plugin.base,
      &protobuf_system_5fprofile_2eproto::scc_info_SystemProfileProto_Stability.base,
      &protobuf_system_5fprofile_2eproto::scc_info_SystemProfileProto_FieldTrial.base,
      &protobuf_system_5fprofile_2eproto::scc_info_SystemProfileProto_ExternalAudioVideoDevice.base,
      &protobuf_system_5fprofile_2eproto::scc_info_SystemProfileProto_ExternalAccessPoint.base,
      &protobuf_system_5fprofile_2eproto::scc_info_SystemProfileProto_AntiVirusProduct.base,
      &protobuf_system_5fprofile_2eproto::scc_info_SystemProfileProto_ChromeComponent.base,
      &protobuf_extension_5finstall_2eproto::scc_info_ExtensionInstallProto.base,
      &protobuf_system_5fprofile_2eproto::scc_info_SystemProfileProto_LinkedAndroidPhoneData.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_SystemProfileProto_OS_Arc.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SystemProfileProto_OS.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SystemProfileProto_Hardware_CPU.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SystemProfileProto_Hardware_Graphics.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SystemProfileProto_Hardware_Bluetooth_PairedDevice.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SystemProfileProto_Hardware_Bluetooth.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SystemProfileProto_Hardware_DeprecatedTouchScreen.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SystemProfileProto_Hardware_Drive.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SystemProfileProto_Hardware.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SystemProfileProto_Network_WifiAccessPoint_VendorInformation.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SystemProfileProto_Network_WifiAccessPoint.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SystemProfileProto_Network.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SystemProfileProto_GoogleUpdate_ProductInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SystemProfileProto_GoogleUpdate.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SystemProfileProto_Plugin.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SystemProfileProto_Stability_PluginStability.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SystemProfileProto_Stability.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SystemProfileProto_FieldTrial.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SystemProfileProto_ExternalAudioVideoDevice_AudioDescription.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SystemProfileProto_ExternalAudioVideoDevice_CECCommand.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SystemProfileProto_ExternalAudioVideoDevice.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SystemProfileProto_ExternalAccessPoint.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SystemProfileProto_AntiVirusProduct.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SystemProfileProto_ChromeComponent.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SystemProfileProto_LinkedAndroidPhoneData.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SystemProfileProto.base);
}

}  // namespace protobuf_system_5fprofile_2eproto
namespace metrics {
bool SystemProfileProto_Hardware_Bluetooth_PairedDevice_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SystemProfileProto_Hardware_Bluetooth_PairedDevice_Type SystemProfileProto_Hardware_Bluetooth_PairedDevice::DEVICE_UNKNOWN;
const SystemProfileProto_Hardware_Bluetooth_PairedDevice_Type SystemProfileProto_Hardware_Bluetooth_PairedDevice::DEVICE_COMPUTER;
const SystemProfileProto_Hardware_Bluetooth_PairedDevice_Type SystemProfileProto_Hardware_Bluetooth_PairedDevice::DEVICE_PHONE;
const SystemProfileProto_Hardware_Bluetooth_PairedDevice_Type SystemProfileProto_Hardware_Bluetooth_PairedDevice::DEVICE_MODEM;
const SystemProfileProto_Hardware_Bluetooth_PairedDevice_Type SystemProfileProto_Hardware_Bluetooth_PairedDevice::DEVICE_AUDIO;
const SystemProfileProto_Hardware_Bluetooth_PairedDevice_Type SystemProfileProto_Hardware_Bluetooth_PairedDevice::DEVICE_CAR_AUDIO;
const SystemProfileProto_Hardware_Bluetooth_PairedDevice_Type SystemProfileProto_Hardware_Bluetooth_PairedDevice::DEVICE_VIDEO;
const SystemProfileProto_Hardware_Bluetooth_PairedDevice_Type SystemProfileProto_Hardware_Bluetooth_PairedDevice::DEVICE_PERIPHERAL;
const SystemProfileProto_Hardware_Bluetooth_PairedDevice_Type SystemProfileProto_Hardware_Bluetooth_PairedDevice::DEVICE_JOYSTICK;
const SystemProfileProto_Hardware_Bluetooth_PairedDevice_Type SystemProfileProto_Hardware_Bluetooth_PairedDevice::DEVICE_GAMEPAD;
const SystemProfileProto_Hardware_Bluetooth_PairedDevice_Type SystemProfileProto_Hardware_Bluetooth_PairedDevice::DEVICE_KEYBOARD;
const SystemProfileProto_Hardware_Bluetooth_PairedDevice_Type SystemProfileProto_Hardware_Bluetooth_PairedDevice::DEVICE_MOUSE;
const SystemProfileProto_Hardware_Bluetooth_PairedDevice_Type SystemProfileProto_Hardware_Bluetooth_PairedDevice::DEVICE_TABLET;
const SystemProfileProto_Hardware_Bluetooth_PairedDevice_Type SystemProfileProto_Hardware_Bluetooth_PairedDevice::DEVICE_KEYBOARD_MOUSE_COMBO;
const SystemProfileProto_Hardware_Bluetooth_PairedDevice_Type SystemProfileProto_Hardware_Bluetooth_PairedDevice::Type_MIN;
const SystemProfileProto_Hardware_Bluetooth_PairedDevice_Type SystemProfileProto_Hardware_Bluetooth_PairedDevice::Type_MAX;
const int SystemProfileProto_Hardware_Bluetooth_PairedDevice::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool SystemProfileProto_Hardware_Bluetooth_PairedDevice_VendorIDSource_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SystemProfileProto_Hardware_Bluetooth_PairedDevice_VendorIDSource SystemProfileProto_Hardware_Bluetooth_PairedDevice::VENDOR_ID_UNKNOWN;
const SystemProfileProto_Hardware_Bluetooth_PairedDevice_VendorIDSource SystemProfileProto_Hardware_Bluetooth_PairedDevice::VENDOR_ID_BLUETOOTH;
const SystemProfileProto_Hardware_Bluetooth_PairedDevice_VendorIDSource SystemProfileProto_Hardware_Bluetooth_PairedDevice::VENDOR_ID_USB;
const SystemProfileProto_Hardware_Bluetooth_PairedDevice_VendorIDSource SystemProfileProto_Hardware_Bluetooth_PairedDevice::VendorIDSource_MIN;
const SystemProfileProto_Hardware_Bluetooth_PairedDevice_VendorIDSource SystemProfileProto_Hardware_Bluetooth_PairedDevice::VendorIDSource_MAX;
const int SystemProfileProto_Hardware_Bluetooth_PairedDevice::VendorIDSource_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool SystemProfileProto_Network_WifiAccessPoint_SecurityMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SystemProfileProto_Network_WifiAccessPoint_SecurityMode SystemProfileProto_Network_WifiAccessPoint::SECURITY_UNKNOWN;
const SystemProfileProto_Network_WifiAccessPoint_SecurityMode SystemProfileProto_Network_WifiAccessPoint::SECURITY_WPA;
const SystemProfileProto_Network_WifiAccessPoint_SecurityMode SystemProfileProto_Network_WifiAccessPoint::SECURITY_WEP;
const SystemProfileProto_Network_WifiAccessPoint_SecurityMode SystemProfileProto_Network_WifiAccessPoint::SECURITY_RSN;
const SystemProfileProto_Network_WifiAccessPoint_SecurityMode SystemProfileProto_Network_WifiAccessPoint::SECURITY_802_1X;
const SystemProfileProto_Network_WifiAccessPoint_SecurityMode SystemProfileProto_Network_WifiAccessPoint::SECURITY_PSK;
const SystemProfileProto_Network_WifiAccessPoint_SecurityMode SystemProfileProto_Network_WifiAccessPoint::SECURITY_NONE;
const SystemProfileProto_Network_WifiAccessPoint_SecurityMode SystemProfileProto_Network_WifiAccessPoint::SecurityMode_MIN;
const SystemProfileProto_Network_WifiAccessPoint_SecurityMode SystemProfileProto_Network_WifiAccessPoint::SecurityMode_MAX;
const int SystemProfileProto_Network_WifiAccessPoint::SecurityMode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool SystemProfileProto_Network_ConnectionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SystemProfileProto_Network_ConnectionType SystemProfileProto_Network::CONNECTION_UNKNOWN;
const SystemProfileProto_Network_ConnectionType SystemProfileProto_Network::CONNECTION_ETHERNET;
const SystemProfileProto_Network_ConnectionType SystemProfileProto_Network::CONNECTION_WIFI;
const SystemProfileProto_Network_ConnectionType SystemProfileProto_Network::CONNECTION_2G;
const SystemProfileProto_Network_ConnectionType SystemProfileProto_Network::CONNECTION_3G;
const SystemProfileProto_Network_ConnectionType SystemProfileProto_Network::CONNECTION_4G;
const SystemProfileProto_Network_ConnectionType SystemProfileProto_Network::CONNECTION_BLUETOOTH;
const SystemProfileProto_Network_ConnectionType SystemProfileProto_Network::CONNECTION_NONE;
const SystemProfileProto_Network_ConnectionType SystemProfileProto_Network::CONNECTION_AMBIGUOUS;
const SystemProfileProto_Network_ConnectionType SystemProfileProto_Network::ConnectionType_MIN;
const SystemProfileProto_Network_ConnectionType SystemProfileProto_Network::ConnectionType_MAX;
const int SystemProfileProto_Network::ConnectionType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool SystemProfileProto_Network_WifiPHYLayerProtocol_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SystemProfileProto_Network_WifiPHYLayerProtocol SystemProfileProto_Network::WIFI_PHY_LAYER_PROTOCOL_NONE;
const SystemProfileProto_Network_WifiPHYLayerProtocol SystemProfileProto_Network::WIFI_PHY_LAYER_PROTOCOL_ANCIENT;
const SystemProfileProto_Network_WifiPHYLayerProtocol SystemProfileProto_Network::WIFI_PHY_LAYER_PROTOCOL_A;
const SystemProfileProto_Network_WifiPHYLayerProtocol SystemProfileProto_Network::WIFI_PHY_LAYER_PROTOCOL_B;
const SystemProfileProto_Network_WifiPHYLayerProtocol SystemProfileProto_Network::WIFI_PHY_LAYER_PROTOCOL_G;
const SystemProfileProto_Network_WifiPHYLayerProtocol SystemProfileProto_Network::WIFI_PHY_LAYER_PROTOCOL_N;
const SystemProfileProto_Network_WifiPHYLayerProtocol SystemProfileProto_Network::WIFI_PHY_LAYER_PROTOCOL_UNKNOWN;
const SystemProfileProto_Network_WifiPHYLayerProtocol SystemProfileProto_Network::WifiPHYLayerProtocol_MIN;
const SystemProfileProto_Network_WifiPHYLayerProtocol SystemProfileProto_Network::WifiPHYLayerProtocol_MAX;
const int SystemProfileProto_Network::WifiPHYLayerProtocol_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool SystemProfileProto_Network_EffectiveConnectionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SystemProfileProto_Network_EffectiveConnectionType SystemProfileProto_Network::EFFECTIVE_CONNECTION_TYPE_UNKNOWN;
const SystemProfileProto_Network_EffectiveConnectionType SystemProfileProto_Network::DEPRECATED_EFFECTIVE_CONNECTION_TYPE_AMBIGUOUS;
const SystemProfileProto_Network_EffectiveConnectionType SystemProfileProto_Network::EFFECTIVE_CONNECTION_TYPE_OFFLINE;
const SystemProfileProto_Network_EffectiveConnectionType SystemProfileProto_Network::EFFECTIVE_CONNECTION_TYPE_SLOW_2G;
const SystemProfileProto_Network_EffectiveConnectionType SystemProfileProto_Network::EFFECTIVE_CONNECTION_TYPE_2G;
const SystemProfileProto_Network_EffectiveConnectionType SystemProfileProto_Network::EFFECTIVE_CONNECTION_TYPE_3G;
const SystemProfileProto_Network_EffectiveConnectionType SystemProfileProto_Network::EFFECTIVE_CONNECTION_TYPE_4G;
const SystemProfileProto_Network_EffectiveConnectionType SystemProfileProto_Network::EffectiveConnectionType_MIN;
const SystemProfileProto_Network_EffectiveConnectionType SystemProfileProto_Network::EffectiveConnectionType_MAX;
const int SystemProfileProto_Network::EffectiveConnectionType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool SystemProfileProto_GoogleUpdate_ProductInfo_InstallResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SystemProfileProto_GoogleUpdate_ProductInfo_InstallResult SystemProfileProto_GoogleUpdate_ProductInfo::INSTALL_RESULT_SUCCESS;
const SystemProfileProto_GoogleUpdate_ProductInfo_InstallResult SystemProfileProto_GoogleUpdate_ProductInfo::INSTALL_RESULT_FAILED_CUSTOM_ERROR;
const SystemProfileProto_GoogleUpdate_ProductInfo_InstallResult SystemProfileProto_GoogleUpdate_ProductInfo::INSTALL_RESULT_FAILED_MSI_ERROR;
const SystemProfileProto_GoogleUpdate_ProductInfo_InstallResult SystemProfileProto_GoogleUpdate_ProductInfo::INSTALL_RESULT_FAILED_SYSTEM_ERROR;
const SystemProfileProto_GoogleUpdate_ProductInfo_InstallResult SystemProfileProto_GoogleUpdate_ProductInfo::INSTALL_RESULT_EXIT_CODE;
const SystemProfileProto_GoogleUpdate_ProductInfo_InstallResult SystemProfileProto_GoogleUpdate_ProductInfo::InstallResult_MIN;
const SystemProfileProto_GoogleUpdate_ProductInfo_InstallResult SystemProfileProto_GoogleUpdate_ProductInfo::InstallResult_MAX;
const int SystemProfileProto_GoogleUpdate_ProductInfo::InstallResult_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_AudioFormat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_AudioFormat SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::AUDIO_FORMAT_UNKNOWN;
const SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_AudioFormat SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::AUDIO_FORMAT_LPCM;
const SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_AudioFormat SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::AUDIO_FORMAT_AC_3;
const SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_AudioFormat SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::AUDIO_FORMAT_MPEG1;
const SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_AudioFormat SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::AUDIO_FORMAT_MP3;
const SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_AudioFormat SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::AUDIO_FORMAT_MPEG2;
const SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_AudioFormat SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::AUDIO_FORMAT_AAC;
const SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_AudioFormat SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::AUDIO_FORMAT_DTS;
const SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_AudioFormat SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::AUDIO_FORMAT_ATRAC;
const SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_AudioFormat SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::AUDIO_FORMAT_ONE_BIT;
const SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_AudioFormat SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::AUDIO_FORMAT_DD_PLUS;
const SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_AudioFormat SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::AUDIO_FORMAT_DTS_HD;
const SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_AudioFormat SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::AUDIO_FORMAT_MLP_DOLBY_TRUEHD;
const SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_AudioFormat SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::AUDIO_FORMAT_DST_AUDIO;
const SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_AudioFormat SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::AUDIO_FORMAT_MICROSOFT_WMA_PRO;
const SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_AudioFormat SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::AudioFormat_MIN;
const SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_AudioFormat SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::AudioFormat_MAX;
const int SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::AudioFormat_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_OutputMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_OutputMode SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::ANALOG;
const SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_OutputMode SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::DIGITAL;
const SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_OutputMode SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::OutputMode_MIN;
const SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_OutputMode SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::OutputMode_MAX;
const int SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::OutputMode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool SystemProfileProto_ExternalAudioVideoDevice_AVDeviceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SystemProfileProto_ExternalAudioVideoDevice_AVDeviceType SystemProfileProto_ExternalAudioVideoDevice::AV_DEVICE_TYPE_UNKNOWN;
const SystemProfileProto_ExternalAudioVideoDevice_AVDeviceType SystemProfileProto_ExternalAudioVideoDevice::AV_DEVICE_TYPE_TV;
const SystemProfileProto_ExternalAudioVideoDevice_AVDeviceType SystemProfileProto_ExternalAudioVideoDevice::AV_DEVICE_TYPE_RECORDER;
const SystemProfileProto_ExternalAudioVideoDevice_AVDeviceType SystemProfileProto_ExternalAudioVideoDevice::AV_DEVICE_TYPE_TUNER;
const SystemProfileProto_ExternalAudioVideoDevice_AVDeviceType SystemProfileProto_ExternalAudioVideoDevice::AV_DEVICE_TYPE_PLAYER;
const SystemProfileProto_ExternalAudioVideoDevice_AVDeviceType SystemProfileProto_ExternalAudioVideoDevice::AV_DEVICE_TYPE_AUDIO_SYSTEM;
const SystemProfileProto_ExternalAudioVideoDevice_AVDeviceType SystemProfileProto_ExternalAudioVideoDevice::AVDeviceType_MIN;
const SystemProfileProto_ExternalAudioVideoDevice_AVDeviceType SystemProfileProto_ExternalAudioVideoDevice::AVDeviceType_MAX;
const int SystemProfileProto_ExternalAudioVideoDevice::AVDeviceType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool SystemProfileProto_ExternalAudioVideoDevice_ColorEncoding_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SystemProfileProto_ExternalAudioVideoDevice_ColorEncoding SystemProfileProto_ExternalAudioVideoDevice::COLOR_ENCODING_UNKNOWN;
const SystemProfileProto_ExternalAudioVideoDevice_ColorEncoding SystemProfileProto_ExternalAudioVideoDevice::COLOR_ENCODING_RGB;
const SystemProfileProto_ExternalAudioVideoDevice_ColorEncoding SystemProfileProto_ExternalAudioVideoDevice::COLOR_ENCODING_YUV444;
const SystemProfileProto_ExternalAudioVideoDevice_ColorEncoding SystemProfileProto_ExternalAudioVideoDevice::COLOR_ENCODING_YUV422;
const SystemProfileProto_ExternalAudioVideoDevice_ColorEncoding SystemProfileProto_ExternalAudioVideoDevice::COLOR_ENCODING_YUV420;
const SystemProfileProto_ExternalAudioVideoDevice_ColorEncoding SystemProfileProto_ExternalAudioVideoDevice::ColorEncoding_MIN;
const SystemProfileProto_ExternalAudioVideoDevice_ColorEncoding SystemProfileProto_ExternalAudioVideoDevice::ColorEncoding_MAX;
const int SystemProfileProto_ExternalAudioVideoDevice::ColorEncoding_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool SystemProfileProto_Channel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SystemProfileProto_Channel SystemProfileProto::CHANNEL_UNKNOWN;
const SystemProfileProto_Channel SystemProfileProto::CHANNEL_CANARY;
const SystemProfileProto_Channel SystemProfileProto::CHANNEL_DEV;
const SystemProfileProto_Channel SystemProfileProto::CHANNEL_BETA;
const SystemProfileProto_Channel SystemProfileProto::CHANNEL_STABLE;
const SystemProfileProto_Channel SystemProfileProto::Channel_MIN;
const SystemProfileProto_Channel SystemProfileProto::Channel_MAX;
const int SystemProfileProto::Channel_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool SystemProfileProto_ExtensionsState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SystemProfileProto_ExtensionsState SystemProfileProto::NO_EXTENSIONS;
const SystemProfileProto_ExtensionsState SystemProfileProto::NO_OFFSTORE_VERIFIED;
const SystemProfileProto_ExtensionsState SystemProfileProto::NO_OFFSTORE_UNVERIFIED;
const SystemProfileProto_ExtensionsState SystemProfileProto::HAS_OFFSTORE;
const SystemProfileProto_ExtensionsState SystemProfileProto::ExtensionsState_MIN;
const SystemProfileProto_ExtensionsState SystemProfileProto::ExtensionsState_MAX;
const int SystemProfileProto::ExtensionsState_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool SystemProfileProto_UmaDefaultState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SystemProfileProto_UmaDefaultState SystemProfileProto::OPT_IN;
const SystemProfileProto_UmaDefaultState SystemProfileProto::OPT_OUT;
const SystemProfileProto_UmaDefaultState SystemProfileProto::POLICY_FORCED_ENABLED;
const SystemProfileProto_UmaDefaultState SystemProfileProto::UmaDefaultState_MIN;
const SystemProfileProto_UmaDefaultState SystemProfileProto::UmaDefaultState_MAX;
const int SystemProfileProto::UmaDefaultState_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool SystemProfileProto_AntiVirusState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SystemProfileProto_AntiVirusState SystemProfileProto::STATE_ON;
const SystemProfileProto_AntiVirusState SystemProfileProto::STATE_OFF;
const SystemProfileProto_AntiVirusState SystemProfileProto::STATE_SNOOZED;
const SystemProfileProto_AntiVirusState SystemProfileProto::STATE_EXPIRED;
const SystemProfileProto_AntiVirusState SystemProfileProto::AntiVirusState_MIN;
const SystemProfileProto_AntiVirusState SystemProfileProto::AntiVirusState_MAX;
const int SystemProfileProto::AntiVirusState_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool SystemProfileProto_ComponentId_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SystemProfileProto_ComponentId SystemProfileProto::UNKNOWN;
const SystemProfileProto_ComponentId SystemProfileProto::FILE_TYPE_POLICIES;
const SystemProfileProto_ComponentId SystemProfileProto::ORIGIN_TRIALS;
const SystemProfileProto_ComponentId SystemProfileProto::PEPPER_FLASH;
const SystemProfileProto_ComponentId SystemProfileProto::PEPPER_FLASH_CHROMEOS;
const SystemProfileProto_ComponentId SystemProfileProto::PNACL;
const SystemProfileProto_ComponentId SystemProfileProto::RECOVERY;
const SystemProfileProto_ComponentId SystemProfileProto::SSL_ERROR_ASSISTANT;
const SystemProfileProto_ComponentId SystemProfileProto::STH_SET;
const SystemProfileProto_ComponentId SystemProfileProto::CRL_SET;
const SystemProfileProto_ComponentId SystemProfileProto::SUBRESOURCE_FILTER;
const SystemProfileProto_ComponentId SystemProfileProto::SW_REPORTER;
const SystemProfileProto_ComponentId SystemProfileProto::WIDEVINE_CDM;
const SystemProfileProto_ComponentId SystemProfileProto::EPSON_INKJET_PRINTER_ESCPR;
const SystemProfileProto_ComponentId SystemProfileProto::CROS_TERMINA;
const SystemProfileProto_ComponentId SystemProfileProto::STAR_CUPS_DRIVER;
const SystemProfileProto_ComponentId SystemProfileProto::SPEECH_SYNTHESIS_SV_SE;
const SystemProfileProto_ComponentId SystemProfileProto::OPTIMIZATION_HINTS;
const SystemProfileProto_ComponentId SystemProfileProto::DOWNLOADABLE_STRINGS;
const SystemProfileProto_ComponentId SystemProfileProto::VR_ASSETS;
const SystemProfileProto_ComponentId SystemProfileProto::RTANALYTICS_LIGHT;
const SystemProfileProto_ComponentId SystemProfileProto::RTANALYTICS_FULL;
const SystemProfileProto_ComponentId SystemProfileProto::CELLULAR;
const SystemProfileProto_ComponentId SystemProfileProto::DEMO_MODE_RESOURCES;
const SystemProfileProto_ComponentId SystemProfileProto::ComponentId_MIN;
const SystemProfileProto_ComponentId SystemProfileProto::ComponentId_MAX;
const int SystemProfileProto::ComponentId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void SystemProfileProto_OS_Arc::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SystemProfileProto_OS_Arc::kReleaseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SystemProfileProto_OS_Arc::SystemProfileProto_OS_Arc()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_system_5fprofile_2eproto::scc_info_SystemProfileProto_OS_Arc.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.SystemProfileProto.OS.Arc)
}
SystemProfileProto_OS_Arc::SystemProfileProto_OS_Arc(const SystemProfileProto_OS_Arc& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  release_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_release()) {
    release_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.release_);
  }
  // @@protoc_insertion_point(copy_constructor:metrics.SystemProfileProto.OS.Arc)
}

void SystemProfileProto_OS_Arc::SharedCtor() {
  release_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SystemProfileProto_OS_Arc::~SystemProfileProto_OS_Arc() {
  // @@protoc_insertion_point(destructor:metrics.SystemProfileProto.OS.Arc)
  SharedDtor();
}

void SystemProfileProto_OS_Arc::SharedDtor() {
  release_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SystemProfileProto_OS_Arc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SystemProfileProto_OS_Arc& SystemProfileProto_OS_Arc::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_system_5fprofile_2eproto::scc_info_SystemProfileProto_OS_Arc.base);
  return *internal_default_instance();
}


void SystemProfileProto_OS_Arc::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.SystemProfileProto.OS.Arc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    release_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SystemProfileProto_OS_Arc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:metrics.SystemProfileProto.OS.Arc)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string release = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_release()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.SystemProfileProto.OS.Arc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.SystemProfileProto.OS.Arc)
  return false;
#undef DO_
}

void SystemProfileProto_OS_Arc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.SystemProfileProto.OS.Arc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string release = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->release(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:metrics.SystemProfileProto.OS.Arc)
}

size_t SystemProfileProto_OS_Arc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.SystemProfileProto.OS.Arc)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // optional string release = 1;
  if (has_release()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->release());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SystemProfileProto_OS_Arc::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SystemProfileProto_OS_Arc*>(&from));
}

void SystemProfileProto_OS_Arc::MergeFrom(const SystemProfileProto_OS_Arc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.SystemProfileProto.OS.Arc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_release()) {
    set_has_release();
    release_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.release_);
  }
}

void SystemProfileProto_OS_Arc::CopyFrom(const SystemProfileProto_OS_Arc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.SystemProfileProto.OS.Arc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemProfileProto_OS_Arc::IsInitialized() const {
  return true;
}

void SystemProfileProto_OS_Arc::Swap(SystemProfileProto_OS_Arc* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SystemProfileProto_OS_Arc::InternalSwap(SystemProfileProto_OS_Arc* other) {
  using std::swap;
  release_.Swap(&other->release_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string SystemProfileProto_OS_Arc::GetTypeName() const {
  return "metrics.SystemProfileProto.OS.Arc";
}


// ===================================================================

void SystemProfileProto_OS::InitAsDefaultInstance() {
  ::metrics::_SystemProfileProto_OS_default_instance_._instance.get_mutable()->arc_ = const_cast< ::metrics::SystemProfileProto_OS_Arc*>(
      ::metrics::SystemProfileProto_OS_Arc::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SystemProfileProto_OS::kNameFieldNumber;
const int SystemProfileProto_OS::kVersionFieldNumber;
const int SystemProfileProto_OS::kBuildFingerprintFieldNumber;
const int SystemProfileProto_OS::kIsJailbrokenFieldNumber;
const int SystemProfileProto_OS::kBuildNumberFieldNumber;
const int SystemProfileProto_OS::kKernelVersionFieldNumber;
const int SystemProfileProto_OS::kArcFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SystemProfileProto_OS::SystemProfileProto_OS()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_system_5fprofile_2eproto::scc_info_SystemProfileProto_OS.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.SystemProfileProto.OS)
}
SystemProfileProto_OS::SystemProfileProto_OS(const SystemProfileProto_OS& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_version()) {
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  build_fingerprint_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_build_fingerprint()) {
    build_fingerprint_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.build_fingerprint_);
  }
  build_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_build_number()) {
    build_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.build_number_);
  }
  kernel_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_kernel_version()) {
    kernel_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.kernel_version_);
  }
  if (from.has_arc()) {
    arc_ = new ::metrics::SystemProfileProto_OS_Arc(*from.arc_);
  } else {
    arc_ = NULL;
  }
  is_jailbroken_ = from.is_jailbroken_;
  // @@protoc_insertion_point(copy_constructor:metrics.SystemProfileProto.OS)
}

void SystemProfileProto_OS::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  build_fingerprint_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  build_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  kernel_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&arc_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_jailbroken_) -
      reinterpret_cast<char*>(&arc_)) + sizeof(is_jailbroken_));
}

SystemProfileProto_OS::~SystemProfileProto_OS() {
  // @@protoc_insertion_point(destructor:metrics.SystemProfileProto.OS)
  SharedDtor();
}

void SystemProfileProto_OS::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  build_fingerprint_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  build_number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  kernel_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete arc_;
}

void SystemProfileProto_OS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SystemProfileProto_OS& SystemProfileProto_OS::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_system_5fprofile_2eproto::scc_info_SystemProfileProto_OS.base);
  return *internal_default_instance();
}


void SystemProfileProto_OS::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.SystemProfileProto.OS)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      version_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      build_fingerprint_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      build_number_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      kernel_version_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(arc_ != NULL);
      arc_->Clear();
    }
  }
  is_jailbroken_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SystemProfileProto_OS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:metrics.SystemProfileProto.OS)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string build_fingerprint = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_build_fingerprint()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_jailbroken = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_is_jailbroken();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_jailbroken_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string build_number = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_build_number()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string kernel_version = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_kernel_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .metrics.SystemProfileProto.OS.Arc arc = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_arc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.SystemProfileProto.OS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.SystemProfileProto.OS)
  return false;
#undef DO_
}

void SystemProfileProto_OS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.SystemProfileProto.OS)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string version = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->version(), output);
  }

  // optional string build_fingerprint = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->build_fingerprint(), output);
  }

  // optional bool is_jailbroken = 4;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_jailbroken(), output);
  }

  // optional string build_number = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->build_number(), output);
  }

  // optional string kernel_version = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->kernel_version(), output);
  }

  // optional .metrics.SystemProfileProto.OS.Arc arc = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->_internal_arc(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:metrics.SystemProfileProto.OS)
}

size_t SystemProfileProto_OS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.SystemProfileProto.OS)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 127u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string version = 2;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // optional string build_fingerprint = 3;
    if (has_build_fingerprint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->build_fingerprint());
    }

    // optional string build_number = 5;
    if (has_build_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->build_number());
    }

    // optional string kernel_version = 6;
    if (has_kernel_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->kernel_version());
    }

    // optional .metrics.SystemProfileProto.OS.Arc arc = 7;
    if (has_arc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *arc_);
    }

    // optional bool is_jailbroken = 4;
    if (has_is_jailbroken()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SystemProfileProto_OS::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SystemProfileProto_OS*>(&from));
}

void SystemProfileProto_OS::MergeFrom(const SystemProfileProto_OS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.SystemProfileProto.OS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_version();
      version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_build_fingerprint();
      build_fingerprint_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.build_fingerprint_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_build_number();
      build_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.build_number_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_kernel_version();
      kernel_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.kernel_version_);
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_arc()->::metrics::SystemProfileProto_OS_Arc::MergeFrom(from.arc());
    }
    if (cached_has_bits & 0x00000040u) {
      is_jailbroken_ = from.is_jailbroken_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SystemProfileProto_OS::CopyFrom(const SystemProfileProto_OS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.SystemProfileProto.OS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemProfileProto_OS::IsInitialized() const {
  return true;
}

void SystemProfileProto_OS::Swap(SystemProfileProto_OS* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SystemProfileProto_OS::InternalSwap(SystemProfileProto_OS* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  version_.Swap(&other->version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  build_fingerprint_.Swap(&other->build_fingerprint_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  build_number_.Swap(&other->build_number_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  kernel_version_.Swap(&other->kernel_version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(arc_, other->arc_);
  swap(is_jailbroken_, other->is_jailbroken_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string SystemProfileProto_OS::GetTypeName() const {
  return "metrics.SystemProfileProto.OS";
}


// ===================================================================

void SystemProfileProto_Hardware_CPU::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SystemProfileProto_Hardware_CPU::kVendorNameFieldNumber;
const int SystemProfileProto_Hardware_CPU::kSignatureFieldNumber;
const int SystemProfileProto_Hardware_CPU::kNumCoresFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SystemProfileProto_Hardware_CPU::SystemProfileProto_Hardware_CPU()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_system_5fprofile_2eproto::scc_info_SystemProfileProto_Hardware_CPU.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.SystemProfileProto.Hardware.CPU)
}
SystemProfileProto_Hardware_CPU::SystemProfileProto_Hardware_CPU(const SystemProfileProto_Hardware_CPU& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  vendor_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_vendor_name()) {
    vendor_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vendor_name_);
  }
  ::memcpy(&signature_, &from.signature_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_cores_) -
    reinterpret_cast<char*>(&signature_)) + sizeof(num_cores_));
  // @@protoc_insertion_point(copy_constructor:metrics.SystemProfileProto.Hardware.CPU)
}

void SystemProfileProto_Hardware_CPU::SharedCtor() {
  vendor_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&signature_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_cores_) -
      reinterpret_cast<char*>(&signature_)) + sizeof(num_cores_));
}

SystemProfileProto_Hardware_CPU::~SystemProfileProto_Hardware_CPU() {
  // @@protoc_insertion_point(destructor:metrics.SystemProfileProto.Hardware.CPU)
  SharedDtor();
}

void SystemProfileProto_Hardware_CPU::SharedDtor() {
  vendor_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SystemProfileProto_Hardware_CPU::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SystemProfileProto_Hardware_CPU& SystemProfileProto_Hardware_CPU::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_system_5fprofile_2eproto::scc_info_SystemProfileProto_Hardware_CPU.base);
  return *internal_default_instance();
}


void SystemProfileProto_Hardware_CPU::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.SystemProfileProto.Hardware.CPU)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    vendor_name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 6u) {
    ::memset(&signature_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_cores_) -
        reinterpret_cast<char*>(&signature_)) + sizeof(num_cores_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SystemProfileProto_Hardware_CPU::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:metrics.SystemProfileProto.Hardware.CPU)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string vendor_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vendor_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 signature = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_signature();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &signature_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 num_cores = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_num_cores();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_cores_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.SystemProfileProto.Hardware.CPU)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.SystemProfileProto.Hardware.CPU)
  return false;
#undef DO_
}

void SystemProfileProto_Hardware_CPU::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.SystemProfileProto.Hardware.CPU)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string vendor_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->vendor_name(), output);
  }

  // optional uint32 signature = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->signature(), output);
  }

  // optional uint32 num_cores = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->num_cores(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:metrics.SystemProfileProto.Hardware.CPU)
}

size_t SystemProfileProto_Hardware_CPU::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.SystemProfileProto.Hardware.CPU)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 7u) {
    // optional string vendor_name = 1;
    if (has_vendor_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vendor_name());
    }

    // optional uint32 signature = 2;
    if (has_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->signature());
    }

    // optional uint32 num_cores = 3;
    if (has_num_cores()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_cores());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SystemProfileProto_Hardware_CPU::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SystemProfileProto_Hardware_CPU*>(&from));
}

void SystemProfileProto_Hardware_CPU::MergeFrom(const SystemProfileProto_Hardware_CPU& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.SystemProfileProto.Hardware.CPU)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_vendor_name();
      vendor_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vendor_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      signature_ = from.signature_;
    }
    if (cached_has_bits & 0x00000004u) {
      num_cores_ = from.num_cores_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SystemProfileProto_Hardware_CPU::CopyFrom(const SystemProfileProto_Hardware_CPU& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.SystemProfileProto.Hardware.CPU)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemProfileProto_Hardware_CPU::IsInitialized() const {
  return true;
}

void SystemProfileProto_Hardware_CPU::Swap(SystemProfileProto_Hardware_CPU* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SystemProfileProto_Hardware_CPU::InternalSwap(SystemProfileProto_Hardware_CPU* other) {
  using std::swap;
  vendor_name_.Swap(&other->vendor_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(signature_, other->signature_);
  swap(num_cores_, other->num_cores_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string SystemProfileProto_Hardware_CPU::GetTypeName() const {
  return "metrics.SystemProfileProto.Hardware.CPU";
}


// ===================================================================

void SystemProfileProto_Hardware_Graphics::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SystemProfileProto_Hardware_Graphics::kVendorIdFieldNumber;
const int SystemProfileProto_Hardware_Graphics::kDeviceIdFieldNumber;
const int SystemProfileProto_Hardware_Graphics::kDriverVersionFieldNumber;
const int SystemProfileProto_Hardware_Graphics::kDriverDateFieldNumber;
const int SystemProfileProto_Hardware_Graphics::kGlVendorFieldNumber;
const int SystemProfileProto_Hardware_Graphics::kGlRendererFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SystemProfileProto_Hardware_Graphics::SystemProfileProto_Hardware_Graphics()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_system_5fprofile_2eproto::scc_info_SystemProfileProto_Hardware_Graphics.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.SystemProfileProto.Hardware.Graphics)
}
SystemProfileProto_Hardware_Graphics::SystemProfileProto_Hardware_Graphics(const SystemProfileProto_Hardware_Graphics& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  driver_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_driver_version()) {
    driver_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.driver_version_);
  }
  driver_date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_driver_date()) {
    driver_date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.driver_date_);
  }
  gl_vendor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_gl_vendor()) {
    gl_vendor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gl_vendor_);
  }
  gl_renderer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_gl_renderer()) {
    gl_renderer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gl_renderer_);
  }
  ::memcpy(&vendor_id_, &from.vendor_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&device_id_) -
    reinterpret_cast<char*>(&vendor_id_)) + sizeof(device_id_));
  // @@protoc_insertion_point(copy_constructor:metrics.SystemProfileProto.Hardware.Graphics)
}

void SystemProfileProto_Hardware_Graphics::SharedCtor() {
  driver_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  driver_date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gl_vendor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gl_renderer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&vendor_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&device_id_) -
      reinterpret_cast<char*>(&vendor_id_)) + sizeof(device_id_));
}

SystemProfileProto_Hardware_Graphics::~SystemProfileProto_Hardware_Graphics() {
  // @@protoc_insertion_point(destructor:metrics.SystemProfileProto.Hardware.Graphics)
  SharedDtor();
}

void SystemProfileProto_Hardware_Graphics::SharedDtor() {
  driver_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  driver_date_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gl_vendor_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gl_renderer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SystemProfileProto_Hardware_Graphics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SystemProfileProto_Hardware_Graphics& SystemProfileProto_Hardware_Graphics::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_system_5fprofile_2eproto::scc_info_SystemProfileProto_Hardware_Graphics.base);
  return *internal_default_instance();
}


void SystemProfileProto_Hardware_Graphics::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.SystemProfileProto.Hardware.Graphics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      driver_version_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      driver_date_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      gl_vendor_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      gl_renderer_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 48u) {
    ::memset(&vendor_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&device_id_) -
        reinterpret_cast<char*>(&vendor_id_)) + sizeof(device_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SystemProfileProto_Hardware_Graphics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:metrics.SystemProfileProto.Hardware.Graphics)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 vendor_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_vendor_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vendor_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 device_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_device_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &device_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string driver_version = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_driver_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string driver_date = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_driver_date()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string gl_vendor = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gl_vendor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string gl_renderer = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gl_renderer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.SystemProfileProto.Hardware.Graphics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.SystemProfileProto.Hardware.Graphics)
  return false;
#undef DO_
}

void SystemProfileProto_Hardware_Graphics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.SystemProfileProto.Hardware.Graphics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 vendor_id = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->vendor_id(), output);
  }

  // optional uint32 device_id = 2;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->device_id(), output);
  }

  // optional string driver_version = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->driver_version(), output);
  }

  // optional string driver_date = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->driver_date(), output);
  }

  // optional string gl_vendor = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->gl_vendor(), output);
  }

  // optional string gl_renderer = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->gl_renderer(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:metrics.SystemProfileProto.Hardware.Graphics)
}

size_t SystemProfileProto_Hardware_Graphics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.SystemProfileProto.Hardware.Graphics)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 63u) {
    // optional string driver_version = 3;
    if (has_driver_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->driver_version());
    }

    // optional string driver_date = 4;
    if (has_driver_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->driver_date());
    }

    // optional string gl_vendor = 6;
    if (has_gl_vendor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gl_vendor());
    }

    // optional string gl_renderer = 7;
    if (has_gl_renderer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gl_renderer());
    }

    // optional uint32 vendor_id = 1;
    if (has_vendor_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vendor_id());
    }

    // optional uint32 device_id = 2;
    if (has_device_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->device_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SystemProfileProto_Hardware_Graphics::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SystemProfileProto_Hardware_Graphics*>(&from));
}

void SystemProfileProto_Hardware_Graphics::MergeFrom(const SystemProfileProto_Hardware_Graphics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.SystemProfileProto.Hardware.Graphics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_driver_version();
      driver_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.driver_version_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_driver_date();
      driver_date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.driver_date_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_gl_vendor();
      gl_vendor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gl_vendor_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_gl_renderer();
      gl_renderer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gl_renderer_);
    }
    if (cached_has_bits & 0x00000010u) {
      vendor_id_ = from.vendor_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      device_id_ = from.device_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SystemProfileProto_Hardware_Graphics::CopyFrom(const SystemProfileProto_Hardware_Graphics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.SystemProfileProto.Hardware.Graphics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemProfileProto_Hardware_Graphics::IsInitialized() const {
  return true;
}

void SystemProfileProto_Hardware_Graphics::Swap(SystemProfileProto_Hardware_Graphics* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SystemProfileProto_Hardware_Graphics::InternalSwap(SystemProfileProto_Hardware_Graphics* other) {
  using std::swap;
  driver_version_.Swap(&other->driver_version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  driver_date_.Swap(&other->driver_date_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  gl_vendor_.Swap(&other->gl_vendor_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  gl_renderer_.Swap(&other->gl_renderer_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(vendor_id_, other->vendor_id_);
  swap(device_id_, other->device_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string SystemProfileProto_Hardware_Graphics::GetTypeName() const {
  return "metrics.SystemProfileProto.Hardware.Graphics";
}


// ===================================================================

void SystemProfileProto_Hardware_Bluetooth_PairedDevice::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SystemProfileProto_Hardware_Bluetooth_PairedDevice::kBluetoothClassFieldNumber;
const int SystemProfileProto_Hardware_Bluetooth_PairedDevice::kTypeFieldNumber;
const int SystemProfileProto_Hardware_Bluetooth_PairedDevice::kVendorPrefixFieldNumber;
const int SystemProfileProto_Hardware_Bluetooth_PairedDevice::kVendorIdSourceFieldNumber;
const int SystemProfileProto_Hardware_Bluetooth_PairedDevice::kVendorIdFieldNumber;
const int SystemProfileProto_Hardware_Bluetooth_PairedDevice::kProductIdFieldNumber;
const int SystemProfileProto_Hardware_Bluetooth_PairedDevice::kDeviceIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SystemProfileProto_Hardware_Bluetooth_PairedDevice::SystemProfileProto_Hardware_Bluetooth_PairedDevice()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_system_5fprofile_2eproto::scc_info_SystemProfileProto_Hardware_Bluetooth_PairedDevice.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.SystemProfileProto.Hardware.Bluetooth.PairedDevice)
}
SystemProfileProto_Hardware_Bluetooth_PairedDevice::SystemProfileProto_Hardware_Bluetooth_PairedDevice(const SystemProfileProto_Hardware_Bluetooth_PairedDevice& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&bluetooth_class_, &from.bluetooth_class_,
    static_cast<size_t>(reinterpret_cast<char*>(&vendor_id_source_) -
    reinterpret_cast<char*>(&bluetooth_class_)) + sizeof(vendor_id_source_));
  // @@protoc_insertion_point(copy_constructor:metrics.SystemProfileProto.Hardware.Bluetooth.PairedDevice)
}

void SystemProfileProto_Hardware_Bluetooth_PairedDevice::SharedCtor() {
  ::memset(&bluetooth_class_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vendor_id_source_) -
      reinterpret_cast<char*>(&bluetooth_class_)) + sizeof(vendor_id_source_));
}

SystemProfileProto_Hardware_Bluetooth_PairedDevice::~SystemProfileProto_Hardware_Bluetooth_PairedDevice() {
  // @@protoc_insertion_point(destructor:metrics.SystemProfileProto.Hardware.Bluetooth.PairedDevice)
  SharedDtor();
}

void SystemProfileProto_Hardware_Bluetooth_PairedDevice::SharedDtor() {
}

void SystemProfileProto_Hardware_Bluetooth_PairedDevice::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SystemProfileProto_Hardware_Bluetooth_PairedDevice& SystemProfileProto_Hardware_Bluetooth_PairedDevice::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_system_5fprofile_2eproto::scc_info_SystemProfileProto_Hardware_Bluetooth_PairedDevice.base);
  return *internal_default_instance();
}


void SystemProfileProto_Hardware_Bluetooth_PairedDevice::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.SystemProfileProto.Hardware.Bluetooth.PairedDevice)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    ::memset(&bluetooth_class_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&vendor_id_source_) -
        reinterpret_cast<char*>(&bluetooth_class_)) + sizeof(vendor_id_source_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SystemProfileProto_Hardware_Bluetooth_PairedDevice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:metrics.SystemProfileProto.Hardware.Bluetooth.PairedDevice)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 bluetooth_class = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_bluetooth_class();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bluetooth_class_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .metrics.SystemProfileProto.Hardware.Bluetooth.PairedDevice.Type type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::metrics::SystemProfileProto_Hardware_Bluetooth_PairedDevice_Type_IsValid(value)) {
            set_type(static_cast< ::metrics::SystemProfileProto_Hardware_Bluetooth_PairedDevice_Type >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 vendor_prefix = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_vendor_prefix();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vendor_prefix_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 vendor_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_vendor_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vendor_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 product_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_product_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &product_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 device_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_device_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &device_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .metrics.SystemProfileProto.Hardware.Bluetooth.PairedDevice.VendorIDSource vendor_id_source = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::metrics::SystemProfileProto_Hardware_Bluetooth_PairedDevice_VendorIDSource_IsValid(value)) {
            set_vendor_id_source(static_cast< ::metrics::SystemProfileProto_Hardware_Bluetooth_PairedDevice_VendorIDSource >(value));
          } else {
            unknown_fields_stream.WriteVarint32(64u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.SystemProfileProto.Hardware.Bluetooth.PairedDevice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.SystemProfileProto.Hardware.Bluetooth.PairedDevice)
  return false;
#undef DO_
}

void SystemProfileProto_Hardware_Bluetooth_PairedDevice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.SystemProfileProto.Hardware.Bluetooth.PairedDevice)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 bluetooth_class = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bluetooth_class(), output);
  }

  // optional .metrics.SystemProfileProto.Hardware.Bluetooth.PairedDevice.Type type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional uint32 vendor_prefix = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->vendor_prefix(), output);
  }

  // optional uint32 vendor_id = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->vendor_id(), output);
  }

  // optional uint32 product_id = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->product_id(), output);
  }

  // optional uint32 device_id = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->device_id(), output);
  }

  // optional .metrics.SystemProfileProto.Hardware.Bluetooth.PairedDevice.VendorIDSource vendor_id_source = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->vendor_id_source(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:metrics.SystemProfileProto.Hardware.Bluetooth.PairedDevice)
}

size_t SystemProfileProto_Hardware_Bluetooth_PairedDevice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.SystemProfileProto.Hardware.Bluetooth.PairedDevice)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 127u) {
    // optional uint32 bluetooth_class = 1;
    if (has_bluetooth_class()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bluetooth_class());
    }

    // optional .metrics.SystemProfileProto.Hardware.Bluetooth.PairedDevice.Type type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 vendor_prefix = 4;
    if (has_vendor_prefix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vendor_prefix());
    }

    // optional uint32 vendor_id = 5;
    if (has_vendor_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vendor_id());
    }

    // optional uint32 product_id = 6;
    if (has_product_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->product_id());
    }

    // optional uint32 device_id = 7;
    if (has_device_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->device_id());
    }

    // optional .metrics.SystemProfileProto.Hardware.Bluetooth.PairedDevice.VendorIDSource vendor_id_source = 8;
    if (has_vendor_id_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->vendor_id_source());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SystemProfileProto_Hardware_Bluetooth_PairedDevice::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SystemProfileProto_Hardware_Bluetooth_PairedDevice*>(&from));
}

void SystemProfileProto_Hardware_Bluetooth_PairedDevice::MergeFrom(const SystemProfileProto_Hardware_Bluetooth_PairedDevice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.SystemProfileProto.Hardware.Bluetooth.PairedDevice)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      bluetooth_class_ = from.bluetooth_class_;
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000004u) {
      vendor_prefix_ = from.vendor_prefix_;
    }
    if (cached_has_bits & 0x00000008u) {
      vendor_id_ = from.vendor_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      product_id_ = from.product_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      device_id_ = from.device_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      vendor_id_source_ = from.vendor_id_source_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SystemProfileProto_Hardware_Bluetooth_PairedDevice::CopyFrom(const SystemProfileProto_Hardware_Bluetooth_PairedDevice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.SystemProfileProto.Hardware.Bluetooth.PairedDevice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemProfileProto_Hardware_Bluetooth_PairedDevice::IsInitialized() const {
  return true;
}

void SystemProfileProto_Hardware_Bluetooth_PairedDevice::Swap(SystemProfileProto_Hardware_Bluetooth_PairedDevice* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SystemProfileProto_Hardware_Bluetooth_PairedDevice::InternalSwap(SystemProfileProto_Hardware_Bluetooth_PairedDevice* other) {
  using std::swap;
  swap(bluetooth_class_, other->bluetooth_class_);
  swap(type_, other->type_);
  swap(vendor_prefix_, other->vendor_prefix_);
  swap(vendor_id_, other->vendor_id_);
  swap(product_id_, other->product_id_);
  swap(device_id_, other->device_id_);
  swap(vendor_id_source_, other->vendor_id_source_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string SystemProfileProto_Hardware_Bluetooth_PairedDevice::GetTypeName() const {
  return "metrics.SystemProfileProto.Hardware.Bluetooth.PairedDevice";
}


// ===================================================================

void SystemProfileProto_Hardware_Bluetooth::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SystemProfileProto_Hardware_Bluetooth::kIsPresentFieldNumber;
const int SystemProfileProto_Hardware_Bluetooth::kIsEnabledFieldNumber;
const int SystemProfileProto_Hardware_Bluetooth::kPairedDeviceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SystemProfileProto_Hardware_Bluetooth::SystemProfileProto_Hardware_Bluetooth()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_system_5fprofile_2eproto::scc_info_SystemProfileProto_Hardware_Bluetooth.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.SystemProfileProto.Hardware.Bluetooth)
}
SystemProfileProto_Hardware_Bluetooth::SystemProfileProto_Hardware_Bluetooth(const SystemProfileProto_Hardware_Bluetooth& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      paired_device_(from.paired_device_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&is_present_, &from.is_present_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_enabled_) -
    reinterpret_cast<char*>(&is_present_)) + sizeof(is_enabled_));
  // @@protoc_insertion_point(copy_constructor:metrics.SystemProfileProto.Hardware.Bluetooth)
}

void SystemProfileProto_Hardware_Bluetooth::SharedCtor() {
  ::memset(&is_present_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_enabled_) -
      reinterpret_cast<char*>(&is_present_)) + sizeof(is_enabled_));
}

SystemProfileProto_Hardware_Bluetooth::~SystemProfileProto_Hardware_Bluetooth() {
  // @@protoc_insertion_point(destructor:metrics.SystemProfileProto.Hardware.Bluetooth)
  SharedDtor();
}

void SystemProfileProto_Hardware_Bluetooth::SharedDtor() {
}

void SystemProfileProto_Hardware_Bluetooth::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SystemProfileProto_Hardware_Bluetooth& SystemProfileProto_Hardware_Bluetooth::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_system_5fprofile_2eproto::scc_info_SystemProfileProto_Hardware_Bluetooth.base);
  return *internal_default_instance();
}


void SystemProfileProto_Hardware_Bluetooth::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.SystemProfileProto.Hardware.Bluetooth)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  paired_device_.Clear();
  ::memset(&is_present_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_enabled_) -
      reinterpret_cast<char*>(&is_present_)) + sizeof(is_enabled_));
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SystemProfileProto_Hardware_Bluetooth::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:metrics.SystemProfileProto.Hardware.Bluetooth)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_present = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_is_present();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_present_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_enabled = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_is_enabled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .metrics.SystemProfileProto.Hardware.Bluetooth.PairedDevice paired_device = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_paired_device()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.SystemProfileProto.Hardware.Bluetooth)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.SystemProfileProto.Hardware.Bluetooth)
  return false;
#undef DO_
}

void SystemProfileProto_Hardware_Bluetooth::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.SystemProfileProto.Hardware.Bluetooth)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_present = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_present(), output);
  }

  // optional bool is_enabled = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_enabled(), output);
  }

  // repeated .metrics.SystemProfileProto.Hardware.Bluetooth.PairedDevice paired_device = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->paired_device_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3,
      this->paired_device(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:metrics.SystemProfileProto.Hardware.Bluetooth)
}

size_t SystemProfileProto_Hardware_Bluetooth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.SystemProfileProto.Hardware.Bluetooth)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // repeated .metrics.SystemProfileProto.Hardware.Bluetooth.PairedDevice paired_device = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->paired_device_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->paired_device(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional bool is_present = 1;
    if (has_is_present()) {
      total_size += 1 + 1;
    }

    // optional bool is_enabled = 2;
    if (has_is_enabled()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SystemProfileProto_Hardware_Bluetooth::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SystemProfileProto_Hardware_Bluetooth*>(&from));
}

void SystemProfileProto_Hardware_Bluetooth::MergeFrom(const SystemProfileProto_Hardware_Bluetooth& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.SystemProfileProto.Hardware.Bluetooth)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  paired_device_.MergeFrom(from.paired_device_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      is_present_ = from.is_present_;
    }
    if (cached_has_bits & 0x00000002u) {
      is_enabled_ = from.is_enabled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SystemProfileProto_Hardware_Bluetooth::CopyFrom(const SystemProfileProto_Hardware_Bluetooth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.SystemProfileProto.Hardware.Bluetooth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemProfileProto_Hardware_Bluetooth::IsInitialized() const {
  return true;
}

void SystemProfileProto_Hardware_Bluetooth::Swap(SystemProfileProto_Hardware_Bluetooth* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SystemProfileProto_Hardware_Bluetooth::InternalSwap(SystemProfileProto_Hardware_Bluetooth* other) {
  using std::swap;
  CastToBase(&paired_device_)->InternalSwap(CastToBase(&other->paired_device_));
  swap(is_present_, other->is_present_);
  swap(is_enabled_, other->is_enabled_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string SystemProfileProto_Hardware_Bluetooth::GetTypeName() const {
  return "metrics.SystemProfileProto.Hardware.Bluetooth";
}


// ===================================================================

void SystemProfileProto_Hardware_DeprecatedTouchScreen::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SystemProfileProto_Hardware_DeprecatedTouchScreen::kVendorIdFieldNumber;
const int SystemProfileProto_Hardware_DeprecatedTouchScreen::kProductIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SystemProfileProto_Hardware_DeprecatedTouchScreen::SystemProfileProto_Hardware_DeprecatedTouchScreen()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_system_5fprofile_2eproto::scc_info_SystemProfileProto_Hardware_DeprecatedTouchScreen.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.SystemProfileProto.Hardware.DeprecatedTouchScreen)
}
SystemProfileProto_Hardware_DeprecatedTouchScreen::SystemProfileProto_Hardware_DeprecatedTouchScreen(const SystemProfileProto_Hardware_DeprecatedTouchScreen& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&vendor_id_, &from.vendor_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&product_id_) -
    reinterpret_cast<char*>(&vendor_id_)) + sizeof(product_id_));
  // @@protoc_insertion_point(copy_constructor:metrics.SystemProfileProto.Hardware.DeprecatedTouchScreen)
}

void SystemProfileProto_Hardware_DeprecatedTouchScreen::SharedCtor() {
  ::memset(&vendor_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&product_id_) -
      reinterpret_cast<char*>(&vendor_id_)) + sizeof(product_id_));
}

SystemProfileProto_Hardware_DeprecatedTouchScreen::~SystemProfileProto_Hardware_DeprecatedTouchScreen() {
  // @@protoc_insertion_point(destructor:metrics.SystemProfileProto.Hardware.DeprecatedTouchScreen)
  SharedDtor();
}

void SystemProfileProto_Hardware_DeprecatedTouchScreen::SharedDtor() {
}

void SystemProfileProto_Hardware_DeprecatedTouchScreen::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SystemProfileProto_Hardware_DeprecatedTouchScreen& SystemProfileProto_Hardware_DeprecatedTouchScreen::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_system_5fprofile_2eproto::scc_info_SystemProfileProto_Hardware_DeprecatedTouchScreen.base);
  return *internal_default_instance();
}


void SystemProfileProto_Hardware_DeprecatedTouchScreen::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.SystemProfileProto.Hardware.DeprecatedTouchScreen)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&vendor_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&product_id_) -
        reinterpret_cast<char*>(&vendor_id_)) + sizeof(product_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SystemProfileProto_Hardware_DeprecatedTouchScreen::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:metrics.SystemProfileProto.Hardware.DeprecatedTouchScreen)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 vendor_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_vendor_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vendor_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 product_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_product_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &product_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.SystemProfileProto.Hardware.DeprecatedTouchScreen)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.SystemProfileProto.Hardware.DeprecatedTouchScreen)
  return false;
#undef DO_
}

void SystemProfileProto_Hardware_DeprecatedTouchScreen::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.SystemProfileProto.Hardware.DeprecatedTouchScreen)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 vendor_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->vendor_id(), output);
  }

  // optional uint32 product_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->product_id(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:metrics.SystemProfileProto.Hardware.DeprecatedTouchScreen)
}

size_t SystemProfileProto_Hardware_DeprecatedTouchScreen::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.SystemProfileProto.Hardware.DeprecatedTouchScreen)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 vendor_id = 1;
    if (has_vendor_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vendor_id());
    }

    // optional uint32 product_id = 2;
    if (has_product_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->product_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SystemProfileProto_Hardware_DeprecatedTouchScreen::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SystemProfileProto_Hardware_DeprecatedTouchScreen*>(&from));
}

void SystemProfileProto_Hardware_DeprecatedTouchScreen::MergeFrom(const SystemProfileProto_Hardware_DeprecatedTouchScreen& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.SystemProfileProto.Hardware.DeprecatedTouchScreen)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      vendor_id_ = from.vendor_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      product_id_ = from.product_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SystemProfileProto_Hardware_DeprecatedTouchScreen::CopyFrom(const SystemProfileProto_Hardware_DeprecatedTouchScreen& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.SystemProfileProto.Hardware.DeprecatedTouchScreen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemProfileProto_Hardware_DeprecatedTouchScreen::IsInitialized() const {
  return true;
}

void SystemProfileProto_Hardware_DeprecatedTouchScreen::Swap(SystemProfileProto_Hardware_DeprecatedTouchScreen* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SystemProfileProto_Hardware_DeprecatedTouchScreen::InternalSwap(SystemProfileProto_Hardware_DeprecatedTouchScreen* other) {
  using std::swap;
  swap(vendor_id_, other->vendor_id_);
  swap(product_id_, other->product_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string SystemProfileProto_Hardware_DeprecatedTouchScreen::GetTypeName() const {
  return "metrics.SystemProfileProto.Hardware.DeprecatedTouchScreen";
}


// ===================================================================

void SystemProfileProto_Hardware_Drive::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SystemProfileProto_Hardware_Drive::kHasSeekPenaltyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SystemProfileProto_Hardware_Drive::SystemProfileProto_Hardware_Drive()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_system_5fprofile_2eproto::scc_info_SystemProfileProto_Hardware_Drive.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.SystemProfileProto.Hardware.Drive)
}
SystemProfileProto_Hardware_Drive::SystemProfileProto_Hardware_Drive(const SystemProfileProto_Hardware_Drive& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  has_seek_penalty_ = from.has_seek_penalty_;
  // @@protoc_insertion_point(copy_constructor:metrics.SystemProfileProto.Hardware.Drive)
}

void SystemProfileProto_Hardware_Drive::SharedCtor() {
  has_seek_penalty_ = false;
}

SystemProfileProto_Hardware_Drive::~SystemProfileProto_Hardware_Drive() {
  // @@protoc_insertion_point(destructor:metrics.SystemProfileProto.Hardware.Drive)
  SharedDtor();
}

void SystemProfileProto_Hardware_Drive::SharedDtor() {
}

void SystemProfileProto_Hardware_Drive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SystemProfileProto_Hardware_Drive& SystemProfileProto_Hardware_Drive::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_system_5fprofile_2eproto::scc_info_SystemProfileProto_Hardware_Drive.base);
  return *internal_default_instance();
}


void SystemProfileProto_Hardware_Drive::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.SystemProfileProto.Hardware.Drive)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  has_seek_penalty_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SystemProfileProto_Hardware_Drive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:metrics.SystemProfileProto.Hardware.Drive)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool has_seek_penalty = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_has_seek_penalty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_seek_penalty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.SystemProfileProto.Hardware.Drive)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.SystemProfileProto.Hardware.Drive)
  return false;
#undef DO_
}

void SystemProfileProto_Hardware_Drive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.SystemProfileProto.Hardware.Drive)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool has_seek_penalty = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->has_seek_penalty(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:metrics.SystemProfileProto.Hardware.Drive)
}

size_t SystemProfileProto_Hardware_Drive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.SystemProfileProto.Hardware.Drive)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // optional bool has_seek_penalty = 1;
  if (has_has_seek_penalty()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SystemProfileProto_Hardware_Drive::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SystemProfileProto_Hardware_Drive*>(&from));
}

void SystemProfileProto_Hardware_Drive::MergeFrom(const SystemProfileProto_Hardware_Drive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.SystemProfileProto.Hardware.Drive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_has_seek_penalty()) {
    set_has_seek_penalty(from.has_seek_penalty());
  }
}

void SystemProfileProto_Hardware_Drive::CopyFrom(const SystemProfileProto_Hardware_Drive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.SystemProfileProto.Hardware.Drive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemProfileProto_Hardware_Drive::IsInitialized() const {
  return true;
}

void SystemProfileProto_Hardware_Drive::Swap(SystemProfileProto_Hardware_Drive* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SystemProfileProto_Hardware_Drive::InternalSwap(SystemProfileProto_Hardware_Drive* other) {
  using std::swap;
  swap(has_seek_penalty_, other->has_seek_penalty_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string SystemProfileProto_Hardware_Drive::GetTypeName() const {
  return "metrics.SystemProfileProto.Hardware.Drive";
}


// ===================================================================

void SystemProfileProto_Hardware::InitAsDefaultInstance() {
  ::metrics::_SystemProfileProto_Hardware_default_instance_._instance.get_mutable()->cpu_ = const_cast< ::metrics::SystemProfileProto_Hardware_CPU*>(
      ::metrics::SystemProfileProto_Hardware_CPU::internal_default_instance());
  ::metrics::_SystemProfileProto_Hardware_default_instance_._instance.get_mutable()->gpu_ = const_cast< ::metrics::SystemProfileProto_Hardware_Graphics*>(
      ::metrics::SystemProfileProto_Hardware_Graphics::internal_default_instance());
  ::metrics::_SystemProfileProto_Hardware_default_instance_._instance.get_mutable()->bluetooth_ = const_cast< ::metrics::SystemProfileProto_Hardware_Bluetooth*>(
      ::metrics::SystemProfileProto_Hardware_Bluetooth::internal_default_instance());
  ::metrics::_SystemProfileProto_Hardware_default_instance_._instance.get_mutable()->app_drive_ = const_cast< ::metrics::SystemProfileProto_Hardware_Drive*>(
      ::metrics::SystemProfileProto_Hardware_Drive::internal_default_instance());
  ::metrics::_SystemProfileProto_Hardware_default_instance_._instance.get_mutable()->user_data_drive_ = const_cast< ::metrics::SystemProfileProto_Hardware_Drive*>(
      ::metrics::SystemProfileProto_Hardware_Drive::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SystemProfileProto_Hardware::kCpuArchitectureFieldNumber;
const int SystemProfileProto_Hardware::kSystemRamMbFieldNumber;
const int SystemProfileProto_Hardware::kDllBaseFieldNumber;
const int SystemProfileProto_Hardware::kHardwareClassFieldNumber;
const int SystemProfileProto_Hardware::kFullHardwareClassFieldNumber;
const int SystemProfileProto_Hardware::kScreenCountFieldNumber;
const int SystemProfileProto_Hardware::kPrimaryScreenWidthFieldNumber;
const int SystemProfileProto_Hardware::kPrimaryScreenHeightFieldNumber;
const int SystemProfileProto_Hardware::kPrimaryScreenScaleFactorFieldNumber;
const int SystemProfileProto_Hardware::kMaxDpiXFieldNumber;
const int SystemProfileProto_Hardware::kMaxDpiYFieldNumber;
const int SystemProfileProto_Hardware::kCpuFieldNumber;
const int SystemProfileProto_Hardware::kGpuFieldNumber;
const int SystemProfileProto_Hardware::kBluetoothFieldNumber;
const int SystemProfileProto_Hardware::kInternalDisplaySupportsTouchFieldNumber;
const int SystemProfileProto_Hardware::kDeprecatedExternalTouchscreenFieldNumber;
const int SystemProfileProto_Hardware::kAppDriveFieldNumber;
const int SystemProfileProto_Hardware::kUserDataDriveFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SystemProfileProto_Hardware::SystemProfileProto_Hardware()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_system_5fprofile_2eproto::scc_info_SystemProfileProto_Hardware.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.SystemProfileProto.Hardware)
}
SystemProfileProto_Hardware::SystemProfileProto_Hardware(const SystemProfileProto_Hardware& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      deprecated_external_touchscreen_(from.deprecated_external_touchscreen_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cpu_architecture_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_cpu_architecture()) {
    cpu_architecture_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cpu_architecture_);
  }
  hardware_class_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_hardware_class()) {
    hardware_class_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hardware_class_);
  }
  full_hardware_class_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_full_hardware_class()) {
    full_hardware_class_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.full_hardware_class_);
  }
  if (from.has_gpu()) {
    gpu_ = new ::metrics::SystemProfileProto_Hardware_Graphics(*from.gpu_);
  } else {
    gpu_ = NULL;
  }
  if (from.has_bluetooth()) {
    bluetooth_ = new ::metrics::SystemProfileProto_Hardware_Bluetooth(*from.bluetooth_);
  } else {
    bluetooth_ = NULL;
  }
  if (from.has_cpu()) {
    cpu_ = new ::metrics::SystemProfileProto_Hardware_CPU(*from.cpu_);
  } else {
    cpu_ = NULL;
  }
  if (from.has_app_drive()) {
    app_drive_ = new ::metrics::SystemProfileProto_Hardware_Drive(*from.app_drive_);
  } else {
    app_drive_ = NULL;
  }
  if (from.has_user_data_drive()) {
    user_data_drive_ = new ::metrics::SystemProfileProto_Hardware_Drive(*from.user_data_drive_);
  } else {
    user_data_drive_ = NULL;
  }
  ::memcpy(&system_ram_mb_, &from.system_ram_mb_,
    static_cast<size_t>(reinterpret_cast<char*>(&internal_display_supports_touch_) -
    reinterpret_cast<char*>(&system_ram_mb_)) + sizeof(internal_display_supports_touch_));
  // @@protoc_insertion_point(copy_constructor:metrics.SystemProfileProto.Hardware)
}

void SystemProfileProto_Hardware::SharedCtor() {
  cpu_architecture_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hardware_class_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  full_hardware_class_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&gpu_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&internal_display_supports_touch_) -
      reinterpret_cast<char*>(&gpu_)) + sizeof(internal_display_supports_touch_));
}

SystemProfileProto_Hardware::~SystemProfileProto_Hardware() {
  // @@protoc_insertion_point(destructor:metrics.SystemProfileProto.Hardware)
  SharedDtor();
}

void SystemProfileProto_Hardware::SharedDtor() {
  cpu_architecture_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hardware_class_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  full_hardware_class_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete gpu_;
  if (this != internal_default_instance()) delete bluetooth_;
  if (this != internal_default_instance()) delete cpu_;
  if (this != internal_default_instance()) delete app_drive_;
  if (this != internal_default_instance()) delete user_data_drive_;
}

void SystemProfileProto_Hardware::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SystemProfileProto_Hardware& SystemProfileProto_Hardware::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_system_5fprofile_2eproto::scc_info_SystemProfileProto_Hardware.base);
  return *internal_default_instance();
}


void SystemProfileProto_Hardware::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.SystemProfileProto.Hardware)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  deprecated_external_touchscreen_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      cpu_architecture_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      hardware_class_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      full_hardware_class_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(gpu_ != NULL);
      gpu_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(bluetooth_ != NULL);
      bluetooth_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(cpu_ != NULL);
      cpu_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(app_drive_ != NULL);
      app_drive_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(user_data_drive_ != NULL);
      user_data_drive_->Clear();
    }
  }
  if (cached_has_bits & 65280u) {
    ::memset(&system_ram_mb_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&primary_screen_scale_factor_) -
        reinterpret_cast<char*>(&system_ram_mb_)) + sizeof(primary_screen_scale_factor_));
  }
  internal_display_supports_touch_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SystemProfileProto_Hardware::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:metrics.SystemProfileProto.Hardware)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string cpu_architecture = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cpu_architecture()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 system_ram_mb = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_system_ram_mb();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &system_ram_mb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 dll_base = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_dll_base();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dll_base_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string hardware_class = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hardware_class()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 screen_count = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_screen_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &screen_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 primary_screen_width = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_primary_screen_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &primary_screen_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 primary_screen_height = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_primary_screen_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &primary_screen_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .metrics.SystemProfileProto.Hardware.Graphics gpu = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_gpu()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float max_dpi_x = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {
          set_has_max_dpi_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_dpi_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float max_dpi_y = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {
          set_has_max_dpi_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_dpi_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .metrics.SystemProfileProto.Hardware.Bluetooth bluetooth = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_bluetooth()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float primary_screen_scale_factor = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u /* 101 & 0xFF */)) {
          set_has_primary_screen_scale_factor();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &primary_screen_scale_factor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .metrics.SystemProfileProto.Hardware.CPU cpu = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cpu()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool internal_display_supports_touch = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_internal_display_supports_touch();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &internal_display_supports_touch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .metrics.SystemProfileProto.Hardware.DeprecatedTouchScreen deprecated_external_touchscreen = 15 [deprecated = true];
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_deprecated_external_touchscreen()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .metrics.SystemProfileProto.Hardware.Drive app_drive = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_app_drive()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .metrics.SystemProfileProto.Hardware.Drive user_data_drive = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_user_data_drive()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string full_hardware_class = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_full_hardware_class()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.SystemProfileProto.Hardware)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.SystemProfileProto.Hardware)
  return false;
#undef DO_
}

void SystemProfileProto_Hardware::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.SystemProfileProto.Hardware)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string cpu_architecture = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->cpu_architecture(), output);
  }

  // optional int64 system_ram_mb = 2;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->system_ram_mb(), output);
  }

  // optional int64 dll_base = 3;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->dll_base(), output);
  }

  // optional string hardware_class = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->hardware_class(), output);
  }

  // optional int32 screen_count = 5;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->screen_count(), output);
  }

  // optional int32 primary_screen_width = 6;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->primary_screen_width(), output);
  }

  // optional int32 primary_screen_height = 7;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->primary_screen_height(), output);
  }

  // optional .metrics.SystemProfileProto.Hardware.Graphics gpu = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->_internal_gpu(), output);
  }

  // optional float max_dpi_x = 9;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->max_dpi_x(), output);
  }

  // optional float max_dpi_y = 10;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->max_dpi_y(), output);
  }

  // optional .metrics.SystemProfileProto.Hardware.Bluetooth bluetooth = 11;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11, this->_internal_bluetooth(), output);
  }

  // optional float primary_screen_scale_factor = 12;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->primary_screen_scale_factor(), output);
  }

  // optional .metrics.SystemProfileProto.Hardware.CPU cpu = 13;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      13, this->_internal_cpu(), output);
  }

  // optional bool internal_display_supports_touch = 14;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->internal_display_supports_touch(), output);
  }

  // repeated .metrics.SystemProfileProto.Hardware.DeprecatedTouchScreen deprecated_external_touchscreen = 15 [deprecated = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->deprecated_external_touchscreen_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      15,
      this->deprecated_external_touchscreen(static_cast<int>(i)),
      output);
  }

  // optional .metrics.SystemProfileProto.Hardware.Drive app_drive = 16;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      16, this->_internal_app_drive(), output);
  }

  // optional .metrics.SystemProfileProto.Hardware.Drive user_data_drive = 17;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      17, this->_internal_user_data_drive(), output);
  }

  // optional string full_hardware_class = 18;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->full_hardware_class(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:metrics.SystemProfileProto.Hardware)
}

size_t SystemProfileProto_Hardware::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.SystemProfileProto.Hardware)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // repeated .metrics.SystemProfileProto.Hardware.DeprecatedTouchScreen deprecated_external_touchscreen = 15 [deprecated = true];
  {
    unsigned int count = static_cast<unsigned int>(this->deprecated_external_touchscreen_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->deprecated_external_touchscreen(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string cpu_architecture = 1;
    if (has_cpu_architecture()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cpu_architecture());
    }

    // optional string hardware_class = 4;
    if (has_hardware_class()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hardware_class());
    }

    // optional string full_hardware_class = 18;
    if (has_full_hardware_class()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->full_hardware_class());
    }

    // optional .metrics.SystemProfileProto.Hardware.Graphics gpu = 8;
    if (has_gpu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *gpu_);
    }

    // optional .metrics.SystemProfileProto.Hardware.Bluetooth bluetooth = 11;
    if (has_bluetooth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *bluetooth_);
    }

    // optional .metrics.SystemProfileProto.Hardware.CPU cpu = 13;
    if (has_cpu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *cpu_);
    }

    // optional .metrics.SystemProfileProto.Hardware.Drive app_drive = 16;
    if (has_app_drive()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *app_drive_);
    }

    // optional .metrics.SystemProfileProto.Hardware.Drive user_data_drive = 17;
    if (has_user_data_drive()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *user_data_drive_);
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional int64 system_ram_mb = 2;
    if (has_system_ram_mb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->system_ram_mb());
    }

    // optional int64 dll_base = 3;
    if (has_dll_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dll_base());
    }

    // optional int32 screen_count = 5;
    if (has_screen_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->screen_count());
    }

    // optional int32 primary_screen_width = 6;
    if (has_primary_screen_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->primary_screen_width());
    }

    // optional int32 primary_screen_height = 7;
    if (has_primary_screen_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->primary_screen_height());
    }

    // optional float max_dpi_x = 9;
    if (has_max_dpi_x()) {
      total_size += 1 + 4;
    }

    // optional float max_dpi_y = 10;
    if (has_max_dpi_y()) {
      total_size += 1 + 4;
    }

    // optional float primary_screen_scale_factor = 12;
    if (has_primary_screen_scale_factor()) {
      total_size += 1 + 4;
    }

  }
  // optional bool internal_display_supports_touch = 14;
  if (has_internal_display_supports_touch()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SystemProfileProto_Hardware::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SystemProfileProto_Hardware*>(&from));
}

void SystemProfileProto_Hardware::MergeFrom(const SystemProfileProto_Hardware& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.SystemProfileProto.Hardware)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  deprecated_external_touchscreen_.MergeFrom(from.deprecated_external_touchscreen_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_cpu_architecture();
      cpu_architecture_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cpu_architecture_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_hardware_class();
      hardware_class_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hardware_class_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_full_hardware_class();
      full_hardware_class_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.full_hardware_class_);
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_gpu()->::metrics::SystemProfileProto_Hardware_Graphics::MergeFrom(from.gpu());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_bluetooth()->::metrics::SystemProfileProto_Hardware_Bluetooth::MergeFrom(from.bluetooth());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_cpu()->::metrics::SystemProfileProto_Hardware_CPU::MergeFrom(from.cpu());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_app_drive()->::metrics::SystemProfileProto_Hardware_Drive::MergeFrom(from.app_drive());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_user_data_drive()->::metrics::SystemProfileProto_Hardware_Drive::MergeFrom(from.user_data_drive());
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      system_ram_mb_ = from.system_ram_mb_;
    }
    if (cached_has_bits & 0x00000200u) {
      dll_base_ = from.dll_base_;
    }
    if (cached_has_bits & 0x00000400u) {
      screen_count_ = from.screen_count_;
    }
    if (cached_has_bits & 0x00000800u) {
      primary_screen_width_ = from.primary_screen_width_;
    }
    if (cached_has_bits & 0x00001000u) {
      primary_screen_height_ = from.primary_screen_height_;
    }
    if (cached_has_bits & 0x00002000u) {
      max_dpi_x_ = from.max_dpi_x_;
    }
    if (cached_has_bits & 0x00004000u) {
      max_dpi_y_ = from.max_dpi_y_;
    }
    if (cached_has_bits & 0x00008000u) {
      primary_screen_scale_factor_ = from.primary_screen_scale_factor_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    set_internal_display_supports_touch(from.internal_display_supports_touch());
  }
}

void SystemProfileProto_Hardware::CopyFrom(const SystemProfileProto_Hardware& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.SystemProfileProto.Hardware)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemProfileProto_Hardware::IsInitialized() const {
  return true;
}

void SystemProfileProto_Hardware::Swap(SystemProfileProto_Hardware* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SystemProfileProto_Hardware::InternalSwap(SystemProfileProto_Hardware* other) {
  using std::swap;
  CastToBase(&deprecated_external_touchscreen_)->InternalSwap(CastToBase(&other->deprecated_external_touchscreen_));
  cpu_architecture_.Swap(&other->cpu_architecture_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  hardware_class_.Swap(&other->hardware_class_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  full_hardware_class_.Swap(&other->full_hardware_class_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(gpu_, other->gpu_);
  swap(bluetooth_, other->bluetooth_);
  swap(cpu_, other->cpu_);
  swap(app_drive_, other->app_drive_);
  swap(user_data_drive_, other->user_data_drive_);
  swap(system_ram_mb_, other->system_ram_mb_);
  swap(dll_base_, other->dll_base_);
  swap(screen_count_, other->screen_count_);
  swap(primary_screen_width_, other->primary_screen_width_);
  swap(primary_screen_height_, other->primary_screen_height_);
  swap(max_dpi_x_, other->max_dpi_x_);
  swap(max_dpi_y_, other->max_dpi_y_);
  swap(primary_screen_scale_factor_, other->primary_screen_scale_factor_);
  swap(internal_display_supports_touch_, other->internal_display_supports_touch_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string SystemProfileProto_Hardware::GetTypeName() const {
  return "metrics.SystemProfileProto.Hardware";
}


// ===================================================================

void SystemProfileProto_Network_WifiAccessPoint_VendorInformation::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SystemProfileProto_Network_WifiAccessPoint_VendorInformation::kModelNumberFieldNumber;
const int SystemProfileProto_Network_WifiAccessPoint_VendorInformation::kModelNameFieldNumber;
const int SystemProfileProto_Network_WifiAccessPoint_VendorInformation::kDeviceNameFieldNumber;
const int SystemProfileProto_Network_WifiAccessPoint_VendorInformation::kElementIdentifierFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SystemProfileProto_Network_WifiAccessPoint_VendorInformation::SystemProfileProto_Network_WifiAccessPoint_VendorInformation()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_system_5fprofile_2eproto::scc_info_SystemProfileProto_Network_WifiAccessPoint_VendorInformation.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.SystemProfileProto.Network.WifiAccessPoint.VendorInformation)
}
SystemProfileProto_Network_WifiAccessPoint_VendorInformation::SystemProfileProto_Network_WifiAccessPoint_VendorInformation(const SystemProfileProto_Network_WifiAccessPoint_VendorInformation& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      element_identifier_(from.element_identifier_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  model_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_model_number()) {
    model_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_number_);
  }
  model_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_model_name()) {
    model_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_name_);
  }
  device_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_device_name()) {
    device_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_name_);
  }
  // @@protoc_insertion_point(copy_constructor:metrics.SystemProfileProto.Network.WifiAccessPoint.VendorInformation)
}

void SystemProfileProto_Network_WifiAccessPoint_VendorInformation::SharedCtor() {
  model_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SystemProfileProto_Network_WifiAccessPoint_VendorInformation::~SystemProfileProto_Network_WifiAccessPoint_VendorInformation() {
  // @@protoc_insertion_point(destructor:metrics.SystemProfileProto.Network.WifiAccessPoint.VendorInformation)
  SharedDtor();
}

void SystemProfileProto_Network_WifiAccessPoint_VendorInformation::SharedDtor() {
  model_number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SystemProfileProto_Network_WifiAccessPoint_VendorInformation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SystemProfileProto_Network_WifiAccessPoint_VendorInformation& SystemProfileProto_Network_WifiAccessPoint_VendorInformation::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_system_5fprofile_2eproto::scc_info_SystemProfileProto_Network_WifiAccessPoint_VendorInformation.base);
  return *internal_default_instance();
}


void SystemProfileProto_Network_WifiAccessPoint_VendorInformation::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.SystemProfileProto.Network.WifiAccessPoint.VendorInformation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  element_identifier_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      model_number_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      model_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      device_name_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SystemProfileProto_Network_WifiAccessPoint_VendorInformation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:metrics.SystemProfileProto.Network.WifiAccessPoint.VendorInformation)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string model_number = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model_number()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string model_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string device_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 element_identifier = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32u, input, this->mutable_element_identifier())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_element_identifier())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.SystemProfileProto.Network.WifiAccessPoint.VendorInformation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.SystemProfileProto.Network.WifiAccessPoint.VendorInformation)
  return false;
#undef DO_
}

void SystemProfileProto_Network_WifiAccessPoint_VendorInformation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.SystemProfileProto.Network.WifiAccessPoint.VendorInformation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string model_number = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->model_number(), output);
  }

  // optional string model_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->model_name(), output);
  }

  // optional string device_name = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->device_name(), output);
  }

  // repeated uint32 element_identifier = 4;
  for (int i = 0, n = this->element_identifier_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->element_identifier(i), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:metrics.SystemProfileProto.Network.WifiAccessPoint.VendorInformation)
}

size_t SystemProfileProto_Network_WifiAccessPoint_VendorInformation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.SystemProfileProto.Network.WifiAccessPoint.VendorInformation)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // repeated uint32 element_identifier = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->element_identifier_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->element_identifier_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional string model_number = 1;
    if (has_model_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->model_number());
    }

    // optional string model_name = 2;
    if (has_model_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->model_name());
    }

    // optional string device_name = 3;
    if (has_device_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_name());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SystemProfileProto_Network_WifiAccessPoint_VendorInformation::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SystemProfileProto_Network_WifiAccessPoint_VendorInformation*>(&from));
}

void SystemProfileProto_Network_WifiAccessPoint_VendorInformation::MergeFrom(const SystemProfileProto_Network_WifiAccessPoint_VendorInformation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.SystemProfileProto.Network.WifiAccessPoint.VendorInformation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  element_identifier_.MergeFrom(from.element_identifier_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_model_number();
      model_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_number_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_model_name();
      model_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_device_name();
      device_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_name_);
    }
  }
}

void SystemProfileProto_Network_WifiAccessPoint_VendorInformation::CopyFrom(const SystemProfileProto_Network_WifiAccessPoint_VendorInformation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.SystemProfileProto.Network.WifiAccessPoint.VendorInformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemProfileProto_Network_WifiAccessPoint_VendorInformation::IsInitialized() const {
  return true;
}

void SystemProfileProto_Network_WifiAccessPoint_VendorInformation::Swap(SystemProfileProto_Network_WifiAccessPoint_VendorInformation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SystemProfileProto_Network_WifiAccessPoint_VendorInformation::InternalSwap(SystemProfileProto_Network_WifiAccessPoint_VendorInformation* other) {
  using std::swap;
  element_identifier_.InternalSwap(&other->element_identifier_);
  model_number_.Swap(&other->model_number_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  model_name_.Swap(&other->model_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  device_name_.Swap(&other->device_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string SystemProfileProto_Network_WifiAccessPoint_VendorInformation::GetTypeName() const {
  return "metrics.SystemProfileProto.Network.WifiAccessPoint.VendorInformation";
}


// ===================================================================

void SystemProfileProto_Network_WifiAccessPoint::InitAsDefaultInstance() {
  ::metrics::_SystemProfileProto_Network_WifiAccessPoint_default_instance_._instance.get_mutable()->vendor_info_ = const_cast< ::metrics::SystemProfileProto_Network_WifiAccessPoint_VendorInformation*>(
      ::metrics::SystemProfileProto_Network_WifiAccessPoint_VendorInformation::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SystemProfileProto_Network_WifiAccessPoint::kVendorPrefixFieldNumber;
const int SystemProfileProto_Network_WifiAccessPoint::kSecurityModeFieldNumber;
const int SystemProfileProto_Network_WifiAccessPoint::kVendorInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SystemProfileProto_Network_WifiAccessPoint::SystemProfileProto_Network_WifiAccessPoint()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_system_5fprofile_2eproto::scc_info_SystemProfileProto_Network_WifiAccessPoint.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.SystemProfileProto.Network.WifiAccessPoint)
}
SystemProfileProto_Network_WifiAccessPoint::SystemProfileProto_Network_WifiAccessPoint(const SystemProfileProto_Network_WifiAccessPoint& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_vendor_info()) {
    vendor_info_ = new ::metrics::SystemProfileProto_Network_WifiAccessPoint_VendorInformation(*from.vendor_info_);
  } else {
    vendor_info_ = NULL;
  }
  ::memcpy(&vendor_prefix_, &from.vendor_prefix_,
    static_cast<size_t>(reinterpret_cast<char*>(&security_mode_) -
    reinterpret_cast<char*>(&vendor_prefix_)) + sizeof(security_mode_));
  // @@protoc_insertion_point(copy_constructor:metrics.SystemProfileProto.Network.WifiAccessPoint)
}

void SystemProfileProto_Network_WifiAccessPoint::SharedCtor() {
  ::memset(&vendor_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&security_mode_) -
      reinterpret_cast<char*>(&vendor_info_)) + sizeof(security_mode_));
}

SystemProfileProto_Network_WifiAccessPoint::~SystemProfileProto_Network_WifiAccessPoint() {
  // @@protoc_insertion_point(destructor:metrics.SystemProfileProto.Network.WifiAccessPoint)
  SharedDtor();
}

void SystemProfileProto_Network_WifiAccessPoint::SharedDtor() {
  if (this != internal_default_instance()) delete vendor_info_;
}

void SystemProfileProto_Network_WifiAccessPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SystemProfileProto_Network_WifiAccessPoint& SystemProfileProto_Network_WifiAccessPoint::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_system_5fprofile_2eproto::scc_info_SystemProfileProto_Network_WifiAccessPoint.base);
  return *internal_default_instance();
}


void SystemProfileProto_Network_WifiAccessPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.SystemProfileProto.Network.WifiAccessPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(vendor_info_ != NULL);
    vendor_info_->Clear();
  }
  if (cached_has_bits & 6u) {
    ::memset(&vendor_prefix_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&security_mode_) -
        reinterpret_cast<char*>(&vendor_prefix_)) + sizeof(security_mode_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SystemProfileProto_Network_WifiAccessPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:metrics.SystemProfileProto.Network.WifiAccessPoint)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 vendor_prefix = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_vendor_prefix();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vendor_prefix_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .metrics.SystemProfileProto.Network.WifiAccessPoint.SecurityMode security_mode = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::metrics::SystemProfileProto_Network_WifiAccessPoint_SecurityMode_IsValid(value)) {
            set_security_mode(static_cast< ::metrics::SystemProfileProto_Network_WifiAccessPoint_SecurityMode >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .metrics.SystemProfileProto.Network.WifiAccessPoint.VendorInformation vendor_info = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_vendor_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.SystemProfileProto.Network.WifiAccessPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.SystemProfileProto.Network.WifiAccessPoint)
  return false;
#undef DO_
}

void SystemProfileProto_Network_WifiAccessPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.SystemProfileProto.Network.WifiAccessPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 vendor_prefix = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->vendor_prefix(), output);
  }

  // optional .metrics.SystemProfileProto.Network.WifiAccessPoint.SecurityMode security_mode = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->security_mode(), output);
  }

  // optional .metrics.SystemProfileProto.Network.WifiAccessPoint.VendorInformation vendor_info = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->_internal_vendor_info(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:metrics.SystemProfileProto.Network.WifiAccessPoint)
}

size_t SystemProfileProto_Network_WifiAccessPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.SystemProfileProto.Network.WifiAccessPoint)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 7u) {
    // optional .metrics.SystemProfileProto.Network.WifiAccessPoint.VendorInformation vendor_info = 3;
    if (has_vendor_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *vendor_info_);
    }

    // optional uint32 vendor_prefix = 1;
    if (has_vendor_prefix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vendor_prefix());
    }

    // optional .metrics.SystemProfileProto.Network.WifiAccessPoint.SecurityMode security_mode = 2;
    if (has_security_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->security_mode());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SystemProfileProto_Network_WifiAccessPoint::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SystemProfileProto_Network_WifiAccessPoint*>(&from));
}

void SystemProfileProto_Network_WifiAccessPoint::MergeFrom(const SystemProfileProto_Network_WifiAccessPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.SystemProfileProto.Network.WifiAccessPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_vendor_info()->::metrics::SystemProfileProto_Network_WifiAccessPoint_VendorInformation::MergeFrom(from.vendor_info());
    }
    if (cached_has_bits & 0x00000002u) {
      vendor_prefix_ = from.vendor_prefix_;
    }
    if (cached_has_bits & 0x00000004u) {
      security_mode_ = from.security_mode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SystemProfileProto_Network_WifiAccessPoint::CopyFrom(const SystemProfileProto_Network_WifiAccessPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.SystemProfileProto.Network.WifiAccessPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemProfileProto_Network_WifiAccessPoint::IsInitialized() const {
  return true;
}

void SystemProfileProto_Network_WifiAccessPoint::Swap(SystemProfileProto_Network_WifiAccessPoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SystemProfileProto_Network_WifiAccessPoint::InternalSwap(SystemProfileProto_Network_WifiAccessPoint* other) {
  using std::swap;
  swap(vendor_info_, other->vendor_info_);
  swap(vendor_prefix_, other->vendor_prefix_);
  swap(security_mode_, other->security_mode_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string SystemProfileProto_Network_WifiAccessPoint::GetTypeName() const {
  return "metrics.SystemProfileProto.Network.WifiAccessPoint";
}


// ===================================================================

void SystemProfileProto_Network::InitAsDefaultInstance() {
  ::metrics::_SystemProfileProto_Network_default_instance_._instance.get_mutable()->access_point_info_ = const_cast< ::metrics::SystemProfileProto_Network_WifiAccessPoint*>(
      ::metrics::SystemProfileProto_Network_WifiAccessPoint::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SystemProfileProto_Network::kConnectionTypeIsAmbiguousFieldNumber;
const int SystemProfileProto_Network::kConnectionTypeFieldNumber;
const int SystemProfileProto_Network::kWifiPhyLayerProtocolIsAmbiguousFieldNumber;
const int SystemProfileProto_Network::kWifiPhyLayerProtocolFieldNumber;
const int SystemProfileProto_Network::kAccessPointInfoFieldNumber;
const int SystemProfileProto_Network::kDeprecatedEffectiveConnectionTypeFieldNumber;
const int SystemProfileProto_Network::kMinEffectiveConnectionTypeFieldNumber;
const int SystemProfileProto_Network::kMaxEffectiveConnectionTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SystemProfileProto_Network::SystemProfileProto_Network()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_system_5fprofile_2eproto::scc_info_SystemProfileProto_Network.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.SystemProfileProto.Network)
}
SystemProfileProto_Network::SystemProfileProto_Network(const SystemProfileProto_Network& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_access_point_info()) {
    access_point_info_ = new ::metrics::SystemProfileProto_Network_WifiAccessPoint(*from.access_point_info_);
  } else {
    access_point_info_ = NULL;
  }
  ::memcpy(&connection_type_, &from.connection_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_effective_connection_type_) -
    reinterpret_cast<char*>(&connection_type_)) + sizeof(max_effective_connection_type_));
  // @@protoc_insertion_point(copy_constructor:metrics.SystemProfileProto.Network)
}

void SystemProfileProto_Network::SharedCtor() {
  ::memset(&access_point_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_effective_connection_type_) -
      reinterpret_cast<char*>(&access_point_info_)) + sizeof(max_effective_connection_type_));
}

SystemProfileProto_Network::~SystemProfileProto_Network() {
  // @@protoc_insertion_point(destructor:metrics.SystemProfileProto.Network)
  SharedDtor();
}

void SystemProfileProto_Network::SharedDtor() {
  if (this != internal_default_instance()) delete access_point_info_;
}

void SystemProfileProto_Network::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SystemProfileProto_Network& SystemProfileProto_Network::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_system_5fprofile_2eproto::scc_info_SystemProfileProto_Network.base);
  return *internal_default_instance();
}


void SystemProfileProto_Network::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.SystemProfileProto.Network)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(access_point_info_ != NULL);
    access_point_info_->Clear();
  }
  if (cached_has_bits & 254u) {
    ::memset(&connection_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_effective_connection_type_) -
        reinterpret_cast<char*>(&connection_type_)) + sizeof(max_effective_connection_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SystemProfileProto_Network::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:metrics.SystemProfileProto.Network)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool connection_type_is_ambiguous = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_connection_type_is_ambiguous();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &connection_type_is_ambiguous_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .metrics.SystemProfileProto.Network.ConnectionType connection_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::metrics::SystemProfileProto_Network_ConnectionType_IsValid(value)) {
            set_connection_type(static_cast< ::metrics::SystemProfileProto_Network_ConnectionType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool wifi_phy_layer_protocol_is_ambiguous = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_wifi_phy_layer_protocol_is_ambiguous();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &wifi_phy_layer_protocol_is_ambiguous_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .metrics.SystemProfileProto.Network.WifiPHYLayerProtocol wifi_phy_layer_protocol = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::metrics::SystemProfileProto_Network_WifiPHYLayerProtocol_IsValid(value)) {
            set_wifi_phy_layer_protocol(static_cast< ::metrics::SystemProfileProto_Network_WifiPHYLayerProtocol >(value));
          } else {
            unknown_fields_stream.WriteVarint32(32u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .metrics.SystemProfileProto.Network.WifiAccessPoint access_point_info = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_access_point_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .metrics.SystemProfileProto.Network.EffectiveConnectionType deprecated_effective_connection_type = 6 [deprecated = true];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::metrics::SystemProfileProto_Network_EffectiveConnectionType_IsValid(value)) {
            set_deprecated_effective_connection_type(static_cast< ::metrics::SystemProfileProto_Network_EffectiveConnectionType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(48u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .metrics.SystemProfileProto.Network.EffectiveConnectionType min_effective_connection_type = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::metrics::SystemProfileProto_Network_EffectiveConnectionType_IsValid(value)) {
            set_min_effective_connection_type(static_cast< ::metrics::SystemProfileProto_Network_EffectiveConnectionType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(56u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .metrics.SystemProfileProto.Network.EffectiveConnectionType max_effective_connection_type = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::metrics::SystemProfileProto_Network_EffectiveConnectionType_IsValid(value)) {
            set_max_effective_connection_type(static_cast< ::metrics::SystemProfileProto_Network_EffectiveConnectionType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(64u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.SystemProfileProto.Network)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.SystemProfileProto.Network)
  return false;
#undef DO_
}

void SystemProfileProto_Network::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.SystemProfileProto.Network)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool connection_type_is_ambiguous = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->connection_type_is_ambiguous(), output);
  }

  // optional .metrics.SystemProfileProto.Network.ConnectionType connection_type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->connection_type(), output);
  }

  // optional bool wifi_phy_layer_protocol_is_ambiguous = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->wifi_phy_layer_protocol_is_ambiguous(), output);
  }

  // optional .metrics.SystemProfileProto.Network.WifiPHYLayerProtocol wifi_phy_layer_protocol = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->wifi_phy_layer_protocol(), output);
  }

  // optional .metrics.SystemProfileProto.Network.WifiAccessPoint access_point_info = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->_internal_access_point_info(), output);
  }

  // optional .metrics.SystemProfileProto.Network.EffectiveConnectionType deprecated_effective_connection_type = 6 [deprecated = true];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->deprecated_effective_connection_type(), output);
  }

  // optional .metrics.SystemProfileProto.Network.EffectiveConnectionType min_effective_connection_type = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->min_effective_connection_type(), output);
  }

  // optional .metrics.SystemProfileProto.Network.EffectiveConnectionType max_effective_connection_type = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->max_effective_connection_type(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:metrics.SystemProfileProto.Network)
}

size_t SystemProfileProto_Network::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.SystemProfileProto.Network)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 255u) {
    // optional .metrics.SystemProfileProto.Network.WifiAccessPoint access_point_info = 5;
    if (has_access_point_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *access_point_info_);
    }

    // optional .metrics.SystemProfileProto.Network.ConnectionType connection_type = 2;
    if (has_connection_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->connection_type());
    }

    // optional bool connection_type_is_ambiguous = 1;
    if (has_connection_type_is_ambiguous()) {
      total_size += 1 + 1;
    }

    // optional bool wifi_phy_layer_protocol_is_ambiguous = 3;
    if (has_wifi_phy_layer_protocol_is_ambiguous()) {
      total_size += 1 + 1;
    }

    // optional .metrics.SystemProfileProto.Network.WifiPHYLayerProtocol wifi_phy_layer_protocol = 4;
    if (has_wifi_phy_layer_protocol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->wifi_phy_layer_protocol());
    }

    // optional .metrics.SystemProfileProto.Network.EffectiveConnectionType deprecated_effective_connection_type = 6 [deprecated = true];
    if (has_deprecated_effective_connection_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->deprecated_effective_connection_type());
    }

    // optional .metrics.SystemProfileProto.Network.EffectiveConnectionType min_effective_connection_type = 7;
    if (has_min_effective_connection_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->min_effective_connection_type());
    }

    // optional .metrics.SystemProfileProto.Network.EffectiveConnectionType max_effective_connection_type = 8;
    if (has_max_effective_connection_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->max_effective_connection_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SystemProfileProto_Network::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SystemProfileProto_Network*>(&from));
}

void SystemProfileProto_Network::MergeFrom(const SystemProfileProto_Network& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.SystemProfileProto.Network)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_access_point_info()->::metrics::SystemProfileProto_Network_WifiAccessPoint::MergeFrom(from.access_point_info());
    }
    if (cached_has_bits & 0x00000002u) {
      connection_type_ = from.connection_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      connection_type_is_ambiguous_ = from.connection_type_is_ambiguous_;
    }
    if (cached_has_bits & 0x00000008u) {
      wifi_phy_layer_protocol_is_ambiguous_ = from.wifi_phy_layer_protocol_is_ambiguous_;
    }
    if (cached_has_bits & 0x00000010u) {
      wifi_phy_layer_protocol_ = from.wifi_phy_layer_protocol_;
    }
    if (cached_has_bits & 0x00000020u) {
      deprecated_effective_connection_type_ = from.deprecated_effective_connection_type_;
    }
    if (cached_has_bits & 0x00000040u) {
      min_effective_connection_type_ = from.min_effective_connection_type_;
    }
    if (cached_has_bits & 0x00000080u) {
      max_effective_connection_type_ = from.max_effective_connection_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SystemProfileProto_Network::CopyFrom(const SystemProfileProto_Network& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.SystemProfileProto.Network)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemProfileProto_Network::IsInitialized() const {
  return true;
}

void SystemProfileProto_Network::Swap(SystemProfileProto_Network* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SystemProfileProto_Network::InternalSwap(SystemProfileProto_Network* other) {
  using std::swap;
  swap(access_point_info_, other->access_point_info_);
  swap(connection_type_, other->connection_type_);
  swap(connection_type_is_ambiguous_, other->connection_type_is_ambiguous_);
  swap(wifi_phy_layer_protocol_is_ambiguous_, other->wifi_phy_layer_protocol_is_ambiguous_);
  swap(wifi_phy_layer_protocol_, other->wifi_phy_layer_protocol_);
  swap(deprecated_effective_connection_type_, other->deprecated_effective_connection_type_);
  swap(min_effective_connection_type_, other->min_effective_connection_type_);
  swap(max_effective_connection_type_, other->max_effective_connection_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string SystemProfileProto_Network::GetTypeName() const {
  return "metrics.SystemProfileProto.Network";
}


// ===================================================================

void SystemProfileProto_GoogleUpdate_ProductInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SystemProfileProto_GoogleUpdate_ProductInfo::kVersionFieldNumber;
const int SystemProfileProto_GoogleUpdate_ProductInfo::kLastUpdateSuccessTimestampFieldNumber;
const int SystemProfileProto_GoogleUpdate_ProductInfo::kLastResultFieldNumber;
const int SystemProfileProto_GoogleUpdate_ProductInfo::kLastErrorFieldNumber;
const int SystemProfileProto_GoogleUpdate_ProductInfo::kLastExtraErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SystemProfileProto_GoogleUpdate_ProductInfo::SystemProfileProto_GoogleUpdate_ProductInfo()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_system_5fprofile_2eproto::scc_info_SystemProfileProto_GoogleUpdate_ProductInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.SystemProfileProto.GoogleUpdate.ProductInfo)
}
SystemProfileProto_GoogleUpdate_ProductInfo::SystemProfileProto_GoogleUpdate_ProductInfo(const SystemProfileProto_GoogleUpdate_ProductInfo& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_version()) {
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  ::memcpy(&last_update_success_timestamp_, &from.last_update_success_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_extra_error_) -
    reinterpret_cast<char*>(&last_update_success_timestamp_)) + sizeof(last_extra_error_));
  // @@protoc_insertion_point(copy_constructor:metrics.SystemProfileProto.GoogleUpdate.ProductInfo)
}

void SystemProfileProto_GoogleUpdate_ProductInfo::SharedCtor() {
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&last_update_success_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_extra_error_) -
      reinterpret_cast<char*>(&last_update_success_timestamp_)) + sizeof(last_extra_error_));
}

SystemProfileProto_GoogleUpdate_ProductInfo::~SystemProfileProto_GoogleUpdate_ProductInfo() {
  // @@protoc_insertion_point(destructor:metrics.SystemProfileProto.GoogleUpdate.ProductInfo)
  SharedDtor();
}

void SystemProfileProto_GoogleUpdate_ProductInfo::SharedDtor() {
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SystemProfileProto_GoogleUpdate_ProductInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SystemProfileProto_GoogleUpdate_ProductInfo& SystemProfileProto_GoogleUpdate_ProductInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_system_5fprofile_2eproto::scc_info_SystemProfileProto_GoogleUpdate_ProductInfo.base);
  return *internal_default_instance();
}


void SystemProfileProto_GoogleUpdate_ProductInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.SystemProfileProto.GoogleUpdate.ProductInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    version_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 30u) {
    ::memset(&last_update_success_timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&last_extra_error_) -
        reinterpret_cast<char*>(&last_update_success_timestamp_)) + sizeof(last_extra_error_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SystemProfileProto_GoogleUpdate_ProductInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:metrics.SystemProfileProto.GoogleUpdate.ProductInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 last_update_success_timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_last_update_success_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_update_success_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .metrics.SystemProfileProto.GoogleUpdate.ProductInfo.InstallResult last_result = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::metrics::SystemProfileProto_GoogleUpdate_ProductInfo_InstallResult_IsValid(value)) {
            set_last_result(static_cast< ::metrics::SystemProfileProto_GoogleUpdate_ProductInfo_InstallResult >(value));
          } else {
            unknown_fields_stream.WriteVarint32(24u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 last_error = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_last_error();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &last_error_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 last_extra_error = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_last_extra_error();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &last_extra_error_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.SystemProfileProto.GoogleUpdate.ProductInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.SystemProfileProto.GoogleUpdate.ProductInfo)
  return false;
#undef DO_
}

void SystemProfileProto_GoogleUpdate_ProductInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.SystemProfileProto.GoogleUpdate.ProductInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string version = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->version(), output);
  }

  // optional int64 last_update_success_timestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->last_update_success_timestamp(), output);
  }

  // optional .metrics.SystemProfileProto.GoogleUpdate.ProductInfo.InstallResult last_result = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->last_result(), output);
  }

  // optional int32 last_error = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->last_error(), output);
  }

  // optional int32 last_extra_error = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->last_extra_error(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:metrics.SystemProfileProto.GoogleUpdate.ProductInfo)
}

size_t SystemProfileProto_GoogleUpdate_ProductInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.SystemProfileProto.GoogleUpdate.ProductInfo)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 31u) {
    // optional string version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // optional int64 last_update_success_timestamp = 2;
    if (has_last_update_success_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->last_update_success_timestamp());
    }

    // optional .metrics.SystemProfileProto.GoogleUpdate.ProductInfo.InstallResult last_result = 3;
    if (has_last_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->last_result());
    }

    // optional int32 last_error = 4;
    if (has_last_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->last_error());
    }

    // optional int32 last_extra_error = 5;
    if (has_last_extra_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->last_extra_error());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SystemProfileProto_GoogleUpdate_ProductInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SystemProfileProto_GoogleUpdate_ProductInfo*>(&from));
}

void SystemProfileProto_GoogleUpdate_ProductInfo::MergeFrom(const SystemProfileProto_GoogleUpdate_ProductInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.SystemProfileProto.GoogleUpdate.ProductInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_version();
      version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
    }
    if (cached_has_bits & 0x00000002u) {
      last_update_success_timestamp_ = from.last_update_success_timestamp_;
    }
    if (cached_has_bits & 0x00000004u) {
      last_result_ = from.last_result_;
    }
    if (cached_has_bits & 0x00000008u) {
      last_error_ = from.last_error_;
    }
    if (cached_has_bits & 0x00000010u) {
      last_extra_error_ = from.last_extra_error_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SystemProfileProto_GoogleUpdate_ProductInfo::CopyFrom(const SystemProfileProto_GoogleUpdate_ProductInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.SystemProfileProto.GoogleUpdate.ProductInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemProfileProto_GoogleUpdate_ProductInfo::IsInitialized() const {
  return true;
}

void SystemProfileProto_GoogleUpdate_ProductInfo::Swap(SystemProfileProto_GoogleUpdate_ProductInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SystemProfileProto_GoogleUpdate_ProductInfo::InternalSwap(SystemProfileProto_GoogleUpdate_ProductInfo* other) {
  using std::swap;
  version_.Swap(&other->version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(last_update_success_timestamp_, other->last_update_success_timestamp_);
  swap(last_result_, other->last_result_);
  swap(last_error_, other->last_error_);
  swap(last_extra_error_, other->last_extra_error_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string SystemProfileProto_GoogleUpdate_ProductInfo::GetTypeName() const {
  return "metrics.SystemProfileProto.GoogleUpdate.ProductInfo";
}


// ===================================================================

void SystemProfileProto_GoogleUpdate::InitAsDefaultInstance() {
  ::metrics::_SystemProfileProto_GoogleUpdate_default_instance_._instance.get_mutable()->google_update_status_ = const_cast< ::metrics::SystemProfileProto_GoogleUpdate_ProductInfo*>(
      ::metrics::SystemProfileProto_GoogleUpdate_ProductInfo::internal_default_instance());
  ::metrics::_SystemProfileProto_GoogleUpdate_default_instance_._instance.get_mutable()->client_status_ = const_cast< ::metrics::SystemProfileProto_GoogleUpdate_ProductInfo*>(
      ::metrics::SystemProfileProto_GoogleUpdate_ProductInfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SystemProfileProto_GoogleUpdate::kIsSystemInstallFieldNumber;
const int SystemProfileProto_GoogleUpdate::kLastAutomaticStartTimestampFieldNumber;
const int SystemProfileProto_GoogleUpdate::kLastUpdateCheckTimestampFieldNumber;
const int SystemProfileProto_GoogleUpdate::kGoogleUpdateStatusFieldNumber;
const int SystemProfileProto_GoogleUpdate::kClientStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SystemProfileProto_GoogleUpdate::SystemProfileProto_GoogleUpdate()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_system_5fprofile_2eproto::scc_info_SystemProfileProto_GoogleUpdate.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.SystemProfileProto.GoogleUpdate)
}
SystemProfileProto_GoogleUpdate::SystemProfileProto_GoogleUpdate(const SystemProfileProto_GoogleUpdate& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_google_update_status()) {
    google_update_status_ = new ::metrics::SystemProfileProto_GoogleUpdate_ProductInfo(*from.google_update_status_);
  } else {
    google_update_status_ = NULL;
  }
  if (from.has_client_status()) {
    client_status_ = new ::metrics::SystemProfileProto_GoogleUpdate_ProductInfo(*from.client_status_);
  } else {
    client_status_ = NULL;
  }
  ::memcpy(&last_automatic_start_timestamp_, &from.last_automatic_start_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_system_install_) -
    reinterpret_cast<char*>(&last_automatic_start_timestamp_)) + sizeof(is_system_install_));
  // @@protoc_insertion_point(copy_constructor:metrics.SystemProfileProto.GoogleUpdate)
}

void SystemProfileProto_GoogleUpdate::SharedCtor() {
  ::memset(&google_update_status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_system_install_) -
      reinterpret_cast<char*>(&google_update_status_)) + sizeof(is_system_install_));
}

SystemProfileProto_GoogleUpdate::~SystemProfileProto_GoogleUpdate() {
  // @@protoc_insertion_point(destructor:metrics.SystemProfileProto.GoogleUpdate)
  SharedDtor();
}

void SystemProfileProto_GoogleUpdate::SharedDtor() {
  if (this != internal_default_instance()) delete google_update_status_;
  if (this != internal_default_instance()) delete client_status_;
}

void SystemProfileProto_GoogleUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SystemProfileProto_GoogleUpdate& SystemProfileProto_GoogleUpdate::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_system_5fprofile_2eproto::scc_info_SystemProfileProto_GoogleUpdate.base);
  return *internal_default_instance();
}


void SystemProfileProto_GoogleUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.SystemProfileProto.GoogleUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(google_update_status_ != NULL);
      google_update_status_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(client_status_ != NULL);
      client_status_->Clear();
    }
  }
  if (cached_has_bits & 28u) {
    ::memset(&last_automatic_start_timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_system_install_) -
        reinterpret_cast<char*>(&last_automatic_start_timestamp_)) + sizeof(is_system_install_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SystemProfileProto_GoogleUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:metrics.SystemProfileProto.GoogleUpdate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_system_install = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_is_system_install();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_system_install_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 last_automatic_start_timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_last_automatic_start_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_automatic_start_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 last_update_check_timestamp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_last_update_check_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_update_check_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .metrics.SystemProfileProto.GoogleUpdate.ProductInfo google_update_status = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_google_update_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .metrics.SystemProfileProto.GoogleUpdate.ProductInfo client_status = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_client_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.SystemProfileProto.GoogleUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.SystemProfileProto.GoogleUpdate)
  return false;
#undef DO_
}

void SystemProfileProto_GoogleUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.SystemProfileProto.GoogleUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_system_install = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_system_install(), output);
  }

  // optional int64 last_automatic_start_timestamp = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->last_automatic_start_timestamp(), output);
  }

  // optional int64 last_update_check_timestamp = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->last_update_check_timestamp(), output);
  }

  // optional .metrics.SystemProfileProto.GoogleUpdate.ProductInfo google_update_status = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->_internal_google_update_status(), output);
  }

  // optional .metrics.SystemProfileProto.GoogleUpdate.ProductInfo client_status = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->_internal_client_status(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:metrics.SystemProfileProto.GoogleUpdate)
}

size_t SystemProfileProto_GoogleUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.SystemProfileProto.GoogleUpdate)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 31u) {
    // optional .metrics.SystemProfileProto.GoogleUpdate.ProductInfo google_update_status = 4;
    if (has_google_update_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *google_update_status_);
    }

    // optional .metrics.SystemProfileProto.GoogleUpdate.ProductInfo client_status = 5;
    if (has_client_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *client_status_);
    }

    // optional int64 last_automatic_start_timestamp = 2;
    if (has_last_automatic_start_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->last_automatic_start_timestamp());
    }

    // optional int64 last_update_check_timestamp = 3;
    if (has_last_update_check_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->last_update_check_timestamp());
    }

    // optional bool is_system_install = 1;
    if (has_is_system_install()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SystemProfileProto_GoogleUpdate::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SystemProfileProto_GoogleUpdate*>(&from));
}

void SystemProfileProto_GoogleUpdate::MergeFrom(const SystemProfileProto_GoogleUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.SystemProfileProto.GoogleUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_google_update_status()->::metrics::SystemProfileProto_GoogleUpdate_ProductInfo::MergeFrom(from.google_update_status());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_client_status()->::metrics::SystemProfileProto_GoogleUpdate_ProductInfo::MergeFrom(from.client_status());
    }
    if (cached_has_bits & 0x00000004u) {
      last_automatic_start_timestamp_ = from.last_automatic_start_timestamp_;
    }
    if (cached_has_bits & 0x00000008u) {
      last_update_check_timestamp_ = from.last_update_check_timestamp_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_system_install_ = from.is_system_install_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SystemProfileProto_GoogleUpdate::CopyFrom(const SystemProfileProto_GoogleUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.SystemProfileProto.GoogleUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemProfileProto_GoogleUpdate::IsInitialized() const {
  return true;
}

void SystemProfileProto_GoogleUpdate::Swap(SystemProfileProto_GoogleUpdate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SystemProfileProto_GoogleUpdate::InternalSwap(SystemProfileProto_GoogleUpdate* other) {
  using std::swap;
  swap(google_update_status_, other->google_update_status_);
  swap(client_status_, other->client_status_);
  swap(last_automatic_start_timestamp_, other->last_automatic_start_timestamp_);
  swap(last_update_check_timestamp_, other->last_update_check_timestamp_);
  swap(is_system_install_, other->is_system_install_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string SystemProfileProto_GoogleUpdate::GetTypeName() const {
  return "metrics.SystemProfileProto.GoogleUpdate";
}


// ===================================================================

void SystemProfileProto_Plugin::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SystemProfileProto_Plugin::kNameFieldNumber;
const int SystemProfileProto_Plugin::kFilenameFieldNumber;
const int SystemProfileProto_Plugin::kVersionFieldNumber;
const int SystemProfileProto_Plugin::kIsDisabledFieldNumber;
const int SystemProfileProto_Plugin::kIsPepperFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SystemProfileProto_Plugin::SystemProfileProto_Plugin()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_system_5fprofile_2eproto::scc_info_SystemProfileProto_Plugin.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.SystemProfileProto.Plugin)
}
SystemProfileProto_Plugin::SystemProfileProto_Plugin(const SystemProfileProto_Plugin& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_filename()) {
    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_version()) {
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  ::memcpy(&is_disabled_, &from.is_disabled_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_pepper_) -
    reinterpret_cast<char*>(&is_disabled_)) + sizeof(is_pepper_));
  // @@protoc_insertion_point(copy_constructor:metrics.SystemProfileProto.Plugin)
}

void SystemProfileProto_Plugin::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&is_disabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_pepper_) -
      reinterpret_cast<char*>(&is_disabled_)) + sizeof(is_pepper_));
}

SystemProfileProto_Plugin::~SystemProfileProto_Plugin() {
  // @@protoc_insertion_point(destructor:metrics.SystemProfileProto.Plugin)
  SharedDtor();
}

void SystemProfileProto_Plugin::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SystemProfileProto_Plugin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SystemProfileProto_Plugin& SystemProfileProto_Plugin::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_system_5fprofile_2eproto::scc_info_SystemProfileProto_Plugin.base);
  return *internal_default_instance();
}


void SystemProfileProto_Plugin::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.SystemProfileProto.Plugin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      filename_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      version_.ClearNonDefaultToEmptyNoArena();
    }
  }
  ::memset(&is_disabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_pepper_) -
      reinterpret_cast<char*>(&is_disabled_)) + sizeof(is_pepper_));
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SystemProfileProto_Plugin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:metrics.SystemProfileProto.Plugin)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string filename = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string version = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_disabled = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_is_disabled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_disabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_pepper = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_is_pepper();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_pepper_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.SystemProfileProto.Plugin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.SystemProfileProto.Plugin)
  return false;
#undef DO_
}

void SystemProfileProto_Plugin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.SystemProfileProto.Plugin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string filename = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->filename(), output);
  }

  // optional string version = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->version(), output);
  }

  // optional bool is_disabled = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_disabled(), output);
  }

  // optional bool is_pepper = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_pepper(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:metrics.SystemProfileProto.Plugin)
}

size_t SystemProfileProto_Plugin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.SystemProfileProto.Plugin)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 31u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string filename = 2;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional string version = 3;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // optional bool is_disabled = 4;
    if (has_is_disabled()) {
      total_size += 1 + 1;
    }

    // optional bool is_pepper = 5;
    if (has_is_pepper()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SystemProfileProto_Plugin::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SystemProfileProto_Plugin*>(&from));
}

void SystemProfileProto_Plugin::MergeFrom(const SystemProfileProto_Plugin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.SystemProfileProto.Plugin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_filename();
      filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_version();
      version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
    }
    if (cached_has_bits & 0x00000008u) {
      is_disabled_ = from.is_disabled_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_pepper_ = from.is_pepper_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SystemProfileProto_Plugin::CopyFrom(const SystemProfileProto_Plugin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.SystemProfileProto.Plugin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemProfileProto_Plugin::IsInitialized() const {
  return true;
}

void SystemProfileProto_Plugin::Swap(SystemProfileProto_Plugin* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SystemProfileProto_Plugin::InternalSwap(SystemProfileProto_Plugin* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  filename_.Swap(&other->filename_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  version_.Swap(&other->version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(is_disabled_, other->is_disabled_);
  swap(is_pepper_, other->is_pepper_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string SystemProfileProto_Plugin::GetTypeName() const {
  return "metrics.SystemProfileProto.Plugin";
}


// ===================================================================

void SystemProfileProto_Stability_PluginStability::InitAsDefaultInstance() {
  ::metrics::_SystemProfileProto_Stability_PluginStability_default_instance_._instance.get_mutable()->plugin_ = const_cast< ::metrics::SystemProfileProto_Plugin*>(
      ::metrics::SystemProfileProto_Plugin::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SystemProfileProto_Stability_PluginStability::kPluginFieldNumber;
const int SystemProfileProto_Stability_PluginStability::kLaunchCountFieldNumber;
const int SystemProfileProto_Stability_PluginStability::kInstanceCountFieldNumber;
const int SystemProfileProto_Stability_PluginStability::kCrashCountFieldNumber;
const int SystemProfileProto_Stability_PluginStability::kLoadingErrorCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SystemProfileProto_Stability_PluginStability::SystemProfileProto_Stability_PluginStability()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_system_5fprofile_2eproto::scc_info_SystemProfileProto_Stability_PluginStability.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.SystemProfileProto.Stability.PluginStability)
}
SystemProfileProto_Stability_PluginStability::SystemProfileProto_Stability_PluginStability(const SystemProfileProto_Stability_PluginStability& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_plugin()) {
    plugin_ = new ::metrics::SystemProfileProto_Plugin(*from.plugin_);
  } else {
    plugin_ = NULL;
  }
  ::memcpy(&launch_count_, &from.launch_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&loading_error_count_) -
    reinterpret_cast<char*>(&launch_count_)) + sizeof(loading_error_count_));
  // @@protoc_insertion_point(copy_constructor:metrics.SystemProfileProto.Stability.PluginStability)
}

void SystemProfileProto_Stability_PluginStability::SharedCtor() {
  ::memset(&plugin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&loading_error_count_) -
      reinterpret_cast<char*>(&plugin_)) + sizeof(loading_error_count_));
}

SystemProfileProto_Stability_PluginStability::~SystemProfileProto_Stability_PluginStability() {
  // @@protoc_insertion_point(destructor:metrics.SystemProfileProto.Stability.PluginStability)
  SharedDtor();
}

void SystemProfileProto_Stability_PluginStability::SharedDtor() {
  if (this != internal_default_instance()) delete plugin_;
}

void SystemProfileProto_Stability_PluginStability::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SystemProfileProto_Stability_PluginStability& SystemProfileProto_Stability_PluginStability::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_system_5fprofile_2eproto::scc_info_SystemProfileProto_Stability_PluginStability.base);
  return *internal_default_instance();
}


void SystemProfileProto_Stability_PluginStability::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.SystemProfileProto.Stability.PluginStability)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(plugin_ != NULL);
    plugin_->Clear();
  }
  if (cached_has_bits & 30u) {
    ::memset(&launch_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&loading_error_count_) -
        reinterpret_cast<char*>(&launch_count_)) + sizeof(loading_error_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SystemProfileProto_Stability_PluginStability::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:metrics.SystemProfileProto.Stability.PluginStability)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .metrics.SystemProfileProto.Plugin plugin = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_plugin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 launch_count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_launch_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &launch_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 instance_count = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_instance_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instance_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 crash_count = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_crash_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &crash_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 loading_error_count = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_loading_error_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &loading_error_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.SystemProfileProto.Stability.PluginStability)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.SystemProfileProto.Stability.PluginStability)
  return false;
#undef DO_
}

void SystemProfileProto_Stability_PluginStability::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.SystemProfileProto.Stability.PluginStability)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .metrics.SystemProfileProto.Plugin plugin = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_plugin(), output);
  }

  // optional int32 launch_count = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->launch_count(), output);
  }

  // optional int32 instance_count = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->instance_count(), output);
  }

  // optional int32 crash_count = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->crash_count(), output);
  }

  // optional int32 loading_error_count = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->loading_error_count(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:metrics.SystemProfileProto.Stability.PluginStability)
}

size_t SystemProfileProto_Stability_PluginStability::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.SystemProfileProto.Stability.PluginStability)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 31u) {
    // optional .metrics.SystemProfileProto.Plugin plugin = 1;
    if (has_plugin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *plugin_);
    }

    // optional int32 launch_count = 2;
    if (has_launch_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->launch_count());
    }

    // optional int32 instance_count = 3;
    if (has_instance_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->instance_count());
    }

    // optional int32 crash_count = 4;
    if (has_crash_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->crash_count());
    }

    // optional int32 loading_error_count = 5;
    if (has_loading_error_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->loading_error_count());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SystemProfileProto_Stability_PluginStability::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SystemProfileProto_Stability_PluginStability*>(&from));
}

void SystemProfileProto_Stability_PluginStability::MergeFrom(const SystemProfileProto_Stability_PluginStability& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.SystemProfileProto.Stability.PluginStability)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_plugin()->::metrics::SystemProfileProto_Plugin::MergeFrom(from.plugin());
    }
    if (cached_has_bits & 0x00000002u) {
      launch_count_ = from.launch_count_;
    }
    if (cached_has_bits & 0x00000004u) {
      instance_count_ = from.instance_count_;
    }
    if (cached_has_bits & 0x00000008u) {
      crash_count_ = from.crash_count_;
    }
    if (cached_has_bits & 0x00000010u) {
      loading_error_count_ = from.loading_error_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SystemProfileProto_Stability_PluginStability::CopyFrom(const SystemProfileProto_Stability_PluginStability& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.SystemProfileProto.Stability.PluginStability)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemProfileProto_Stability_PluginStability::IsInitialized() const {
  return true;
}

void SystemProfileProto_Stability_PluginStability::Swap(SystemProfileProto_Stability_PluginStability* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SystemProfileProto_Stability_PluginStability::InternalSwap(SystemProfileProto_Stability_PluginStability* other) {
  using std::swap;
  swap(plugin_, other->plugin_);
  swap(launch_count_, other->launch_count_);
  swap(instance_count_, other->instance_count_);
  swap(crash_count_, other->crash_count_);
  swap(loading_error_count_, other->loading_error_count_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string SystemProfileProto_Stability_PluginStability::GetTypeName() const {
  return "metrics.SystemProfileProto.Stability.PluginStability";
}


// ===================================================================

void SystemProfileProto_Stability::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SystemProfileProto_Stability::kIncrementalUptimeSecFieldNumber;
const int SystemProfileProto_Stability::kUptimeSecFieldNumber;
const int SystemProfileProto_Stability::kPageLoadCountFieldNumber;
const int SystemProfileProto_Stability::kRendererCrashCountFieldNumber;
const int SystemProfileProto_Stability::kRendererHangCountFieldNumber;
const int SystemProfileProto_Stability::kRendererFailedLaunchCountFieldNumber;
const int SystemProfileProto_Stability::kRendererLaunchCountFieldNumber;
const int SystemProfileProto_Stability::kExtensionRendererCrashCountFieldNumber;
const int SystemProfileProto_Stability::kExtensionRendererFailedLaunchCountFieldNumber;
const int SystemProfileProto_Stability::kExtensionRendererLaunchCountFieldNumber;
const int SystemProfileProto_Stability::kChildProcessCrashCountFieldNumber;
const int SystemProfileProto_Stability::kGpuCrashCountFieldNumber;
const int SystemProfileProto_Stability::kOtherUserCrashCountFieldNumber;
const int SystemProfileProto_Stability::kKernelCrashCountFieldNumber;
const int SystemProfileProto_Stability::kUncleanSystemShutdownCountFieldNumber;
const int SystemProfileProto_Stability::kLaunchCountFieldNumber;
const int SystemProfileProto_Stability::kCrashCountFieldNumber;
const int SystemProfileProto_Stability::kCrashCountDueToGmsCoreUpdateFieldNumber;
const int SystemProfileProto_Stability::kCrashCountWithoutGmsCoreUpdateFieldNumber;
const int SystemProfileProto_Stability::kIncompleteShutdownCountFieldNumber;
const int SystemProfileProto_Stability::kBreakpadRegistrationSuccessCountFieldNumber;
const int SystemProfileProto_Stability::kBreakpadRegistrationFailureCountFieldNumber;
const int SystemProfileProto_Stability::kDebuggerPresentCountFieldNumber;
const int SystemProfileProto_Stability::kDebuggerNotPresentCountFieldNumber;
const int SystemProfileProto_Stability::kFromPreviousRunFieldNumber;
const int SystemProfileProto_Stability::kPluginStabilityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SystemProfileProto_Stability::SystemProfileProto_Stability()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_system_5fprofile_2eproto::scc_info_SystemProfileProto_Stability.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.SystemProfileProto.Stability)
}
SystemProfileProto_Stability::SystemProfileProto_Stability(const SystemProfileProto_Stability& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      plugin_stability_(from.plugin_stability_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&incremental_uptime_sec_, &from.incremental_uptime_sec_,
    static_cast<size_t>(reinterpret_cast<char*>(&crash_count_due_to_gms_core_update_) -
    reinterpret_cast<char*>(&incremental_uptime_sec_)) + sizeof(crash_count_due_to_gms_core_update_));
  // @@protoc_insertion_point(copy_constructor:metrics.SystemProfileProto.Stability)
}

void SystemProfileProto_Stability::SharedCtor() {
  ::memset(&incremental_uptime_sec_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&crash_count_due_to_gms_core_update_) -
      reinterpret_cast<char*>(&incremental_uptime_sec_)) + sizeof(crash_count_due_to_gms_core_update_));
}

SystemProfileProto_Stability::~SystemProfileProto_Stability() {
  // @@protoc_insertion_point(destructor:metrics.SystemProfileProto.Stability)
  SharedDtor();
}

void SystemProfileProto_Stability::SharedDtor() {
}

void SystemProfileProto_Stability::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SystemProfileProto_Stability& SystemProfileProto_Stability::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_system_5fprofile_2eproto::scc_info_SystemProfileProto_Stability.base);
  return *internal_default_instance();
}


void SystemProfileProto_Stability::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.SystemProfileProto.Stability)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  plugin_stability_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&incremental_uptime_sec_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&kernel_crash_count_) -
        reinterpret_cast<char*>(&incremental_uptime_sec_)) + sizeof(kernel_crash_count_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&unclean_system_shutdown_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&debugger_not_present_count_) -
        reinterpret_cast<char*>(&unclean_system_shutdown_count_)) + sizeof(debugger_not_present_count_));
  }
  if (cached_has_bits & 16711680u) {
    ::memset(&renderer_failed_launch_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&from_previous_run_) -
        reinterpret_cast<char*>(&renderer_failed_launch_count_)) + sizeof(from_previous_run_));
  }
  crash_count_due_to_gms_core_update_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SystemProfileProto_Stability::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:metrics.SystemProfileProto.Stability)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 incremental_uptime_sec = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_incremental_uptime_sec();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &incremental_uptime_sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 page_load_count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_page_load_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_load_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 renderer_crash_count = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_renderer_crash_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &renderer_crash_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 renderer_hang_count = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_renderer_hang_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &renderer_hang_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 extension_renderer_crash_count = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_extension_renderer_crash_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &extension_renderer_crash_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 child_process_crash_count = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_child_process_crash_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &child_process_crash_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 other_user_crash_count = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_other_user_crash_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &other_user_crash_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 kernel_crash_count = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_kernel_crash_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kernel_crash_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 unclean_system_shutdown_count = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_unclean_system_shutdown_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unclean_system_shutdown_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 launch_count = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_launch_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &launch_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 crash_count = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_crash_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &crash_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 incomplete_shutdown_count = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_incomplete_shutdown_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &incomplete_shutdown_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 breakpad_registration_success_count = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          set_has_breakpad_registration_success_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &breakpad_registration_success_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 breakpad_registration_failure_count = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          set_has_breakpad_registration_failure_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &breakpad_registration_failure_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 debugger_present_count = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          set_has_debugger_present_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &debugger_present_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 debugger_not_present_count = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          set_has_debugger_not_present_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &debugger_not_present_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .metrics.SystemProfileProto.Stability.PluginStability plugin_stability = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_plugin_stability()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 uptime_sec = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {
          set_has_uptime_sec();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uptime_sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 renderer_failed_launch_count = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 192 & 0xFF */)) {
          set_has_renderer_failed_launch_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &renderer_failed_launch_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 extension_renderer_failed_launch_count = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 200 & 0xFF */)) {
          set_has_extension_renderer_failed_launch_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &extension_renderer_failed_launch_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 renderer_launch_count = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 208 & 0xFF */)) {
          set_has_renderer_launch_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &renderer_launch_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 extension_renderer_launch_count = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u /* 216 & 0xFF */)) {
          set_has_extension_renderer_launch_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &extension_renderer_launch_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 crash_count_without_gms_core_update = 28 [deprecated = true];
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u /* 224 & 0xFF */)) {
          set_has_crash_count_without_gms_core_update();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &crash_count_without_gms_core_update_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool from_previous_run = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(232u /* 232 & 0xFF */)) {
          set_has_from_previous_run();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &from_previous_run_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 crash_count_due_to_gms_core_update = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u /* 240 & 0xFF */)) {
          set_has_crash_count_due_to_gms_core_update();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &crash_count_due_to_gms_core_update_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 gpu_crash_count = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u /* 248 & 0xFF */)) {
          set_has_gpu_crash_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gpu_crash_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.SystemProfileProto.Stability)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.SystemProfileProto.Stability)
  return false;
#undef DO_
}

void SystemProfileProto_Stability::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.SystemProfileProto.Stability)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 incremental_uptime_sec = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->incremental_uptime_sec(), output);
  }

  // optional int32 page_load_count = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->page_load_count(), output);
  }

  // optional int32 renderer_crash_count = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->renderer_crash_count(), output);
  }

  // optional int32 renderer_hang_count = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->renderer_hang_count(), output);
  }

  // optional int32 extension_renderer_crash_count = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->extension_renderer_crash_count(), output);
  }

  // optional int32 child_process_crash_count = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->child_process_crash_count(), output);
  }

  // optional int32 other_user_crash_count = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->other_user_crash_count(), output);
  }

  // optional int32 kernel_crash_count = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->kernel_crash_count(), output);
  }

  // optional int32 unclean_system_shutdown_count = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->unclean_system_shutdown_count(), output);
  }

  // optional int32 launch_count = 15;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->launch_count(), output);
  }

  // optional int32 crash_count = 16;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->crash_count(), output);
  }

  // optional int32 incomplete_shutdown_count = 17;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->incomplete_shutdown_count(), output);
  }

  // optional int32 breakpad_registration_success_count = 18;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->breakpad_registration_success_count(), output);
  }

  // optional int32 breakpad_registration_failure_count = 19;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->breakpad_registration_failure_count(), output);
  }

  // optional int32 debugger_present_count = 20;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->debugger_present_count(), output);
  }

  // optional int32 debugger_not_present_count = 21;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->debugger_not_present_count(), output);
  }

  // repeated .metrics.SystemProfileProto.Stability.PluginStability plugin_stability = 22;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->plugin_stability_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      22,
      this->plugin_stability(static_cast<int>(i)),
      output);
  }

  // optional int64 uptime_sec = 23;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(23, this->uptime_sec(), output);
  }

  // optional int32 renderer_failed_launch_count = 24;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->renderer_failed_launch_count(), output);
  }

  // optional int32 extension_renderer_failed_launch_count = 25;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->extension_renderer_failed_launch_count(), output);
  }

  // optional int32 renderer_launch_count = 26;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->renderer_launch_count(), output);
  }

  // optional int32 extension_renderer_launch_count = 27;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->extension_renderer_launch_count(), output);
  }

  // optional int32 crash_count_without_gms_core_update = 28 [deprecated = true];
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->crash_count_without_gms_core_update(), output);
  }

  // optional bool from_previous_run = 29;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(29, this->from_previous_run(), output);
  }

  // optional int32 crash_count_due_to_gms_core_update = 30;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->crash_count_due_to_gms_core_update(), output);
  }

  // optional int32 gpu_crash_count = 31;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->gpu_crash_count(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:metrics.SystemProfileProto.Stability)
}

size_t SystemProfileProto_Stability::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.SystemProfileProto.Stability)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // repeated .metrics.SystemProfileProto.Stability.PluginStability plugin_stability = 22;
  {
    unsigned int count = static_cast<unsigned int>(this->plugin_stability_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->plugin_stability(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional int64 incremental_uptime_sec = 1;
    if (has_incremental_uptime_sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->incremental_uptime_sec());
    }

    // optional int32 page_load_count = 2;
    if (has_page_load_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->page_load_count());
    }

    // optional int32 renderer_crash_count = 3;
    if (has_renderer_crash_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->renderer_crash_count());
    }

    // optional int32 renderer_hang_count = 4;
    if (has_renderer_hang_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->renderer_hang_count());
    }

    // optional int32 extension_renderer_crash_count = 5;
    if (has_extension_renderer_crash_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->extension_renderer_crash_count());
    }

    // optional int32 child_process_crash_count = 6;
    if (has_child_process_crash_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->child_process_crash_count());
    }

    // optional int32 other_user_crash_count = 7;
    if (has_other_user_crash_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->other_user_crash_count());
    }

    // optional int32 kernel_crash_count = 8;
    if (has_kernel_crash_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kernel_crash_count());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional int32 unclean_system_shutdown_count = 9;
    if (has_unclean_system_shutdown_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->unclean_system_shutdown_count());
    }

    // optional int32 launch_count = 15;
    if (has_launch_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->launch_count());
    }

    // optional int32 crash_count = 16;
    if (has_crash_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->crash_count());
    }

    // optional int32 incomplete_shutdown_count = 17;
    if (has_incomplete_shutdown_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->incomplete_shutdown_count());
    }

    // optional int32 breakpad_registration_success_count = 18;
    if (has_breakpad_registration_success_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->breakpad_registration_success_count());
    }

    // optional int32 breakpad_registration_failure_count = 19;
    if (has_breakpad_registration_failure_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->breakpad_registration_failure_count());
    }

    // optional int32 debugger_present_count = 20;
    if (has_debugger_present_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->debugger_present_count());
    }

    // optional int32 debugger_not_present_count = 21;
    if (has_debugger_not_present_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->debugger_not_present_count());
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional int32 renderer_failed_launch_count = 24;
    if (has_renderer_failed_launch_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->renderer_failed_launch_count());
    }

    // optional int64 uptime_sec = 23;
    if (has_uptime_sec()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uptime_sec());
    }

    // optional int32 extension_renderer_failed_launch_count = 25;
    if (has_extension_renderer_failed_launch_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->extension_renderer_failed_launch_count());
    }

    // optional int32 renderer_launch_count = 26;
    if (has_renderer_launch_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->renderer_launch_count());
    }

    // optional int32 gpu_crash_count = 31;
    if (has_gpu_crash_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gpu_crash_count());
    }

    // optional int32 extension_renderer_launch_count = 27;
    if (has_extension_renderer_launch_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->extension_renderer_launch_count());
    }

    // optional int32 crash_count_without_gms_core_update = 28 [deprecated = true];
    if (has_crash_count_without_gms_core_update()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->crash_count_without_gms_core_update());
    }

    // optional bool from_previous_run = 29;
    if (has_from_previous_run()) {
      total_size += 2 + 1;
    }

  }
  // optional int32 crash_count_due_to_gms_core_update = 30;
  if (has_crash_count_due_to_gms_core_update()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->crash_count_due_to_gms_core_update());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SystemProfileProto_Stability::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SystemProfileProto_Stability*>(&from));
}

void SystemProfileProto_Stability::MergeFrom(const SystemProfileProto_Stability& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.SystemProfileProto.Stability)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  plugin_stability_.MergeFrom(from.plugin_stability_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      incremental_uptime_sec_ = from.incremental_uptime_sec_;
    }
    if (cached_has_bits & 0x00000002u) {
      page_load_count_ = from.page_load_count_;
    }
    if (cached_has_bits & 0x00000004u) {
      renderer_crash_count_ = from.renderer_crash_count_;
    }
    if (cached_has_bits & 0x00000008u) {
      renderer_hang_count_ = from.renderer_hang_count_;
    }
    if (cached_has_bits & 0x00000010u) {
      extension_renderer_crash_count_ = from.extension_renderer_crash_count_;
    }
    if (cached_has_bits & 0x00000020u) {
      child_process_crash_count_ = from.child_process_crash_count_;
    }
    if (cached_has_bits & 0x00000040u) {
      other_user_crash_count_ = from.other_user_crash_count_;
    }
    if (cached_has_bits & 0x00000080u) {
      kernel_crash_count_ = from.kernel_crash_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      unclean_system_shutdown_count_ = from.unclean_system_shutdown_count_;
    }
    if (cached_has_bits & 0x00000200u) {
      launch_count_ = from.launch_count_;
    }
    if (cached_has_bits & 0x00000400u) {
      crash_count_ = from.crash_count_;
    }
    if (cached_has_bits & 0x00000800u) {
      incomplete_shutdown_count_ = from.incomplete_shutdown_count_;
    }
    if (cached_has_bits & 0x00001000u) {
      breakpad_registration_success_count_ = from.breakpad_registration_success_count_;
    }
    if (cached_has_bits & 0x00002000u) {
      breakpad_registration_failure_count_ = from.breakpad_registration_failure_count_;
    }
    if (cached_has_bits & 0x00004000u) {
      debugger_present_count_ = from.debugger_present_count_;
    }
    if (cached_has_bits & 0x00008000u) {
      debugger_not_present_count_ = from.debugger_not_present_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      renderer_failed_launch_count_ = from.renderer_failed_launch_count_;
    }
    if (cached_has_bits & 0x00020000u) {
      uptime_sec_ = from.uptime_sec_;
    }
    if (cached_has_bits & 0x00040000u) {
      extension_renderer_failed_launch_count_ = from.extension_renderer_failed_launch_count_;
    }
    if (cached_has_bits & 0x00080000u) {
      renderer_launch_count_ = from.renderer_launch_count_;
    }
    if (cached_has_bits & 0x00100000u) {
      gpu_crash_count_ = from.gpu_crash_count_;
    }
    if (cached_has_bits & 0x00200000u) {
      extension_renderer_launch_count_ = from.extension_renderer_launch_count_;
    }
    if (cached_has_bits & 0x00400000u) {
      crash_count_without_gms_core_update_ = from.crash_count_without_gms_core_update_;
    }
    if (cached_has_bits & 0x00800000u) {
      from_previous_run_ = from.from_previous_run_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x01000000u) {
    set_crash_count_due_to_gms_core_update(from.crash_count_due_to_gms_core_update());
  }
}

void SystemProfileProto_Stability::CopyFrom(const SystemProfileProto_Stability& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.SystemProfileProto.Stability)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemProfileProto_Stability::IsInitialized() const {
  return true;
}

void SystemProfileProto_Stability::Swap(SystemProfileProto_Stability* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SystemProfileProto_Stability::InternalSwap(SystemProfileProto_Stability* other) {
  using std::swap;
  CastToBase(&plugin_stability_)->InternalSwap(CastToBase(&other->plugin_stability_));
  swap(incremental_uptime_sec_, other->incremental_uptime_sec_);
  swap(page_load_count_, other->page_load_count_);
  swap(renderer_crash_count_, other->renderer_crash_count_);
  swap(renderer_hang_count_, other->renderer_hang_count_);
  swap(extension_renderer_crash_count_, other->extension_renderer_crash_count_);
  swap(child_process_crash_count_, other->child_process_crash_count_);
  swap(other_user_crash_count_, other->other_user_crash_count_);
  swap(kernel_crash_count_, other->kernel_crash_count_);
  swap(unclean_system_shutdown_count_, other->unclean_system_shutdown_count_);
  swap(launch_count_, other->launch_count_);
  swap(crash_count_, other->crash_count_);
  swap(incomplete_shutdown_count_, other->incomplete_shutdown_count_);
  swap(breakpad_registration_success_count_, other->breakpad_registration_success_count_);
  swap(breakpad_registration_failure_count_, other->breakpad_registration_failure_count_);
  swap(debugger_present_count_, other->debugger_present_count_);
  swap(debugger_not_present_count_, other->debugger_not_present_count_);
  swap(renderer_failed_launch_count_, other->renderer_failed_launch_count_);
  swap(uptime_sec_, other->uptime_sec_);
  swap(extension_renderer_failed_launch_count_, other->extension_renderer_failed_launch_count_);
  swap(renderer_launch_count_, other->renderer_launch_count_);
  swap(gpu_crash_count_, other->gpu_crash_count_);
  swap(extension_renderer_launch_count_, other->extension_renderer_launch_count_);
  swap(crash_count_without_gms_core_update_, other->crash_count_without_gms_core_update_);
  swap(from_previous_run_, other->from_previous_run_);
  swap(crash_count_due_to_gms_core_update_, other->crash_count_due_to_gms_core_update_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string SystemProfileProto_Stability::GetTypeName() const {
  return "metrics.SystemProfileProto.Stability";
}


// ===================================================================

void SystemProfileProto_FieldTrial::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SystemProfileProto_FieldTrial::kNameIdFieldNumber;
const int SystemProfileProto_FieldTrial::kGroupIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SystemProfileProto_FieldTrial::SystemProfileProto_FieldTrial()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_system_5fprofile_2eproto::scc_info_SystemProfileProto_FieldTrial.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.SystemProfileProto.FieldTrial)
}
SystemProfileProto_FieldTrial::SystemProfileProto_FieldTrial(const SystemProfileProto_FieldTrial& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&name_id_, &from.name_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&group_id_) -
    reinterpret_cast<char*>(&name_id_)) + sizeof(group_id_));
  // @@protoc_insertion_point(copy_constructor:metrics.SystemProfileProto.FieldTrial)
}

void SystemProfileProto_FieldTrial::SharedCtor() {
  ::memset(&name_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&group_id_) -
      reinterpret_cast<char*>(&name_id_)) + sizeof(group_id_));
}

SystemProfileProto_FieldTrial::~SystemProfileProto_FieldTrial() {
  // @@protoc_insertion_point(destructor:metrics.SystemProfileProto.FieldTrial)
  SharedDtor();
}

void SystemProfileProto_FieldTrial::SharedDtor() {
}

void SystemProfileProto_FieldTrial::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SystemProfileProto_FieldTrial& SystemProfileProto_FieldTrial::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_system_5fprofile_2eproto::scc_info_SystemProfileProto_FieldTrial.base);
  return *internal_default_instance();
}


void SystemProfileProto_FieldTrial::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.SystemProfileProto.FieldTrial)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&name_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&group_id_) -
        reinterpret_cast<char*>(&name_id_)) + sizeof(group_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SystemProfileProto_FieldTrial::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:metrics.SystemProfileProto.FieldTrial)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 name_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_name_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &name_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 group_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_group_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.SystemProfileProto.FieldTrial)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.SystemProfileProto.FieldTrial)
  return false;
#undef DO_
}

void SystemProfileProto_FieldTrial::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.SystemProfileProto.FieldTrial)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 name_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->name_id(), output);
  }

  // optional fixed32 group_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->group_id(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:metrics.SystemProfileProto.FieldTrial)
}

size_t SystemProfileProto_FieldTrial::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.SystemProfileProto.FieldTrial)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 3u) {
    // optional fixed32 name_id = 1;
    if (has_name_id()) {
      total_size += 1 + 4;
    }

    // optional fixed32 group_id = 2;
    if (has_group_id()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SystemProfileProto_FieldTrial::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SystemProfileProto_FieldTrial*>(&from));
}

void SystemProfileProto_FieldTrial::MergeFrom(const SystemProfileProto_FieldTrial& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.SystemProfileProto.FieldTrial)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      name_id_ = from.name_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      group_id_ = from.group_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SystemProfileProto_FieldTrial::CopyFrom(const SystemProfileProto_FieldTrial& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.SystemProfileProto.FieldTrial)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemProfileProto_FieldTrial::IsInitialized() const {
  return true;
}

void SystemProfileProto_FieldTrial::Swap(SystemProfileProto_FieldTrial* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SystemProfileProto_FieldTrial::InternalSwap(SystemProfileProto_FieldTrial* other) {
  using std::swap;
  swap(name_id_, other->name_id_);
  swap(group_id_, other->group_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string SystemProfileProto_FieldTrial::GetTypeName() const {
  return "metrics.SystemProfileProto.FieldTrial";
}


// ===================================================================

void SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::kAudioFormatFieldNumber;
const int SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::kNumChannelsFieldNumber;
const int SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::kSampleFrequencyHzFieldNumber;
const int SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::kMaxBitRatePerSecondFieldNumber;
const int SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::kBitDepthFieldNumber;
const int SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::kOutputModeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::SystemProfileProto_ExternalAudioVideoDevice_AudioDescription()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_system_5fprofile_2eproto::scc_info_SystemProfileProto_ExternalAudioVideoDevice_AudioDescription.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.SystemProfileProto.ExternalAudioVideoDevice.AudioDescription)
}
SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::SystemProfileProto_ExternalAudioVideoDevice_AudioDescription(const SystemProfileProto_ExternalAudioVideoDevice_AudioDescription& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      sample_frequency_hz_(from.sample_frequency_hz_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&audio_format_, &from.audio_format_,
    static_cast<size_t>(reinterpret_cast<char*>(&output_mode_) -
    reinterpret_cast<char*>(&audio_format_)) + sizeof(output_mode_));
  // @@protoc_insertion_point(copy_constructor:metrics.SystemProfileProto.ExternalAudioVideoDevice.AudioDescription)
}

void SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::SharedCtor() {
  ::memset(&audio_format_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&output_mode_) -
      reinterpret_cast<char*>(&audio_format_)) + sizeof(output_mode_));
}

SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::~SystemProfileProto_ExternalAudioVideoDevice_AudioDescription() {
  // @@protoc_insertion_point(destructor:metrics.SystemProfileProto.ExternalAudioVideoDevice.AudioDescription)
  SharedDtor();
}

void SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::SharedDtor() {
}

void SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SystemProfileProto_ExternalAudioVideoDevice_AudioDescription& SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_system_5fprofile_2eproto::scc_info_SystemProfileProto_ExternalAudioVideoDevice_AudioDescription.base);
  return *internal_default_instance();
}


void SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.SystemProfileProto.ExternalAudioVideoDevice.AudioDescription)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sample_frequency_hz_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    ::memset(&audio_format_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&output_mode_) -
        reinterpret_cast<char*>(&audio_format_)) + sizeof(output_mode_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:metrics.SystemProfileProto.ExternalAudioVideoDevice.AudioDescription)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .metrics.SystemProfileProto.ExternalAudioVideoDevice.AudioDescription.AudioFormat audio_format = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::metrics::SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_AudioFormat_IsValid(value)) {
            set_audio_format(static_cast< ::metrics::SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_AudioFormat >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_channels = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_num_channels();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_channels_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 sample_frequency_hz = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24u, input, this->mutable_sample_frequency_hz())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_sample_frequency_hz())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_bit_rate_per_second = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_max_bit_rate_per_second();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_bit_rate_per_second_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 bit_depth = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_bit_depth();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bit_depth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .metrics.SystemProfileProto.ExternalAudioVideoDevice.AudioDescription.OutputMode output_mode = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::metrics::SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_OutputMode_IsValid(value)) {
            set_output_mode(static_cast< ::metrics::SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_OutputMode >(value));
          } else {
            unknown_fields_stream.WriteVarint32(48u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.SystemProfileProto.ExternalAudioVideoDevice.AudioDescription)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.SystemProfileProto.ExternalAudioVideoDevice.AudioDescription)
  return false;
#undef DO_
}

void SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.SystemProfileProto.ExternalAudioVideoDevice.AudioDescription)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .metrics.SystemProfileProto.ExternalAudioVideoDevice.AudioDescription.AudioFormat audio_format = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->audio_format(), output);
  }

  // optional int32 num_channels = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num_channels(), output);
  }

  // repeated int32 sample_frequency_hz = 3;
  for (int i = 0, n = this->sample_frequency_hz_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->sample_frequency_hz(i), output);
  }

  // optional int32 max_bit_rate_per_second = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->max_bit_rate_per_second(), output);
  }

  // optional int32 bit_depth = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->bit_depth(), output);
  }

  // optional .metrics.SystemProfileProto.ExternalAudioVideoDevice.AudioDescription.OutputMode output_mode = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->output_mode(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:metrics.SystemProfileProto.ExternalAudioVideoDevice.AudioDescription)
}

size_t SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.SystemProfileProto.ExternalAudioVideoDevice.AudioDescription)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // repeated int32 sample_frequency_hz = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->sample_frequency_hz_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->sample_frequency_hz_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 31u) {
    // optional .metrics.SystemProfileProto.ExternalAudioVideoDevice.AudioDescription.AudioFormat audio_format = 1;
    if (has_audio_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->audio_format());
    }

    // optional int32 num_channels = 2;
    if (has_num_channels()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_channels());
    }

    // optional int32 max_bit_rate_per_second = 4;
    if (has_max_bit_rate_per_second()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_bit_rate_per_second());
    }

    // optional int32 bit_depth = 5;
    if (has_bit_depth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bit_depth());
    }

    // optional .metrics.SystemProfileProto.ExternalAudioVideoDevice.AudioDescription.OutputMode output_mode = 6;
    if (has_output_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->output_mode());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SystemProfileProto_ExternalAudioVideoDevice_AudioDescription*>(&from));
}

void SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::MergeFrom(const SystemProfileProto_ExternalAudioVideoDevice_AudioDescription& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.SystemProfileProto.ExternalAudioVideoDevice.AudioDescription)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sample_frequency_hz_.MergeFrom(from.sample_frequency_hz_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      audio_format_ = from.audio_format_;
    }
    if (cached_has_bits & 0x00000002u) {
      num_channels_ = from.num_channels_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_bit_rate_per_second_ = from.max_bit_rate_per_second_;
    }
    if (cached_has_bits & 0x00000008u) {
      bit_depth_ = from.bit_depth_;
    }
    if (cached_has_bits & 0x00000010u) {
      output_mode_ = from.output_mode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::CopyFrom(const SystemProfileProto_ExternalAudioVideoDevice_AudioDescription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.SystemProfileProto.ExternalAudioVideoDevice.AudioDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::IsInitialized() const {
  return true;
}

void SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::Swap(SystemProfileProto_ExternalAudioVideoDevice_AudioDescription* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::InternalSwap(SystemProfileProto_ExternalAudioVideoDevice_AudioDescription* other) {
  using std::swap;
  sample_frequency_hz_.InternalSwap(&other->sample_frequency_hz_);
  swap(audio_format_, other->audio_format_);
  swap(num_channels_, other->num_channels_);
  swap(max_bit_rate_per_second_, other->max_bit_rate_per_second_);
  swap(bit_depth_, other->bit_depth_);
  swap(output_mode_, other->output_mode_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::GetTypeName() const {
  return "metrics.SystemProfileProto.ExternalAudioVideoDevice.AudioDescription";
}


// ===================================================================

void SystemProfileProto_ExternalAudioVideoDevice_CECCommand::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SystemProfileProto_ExternalAudioVideoDevice_CECCommand::kOpcodeFieldNumber;
const int SystemProfileProto_ExternalAudioVideoDevice_CECCommand::kNumReceivedDirectFieldNumber;
const int SystemProfileProto_ExternalAudioVideoDevice_CECCommand::kNumReceivedBroadcastFieldNumber;
const int SystemProfileProto_ExternalAudioVideoDevice_CECCommand::kNumSentDirectFieldNumber;
const int SystemProfileProto_ExternalAudioVideoDevice_CECCommand::kNumSentBroadcastFieldNumber;
const int SystemProfileProto_ExternalAudioVideoDevice_CECCommand::kNumAbortedUnknownReasonFieldNumber;
const int SystemProfileProto_ExternalAudioVideoDevice_CECCommand::kNumAbortedUnrecognizedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SystemProfileProto_ExternalAudioVideoDevice_CECCommand::SystemProfileProto_ExternalAudioVideoDevice_CECCommand()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_system_5fprofile_2eproto::scc_info_SystemProfileProto_ExternalAudioVideoDevice_CECCommand.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.SystemProfileProto.ExternalAudioVideoDevice.CECCommand)
}
SystemProfileProto_ExternalAudioVideoDevice_CECCommand::SystemProfileProto_ExternalAudioVideoDevice_CECCommand(const SystemProfileProto_ExternalAudioVideoDevice_CECCommand& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&opcode_, &from.opcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_aborted_unrecognized_) -
    reinterpret_cast<char*>(&opcode_)) + sizeof(num_aborted_unrecognized_));
  // @@protoc_insertion_point(copy_constructor:metrics.SystemProfileProto.ExternalAudioVideoDevice.CECCommand)
}

void SystemProfileProto_ExternalAudioVideoDevice_CECCommand::SharedCtor() {
  ::memset(&opcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_aborted_unrecognized_) -
      reinterpret_cast<char*>(&opcode_)) + sizeof(num_aborted_unrecognized_));
}

SystemProfileProto_ExternalAudioVideoDevice_CECCommand::~SystemProfileProto_ExternalAudioVideoDevice_CECCommand() {
  // @@protoc_insertion_point(destructor:metrics.SystemProfileProto.ExternalAudioVideoDevice.CECCommand)
  SharedDtor();
}

void SystemProfileProto_ExternalAudioVideoDevice_CECCommand::SharedDtor() {
}

void SystemProfileProto_ExternalAudioVideoDevice_CECCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SystemProfileProto_ExternalAudioVideoDevice_CECCommand& SystemProfileProto_ExternalAudioVideoDevice_CECCommand::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_system_5fprofile_2eproto::scc_info_SystemProfileProto_ExternalAudioVideoDevice_CECCommand.base);
  return *internal_default_instance();
}


void SystemProfileProto_ExternalAudioVideoDevice_CECCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.SystemProfileProto.ExternalAudioVideoDevice.CECCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    ::memset(&opcode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_aborted_unrecognized_) -
        reinterpret_cast<char*>(&opcode_)) + sizeof(num_aborted_unrecognized_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SystemProfileProto_ExternalAudioVideoDevice_CECCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:metrics.SystemProfileProto.ExternalAudioVideoDevice.CECCommand)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 opcode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_opcode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_received_direct = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_num_received_direct();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_received_direct_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_received_broadcast = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_num_received_broadcast();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_received_broadcast_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_sent_direct = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_num_sent_direct();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_sent_direct_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_sent_broadcast = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_num_sent_broadcast();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_sent_broadcast_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_aborted_unknown_reason = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_num_aborted_unknown_reason();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_aborted_unknown_reason_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_aborted_unrecognized = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_num_aborted_unrecognized();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_aborted_unrecognized_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.SystemProfileProto.ExternalAudioVideoDevice.CECCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.SystemProfileProto.ExternalAudioVideoDevice.CECCommand)
  return false;
#undef DO_
}

void SystemProfileProto_ExternalAudioVideoDevice_CECCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.SystemProfileProto.ExternalAudioVideoDevice.CECCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 opcode = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(), output);
  }

  // optional int32 num_received_direct = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num_received_direct(), output);
  }

  // optional int32 num_received_broadcast = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num_received_broadcast(), output);
  }

  // optional int32 num_sent_direct = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->num_sent_direct(), output);
  }

  // optional int32 num_sent_broadcast = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->num_sent_broadcast(), output);
  }

  // optional int32 num_aborted_unknown_reason = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->num_aborted_unknown_reason(), output);
  }

  // optional int32 num_aborted_unrecognized = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->num_aborted_unrecognized(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:metrics.SystemProfileProto.ExternalAudioVideoDevice.CECCommand)
}

size_t SystemProfileProto_ExternalAudioVideoDevice_CECCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.SystemProfileProto.ExternalAudioVideoDevice.CECCommand)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 127u) {
    // optional int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opcode());
    }

    // optional int32 num_received_direct = 2;
    if (has_num_received_direct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_received_direct());
    }

    // optional int32 num_received_broadcast = 3;
    if (has_num_received_broadcast()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_received_broadcast());
    }

    // optional int32 num_sent_direct = 4;
    if (has_num_sent_direct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_sent_direct());
    }

    // optional int32 num_sent_broadcast = 5;
    if (has_num_sent_broadcast()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_sent_broadcast());
    }

    // optional int32 num_aborted_unknown_reason = 6;
    if (has_num_aborted_unknown_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_aborted_unknown_reason());
    }

    // optional int32 num_aborted_unrecognized = 7;
    if (has_num_aborted_unrecognized()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_aborted_unrecognized());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SystemProfileProto_ExternalAudioVideoDevice_CECCommand::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SystemProfileProto_ExternalAudioVideoDevice_CECCommand*>(&from));
}

void SystemProfileProto_ExternalAudioVideoDevice_CECCommand::MergeFrom(const SystemProfileProto_ExternalAudioVideoDevice_CECCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.SystemProfileProto.ExternalAudioVideoDevice.CECCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      opcode_ = from.opcode_;
    }
    if (cached_has_bits & 0x00000002u) {
      num_received_direct_ = from.num_received_direct_;
    }
    if (cached_has_bits & 0x00000004u) {
      num_received_broadcast_ = from.num_received_broadcast_;
    }
    if (cached_has_bits & 0x00000008u) {
      num_sent_direct_ = from.num_sent_direct_;
    }
    if (cached_has_bits & 0x00000010u) {
      num_sent_broadcast_ = from.num_sent_broadcast_;
    }
    if (cached_has_bits & 0x00000020u) {
      num_aborted_unknown_reason_ = from.num_aborted_unknown_reason_;
    }
    if (cached_has_bits & 0x00000040u) {
      num_aborted_unrecognized_ = from.num_aborted_unrecognized_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SystemProfileProto_ExternalAudioVideoDevice_CECCommand::CopyFrom(const SystemProfileProto_ExternalAudioVideoDevice_CECCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.SystemProfileProto.ExternalAudioVideoDevice.CECCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemProfileProto_ExternalAudioVideoDevice_CECCommand::IsInitialized() const {
  return true;
}

void SystemProfileProto_ExternalAudioVideoDevice_CECCommand::Swap(SystemProfileProto_ExternalAudioVideoDevice_CECCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SystemProfileProto_ExternalAudioVideoDevice_CECCommand::InternalSwap(SystemProfileProto_ExternalAudioVideoDevice_CECCommand* other) {
  using std::swap;
  swap(opcode_, other->opcode_);
  swap(num_received_direct_, other->num_received_direct_);
  swap(num_received_broadcast_, other->num_received_broadcast_);
  swap(num_sent_direct_, other->num_sent_direct_);
  swap(num_sent_broadcast_, other->num_sent_broadcast_);
  swap(num_aborted_unknown_reason_, other->num_aborted_unknown_reason_);
  swap(num_aborted_unrecognized_, other->num_aborted_unrecognized_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string SystemProfileProto_ExternalAudioVideoDevice_CECCommand::GetTypeName() const {
  return "metrics.SystemProfileProto.ExternalAudioVideoDevice.CECCommand";
}


// ===================================================================

void SystemProfileProto_ExternalAudioVideoDevice::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SystemProfileProto_ExternalAudioVideoDevice::kManufacturerNameFieldNumber;
const int SystemProfileProto_ExternalAudioVideoDevice::kModelNameFieldNumber;
const int SystemProfileProto_ExternalAudioVideoDevice::kProductCodeFieldNumber;
const int SystemProfileProto_ExternalAudioVideoDevice::kAvDeviceTypeFieldNumber;
const int SystemProfileProto_ExternalAudioVideoDevice::kManufactureYearFieldNumber;
const int SystemProfileProto_ExternalAudioVideoDevice::kManufactureWeekFieldNumber;
const int SystemProfileProto_ExternalAudioVideoDevice::kHorizontalResolutionFieldNumber;
const int SystemProfileProto_ExternalAudioVideoDevice::kVerticalResolutionFieldNumber;
const int SystemProfileProto_ExternalAudioVideoDevice::kAudioDescriptionFieldNumber;
const int SystemProfileProto_ExternalAudioVideoDevice::kPositionInSetupFieldNumber;
const int SystemProfileProto_ExternalAudioVideoDevice::kIsInPathToTvFieldNumber;
const int SystemProfileProto_ExternalAudioVideoDevice::kCecVersionFieldNumber;
const int SystemProfileProto_ExternalAudioVideoDevice::kCecCommandFieldNumber;
const int SystemProfileProto_ExternalAudioVideoDevice::kFrameRateFieldNumber;
const int SystemProfileProto_ExternalAudioVideoDevice::kColorEncodingFieldNumber;
const int SystemProfileProto_ExternalAudioVideoDevice::kBitDepthFieldNumber;
const int SystemProfileProto_ExternalAudioVideoDevice::kTmdsFieldNumber;
const int SystemProfileProto_ExternalAudioVideoDevice::kHdr10SupportFieldNumber;
const int SystemProfileProto_ExternalAudioVideoDevice::kDolbyVisionSupportFieldNumber;
const int SystemProfileProto_ExternalAudioVideoDevice::kEotfSupportFieldNumber;
const int SystemProfileProto_ExternalAudioVideoDevice::kYuvSupportFieldNumber;
const int SystemProfileProto_ExternalAudioVideoDevice::kYuv420SupportFieldNumber;
const int SystemProfileProto_ExternalAudioVideoDevice::kMaximumSupportedHdcpVersionFieldNumber;
const int SystemProfileProto_ExternalAudioVideoDevice::kCurrentHdcpVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SystemProfileProto_ExternalAudioVideoDevice::SystemProfileProto_ExternalAudioVideoDevice()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_system_5fprofile_2eproto::scc_info_SystemProfileProto_ExternalAudioVideoDevice.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.SystemProfileProto.ExternalAudioVideoDevice)
}
SystemProfileProto_ExternalAudioVideoDevice::SystemProfileProto_ExternalAudioVideoDevice(const SystemProfileProto_ExternalAudioVideoDevice& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      av_device_type_(from.av_device_type_),
      audio_description_(from.audio_description_),
      cec_command_(from.cec_command_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  manufacturer_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_manufacturer_name()) {
    manufacturer_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.manufacturer_name_);
  }
  model_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_model_name()) {
    model_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_name_);
  }
  product_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_product_code()) {
    product_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.product_code_);
  }
  ::memcpy(&manufacture_year_, &from.manufacture_year_,
    static_cast<size_t>(reinterpret_cast<char*>(&current_hdcp_version_) -
    reinterpret_cast<char*>(&manufacture_year_)) + sizeof(current_hdcp_version_));
  // @@protoc_insertion_point(copy_constructor:metrics.SystemProfileProto.ExternalAudioVideoDevice)
}

void SystemProfileProto_ExternalAudioVideoDevice::SharedCtor() {
  manufacturer_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  product_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&manufacture_year_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&current_hdcp_version_) -
      reinterpret_cast<char*>(&manufacture_year_)) + sizeof(current_hdcp_version_));
}

SystemProfileProto_ExternalAudioVideoDevice::~SystemProfileProto_ExternalAudioVideoDevice() {
  // @@protoc_insertion_point(destructor:metrics.SystemProfileProto.ExternalAudioVideoDevice)
  SharedDtor();
}

void SystemProfileProto_ExternalAudioVideoDevice::SharedDtor() {
  manufacturer_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  product_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SystemProfileProto_ExternalAudioVideoDevice::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SystemProfileProto_ExternalAudioVideoDevice& SystemProfileProto_ExternalAudioVideoDevice::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_system_5fprofile_2eproto::scc_info_SystemProfileProto_ExternalAudioVideoDevice.base);
  return *internal_default_instance();
}


void SystemProfileProto_ExternalAudioVideoDevice::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.SystemProfileProto.ExternalAudioVideoDevice)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  av_device_type_.Clear();
  audio_description_.Clear();
  cec_command_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      manufacturer_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      model_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      product_code_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 248u) {
    ::memset(&manufacture_year_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&position_in_setup_) -
        reinterpret_cast<char*>(&manufacture_year_)) + sizeof(position_in_setup_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&cec_version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dolby_vision_support_) -
        reinterpret_cast<char*>(&cec_version_)) + sizeof(dolby_vision_support_));
  }
  if (cached_has_bits & 2031616u) {
    ::memset(&yuv_support_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&current_hdcp_version_) -
        reinterpret_cast<char*>(&yuv_support_)) + sizeof(current_hdcp_version_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SystemProfileProto_ExternalAudioVideoDevice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:metrics.SystemProfileProto.ExternalAudioVideoDevice)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string manufacturer_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_manufacturer_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string model_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string product_code = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_product_code()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .metrics.SystemProfileProto.ExternalAudioVideoDevice.AVDeviceType av_device_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::metrics::SystemProfileProto_ExternalAudioVideoDevice_AVDeviceType_IsValid(value)) {
            add_av_device_type(static_cast< ::metrics::SystemProfileProto_ExternalAudioVideoDevice_AVDeviceType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumPreserveUnknowns(
                 input,
                 4,
                 ::metrics::SystemProfileProto_ExternalAudioVideoDevice_AVDeviceType_IsValid,
                 &unknown_fields_stream,
                 this->mutable_av_device_type())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 manufacture_year = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_manufacture_year();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &manufacture_year_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 manufacture_week = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_manufacture_week();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &manufacture_week_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 horizontal_resolution = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_horizontal_resolution();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &horizontal_resolution_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 vertical_resolution = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_vertical_resolution();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vertical_resolution_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .metrics.SystemProfileProto.ExternalAudioVideoDevice.AudioDescription audio_description = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_audio_description()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 position_in_setup = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_position_in_setup();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &position_in_setup_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_in_path_to_tv = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_is_in_path_to_tv();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_in_path_to_tv_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 cec_version = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_cec_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cec_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .metrics.SystemProfileProto.ExternalAudioVideoDevice.CECCommand cec_command = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_cec_command()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 frame_rate = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_frame_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frame_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .metrics.SystemProfileProto.ExternalAudioVideoDevice.ColorEncoding color_encoding = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::metrics::SystemProfileProto_ExternalAudioVideoDevice_ColorEncoding_IsValid(value)) {
            set_color_encoding(static_cast< ::metrics::SystemProfileProto_ExternalAudioVideoDevice_ColorEncoding >(value));
          } else {
            unknown_fields_stream.WriteVarint32(120u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 bit_depth = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_bit_depth();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bit_depth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tmds = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_tmds();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tmds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool hdr10_support = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          set_has_hdr10_support();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hdr10_support_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool dolby_vision_support = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          set_has_dolby_vision_support();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dolby_vision_support_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 eotf_support = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          set_has_eotf_support();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eotf_support_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool yuv_support = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          set_has_yuv_support();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &yuv_support_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool yuv_420_support = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {
          set_has_yuv_420_support();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &yuv_420_support_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 maximum_supported_hdcp_version = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {
          set_has_maximum_supported_hdcp_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maximum_supported_hdcp_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 current_hdcp_version = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 192 & 0xFF */)) {
          set_has_current_hdcp_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &current_hdcp_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.SystemProfileProto.ExternalAudioVideoDevice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.SystemProfileProto.ExternalAudioVideoDevice)
  return false;
#undef DO_
}

void SystemProfileProto_ExternalAudioVideoDevice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.SystemProfileProto.ExternalAudioVideoDevice)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string manufacturer_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->manufacturer_name(), output);
  }

  // optional string model_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->model_name(), output);
  }

  // optional string product_code = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->product_code(), output);
  }

  // repeated .metrics.SystemProfileProto.ExternalAudioVideoDevice.AVDeviceType av_device_type = 4;
  for (int i = 0, n = this->av_device_type_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->av_device_type(i), output);
  }

  // optional int32 manufacture_year = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->manufacture_year(), output);
  }

  // optional int32 manufacture_week = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->manufacture_week(), output);
  }

  // optional int32 horizontal_resolution = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->horizontal_resolution(), output);
  }

  // optional int32 vertical_resolution = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->vertical_resolution(), output);
  }

  // repeated .metrics.SystemProfileProto.ExternalAudioVideoDevice.AudioDescription audio_description = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->audio_description_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9,
      this->audio_description(static_cast<int>(i)),
      output);
  }

  // optional int32 position_in_setup = 10;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->position_in_setup(), output);
  }

  // optional bool is_in_path_to_tv = 11;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->is_in_path_to_tv(), output);
  }

  // optional int32 cec_version = 12;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->cec_version(), output);
  }

  // repeated .metrics.SystemProfileProto.ExternalAudioVideoDevice.CECCommand cec_command = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cec_command_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      13,
      this->cec_command(static_cast<int>(i)),
      output);
  }

  // optional int32 frame_rate = 14;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->frame_rate(), output);
  }

  // optional .metrics.SystemProfileProto.ExternalAudioVideoDevice.ColorEncoding color_encoding = 15;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      15, this->color_encoding(), output);
  }

  // optional int32 bit_depth = 16;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->bit_depth(), output);
  }

  // optional int32 tmds = 17;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->tmds(), output);
  }

  // optional bool hdr10_support = 18;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->hdr10_support(), output);
  }

  // optional bool dolby_vision_support = 19;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->dolby_vision_support(), output);
  }

  // optional int32 eotf_support = 20;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->eotf_support(), output);
  }

  // optional bool yuv_support = 21;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->yuv_support(), output);
  }

  // optional bool yuv_420_support = 22;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->yuv_420_support(), output);
  }

  // optional int32 maximum_supported_hdcp_version = 23;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->maximum_supported_hdcp_version(), output);
  }

  // optional int32 current_hdcp_version = 24;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->current_hdcp_version(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:metrics.SystemProfileProto.ExternalAudioVideoDevice)
}

size_t SystemProfileProto_ExternalAudioVideoDevice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.SystemProfileProto.ExternalAudioVideoDevice)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // repeated .metrics.SystemProfileProto.ExternalAudioVideoDevice.AVDeviceType av_device_type = 4;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->av_device_type_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->av_device_type(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // repeated .metrics.SystemProfileProto.ExternalAudioVideoDevice.AudioDescription audio_description = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->audio_description_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->audio_description(static_cast<int>(i)));
    }
  }

  // repeated .metrics.SystemProfileProto.ExternalAudioVideoDevice.CECCommand cec_command = 13;
  {
    unsigned int count = static_cast<unsigned int>(this->cec_command_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->cec_command(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string manufacturer_name = 1;
    if (has_manufacturer_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->manufacturer_name());
    }

    // optional string model_name = 2;
    if (has_model_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->model_name());
    }

    // optional string product_code = 3;
    if (has_product_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->product_code());
    }

    // optional int32 manufacture_year = 5;
    if (has_manufacture_year()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->manufacture_year());
    }

    // optional int32 manufacture_week = 6;
    if (has_manufacture_week()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->manufacture_week());
    }

    // optional int32 horizontal_resolution = 7;
    if (has_horizontal_resolution()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->horizontal_resolution());
    }

    // optional int32 vertical_resolution = 8;
    if (has_vertical_resolution()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vertical_resolution());
    }

    // optional int32 position_in_setup = 10;
    if (has_position_in_setup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->position_in_setup());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional int32 cec_version = 12;
    if (has_cec_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cec_version());
    }

    // optional int32 frame_rate = 14;
    if (has_frame_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->frame_rate());
    }

    // optional .metrics.SystemProfileProto.ExternalAudioVideoDevice.ColorEncoding color_encoding = 15;
    if (has_color_encoding()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->color_encoding());
    }

    // optional int32 bit_depth = 16;
    if (has_bit_depth()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bit_depth());
    }

    // optional int32 tmds = 17;
    if (has_tmds()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tmds());
    }

    // optional bool is_in_path_to_tv = 11;
    if (has_is_in_path_to_tv()) {
      total_size += 1 + 1;
    }

    // optional bool hdr10_support = 18;
    if (has_hdr10_support()) {
      total_size += 2 + 1;
    }

    // optional bool dolby_vision_support = 19;
    if (has_dolby_vision_support()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[16 / 32] & 2031616u) {
    // optional bool yuv_support = 21;
    if (has_yuv_support()) {
      total_size += 2 + 1;
    }

    // optional int32 eotf_support = 20;
    if (has_eotf_support()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eotf_support());
    }

    // optional bool yuv_420_support = 22;
    if (has_yuv_420_support()) {
      total_size += 2 + 1;
    }

    // optional int32 maximum_supported_hdcp_version = 23;
    if (has_maximum_supported_hdcp_version()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maximum_supported_hdcp_version());
    }

    // optional int32 current_hdcp_version = 24;
    if (has_current_hdcp_version()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->current_hdcp_version());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SystemProfileProto_ExternalAudioVideoDevice::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SystemProfileProto_ExternalAudioVideoDevice*>(&from));
}

void SystemProfileProto_ExternalAudioVideoDevice::MergeFrom(const SystemProfileProto_ExternalAudioVideoDevice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.SystemProfileProto.ExternalAudioVideoDevice)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  av_device_type_.MergeFrom(from.av_device_type_);
  audio_description_.MergeFrom(from.audio_description_);
  cec_command_.MergeFrom(from.cec_command_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_manufacturer_name();
      manufacturer_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.manufacturer_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_model_name();
      model_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_product_code();
      product_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.product_code_);
    }
    if (cached_has_bits & 0x00000008u) {
      manufacture_year_ = from.manufacture_year_;
    }
    if (cached_has_bits & 0x00000010u) {
      manufacture_week_ = from.manufacture_week_;
    }
    if (cached_has_bits & 0x00000020u) {
      horizontal_resolution_ = from.horizontal_resolution_;
    }
    if (cached_has_bits & 0x00000040u) {
      vertical_resolution_ = from.vertical_resolution_;
    }
    if (cached_has_bits & 0x00000080u) {
      position_in_setup_ = from.position_in_setup_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      cec_version_ = from.cec_version_;
    }
    if (cached_has_bits & 0x00000200u) {
      frame_rate_ = from.frame_rate_;
    }
    if (cached_has_bits & 0x00000400u) {
      color_encoding_ = from.color_encoding_;
    }
    if (cached_has_bits & 0x00000800u) {
      bit_depth_ = from.bit_depth_;
    }
    if (cached_has_bits & 0x00001000u) {
      tmds_ = from.tmds_;
    }
    if (cached_has_bits & 0x00002000u) {
      is_in_path_to_tv_ = from.is_in_path_to_tv_;
    }
    if (cached_has_bits & 0x00004000u) {
      hdr10_support_ = from.hdr10_support_;
    }
    if (cached_has_bits & 0x00008000u) {
      dolby_vision_support_ = from.dolby_vision_support_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 2031616u) {
    if (cached_has_bits & 0x00010000u) {
      yuv_support_ = from.yuv_support_;
    }
    if (cached_has_bits & 0x00020000u) {
      eotf_support_ = from.eotf_support_;
    }
    if (cached_has_bits & 0x00040000u) {
      yuv_420_support_ = from.yuv_420_support_;
    }
    if (cached_has_bits & 0x00080000u) {
      maximum_supported_hdcp_version_ = from.maximum_supported_hdcp_version_;
    }
    if (cached_has_bits & 0x00100000u) {
      current_hdcp_version_ = from.current_hdcp_version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SystemProfileProto_ExternalAudioVideoDevice::CopyFrom(const SystemProfileProto_ExternalAudioVideoDevice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.SystemProfileProto.ExternalAudioVideoDevice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemProfileProto_ExternalAudioVideoDevice::IsInitialized() const {
  return true;
}

void SystemProfileProto_ExternalAudioVideoDevice::Swap(SystemProfileProto_ExternalAudioVideoDevice* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SystemProfileProto_ExternalAudioVideoDevice::InternalSwap(SystemProfileProto_ExternalAudioVideoDevice* other) {
  using std::swap;
  av_device_type_.InternalSwap(&other->av_device_type_);
  CastToBase(&audio_description_)->InternalSwap(CastToBase(&other->audio_description_));
  CastToBase(&cec_command_)->InternalSwap(CastToBase(&other->cec_command_));
  manufacturer_name_.Swap(&other->manufacturer_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  model_name_.Swap(&other->model_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  product_code_.Swap(&other->product_code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(manufacture_year_, other->manufacture_year_);
  swap(manufacture_week_, other->manufacture_week_);
  swap(horizontal_resolution_, other->horizontal_resolution_);
  swap(vertical_resolution_, other->vertical_resolution_);
  swap(position_in_setup_, other->position_in_setup_);
  swap(cec_version_, other->cec_version_);
  swap(frame_rate_, other->frame_rate_);
  swap(color_encoding_, other->color_encoding_);
  swap(bit_depth_, other->bit_depth_);
  swap(tmds_, other->tmds_);
  swap(is_in_path_to_tv_, other->is_in_path_to_tv_);
  swap(hdr10_support_, other->hdr10_support_);
  swap(dolby_vision_support_, other->dolby_vision_support_);
  swap(yuv_support_, other->yuv_support_);
  swap(eotf_support_, other->eotf_support_);
  swap(yuv_420_support_, other->yuv_420_support_);
  swap(maximum_supported_hdcp_version_, other->maximum_supported_hdcp_version_);
  swap(current_hdcp_version_, other->current_hdcp_version_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string SystemProfileProto_ExternalAudioVideoDevice::GetTypeName() const {
  return "metrics.SystemProfileProto.ExternalAudioVideoDevice";
}


// ===================================================================

void SystemProfileProto_ExternalAccessPoint::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SystemProfileProto_ExternalAccessPoint::kManufacturerFieldNumber;
const int SystemProfileProto_ExternalAccessPoint::kModelNameFieldNumber;
const int SystemProfileProto_ExternalAccessPoint::kModelNumberFieldNumber;
const int SystemProfileProto_ExternalAccessPoint::kDeviceNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SystemProfileProto_ExternalAccessPoint::SystemProfileProto_ExternalAccessPoint()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_system_5fprofile_2eproto::scc_info_SystemProfileProto_ExternalAccessPoint.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.SystemProfileProto.ExternalAccessPoint)
}
SystemProfileProto_ExternalAccessPoint::SystemProfileProto_ExternalAccessPoint(const SystemProfileProto_ExternalAccessPoint& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  manufacturer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_manufacturer()) {
    manufacturer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.manufacturer_);
  }
  model_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_model_name()) {
    model_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_name_);
  }
  model_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_model_number()) {
    model_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_number_);
  }
  device_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_device_name()) {
    device_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_name_);
  }
  // @@protoc_insertion_point(copy_constructor:metrics.SystemProfileProto.ExternalAccessPoint)
}

void SystemProfileProto_ExternalAccessPoint::SharedCtor() {
  manufacturer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SystemProfileProto_ExternalAccessPoint::~SystemProfileProto_ExternalAccessPoint() {
  // @@protoc_insertion_point(destructor:metrics.SystemProfileProto.ExternalAccessPoint)
  SharedDtor();
}

void SystemProfileProto_ExternalAccessPoint::SharedDtor() {
  manufacturer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SystemProfileProto_ExternalAccessPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SystemProfileProto_ExternalAccessPoint& SystemProfileProto_ExternalAccessPoint::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_system_5fprofile_2eproto::scc_info_SystemProfileProto_ExternalAccessPoint.base);
  return *internal_default_instance();
}


void SystemProfileProto_ExternalAccessPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.SystemProfileProto.ExternalAccessPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      manufacturer_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      model_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      model_number_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      device_name_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SystemProfileProto_ExternalAccessPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:metrics.SystemProfileProto.ExternalAccessPoint)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string manufacturer = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_manufacturer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string model_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string model_number = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model_number()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string device_name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.SystemProfileProto.ExternalAccessPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.SystemProfileProto.ExternalAccessPoint)
  return false;
#undef DO_
}

void SystemProfileProto_ExternalAccessPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.SystemProfileProto.ExternalAccessPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string manufacturer = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->manufacturer(), output);
  }

  // optional string model_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->model_name(), output);
  }

  // optional string model_number = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->model_number(), output);
  }

  // optional string device_name = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->device_name(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:metrics.SystemProfileProto.ExternalAccessPoint)
}

size_t SystemProfileProto_ExternalAccessPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.SystemProfileProto.ExternalAccessPoint)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 15u) {
    // optional string manufacturer = 1;
    if (has_manufacturer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->manufacturer());
    }

    // optional string model_name = 2;
    if (has_model_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->model_name());
    }

    // optional string model_number = 3;
    if (has_model_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->model_number());
    }

    // optional string device_name = 4;
    if (has_device_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_name());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SystemProfileProto_ExternalAccessPoint::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SystemProfileProto_ExternalAccessPoint*>(&from));
}

void SystemProfileProto_ExternalAccessPoint::MergeFrom(const SystemProfileProto_ExternalAccessPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.SystemProfileProto.ExternalAccessPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_manufacturer();
      manufacturer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.manufacturer_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_model_name();
      model_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_model_number();
      model_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_number_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_device_name();
      device_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_name_);
    }
  }
}

void SystemProfileProto_ExternalAccessPoint::CopyFrom(const SystemProfileProto_ExternalAccessPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.SystemProfileProto.ExternalAccessPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemProfileProto_ExternalAccessPoint::IsInitialized() const {
  return true;
}

void SystemProfileProto_ExternalAccessPoint::Swap(SystemProfileProto_ExternalAccessPoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SystemProfileProto_ExternalAccessPoint::InternalSwap(SystemProfileProto_ExternalAccessPoint* other) {
  using std::swap;
  manufacturer_.Swap(&other->manufacturer_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  model_name_.Swap(&other->model_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  model_number_.Swap(&other->model_number_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  device_name_.Swap(&other->device_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string SystemProfileProto_ExternalAccessPoint::GetTypeName() const {
  return "metrics.SystemProfileProto.ExternalAccessPoint";
}


// ===================================================================

void SystemProfileProto_AntiVirusProduct::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SystemProfileProto_AntiVirusProduct::kProductNameFieldNumber;
const int SystemProfileProto_AntiVirusProduct::kProductNameHashFieldNumber;
const int SystemProfileProto_AntiVirusProduct::kProductVersionFieldNumber;
const int SystemProfileProto_AntiVirusProduct::kProductVersionHashFieldNumber;
const int SystemProfileProto_AntiVirusProduct::kProductStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SystemProfileProto_AntiVirusProduct::SystemProfileProto_AntiVirusProduct()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_system_5fprofile_2eproto::scc_info_SystemProfileProto_AntiVirusProduct.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.SystemProfileProto.AntiVirusProduct)
}
SystemProfileProto_AntiVirusProduct::SystemProfileProto_AntiVirusProduct(const SystemProfileProto_AntiVirusProduct& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  product_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_product_name()) {
    product_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.product_name_);
  }
  product_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_product_version()) {
    product_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.product_version_);
  }
  ::memcpy(&product_name_hash_, &from.product_name_hash_,
    static_cast<size_t>(reinterpret_cast<char*>(&product_state_) -
    reinterpret_cast<char*>(&product_name_hash_)) + sizeof(product_state_));
  // @@protoc_insertion_point(copy_constructor:metrics.SystemProfileProto.AntiVirusProduct)
}

void SystemProfileProto_AntiVirusProduct::SharedCtor() {
  product_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  product_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&product_name_hash_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&product_state_) -
      reinterpret_cast<char*>(&product_name_hash_)) + sizeof(product_state_));
}

SystemProfileProto_AntiVirusProduct::~SystemProfileProto_AntiVirusProduct() {
  // @@protoc_insertion_point(destructor:metrics.SystemProfileProto.AntiVirusProduct)
  SharedDtor();
}

void SystemProfileProto_AntiVirusProduct::SharedDtor() {
  product_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  product_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SystemProfileProto_AntiVirusProduct::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SystemProfileProto_AntiVirusProduct& SystemProfileProto_AntiVirusProduct::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_system_5fprofile_2eproto::scc_info_SystemProfileProto_AntiVirusProduct.base);
  return *internal_default_instance();
}


void SystemProfileProto_AntiVirusProduct::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.SystemProfileProto.AntiVirusProduct)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      product_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      product_version_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 28u) {
    ::memset(&product_name_hash_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&product_state_) -
        reinterpret_cast<char*>(&product_name_hash_)) + sizeof(product_state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SystemProfileProto_AntiVirusProduct::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:metrics.SystemProfileProto.AntiVirusProduct)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string product_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_product_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 product_name_hash = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_product_name_hash();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &product_name_hash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string product_version = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_product_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 product_version_hash = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_product_version_hash();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &product_version_hash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .metrics.SystemProfileProto.AntiVirusState product_state = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::metrics::SystemProfileProto_AntiVirusState_IsValid(value)) {
            set_product_state(static_cast< ::metrics::SystemProfileProto_AntiVirusState >(value));
          } else {
            unknown_fields_stream.WriteVarint32(40u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.SystemProfileProto.AntiVirusProduct)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.SystemProfileProto.AntiVirusProduct)
  return false;
#undef DO_
}

void SystemProfileProto_AntiVirusProduct::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.SystemProfileProto.AntiVirusProduct)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string product_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->product_name(), output);
  }

  // optional fixed32 product_name_hash = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->product_name_hash(), output);
  }

  // optional string product_version = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->product_version(), output);
  }

  // optional fixed32 product_version_hash = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->product_version_hash(), output);
  }

  // optional .metrics.SystemProfileProto.AntiVirusState product_state = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->product_state(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:metrics.SystemProfileProto.AntiVirusProduct)
}

size_t SystemProfileProto_AntiVirusProduct::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.SystemProfileProto.AntiVirusProduct)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 31u) {
    // optional string product_name = 1;
    if (has_product_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->product_name());
    }

    // optional string product_version = 3;
    if (has_product_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->product_version());
    }

    // optional fixed32 product_name_hash = 2;
    if (has_product_name_hash()) {
      total_size += 1 + 4;
    }

    // optional fixed32 product_version_hash = 4;
    if (has_product_version_hash()) {
      total_size += 1 + 4;
    }

    // optional .metrics.SystemProfileProto.AntiVirusState product_state = 5;
    if (has_product_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->product_state());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SystemProfileProto_AntiVirusProduct::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SystemProfileProto_AntiVirusProduct*>(&from));
}

void SystemProfileProto_AntiVirusProduct::MergeFrom(const SystemProfileProto_AntiVirusProduct& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.SystemProfileProto.AntiVirusProduct)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_product_name();
      product_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.product_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_product_version();
      product_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.product_version_);
    }
    if (cached_has_bits & 0x00000004u) {
      product_name_hash_ = from.product_name_hash_;
    }
    if (cached_has_bits & 0x00000008u) {
      product_version_hash_ = from.product_version_hash_;
    }
    if (cached_has_bits & 0x00000010u) {
      product_state_ = from.product_state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SystemProfileProto_AntiVirusProduct::CopyFrom(const SystemProfileProto_AntiVirusProduct& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.SystemProfileProto.AntiVirusProduct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemProfileProto_AntiVirusProduct::IsInitialized() const {
  return true;
}

void SystemProfileProto_AntiVirusProduct::Swap(SystemProfileProto_AntiVirusProduct* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SystemProfileProto_AntiVirusProduct::InternalSwap(SystemProfileProto_AntiVirusProduct* other) {
  using std::swap;
  product_name_.Swap(&other->product_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  product_version_.Swap(&other->product_version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(product_name_hash_, other->product_name_hash_);
  swap(product_version_hash_, other->product_version_hash_);
  swap(product_state_, other->product_state_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string SystemProfileProto_AntiVirusProduct::GetTypeName() const {
  return "metrics.SystemProfileProto.AntiVirusProduct";
}


// ===================================================================

void SystemProfileProto_ChromeComponent::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SystemProfileProto_ChromeComponent::kComponentIdFieldNumber;
const int SystemProfileProto_ChromeComponent::kVersionFieldNumber;
const int SystemProfileProto_ChromeComponent::kOmahaFingerprintFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SystemProfileProto_ChromeComponent::SystemProfileProto_ChromeComponent()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_system_5fprofile_2eproto::scc_info_SystemProfileProto_ChromeComponent.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.SystemProfileProto.ChromeComponent)
}
SystemProfileProto_ChromeComponent::SystemProfileProto_ChromeComponent(const SystemProfileProto_ChromeComponent& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_version()) {
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  ::memcpy(&omaha_fingerprint_, &from.omaha_fingerprint_,
    static_cast<size_t>(reinterpret_cast<char*>(&component_id_) -
    reinterpret_cast<char*>(&omaha_fingerprint_)) + sizeof(component_id_));
  // @@protoc_insertion_point(copy_constructor:metrics.SystemProfileProto.ChromeComponent)
}

void SystemProfileProto_ChromeComponent::SharedCtor() {
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  omaha_fingerprint_ = 0u;
  component_id_ = 1;
}

SystemProfileProto_ChromeComponent::~SystemProfileProto_ChromeComponent() {
  // @@protoc_insertion_point(destructor:metrics.SystemProfileProto.ChromeComponent)
  SharedDtor();
}

void SystemProfileProto_ChromeComponent::SharedDtor() {
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SystemProfileProto_ChromeComponent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SystemProfileProto_ChromeComponent& SystemProfileProto_ChromeComponent::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_system_5fprofile_2eproto::scc_info_SystemProfileProto_ChromeComponent.base);
  return *internal_default_instance();
}


void SystemProfileProto_ChromeComponent::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.SystemProfileProto.ChromeComponent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    version_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 6u) {
    omaha_fingerprint_ = 0u;
    component_id_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SystemProfileProto_ChromeComponent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:metrics.SystemProfileProto.ChromeComponent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .metrics.SystemProfileProto.ComponentId component_id = 1 [default = UNKNOWN];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::metrics::SystemProfileProto_ComponentId_IsValid(value)) {
            set_component_id(static_cast< ::metrics::SystemProfileProto_ComponentId >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 omaha_fingerprint = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_omaha_fingerprint();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &omaha_fingerprint_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.SystemProfileProto.ChromeComponent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.SystemProfileProto.ChromeComponent)
  return false;
#undef DO_
}

void SystemProfileProto_ChromeComponent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.SystemProfileProto.ChromeComponent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .metrics.SystemProfileProto.ComponentId component_id = 1 [default = UNKNOWN];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->component_id(), output);
  }

  // optional string version = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->version(), output);
  }

  // optional fixed32 omaha_fingerprint = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->omaha_fingerprint(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:metrics.SystemProfileProto.ChromeComponent)
}

size_t SystemProfileProto_ChromeComponent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.SystemProfileProto.ChromeComponent)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 7u) {
    // optional string version = 2;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // optional fixed32 omaha_fingerprint = 3;
    if (has_omaha_fingerprint()) {
      total_size += 1 + 4;
    }

    // optional .metrics.SystemProfileProto.ComponentId component_id = 1 [default = UNKNOWN];
    if (has_component_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->component_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SystemProfileProto_ChromeComponent::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SystemProfileProto_ChromeComponent*>(&from));
}

void SystemProfileProto_ChromeComponent::MergeFrom(const SystemProfileProto_ChromeComponent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.SystemProfileProto.ChromeComponent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_version();
      version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
    }
    if (cached_has_bits & 0x00000002u) {
      omaha_fingerprint_ = from.omaha_fingerprint_;
    }
    if (cached_has_bits & 0x00000004u) {
      component_id_ = from.component_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SystemProfileProto_ChromeComponent::CopyFrom(const SystemProfileProto_ChromeComponent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.SystemProfileProto.ChromeComponent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemProfileProto_ChromeComponent::IsInitialized() const {
  return true;
}

void SystemProfileProto_ChromeComponent::Swap(SystemProfileProto_ChromeComponent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SystemProfileProto_ChromeComponent::InternalSwap(SystemProfileProto_ChromeComponent* other) {
  using std::swap;
  version_.Swap(&other->version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(omaha_fingerprint_, other->omaha_fingerprint_);
  swap(component_id_, other->component_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string SystemProfileProto_ChromeComponent::GetTypeName() const {
  return "metrics.SystemProfileProto.ChromeComponent";
}


// ===================================================================

void SystemProfileProto_LinkedAndroidPhoneData::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SystemProfileProto_LinkedAndroidPhoneData::kPhoneModelNameHashFieldNumber;
const int SystemProfileProto_LinkedAndroidPhoneData::kIsSmartlockEnabledFieldNumber;
const int SystemProfileProto_LinkedAndroidPhoneData::kIsInstantTetheringEnabledFieldNumber;
const int SystemProfileProto_LinkedAndroidPhoneData::kIsMessagesEnabledFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SystemProfileProto_LinkedAndroidPhoneData::SystemProfileProto_LinkedAndroidPhoneData()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_system_5fprofile_2eproto::scc_info_SystemProfileProto_LinkedAndroidPhoneData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.SystemProfileProto.LinkedAndroidPhoneData)
}
SystemProfileProto_LinkedAndroidPhoneData::SystemProfileProto_LinkedAndroidPhoneData(const SystemProfileProto_LinkedAndroidPhoneData& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&phone_model_name_hash_, &from.phone_model_name_hash_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_messages_enabled_) -
    reinterpret_cast<char*>(&phone_model_name_hash_)) + sizeof(is_messages_enabled_));
  // @@protoc_insertion_point(copy_constructor:metrics.SystemProfileProto.LinkedAndroidPhoneData)
}

void SystemProfileProto_LinkedAndroidPhoneData::SharedCtor() {
  ::memset(&phone_model_name_hash_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_messages_enabled_) -
      reinterpret_cast<char*>(&phone_model_name_hash_)) + sizeof(is_messages_enabled_));
}

SystemProfileProto_LinkedAndroidPhoneData::~SystemProfileProto_LinkedAndroidPhoneData() {
  // @@protoc_insertion_point(destructor:metrics.SystemProfileProto.LinkedAndroidPhoneData)
  SharedDtor();
}

void SystemProfileProto_LinkedAndroidPhoneData::SharedDtor() {
}

void SystemProfileProto_LinkedAndroidPhoneData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SystemProfileProto_LinkedAndroidPhoneData& SystemProfileProto_LinkedAndroidPhoneData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_system_5fprofile_2eproto::scc_info_SystemProfileProto_LinkedAndroidPhoneData.base);
  return *internal_default_instance();
}


void SystemProfileProto_LinkedAndroidPhoneData::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.SystemProfileProto.LinkedAndroidPhoneData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&phone_model_name_hash_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_messages_enabled_) -
        reinterpret_cast<char*>(&phone_model_name_hash_)) + sizeof(is_messages_enabled_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SystemProfileProto_LinkedAndroidPhoneData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:metrics.SystemProfileProto.LinkedAndroidPhoneData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 phone_model_name_hash = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_phone_model_name_hash();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &phone_model_name_hash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_smartlock_enabled = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_is_smartlock_enabled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_smartlock_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_instant_tethering_enabled = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_is_instant_tethering_enabled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_instant_tethering_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_messages_enabled = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_is_messages_enabled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_messages_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.SystemProfileProto.LinkedAndroidPhoneData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.SystemProfileProto.LinkedAndroidPhoneData)
  return false;
#undef DO_
}

void SystemProfileProto_LinkedAndroidPhoneData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.SystemProfileProto.LinkedAndroidPhoneData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 phone_model_name_hash = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->phone_model_name_hash(), output);
  }

  // optional bool is_smartlock_enabled = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_smartlock_enabled(), output);
  }

  // optional bool is_instant_tethering_enabled = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_instant_tethering_enabled(), output);
  }

  // optional bool is_messages_enabled = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_messages_enabled(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:metrics.SystemProfileProto.LinkedAndroidPhoneData)
}

size_t SystemProfileProto_LinkedAndroidPhoneData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.SystemProfileProto.LinkedAndroidPhoneData)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 15u) {
    // optional fixed32 phone_model_name_hash = 1;
    if (has_phone_model_name_hash()) {
      total_size += 1 + 4;
    }

    // optional bool is_smartlock_enabled = 2;
    if (has_is_smartlock_enabled()) {
      total_size += 1 + 1;
    }

    // optional bool is_instant_tethering_enabled = 3;
    if (has_is_instant_tethering_enabled()) {
      total_size += 1 + 1;
    }

    // optional bool is_messages_enabled = 4;
    if (has_is_messages_enabled()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SystemProfileProto_LinkedAndroidPhoneData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SystemProfileProto_LinkedAndroidPhoneData*>(&from));
}

void SystemProfileProto_LinkedAndroidPhoneData::MergeFrom(const SystemProfileProto_LinkedAndroidPhoneData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.SystemProfileProto.LinkedAndroidPhoneData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      phone_model_name_hash_ = from.phone_model_name_hash_;
    }
    if (cached_has_bits & 0x00000002u) {
      is_smartlock_enabled_ = from.is_smartlock_enabled_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_instant_tethering_enabled_ = from.is_instant_tethering_enabled_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_messages_enabled_ = from.is_messages_enabled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SystemProfileProto_LinkedAndroidPhoneData::CopyFrom(const SystemProfileProto_LinkedAndroidPhoneData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.SystemProfileProto.LinkedAndroidPhoneData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemProfileProto_LinkedAndroidPhoneData::IsInitialized() const {
  return true;
}

void SystemProfileProto_LinkedAndroidPhoneData::Swap(SystemProfileProto_LinkedAndroidPhoneData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SystemProfileProto_LinkedAndroidPhoneData::InternalSwap(SystemProfileProto_LinkedAndroidPhoneData* other) {
  using std::swap;
  swap(phone_model_name_hash_, other->phone_model_name_hash_);
  swap(is_smartlock_enabled_, other->is_smartlock_enabled_);
  swap(is_instant_tethering_enabled_, other->is_instant_tethering_enabled_);
  swap(is_messages_enabled_, other->is_messages_enabled_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string SystemProfileProto_LinkedAndroidPhoneData::GetTypeName() const {
  return "metrics.SystemProfileProto.LinkedAndroidPhoneData";
}


// ===================================================================

void SystemProfileProto::InitAsDefaultInstance() {
  ::metrics::_SystemProfileProto_default_instance_._instance.get_mutable()->os_ = const_cast< ::metrics::SystemProfileProto_OS*>(
      ::metrics::SystemProfileProto_OS::internal_default_instance());
  ::metrics::_SystemProfileProto_default_instance_._instance.get_mutable()->hardware_ = const_cast< ::metrics::SystemProfileProto_Hardware*>(
      ::metrics::SystemProfileProto_Hardware::internal_default_instance());
  ::metrics::_SystemProfileProto_default_instance_._instance.get_mutable()->network_ = const_cast< ::metrics::SystemProfileProto_Network*>(
      ::metrics::SystemProfileProto_Network::internal_default_instance());
  ::metrics::_SystemProfileProto_default_instance_._instance.get_mutable()->google_update_ = const_cast< ::metrics::SystemProfileProto_GoogleUpdate*>(
      ::metrics::SystemProfileProto_GoogleUpdate::internal_default_instance());
  ::metrics::_SystemProfileProto_default_instance_._instance.get_mutable()->stability_ = const_cast< ::metrics::SystemProfileProto_Stability*>(
      ::metrics::SystemProfileProto_Stability::internal_default_instance());
  ::metrics::_SystemProfileProto_default_instance_._instance.get_mutable()->external_access_point_ = const_cast< ::metrics::SystemProfileProto_ExternalAccessPoint*>(
      ::metrics::SystemProfileProto_ExternalAccessPoint::internal_default_instance());
  ::metrics::_SystemProfileProto_default_instance_._instance.get_mutable()->linked_android_phone_data_ = const_cast< ::metrics::SystemProfileProto_LinkedAndroidPhoneData*>(
      ::metrics::SystemProfileProto_LinkedAndroidPhoneData::internal_default_instance());
}
void SystemProfileProto::clear_extension_install() {
  extension_install_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SystemProfileProto::kBuildTimestampFieldNumber;
const int SystemProfileProto::kAppVersionFieldNumber;
const int SystemProfileProto::kBrandCodeFieldNumber;
const int SystemProfileProto::kChannelFieldNumber;
const int SystemProfileProto::kIsInstrumentedBuildFieldNumber;
const int SystemProfileProto::kUmaEnabledDateFieldNumber;
const int SystemProfileProto::kInstallDateFieldNumber;
const int SystemProfileProto::kApplicationLocaleFieldNumber;
const int SystemProfileProto::kOsFieldNumber;
const int SystemProfileProto::kHardwareFieldNumber;
const int SystemProfileProto::kNetworkFieldNumber;
const int SystemProfileProto::kGoogleUpdateFieldNumber;
const int SystemProfileProto::kPluginFieldNumber;
const int SystemProfileProto::kStabilityFieldNumber;
const int SystemProfileProto::kFieldTrialFieldNumber;
const int SystemProfileProto::kVariationsSeedVersionFieldNumber;
const int SystemProfileProto::kExternalAudioVideoDeviceFieldNumber;
const int SystemProfileProto::kExternalAccessPointFieldNumber;
const int SystemProfileProto::kMultiProfileUserCountFieldNumber;
const int SystemProfileProto::kOccupiedExtensionBucketFieldNumber;
const int SystemProfileProto::kOffstoreExtensionsStateFieldNumber;
const int SystemProfileProto::kUmaDefaultStateFieldNumber;
const int SystemProfileProto::kAntivirusProductFieldNumber;
const int SystemProfileProto::kChromeComponentFieldNumber;
const int SystemProfileProto::kExtensionInstallFieldNumber;
const int SystemProfileProto::kAppPackageNameFieldNumber;
const int SystemProfileProto::kLinkedAndroidPhoneDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SystemProfileProto::SystemProfileProto()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_system_5fprofile_2eproto::scc_info_SystemProfileProto.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.SystemProfileProto)
}
SystemProfileProto::SystemProfileProto(const SystemProfileProto& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      plugin_(from.plugin_),
      field_trial_(from.field_trial_),
      external_audio_video_device_(from.external_audio_video_device_),
      occupied_extension_bucket_(from.occupied_extension_bucket_),
      antivirus_product_(from.antivirus_product_),
      chrome_component_(from.chrome_component_),
      extension_install_(from.extension_install_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  app_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_app_version()) {
    app_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.app_version_);
  }
  application_locale_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_application_locale()) {
    application_locale_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.application_locale_);
  }
  brand_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_brand_code()) {
    brand_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.brand_code_);
  }
  app_package_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_app_package_name()) {
    app_package_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.app_package_name_);
  }
  variations_seed_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_variations_seed_version()) {
    variations_seed_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.variations_seed_version_);
  }
  if (from.has_os()) {
    os_ = new ::metrics::SystemProfileProto_OS(*from.os_);
  } else {
    os_ = NULL;
  }
  if (from.has_hardware()) {
    hardware_ = new ::metrics::SystemProfileProto_Hardware(*from.hardware_);
  } else {
    hardware_ = NULL;
  }
  if (from.has_stability()) {
    stability_ = new ::metrics::SystemProfileProto_Stability(*from.stability_);
  } else {
    stability_ = NULL;
  }
  if (from.has_google_update()) {
    google_update_ = new ::metrics::SystemProfileProto_GoogleUpdate(*from.google_update_);
  } else {
    google_update_ = NULL;
  }
  if (from.has_network()) {
    network_ = new ::metrics::SystemProfileProto_Network(*from.network_);
  } else {
    network_ = NULL;
  }
  if (from.has_external_access_point()) {
    external_access_point_ = new ::metrics::SystemProfileProto_ExternalAccessPoint(*from.external_access_point_);
  } else {
    external_access_point_ = NULL;
  }
  if (from.has_linked_android_phone_data()) {
    linked_android_phone_data_ = new ::metrics::SystemProfileProto_LinkedAndroidPhoneData(*from.linked_android_phone_data_);
  } else {
    linked_android_phone_data_ = NULL;
  }
  ::memcpy(&build_timestamp_, &from.build_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&uma_default_state_) -
    reinterpret_cast<char*>(&build_timestamp_)) + sizeof(uma_default_state_));
  // @@protoc_insertion_point(copy_constructor:metrics.SystemProfileProto)
}

void SystemProfileProto::SharedCtor() {
  app_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  application_locale_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  brand_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_package_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  variations_seed_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&os_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uma_default_state_) -
      reinterpret_cast<char*>(&os_)) + sizeof(uma_default_state_));
}

SystemProfileProto::~SystemProfileProto() {
  // @@protoc_insertion_point(destructor:metrics.SystemProfileProto)
  SharedDtor();
}

void SystemProfileProto::SharedDtor() {
  app_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  application_locale_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  brand_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_package_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  variations_seed_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete os_;
  if (this != internal_default_instance()) delete hardware_;
  if (this != internal_default_instance()) delete stability_;
  if (this != internal_default_instance()) delete google_update_;
  if (this != internal_default_instance()) delete network_;
  if (this != internal_default_instance()) delete external_access_point_;
  if (this != internal_default_instance()) delete linked_android_phone_data_;
}

void SystemProfileProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SystemProfileProto& SystemProfileProto::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_system_5fprofile_2eproto::scc_info_SystemProfileProto.base);
  return *internal_default_instance();
}


void SystemProfileProto::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.SystemProfileProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  plugin_.Clear();
  field_trial_.Clear();
  external_audio_video_device_.Clear();
  occupied_extension_bucket_.Clear();
  antivirus_product_.Clear();
  chrome_component_.Clear();
  extension_install_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      app_version_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      application_locale_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      brand_code_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      app_package_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      variations_seed_version_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(os_ != NULL);
      os_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(hardware_ != NULL);
      hardware_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(stability_ != NULL);
      stability_->Clear();
    }
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(google_update_ != NULL);
      google_update_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(network_ != NULL);
      network_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(external_access_point_ != NULL);
      external_access_point_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(linked_android_phone_data_ != NULL);
      linked_android_phone_data_->Clear();
    }
  }
  if (cached_has_bits & 61440u) {
    ::memset(&build_timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&multi_profile_user_count_) -
        reinterpret_cast<char*>(&build_timestamp_)) + sizeof(multi_profile_user_count_));
  }
  if (cached_has_bits & 983040u) {
    ::memset(&install_date_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&uma_default_state_) -
        reinterpret_cast<char*>(&install_date_)) + sizeof(uma_default_state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SystemProfileProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:metrics.SystemProfileProto)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 build_timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_build_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &build_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string app_version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_app_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 uma_enabled_date = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_uma_enabled_date();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uma_enabled_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string application_locale = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_application_locale()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .metrics.SystemProfileProto.OS os = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_os()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .metrics.SystemProfileProto.Hardware hardware = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_hardware()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .metrics.SystemProfileProto.Plugin plugin = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_plugin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .metrics.SystemProfileProto.Stability stability = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_stability()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .metrics.SystemProfileProto.FieldTrial field_trial = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_field_trial()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .metrics.SystemProfileProto.Channel channel = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::metrics::SystemProfileProto_Channel_IsValid(value)) {
            set_channel(static_cast< ::metrics::SystemProfileProto_Channel >(value));
          } else {
            unknown_fields_stream.WriteVarint32(80u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .metrics.SystemProfileProto.GoogleUpdate google_update = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_google_update()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string brand_code = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_brand_code()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .metrics.SystemProfileProto.Network network = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_network()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .metrics.SystemProfileProto.ExternalAudioVideoDevice external_audio_video_device = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_external_audio_video_device()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .metrics.SystemProfileProto.ExternalAccessPoint external_access_point = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_external_access_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 install_date = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_install_date();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &install_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 multi_profile_user_count = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_multi_profile_user_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &multi_profile_user_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 occupied_extension_bucket = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 144u, input, this->mutable_occupied_extension_bucket())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_occupied_extension_bucket())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .metrics.SystemProfileProto.ExtensionsState offstore_extensions_state = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::metrics::SystemProfileProto_ExtensionsState_IsValid(value)) {
            set_offstore_extensions_state(static_cast< ::metrics::SystemProfileProto_ExtensionsState >(value));
          } else {
            unknown_fields_stream.WriteVarint32(152u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_instrumented_build = 20 [default = false];
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          set_has_is_instrumented_build();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_instrumented_build_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .metrics.SystemProfileProto.UmaDefaultState uma_default_state = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::metrics::SystemProfileProto_UmaDefaultState_IsValid(value)) {
            set_uma_default_state(static_cast< ::metrics::SystemProfileProto_UmaDefaultState >(value));
          } else {
            unknown_fields_stream.WriteVarint32(176u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .metrics.SystemProfileProto.AntiVirusProduct antivirus_product = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 186 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_antivirus_product()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .metrics.SystemProfileProto.ChromeComponent chrome_component = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 194 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_chrome_component()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .metrics.ExtensionInstallProto extension_install = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u /* 202 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_extension_install()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string app_package_name = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u /* 210 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_app_package_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string variations_seed_version = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(226u /* 226 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_variations_seed_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .metrics.SystemProfileProto.LinkedAndroidPhoneData linked_android_phone_data = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u /* 234 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_linked_android_phone_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.SystemProfileProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.SystemProfileProto)
  return false;
#undef DO_
}

void SystemProfileProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.SystemProfileProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 build_timestamp = 1;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->build_timestamp(), output);
  }

  // optional string app_version = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->app_version(), output);
  }

  // optional int64 uma_enabled_date = 3;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->uma_enabled_date(), output);
  }

  // optional string application_locale = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->application_locale(), output);
  }

  // optional .metrics.SystemProfileProto.OS os = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->_internal_os(), output);
  }

  // optional .metrics.SystemProfileProto.Hardware hardware = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->_internal_hardware(), output);
  }

  // repeated .metrics.SystemProfileProto.Plugin plugin = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->plugin_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7,
      this->plugin(static_cast<int>(i)),
      output);
  }

  // optional .metrics.SystemProfileProto.Stability stability = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->_internal_stability(), output);
  }

  // repeated .metrics.SystemProfileProto.FieldTrial field_trial = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->field_trial_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9,
      this->field_trial(static_cast<int>(i)),
      output);
  }

  // optional .metrics.SystemProfileProto.Channel channel = 10;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->channel(), output);
  }

  // optional .metrics.SystemProfileProto.GoogleUpdate google_update = 11;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11, this->_internal_google_update(), output);
  }

  // optional string brand_code = 12;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->brand_code(), output);
  }

  // optional .metrics.SystemProfileProto.Network network = 13;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      13, this->_internal_network(), output);
  }

  // repeated .metrics.SystemProfileProto.ExternalAudioVideoDevice external_audio_video_device = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->external_audio_video_device_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      14,
      this->external_audio_video_device(static_cast<int>(i)),
      output);
  }

  // optional .metrics.SystemProfileProto.ExternalAccessPoint external_access_point = 15;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      15, this->_internal_external_access_point(), output);
  }

  // optional int64 install_date = 16;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(16, this->install_date(), output);
  }

  // optional uint32 multi_profile_user_count = 17;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->multi_profile_user_count(), output);
  }

  // repeated int32 occupied_extension_bucket = 18;
  for (int i = 0, n = this->occupied_extension_bucket_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      18, this->occupied_extension_bucket(i), output);
  }

  // optional .metrics.SystemProfileProto.ExtensionsState offstore_extensions_state = 19;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      19, this->offstore_extensions_state(), output);
  }

  // optional bool is_instrumented_build = 20 [default = false];
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->is_instrumented_build(), output);
  }

  // optional .metrics.SystemProfileProto.UmaDefaultState uma_default_state = 22;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      22, this->uma_default_state(), output);
  }

  // repeated .metrics.SystemProfileProto.AntiVirusProduct antivirus_product = 23;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->antivirus_product_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      23,
      this->antivirus_product(static_cast<int>(i)),
      output);
  }

  // repeated .metrics.SystemProfileProto.ChromeComponent chrome_component = 24;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->chrome_component_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      24,
      this->chrome_component(static_cast<int>(i)),
      output);
  }

  // repeated .metrics.ExtensionInstallProto extension_install = 25;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->extension_install_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      25,
      this->extension_install(static_cast<int>(i)),
      output);
  }

  // optional string app_package_name = 26;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      26, this->app_package_name(), output);
  }

  // optional string variations_seed_version = 28;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      28, this->variations_seed_version(), output);
  }

  // optional .metrics.SystemProfileProto.LinkedAndroidPhoneData linked_android_phone_data = 29;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      29, this->_internal_linked_android_phone_data(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:metrics.SystemProfileProto)
}

size_t SystemProfileProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.SystemProfileProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // repeated .metrics.SystemProfileProto.Plugin plugin = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->plugin_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->plugin(static_cast<int>(i)));
    }
  }

  // repeated .metrics.SystemProfileProto.FieldTrial field_trial = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->field_trial_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->field_trial(static_cast<int>(i)));
    }
  }

  // repeated .metrics.SystemProfileProto.ExternalAudioVideoDevice external_audio_video_device = 14;
  {
    unsigned int count = static_cast<unsigned int>(this->external_audio_video_device_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->external_audio_video_device(static_cast<int>(i)));
    }
  }

  // repeated int32 occupied_extension_bucket = 18;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->occupied_extension_bucket_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->occupied_extension_bucket_size());
    total_size += data_size;
  }

  // repeated .metrics.SystemProfileProto.AntiVirusProduct antivirus_product = 23;
  {
    unsigned int count = static_cast<unsigned int>(this->antivirus_product_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->antivirus_product(static_cast<int>(i)));
    }
  }

  // repeated .metrics.SystemProfileProto.ChromeComponent chrome_component = 24;
  {
    unsigned int count = static_cast<unsigned int>(this->chrome_component_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->chrome_component(static_cast<int>(i)));
    }
  }

  // repeated .metrics.ExtensionInstallProto extension_install = 25;
  {
    unsigned int count = static_cast<unsigned int>(this->extension_install_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->extension_install(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string app_version = 2;
    if (has_app_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->app_version());
    }

    // optional string application_locale = 4;
    if (has_application_locale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->application_locale());
    }

    // optional string brand_code = 12;
    if (has_brand_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->brand_code());
    }

    // optional string app_package_name = 26;
    if (has_app_package_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->app_package_name());
    }

    // optional string variations_seed_version = 28;
    if (has_variations_seed_version()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->variations_seed_version());
    }

    // optional .metrics.SystemProfileProto.OS os = 5;
    if (has_os()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *os_);
    }

    // optional .metrics.SystemProfileProto.Hardware hardware = 6;
    if (has_hardware()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *hardware_);
    }

    // optional .metrics.SystemProfileProto.Stability stability = 8;
    if (has_stability()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *stability_);
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional .metrics.SystemProfileProto.GoogleUpdate google_update = 11;
    if (has_google_update()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *google_update_);
    }

    // optional .metrics.SystemProfileProto.Network network = 13;
    if (has_network()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *network_);
    }

    // optional .metrics.SystemProfileProto.ExternalAccessPoint external_access_point = 15;
    if (has_external_access_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *external_access_point_);
    }

    // optional .metrics.SystemProfileProto.LinkedAndroidPhoneData linked_android_phone_data = 29;
    if (has_linked_android_phone_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *linked_android_phone_data_);
    }

    // optional int64 build_timestamp = 1;
    if (has_build_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->build_timestamp());
    }

    // optional int64 uma_enabled_date = 3;
    if (has_uma_enabled_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uma_enabled_date());
    }

    // optional .metrics.SystemProfileProto.Channel channel = 10;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->channel());
    }

    // optional uint32 multi_profile_user_count = 17;
    if (has_multi_profile_user_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->multi_profile_user_count());
    }

  }
  if (_has_bits_[16 / 32] & 983040u) {
    // optional int64 install_date = 16;
    if (has_install_date()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->install_date());
    }

    // optional .metrics.SystemProfileProto.ExtensionsState offstore_extensions_state = 19;
    if (has_offstore_extensions_state()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->offstore_extensions_state());
    }

    // optional bool is_instrumented_build = 20 [default = false];
    if (has_is_instrumented_build()) {
      total_size += 2 + 1;
    }

    // optional .metrics.SystemProfileProto.UmaDefaultState uma_default_state = 22;
    if (has_uma_default_state()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->uma_default_state());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SystemProfileProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SystemProfileProto*>(&from));
}

void SystemProfileProto::MergeFrom(const SystemProfileProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.SystemProfileProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  plugin_.MergeFrom(from.plugin_);
  field_trial_.MergeFrom(from.field_trial_);
  external_audio_video_device_.MergeFrom(from.external_audio_video_device_);
  occupied_extension_bucket_.MergeFrom(from.occupied_extension_bucket_);
  antivirus_product_.MergeFrom(from.antivirus_product_);
  chrome_component_.MergeFrom(from.chrome_component_);
  extension_install_.MergeFrom(from.extension_install_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_app_version();
      app_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.app_version_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_application_locale();
      application_locale_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.application_locale_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_brand_code();
      brand_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.brand_code_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_app_package_name();
      app_package_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.app_package_name_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_variations_seed_version();
      variations_seed_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.variations_seed_version_);
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_os()->::metrics::SystemProfileProto_OS::MergeFrom(from.os());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_hardware()->::metrics::SystemProfileProto_Hardware::MergeFrom(from.hardware());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_stability()->::metrics::SystemProfileProto_Stability::MergeFrom(from.stability());
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_google_update()->::metrics::SystemProfileProto_GoogleUpdate::MergeFrom(from.google_update());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_network()->::metrics::SystemProfileProto_Network::MergeFrom(from.network());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_external_access_point()->::metrics::SystemProfileProto_ExternalAccessPoint::MergeFrom(from.external_access_point());
    }
    if (cached_has_bits & 0x00000800u) {
      mutable_linked_android_phone_data()->::metrics::SystemProfileProto_LinkedAndroidPhoneData::MergeFrom(from.linked_android_phone_data());
    }
    if (cached_has_bits & 0x00001000u) {
      build_timestamp_ = from.build_timestamp_;
    }
    if (cached_has_bits & 0x00002000u) {
      uma_enabled_date_ = from.uma_enabled_date_;
    }
    if (cached_has_bits & 0x00004000u) {
      channel_ = from.channel_;
    }
    if (cached_has_bits & 0x00008000u) {
      multi_profile_user_count_ = from.multi_profile_user_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 983040u) {
    if (cached_has_bits & 0x00010000u) {
      install_date_ = from.install_date_;
    }
    if (cached_has_bits & 0x00020000u) {
      offstore_extensions_state_ = from.offstore_extensions_state_;
    }
    if (cached_has_bits & 0x00040000u) {
      is_instrumented_build_ = from.is_instrumented_build_;
    }
    if (cached_has_bits & 0x00080000u) {
      uma_default_state_ = from.uma_default_state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SystemProfileProto::CopyFrom(const SystemProfileProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.SystemProfileProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemProfileProto::IsInitialized() const {
  return true;
}

void SystemProfileProto::Swap(SystemProfileProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SystemProfileProto::InternalSwap(SystemProfileProto* other) {
  using std::swap;
  CastToBase(&plugin_)->InternalSwap(CastToBase(&other->plugin_));
  CastToBase(&field_trial_)->InternalSwap(CastToBase(&other->field_trial_));
  CastToBase(&external_audio_video_device_)->InternalSwap(CastToBase(&other->external_audio_video_device_));
  occupied_extension_bucket_.InternalSwap(&other->occupied_extension_bucket_);
  CastToBase(&antivirus_product_)->InternalSwap(CastToBase(&other->antivirus_product_));
  CastToBase(&chrome_component_)->InternalSwap(CastToBase(&other->chrome_component_));
  CastToBase(&extension_install_)->InternalSwap(CastToBase(&other->extension_install_));
  app_version_.Swap(&other->app_version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  application_locale_.Swap(&other->application_locale_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  brand_code_.Swap(&other->brand_code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  app_package_name_.Swap(&other->app_package_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  variations_seed_version_.Swap(&other->variations_seed_version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(os_, other->os_);
  swap(hardware_, other->hardware_);
  swap(stability_, other->stability_);
  swap(google_update_, other->google_update_);
  swap(network_, other->network_);
  swap(external_access_point_, other->external_access_point_);
  swap(linked_android_phone_data_, other->linked_android_phone_data_);
  swap(build_timestamp_, other->build_timestamp_);
  swap(uma_enabled_date_, other->uma_enabled_date_);
  swap(channel_, other->channel_);
  swap(multi_profile_user_count_, other->multi_profile_user_count_);
  swap(install_date_, other->install_date_);
  swap(offstore_extensions_state_, other->offstore_extensions_state_);
  swap(is_instrumented_build_, other->is_instrumented_build_);
  swap(uma_default_state_, other->uma_default_state_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string SystemProfileProto::GetTypeName() const {
  return "metrics.SystemProfileProto";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace metrics
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metrics::SystemProfileProto_OS_Arc* Arena::CreateMaybeMessage< ::metrics::SystemProfileProto_OS_Arc >(Arena* arena) {
  return Arena::CreateInternal< ::metrics::SystemProfileProto_OS_Arc >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metrics::SystemProfileProto_OS* Arena::CreateMaybeMessage< ::metrics::SystemProfileProto_OS >(Arena* arena) {
  return Arena::CreateInternal< ::metrics::SystemProfileProto_OS >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metrics::SystemProfileProto_Hardware_CPU* Arena::CreateMaybeMessage< ::metrics::SystemProfileProto_Hardware_CPU >(Arena* arena) {
  return Arena::CreateInternal< ::metrics::SystemProfileProto_Hardware_CPU >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metrics::SystemProfileProto_Hardware_Graphics* Arena::CreateMaybeMessage< ::metrics::SystemProfileProto_Hardware_Graphics >(Arena* arena) {
  return Arena::CreateInternal< ::metrics::SystemProfileProto_Hardware_Graphics >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metrics::SystemProfileProto_Hardware_Bluetooth_PairedDevice* Arena::CreateMaybeMessage< ::metrics::SystemProfileProto_Hardware_Bluetooth_PairedDevice >(Arena* arena) {
  return Arena::CreateInternal< ::metrics::SystemProfileProto_Hardware_Bluetooth_PairedDevice >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metrics::SystemProfileProto_Hardware_Bluetooth* Arena::CreateMaybeMessage< ::metrics::SystemProfileProto_Hardware_Bluetooth >(Arena* arena) {
  return Arena::CreateInternal< ::metrics::SystemProfileProto_Hardware_Bluetooth >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metrics::SystemProfileProto_Hardware_DeprecatedTouchScreen* Arena::CreateMaybeMessage< ::metrics::SystemProfileProto_Hardware_DeprecatedTouchScreen >(Arena* arena) {
  return Arena::CreateInternal< ::metrics::SystemProfileProto_Hardware_DeprecatedTouchScreen >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metrics::SystemProfileProto_Hardware_Drive* Arena::CreateMaybeMessage< ::metrics::SystemProfileProto_Hardware_Drive >(Arena* arena) {
  return Arena::CreateInternal< ::metrics::SystemProfileProto_Hardware_Drive >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metrics::SystemProfileProto_Hardware* Arena::CreateMaybeMessage< ::metrics::SystemProfileProto_Hardware >(Arena* arena) {
  return Arena::CreateInternal< ::metrics::SystemProfileProto_Hardware >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metrics::SystemProfileProto_Network_WifiAccessPoint_VendorInformation* Arena::CreateMaybeMessage< ::metrics::SystemProfileProto_Network_WifiAccessPoint_VendorInformation >(Arena* arena) {
  return Arena::CreateInternal< ::metrics::SystemProfileProto_Network_WifiAccessPoint_VendorInformation >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metrics::SystemProfileProto_Network_WifiAccessPoint* Arena::CreateMaybeMessage< ::metrics::SystemProfileProto_Network_WifiAccessPoint >(Arena* arena) {
  return Arena::CreateInternal< ::metrics::SystemProfileProto_Network_WifiAccessPoint >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metrics::SystemProfileProto_Network* Arena::CreateMaybeMessage< ::metrics::SystemProfileProto_Network >(Arena* arena) {
  return Arena::CreateInternal< ::metrics::SystemProfileProto_Network >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metrics::SystemProfileProto_GoogleUpdate_ProductInfo* Arena::CreateMaybeMessage< ::metrics::SystemProfileProto_GoogleUpdate_ProductInfo >(Arena* arena) {
  return Arena::CreateInternal< ::metrics::SystemProfileProto_GoogleUpdate_ProductInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metrics::SystemProfileProto_GoogleUpdate* Arena::CreateMaybeMessage< ::metrics::SystemProfileProto_GoogleUpdate >(Arena* arena) {
  return Arena::CreateInternal< ::metrics::SystemProfileProto_GoogleUpdate >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metrics::SystemProfileProto_Plugin* Arena::CreateMaybeMessage< ::metrics::SystemProfileProto_Plugin >(Arena* arena) {
  return Arena::CreateInternal< ::metrics::SystemProfileProto_Plugin >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metrics::SystemProfileProto_Stability_PluginStability* Arena::CreateMaybeMessage< ::metrics::SystemProfileProto_Stability_PluginStability >(Arena* arena) {
  return Arena::CreateInternal< ::metrics::SystemProfileProto_Stability_PluginStability >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metrics::SystemProfileProto_Stability* Arena::CreateMaybeMessage< ::metrics::SystemProfileProto_Stability >(Arena* arena) {
  return Arena::CreateInternal< ::metrics::SystemProfileProto_Stability >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metrics::SystemProfileProto_FieldTrial* Arena::CreateMaybeMessage< ::metrics::SystemProfileProto_FieldTrial >(Arena* arena) {
  return Arena::CreateInternal< ::metrics::SystemProfileProto_FieldTrial >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metrics::SystemProfileProto_ExternalAudioVideoDevice_AudioDescription* Arena::CreateMaybeMessage< ::metrics::SystemProfileProto_ExternalAudioVideoDevice_AudioDescription >(Arena* arena) {
  return Arena::CreateInternal< ::metrics::SystemProfileProto_ExternalAudioVideoDevice_AudioDescription >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metrics::SystemProfileProto_ExternalAudioVideoDevice_CECCommand* Arena::CreateMaybeMessage< ::metrics::SystemProfileProto_ExternalAudioVideoDevice_CECCommand >(Arena* arena) {
  return Arena::CreateInternal< ::metrics::SystemProfileProto_ExternalAudioVideoDevice_CECCommand >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metrics::SystemProfileProto_ExternalAudioVideoDevice* Arena::CreateMaybeMessage< ::metrics::SystemProfileProto_ExternalAudioVideoDevice >(Arena* arena) {
  return Arena::CreateInternal< ::metrics::SystemProfileProto_ExternalAudioVideoDevice >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metrics::SystemProfileProto_ExternalAccessPoint* Arena::CreateMaybeMessage< ::metrics::SystemProfileProto_ExternalAccessPoint >(Arena* arena) {
  return Arena::CreateInternal< ::metrics::SystemProfileProto_ExternalAccessPoint >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metrics::SystemProfileProto_AntiVirusProduct* Arena::CreateMaybeMessage< ::metrics::SystemProfileProto_AntiVirusProduct >(Arena* arena) {
  return Arena::CreateInternal< ::metrics::SystemProfileProto_AntiVirusProduct >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metrics::SystemProfileProto_ChromeComponent* Arena::CreateMaybeMessage< ::metrics::SystemProfileProto_ChromeComponent >(Arena* arena) {
  return Arena::CreateInternal< ::metrics::SystemProfileProto_ChromeComponent >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metrics::SystemProfileProto_LinkedAndroidPhoneData* Arena::CreateMaybeMessage< ::metrics::SystemProfileProto_LinkedAndroidPhoneData >(Arena* arena) {
  return Arena::CreateInternal< ::metrics::SystemProfileProto_LinkedAndroidPhoneData >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metrics::SystemProfileProto* Arena::CreateMaybeMessage< ::metrics::SystemProfileProto >(Arena* arena) {
  return Arena::CreateInternal< ::metrics::SystemProfileProto >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
