// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: histogram_event.proto

#include "histogram_event.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_histogram_5fevent_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_histogram_5fevent_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_HistogramEventProto_Bucket;
}  // namespace protobuf_histogram_5fevent_2eproto
namespace metrics {
class HistogramEventProto_BucketDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HistogramEventProto_Bucket>
      _instance;
} _HistogramEventProto_Bucket_default_instance_;
class HistogramEventProtoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HistogramEventProto>
      _instance;
} _HistogramEventProto_default_instance_;
}  // namespace metrics
namespace protobuf_histogram_5fevent_2eproto {
static void InitDefaultsHistogramEventProto_Bucket() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metrics::_HistogramEventProto_Bucket_default_instance_;
    new (ptr) ::metrics::HistogramEventProto_Bucket();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metrics::HistogramEventProto_Bucket::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_HistogramEventProto_Bucket =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHistogramEventProto_Bucket}, {}};

static void InitDefaultsHistogramEventProto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metrics::_HistogramEventProto_default_instance_;
    new (ptr) ::metrics::HistogramEventProto();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metrics::HistogramEventProto::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_HistogramEventProto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsHistogramEventProto}, {
      &protobuf_histogram_5fevent_2eproto::scc_info_HistogramEventProto_Bucket.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_HistogramEventProto_Bucket.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HistogramEventProto.base);
}

}  // namespace protobuf_histogram_5fevent_2eproto
namespace metrics {

// ===================================================================

void HistogramEventProto_Bucket::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HistogramEventProto_Bucket::kMinFieldNumber;
const int HistogramEventProto_Bucket::kMaxFieldNumber;
const int HistogramEventProto_Bucket::kBucketIndexFieldNumber;
const int HistogramEventProto_Bucket::kCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HistogramEventProto_Bucket::HistogramEventProto_Bucket()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_histogram_5fevent_2eproto::scc_info_HistogramEventProto_Bucket.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.HistogramEventProto.Bucket)
}
HistogramEventProto_Bucket::HistogramEventProto_Bucket(const HistogramEventProto_Bucket& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&min_, &from.min_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&min_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:metrics.HistogramEventProto.Bucket)
}

void HistogramEventProto_Bucket::SharedCtor() {
  ::memset(&min_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bucket_index_) -
      reinterpret_cast<char*>(&min_)) + sizeof(bucket_index_));
  count_ = GOOGLE_LONGLONG(1);
}

HistogramEventProto_Bucket::~HistogramEventProto_Bucket() {
  // @@protoc_insertion_point(destructor:metrics.HistogramEventProto.Bucket)
  SharedDtor();
}

void HistogramEventProto_Bucket::SharedDtor() {
}

void HistogramEventProto_Bucket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HistogramEventProto_Bucket& HistogramEventProto_Bucket::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_histogram_5fevent_2eproto::scc_info_HistogramEventProto_Bucket.base);
  return *internal_default_instance();
}


void HistogramEventProto_Bucket::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.HistogramEventProto.Bucket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&min_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bucket_index_) -
        reinterpret_cast<char*>(&min_)) + sizeof(bucket_index_));
    count_ = GOOGLE_LONGLONG(1);
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool HistogramEventProto_Bucket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:metrics.HistogramEventProto.Bucket)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 min = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_min();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 max = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_max();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 bucket_index = 3 [deprecated = true];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_bucket_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bucket_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 count = 4 [default = 1];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.HistogramEventProto.Bucket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.HistogramEventProto.Bucket)
  return false;
#undef DO_
}

void HistogramEventProto_Bucket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.HistogramEventProto.Bucket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 min = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->min(), output);
  }

  // optional int64 max = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->max(), output);
  }

  // optional int32 bucket_index = 3 [deprecated = true];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->bucket_index(), output);
  }

  // optional int64 count = 4 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->count(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:metrics.HistogramEventProto.Bucket)
}

size_t HistogramEventProto_Bucket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.HistogramEventProto.Bucket)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 15u) {
    // optional int64 min = 1;
    if (has_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->min());
    }

    // optional int64 max = 2;
    if (has_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->max());
    }

    // optional int32 bucket_index = 3 [deprecated = true];
    if (has_bucket_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bucket_index());
    }

    // optional int64 count = 4 [default = 1];
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->count());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HistogramEventProto_Bucket::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const HistogramEventProto_Bucket*>(&from));
}

void HistogramEventProto_Bucket::MergeFrom(const HistogramEventProto_Bucket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.HistogramEventProto.Bucket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      min_ = from.min_;
    }
    if (cached_has_bits & 0x00000002u) {
      max_ = from.max_;
    }
    if (cached_has_bits & 0x00000004u) {
      bucket_index_ = from.bucket_index_;
    }
    if (cached_has_bits & 0x00000008u) {
      count_ = from.count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HistogramEventProto_Bucket::CopyFrom(const HistogramEventProto_Bucket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.HistogramEventProto.Bucket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistogramEventProto_Bucket::IsInitialized() const {
  return true;
}

void HistogramEventProto_Bucket::Swap(HistogramEventProto_Bucket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HistogramEventProto_Bucket::InternalSwap(HistogramEventProto_Bucket* other) {
  using std::swap;
  swap(min_, other->min_);
  swap(max_, other->max_);
  swap(bucket_index_, other->bucket_index_);
  swap(count_, other->count_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string HistogramEventProto_Bucket::GetTypeName() const {
  return "metrics.HistogramEventProto.Bucket";
}


// ===================================================================

void HistogramEventProto::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HistogramEventProto::kNameHashFieldNumber;
const int HistogramEventProto::kSumFieldNumber;
const int HistogramEventProto::kBucketFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HistogramEventProto::HistogramEventProto()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_histogram_5fevent_2eproto::scc_info_HistogramEventProto.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.HistogramEventProto)
}
HistogramEventProto::HistogramEventProto(const HistogramEventProto& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      bucket_(from.bucket_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&name_hash_, &from.name_hash_,
    static_cast<size_t>(reinterpret_cast<char*>(&sum_) -
    reinterpret_cast<char*>(&name_hash_)) + sizeof(sum_));
  // @@protoc_insertion_point(copy_constructor:metrics.HistogramEventProto)
}

void HistogramEventProto::SharedCtor() {
  ::memset(&name_hash_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sum_) -
      reinterpret_cast<char*>(&name_hash_)) + sizeof(sum_));
}

HistogramEventProto::~HistogramEventProto() {
  // @@protoc_insertion_point(destructor:metrics.HistogramEventProto)
  SharedDtor();
}

void HistogramEventProto::SharedDtor() {
}

void HistogramEventProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HistogramEventProto& HistogramEventProto::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_histogram_5fevent_2eproto::scc_info_HistogramEventProto.base);
  return *internal_default_instance();
}


void HistogramEventProto::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.HistogramEventProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bucket_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&name_hash_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sum_) -
        reinterpret_cast<char*>(&name_hash_)) + sizeof(sum_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool HistogramEventProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:metrics.HistogramEventProto)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 name_hash = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_name_hash();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &name_hash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 sum = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_sum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .metrics.HistogramEventProto.Bucket bucket = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_bucket()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.HistogramEventProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.HistogramEventProto)
  return false;
#undef DO_
}

void HistogramEventProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.HistogramEventProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 name_hash = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->name_hash(), output);
  }

  // optional int64 sum = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->sum(), output);
  }

  // repeated .metrics.HistogramEventProto.Bucket bucket = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->bucket_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3,
      this->bucket(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:metrics.HistogramEventProto)
}

size_t HistogramEventProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.HistogramEventProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // repeated .metrics.HistogramEventProto.Bucket bucket = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->bucket_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->bucket(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional fixed64 name_hash = 1;
    if (has_name_hash()) {
      total_size += 1 + 8;
    }

    // optional int64 sum = 2;
    if (has_sum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sum());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HistogramEventProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const HistogramEventProto*>(&from));
}

void HistogramEventProto::MergeFrom(const HistogramEventProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.HistogramEventProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bucket_.MergeFrom(from.bucket_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      name_hash_ = from.name_hash_;
    }
    if (cached_has_bits & 0x00000002u) {
      sum_ = from.sum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HistogramEventProto::CopyFrom(const HistogramEventProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.HistogramEventProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistogramEventProto::IsInitialized() const {
  return true;
}

void HistogramEventProto::Swap(HistogramEventProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HistogramEventProto::InternalSwap(HistogramEventProto* other) {
  using std::swap;
  CastToBase(&bucket_)->InternalSwap(CastToBase(&other->bucket_));
  swap(name_hash_, other->name_hash_);
  swap(sum_, other->sum_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string HistogramEventProto::GetTypeName() const {
  return "metrics.HistogramEventProto";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace metrics
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metrics::HistogramEventProto_Bucket* Arena::CreateMaybeMessage< ::metrics::HistogramEventProto_Bucket >(Arena* arena) {
  return Arena::CreateInternal< ::metrics::HistogramEventProto_Bucket >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metrics::HistogramEventProto* Arena::CreateMaybeMessage< ::metrics::HistogramEventProto >(Arena* arena) {
  return Arena::CreateInternal< ::metrics::HistogramEventProto >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
