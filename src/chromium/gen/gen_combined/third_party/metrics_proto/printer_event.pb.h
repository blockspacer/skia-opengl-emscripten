// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: printer_event.proto

#ifndef PROTOBUF_INCLUDED_printer_5fevent_2eproto
#define PROTOBUF_INCLUDED_printer_5fevent_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_printer_5fevent_2eproto 

namespace protobuf_printer_5fevent_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
}  // namespace protobuf_printer_5fevent_2eproto
namespace metrics {
class PrinterEventProto;
class PrinterEventProtoDefaultTypeInternal;
extern PrinterEventProtoDefaultTypeInternal _PrinterEventProto_default_instance_;
}  // namespace metrics
namespace google {
namespace protobuf {
template<> ::metrics::PrinterEventProto* Arena::CreateMaybeMessage<::metrics::PrinterEventProto>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace metrics {

enum PrinterEventProto_EventType {
  PrinterEventProto_EventType_UNKNOWN = 0,
  PrinterEventProto_EventType_SETUP_AUTOMATIC = 1,
  PrinterEventProto_EventType_SETUP_MANUAL = 2,
  PrinterEventProto_EventType_SETUP_ABANDONED = 3,
  PrinterEventProto_EventType_PRINTER_DELETED = 4
};
bool PrinterEventProto_EventType_IsValid(int value);
const PrinterEventProto_EventType PrinterEventProto_EventType_EventType_MIN = PrinterEventProto_EventType_UNKNOWN;
const PrinterEventProto_EventType PrinterEventProto_EventType_EventType_MAX = PrinterEventProto_EventType_PRINTER_DELETED;
const int PrinterEventProto_EventType_EventType_ARRAYSIZE = PrinterEventProto_EventType_EventType_MAX + 1;

// ===================================================================

class PrinterEventProto : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:metrics.PrinterEventProto) */ {
 public:
  PrinterEventProto();
  virtual ~PrinterEventProto();

  PrinterEventProto(const PrinterEventProto& from);

  inline PrinterEventProto& operator=(const PrinterEventProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PrinterEventProto(PrinterEventProto&& from) noexcept
    : PrinterEventProto() {
    *this = ::std::move(from);
  }

  inline PrinterEventProto& operator=(PrinterEventProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PrinterEventProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrinterEventProto* internal_default_instance() {
    return reinterpret_cast<const PrinterEventProto*>(
               &_PrinterEventProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(PrinterEventProto* other);
  friend void swap(PrinterEventProto& a, PrinterEventProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PrinterEventProto* New() const final {
    return CreateMaybeMessage<PrinterEventProto>(NULL);
  }

  PrinterEventProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PrinterEventProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const PrinterEventProto& from);
  void MergeFrom(const PrinterEventProto& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PrinterEventProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef PrinterEventProto_EventType EventType;
  static const EventType UNKNOWN =
    PrinterEventProto_EventType_UNKNOWN;
  static const EventType SETUP_AUTOMATIC =
    PrinterEventProto_EventType_SETUP_AUTOMATIC;
  static const EventType SETUP_MANUAL =
    PrinterEventProto_EventType_SETUP_MANUAL;
  static const EventType SETUP_ABANDONED =
    PrinterEventProto_EventType_SETUP_ABANDONED;
  static const EventType PRINTER_DELETED =
    PrinterEventProto_EventType_PRINTER_DELETED;
  static inline bool EventType_IsValid(int value) {
    return PrinterEventProto_EventType_IsValid(value);
  }
  static const EventType EventType_MIN =
    PrinterEventProto_EventType_EventType_MIN;
  static const EventType EventType_MAX =
    PrinterEventProto_EventType_EventType_MAX;
  static const int EventType_ARRAYSIZE =
    PrinterEventProto_EventType_EventType_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // optional string usb_printer_manufacturer = 1;
  bool has_usb_printer_manufacturer() const;
  void clear_usb_printer_manufacturer();
  static const int kUsbPrinterManufacturerFieldNumber = 1;
  const ::std::string& usb_printer_manufacturer() const;
  void set_usb_printer_manufacturer(const ::std::string& value);
  #if LANG_CXX11
  void set_usb_printer_manufacturer(::std::string&& value);
  #endif
  void set_usb_printer_manufacturer(const char* value);
  void set_usb_printer_manufacturer(const char* value, size_t size);
  ::std::string* mutable_usb_printer_manufacturer();
  ::std::string* release_usb_printer_manufacturer();
  void set_allocated_usb_printer_manufacturer(::std::string* usb_printer_manufacturer);

  // optional string usb_printer_model = 2;
  bool has_usb_printer_model() const;
  void clear_usb_printer_model();
  static const int kUsbPrinterModelFieldNumber = 2;
  const ::std::string& usb_printer_model() const;
  void set_usb_printer_model(const ::std::string& value);
  #if LANG_CXX11
  void set_usb_printer_model(::std::string&& value);
  #endif
  void set_usb_printer_model(const char* value);
  void set_usb_printer_model(const char* value, size_t size);
  ::std::string* mutable_usb_printer_model();
  ::std::string* release_usb_printer_model();
  void set_allocated_usb_printer_model(::std::string* usb_printer_model);

  // optional string ipp_make_and_model = 5;
  bool has_ipp_make_and_model() const;
  void clear_ipp_make_and_model();
  static const int kIppMakeAndModelFieldNumber = 5;
  const ::std::string& ipp_make_and_model() const;
  void set_ipp_make_and_model(const ::std::string& value);
  #if LANG_CXX11
  void set_ipp_make_and_model(::std::string&& value);
  #endif
  void set_ipp_make_and_model(const char* value);
  void set_ipp_make_and_model(const char* value, size_t size);
  ::std::string* mutable_ipp_make_and_model();
  ::std::string* release_ipp_make_and_model();
  void set_allocated_ipp_make_and_model(::std::string* ipp_make_and_model);

  // optional string ppd_identifier = 7;
  bool has_ppd_identifier() const;
  void clear_ppd_identifier();
  static const int kPpdIdentifierFieldNumber = 7;
  const ::std::string& ppd_identifier() const;
  void set_ppd_identifier(const ::std::string& value);
  #if LANG_CXX11
  void set_ppd_identifier(::std::string&& value);
  #endif
  void set_ppd_identifier(const char* value);
  void set_ppd_identifier(const char* value, size_t size);
  ::std::string* mutable_ppd_identifier();
  ::std::string* release_ppd_identifier();
  void set_allocated_ppd_identifier(::std::string* ppd_identifier);

  // optional int32 usb_vendor_id = 3;
  bool has_usb_vendor_id() const;
  void clear_usb_vendor_id();
  static const int kUsbVendorIdFieldNumber = 3;
  ::google::protobuf::int32 usb_vendor_id() const;
  void set_usb_vendor_id(::google::protobuf::int32 value);

  // optional int32 usb_model_id = 4;
  bool has_usb_model_id() const;
  void clear_usb_model_id();
  static const int kUsbModelIdFieldNumber = 4;
  ::google::protobuf::int32 usb_model_id() const;
  void set_usb_model_id(::google::protobuf::int32 value);

  // optional bool user_ppd = 6;
  bool has_user_ppd() const;
  void clear_user_ppd();
  static const int kUserPpdFieldNumber = 6;
  bool user_ppd() const;
  void set_user_ppd(bool value);

  // optional .metrics.PrinterEventProto.EventType event_type = 8;
  bool has_event_type() const;
  void clear_event_type();
  static const int kEventTypeFieldNumber = 8;
  ::metrics::PrinterEventProto_EventType event_type() const;
  void set_event_type(::metrics::PrinterEventProto_EventType value);

  // @@protoc_insertion_point(class_scope:metrics.PrinterEventProto)
 private:
  void set_has_usb_printer_manufacturer();
  void clear_has_usb_printer_manufacturer();
  void set_has_usb_printer_model();
  void clear_has_usb_printer_model();
  void set_has_usb_vendor_id();
  void clear_has_usb_vendor_id();
  void set_has_usb_model_id();
  void clear_has_usb_model_id();
  void set_has_ipp_make_and_model();
  void clear_has_ipp_make_and_model();
  void set_has_user_ppd();
  void clear_has_user_ppd();
  void set_has_ppd_identifier();
  void clear_has_ppd_identifier();
  void set_has_event_type();
  void clear_has_event_type();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr usb_printer_manufacturer_;
  ::google::protobuf::internal::ArenaStringPtr usb_printer_model_;
  ::google::protobuf::internal::ArenaStringPtr ipp_make_and_model_;
  ::google::protobuf::internal::ArenaStringPtr ppd_identifier_;
  ::google::protobuf::int32 usb_vendor_id_;
  ::google::protobuf::int32 usb_model_id_;
  bool user_ppd_;
  int event_type_;
  friend struct ::protobuf_printer_5fevent_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PrinterEventProto

// optional string usb_printer_manufacturer = 1;
inline bool PrinterEventProto::has_usb_printer_manufacturer() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PrinterEventProto::set_has_usb_printer_manufacturer() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PrinterEventProto::clear_has_usb_printer_manufacturer() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PrinterEventProto::clear_usb_printer_manufacturer() {
  usb_printer_manufacturer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_usb_printer_manufacturer();
}
inline const ::std::string& PrinterEventProto::usb_printer_manufacturer() const {
  // @@protoc_insertion_point(field_get:metrics.PrinterEventProto.usb_printer_manufacturer)
  return usb_printer_manufacturer_.GetNoArena();
}
inline void PrinterEventProto::set_usb_printer_manufacturer(const ::std::string& value) {
  set_has_usb_printer_manufacturer();
  usb_printer_manufacturer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.PrinterEventProto.usb_printer_manufacturer)
}
#if LANG_CXX11
inline void PrinterEventProto::set_usb_printer_manufacturer(::std::string&& value) {
  set_has_usb_printer_manufacturer();
  usb_printer_manufacturer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.PrinterEventProto.usb_printer_manufacturer)
}
#endif
inline void PrinterEventProto::set_usb_printer_manufacturer(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_usb_printer_manufacturer();
  usb_printer_manufacturer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.PrinterEventProto.usb_printer_manufacturer)
}
inline void PrinterEventProto::set_usb_printer_manufacturer(const char* value, size_t size) {
  set_has_usb_printer_manufacturer();
  usb_printer_manufacturer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.PrinterEventProto.usb_printer_manufacturer)
}
inline ::std::string* PrinterEventProto::mutable_usb_printer_manufacturer() {
  set_has_usb_printer_manufacturer();
  // @@protoc_insertion_point(field_mutable:metrics.PrinterEventProto.usb_printer_manufacturer)
  return usb_printer_manufacturer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PrinterEventProto::release_usb_printer_manufacturer() {
  // @@protoc_insertion_point(field_release:metrics.PrinterEventProto.usb_printer_manufacturer)
  if (!has_usb_printer_manufacturer()) {
    return NULL;
  }
  clear_has_usb_printer_manufacturer();
  return usb_printer_manufacturer_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PrinterEventProto::set_allocated_usb_printer_manufacturer(::std::string* usb_printer_manufacturer) {
  if (usb_printer_manufacturer != NULL) {
    set_has_usb_printer_manufacturer();
  } else {
    clear_has_usb_printer_manufacturer();
  }
  usb_printer_manufacturer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), usb_printer_manufacturer);
  // @@protoc_insertion_point(field_set_allocated:metrics.PrinterEventProto.usb_printer_manufacturer)
}

// optional string usb_printer_model = 2;
inline bool PrinterEventProto::has_usb_printer_model() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PrinterEventProto::set_has_usb_printer_model() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PrinterEventProto::clear_has_usb_printer_model() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PrinterEventProto::clear_usb_printer_model() {
  usb_printer_model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_usb_printer_model();
}
inline const ::std::string& PrinterEventProto::usb_printer_model() const {
  // @@protoc_insertion_point(field_get:metrics.PrinterEventProto.usb_printer_model)
  return usb_printer_model_.GetNoArena();
}
inline void PrinterEventProto::set_usb_printer_model(const ::std::string& value) {
  set_has_usb_printer_model();
  usb_printer_model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.PrinterEventProto.usb_printer_model)
}
#if LANG_CXX11
inline void PrinterEventProto::set_usb_printer_model(::std::string&& value) {
  set_has_usb_printer_model();
  usb_printer_model_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.PrinterEventProto.usb_printer_model)
}
#endif
inline void PrinterEventProto::set_usb_printer_model(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_usb_printer_model();
  usb_printer_model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.PrinterEventProto.usb_printer_model)
}
inline void PrinterEventProto::set_usb_printer_model(const char* value, size_t size) {
  set_has_usb_printer_model();
  usb_printer_model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.PrinterEventProto.usb_printer_model)
}
inline ::std::string* PrinterEventProto::mutable_usb_printer_model() {
  set_has_usb_printer_model();
  // @@protoc_insertion_point(field_mutable:metrics.PrinterEventProto.usb_printer_model)
  return usb_printer_model_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PrinterEventProto::release_usb_printer_model() {
  // @@protoc_insertion_point(field_release:metrics.PrinterEventProto.usb_printer_model)
  if (!has_usb_printer_model()) {
    return NULL;
  }
  clear_has_usb_printer_model();
  return usb_printer_model_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PrinterEventProto::set_allocated_usb_printer_model(::std::string* usb_printer_model) {
  if (usb_printer_model != NULL) {
    set_has_usb_printer_model();
  } else {
    clear_has_usb_printer_model();
  }
  usb_printer_model_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), usb_printer_model);
  // @@protoc_insertion_point(field_set_allocated:metrics.PrinterEventProto.usb_printer_model)
}

// optional int32 usb_vendor_id = 3;
inline bool PrinterEventProto::has_usb_vendor_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PrinterEventProto::set_has_usb_vendor_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PrinterEventProto::clear_has_usb_vendor_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PrinterEventProto::clear_usb_vendor_id() {
  usb_vendor_id_ = 0;
  clear_has_usb_vendor_id();
}
inline ::google::protobuf::int32 PrinterEventProto::usb_vendor_id() const {
  // @@protoc_insertion_point(field_get:metrics.PrinterEventProto.usb_vendor_id)
  return usb_vendor_id_;
}
inline void PrinterEventProto::set_usb_vendor_id(::google::protobuf::int32 value) {
  set_has_usb_vendor_id();
  usb_vendor_id_ = value;
  // @@protoc_insertion_point(field_set:metrics.PrinterEventProto.usb_vendor_id)
}

// optional int32 usb_model_id = 4;
inline bool PrinterEventProto::has_usb_model_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PrinterEventProto::set_has_usb_model_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PrinterEventProto::clear_has_usb_model_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PrinterEventProto::clear_usb_model_id() {
  usb_model_id_ = 0;
  clear_has_usb_model_id();
}
inline ::google::protobuf::int32 PrinterEventProto::usb_model_id() const {
  // @@protoc_insertion_point(field_get:metrics.PrinterEventProto.usb_model_id)
  return usb_model_id_;
}
inline void PrinterEventProto::set_usb_model_id(::google::protobuf::int32 value) {
  set_has_usb_model_id();
  usb_model_id_ = value;
  // @@protoc_insertion_point(field_set:metrics.PrinterEventProto.usb_model_id)
}

// optional string ipp_make_and_model = 5;
inline bool PrinterEventProto::has_ipp_make_and_model() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PrinterEventProto::set_has_ipp_make_and_model() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PrinterEventProto::clear_has_ipp_make_and_model() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PrinterEventProto::clear_ipp_make_and_model() {
  ipp_make_and_model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ipp_make_and_model();
}
inline const ::std::string& PrinterEventProto::ipp_make_and_model() const {
  // @@protoc_insertion_point(field_get:metrics.PrinterEventProto.ipp_make_and_model)
  return ipp_make_and_model_.GetNoArena();
}
inline void PrinterEventProto::set_ipp_make_and_model(const ::std::string& value) {
  set_has_ipp_make_and_model();
  ipp_make_and_model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.PrinterEventProto.ipp_make_and_model)
}
#if LANG_CXX11
inline void PrinterEventProto::set_ipp_make_and_model(::std::string&& value) {
  set_has_ipp_make_and_model();
  ipp_make_and_model_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.PrinterEventProto.ipp_make_and_model)
}
#endif
inline void PrinterEventProto::set_ipp_make_and_model(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ipp_make_and_model();
  ipp_make_and_model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.PrinterEventProto.ipp_make_and_model)
}
inline void PrinterEventProto::set_ipp_make_and_model(const char* value, size_t size) {
  set_has_ipp_make_and_model();
  ipp_make_and_model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.PrinterEventProto.ipp_make_and_model)
}
inline ::std::string* PrinterEventProto::mutable_ipp_make_and_model() {
  set_has_ipp_make_and_model();
  // @@protoc_insertion_point(field_mutable:metrics.PrinterEventProto.ipp_make_and_model)
  return ipp_make_and_model_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PrinterEventProto::release_ipp_make_and_model() {
  // @@protoc_insertion_point(field_release:metrics.PrinterEventProto.ipp_make_and_model)
  if (!has_ipp_make_and_model()) {
    return NULL;
  }
  clear_has_ipp_make_and_model();
  return ipp_make_and_model_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PrinterEventProto::set_allocated_ipp_make_and_model(::std::string* ipp_make_and_model) {
  if (ipp_make_and_model != NULL) {
    set_has_ipp_make_and_model();
  } else {
    clear_has_ipp_make_and_model();
  }
  ipp_make_and_model_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ipp_make_and_model);
  // @@protoc_insertion_point(field_set_allocated:metrics.PrinterEventProto.ipp_make_and_model)
}

// optional bool user_ppd = 6;
inline bool PrinterEventProto::has_user_ppd() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PrinterEventProto::set_has_user_ppd() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PrinterEventProto::clear_has_user_ppd() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PrinterEventProto::clear_user_ppd() {
  user_ppd_ = false;
  clear_has_user_ppd();
}
inline bool PrinterEventProto::user_ppd() const {
  // @@protoc_insertion_point(field_get:metrics.PrinterEventProto.user_ppd)
  return user_ppd_;
}
inline void PrinterEventProto::set_user_ppd(bool value) {
  set_has_user_ppd();
  user_ppd_ = value;
  // @@protoc_insertion_point(field_set:metrics.PrinterEventProto.user_ppd)
}

// optional string ppd_identifier = 7;
inline bool PrinterEventProto::has_ppd_identifier() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PrinterEventProto::set_has_ppd_identifier() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PrinterEventProto::clear_has_ppd_identifier() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PrinterEventProto::clear_ppd_identifier() {
  ppd_identifier_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ppd_identifier();
}
inline const ::std::string& PrinterEventProto::ppd_identifier() const {
  // @@protoc_insertion_point(field_get:metrics.PrinterEventProto.ppd_identifier)
  return ppd_identifier_.GetNoArena();
}
inline void PrinterEventProto::set_ppd_identifier(const ::std::string& value) {
  set_has_ppd_identifier();
  ppd_identifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.PrinterEventProto.ppd_identifier)
}
#if LANG_CXX11
inline void PrinterEventProto::set_ppd_identifier(::std::string&& value) {
  set_has_ppd_identifier();
  ppd_identifier_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.PrinterEventProto.ppd_identifier)
}
#endif
inline void PrinterEventProto::set_ppd_identifier(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ppd_identifier();
  ppd_identifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.PrinterEventProto.ppd_identifier)
}
inline void PrinterEventProto::set_ppd_identifier(const char* value, size_t size) {
  set_has_ppd_identifier();
  ppd_identifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.PrinterEventProto.ppd_identifier)
}
inline ::std::string* PrinterEventProto::mutable_ppd_identifier() {
  set_has_ppd_identifier();
  // @@protoc_insertion_point(field_mutable:metrics.PrinterEventProto.ppd_identifier)
  return ppd_identifier_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PrinterEventProto::release_ppd_identifier() {
  // @@protoc_insertion_point(field_release:metrics.PrinterEventProto.ppd_identifier)
  if (!has_ppd_identifier()) {
    return NULL;
  }
  clear_has_ppd_identifier();
  return ppd_identifier_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PrinterEventProto::set_allocated_ppd_identifier(::std::string* ppd_identifier) {
  if (ppd_identifier != NULL) {
    set_has_ppd_identifier();
  } else {
    clear_has_ppd_identifier();
  }
  ppd_identifier_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ppd_identifier);
  // @@protoc_insertion_point(field_set_allocated:metrics.PrinterEventProto.ppd_identifier)
}

// optional .metrics.PrinterEventProto.EventType event_type = 8;
inline bool PrinterEventProto::has_event_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PrinterEventProto::set_has_event_type() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PrinterEventProto::clear_has_event_type() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PrinterEventProto::clear_event_type() {
  event_type_ = 0;
  clear_has_event_type();
}
inline ::metrics::PrinterEventProto_EventType PrinterEventProto::event_type() const {
  // @@protoc_insertion_point(field_get:metrics.PrinterEventProto.event_type)
  return static_cast< ::metrics::PrinterEventProto_EventType >(event_type_);
}
inline void PrinterEventProto::set_event_type(::metrics::PrinterEventProto_EventType value) {
  assert(::metrics::PrinterEventProto_EventType_IsValid(value));
  set_has_event_type();
  event_type_ = value;
  // @@protoc_insertion_point(field_set:metrics.PrinterEventProto.event_type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace metrics

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::metrics::PrinterEventProto_EventType> : ::std::true_type {};

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_printer_5fevent_2eproto
