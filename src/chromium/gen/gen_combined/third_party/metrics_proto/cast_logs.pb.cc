// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cast_logs.proto

#include "cast_logs.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_cast_5flogs_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_cast_5flogs_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CastLogsProto_CastConnectionInfo_SenderInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_cast_5flogs_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CastLogsProto_CastDeviceInfo_HardwareInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_cast_5flogs_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CastLogsProto_CastDeviceMutableInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_cast_5flogs_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CastLogsProto_CastEventProto_Metadata;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_cast_5flogs_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CastLogsProto_CastConnectionInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_cast_5flogs_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CastLogsProto_CastDeviceInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_cast_5flogs_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CastLogsProto_CastEventProto;
}  // namespace protobuf_cast_5flogs_2eproto
namespace metrics {
class CastLogsProto_CastDeviceInfo_HardwareInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CastLogsProto_CastDeviceInfo_HardwareInfo>
      _instance;
} _CastLogsProto_CastDeviceInfo_HardwareInfo_default_instance_;
class CastLogsProto_CastDeviceInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CastLogsProto_CastDeviceInfo>
      _instance;
} _CastLogsProto_CastDeviceInfo_default_instance_;
class CastLogsProto_CastConnectionInfo_SenderInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CastLogsProto_CastConnectionInfo_SenderInfo>
      _instance;
} _CastLogsProto_CastConnectionInfo_SenderInfo_default_instance_;
class CastLogsProto_CastConnectionInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CastLogsProto_CastConnectionInfo>
      _instance;
} _CastLogsProto_CastConnectionInfo_default_instance_;
class CastLogsProto_CastEventProto_MetadataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CastLogsProto_CastEventProto_Metadata>
      _instance;
} _CastLogsProto_CastEventProto_Metadata_default_instance_;
class CastLogsProto_CastEventProtoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CastLogsProto_CastEventProto>
      _instance;
} _CastLogsProto_CastEventProto_default_instance_;
class CastLogsProto_CastDeviceMutableInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CastLogsProto_CastDeviceMutableInfo>
      _instance;
} _CastLogsProto_CastDeviceMutableInfo_default_instance_;
class CastLogsProtoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CastLogsProto>
      _instance;
} _CastLogsProto_default_instance_;
}  // namespace metrics
namespace protobuf_cast_5flogs_2eproto {
static void InitDefaultsCastLogsProto_CastDeviceInfo_HardwareInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metrics::_CastLogsProto_CastDeviceInfo_HardwareInfo_default_instance_;
    new (ptr) ::metrics::CastLogsProto_CastDeviceInfo_HardwareInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metrics::CastLogsProto_CastDeviceInfo_HardwareInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CastLogsProto_CastDeviceInfo_HardwareInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCastLogsProto_CastDeviceInfo_HardwareInfo}, {}};

static void InitDefaultsCastLogsProto_CastDeviceInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metrics::_CastLogsProto_CastDeviceInfo_default_instance_;
    new (ptr) ::metrics::CastLogsProto_CastDeviceInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metrics::CastLogsProto_CastDeviceInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CastLogsProto_CastDeviceInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCastLogsProto_CastDeviceInfo}, {
      &protobuf_cast_5flogs_2eproto::scc_info_CastLogsProto_CastDeviceInfo_HardwareInfo.base,}};

static void InitDefaultsCastLogsProto_CastConnectionInfo_SenderInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metrics::_CastLogsProto_CastConnectionInfo_SenderInfo_default_instance_;
    new (ptr) ::metrics::CastLogsProto_CastConnectionInfo_SenderInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metrics::CastLogsProto_CastConnectionInfo_SenderInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CastLogsProto_CastConnectionInfo_SenderInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCastLogsProto_CastConnectionInfo_SenderInfo}, {}};

static void InitDefaultsCastLogsProto_CastConnectionInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metrics::_CastLogsProto_CastConnectionInfo_default_instance_;
    new (ptr) ::metrics::CastLogsProto_CastConnectionInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metrics::CastLogsProto_CastConnectionInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CastLogsProto_CastConnectionInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCastLogsProto_CastConnectionInfo}, {
      &protobuf_cast_5flogs_2eproto::scc_info_CastLogsProto_CastConnectionInfo_SenderInfo.base,}};

static void InitDefaultsCastLogsProto_CastEventProto_Metadata() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metrics::_CastLogsProto_CastEventProto_Metadata_default_instance_;
    new (ptr) ::metrics::CastLogsProto_CastEventProto_Metadata();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metrics::CastLogsProto_CastEventProto_Metadata::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CastLogsProto_CastEventProto_Metadata =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCastLogsProto_CastEventProto_Metadata}, {}};

static void InitDefaultsCastLogsProto_CastEventProto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metrics::_CastLogsProto_CastEventProto_default_instance_;
    new (ptr) ::metrics::CastLogsProto_CastEventProto();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metrics::CastLogsProto_CastEventProto::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CastLogsProto_CastEventProto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCastLogsProto_CastEventProto}, {
      &protobuf_cast_5flogs_2eproto::scc_info_CastLogsProto_CastEventProto_Metadata.base,}};

static void InitDefaultsCastLogsProto_CastDeviceMutableInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metrics::_CastLogsProto_CastDeviceMutableInfo_default_instance_;
    new (ptr) ::metrics::CastLogsProto_CastDeviceMutableInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metrics::CastLogsProto_CastDeviceMutableInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CastLogsProto_CastDeviceMutableInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCastLogsProto_CastDeviceMutableInfo}, {}};

static void InitDefaultsCastLogsProto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metrics::_CastLogsProto_default_instance_;
    new (ptr) ::metrics::CastLogsProto();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metrics::CastLogsProto::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_CastLogsProto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsCastLogsProto}, {
      &protobuf_cast_5flogs_2eproto::scc_info_CastLogsProto_CastDeviceInfo.base,
      &protobuf_cast_5flogs_2eproto::scc_info_CastLogsProto_CastConnectionInfo.base,
      &protobuf_cast_5flogs_2eproto::scc_info_CastLogsProto_CastEventProto.base,
      &protobuf_cast_5flogs_2eproto::scc_info_CastLogsProto_CastDeviceMutableInfo.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_CastLogsProto_CastDeviceInfo_HardwareInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CastLogsProto_CastDeviceInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CastLogsProto_CastConnectionInfo_SenderInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CastLogsProto_CastConnectionInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CastLogsProto_CastEventProto_Metadata.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CastLogsProto_CastEventProto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CastLogsProto_CastDeviceMutableInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CastLogsProto.base);
}

}  // namespace protobuf_cast_5flogs_2eproto
namespace metrics {
bool CastLogsProto_CastDeviceInfo_CastProductType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CastLogsProto_CastDeviceInfo_CastProductType CastLogsProto_CastDeviceInfo::CAST_PRODUCT_TYPE_UNKNOWN;
const CastLogsProto_CastDeviceInfo_CastProductType CastLogsProto_CastDeviceInfo::CAST_PRODUCT_TYPE_CHROMECAST;
const CastLogsProto_CastDeviceInfo_CastProductType CastLogsProto_CastDeviceInfo::CAST_PRODUCT_TYPE_TV;
const CastLogsProto_CastDeviceInfo_CastProductType CastLogsProto_CastDeviceInfo::CAST_PRODUCT_TYPE_AUDIO;
const CastLogsProto_CastDeviceInfo_CastProductType CastLogsProto_CastDeviceInfo::CAST_PRODUCT_TYPE_ANDROID_TV;
const CastLogsProto_CastDeviceInfo_CastProductType CastLogsProto_CastDeviceInfo::CAST_PRODUCT_TYPE_ASSISTANT;
const CastLogsProto_CastDeviceInfo_CastProductType CastLogsProto_CastDeviceInfo::CAST_PRODUCT_TYPE_ANDROID_THINGS;
const CastLogsProto_CastDeviceInfo_CastProductType CastLogsProto_CastDeviceInfo::CAST_PRODUCT_TYPE_CHROME_OS;
const CastLogsProto_CastDeviceInfo_CastProductType CastLogsProto_CastDeviceInfo::CastProductType_MIN;
const CastLogsProto_CastDeviceInfo_CastProductType CastLogsProto_CastDeviceInfo::CastProductType_MAX;
const int CastLogsProto_CastDeviceInfo::CastProductType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool CastLogsProto_CastConnectionInfo_SenderInfo_SDKType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CastLogsProto_CastConnectionInfo_SenderInfo_SDKType CastLogsProto_CastConnectionInfo_SenderInfo::SDK_UNKNOWN;
const CastLogsProto_CastConnectionInfo_SenderInfo_SDKType CastLogsProto_CastConnectionInfo_SenderInfo::SDK_NATIVE;
const CastLogsProto_CastConnectionInfo_SenderInfo_SDKType CastLogsProto_CastConnectionInfo_SenderInfo::SDK_CHROME_EXTENSION;
const CastLogsProto_CastConnectionInfo_SenderInfo_SDKType CastLogsProto_CastConnectionInfo_SenderInfo::SDKType_MIN;
const CastLogsProto_CastConnectionInfo_SenderInfo_SDKType CastLogsProto_CastConnectionInfo_SenderInfo::SDKType_MAX;
const int CastLogsProto_CastConnectionInfo_SenderInfo::SDKType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool CastLogsProto_CastConnectionInfo_SenderInfo_Platform_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CastLogsProto_CastConnectionInfo_SenderInfo_Platform CastLogsProto_CastConnectionInfo_SenderInfo::PLATFORM_OTHER;
const CastLogsProto_CastConnectionInfo_SenderInfo_Platform CastLogsProto_CastConnectionInfo_SenderInfo::PLATFORM_ANDROID;
const CastLogsProto_CastConnectionInfo_SenderInfo_Platform CastLogsProto_CastConnectionInfo_SenderInfo::PLATFORM_IOS;
const CastLogsProto_CastConnectionInfo_SenderInfo_Platform CastLogsProto_CastConnectionInfo_SenderInfo::PLATFORM_WINDOWS;
const CastLogsProto_CastConnectionInfo_SenderInfo_Platform CastLogsProto_CastConnectionInfo_SenderInfo::PLATFORM_OSX;
const CastLogsProto_CastConnectionInfo_SenderInfo_Platform CastLogsProto_CastConnectionInfo_SenderInfo::PLATFORM_CHROMEOS;
const CastLogsProto_CastConnectionInfo_SenderInfo_Platform CastLogsProto_CastConnectionInfo_SenderInfo::PLATFORM_LINUX;
const CastLogsProto_CastConnectionInfo_SenderInfo_Platform CastLogsProto_CastConnectionInfo_SenderInfo::PLATFORM_CAST;
const CastLogsProto_CastConnectionInfo_SenderInfo_Platform CastLogsProto_CastConnectionInfo_SenderInfo::Platform_MIN;
const CastLogsProto_CastConnectionInfo_SenderInfo_Platform CastLogsProto_CastConnectionInfo_SenderInfo::Platform_MAX;
const int CastLogsProto_CastConnectionInfo_SenderInfo::Platform_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool CastLogsProto_CastConnectionInfo_SenderInfo_ConnectionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CastLogsProto_CastConnectionInfo_SenderInfo_ConnectionType CastLogsProto_CastConnectionInfo_SenderInfo::CONNECTION_TYPE_UNKNOWN;
const CastLogsProto_CastConnectionInfo_SenderInfo_ConnectionType CastLogsProto_CastConnectionInfo_SenderInfo::CONNECTION_TYPE_LOCAL;
const CastLogsProto_CastConnectionInfo_SenderInfo_ConnectionType CastLogsProto_CastConnectionInfo_SenderInfo::CONNECTION_TYPE_RELAY;
const CastLogsProto_CastConnectionInfo_SenderInfo_ConnectionType CastLogsProto_CastConnectionInfo_SenderInfo::CONNECTION_TYPE_INTERNAL;
const CastLogsProto_CastConnectionInfo_SenderInfo_ConnectionType CastLogsProto_CastConnectionInfo_SenderInfo::ConnectionType_MIN;
const CastLogsProto_CastConnectionInfo_SenderInfo_ConnectionType CastLogsProto_CastConnectionInfo_SenderInfo::ConnectionType_MAX;
const int CastLogsProto_CastConnectionInfo_SenderInfo::ConnectionType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool CastLogsProto_CastDeviceMutableInfo_RebootType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CastLogsProto_CastDeviceMutableInfo_RebootType CastLogsProto_CastDeviceMutableInfo::REBOOT_TYPE_UNKNOWN;
const CastLogsProto_CastDeviceMutableInfo_RebootType CastLogsProto_CastDeviceMutableInfo::REBOOT_TYPE_FORCED;
const CastLogsProto_CastDeviceMutableInfo_RebootType CastLogsProto_CastDeviceMutableInfo::REBOOT_TYPE_API;
const CastLogsProto_CastDeviceMutableInfo_RebootType CastLogsProto_CastDeviceMutableInfo::REBOOT_TYPE_NIGHTLY;
const CastLogsProto_CastDeviceMutableInfo_RebootType CastLogsProto_CastDeviceMutableInfo::REBOOT_TYPE_OTA;
const CastLogsProto_CastDeviceMutableInfo_RebootType CastLogsProto_CastDeviceMutableInfo::REBOOT_TYPE_WATCHDOG;
const CastLogsProto_CastDeviceMutableInfo_RebootType CastLogsProto_CastDeviceMutableInfo::REBOOT_TYPE_PROCESS_MANAGER;
const CastLogsProto_CastDeviceMutableInfo_RebootType CastLogsProto_CastDeviceMutableInfo::REBOOT_TYPE_CRASH_UPLOADER;
const CastLogsProto_CastDeviceMutableInfo_RebootType CastLogsProto_CastDeviceMutableInfo::REBOOT_TYPE_FDR;
const CastLogsProto_CastDeviceMutableInfo_RebootType CastLogsProto_CastDeviceMutableInfo::REBOOT_TYPE_HW_WATCHDOG;
const CastLogsProto_CastDeviceMutableInfo_RebootType CastLogsProto_CastDeviceMutableInfo::REBOOT_TYPE_SW_OTHER;
const CastLogsProto_CastDeviceMutableInfo_RebootType CastLogsProto_CastDeviceMutableInfo::REBOOT_TYPE_OVERHEAT;
const CastLogsProto_CastDeviceMutableInfo_RebootType CastLogsProto_CastDeviceMutableInfo::RebootType_MIN;
const CastLogsProto_CastDeviceMutableInfo_RebootType CastLogsProto_CastDeviceMutableInfo::RebootType_MAX;
const int CastLogsProto_CastDeviceMutableInfo::RebootType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool CastLogsProto_CastDeviceMutableInfo_NetifIPVersion_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CastLogsProto_CastDeviceMutableInfo_NetifIPVersion CastLogsProto_CastDeviceMutableInfo::IP_UNKNOWN;
const CastLogsProto_CastDeviceMutableInfo_NetifIPVersion CastLogsProto_CastDeviceMutableInfo::IP_V4;
const CastLogsProto_CastDeviceMutableInfo_NetifIPVersion CastLogsProto_CastDeviceMutableInfo::IP_V6;
const CastLogsProto_CastDeviceMutableInfo_NetifIPVersion CastLogsProto_CastDeviceMutableInfo::IP_DUAL_STACK;
const CastLogsProto_CastDeviceMutableInfo_NetifIPVersion CastLogsProto_CastDeviceMutableInfo::NetifIPVersion_MIN;
const CastLogsProto_CastDeviceMutableInfo_NetifIPVersion CastLogsProto_CastDeviceMutableInfo::NetifIPVersion_MAX;
const int CastLogsProto_CastDeviceMutableInfo::NetifIPVersion_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void CastLogsProto_CastDeviceInfo_HardwareInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CastLogsProto_CastDeviceInfo_HardwareInfo::kColorFieldNumber;
const int CastLogsProto_CastDeviceInfo_HardwareInfo::kMicFieldNumber;
const int CastLogsProto_CastDeviceInfo_HardwareInfo::kMemoryFieldNumber;
const int CastLogsProto_CastDeviceInfo_HardwareInfo::kNandFieldNumber;
const int CastLogsProto_CastDeviceInfo_HardwareInfo::kMfgDateFieldNumber;
const int CastLogsProto_CastDeviceInfo_HardwareInfo::kBuildNameFieldNumber;
const int CastLogsProto_CastDeviceInfo_HardwareInfo::kConfigFieldNumber;
const int CastLogsProto_CastDeviceInfo_HardwareInfo::kEmmcFieldNumber;
const int CastLogsProto_CastDeviceInfo_HardwareInfo::kDisplayFieldNumber;
const int CastLogsProto_CastDeviceInfo_HardwareInfo::kAmpFieldNumber;
const int CastLogsProto_CastDeviceInfo_HardwareInfo::kBoardNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CastLogsProto_CastDeviceInfo_HardwareInfo::CastLogsProto_CastDeviceInfo_HardwareInfo()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cast_5flogs_2eproto::scc_info_CastLogsProto_CastDeviceInfo_HardwareInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo)
}
CastLogsProto_CastDeviceInfo_HardwareInfo::CastLogsProto_CastDeviceInfo_HardwareInfo(const CastLogsProto_CastDeviceInfo_HardwareInfo& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  color_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_color()) {
    color_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.color_);
  }
  mic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_mic()) {
    mic_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mic_);
  }
  memory_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_memory()) {
    memory_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.memory_);
  }
  nand_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_nand()) {
    nand_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nand_);
  }
  mfg_date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_mfg_date()) {
    mfg_date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mfg_date_);
  }
  build_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_build_name()) {
    build_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.build_name_);
  }
  config_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_config()) {
    config_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.config_);
  }
  emmc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_emmc()) {
    emmc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.emmc_);
  }
  display_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_display()) {
    display_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.display_);
  }
  amp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_amp()) {
    amp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.amp_);
  }
  board_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_board_name()) {
    board_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.board_name_);
  }
  // @@protoc_insertion_point(copy_constructor:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo)
}

void CastLogsProto_CastDeviceInfo_HardwareInfo::SharedCtor() {
  color_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  memory_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nand_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mfg_date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  build_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  config_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  emmc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  display_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  amp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  board_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CastLogsProto_CastDeviceInfo_HardwareInfo::~CastLogsProto_CastDeviceInfo_HardwareInfo() {
  // @@protoc_insertion_point(destructor:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo)
  SharedDtor();
}

void CastLogsProto_CastDeviceInfo_HardwareInfo::SharedDtor() {
  color_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mic_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  memory_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nand_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mfg_date_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  build_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  config_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  emmc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  display_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  amp_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  board_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CastLogsProto_CastDeviceInfo_HardwareInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CastLogsProto_CastDeviceInfo_HardwareInfo& CastLogsProto_CastDeviceInfo_HardwareInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cast_5flogs_2eproto::scc_info_CastLogsProto_CastDeviceInfo_HardwareInfo.base);
  return *internal_default_instance();
}


void CastLogsProto_CastDeviceInfo_HardwareInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      color_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      mic_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      memory_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      nand_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      mfg_date_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      build_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000040u) {
      config_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000080u) {
      emmc_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      display_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000200u) {
      amp_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000400u) {
      board_name_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CastLogsProto_CastDeviceInfo_HardwareInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string color = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_color()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string mic = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mic()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string memory = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_memory()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string nand = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nand()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string mfg_date = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mfg_date()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string build_name = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_build_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string config = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string emmc = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_emmc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string display = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_display()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string amp = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_amp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string board_name = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_board_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo)
  return false;
#undef DO_
}

void CastLogsProto_CastDeviceInfo_HardwareInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string color = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->color(), output);
  }

  // optional string mic = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->mic(), output);
  }

  // optional string memory = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->memory(), output);
  }

  // optional string nand = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->nand(), output);
  }

  // optional string mfg_date = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->mfg_date(), output);
  }

  // optional string build_name = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->build_name(), output);
  }

  // optional string config = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->config(), output);
  }

  // optional string emmc = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->emmc(), output);
  }

  // optional string display = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->display(), output);
  }

  // optional string amp = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->amp(), output);
  }

  // optional string board_name = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->board_name(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo)
}

size_t CastLogsProto_CastDeviceInfo_HardwareInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 255u) {
    // optional string color = 1;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->color());
    }

    // optional string mic = 2;
    if (has_mic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mic());
    }

    // optional string memory = 3;
    if (has_memory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->memory());
    }

    // optional string nand = 4;
    if (has_nand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nand());
    }

    // optional string mfg_date = 5;
    if (has_mfg_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mfg_date());
    }

    // optional string build_name = 6;
    if (has_build_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->build_name());
    }

    // optional string config = 7;
    if (has_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->config());
    }

    // optional string emmc = 8;
    if (has_emmc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->emmc());
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional string display = 9;
    if (has_display()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->display());
    }

    // optional string amp = 10;
    if (has_amp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->amp());
    }

    // optional string board_name = 11;
    if (has_board_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->board_name());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CastLogsProto_CastDeviceInfo_HardwareInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CastLogsProto_CastDeviceInfo_HardwareInfo*>(&from));
}

void CastLogsProto_CastDeviceInfo_HardwareInfo::MergeFrom(const CastLogsProto_CastDeviceInfo_HardwareInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_color();
      color_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.color_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_mic();
      mic_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mic_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_memory();
      memory_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.memory_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_nand();
      nand_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nand_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_mfg_date();
      mfg_date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mfg_date_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_build_name();
      build_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.build_name_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_config();
      config_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.config_);
    }
    if (cached_has_bits & 0x00000080u) {
      set_has_emmc();
      emmc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.emmc_);
    }
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      set_has_display();
      display_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.display_);
    }
    if (cached_has_bits & 0x00000200u) {
      set_has_amp();
      amp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.amp_);
    }
    if (cached_has_bits & 0x00000400u) {
      set_has_board_name();
      board_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.board_name_);
    }
  }
}

void CastLogsProto_CastDeviceInfo_HardwareInfo::CopyFrom(const CastLogsProto_CastDeviceInfo_HardwareInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CastLogsProto_CastDeviceInfo_HardwareInfo::IsInitialized() const {
  return true;
}

void CastLogsProto_CastDeviceInfo_HardwareInfo::Swap(CastLogsProto_CastDeviceInfo_HardwareInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CastLogsProto_CastDeviceInfo_HardwareInfo::InternalSwap(CastLogsProto_CastDeviceInfo_HardwareInfo* other) {
  using std::swap;
  color_.Swap(&other->color_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  mic_.Swap(&other->mic_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  memory_.Swap(&other->memory_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  nand_.Swap(&other->nand_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  mfg_date_.Swap(&other->mfg_date_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  build_name_.Swap(&other->build_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  config_.Swap(&other->config_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  emmc_.Swap(&other->emmc_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  display_.Swap(&other->display_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  amp_.Swap(&other->amp_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  board_name_.Swap(&other->board_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string CastLogsProto_CastDeviceInfo_HardwareInfo::GetTypeName() const {
  return "metrics.CastLogsProto.CastDeviceInfo.HardwareInfo";
}


// ===================================================================

void CastLogsProto_CastDeviceInfo::InitAsDefaultInstance() {
  ::metrics::_CastLogsProto_CastDeviceInfo_default_instance_._instance.get_mutable()->hardware_info_ = const_cast< ::metrics::CastLogsProto_CastDeviceInfo_HardwareInfo*>(
      ::metrics::CastLogsProto_CastDeviceInfo_HardwareInfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CastLogsProto_CastDeviceInfo::kTypeFieldNumber;
const int CastLogsProto_CastDeviceInfo::kHardwareRevisionFieldNumber;
const int CastLogsProto_CastDeviceInfo::kManufacturerFieldNumber;
const int CastLogsProto_CastDeviceInfo::kModelFieldNumber;
const int CastLogsProto_CastDeviceInfo::kSerialNumberFieldNumber;
const int CastLogsProto_CastDeviceInfo::kHardwareInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CastLogsProto_CastDeviceInfo::CastLogsProto_CastDeviceInfo()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cast_5flogs_2eproto::scc_info_CastLogsProto_CastDeviceInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.CastLogsProto.CastDeviceInfo)
}
CastLogsProto_CastDeviceInfo::CastLogsProto_CastDeviceInfo(const CastLogsProto_CastDeviceInfo& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hardware_revision_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_hardware_revision()) {
    hardware_revision_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hardware_revision_);
  }
  manufacturer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_manufacturer()) {
    manufacturer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.manufacturer_);
  }
  model_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_model()) {
    model_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_);
  }
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_serial_number()) {
    serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
  }
  if (from.has_hardware_info()) {
    hardware_info_ = new ::metrics::CastLogsProto_CastDeviceInfo_HardwareInfo(*from.hardware_info_);
  } else {
    hardware_info_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:metrics.CastLogsProto.CastDeviceInfo)
}

void CastLogsProto_CastDeviceInfo::SharedCtor() {
  hardware_revision_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  manufacturer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&hardware_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&hardware_info_)) + sizeof(type_));
}

CastLogsProto_CastDeviceInfo::~CastLogsProto_CastDeviceInfo() {
  // @@protoc_insertion_point(destructor:metrics.CastLogsProto.CastDeviceInfo)
  SharedDtor();
}

void CastLogsProto_CastDeviceInfo::SharedDtor() {
  hardware_revision_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  manufacturer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete hardware_info_;
}

void CastLogsProto_CastDeviceInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CastLogsProto_CastDeviceInfo& CastLogsProto_CastDeviceInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cast_5flogs_2eproto::scc_info_CastLogsProto_CastDeviceInfo.base);
  return *internal_default_instance();
}


void CastLogsProto_CastDeviceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.CastLogsProto.CastDeviceInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      hardware_revision_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      manufacturer_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      model_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      serial_number_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(hardware_info_ != NULL);
      hardware_info_->Clear();
    }
  }
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CastLogsProto_CastDeviceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:metrics.CastLogsProto.CastDeviceInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .metrics.CastLogsProto.CastDeviceInfo.CastProductType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::metrics::CastLogsProto_CastDeviceInfo_CastProductType_IsValid(value)) {
            set_type(static_cast< ::metrics::CastLogsProto_CastDeviceInfo_CastProductType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string hardware_revision = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hardware_revision()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string manufacturer = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_manufacturer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string model = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string serial_number = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serial_number()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .metrics.CastLogsProto.CastDeviceInfo.HardwareInfo hardware_info = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_hardware_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.CastLogsProto.CastDeviceInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.CastLogsProto.CastDeviceInfo)
  return false;
#undef DO_
}

void CastLogsProto_CastDeviceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.CastLogsProto.CastDeviceInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .metrics.CastLogsProto.CastDeviceInfo.CastProductType type = 1;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string hardware_revision = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->hardware_revision(), output);
  }

  // optional string manufacturer = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->manufacturer(), output);
  }

  // optional string model = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->model(), output);
  }

  // optional string serial_number = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->serial_number(), output);
  }

  // optional .metrics.CastLogsProto.CastDeviceInfo.HardwareInfo hardware_info = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->_internal_hardware_info(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:metrics.CastLogsProto.CastDeviceInfo)
}

size_t CastLogsProto_CastDeviceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.CastLogsProto.CastDeviceInfo)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 63u) {
    // optional string hardware_revision = 2;
    if (has_hardware_revision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hardware_revision());
    }

    // optional string manufacturer = 3;
    if (has_manufacturer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->manufacturer());
    }

    // optional string model = 4;
    if (has_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->model());
    }

    // optional string serial_number = 5;
    if (has_serial_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serial_number());
    }

    // optional .metrics.CastLogsProto.CastDeviceInfo.HardwareInfo hardware_info = 6;
    if (has_hardware_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *hardware_info_);
    }

    // optional .metrics.CastLogsProto.CastDeviceInfo.CastProductType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CastLogsProto_CastDeviceInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CastLogsProto_CastDeviceInfo*>(&from));
}

void CastLogsProto_CastDeviceInfo::MergeFrom(const CastLogsProto_CastDeviceInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.CastLogsProto.CastDeviceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_hardware_revision();
      hardware_revision_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hardware_revision_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_manufacturer();
      manufacturer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.manufacturer_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_model();
      model_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_serial_number();
      serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_hardware_info()->::metrics::CastLogsProto_CastDeviceInfo_HardwareInfo::MergeFrom(from.hardware_info());
    }
    if (cached_has_bits & 0x00000020u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CastLogsProto_CastDeviceInfo::CopyFrom(const CastLogsProto_CastDeviceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.CastLogsProto.CastDeviceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CastLogsProto_CastDeviceInfo::IsInitialized() const {
  return true;
}

void CastLogsProto_CastDeviceInfo::Swap(CastLogsProto_CastDeviceInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CastLogsProto_CastDeviceInfo::InternalSwap(CastLogsProto_CastDeviceInfo* other) {
  using std::swap;
  hardware_revision_.Swap(&other->hardware_revision_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  manufacturer_.Swap(&other->manufacturer_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  model_.Swap(&other->model_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  serial_number_.Swap(&other->serial_number_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(hardware_info_, other->hardware_info_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string CastLogsProto_CastDeviceInfo::GetTypeName() const {
  return "metrics.CastLogsProto.CastDeviceInfo";
}


// ===================================================================

void CastLogsProto_CastConnectionInfo_SenderInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CastLogsProto_CastConnectionInfo_SenderInfo::kSenderDeviceIdFieldNumber;
const int CastLogsProto_CastConnectionInfo_SenderInfo::kSdkTypeFieldNumber;
const int CastLogsProto_CastConnectionInfo_SenderInfo::kVersionFieldNumber;
const int CastLogsProto_CastConnectionInfo_SenderInfo::kChromeBrowserVersionFieldNumber;
const int CastLogsProto_CastConnectionInfo_SenderInfo::kPlatformFieldNumber;
const int CastLogsProto_CastConnectionInfo_SenderInfo::kSystemVersionFieldNumber;
const int CastLogsProto_CastConnectionInfo_SenderInfo::kTransportConnectionTypeFieldNumber;
const int CastLogsProto_CastConnectionInfo_SenderInfo::kModelFieldNumber;
const int CastLogsProto_CastConnectionInfo_SenderInfo::kSenderLocalIpFragmentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CastLogsProto_CastConnectionInfo_SenderInfo::CastLogsProto_CastConnectionInfo_SenderInfo()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cast_5flogs_2eproto::scc_info_CastLogsProto_CastConnectionInfo_SenderInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.CastLogsProto.CastConnectionInfo.SenderInfo)
}
CastLogsProto_CastConnectionInfo_SenderInfo::CastLogsProto_CastConnectionInfo_SenderInfo(const CastLogsProto_CastConnectionInfo_SenderInfo& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_version()) {
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  chrome_browser_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_chrome_browser_version()) {
    chrome_browser_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chrome_browser_version_);
  }
  system_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_system_version()) {
    system_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.system_version_);
  }
  model_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_model()) {
    model_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_);
  }
  ::memcpy(&sender_device_id_, &from.sender_device_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&sender_local_ip_fragment_) -
    reinterpret_cast<char*>(&sender_device_id_)) + sizeof(sender_local_ip_fragment_));
  // @@protoc_insertion_point(copy_constructor:metrics.CastLogsProto.CastConnectionInfo.SenderInfo)
}

void CastLogsProto_CastConnectionInfo_SenderInfo::SharedCtor() {
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chrome_browser_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  system_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&sender_device_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sender_local_ip_fragment_) -
      reinterpret_cast<char*>(&sender_device_id_)) + sizeof(sender_local_ip_fragment_));
}

CastLogsProto_CastConnectionInfo_SenderInfo::~CastLogsProto_CastConnectionInfo_SenderInfo() {
  // @@protoc_insertion_point(destructor:metrics.CastLogsProto.CastConnectionInfo.SenderInfo)
  SharedDtor();
}

void CastLogsProto_CastConnectionInfo_SenderInfo::SharedDtor() {
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chrome_browser_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  system_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CastLogsProto_CastConnectionInfo_SenderInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CastLogsProto_CastConnectionInfo_SenderInfo& CastLogsProto_CastConnectionInfo_SenderInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cast_5flogs_2eproto::scc_info_CastLogsProto_CastConnectionInfo_SenderInfo.base);
  return *internal_default_instance();
}


void CastLogsProto_CastConnectionInfo_SenderInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.CastLogsProto.CastConnectionInfo.SenderInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      version_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      chrome_browser_version_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      system_version_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      model_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 240u) {
    ::memset(&sender_device_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&transport_connection_type_) -
        reinterpret_cast<char*>(&sender_device_id_)) + sizeof(transport_connection_type_));
  }
  sender_local_ip_fragment_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CastLogsProto_CastConnectionInfo_SenderInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:metrics.CastLogsProto.CastConnectionInfo.SenderInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 sender_device_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_sender_device_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &sender_device_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .metrics.CastLogsProto.CastConnectionInfo.SenderInfo.SDKType sdk_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::metrics::CastLogsProto_CastConnectionInfo_SenderInfo_SDKType_IsValid(value)) {
            set_sdk_type(static_cast< ::metrics::CastLogsProto_CastConnectionInfo_SenderInfo_SDKType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string version = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string chrome_browser_version = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chrome_browser_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .metrics.CastLogsProto.CastConnectionInfo.SenderInfo.Platform platform = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::metrics::CastLogsProto_CastConnectionInfo_SenderInfo_Platform_IsValid(value)) {
            set_platform(static_cast< ::metrics::CastLogsProto_CastConnectionInfo_SenderInfo_Platform >(value));
          } else {
            unknown_fields_stream.WriteVarint32(40u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string system_version = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_system_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .metrics.CastLogsProto.CastConnectionInfo.SenderInfo.ConnectionType transport_connection_type = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::metrics::CastLogsProto_CastConnectionInfo_SenderInfo_ConnectionType_IsValid(value)) {
            set_transport_connection_type(static_cast< ::metrics::CastLogsProto_CastConnectionInfo_SenderInfo_ConnectionType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(56u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string model = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 sender_local_ip_fragment = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_sender_local_ip_fragment();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sender_local_ip_fragment_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.CastLogsProto.CastConnectionInfo.SenderInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.CastLogsProto.CastConnectionInfo.SenderInfo)
  return false;
#undef DO_
}

void CastLogsProto_CastConnectionInfo_SenderInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.CastLogsProto.CastConnectionInfo.SenderInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 sender_device_id = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->sender_device_id(), output);
  }

  // optional .metrics.CastLogsProto.CastConnectionInfo.SenderInfo.SDKType sdk_type = 2;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->sdk_type(), output);
  }

  // optional string version = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->version(), output);
  }

  // optional string chrome_browser_version = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->chrome_browser_version(), output);
  }

  // optional .metrics.CastLogsProto.CastConnectionInfo.SenderInfo.Platform platform = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->platform(), output);
  }

  // optional string system_version = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->system_version(), output);
  }

  // optional .metrics.CastLogsProto.CastConnectionInfo.SenderInfo.ConnectionType transport_connection_type = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->transport_connection_type(), output);
  }

  // optional string model = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->model(), output);
  }

  // optional int32 sender_local_ip_fragment = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->sender_local_ip_fragment(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:metrics.CastLogsProto.CastConnectionInfo.SenderInfo)
}

size_t CastLogsProto_CastConnectionInfo_SenderInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.CastLogsProto.CastConnectionInfo.SenderInfo)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 255u) {
    // optional string version = 3;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // optional string chrome_browser_version = 4;
    if (has_chrome_browser_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->chrome_browser_version());
    }

    // optional string system_version = 6;
    if (has_system_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->system_version());
    }

    // optional string model = 8;
    if (has_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->model());
    }

    // optional fixed64 sender_device_id = 1;
    if (has_sender_device_id()) {
      total_size += 1 + 8;
    }

    // optional .metrics.CastLogsProto.CastConnectionInfo.SenderInfo.SDKType sdk_type = 2;
    if (has_sdk_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sdk_type());
    }

    // optional .metrics.CastLogsProto.CastConnectionInfo.SenderInfo.Platform platform = 5;
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->platform());
    }

    // optional .metrics.CastLogsProto.CastConnectionInfo.SenderInfo.ConnectionType transport_connection_type = 7;
    if (has_transport_connection_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->transport_connection_type());
    }

  }
  // optional int32 sender_local_ip_fragment = 9;
  if (has_sender_local_ip_fragment()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sender_local_ip_fragment());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CastLogsProto_CastConnectionInfo_SenderInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CastLogsProto_CastConnectionInfo_SenderInfo*>(&from));
}

void CastLogsProto_CastConnectionInfo_SenderInfo::MergeFrom(const CastLogsProto_CastConnectionInfo_SenderInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.CastLogsProto.CastConnectionInfo.SenderInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_version();
      version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_chrome_browser_version();
      chrome_browser_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chrome_browser_version_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_system_version();
      system_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.system_version_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_model();
      model_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_);
    }
    if (cached_has_bits & 0x00000010u) {
      sender_device_id_ = from.sender_device_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      sdk_type_ = from.sdk_type_;
    }
    if (cached_has_bits & 0x00000040u) {
      platform_ = from.platform_;
    }
    if (cached_has_bits & 0x00000080u) {
      transport_connection_type_ = from.transport_connection_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_sender_local_ip_fragment(from.sender_local_ip_fragment());
  }
}

void CastLogsProto_CastConnectionInfo_SenderInfo::CopyFrom(const CastLogsProto_CastConnectionInfo_SenderInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.CastLogsProto.CastConnectionInfo.SenderInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CastLogsProto_CastConnectionInfo_SenderInfo::IsInitialized() const {
  return true;
}

void CastLogsProto_CastConnectionInfo_SenderInfo::Swap(CastLogsProto_CastConnectionInfo_SenderInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CastLogsProto_CastConnectionInfo_SenderInfo::InternalSwap(CastLogsProto_CastConnectionInfo_SenderInfo* other) {
  using std::swap;
  version_.Swap(&other->version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  chrome_browser_version_.Swap(&other->chrome_browser_version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  system_version_.Swap(&other->system_version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  model_.Swap(&other->model_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(sender_device_id_, other->sender_device_id_);
  swap(sdk_type_, other->sdk_type_);
  swap(platform_, other->platform_);
  swap(transport_connection_type_, other->transport_connection_type_);
  swap(sender_local_ip_fragment_, other->sender_local_ip_fragment_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string CastLogsProto_CastConnectionInfo_SenderInfo::GetTypeName() const {
  return "metrics.CastLogsProto.CastConnectionInfo.SenderInfo";
}


// ===================================================================

void CastLogsProto_CastConnectionInfo::InitAsDefaultInstance() {
  ::metrics::_CastLogsProto_CastConnectionInfo_default_instance_._instance.get_mutable()->sender_info_ = const_cast< ::metrics::CastLogsProto_CastConnectionInfo_SenderInfo*>(
      ::metrics::CastLogsProto_CastConnectionInfo_SenderInfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CastLogsProto_CastConnectionInfo::kTransportConnectionIdFieldNumber;
const int CastLogsProto_CastConnectionInfo::kVirtualConnectionIdFieldNumber;
const int CastLogsProto_CastConnectionInfo::kSenderInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CastLogsProto_CastConnectionInfo::CastLogsProto_CastConnectionInfo()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cast_5flogs_2eproto::scc_info_CastLogsProto_CastConnectionInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.CastLogsProto.CastConnectionInfo)
}
CastLogsProto_CastConnectionInfo::CastLogsProto_CastConnectionInfo(const CastLogsProto_CastConnectionInfo& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_sender_info()) {
    sender_info_ = new ::metrics::CastLogsProto_CastConnectionInfo_SenderInfo(*from.sender_info_);
  } else {
    sender_info_ = NULL;
  }
  ::memcpy(&transport_connection_id_, &from.transport_connection_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&virtual_connection_id_) -
    reinterpret_cast<char*>(&transport_connection_id_)) + sizeof(virtual_connection_id_));
  // @@protoc_insertion_point(copy_constructor:metrics.CastLogsProto.CastConnectionInfo)
}

void CastLogsProto_CastConnectionInfo::SharedCtor() {
  ::memset(&sender_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&virtual_connection_id_) -
      reinterpret_cast<char*>(&sender_info_)) + sizeof(virtual_connection_id_));
}

CastLogsProto_CastConnectionInfo::~CastLogsProto_CastConnectionInfo() {
  // @@protoc_insertion_point(destructor:metrics.CastLogsProto.CastConnectionInfo)
  SharedDtor();
}

void CastLogsProto_CastConnectionInfo::SharedDtor() {
  if (this != internal_default_instance()) delete sender_info_;
}

void CastLogsProto_CastConnectionInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CastLogsProto_CastConnectionInfo& CastLogsProto_CastConnectionInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cast_5flogs_2eproto::scc_info_CastLogsProto_CastConnectionInfo.base);
  return *internal_default_instance();
}


void CastLogsProto_CastConnectionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.CastLogsProto.CastConnectionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(sender_info_ != NULL);
    sender_info_->Clear();
  }
  if (cached_has_bits & 6u) {
    ::memset(&transport_connection_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&virtual_connection_id_) -
        reinterpret_cast<char*>(&transport_connection_id_)) + sizeof(virtual_connection_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CastLogsProto_CastConnectionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:metrics.CastLogsProto.CastConnectionInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 transport_connection_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_transport_connection_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &transport_connection_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 virtual_connection_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_virtual_connection_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &virtual_connection_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .metrics.CastLogsProto.CastConnectionInfo.SenderInfo sender_info = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sender_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.CastLogsProto.CastConnectionInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.CastLogsProto.CastConnectionInfo)
  return false;
#undef DO_
}

void CastLogsProto_CastConnectionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.CastLogsProto.CastConnectionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 transport_connection_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->transport_connection_id(), output);
  }

  // optional fixed32 virtual_connection_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->virtual_connection_id(), output);
  }

  // optional .metrics.CastLogsProto.CastConnectionInfo.SenderInfo sender_info = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->_internal_sender_info(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:metrics.CastLogsProto.CastConnectionInfo)
}

size_t CastLogsProto_CastConnectionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.CastLogsProto.CastConnectionInfo)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 7u) {
    // optional .metrics.CastLogsProto.CastConnectionInfo.SenderInfo sender_info = 3;
    if (has_sender_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *sender_info_);
    }

    // optional fixed32 transport_connection_id = 1;
    if (has_transport_connection_id()) {
      total_size += 1 + 4;
    }

    // optional fixed32 virtual_connection_id = 2;
    if (has_virtual_connection_id()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CastLogsProto_CastConnectionInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CastLogsProto_CastConnectionInfo*>(&from));
}

void CastLogsProto_CastConnectionInfo::MergeFrom(const CastLogsProto_CastConnectionInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.CastLogsProto.CastConnectionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_sender_info()->::metrics::CastLogsProto_CastConnectionInfo_SenderInfo::MergeFrom(from.sender_info());
    }
    if (cached_has_bits & 0x00000002u) {
      transport_connection_id_ = from.transport_connection_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      virtual_connection_id_ = from.virtual_connection_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CastLogsProto_CastConnectionInfo::CopyFrom(const CastLogsProto_CastConnectionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.CastLogsProto.CastConnectionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CastLogsProto_CastConnectionInfo::IsInitialized() const {
  return true;
}

void CastLogsProto_CastConnectionInfo::Swap(CastLogsProto_CastConnectionInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CastLogsProto_CastConnectionInfo::InternalSwap(CastLogsProto_CastConnectionInfo* other) {
  using std::swap;
  swap(sender_info_, other->sender_info_);
  swap(transport_connection_id_, other->transport_connection_id_);
  swap(virtual_connection_id_, other->virtual_connection_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string CastLogsProto_CastConnectionInfo::GetTypeName() const {
  return "metrics.CastLogsProto.CastConnectionInfo";
}


// ===================================================================

void CastLogsProto_CastEventProto_Metadata::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CastLogsProto_CastEventProto_Metadata::kNameHashFieldNumber;
const int CastLogsProto_CastEventProto_Metadata::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CastLogsProto_CastEventProto_Metadata::CastLogsProto_CastEventProto_Metadata()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cast_5flogs_2eproto::scc_info_CastLogsProto_CastEventProto_Metadata.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.CastLogsProto.CastEventProto.Metadata)
}
CastLogsProto_CastEventProto_Metadata::CastLogsProto_CastEventProto_Metadata(const CastLogsProto_CastEventProto_Metadata& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&name_hash_, &from.name_hash_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&name_hash_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:metrics.CastLogsProto.CastEventProto.Metadata)
}

void CastLogsProto_CastEventProto_Metadata::SharedCtor() {
  ::memset(&name_hash_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&name_hash_)) + sizeof(value_));
}

CastLogsProto_CastEventProto_Metadata::~CastLogsProto_CastEventProto_Metadata() {
  // @@protoc_insertion_point(destructor:metrics.CastLogsProto.CastEventProto.Metadata)
  SharedDtor();
}

void CastLogsProto_CastEventProto_Metadata::SharedDtor() {
}

void CastLogsProto_CastEventProto_Metadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CastLogsProto_CastEventProto_Metadata& CastLogsProto_CastEventProto_Metadata::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cast_5flogs_2eproto::scc_info_CastLogsProto_CastEventProto_Metadata.base);
  return *internal_default_instance();
}


void CastLogsProto_CastEventProto_Metadata::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.CastLogsProto.CastEventProto.Metadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&name_hash_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&value_) -
        reinterpret_cast<char*>(&name_hash_)) + sizeof(value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CastLogsProto_CastEventProto_Metadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:metrics.CastLogsProto.CastEventProto.Metadata)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 name_hash = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_name_hash();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &name_hash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.CastLogsProto.CastEventProto.Metadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.CastLogsProto.CastEventProto.Metadata)
  return false;
#undef DO_
}

void CastLogsProto_CastEventProto_Metadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.CastLogsProto.CastEventProto.Metadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 name_hash = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->name_hash(), output);
  }

  // optional int64 value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->value(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:metrics.CastLogsProto.CastEventProto.Metadata)
}

size_t CastLogsProto_CastEventProto_Metadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.CastLogsProto.CastEventProto.Metadata)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 3u) {
    // optional fixed64 name_hash = 1;
    if (has_name_hash()) {
      total_size += 1 + 8;
    }

    // optional int64 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->value());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CastLogsProto_CastEventProto_Metadata::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CastLogsProto_CastEventProto_Metadata*>(&from));
}

void CastLogsProto_CastEventProto_Metadata::MergeFrom(const CastLogsProto_CastEventProto_Metadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.CastLogsProto.CastEventProto.Metadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      name_hash_ = from.name_hash_;
    }
    if (cached_has_bits & 0x00000002u) {
      value_ = from.value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CastLogsProto_CastEventProto_Metadata::CopyFrom(const CastLogsProto_CastEventProto_Metadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.CastLogsProto.CastEventProto.Metadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CastLogsProto_CastEventProto_Metadata::IsInitialized() const {
  return true;
}

void CastLogsProto_CastEventProto_Metadata::Swap(CastLogsProto_CastEventProto_Metadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CastLogsProto_CastEventProto_Metadata::InternalSwap(CastLogsProto_CastEventProto_Metadata* other) {
  using std::swap;
  swap(name_hash_, other->name_hash_);
  swap(value_, other->value_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string CastLogsProto_CastEventProto_Metadata::GetTypeName() const {
  return "metrics.CastLogsProto.CastEventProto.Metadata";
}


// ===================================================================

void CastLogsProto_CastEventProto::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CastLogsProto_CastEventProto::kNameHashFieldNumber;
const int CastLogsProto_CastEventProto::kTimeMsecFieldNumber;
const int CastLogsProto_CastEventProto::kAppIdFieldNumber;
const int CastLogsProto_CastEventProto::kRemoteAppIdFieldNumber;
const int CastLogsProto_CastEventProto::kApplicationSessionIdFieldNumber;
const int CastLogsProto_CastEventProto::kCastReceiverVersionFieldNumber;
const int CastLogsProto_CastEventProto::kCastMplVersionFieldNumber;
const int CastLogsProto_CastEventProto::kTransportConnectionIdFieldNumber;
const int CastLogsProto_CastEventProto::kVirtualConnectionIdFieldNumber;
const int CastLogsProto_CastEventProto::kValueFieldNumber;
const int CastLogsProto_CastEventProto::kGroupUuidFieldNumber;
const int CastLogsProto_CastEventProto::kConversationKeyFieldNumber;
const int CastLogsProto_CastEventProto::kRequestIdFieldNumber;
const int CastLogsProto_CastEventProto::kEventIdFieldNumber;
const int CastLogsProto_CastEventProto::kAoghRequestIdFieldNumber;
const int CastLogsProto_CastEventProto::kAoghLocalDeviceIdFieldNumber;
const int CastLogsProto_CastEventProto::kAoghAgentIdFieldNumber;
const int CastLogsProto_CastEventProto::kMetadataFieldNumber;
const int CastLogsProto_CastEventProto::kFeatureVectorFieldNumber;
const int CastLogsProto_CastEventProto::kTimezoneIdFieldNumber;
const int CastLogsProto_CastEventProto::kUiVersionFieldNumber;
const int CastLogsProto_CastEventProto::kSelinuxAuditDetailFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CastLogsProto_CastEventProto::CastLogsProto_CastEventProto()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cast_5flogs_2eproto::scc_info_CastLogsProto_CastEventProto.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.CastLogsProto.CastEventProto)
}
CastLogsProto_CastEventProto::CastLogsProto_CastEventProto(const CastLogsProto_CastEventProto& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      metadata_(from.metadata_),
      feature_vector_(from.feature_vector_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  conversation_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_conversation_key()) {
    conversation_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.conversation_key_);
  }
  event_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_event_id()) {
    event_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.event_id_);
  }
  aogh_request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_aogh_request_id()) {
    aogh_request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.aogh_request_id_);
  }
  timezone_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_timezone_id()) {
    timezone_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timezone_id_);
  }
  ui_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ui_version()) {
    ui_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ui_version_);
  }
  aogh_agent_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_aogh_agent_id()) {
    aogh_agent_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.aogh_agent_id_);
  }
  selinux_audit_detail_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_selinux_audit_detail()) {
    selinux_audit_detail_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.selinux_audit_detail_);
  }
  ::memcpy(&name_hash_, &from.name_hash_,
    static_cast<size_t>(reinterpret_cast<char*>(&remote_app_id_) -
    reinterpret_cast<char*>(&name_hash_)) + sizeof(remote_app_id_));
  // @@protoc_insertion_point(copy_constructor:metrics.CastLogsProto.CastEventProto)
}

void CastLogsProto_CastEventProto::SharedCtor() {
  conversation_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  event_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  aogh_request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timezone_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ui_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  aogh_agent_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  selinux_audit_detail_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&name_hash_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&remote_app_id_) -
      reinterpret_cast<char*>(&name_hash_)) + sizeof(remote_app_id_));
}

CastLogsProto_CastEventProto::~CastLogsProto_CastEventProto() {
  // @@protoc_insertion_point(destructor:metrics.CastLogsProto.CastEventProto)
  SharedDtor();
}

void CastLogsProto_CastEventProto::SharedDtor() {
  conversation_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  event_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  aogh_request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timezone_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ui_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  aogh_agent_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  selinux_audit_detail_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CastLogsProto_CastEventProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CastLogsProto_CastEventProto& CastLogsProto_CastEventProto::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cast_5flogs_2eproto::scc_info_CastLogsProto_CastEventProto.base);
  return *internal_default_instance();
}


void CastLogsProto_CastEventProto::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.CastLogsProto.CastEventProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metadata_.Clear();
  feature_vector_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      conversation_key_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      event_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      aogh_request_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      timezone_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      ui_version_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      aogh_agent_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000040u) {
      selinux_audit_detail_.ClearNonDefaultToEmptyNoArena();
    }
  }
  name_hash_ = GOOGLE_ULONGLONG(0);
  if (cached_has_bits & 65280u) {
    ::memset(&time_msec_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&virtual_connection_id_) -
        reinterpret_cast<char*>(&time_msec_)) + sizeof(virtual_connection_id_));
  }
  if (cached_has_bits & 983040u) {
    ::memset(&request_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&remote_app_id_) -
        reinterpret_cast<char*>(&request_id_)) + sizeof(remote_app_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CastLogsProto_CastEventProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:metrics.CastLogsProto.CastEventProto)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 name_hash = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_name_hash();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &name_hash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 time_msec = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_time_msec();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_msec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 app_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_app_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 application_session_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_application_session_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &application_session_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 cast_receiver_version = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_cast_receiver_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &cast_receiver_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 transport_connection_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
          set_has_transport_connection_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &transport_connection_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 virtual_connection_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {
          set_has_virtual_connection_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &virtual_connection_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 value = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 cast_mpl_version = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {
          set_has_cast_mpl_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &cast_mpl_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 group_uuid = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {
          set_has_group_uuid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &group_uuid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string conversation_key = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_conversation_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 request_id = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u /* 101 & 0xFF */)) {
          set_has_request_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &request_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string event_id = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_event_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .metrics.CastLogsProto.CastEventProto.Metadata metadata = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float feature_vector = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(125u /* 125 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 125u, input, this->mutable_feature_vector())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_feature_vector())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string aogh_request_id = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_aogh_request_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string timezone_id = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timezone_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 aogh_local_device_id = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          set_has_aogh_local_device_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &aogh_local_device_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 remote_app_id = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(157u /* 157 & 0xFF */)) {
          set_has_remote_app_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &remote_app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ui_version = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ui_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string aogh_agent_id = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_aogh_agent_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string selinux_audit_detail = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_selinux_audit_detail()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.CastLogsProto.CastEventProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.CastLogsProto.CastEventProto)
  return false;
#undef DO_
}

void CastLogsProto_CastEventProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.CastLogsProto.CastEventProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 name_hash = 1;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->name_hash(), output);
  }

  // optional int64 time_msec = 2;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->time_msec(), output);
  }

  // optional fixed32 app_id = 3;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->app_id(), output);
  }

  // optional fixed64 application_session_id = 4;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->application_session_id(), output);
  }

  // optional fixed64 cast_receiver_version = 5;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->cast_receiver_version(), output);
  }

  // optional fixed32 transport_connection_id = 6;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(6, this->transport_connection_id(), output);
  }

  // optional fixed32 virtual_connection_id = 7;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(7, this->virtual_connection_id(), output);
  }

  // optional int64 value = 8;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->value(), output);
  }

  // optional fixed64 cast_mpl_version = 9;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(9, this->cast_mpl_version(), output);
  }

  // optional fixed64 group_uuid = 10;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(10, this->group_uuid(), output);
  }

  // optional string conversation_key = 11;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->conversation_key(), output);
  }

  // optional fixed32 request_id = 12;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(12, this->request_id(), output);
  }

  // optional string event_id = 13;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->event_id(), output);
  }

  // repeated .metrics.CastLogsProto.CastEventProto.Metadata metadata = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->metadata_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      14,
      this->metadata(static_cast<int>(i)),
      output);
  }

  // repeated float feature_vector = 15;
  for (int i = 0, n = this->feature_vector_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      15, this->feature_vector(i), output);
  }

  // optional string aogh_request_id = 16;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->aogh_request_id(), output);
  }

  // optional string timezone_id = 17;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->timezone_id(), output);
  }

  // optional int64 aogh_local_device_id = 18;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(18, this->aogh_local_device_id(), output);
  }

  // optional fixed32 remote_app_id = 19;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(19, this->remote_app_id(), output);
  }

  // optional string ui_version = 20;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->ui_version(), output);
  }

  // optional string aogh_agent_id = 21;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->aogh_agent_id(), output);
  }

  // optional string selinux_audit_detail = 22;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      22, this->selinux_audit_detail(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:metrics.CastLogsProto.CastEventProto)
}

size_t CastLogsProto_CastEventProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.CastLogsProto.CastEventProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // repeated .metrics.CastLogsProto.CastEventProto.Metadata metadata = 14;
  {
    unsigned int count = static_cast<unsigned int>(this->metadata_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->metadata(static_cast<int>(i)));
    }
  }

  // repeated float feature_vector = 15;
  {
    unsigned int count = static_cast<unsigned int>(this->feature_vector_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->feature_vector_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string conversation_key = 11;
    if (has_conversation_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->conversation_key());
    }

    // optional string event_id = 13;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->event_id());
    }

    // optional string aogh_request_id = 16;
    if (has_aogh_request_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->aogh_request_id());
    }

    // optional string timezone_id = 17;
    if (has_timezone_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timezone_id());
    }

    // optional string ui_version = 20;
    if (has_ui_version()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ui_version());
    }

    // optional string aogh_agent_id = 21;
    if (has_aogh_agent_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->aogh_agent_id());
    }

    // optional string selinux_audit_detail = 22;
    if (has_selinux_audit_detail()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->selinux_audit_detail());
    }

    // optional fixed64 name_hash = 1;
    if (has_name_hash()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional int64 time_msec = 2;
    if (has_time_msec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time_msec());
    }

    // optional fixed64 application_session_id = 4;
    if (has_application_session_id()) {
      total_size += 1 + 8;
    }

    // optional fixed32 app_id = 3;
    if (has_app_id()) {
      total_size += 1 + 4;
    }

    // optional fixed32 transport_connection_id = 6;
    if (has_transport_connection_id()) {
      total_size += 1 + 4;
    }

    // optional fixed64 cast_receiver_version = 5;
    if (has_cast_receiver_version()) {
      total_size += 1 + 8;
    }

    // optional int64 value = 8;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->value());
    }

    // optional fixed64 cast_mpl_version = 9;
    if (has_cast_mpl_version()) {
      total_size += 1 + 8;
    }

    // optional fixed32 virtual_connection_id = 7;
    if (has_virtual_connection_id()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[16 / 32] & 983040u) {
    // optional fixed32 request_id = 12;
    if (has_request_id()) {
      total_size += 1 + 4;
    }

    // optional fixed64 group_uuid = 10;
    if (has_group_uuid()) {
      total_size += 1 + 8;
    }

    // optional int64 aogh_local_device_id = 18;
    if (has_aogh_local_device_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->aogh_local_device_id());
    }

    // optional fixed32 remote_app_id = 19;
    if (has_remote_app_id()) {
      total_size += 2 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CastLogsProto_CastEventProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CastLogsProto_CastEventProto*>(&from));
}

void CastLogsProto_CastEventProto::MergeFrom(const CastLogsProto_CastEventProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.CastLogsProto.CastEventProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  metadata_.MergeFrom(from.metadata_);
  feature_vector_.MergeFrom(from.feature_vector_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_conversation_key();
      conversation_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.conversation_key_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_event_id();
      event_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.event_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_aogh_request_id();
      aogh_request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.aogh_request_id_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_timezone_id();
      timezone_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timezone_id_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_ui_version();
      ui_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ui_version_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_aogh_agent_id();
      aogh_agent_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.aogh_agent_id_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_selinux_audit_detail();
      selinux_audit_detail_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.selinux_audit_detail_);
    }
    if (cached_has_bits & 0x00000080u) {
      name_hash_ = from.name_hash_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      time_msec_ = from.time_msec_;
    }
    if (cached_has_bits & 0x00000200u) {
      application_session_id_ = from.application_session_id_;
    }
    if (cached_has_bits & 0x00000400u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000800u) {
      transport_connection_id_ = from.transport_connection_id_;
    }
    if (cached_has_bits & 0x00001000u) {
      cast_receiver_version_ = from.cast_receiver_version_;
    }
    if (cached_has_bits & 0x00002000u) {
      value_ = from.value_;
    }
    if (cached_has_bits & 0x00004000u) {
      cast_mpl_version_ = from.cast_mpl_version_;
    }
    if (cached_has_bits & 0x00008000u) {
      virtual_connection_id_ = from.virtual_connection_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 983040u) {
    if (cached_has_bits & 0x00010000u) {
      request_id_ = from.request_id_;
    }
    if (cached_has_bits & 0x00020000u) {
      group_uuid_ = from.group_uuid_;
    }
    if (cached_has_bits & 0x00040000u) {
      aogh_local_device_id_ = from.aogh_local_device_id_;
    }
    if (cached_has_bits & 0x00080000u) {
      remote_app_id_ = from.remote_app_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CastLogsProto_CastEventProto::CopyFrom(const CastLogsProto_CastEventProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.CastLogsProto.CastEventProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CastLogsProto_CastEventProto::IsInitialized() const {
  return true;
}

void CastLogsProto_CastEventProto::Swap(CastLogsProto_CastEventProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CastLogsProto_CastEventProto::InternalSwap(CastLogsProto_CastEventProto* other) {
  using std::swap;
  CastToBase(&metadata_)->InternalSwap(CastToBase(&other->metadata_));
  feature_vector_.InternalSwap(&other->feature_vector_);
  conversation_key_.Swap(&other->conversation_key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  event_id_.Swap(&other->event_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  aogh_request_id_.Swap(&other->aogh_request_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  timezone_id_.Swap(&other->timezone_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ui_version_.Swap(&other->ui_version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  aogh_agent_id_.Swap(&other->aogh_agent_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  selinux_audit_detail_.Swap(&other->selinux_audit_detail_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(name_hash_, other->name_hash_);
  swap(time_msec_, other->time_msec_);
  swap(application_session_id_, other->application_session_id_);
  swap(app_id_, other->app_id_);
  swap(transport_connection_id_, other->transport_connection_id_);
  swap(cast_receiver_version_, other->cast_receiver_version_);
  swap(value_, other->value_);
  swap(cast_mpl_version_, other->cast_mpl_version_);
  swap(virtual_connection_id_, other->virtual_connection_id_);
  swap(request_id_, other->request_id_);
  swap(group_uuid_, other->group_uuid_);
  swap(aogh_local_device_id_, other->aogh_local_device_id_);
  swap(remote_app_id_, other->remote_app_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string CastLogsProto_CastEventProto::GetTypeName() const {
  return "metrics.CastLogsProto.CastEventProto";
}


// ===================================================================

void CastLogsProto_CastDeviceMutableInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CastLogsProto_CastDeviceMutableInfo::kLastRebootTypeFieldNumber;
const int CastLogsProto_CastDeviceMutableInfo::kSystemBuildNumberFieldNumber;
const int CastLogsProto_CastDeviceMutableInfo::kBackdropAppDeviceIdFieldNumber;
const int CastLogsProto_CastDeviceMutableInfo::kReleaseVersionFieldNumber;
const int CastLogsProto_CastDeviceMutableInfo::kNetifIpVersionFieldNumber;
const int CastLogsProto_CastDeviceMutableInfo::kIpDualStackSupportedFieldNumber;
const int CastLogsProto_CastDeviceMutableInfo::kTimezoneIdFieldNumber;
const int CastLogsProto_CastDeviceMutableInfo::kLatestUiVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CastLogsProto_CastDeviceMutableInfo::CastLogsProto_CastDeviceMutableInfo()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cast_5flogs_2eproto::scc_info_CastLogsProto_CastDeviceMutableInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.CastLogsProto.CastDeviceMutableInfo)
}
CastLogsProto_CastDeviceMutableInfo::CastLogsProto_CastDeviceMutableInfo(const CastLogsProto_CastDeviceMutableInfo& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  backdrop_app_device_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_backdrop_app_device_id()) {
    backdrop_app_device_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.backdrop_app_device_id_);
  }
  timezone_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_timezone_id()) {
    timezone_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timezone_id_);
  }
  latest_ui_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_latest_ui_version()) {
    latest_ui_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.latest_ui_version_);
  }
  ::memcpy(&system_build_number_, &from.system_build_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&ip_dual_stack_supported_) -
    reinterpret_cast<char*>(&system_build_number_)) + sizeof(ip_dual_stack_supported_));
  // @@protoc_insertion_point(copy_constructor:metrics.CastLogsProto.CastDeviceMutableInfo)
}

void CastLogsProto_CastDeviceMutableInfo::SharedCtor() {
  backdrop_app_device_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timezone_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  latest_ui_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&system_build_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ip_dual_stack_supported_) -
      reinterpret_cast<char*>(&system_build_number_)) + sizeof(ip_dual_stack_supported_));
}

CastLogsProto_CastDeviceMutableInfo::~CastLogsProto_CastDeviceMutableInfo() {
  // @@protoc_insertion_point(destructor:metrics.CastLogsProto.CastDeviceMutableInfo)
  SharedDtor();
}

void CastLogsProto_CastDeviceMutableInfo::SharedDtor() {
  backdrop_app_device_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timezone_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  latest_ui_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CastLogsProto_CastDeviceMutableInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CastLogsProto_CastDeviceMutableInfo& CastLogsProto_CastDeviceMutableInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cast_5flogs_2eproto::scc_info_CastLogsProto_CastDeviceMutableInfo.base);
  return *internal_default_instance();
}


void CastLogsProto_CastDeviceMutableInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.CastLogsProto.CastDeviceMutableInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      backdrop_app_device_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      timezone_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      latest_ui_version_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 248u) {
    ::memset(&system_build_number_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ip_dual_stack_supported_) -
        reinterpret_cast<char*>(&system_build_number_)) + sizeof(ip_dual_stack_supported_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CastLogsProto_CastDeviceMutableInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:metrics.CastLogsProto.CastDeviceMutableInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .metrics.CastLogsProto.CastDeviceMutableInfo.RebootType last_reboot_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::metrics::CastLogsProto_CastDeviceMutableInfo_RebootType_IsValid(value)) {
            set_last_reboot_type(static_cast< ::metrics::CastLogsProto_CastDeviceMutableInfo_RebootType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 system_build_number = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_system_build_number();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &system_build_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string backdrop_app_device_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_backdrop_app_device_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 release_version = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_release_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &release_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .metrics.CastLogsProto.CastDeviceMutableInfo.NetifIPVersion netif_ip_version = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::metrics::CastLogsProto_CastDeviceMutableInfo_NetifIPVersion_IsValid(value)) {
            set_netif_ip_version(static_cast< ::metrics::CastLogsProto_CastDeviceMutableInfo_NetifIPVersion >(value));
          } else {
            unknown_fields_stream.WriteVarint32(40u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool ip_dual_stack_supported = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_ip_dual_stack_supported();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ip_dual_stack_supported_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string timezone_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timezone_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string latest_ui_version = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_latest_ui_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.CastLogsProto.CastDeviceMutableInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.CastLogsProto.CastDeviceMutableInfo)
  return false;
#undef DO_
}

void CastLogsProto_CastDeviceMutableInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.CastLogsProto.CastDeviceMutableInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .metrics.CastLogsProto.CastDeviceMutableInfo.RebootType last_reboot_type = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->last_reboot_type(), output);
  }

  // optional fixed64 system_build_number = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->system_build_number(), output);
  }

  // optional string backdrop_app_device_id = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->backdrop_app_device_id(), output);
  }

  // optional fixed32 release_version = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->release_version(), output);
  }

  // optional .metrics.CastLogsProto.CastDeviceMutableInfo.NetifIPVersion netif_ip_version = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->netif_ip_version(), output);
  }

  // optional bool ip_dual_stack_supported = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->ip_dual_stack_supported(), output);
  }

  // optional string timezone_id = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->timezone_id(), output);
  }

  // optional string latest_ui_version = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->latest_ui_version(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:metrics.CastLogsProto.CastDeviceMutableInfo)
}

size_t CastLogsProto_CastDeviceMutableInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.CastLogsProto.CastDeviceMutableInfo)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 255u) {
    // optional string backdrop_app_device_id = 3;
    if (has_backdrop_app_device_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->backdrop_app_device_id());
    }

    // optional string timezone_id = 7;
    if (has_timezone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timezone_id());
    }

    // optional string latest_ui_version = 8;
    if (has_latest_ui_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->latest_ui_version());
    }

    // optional fixed64 system_build_number = 2;
    if (has_system_build_number()) {
      total_size += 1 + 8;
    }

    // optional .metrics.CastLogsProto.CastDeviceMutableInfo.RebootType last_reboot_type = 1;
    if (has_last_reboot_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->last_reboot_type());
    }

    // optional fixed32 release_version = 4;
    if (has_release_version()) {
      total_size += 1 + 4;
    }

    // optional .metrics.CastLogsProto.CastDeviceMutableInfo.NetifIPVersion netif_ip_version = 5;
    if (has_netif_ip_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->netif_ip_version());
    }

    // optional bool ip_dual_stack_supported = 6;
    if (has_ip_dual_stack_supported()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CastLogsProto_CastDeviceMutableInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CastLogsProto_CastDeviceMutableInfo*>(&from));
}

void CastLogsProto_CastDeviceMutableInfo::MergeFrom(const CastLogsProto_CastDeviceMutableInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.CastLogsProto.CastDeviceMutableInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_backdrop_app_device_id();
      backdrop_app_device_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.backdrop_app_device_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_timezone_id();
      timezone_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timezone_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_latest_ui_version();
      latest_ui_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.latest_ui_version_);
    }
    if (cached_has_bits & 0x00000008u) {
      system_build_number_ = from.system_build_number_;
    }
    if (cached_has_bits & 0x00000010u) {
      last_reboot_type_ = from.last_reboot_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      release_version_ = from.release_version_;
    }
    if (cached_has_bits & 0x00000040u) {
      netif_ip_version_ = from.netif_ip_version_;
    }
    if (cached_has_bits & 0x00000080u) {
      ip_dual_stack_supported_ = from.ip_dual_stack_supported_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CastLogsProto_CastDeviceMutableInfo::CopyFrom(const CastLogsProto_CastDeviceMutableInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.CastLogsProto.CastDeviceMutableInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CastLogsProto_CastDeviceMutableInfo::IsInitialized() const {
  return true;
}

void CastLogsProto_CastDeviceMutableInfo::Swap(CastLogsProto_CastDeviceMutableInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CastLogsProto_CastDeviceMutableInfo::InternalSwap(CastLogsProto_CastDeviceMutableInfo* other) {
  using std::swap;
  backdrop_app_device_id_.Swap(&other->backdrop_app_device_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  timezone_id_.Swap(&other->timezone_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  latest_ui_version_.Swap(&other->latest_ui_version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(system_build_number_, other->system_build_number_);
  swap(last_reboot_type_, other->last_reboot_type_);
  swap(release_version_, other->release_version_);
  swap(netif_ip_version_, other->netif_ip_version_);
  swap(ip_dual_stack_supported_, other->ip_dual_stack_supported_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string CastLogsProto_CastDeviceMutableInfo::GetTypeName() const {
  return "metrics.CastLogsProto.CastDeviceMutableInfo";
}


// ===================================================================

void CastLogsProto::InitAsDefaultInstance() {
  ::metrics::_CastLogsProto_default_instance_._instance.get_mutable()->cast_device_info_ = const_cast< ::metrics::CastLogsProto_CastDeviceInfo*>(
      ::metrics::CastLogsProto_CastDeviceInfo::internal_default_instance());
  ::metrics::_CastLogsProto_default_instance_._instance.get_mutable()->cast_device_mutable_info_ = const_cast< ::metrics::CastLogsProto_CastDeviceMutableInfo*>(
      ::metrics::CastLogsProto_CastDeviceMutableInfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CastLogsProto::kCastDeviceInfoFieldNumber;
const int CastLogsProto::kCastConnectionInfoFieldNumber;
const int CastLogsProto::kCastEventFieldNumber;
const int CastLogsProto::kVirtualReleaseTrackFieldNumber;
const int CastLogsProto::kCastDeviceMutableInfoFieldNumber;
const int CastLogsProto::kReceiverMetricsIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CastLogsProto::CastLogsProto()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cast_5flogs_2eproto::scc_info_CastLogsProto.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.CastLogsProto)
}
CastLogsProto::CastLogsProto(const CastLogsProto& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      cast_connection_info_(from.cast_connection_info_),
      cast_event_(from.cast_event_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_cast_device_info()) {
    cast_device_info_ = new ::metrics::CastLogsProto_CastDeviceInfo(*from.cast_device_info_);
  } else {
    cast_device_info_ = NULL;
  }
  if (from.has_cast_device_mutable_info()) {
    cast_device_mutable_info_ = new ::metrics::CastLogsProto_CastDeviceMutableInfo(*from.cast_device_mutable_info_);
  } else {
    cast_device_mutable_info_ = NULL;
  }
  ::memcpy(&receiver_metrics_id_, &from.receiver_metrics_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&virtual_release_track_) -
    reinterpret_cast<char*>(&receiver_metrics_id_)) + sizeof(virtual_release_track_));
  // @@protoc_insertion_point(copy_constructor:metrics.CastLogsProto)
}

void CastLogsProto::SharedCtor() {
  ::memset(&cast_device_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&virtual_release_track_) -
      reinterpret_cast<char*>(&cast_device_info_)) + sizeof(virtual_release_track_));
}

CastLogsProto::~CastLogsProto() {
  // @@protoc_insertion_point(destructor:metrics.CastLogsProto)
  SharedDtor();
}

void CastLogsProto::SharedDtor() {
  if (this != internal_default_instance()) delete cast_device_info_;
  if (this != internal_default_instance()) delete cast_device_mutable_info_;
}

void CastLogsProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CastLogsProto& CastLogsProto::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cast_5flogs_2eproto::scc_info_CastLogsProto.base);
  return *internal_default_instance();
}


void CastLogsProto::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.CastLogsProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cast_connection_info_.Clear();
  cast_event_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(cast_device_info_ != NULL);
      cast_device_info_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(cast_device_mutable_info_ != NULL);
      cast_device_mutable_info_->Clear();
    }
  }
  if (cached_has_bits & 12u) {
    ::memset(&receiver_metrics_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&virtual_release_track_) -
        reinterpret_cast<char*>(&receiver_metrics_id_)) + sizeof(virtual_release_track_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CastLogsProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:metrics.CastLogsProto)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .metrics.CastLogsProto.CastDeviceInfo cast_device_info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cast_device_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .metrics.CastLogsProto.CastConnectionInfo cast_connection_info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_cast_connection_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .metrics.CastLogsProto.CastEventProto cast_event = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_cast_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 virtual_release_track = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_virtual_release_track();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &virtual_release_track_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .metrics.CastLogsProto.CastDeviceMutableInfo cast_device_mutable_info = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cast_device_mutable_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 receiver_metrics_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_receiver_metrics_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &receiver_metrics_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.CastLogsProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.CastLogsProto)
  return false;
#undef DO_
}

void CastLogsProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.CastLogsProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .metrics.CastLogsProto.CastDeviceInfo cast_device_info = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_cast_device_info(), output);
  }

  // repeated .metrics.CastLogsProto.CastConnectionInfo cast_connection_info = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cast_connection_info_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2,
      this->cast_connection_info(static_cast<int>(i)),
      output);
  }

  // repeated .metrics.CastLogsProto.CastEventProto cast_event = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cast_event_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3,
      this->cast_event(static_cast<int>(i)),
      output);
  }

  // optional fixed32 virtual_release_track = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->virtual_release_track(), output);
  }

  // optional .metrics.CastLogsProto.CastDeviceMutableInfo cast_device_mutable_info = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->_internal_cast_device_mutable_info(), output);
  }

  // optional fixed64 receiver_metrics_id = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(6, this->receiver_metrics_id(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:metrics.CastLogsProto)
}

size_t CastLogsProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.CastLogsProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // repeated .metrics.CastLogsProto.CastConnectionInfo cast_connection_info = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->cast_connection_info_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->cast_connection_info(static_cast<int>(i)));
    }
  }

  // repeated .metrics.CastLogsProto.CastEventProto cast_event = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->cast_event_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->cast_event(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional .metrics.CastLogsProto.CastDeviceInfo cast_device_info = 1;
    if (has_cast_device_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *cast_device_info_);
    }

    // optional .metrics.CastLogsProto.CastDeviceMutableInfo cast_device_mutable_info = 5;
    if (has_cast_device_mutable_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *cast_device_mutable_info_);
    }

    // optional fixed64 receiver_metrics_id = 6;
    if (has_receiver_metrics_id()) {
      total_size += 1 + 8;
    }

    // optional fixed32 virtual_release_track = 4;
    if (has_virtual_release_track()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CastLogsProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CastLogsProto*>(&from));
}

void CastLogsProto::MergeFrom(const CastLogsProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.CastLogsProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cast_connection_info_.MergeFrom(from.cast_connection_info_);
  cast_event_.MergeFrom(from.cast_event_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_cast_device_info()->::metrics::CastLogsProto_CastDeviceInfo::MergeFrom(from.cast_device_info());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_cast_device_mutable_info()->::metrics::CastLogsProto_CastDeviceMutableInfo::MergeFrom(from.cast_device_mutable_info());
    }
    if (cached_has_bits & 0x00000004u) {
      receiver_metrics_id_ = from.receiver_metrics_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      virtual_release_track_ = from.virtual_release_track_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CastLogsProto::CopyFrom(const CastLogsProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.CastLogsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CastLogsProto::IsInitialized() const {
  return true;
}

void CastLogsProto::Swap(CastLogsProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CastLogsProto::InternalSwap(CastLogsProto* other) {
  using std::swap;
  CastToBase(&cast_connection_info_)->InternalSwap(CastToBase(&other->cast_connection_info_));
  CastToBase(&cast_event_)->InternalSwap(CastToBase(&other->cast_event_));
  swap(cast_device_info_, other->cast_device_info_);
  swap(cast_device_mutable_info_, other->cast_device_mutable_info_);
  swap(receiver_metrics_id_, other->receiver_metrics_id_);
  swap(virtual_release_track_, other->virtual_release_track_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string CastLogsProto::GetTypeName() const {
  return "metrics.CastLogsProto";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace metrics
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metrics::CastLogsProto_CastDeviceInfo_HardwareInfo* Arena::CreateMaybeMessage< ::metrics::CastLogsProto_CastDeviceInfo_HardwareInfo >(Arena* arena) {
  return Arena::CreateInternal< ::metrics::CastLogsProto_CastDeviceInfo_HardwareInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metrics::CastLogsProto_CastDeviceInfo* Arena::CreateMaybeMessage< ::metrics::CastLogsProto_CastDeviceInfo >(Arena* arena) {
  return Arena::CreateInternal< ::metrics::CastLogsProto_CastDeviceInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metrics::CastLogsProto_CastConnectionInfo_SenderInfo* Arena::CreateMaybeMessage< ::metrics::CastLogsProto_CastConnectionInfo_SenderInfo >(Arena* arena) {
  return Arena::CreateInternal< ::metrics::CastLogsProto_CastConnectionInfo_SenderInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metrics::CastLogsProto_CastConnectionInfo* Arena::CreateMaybeMessage< ::metrics::CastLogsProto_CastConnectionInfo >(Arena* arena) {
  return Arena::CreateInternal< ::metrics::CastLogsProto_CastConnectionInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metrics::CastLogsProto_CastEventProto_Metadata* Arena::CreateMaybeMessage< ::metrics::CastLogsProto_CastEventProto_Metadata >(Arena* arena) {
  return Arena::CreateInternal< ::metrics::CastLogsProto_CastEventProto_Metadata >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metrics::CastLogsProto_CastEventProto* Arena::CreateMaybeMessage< ::metrics::CastLogsProto_CastEventProto >(Arena* arena) {
  return Arena::CreateInternal< ::metrics::CastLogsProto_CastEventProto >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metrics::CastLogsProto_CastDeviceMutableInfo* Arena::CreateMaybeMessage< ::metrics::CastLogsProto_CastDeviceMutableInfo >(Arena* arena) {
  return Arena::CreateInternal< ::metrics::CastLogsProto_CastDeviceMutableInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metrics::CastLogsProto* Arena::CreateMaybeMessage< ::metrics::CastLogsProto >(Arena* arena) {
  return Arena::CreateInternal< ::metrics::CastLogsProto >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
