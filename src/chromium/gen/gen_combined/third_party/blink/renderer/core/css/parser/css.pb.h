// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: css.proto

#ifndef PROTOBUF_INCLUDED_css_2eproto
#define PROTOBUF_INCLUDED_css_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_css_2eproto 

namespace protobuf_css_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[72];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_css_2eproto
namespace css_proto_converter {
class Angle;
class AngleDefaultTypeInternal;
extern AngleDefaultTypeInternal _Angle_default_instance_;
class AtRuleOrRuleset;
class AtRuleOrRulesetDefaultTypeInternal;
extern AtRuleOrRulesetDefaultTypeInternal _AtRuleOrRuleset_default_instance_;
class AtRuleOrRulesets;
class AtRuleOrRulesetsDefaultTypeInternal;
extern AtRuleOrRulesetsDefaultTypeInternal _AtRuleOrRulesets_default_instance_;
class Attr;
class AttrDefaultTypeInternal;
extern AttrDefaultTypeInternal _Attr_default_instance_;
class BinarySupportsCondition;
class BinarySupportsConditionDefaultTypeInternal;
extern BinarySupportsConditionDefaultTypeInternal _BinarySupportsCondition_default_instance_;
class CharsetDeclaration;
class CharsetDeclarationDefaultTypeInternal;
extern CharsetDeclarationDefaultTypeInternal _CharsetDeclaration_default_instance_;
class Declaration;
class DeclarationDefaultTypeInternal;
extern DeclarationDefaultTypeInternal _Declaration_default_instance_;
class DeclarationList;
class DeclarationListDefaultTypeInternal;
extern DeclarationListDefaultTypeInternal _DeclarationList_default_instance_;
class Escape;
class EscapeDefaultTypeInternal;
extern EscapeDefaultTypeInternal _Escape_default_instance_;
class Expr;
class ExprDefaultTypeInternal;
extern ExprDefaultTypeInternal _Expr_default_instance_;
class FontFace;
class FontFaceDefaultTypeInternal;
extern FontFaceDefaultTypeInternal _FontFace_default_instance_;
class Freq;
class FreqDefaultTypeInternal;
extern FreqDefaultTypeInternal _Freq_default_instance_;
class Function;
class FunctionDefaultTypeInternal;
extern FunctionDefaultTypeInternal _Function_default_instance_;
class FunctionToken;
class FunctionTokenDefaultTypeInternal;
extern FunctionTokenDefaultTypeInternal _FunctionToken_default_instance_;
class Hexcolor;
class HexcolorDefaultTypeInternal;
extern HexcolorDefaultTypeInternal _Hexcolor_default_instance_;
class HexcolorThree;
class HexcolorThreeDefaultTypeInternal;
extern HexcolorThreeDefaultTypeInternal _HexcolorThree_default_instance_;
class Ident;
class IdentDefaultTypeInternal;
extern IdentDefaultTypeInternal _Ident_default_instance_;
class Import;
class ImportDefaultTypeInternal;
extern ImportDefaultTypeInternal _Import_default_instance_;
class Input;
class InputDefaultTypeInternal;
extern InputDefaultTypeInternal _Input_default_instance_;
class Length;
class LengthDefaultTypeInternal;
extern LengthDefaultTypeInternal _Length_default_instance_;
class Media;
class MediaDefaultTypeInternal;
extern MediaDefaultTypeInternal _Media_default_instance_;
class MediaAnd;
class MediaAndDefaultTypeInternal;
extern MediaAndDefaultTypeInternal _MediaAnd_default_instance_;
class MediaCondition;
class MediaConditionDefaultTypeInternal;
extern MediaConditionDefaultTypeInternal _MediaCondition_default_instance_;
class MediaConditionWithoutOr;
class MediaConditionWithoutOrDefaultTypeInternal;
extern MediaConditionWithoutOrDefaultTypeInternal _MediaConditionWithoutOr_default_instance_;
class MediaFeature;
class MediaFeatureDefaultTypeInternal;
extern MediaFeatureDefaultTypeInternal _MediaFeature_default_instance_;
class MediaInParens;
class MediaInParensDefaultTypeInternal;
extern MediaInParensDefaultTypeInternal _MediaInParens_default_instance_;
class MediaNot;
class MediaNotDefaultTypeInternal;
extern MediaNotDefaultTypeInternal _MediaNot_default_instance_;
class MediaOr;
class MediaOrDefaultTypeInternal;
extern MediaOrDefaultTypeInternal _MediaOr_default_instance_;
class MediaQuery;
class MediaQueryDefaultTypeInternal;
extern MediaQueryDefaultTypeInternal _MediaQuery_default_instance_;
class MediaQueryList;
class MediaQueryListDefaultTypeInternal;
extern MediaQueryListDefaultTypeInternal _MediaQueryList_default_instance_;
class MediaQueryPartTwo;
class MediaQueryPartTwoDefaultTypeInternal;
extern MediaQueryPartTwoDefaultTypeInternal _MediaQueryPartTwo_default_instance_;
class MediaType;
class MediaTypeDefaultTypeInternal;
extern MediaTypeDefaultTypeInternal _MediaType_default_instance_;
class MfBool;
class MfBoolDefaultTypeInternal;
extern MfBoolDefaultTypeInternal _MfBool_default_instance_;
class MfName;
class MfNameDefaultTypeInternal;
extern MfNameDefaultTypeInternal _MfName_default_instance_;
class MfPlain;
class MfPlainDefaultTypeInternal;
extern MfPlainDefaultTypeInternal _MfPlain_default_instance_;
class MfValue;
class MfValueDefaultTypeInternal;
extern MfValueDefaultTypeInternal _MfValue_default_instance_;
class Namespace;
class NamespaceDefaultTypeInternal;
extern NamespaceDefaultTypeInternal _Namespace_default_instance_;
class NamespacePrefix;
class NamespacePrefixDefaultTypeInternal;
extern NamespacePrefixDefaultTypeInternal _NamespacePrefix_default_instance_;
class NestedAtRule;
class NestedAtRuleDefaultTypeInternal;
extern NestedAtRuleDefaultTypeInternal _NestedAtRule_default_instance_;
class Nl;
class NlDefaultTypeInternal;
extern NlDefaultTypeInternal _Nl_default_instance_;
class Nmchar;
class NmcharDefaultTypeInternal;
extern NmcharDefaultTypeInternal _Nmchar_default_instance_;
class Nmstart;
class NmstartDefaultTypeInternal;
extern NmstartDefaultTypeInternal _Nmstart_default_instance_;
class Num;
class NumDefaultTypeInternal;
extern NumDefaultTypeInternal _Num_default_instance_;
class Operator;
class OperatorDefaultTypeInternal;
extern OperatorDefaultTypeInternal _Operator_default_instance_;
class OperatorTerm;
class OperatorTermDefaultTypeInternal;
extern OperatorTermDefaultTypeInternal _OperatorTerm_default_instance_;
class Page;
class PageDefaultTypeInternal;
extern PageDefaultTypeInternal _Page_default_instance_;
class Property;
class PropertyDefaultTypeInternal;
extern PropertyDefaultTypeInternal _Property_default_instance_;
class PropertyAndValue;
class PropertyAndValueDefaultTypeInternal;
extern PropertyAndValueDefaultTypeInternal _PropertyAndValue_default_instance_;
class Pseudo;
class PseudoDefaultTypeInternal;
extern PseudoDefaultTypeInternal _Pseudo_default_instance_;
class PseudoPage;
class PseudoPageDefaultTypeInternal;
extern PseudoPageDefaultTypeInternal _PseudoPage_default_instance_;
class Ruleset;
class RulesetDefaultTypeInternal;
extern RulesetDefaultTypeInternal _Ruleset_default_instance_;
class Selector;
class SelectorDefaultTypeInternal;
extern SelectorDefaultTypeInternal _Selector_default_instance_;
class SelectorList;
class SelectorListDefaultTypeInternal;
extern SelectorListDefaultTypeInternal _SelectorList_default_instance_;
class String;
class StringDefaultTypeInternal;
extern StringDefaultTypeInternal _String_default_instance_;
class StringChar;
class StringCharDefaultTypeInternal;
extern StringCharDefaultTypeInternal _StringChar_default_instance_;
class StringCharOrQuote;
class StringCharOrQuoteDefaultTypeInternal;
extern StringCharOrQuoteDefaultTypeInternal _StringCharOrQuote_default_instance_;
class StyleSheet;
class StyleSheetDefaultTypeInternal;
extern StyleSheetDefaultTypeInternal _StyleSheet_default_instance_;
class SupportsCondition;
class SupportsConditionDefaultTypeInternal;
extern SupportsConditionDefaultTypeInternal _SupportsCondition_default_instance_;
class SupportsRule;
class SupportsRuleDefaultTypeInternal;
extern SupportsRuleDefaultTypeInternal _SupportsRule_default_instance_;
class Term;
class TermDefaultTypeInternal;
extern TermDefaultTypeInternal _Term_default_instance_;
class TermPart;
class TermPartDefaultTypeInternal;
extern TermPartDefaultTypeInternal _TermPart_default_instance_;
class Time;
class TimeDefaultTypeInternal;
extern TimeDefaultTypeInternal _Time_default_instance_;
class UnaryOperator;
class UnaryOperatorDefaultTypeInternal;
extern UnaryOperatorDefaultTypeInternal _UnaryOperator_default_instance_;
class Unicode;
class UnicodeDefaultTypeInternal;
extern UnicodeDefaultTypeInternal _Unicode_default_instance_;
class UnrepeatedW;
class UnrepeatedWDefaultTypeInternal;
extern UnrepeatedWDefaultTypeInternal _UnrepeatedW_default_instance_;
class Uri;
class UriDefaultTypeInternal;
extern UriDefaultTypeInternal _Uri_default_instance_;
class UrlChar;
class UrlCharDefaultTypeInternal;
extern UrlCharDefaultTypeInternal _UrlChar_default_instance_;
class Viewport;
class ViewportDefaultTypeInternal;
extern ViewportDefaultTypeInternal _Viewport_default_instance_;
class ViewportProperty;
class ViewportPropertyDefaultTypeInternal;
extern ViewportPropertyDefaultTypeInternal _ViewportProperty_default_instance_;
class ViewportPropertyAndValue;
class ViewportPropertyAndValueDefaultTypeInternal;
extern ViewportPropertyAndValueDefaultTypeInternal _ViewportPropertyAndValue_default_instance_;
class ViewportValue;
class ViewportValueDefaultTypeInternal;
extern ViewportValueDefaultTypeInternal _ViewportValue_default_instance_;
class W;
class WDefaultTypeInternal;
extern WDefaultTypeInternal _W_default_instance_;
}  // namespace css_proto_converter
namespace google {
namespace protobuf {
template<> ::css_proto_converter::Angle* Arena::CreateMaybeMessage<::css_proto_converter::Angle>(Arena*);
template<> ::css_proto_converter::AtRuleOrRuleset* Arena::CreateMaybeMessage<::css_proto_converter::AtRuleOrRuleset>(Arena*);
template<> ::css_proto_converter::AtRuleOrRulesets* Arena::CreateMaybeMessage<::css_proto_converter::AtRuleOrRulesets>(Arena*);
template<> ::css_proto_converter::Attr* Arena::CreateMaybeMessage<::css_proto_converter::Attr>(Arena*);
template<> ::css_proto_converter::BinarySupportsCondition* Arena::CreateMaybeMessage<::css_proto_converter::BinarySupportsCondition>(Arena*);
template<> ::css_proto_converter::CharsetDeclaration* Arena::CreateMaybeMessage<::css_proto_converter::CharsetDeclaration>(Arena*);
template<> ::css_proto_converter::Declaration* Arena::CreateMaybeMessage<::css_proto_converter::Declaration>(Arena*);
template<> ::css_proto_converter::DeclarationList* Arena::CreateMaybeMessage<::css_proto_converter::DeclarationList>(Arena*);
template<> ::css_proto_converter::Escape* Arena::CreateMaybeMessage<::css_proto_converter::Escape>(Arena*);
template<> ::css_proto_converter::Expr* Arena::CreateMaybeMessage<::css_proto_converter::Expr>(Arena*);
template<> ::css_proto_converter::FontFace* Arena::CreateMaybeMessage<::css_proto_converter::FontFace>(Arena*);
template<> ::css_proto_converter::Freq* Arena::CreateMaybeMessage<::css_proto_converter::Freq>(Arena*);
template<> ::css_proto_converter::Function* Arena::CreateMaybeMessage<::css_proto_converter::Function>(Arena*);
template<> ::css_proto_converter::FunctionToken* Arena::CreateMaybeMessage<::css_proto_converter::FunctionToken>(Arena*);
template<> ::css_proto_converter::Hexcolor* Arena::CreateMaybeMessage<::css_proto_converter::Hexcolor>(Arena*);
template<> ::css_proto_converter::HexcolorThree* Arena::CreateMaybeMessage<::css_proto_converter::HexcolorThree>(Arena*);
template<> ::css_proto_converter::Ident* Arena::CreateMaybeMessage<::css_proto_converter::Ident>(Arena*);
template<> ::css_proto_converter::Import* Arena::CreateMaybeMessage<::css_proto_converter::Import>(Arena*);
template<> ::css_proto_converter::Input* Arena::CreateMaybeMessage<::css_proto_converter::Input>(Arena*);
template<> ::css_proto_converter::Length* Arena::CreateMaybeMessage<::css_proto_converter::Length>(Arena*);
template<> ::css_proto_converter::Media* Arena::CreateMaybeMessage<::css_proto_converter::Media>(Arena*);
template<> ::css_proto_converter::MediaAnd* Arena::CreateMaybeMessage<::css_proto_converter::MediaAnd>(Arena*);
template<> ::css_proto_converter::MediaCondition* Arena::CreateMaybeMessage<::css_proto_converter::MediaCondition>(Arena*);
template<> ::css_proto_converter::MediaConditionWithoutOr* Arena::CreateMaybeMessage<::css_proto_converter::MediaConditionWithoutOr>(Arena*);
template<> ::css_proto_converter::MediaFeature* Arena::CreateMaybeMessage<::css_proto_converter::MediaFeature>(Arena*);
template<> ::css_proto_converter::MediaInParens* Arena::CreateMaybeMessage<::css_proto_converter::MediaInParens>(Arena*);
template<> ::css_proto_converter::MediaNot* Arena::CreateMaybeMessage<::css_proto_converter::MediaNot>(Arena*);
template<> ::css_proto_converter::MediaOr* Arena::CreateMaybeMessage<::css_proto_converter::MediaOr>(Arena*);
template<> ::css_proto_converter::MediaQuery* Arena::CreateMaybeMessage<::css_proto_converter::MediaQuery>(Arena*);
template<> ::css_proto_converter::MediaQueryList* Arena::CreateMaybeMessage<::css_proto_converter::MediaQueryList>(Arena*);
template<> ::css_proto_converter::MediaQueryPartTwo* Arena::CreateMaybeMessage<::css_proto_converter::MediaQueryPartTwo>(Arena*);
template<> ::css_proto_converter::MediaType* Arena::CreateMaybeMessage<::css_proto_converter::MediaType>(Arena*);
template<> ::css_proto_converter::MfBool* Arena::CreateMaybeMessage<::css_proto_converter::MfBool>(Arena*);
template<> ::css_proto_converter::MfName* Arena::CreateMaybeMessage<::css_proto_converter::MfName>(Arena*);
template<> ::css_proto_converter::MfPlain* Arena::CreateMaybeMessage<::css_proto_converter::MfPlain>(Arena*);
template<> ::css_proto_converter::MfValue* Arena::CreateMaybeMessage<::css_proto_converter::MfValue>(Arena*);
template<> ::css_proto_converter::Namespace* Arena::CreateMaybeMessage<::css_proto_converter::Namespace>(Arena*);
template<> ::css_proto_converter::NamespacePrefix* Arena::CreateMaybeMessage<::css_proto_converter::NamespacePrefix>(Arena*);
template<> ::css_proto_converter::NestedAtRule* Arena::CreateMaybeMessage<::css_proto_converter::NestedAtRule>(Arena*);
template<> ::css_proto_converter::Nl* Arena::CreateMaybeMessage<::css_proto_converter::Nl>(Arena*);
template<> ::css_proto_converter::Nmchar* Arena::CreateMaybeMessage<::css_proto_converter::Nmchar>(Arena*);
template<> ::css_proto_converter::Nmstart* Arena::CreateMaybeMessage<::css_proto_converter::Nmstart>(Arena*);
template<> ::css_proto_converter::Num* Arena::CreateMaybeMessage<::css_proto_converter::Num>(Arena*);
template<> ::css_proto_converter::Operator* Arena::CreateMaybeMessage<::css_proto_converter::Operator>(Arena*);
template<> ::css_proto_converter::OperatorTerm* Arena::CreateMaybeMessage<::css_proto_converter::OperatorTerm>(Arena*);
template<> ::css_proto_converter::Page* Arena::CreateMaybeMessage<::css_proto_converter::Page>(Arena*);
template<> ::css_proto_converter::Property* Arena::CreateMaybeMessage<::css_proto_converter::Property>(Arena*);
template<> ::css_proto_converter::PropertyAndValue* Arena::CreateMaybeMessage<::css_proto_converter::PropertyAndValue>(Arena*);
template<> ::css_proto_converter::Pseudo* Arena::CreateMaybeMessage<::css_proto_converter::Pseudo>(Arena*);
template<> ::css_proto_converter::PseudoPage* Arena::CreateMaybeMessage<::css_proto_converter::PseudoPage>(Arena*);
template<> ::css_proto_converter::Ruleset* Arena::CreateMaybeMessage<::css_proto_converter::Ruleset>(Arena*);
template<> ::css_proto_converter::Selector* Arena::CreateMaybeMessage<::css_proto_converter::Selector>(Arena*);
template<> ::css_proto_converter::SelectorList* Arena::CreateMaybeMessage<::css_proto_converter::SelectorList>(Arena*);
template<> ::css_proto_converter::String* Arena::CreateMaybeMessage<::css_proto_converter::String>(Arena*);
template<> ::css_proto_converter::StringChar* Arena::CreateMaybeMessage<::css_proto_converter::StringChar>(Arena*);
template<> ::css_proto_converter::StringCharOrQuote* Arena::CreateMaybeMessage<::css_proto_converter::StringCharOrQuote>(Arena*);
template<> ::css_proto_converter::StyleSheet* Arena::CreateMaybeMessage<::css_proto_converter::StyleSheet>(Arena*);
template<> ::css_proto_converter::SupportsCondition* Arena::CreateMaybeMessage<::css_proto_converter::SupportsCondition>(Arena*);
template<> ::css_proto_converter::SupportsRule* Arena::CreateMaybeMessage<::css_proto_converter::SupportsRule>(Arena*);
template<> ::css_proto_converter::Term* Arena::CreateMaybeMessage<::css_proto_converter::Term>(Arena*);
template<> ::css_proto_converter::TermPart* Arena::CreateMaybeMessage<::css_proto_converter::TermPart>(Arena*);
template<> ::css_proto_converter::Time* Arena::CreateMaybeMessage<::css_proto_converter::Time>(Arena*);
template<> ::css_proto_converter::UnaryOperator* Arena::CreateMaybeMessage<::css_proto_converter::UnaryOperator>(Arena*);
template<> ::css_proto_converter::Unicode* Arena::CreateMaybeMessage<::css_proto_converter::Unicode>(Arena*);
template<> ::css_proto_converter::UnrepeatedW* Arena::CreateMaybeMessage<::css_proto_converter::UnrepeatedW>(Arena*);
template<> ::css_proto_converter::Uri* Arena::CreateMaybeMessage<::css_proto_converter::Uri>(Arena*);
template<> ::css_proto_converter::UrlChar* Arena::CreateMaybeMessage<::css_proto_converter::UrlChar>(Arena*);
template<> ::css_proto_converter::Viewport* Arena::CreateMaybeMessage<::css_proto_converter::Viewport>(Arena*);
template<> ::css_proto_converter::ViewportProperty* Arena::CreateMaybeMessage<::css_proto_converter::ViewportProperty>(Arena*);
template<> ::css_proto_converter::ViewportPropertyAndValue* Arena::CreateMaybeMessage<::css_proto_converter::ViewportPropertyAndValue>(Arena*);
template<> ::css_proto_converter::ViewportValue* Arena::CreateMaybeMessage<::css_proto_converter::ViewportValue>(Arena*);
template<> ::css_proto_converter::W* Arena::CreateMaybeMessage<::css_proto_converter::W>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace css_proto_converter {

enum Escape_AsciiValue {
  Escape_AsciiValue_SPACE = 32,
  Escape_AsciiValue_EXCLAMATION_POINT = 33,
  Escape_AsciiValue_DOUBLE_QUOTE = 34,
  Escape_AsciiValue_HASH = 35,
  Escape_AsciiValue_DOLLAR = 36,
  Escape_AsciiValue_PERCENT = 37,
  Escape_AsciiValue_AMPERSAND = 38,
  Escape_AsciiValue_APOSTROPHE = 39,
  Escape_AsciiValue_OPEN_PAREN = 40,
  Escape_AsciiValue_CLOSE_PAREN = 41,
  Escape_AsciiValue_STAR = 42,
  Escape_AsciiValue_PLUS = 43,
  Escape_AsciiValue_COMMA = 44,
  Escape_AsciiValue_MINUS = 45,
  Escape_AsciiValue_DOT = 46,
  Escape_AsciiValue_SLASH = 47,
  Escape_AsciiValue_ZERO = 48,
  Escape_AsciiValue_ONE = 49,
  Escape_AsciiValue_TWO = 50,
  Escape_AsciiValue_THREE = 51,
  Escape_AsciiValue_FOUR = 52,
  Escape_AsciiValue_FIVE = 53,
  Escape_AsciiValue_SIX = 54,
  Escape_AsciiValue_SEVEN = 55,
  Escape_AsciiValue_EIGHT = 56,
  Escape_AsciiValue_NINE = 57,
  Escape_AsciiValue_COLON = 58,
  Escape_AsciiValue_SEMI_COLON = 59,
  Escape_AsciiValue_LESS_THAN = 60,
  Escape_AsciiValue_EQUAL = 61,
  Escape_AsciiValue_GREATER_THAN = 62,
  Escape_AsciiValue_QUESTION = 63,
  Escape_AsciiValue_AT_SIGN = 64,
  Escape_AsciiValue_A_UPPER = 65,
  Escape_AsciiValue_B_UPPER = 66,
  Escape_AsciiValue_C_UPPER = 67,
  Escape_AsciiValue_D_UPPER = 68,
  Escape_AsciiValue_E_UPPER = 69,
  Escape_AsciiValue_F_UPPER = 70,
  Escape_AsciiValue_G_UPPER = 71,
  Escape_AsciiValue_H_UPPER = 72,
  Escape_AsciiValue_I_UPPER = 73,
  Escape_AsciiValue_J_UPPER = 74,
  Escape_AsciiValue_K_UPPER = 75,
  Escape_AsciiValue_L_UPPER = 76,
  Escape_AsciiValue_M_UPPER = 77,
  Escape_AsciiValue_N_UPPER = 78,
  Escape_AsciiValue_O_UPPER = 79,
  Escape_AsciiValue_P_UPPER = 80,
  Escape_AsciiValue_Q_UPPER = 81,
  Escape_AsciiValue_R_UPPER = 82,
  Escape_AsciiValue_S_UPPER = 83,
  Escape_AsciiValue_T_UPPER = 84,
  Escape_AsciiValue_U_UPPER = 85,
  Escape_AsciiValue_V_UPPER = 86,
  Escape_AsciiValue_W_UPPER = 87,
  Escape_AsciiValue_X_UPPER = 88,
  Escape_AsciiValue_Y_UPPER = 89,
  Escape_AsciiValue_Z_UPPER = 90,
  Escape_AsciiValue_OPEN_BRACKET = 91,
  Escape_AsciiValue_BACKSLASH = 92,
  Escape_AsciiValue_CLOSE_BRACKET = 93,
  Escape_AsciiValue_CARET = 94,
  Escape_AsciiValue_UNDERSCORE = 95,
  Escape_AsciiValue_BACKTICK = 96,
  Escape_AsciiValue_A_LOWER = 97,
  Escape_AsciiValue_B_LOWER = 98,
  Escape_AsciiValue_C_LOWER = 99,
  Escape_AsciiValue_D_LOWER = 100,
  Escape_AsciiValue_E_LOWER = 101,
  Escape_AsciiValue_F_LOWER = 102,
  Escape_AsciiValue_G_LOWER = 103,
  Escape_AsciiValue_H_LOWER = 104,
  Escape_AsciiValue_I_LOWER = 105,
  Escape_AsciiValue_J_LOWER = 106,
  Escape_AsciiValue_K_LOWER = 107,
  Escape_AsciiValue_L_LOWER = 108,
  Escape_AsciiValue_M_LOWER = 109,
  Escape_AsciiValue_N_LOWER = 110,
  Escape_AsciiValue_O_LOWER = 111,
  Escape_AsciiValue_P_LOWER = 112,
  Escape_AsciiValue_Q_LOWER = 113,
  Escape_AsciiValue_R_LOWER = 114,
  Escape_AsciiValue_S_LOWER = 115,
  Escape_AsciiValue_T_LOWER = 116,
  Escape_AsciiValue_U_LOWER = 117,
  Escape_AsciiValue_V_LOWER = 118,
  Escape_AsciiValue_W_LOWER = 119,
  Escape_AsciiValue_X_LOWER = 120,
  Escape_AsciiValue_Y_LOWER = 121,
  Escape_AsciiValue_Z_LOWER = 122,
  Escape_AsciiValue_OPEN_CURLY_BRACE = 123,
  Escape_AsciiValue_PIPE = 124,
  Escape_AsciiValue_CLOSE_CURLY_BRACE_ = 125,
  Escape_AsciiValue_TILDE = 126
};
bool Escape_AsciiValue_IsValid(int value);
const Escape_AsciiValue Escape_AsciiValue_AsciiValue_MIN = Escape_AsciiValue_SPACE;
const Escape_AsciiValue Escape_AsciiValue_AsciiValue_MAX = Escape_AsciiValue_TILDE;
const int Escape_AsciiValue_AsciiValue_ARRAYSIZE = Escape_AsciiValue_AsciiValue_MAX + 1;

const ::google::protobuf::EnumDescriptor* Escape_AsciiValue_descriptor();
inline const ::std::string& Escape_AsciiValue_Name(Escape_AsciiValue value) {
  return ::google::protobuf::internal::NameOfEnum(
    Escape_AsciiValue_descriptor(), value);
}
inline bool Escape_AsciiValue_Parse(
    const ::std::string& name, Escape_AsciiValue* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Escape_AsciiValue>(
    Escape_AsciiValue_descriptor(), name, value);
}
enum Nmstart_AsciiValue {
  Nmstart_AsciiValue_A_UPPER = 65,
  Nmstart_AsciiValue_B_UPPER = 66,
  Nmstart_AsciiValue_C_UPPER = 67,
  Nmstart_AsciiValue_D_UPPER = 68,
  Nmstart_AsciiValue_E_UPPER = 69,
  Nmstart_AsciiValue_F_UPPER = 70,
  Nmstart_AsciiValue_G_UPPER = 71,
  Nmstart_AsciiValue_H_UPPER = 72,
  Nmstart_AsciiValue_I_UPPER = 73,
  Nmstart_AsciiValue_J_UPPER = 74,
  Nmstart_AsciiValue_K_UPPER = 75,
  Nmstart_AsciiValue_L_UPPER = 76,
  Nmstart_AsciiValue_M_UPPER = 77,
  Nmstart_AsciiValue_N_UPPER = 78,
  Nmstart_AsciiValue_O_UPPER = 79,
  Nmstart_AsciiValue_P_UPPER = 80,
  Nmstart_AsciiValue_Q_UPPER = 81,
  Nmstart_AsciiValue_R_UPPER = 82,
  Nmstart_AsciiValue_S_UPPER = 83,
  Nmstart_AsciiValue_T_UPPER = 84,
  Nmstart_AsciiValue_U_UPPER = 85,
  Nmstart_AsciiValue_V_UPPER = 86,
  Nmstart_AsciiValue_W_UPPER = 87,
  Nmstart_AsciiValue_X_UPPER = 88,
  Nmstart_AsciiValue_Y_UPPER = 89,
  Nmstart_AsciiValue_Z_UPPER = 90,
  Nmstart_AsciiValue_A_LOWER = 97,
  Nmstart_AsciiValue_B_LOWER = 98,
  Nmstart_AsciiValue_C_LOWER = 99,
  Nmstart_AsciiValue_D_LOWER = 100,
  Nmstart_AsciiValue_E_LOWER = 101,
  Nmstart_AsciiValue_F_LOWER = 102,
  Nmstart_AsciiValue_G_LOWER = 103,
  Nmstart_AsciiValue_H_LOWER = 104,
  Nmstart_AsciiValue_I_LOWER = 105,
  Nmstart_AsciiValue_J_LOWER = 106,
  Nmstart_AsciiValue_K_LOWER = 107,
  Nmstart_AsciiValue_L_LOWER = 108,
  Nmstart_AsciiValue_M_LOWER = 109,
  Nmstart_AsciiValue_N_LOWER = 110,
  Nmstart_AsciiValue_O_LOWER = 111,
  Nmstart_AsciiValue_P_LOWER = 112,
  Nmstart_AsciiValue_Q_LOWER = 113,
  Nmstart_AsciiValue_R_LOWER = 114,
  Nmstart_AsciiValue_S_LOWER = 115,
  Nmstart_AsciiValue_T_LOWER = 116,
  Nmstart_AsciiValue_U_LOWER = 117,
  Nmstart_AsciiValue_V_LOWER = 118,
  Nmstart_AsciiValue_W_LOWER = 119,
  Nmstart_AsciiValue_X_LOWER = 120,
  Nmstart_AsciiValue_Y_LOWER = 121,
  Nmstart_AsciiValue_Z_LOWER = 122
};
bool Nmstart_AsciiValue_IsValid(int value);
const Nmstart_AsciiValue Nmstart_AsciiValue_AsciiValue_MIN = Nmstart_AsciiValue_A_UPPER;
const Nmstart_AsciiValue Nmstart_AsciiValue_AsciiValue_MAX = Nmstart_AsciiValue_Z_LOWER;
const int Nmstart_AsciiValue_AsciiValue_ARRAYSIZE = Nmstart_AsciiValue_AsciiValue_MAX + 1;

const ::google::protobuf::EnumDescriptor* Nmstart_AsciiValue_descriptor();
inline const ::std::string& Nmstart_AsciiValue_Name(Nmstart_AsciiValue value) {
  return ::google::protobuf::internal::NameOfEnum(
    Nmstart_AsciiValue_descriptor(), value);
}
inline bool Nmstart_AsciiValue_Parse(
    const ::std::string& name, Nmstart_AsciiValue* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Nmstart_AsciiValue>(
    Nmstart_AsciiValue_descriptor(), name, value);
}
enum Nmchar_AsciiValue {
  Nmchar_AsciiValue_MINUS = 45,
  Nmchar_AsciiValue_ZERO = 48,
  Nmchar_AsciiValue_ONE = 49,
  Nmchar_AsciiValue_TWO = 50,
  Nmchar_AsciiValue_THREE = 51,
  Nmchar_AsciiValue_FOUR = 52,
  Nmchar_AsciiValue_FIVE = 53,
  Nmchar_AsciiValue_SIX = 54,
  Nmchar_AsciiValue_SEVEN = 55,
  Nmchar_AsciiValue_EIGHT = 56,
  Nmchar_AsciiValue_NINE = 57,
  Nmchar_AsciiValue_A_UPPER = 65,
  Nmchar_AsciiValue_B_UPPER = 66,
  Nmchar_AsciiValue_C_UPPER = 67,
  Nmchar_AsciiValue_D_UPPER = 68,
  Nmchar_AsciiValue_E_UPPER = 69,
  Nmchar_AsciiValue_F_UPPER = 70,
  Nmchar_AsciiValue_G_UPPER = 71,
  Nmchar_AsciiValue_H_UPPER = 72,
  Nmchar_AsciiValue_I_UPPER = 73,
  Nmchar_AsciiValue_J_UPPER = 74,
  Nmchar_AsciiValue_K_UPPER = 75,
  Nmchar_AsciiValue_L_UPPER = 76,
  Nmchar_AsciiValue_M_UPPER = 77,
  Nmchar_AsciiValue_N_UPPER = 78,
  Nmchar_AsciiValue_O_UPPER = 79,
  Nmchar_AsciiValue_P_UPPER = 80,
  Nmchar_AsciiValue_Q_UPPER = 81,
  Nmchar_AsciiValue_R_UPPER = 82,
  Nmchar_AsciiValue_S_UPPER = 83,
  Nmchar_AsciiValue_T_UPPER = 84,
  Nmchar_AsciiValue_U_UPPER = 85,
  Nmchar_AsciiValue_V_UPPER = 86,
  Nmchar_AsciiValue_W_UPPER = 87,
  Nmchar_AsciiValue_X_UPPER = 88,
  Nmchar_AsciiValue_Y_UPPER = 89,
  Nmchar_AsciiValue_Z_UPPER = 90,
  Nmchar_AsciiValue_A_LOWER = 97,
  Nmchar_AsciiValue_B_LOWER = 98,
  Nmchar_AsciiValue_C_LOWER = 99,
  Nmchar_AsciiValue_D_LOWER = 100,
  Nmchar_AsciiValue_E_LOWER = 101,
  Nmchar_AsciiValue_F_LOWER = 102,
  Nmchar_AsciiValue_G_LOWER = 103,
  Nmchar_AsciiValue_H_LOWER = 104,
  Nmchar_AsciiValue_I_LOWER = 105,
  Nmchar_AsciiValue_J_LOWER = 106,
  Nmchar_AsciiValue_K_LOWER = 107,
  Nmchar_AsciiValue_L_LOWER = 108,
  Nmchar_AsciiValue_M_LOWER = 109,
  Nmchar_AsciiValue_N_LOWER = 110,
  Nmchar_AsciiValue_O_LOWER = 111,
  Nmchar_AsciiValue_P_LOWER = 112,
  Nmchar_AsciiValue_Q_LOWER = 113,
  Nmchar_AsciiValue_R_LOWER = 114,
  Nmchar_AsciiValue_S_LOWER = 115,
  Nmchar_AsciiValue_T_LOWER = 116,
  Nmchar_AsciiValue_U_LOWER = 117,
  Nmchar_AsciiValue_V_LOWER = 118,
  Nmchar_AsciiValue_W_LOWER = 119,
  Nmchar_AsciiValue_X_LOWER = 120,
  Nmchar_AsciiValue_Y_LOWER = 121,
  Nmchar_AsciiValue_Z_LOWER = 122
};
bool Nmchar_AsciiValue_IsValid(int value);
const Nmchar_AsciiValue Nmchar_AsciiValue_AsciiValue_MIN = Nmchar_AsciiValue_MINUS;
const Nmchar_AsciiValue Nmchar_AsciiValue_AsciiValue_MAX = Nmchar_AsciiValue_Z_LOWER;
const int Nmchar_AsciiValue_AsciiValue_ARRAYSIZE = Nmchar_AsciiValue_AsciiValue_MAX + 1;

const ::google::protobuf::EnumDescriptor* Nmchar_AsciiValue_descriptor();
inline const ::std::string& Nmchar_AsciiValue_Name(Nmchar_AsciiValue value) {
  return ::google::protobuf::internal::NameOfEnum(
    Nmchar_AsciiValue_descriptor(), value);
}
inline bool Nmchar_AsciiValue_Parse(
    const ::std::string& name, Nmchar_AsciiValue* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Nmchar_AsciiValue>(
    Nmchar_AsciiValue_descriptor(), name, value);
}
enum StringCharOrQuote_QuoteChar {
  StringCharOrQuote_QuoteChar_UNSET = 0,
  StringCharOrQuote_QuoteChar_IS_SET = 1
};
bool StringCharOrQuote_QuoteChar_IsValid(int value);
const StringCharOrQuote_QuoteChar StringCharOrQuote_QuoteChar_QuoteChar_MIN = StringCharOrQuote_QuoteChar_UNSET;
const StringCharOrQuote_QuoteChar StringCharOrQuote_QuoteChar_QuoteChar_MAX = StringCharOrQuote_QuoteChar_IS_SET;
const int StringCharOrQuote_QuoteChar_QuoteChar_ARRAYSIZE = StringCharOrQuote_QuoteChar_QuoteChar_MAX + 1;

const ::google::protobuf::EnumDescriptor* StringCharOrQuote_QuoteChar_descriptor();
inline const ::std::string& StringCharOrQuote_QuoteChar_Name(StringCharOrQuote_QuoteChar value) {
  return ::google::protobuf::internal::NameOfEnum(
    StringCharOrQuote_QuoteChar_descriptor(), value);
}
inline bool StringCharOrQuote_QuoteChar_Parse(
    const ::std::string& name, StringCharOrQuote_QuoteChar* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StringCharOrQuote_QuoteChar>(
    StringCharOrQuote_QuoteChar_descriptor(), name, value);
}
enum StringChar_Space {
  StringChar_Space_UNSET = 0,
  StringChar_Space_IS_SET = 1
};
bool StringChar_Space_IsValid(int value);
const StringChar_Space StringChar_Space_Space_MIN = StringChar_Space_UNSET;
const StringChar_Space StringChar_Space_Space_MAX = StringChar_Space_IS_SET;
const int StringChar_Space_Space_ARRAYSIZE = StringChar_Space_Space_MAX + 1;

const ::google::protobuf::EnumDescriptor* StringChar_Space_descriptor();
inline const ::std::string& StringChar_Space_Name(StringChar_Space value) {
  return ::google::protobuf::internal::NameOfEnum(
    StringChar_Space_descriptor(), value);
}
inline bool StringChar_Space_Parse(
    const ::std::string& name, StringChar_Space* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StringChar_Space>(
    StringChar_Space_descriptor(), name, value);
}
enum UrlChar_AsciiValue {
  UrlChar_AsciiValue_NUL = 0,
  UrlChar_AsciiValue_HT = 9,
  UrlChar_AsciiValue_EXCLAMATION_POINT = 33,
  UrlChar_AsciiValue_HASH = 35,
  UrlChar_AsciiValue_DOLLAR = 36,
  UrlChar_AsciiValue_PERCENT = 37,
  UrlChar_AsciiValue_AMPERSAND = 38,
  UrlChar_AsciiValue_APOSTROPHE = 39,
  UrlChar_AsciiValue_OPEN_PAREN = 40,
  UrlChar_AsciiValue_CLOSE_PAREN = 41,
  UrlChar_AsciiValue_STAR = 42,
  UrlChar_AsciiValue_PLUS = 43,
  UrlChar_AsciiValue_COMMA = 44,
  UrlChar_AsciiValue_MINUS = 45,
  UrlChar_AsciiValue_DOT = 46,
  UrlChar_AsciiValue_SLASH = 47,
  UrlChar_AsciiValue_ZERO = 48,
  UrlChar_AsciiValue_ONE = 49,
  UrlChar_AsciiValue_TWO = 50,
  UrlChar_AsciiValue_THREE = 51,
  UrlChar_AsciiValue_FOUR = 52,
  UrlChar_AsciiValue_FIVE = 53,
  UrlChar_AsciiValue_SIX = 54,
  UrlChar_AsciiValue_SEVEN = 55,
  UrlChar_AsciiValue_EIGHT = 56,
  UrlChar_AsciiValue_NINE = 57,
  UrlChar_AsciiValue_COLON = 58,
  UrlChar_AsciiValue_SEMI_COLON = 59,
  UrlChar_AsciiValue_LESS_THAN = 60,
  UrlChar_AsciiValue_EQUAL = 61,
  UrlChar_AsciiValue_GREATER_THAN = 62,
  UrlChar_AsciiValue_QUESTION = 63,
  UrlChar_AsciiValue_AT_SIGN = 64,
  UrlChar_AsciiValue_A_UPPER = 65,
  UrlChar_AsciiValue_B_UPPER = 66,
  UrlChar_AsciiValue_C_UPPER = 67,
  UrlChar_AsciiValue_D_UPPER = 68,
  UrlChar_AsciiValue_E_UPPER = 69,
  UrlChar_AsciiValue_F_UPPER = 70,
  UrlChar_AsciiValue_G_UPPER = 71,
  UrlChar_AsciiValue_H_UPPER = 72,
  UrlChar_AsciiValue_I_UPPER = 73,
  UrlChar_AsciiValue_J_UPPER = 74,
  UrlChar_AsciiValue_K_UPPER = 75,
  UrlChar_AsciiValue_L_UPPER = 76,
  UrlChar_AsciiValue_M_UPPER = 77,
  UrlChar_AsciiValue_N_UPPER = 78,
  UrlChar_AsciiValue_O_UPPER = 79,
  UrlChar_AsciiValue_P_UPPER = 80,
  UrlChar_AsciiValue_Q_UPPER = 81,
  UrlChar_AsciiValue_R_UPPER = 82,
  UrlChar_AsciiValue_S_UPPER = 83,
  UrlChar_AsciiValue_T_UPPER = 84,
  UrlChar_AsciiValue_U_UPPER = 85,
  UrlChar_AsciiValue_V_UPPER = 86,
  UrlChar_AsciiValue_W_UPPER = 87,
  UrlChar_AsciiValue_X_UPPER = 88,
  UrlChar_AsciiValue_Y_UPPER = 89,
  UrlChar_AsciiValue_Z_UPPER = 90,
  UrlChar_AsciiValue_OPEN_BRACKET = 91,
  UrlChar_AsciiValue_BACKSLASH = 92,
  UrlChar_AsciiValue_CLOSE_BRACKET = 93,
  UrlChar_AsciiValue_CARET = 94,
  UrlChar_AsciiValue_UNDERSCORE = 95,
  UrlChar_AsciiValue_BACKTICK = 96,
  UrlChar_AsciiValue_A_LOWER = 97,
  UrlChar_AsciiValue_B_LOWER = 98,
  UrlChar_AsciiValue_C_LOWER = 99,
  UrlChar_AsciiValue_D_LOWER = 100,
  UrlChar_AsciiValue_E_LOWER = 101,
  UrlChar_AsciiValue_F_LOWER = 102,
  UrlChar_AsciiValue_G_LOWER = 103,
  UrlChar_AsciiValue_H_LOWER = 104,
  UrlChar_AsciiValue_I_LOWER = 105,
  UrlChar_AsciiValue_J_LOWER = 106,
  UrlChar_AsciiValue_K_LOWER = 107,
  UrlChar_AsciiValue_L_LOWER = 108,
  UrlChar_AsciiValue_M_LOWER = 109,
  UrlChar_AsciiValue_N_LOWER = 110,
  UrlChar_AsciiValue_O_LOWER = 111,
  UrlChar_AsciiValue_P_LOWER = 112,
  UrlChar_AsciiValue_Q_LOWER = 113,
  UrlChar_AsciiValue_R_LOWER = 114,
  UrlChar_AsciiValue_S_LOWER = 115,
  UrlChar_AsciiValue_T_LOWER = 116,
  UrlChar_AsciiValue_U_LOWER = 117,
  UrlChar_AsciiValue_V_LOWER = 118,
  UrlChar_AsciiValue_W_LOWER = 119,
  UrlChar_AsciiValue_X_LOWER = 120,
  UrlChar_AsciiValue_Y_LOWER = 121,
  UrlChar_AsciiValue_Z_LOWER = 122,
  UrlChar_AsciiValue_OPEN_CURLY_BRACE = 123,
  UrlChar_AsciiValue_PIPE = 124,
  UrlChar_AsciiValue_CLOSE_CURLY_BRACE_ = 125,
  UrlChar_AsciiValue_TILDE = 126
};
bool UrlChar_AsciiValue_IsValid(int value);
const UrlChar_AsciiValue UrlChar_AsciiValue_AsciiValue_MIN = UrlChar_AsciiValue_NUL;
const UrlChar_AsciiValue UrlChar_AsciiValue_AsciiValue_MAX = UrlChar_AsciiValue_TILDE;
const int UrlChar_AsciiValue_AsciiValue_ARRAYSIZE = UrlChar_AsciiValue_AsciiValue_MAX + 1;

const ::google::protobuf::EnumDescriptor* UrlChar_AsciiValue_descriptor();
inline const ::std::string& UrlChar_AsciiValue_Name(UrlChar_AsciiValue value) {
  return ::google::protobuf::internal::NameOfEnum(
    UrlChar_AsciiValue_descriptor(), value);
}
inline bool UrlChar_AsciiValue_Parse(
    const ::std::string& name, UrlChar_AsciiValue* value) {
  return ::google::protobuf::internal::ParseNamedEnum<UrlChar_AsciiValue>(
    UrlChar_AsciiValue_descriptor(), name, value);
}
enum UnrepeatedW_AsciiValue {
  UnrepeatedW_AsciiValue_HT = 9,
  UnrepeatedW_AsciiValue_LF = 10,
  UnrepeatedW_AsciiValue_FF = 12,
  UnrepeatedW_AsciiValue_CR = 13,
  UnrepeatedW_AsciiValue_SPACE = 32
};
bool UnrepeatedW_AsciiValue_IsValid(int value);
const UnrepeatedW_AsciiValue UnrepeatedW_AsciiValue_AsciiValue_MIN = UnrepeatedW_AsciiValue_HT;
const UnrepeatedW_AsciiValue UnrepeatedW_AsciiValue_AsciiValue_MAX = UnrepeatedW_AsciiValue_SPACE;
const int UnrepeatedW_AsciiValue_AsciiValue_ARRAYSIZE = UnrepeatedW_AsciiValue_AsciiValue_MAX + 1;

const ::google::protobuf::EnumDescriptor* UnrepeatedW_AsciiValue_descriptor();
inline const ::std::string& UnrepeatedW_AsciiValue_Name(UnrepeatedW_AsciiValue value) {
  return ::google::protobuf::internal::NameOfEnum(
    UnrepeatedW_AsciiValue_descriptor(), value);
}
inline bool UnrepeatedW_AsciiValue_Parse(
    const ::std::string& name, UnrepeatedW_AsciiValue* value) {
  return ::google::protobuf::internal::ParseNamedEnum<UnrepeatedW_AsciiValue>(
    UnrepeatedW_AsciiValue_descriptor(), name, value);
}
enum Nl_NewlineKind {
  Nl_NewlineKind_LF = 10,
  Nl_NewlineKind_CR_LF = 1,
  Nl_NewlineKind_CR = 13,
  Nl_NewlineKind_FF = 12
};
bool Nl_NewlineKind_IsValid(int value);
const Nl_NewlineKind Nl_NewlineKind_NewlineKind_MIN = Nl_NewlineKind_CR_LF;
const Nl_NewlineKind Nl_NewlineKind_NewlineKind_MAX = Nl_NewlineKind_CR;
const int Nl_NewlineKind_NewlineKind_ARRAYSIZE = Nl_NewlineKind_NewlineKind_MAX + 1;

const ::google::protobuf::EnumDescriptor* Nl_NewlineKind_descriptor();
inline const ::std::string& Nl_NewlineKind_Name(Nl_NewlineKind value) {
  return ::google::protobuf::internal::NameOfEnum(
    Nl_NewlineKind_descriptor(), value);
}
inline bool Nl_NewlineKind_Parse(
    const ::std::string& name, Nl_NewlineKind* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Nl_NewlineKind>(
    Nl_NewlineKind_descriptor(), name, value);
}
enum Length_Unit {
  Length_Unit_PX = 1,
  Length_Unit_CM = 2,
  Length_Unit_MM = 3,
  Length_Unit_IN = 4,
  Length_Unit_PT = 5,
  Length_Unit_PC = 6
};
bool Length_Unit_IsValid(int value);
const Length_Unit Length_Unit_Unit_MIN = Length_Unit_PX;
const Length_Unit Length_Unit_Unit_MAX = Length_Unit_PC;
const int Length_Unit_Unit_ARRAYSIZE = Length_Unit_Unit_MAX + 1;

const ::google::protobuf::EnumDescriptor* Length_Unit_descriptor();
inline const ::std::string& Length_Unit_Name(Length_Unit value) {
  return ::google::protobuf::internal::NameOfEnum(
    Length_Unit_descriptor(), value);
}
inline bool Length_Unit_Parse(
    const ::std::string& name, Length_Unit* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Length_Unit>(
    Length_Unit_descriptor(), name, value);
}
enum Angle_Unit {
  Angle_Unit_DEG = 1,
  Angle_Unit_RAD = 2,
  Angle_Unit_GRAD = 3
};
bool Angle_Unit_IsValid(int value);
const Angle_Unit Angle_Unit_Unit_MIN = Angle_Unit_DEG;
const Angle_Unit Angle_Unit_Unit_MAX = Angle_Unit_GRAD;
const int Angle_Unit_Unit_ARRAYSIZE = Angle_Unit_Unit_MAX + 1;

const ::google::protobuf::EnumDescriptor* Angle_Unit_descriptor();
inline const ::std::string& Angle_Unit_Name(Angle_Unit value) {
  return ::google::protobuf::internal::NameOfEnum(
    Angle_Unit_descriptor(), value);
}
inline bool Angle_Unit_Parse(
    const ::std::string& name, Angle_Unit* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Angle_Unit>(
    Angle_Unit_descriptor(), name, value);
}
enum Time_Unit {
  Time_Unit_MS = 1,
  Time_Unit_S = 2
};
bool Time_Unit_IsValid(int value);
const Time_Unit Time_Unit_Unit_MIN = Time_Unit_MS;
const Time_Unit Time_Unit_Unit_MAX = Time_Unit_S;
const int Time_Unit_Unit_ARRAYSIZE = Time_Unit_Unit_MAX + 1;

const ::google::protobuf::EnumDescriptor* Time_Unit_descriptor();
inline const ::std::string& Time_Unit_Name(Time_Unit value) {
  return ::google::protobuf::internal::NameOfEnum(
    Time_Unit_descriptor(), value);
}
inline bool Time_Unit_Parse(
    const ::std::string& name, Time_Unit* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Time_Unit>(
    Time_Unit_descriptor(), name, value);
}
enum Freq_Unit {
  Freq_Unit__HZ = 1,
  Freq_Unit_KHZ = 2
};
bool Freq_Unit_IsValid(int value);
const Freq_Unit Freq_Unit_Unit_MIN = Freq_Unit__HZ;
const Freq_Unit Freq_Unit_Unit_MAX = Freq_Unit_KHZ;
const int Freq_Unit_Unit_ARRAYSIZE = Freq_Unit_Unit_MAX + 1;

const ::google::protobuf::EnumDescriptor* Freq_Unit_descriptor();
inline const ::std::string& Freq_Unit_Name(Freq_Unit value) {
  return ::google::protobuf::internal::NameOfEnum(
    Freq_Unit_descriptor(), value);
}
inline bool Freq_Unit_Parse(
    const ::std::string& name, Freq_Unit* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Freq_Unit>(
    Freq_Unit_descriptor(), name, value);
}
enum CharsetDeclaration_EncodingId {
  CharsetDeclaration_EncodingId_UTF_8 = 1,
  CharsetDeclaration_EncodingId_UTF_16 = 2,
  CharsetDeclaration_EncodingId_UTF_32 = 3
};
bool CharsetDeclaration_EncodingId_IsValid(int value);
const CharsetDeclaration_EncodingId CharsetDeclaration_EncodingId_EncodingId_MIN = CharsetDeclaration_EncodingId_UTF_8;
const CharsetDeclaration_EncodingId CharsetDeclaration_EncodingId_EncodingId_MAX = CharsetDeclaration_EncodingId_UTF_32;
const int CharsetDeclaration_EncodingId_EncodingId_ARRAYSIZE = CharsetDeclaration_EncodingId_EncodingId_MAX + 1;

const ::google::protobuf::EnumDescriptor* CharsetDeclaration_EncodingId_descriptor();
inline const ::std::string& CharsetDeclaration_EncodingId_Name(CharsetDeclaration_EncodingId value) {
  return ::google::protobuf::internal::NameOfEnum(
    CharsetDeclaration_EncodingId_descriptor(), value);
}
inline bool CharsetDeclaration_EncodingId_Parse(
    const ::std::string& name, CharsetDeclaration_EncodingId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CharsetDeclaration_EncodingId>(
    CharsetDeclaration_EncodingId_descriptor(), name, value);
}
enum ViewportProperty_PropertyId {
  ViewportProperty_PropertyId_MIN_WIDTH = 1,
  ViewportProperty_PropertyId_MAX_WIDTH = 2,
  ViewportProperty_PropertyId_WIDTH = 3,
  ViewportProperty_PropertyId_MIN_HEIGHT = 4,
  ViewportProperty_PropertyId_MAX_HEIGHT = 5,
  ViewportProperty_PropertyId_HEIGHT = 6,
  ViewportProperty_PropertyId_ZOOM = 7,
  ViewportProperty_PropertyId_MIN_ZOOM = 8,
  ViewportProperty_PropertyId_USER_ZOOM = 9,
  ViewportProperty_PropertyId_MAX_ZOOM = 10,
  ViewportProperty_PropertyId_ORIENTATION = 11
};
bool ViewportProperty_PropertyId_IsValid(int value);
const ViewportProperty_PropertyId ViewportProperty_PropertyId_PropertyId_MIN = ViewportProperty_PropertyId_MIN_WIDTH;
const ViewportProperty_PropertyId ViewportProperty_PropertyId_PropertyId_MAX = ViewportProperty_PropertyId_ORIENTATION;
const int ViewportProperty_PropertyId_PropertyId_ARRAYSIZE = ViewportProperty_PropertyId_PropertyId_MAX + 1;

const ::google::protobuf::EnumDescriptor* ViewportProperty_PropertyId_descriptor();
inline const ::std::string& ViewportProperty_PropertyId_Name(ViewportProperty_PropertyId value) {
  return ::google::protobuf::internal::NameOfEnum(
    ViewportProperty_PropertyId_descriptor(), value);
}
inline bool ViewportProperty_PropertyId_Parse(
    const ::std::string& name, ViewportProperty_PropertyId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ViewportProperty_PropertyId>(
    ViewportProperty_PropertyId_descriptor(), name, value);
}
enum ViewportValue_ValueId {
  ViewportValue_ValueId_LANDSCAPE = 1,
  ViewportValue_ValueId_PORTRAIT = 2,
  ViewportValue_ValueId_AUTO = 3,
  ViewportValue_ValueId_ZOOM = 4,
  ViewportValue_ValueId_FIXED = 5,
  ViewportValue_ValueId_NONE = 6
};
bool ViewportValue_ValueId_IsValid(int value);
const ViewportValue_ValueId ViewportValue_ValueId_ValueId_MIN = ViewportValue_ValueId_LANDSCAPE;
const ViewportValue_ValueId ViewportValue_ValueId_ValueId_MAX = ViewportValue_ValueId_NONE;
const int ViewportValue_ValueId_ValueId_ARRAYSIZE = ViewportValue_ValueId_ValueId_MAX + 1;

const ::google::protobuf::EnumDescriptor* ViewportValue_ValueId_descriptor();
inline const ::std::string& ViewportValue_ValueId_Name(ViewportValue_ValueId value) {
  return ::google::protobuf::internal::NameOfEnum(
    ViewportValue_ValueId_descriptor(), value);
}
inline bool ViewportValue_ValueId_Parse(
    const ::std::string& name, ViewportValue_ValueId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ViewportValue_ValueId>(
    ViewportValue_ValueId_descriptor(), name, value);
}
enum Import_SrcId {
  Import_SrcId_RELATIVE_STRING = 1,
  Import_SrcId_FULL_URL = 2
};
bool Import_SrcId_IsValid(int value);
const Import_SrcId Import_SrcId_SrcId_MIN = Import_SrcId_RELATIVE_STRING;
const Import_SrcId Import_SrcId_SrcId_MAX = Import_SrcId_FULL_URL;
const int Import_SrcId_SrcId_ARRAYSIZE = Import_SrcId_SrcId_MAX + 1;

const ::google::protobuf::EnumDescriptor* Import_SrcId_descriptor();
inline const ::std::string& Import_SrcId_Name(Import_SrcId value) {
  return ::google::protobuf::internal::NameOfEnum(
    Import_SrcId_descriptor(), value);
}
inline bool Import_SrcId_Parse(
    const ::std::string& name, Import_SrcId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Import_SrcId>(
    Import_SrcId_descriptor(), name, value);
}
enum MediaQueryPartTwo_NotOrOnly {
  MediaQueryPartTwo_NotOrOnly_NOT = 1,
  MediaQueryPartTwo_NotOrOnly_ONLY = 2
};
bool MediaQueryPartTwo_NotOrOnly_IsValid(int value);
const MediaQueryPartTwo_NotOrOnly MediaQueryPartTwo_NotOrOnly_NotOrOnly_MIN = MediaQueryPartTwo_NotOrOnly_NOT;
const MediaQueryPartTwo_NotOrOnly MediaQueryPartTwo_NotOrOnly_NotOrOnly_MAX = MediaQueryPartTwo_NotOrOnly_ONLY;
const int MediaQueryPartTwo_NotOrOnly_NotOrOnly_ARRAYSIZE = MediaQueryPartTwo_NotOrOnly_NotOrOnly_MAX + 1;

const ::google::protobuf::EnumDescriptor* MediaQueryPartTwo_NotOrOnly_descriptor();
inline const ::std::string& MediaQueryPartTwo_NotOrOnly_Name(MediaQueryPartTwo_NotOrOnly value) {
  return ::google::protobuf::internal::NameOfEnum(
    MediaQueryPartTwo_NotOrOnly_descriptor(), value);
}
inline bool MediaQueryPartTwo_NotOrOnly_Parse(
    const ::std::string& name, MediaQueryPartTwo_NotOrOnly* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MediaQueryPartTwo_NotOrOnly>(
    MediaQueryPartTwo_NotOrOnly_descriptor(), name, value);
}
enum MediaType_ValueId {
  MediaType_ValueId_ALL = 1,
  MediaType_ValueId_BRAILLE = 2,
  MediaType_ValueId_EMBOSSED = 3,
  MediaType_ValueId_HANDHELD = 4,
  MediaType_ValueId_PRINT = 5,
  MediaType_ValueId_PROJECTION = 6,
  MediaType_ValueId_SCREEN = 7,
  MediaType_ValueId_SPEECH = 8,
  MediaType_ValueId_TTY = 9,
  MediaType_ValueId_TV = 10,
  MediaType_ValueId_INVALID_MEDIA_TYPE = 11
};
bool MediaType_ValueId_IsValid(int value);
const MediaType_ValueId MediaType_ValueId_ValueId_MIN = MediaType_ValueId_ALL;
const MediaType_ValueId MediaType_ValueId_ValueId_MAX = MediaType_ValueId_INVALID_MEDIA_TYPE;
const int MediaType_ValueId_ValueId_ARRAYSIZE = MediaType_ValueId_ValueId_MAX + 1;

const ::google::protobuf::EnumDescriptor* MediaType_ValueId_descriptor();
inline const ::std::string& MediaType_ValueId_Name(MediaType_ValueId value) {
  return ::google::protobuf::internal::NameOfEnum(
    MediaType_ValueId_descriptor(), value);
}
inline bool MediaType_ValueId_Parse(
    const ::std::string& name, MediaType_ValueId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MediaType_ValueId>(
    MediaType_ValueId_descriptor(), name, value);
}
enum MfName_ValueId {
  MfName_ValueId_ANY_HOVER = 1,
  MfName_ValueId_ANY_POINTER = 2,
  MfName_ValueId_COLOR = 3,
  MfName_ValueId_COLOR_INDEX = 4,
  MfName_ValueId_COLOR_GAMUT = 5,
  MfName_ValueId_GRID = 6,
  MfName_ValueId_MONOCHROME = 7,
  MfName_ValueId_HEIGHT = 8,
  MfName_ValueId_HOVER = 9,
  MfName_ValueId_WIDTH = 10,
  MfName_ValueId_ORIENTATION = 11,
  MfName_ValueId_ASPECT_RATIO = 12,
  MfName_ValueId_DEVICE_ASPECT_RATIO = 13,
  MfName_ValueId__WEBKIT_DEVICE_PIXEL_RATIO = 14,
  MfName_ValueId_DEVICE_HEIGHT = 15,
  MfName_ValueId_DEVICE_WIDTH = 16,
  MfName_ValueId_DISPLAY_MODE = 17,
  MfName_ValueId_MAX_COLOR = 18,
  MfName_ValueId_MAX_COLOR_INDEX = 19,
  MfName_ValueId_MAX_ASPECT_RATIO = 20,
  MfName_ValueId_MAX_DEVICE_ASPECT_RATIO = 21,
  MfName_ValueId__WEBKIT_MAX_DEVICE_PIXEL_RATIO = 22,
  MfName_ValueId_MAX_DEVICE_HEIGHT = 23,
  MfName_ValueId_MAX_DEVICE_WIDTH = 24,
  MfName_ValueId_MAX_HEIGHT = 25,
  MfName_ValueId_MAX_MONOCHROME = 26,
  MfName_ValueId_MAX_WIDTH = 27,
  MfName_ValueId_MAX_RESOLUTION = 28,
  MfName_ValueId_MIN_COLOR = 29,
  MfName_ValueId_MIN_COLOR_INDEX = 30,
  MfName_ValueId_MIN_ASPECT_RATIO = 31,
  MfName_ValueId_MIN_DEVICE_ASPECT_RATIO = 32,
  MfName_ValueId__WEBKIT_MIN_DEVICE_PIXEL_RATIO = 33,
  MfName_ValueId_MIN_DEVICE_HEIGHT = 34,
  MfName_ValueId_MIN_DEVICE_WIDTH = 35,
  MfName_ValueId_MIN_HEIGHT = 36,
  MfName_ValueId_MIN_MONOCHROME = 37,
  MfName_ValueId_MIN_WIDTH = 38,
  MfName_ValueId_MIN_RESOLUTION = 39,
  MfName_ValueId_POINTER = 40,
  MfName_ValueId_RESOLUTION = 41,
  MfName_ValueId__WEBKIT_TRANSFORM_3D = 42,
  MfName_ValueId_SCAN = 43,
  MfName_ValueId_SHAPE = 44,
  MfName_ValueId_IMMERSIVE = 45,
  MfName_ValueId_INVALID_NAME = 46
};
bool MfName_ValueId_IsValid(int value);
const MfName_ValueId MfName_ValueId_ValueId_MIN = MfName_ValueId_ANY_HOVER;
const MfName_ValueId MfName_ValueId_ValueId_MAX = MfName_ValueId_INVALID_NAME;
const int MfName_ValueId_ValueId_ARRAYSIZE = MfName_ValueId_ValueId_MAX + 1;

const ::google::protobuf::EnumDescriptor* MfName_ValueId_descriptor();
inline const ::std::string& MfName_ValueId_Name(MfName_ValueId value) {
  return ::google::protobuf::internal::NameOfEnum(
    MfName_ValueId_descriptor(), value);
}
inline bool MfName_ValueId_Parse(
    const ::std::string& name, MfName_ValueId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MfName_ValueId>(
    MfName_ValueId_descriptor(), name, value);
}
enum Operator_AsciiValue {
  Operator_AsciiValue_COMMA = 44,
  Operator_AsciiValue_SLASH = 47
};
bool Operator_AsciiValue_IsValid(int value);
const Operator_AsciiValue Operator_AsciiValue_AsciiValue_MIN = Operator_AsciiValue_COMMA;
const Operator_AsciiValue Operator_AsciiValue_AsciiValue_MAX = Operator_AsciiValue_SLASH;
const int Operator_AsciiValue_AsciiValue_ARRAYSIZE = Operator_AsciiValue_AsciiValue_MAX + 1;

const ::google::protobuf::EnumDescriptor* Operator_AsciiValue_descriptor();
inline const ::std::string& Operator_AsciiValue_Name(Operator_AsciiValue value) {
  return ::google::protobuf::internal::NameOfEnum(
    Operator_AsciiValue_descriptor(), value);
}
inline bool Operator_AsciiValue_Parse(
    const ::std::string& name, Operator_AsciiValue* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Operator_AsciiValue>(
    Operator_AsciiValue_descriptor(), name, value);
}
enum UnaryOperator_AsciiValue {
  UnaryOperator_AsciiValue_PLUS = 43,
  UnaryOperator_AsciiValue_MINUS = 45
};
bool UnaryOperator_AsciiValue_IsValid(int value);
const UnaryOperator_AsciiValue UnaryOperator_AsciiValue_AsciiValue_MIN = UnaryOperator_AsciiValue_PLUS;
const UnaryOperator_AsciiValue UnaryOperator_AsciiValue_AsciiValue_MAX = UnaryOperator_AsciiValue_MINUS;
const int UnaryOperator_AsciiValue_AsciiValue_ARRAYSIZE = UnaryOperator_AsciiValue_AsciiValue_MAX + 1;

const ::google::protobuf::EnumDescriptor* UnaryOperator_AsciiValue_descriptor();
inline const ::std::string& UnaryOperator_AsciiValue_Name(UnaryOperator_AsciiValue value) {
  return ::google::protobuf::internal::NameOfEnum(
    UnaryOperator_AsciiValue_descriptor(), value);
}
inline bool UnaryOperator_AsciiValue_Parse(
    const ::std::string& name, UnaryOperator_AsciiValue* value) {
  return ::google::protobuf::internal::ParseNamedEnum<UnaryOperator_AsciiValue>(
    UnaryOperator_AsciiValue_descriptor(), name, value);
}
enum Property_NameId {
  Property_NameId_ALL = 1,
  Property_NameId__WEBKIT_ANIMATION_ITERATION_COUNT = 2,
  Property_NameId_FONT_FEATURE_SETTINGS = 3,
  Property_NameId__WEBKIT_TEXT_EMPHASIS_POSITION = 4,
  Property_NameId__WEBKIT_TEXT_EMPHASIS_STYLE = 5,
  Property_NameId_GRID_TEMPLATE_ROWS = 6,
  Property_NameId_TEXT_UNDERLINE_POSITION = 7,
  Property_NameId__WEBKIT_FLEX_GROW = 8,
  Property_NameId_SCROLL_MARGIN_RIGHT = 9,
  Property_NameId__WEBKIT_COLUMN_RULE = 10,
  Property_NameId__WEBKIT_ORDER = 11,
  Property_NameId_GRID_ROW_GAP = 12,
  Property_NameId_BACKDROP_FILTER = 13,
  Property_NameId_FONT_VARIANT_EAST_ASIAN = 14,
  Property_NameId_BUFFERED_RENDERING = 15,
  Property_NameId__WEBKIT_APPEARANCE = 16,
  Property_NameId_OUTLINE_WIDTH = 17,
  Property_NameId_ALIGNMENT_BASELINE = 18,
  Property_NameId__WEBKIT_FLEX_FLOW = 19,
  Property_NameId_COLUMN_RULE = 20,
  Property_NameId_GRID_COLUMN_GAP = 21,
  Property_NameId__WEBKIT_BORDER_AFTER = 22,
  Property_NameId__WEBKIT_COLUMN_BREAK_INSIDE = 23,
  Property_NameId__WEBKIT_SHAPE_OUTSIDE = 24,
  Property_NameId__WEBKIT_PRINT_COLOR_ADJUST = 25,
  Property_NameId_LIST_STYLE_TYPE = 26,
  Property_NameId_PAGE_BREAK_BEFORE = 27,
  Property_NameId_FLOOD_COLOR = 28,
  Property_NameId_TEXT_ANCHOR = 29,
  Property_NameId__WEBKIT_PADDING_START = 30,
  Property_NameId__WEBKIT_USER_SELECT = 31,
  Property_NameId__WEBKIT_COLUMN_RULE_COLOR = 32,
  Property_NameId_PADDING_LEFT = 33,
  Property_NameId__WEBKIT_BACKFACE_VISIBILITY = 34,
  Property_NameId__WEBKIT_MARGIN_BEFORE = 35,
  Property_NameId_BREAK_INSIDE = 36,
  Property_NameId_COLUMN_COUNT = 37,
  Property_NameId__WEBKIT_LOGICAL_HEIGHT = 38,
  Property_NameId_PERSPECTIVE = 39,
  Property_NameId_MAX_BLOCK_SIZE = 40,
  Property_NameId__WEBKIT_ANIMATION_PLAY_STATE = 41,
  Property_NameId_BORDER_IMAGE_REPEAT = 42,
  Property_NameId__WEBKIT_FONT_SIZE_DELTA = 43,
  Property_NameId_SCROLL_PADDING_BOTTOM = 44,
  Property_NameId_BORDER_RIGHT_STYLE = 45,
  Property_NameId_BORDER_LEFT_STYLE = 46,
  Property_NameId_SCROLL_MARGIN_BLOCK = 47,
  Property_NameId_FLEX_FLOW = 48,
  Property_NameId_OUTLINE_COLOR = 49,
  Property_NameId_FLEX_GROW = 50,
  Property_NameId_MAX_WIDTH = 51,
  Property_NameId_GRID_COLUMN = 52,
  Property_NameId_IMAGE_ORIENTATION = 53,
  Property_NameId_ANIMATION_DURATION = 54,
  Property_NameId__WEBKIT_COLUMNS = 55,
  Property_NameId__WEBKIT_BOX_FLEX_GROUP = 56,
  Property_NameId__WEBKIT_ANIMATION_DELAY = 57,
  Property_NameId__EPUB_TEXT_EMPHASIS = 58,
  Property_NameId_FLEX_SHRINK = 59,
  Property_NameId_TEXT_RENDERING = 60,
  Property_NameId_ALIGN_ITEMS = 61,
  Property_NameId_BORDER_COLLAPSE = 62,
  Property_NameId_OFFSET = 63,
  Property_NameId_TEXT_COMBINE_UPRIGHT = 64,
  Property_NameId__WEBKIT_MASK_POSITION_X = 65,
  Property_NameId__WEBKIT_MASK_POSITION_Y = 66,
  Property_NameId_OUTLINE_STYLE = 67,
  Property_NameId__WEBKIT_MARGIN_BOTTOM_COLLAPSE = 68,
  Property_NameId_COLOR_INTERPOLATION_FILTERS = 69,
  Property_NameId_FONT_VARIANT = 70,
  Property_NameId__WEBKIT_ANIMATION_FILL_MODE = 71,
  Property_NameId_BORDER_RIGHT = 72,
  Property_NameId_VISIBILITY = 73,
  Property_NameId_TRANSFORM_BOX = 74,
  Property_NameId_FONT_VARIANT_CAPS = 75,
  Property_NameId__EPUB_TEXT_EMPHASIS_COLOR = 76,
  Property_NameId__WEBKIT_BORDER_BEFORE_STYLE = 77,
  Property_NameId_RESIZE = 78,
  Property_NameId__WEBKIT_RTL_ORDERING = 79,
  Property_NameId__WEBKIT_BOX_ORDINAL_GROUP = 80,
  Property_NameId_PAINT_ORDER = 81,
  Property_NameId_STROKE_LINECAP = 82,
  Property_NameId_ANIMATION_DIRECTION = 83,
  Property_NameId__WEBKIT_FONT_FEATURE_SETTINGS = 84,
  Property_NameId_BORDER_TOP_LEFT_RADIUS = 85,
  Property_NameId__WEBKIT_COLUMN_WIDTH = 86,
  Property_NameId__WEBKIT_BOX_ALIGN = 87,
  Property_NameId__WEBKIT_PADDING_AFTER = 88,
  Property_NameId_COLUMN_WIDTH = 89,
  Property_NameId_LIST_STYLE = 90,
  Property_NameId__WEBKIT_MASK_REPEAT_Y = 91,
  Property_NameId__WEBKIT_MARGIN_BEFORE_COLLAPSE = 92,
  Property_NameId_STROKE = 93,
  Property_NameId_TEXT_DECORATION_LINE = 94,
  Property_NameId__WEBKIT_BACKGROUND_SIZE = 95,
  Property_NameId__WEBKIT_MASK_REPEAT_X = 96,
  Property_NameId_PADDING_BOTTOM = 97,
  Property_NameId_FONT_STYLE = 98,
  Property_NameId__WEBKIT_TRANSITION_DELAY = 99,
  Property_NameId_BACKGROUND_REPEAT = 100,
  Property_NameId_FLEX_BASIS = 101,
  Property_NameId_BORDER_IMAGE_SLICE = 102,
  Property_NameId__WEBKIT_TRANSFORM_ORIGIN = 103,
  Property_NameId_OVERSCROLL_BEHAVIOR_X = 104,
  Property_NameId_OVERSCROLL_BEHAVIOR_Y = 105,
  Property_NameId_VECTOR_EFFECT = 106,
  Property_NameId__WEBKIT_ANIMATION_TIMING_FUNCTION = 107,
  Property_NameId__WEBKIT_BORDER_AFTER_STYLE = 108,
  Property_NameId__WEBKIT_PERSPECTIVE_ORIGIN_X = 109,
  Property_NameId__WEBKIT_PERSPECTIVE_ORIGIN_Y = 110,
  Property_NameId_INLINE_SIZE = 111,
  Property_NameId_OUTLINE = 112,
  Property_NameId_FONT_DISPLAY = 113,
  Property_NameId__WEBKIT_BORDER_BEFORE = 114,
  Property_NameId_BORDER_IMAGE_SOURCE = 115,
  Property_NameId_TRANSITION_DURATION = 116,
  Property_NameId_SCROLL_PADDING_TOP = 117,
  Property_NameId_ORDER = 118,
  Property_NameId__WEBKIT_BOX_ORIENT = 119,
  Property_NameId_COUNTER_RESET = 120,
  Property_NameId_COLOR_RENDERING = 121,
  Property_NameId_FLEX_DIRECTION = 122,
  Property_NameId__WEBKIT_TEXT_STROKE_WIDTH = 123,
  Property_NameId_FONT_VARIANT_NUMERIC = 124,
  Property_NameId_SCROLL_MARGIN_BLOCK_END = 125,
  Property_NameId_MIN_HEIGHT = 126,
  Property_NameId_SCROLL_PADDING_INLINE_START = 127,
  Property_NameId__WEBKIT_MASK_BOX_IMAGE = 128,
  Property_NameId_LEFT = 129,
  Property_NameId__WEBKIT_MASK = 130,
  Property_NameId__WEBKIT_BORDER_AFTER_WIDTH = 131,
  Property_NameId_STROKE_WIDTH = 132,
  Property_NameId__WEBKIT_BOX_DECORATION_BREAK = 133,
  Property_NameId__WEBKIT_MASK_POSITION = 134,
  Property_NameId_BACKGROUND_ORIGIN = 135,
  Property_NameId__WEBKIT_BORDER_START_COLOR = 136,
  Property_NameId_FONT_STRETCH = 137,
  Property_NameId__WEBKIT_BACKGROUND_CLIP = 138,
  Property_NameId_SCROLL_MARGIN_TOP = 139,
  Property_NameId__WEBKIT_BORDER_HORIZONTAL_SPACING = 140,
  Property_NameId_BORDER_RADIUS = 141,
  Property_NameId_FLEX = 142,
  Property_NameId_TEXT_INDENT = 143,
  Property_NameId_HYPHENS = 144,
  Property_NameId_COLUMN_RULE_WIDTH = 145,
  Property_NameId__WEBKIT_MARGIN_AFTER = 146,
  Property_NameId__EPUB_CAPTION_SIDE = 147,
  Property_NameId_BREAK_AFTER = 148,
  Property_NameId_TEXT_TRANSFORM = 149,
  Property_NameId_TOUCH_ACTION = 150,
  Property_NameId_FONT_SIZE = 151,
  Property_NameId__WEBKIT_ANIMATION_NAME = 152,
  Property_NameId_SCROLL_PADDING_INLINE = 153,
  Property_NameId_OFFSET_PATH = 154,
  Property_NameId_SCROLL_MARGIN = 155,
  Property_NameId_PADDING_TOP = 156,
  Property_NameId_SCROLL_SNAP_ALIGN = 157,
  Property_NameId__WEBKIT_TEXT_COMBINE = 158,
  Property_NameId__WEBKIT_FLEX_SHRINK = 159,
  Property_NameId_RX = 160,
  Property_NameId_RY = 161,
  Property_NameId_CONTENT = 162,
  Property_NameId_PADDING_RIGHT = 163,
  Property_NameId__WEBKIT_TRANSFORM = 164,
  Property_NameId_MARKER_MID = 165,
  Property_NameId__WEBKIT_MIN_LOGICAL_WIDTH = 166,
  Property_NameId_CLIP_RULE = 167,
  Property_NameId_FONT_FAMILY = 168,
  Property_NameId_SCROLL_SNAP_TYPE = 169,
  Property_NameId_TEXT_DECORATION_SKIP = 170,
  Property_NameId_TRANSITION = 171,
  Property_NameId_FILTER = 172,
  Property_NameId_BORDER_RIGHT_WIDTH = 173,
  Property_NameId__WEBKIT_FLEX_DIRECTION = 174,
  Property_NameId__WEBKIT_MASK_COMPOSITE = 175,
  Property_NameId_MIX_BLEND_MODE = 176,
  Property_NameId_COLOR_INTERPOLATION = 177,
  Property_NameId_BORDER_TOP_STYLE = 178,
  Property_NameId_FILL_OPACITY = 179,
  Property_NameId_MARKER_START = 180,
  Property_NameId_BORDER_BOTTOM_WIDTH = 181,
  Property_NameId__WEBKIT_TEXT_EMPHASIS = 182,
  Property_NameId_GRID_AREA = 183,
  Property_NameId_SIZE = 184,
  Property_NameId_BACKGROUND_CLIP = 185,
  Property_NameId__WEBKIT_TEXT_FILL_COLOR = 186,
  Property_NameId_TOP = 187,
  Property_NameId__WEBKIT_BOX_REFLECT = 188,
  Property_NameId_BORDER_WIDTH = 189,
  Property_NameId_OFFSET_ANCHOR = 190,
  Property_NameId_MAX_INLINE_SIZE = 191,
  Property_NameId__WEBKIT_COLUMN_RULE_STYLE = 192,
  Property_NameId__WEBKIT_COLUMN_COUNT = 193,
  Property_NameId_ANIMATION_PLAY_STATE = 194,
  Property_NameId_PADDING = 195,
  Property_NameId_DOMINANT_BASELINE = 196,
  Property_NameId_BACKGROUND_ATTACHMENT = 197,
  Property_NameId__WEBKIT_BOX_SIZING = 198,
  Property_NameId__WEBKIT_BOX_FLEX = 199,
  Property_NameId_TEXT_ORIENTATION = 200,
  Property_NameId_BACKGROUND_POSITION = 201,
  Property_NameId__WEBKIT_BORDER_START_WIDTH = 202,
  Property_NameId__EPUB_TEXT_EMPHASIS_STYLE = 203,
  Property_NameId_ISOLATION = 204,
  Property_NameId__EPUB_TEXT_ORIENTATION = 205,
  Property_NameId__WEBKIT_BORDER_BOTTOM_RIGHT_RADIUS = 206,
  Property_NameId_R = 207,
  Property_NameId_BORDER_LEFT_WIDTH = 208,
  Property_NameId_GRID_COLUMN_END = 209,
  Property_NameId_BACKGROUND_BLEND_MODE = 210,
  Property_NameId_VERTICAL_ALIGN = 211,
  Property_NameId_CLIP = 212,
  Property_NameId_GRID_AUTO_ROWS = 213,
  Property_NameId_OFFSET_ROTATE = 214,
  Property_NameId_MARGIN_LEFT = 215,
  Property_NameId_ANIMATION_NAME = 216,
  Property_NameId_TEXT_DECORATION = 217,
  Property_NameId_BORDER = 218,
  Property_NameId__WEBKIT_TRANSITION_TIMING_FUNCTION = 219,
  Property_NameId_MARGIN_BOTTOM = 220,
  Property_NameId_UNICODE_RANGE = 221,
  Property_NameId_ANIMATION = 222,
  Property_NameId__WEBKIT_SHAPE_MARGIN = 223,
  Property_NameId_FONT_WEIGHT = 224,
  Property_NameId_SHAPE_MARGIN = 225,
  Property_NameId_MASK_TYPE = 226,
  Property_NameId_SCROLL_PADDING = 227,
  Property_NameId_MIN_INLINE_SIZE = 228,
  Property_NameId_OBJECT_POSITION = 229,
  Property_NameId_PAGE_BREAK_AFTER = 230,
  Property_NameId__WEBKIT_MASK_CLIP = 231,
  Property_NameId_WHITE_SPACE = 232,
  Property_NameId__WEBKIT_BORDER_AFTER_COLOR = 233,
  Property_NameId__WEBKIT_MAX_LOGICAL_WIDTH = 234,
  Property_NameId__WEBKIT_BORDER_BEFORE_COLOR = 235,
  Property_NameId_FONT_KERNING = 236,
  Property_NameId__EPUB_WORD_BREAK = 237,
  Property_NameId_CLEAR = 238,
  Property_NameId_ANIMATION_TIMING_FUNCTION = 239,
  Property_NameId__WEBKIT_BORDER_RADIUS = 240,
  Property_NameId_SCROLL_PADDING_RIGHT = 241,
  Property_NameId__WEBKIT_TEXT_DECORATIONS_IN_EFFECT = 242,
  Property_NameId__WEBKIT_ANIMATION_DIRECTION = 243,
  Property_NameId_JUSTIFY_SELF = 244,
  Property_NameId_TRANSITION_TIMING_FUNCTION = 245,
  Property_NameId_SCROLL_SNAP_STOP = 246,
  Property_NameId_COUNTER_INCREMENT = 247,
  Property_NameId__WEBKIT_TRANSFORM_STYLE = 248,
  Property_NameId_GRID_AUTO_COLUMNS = 249,
  Property_NameId__WEBKIT_ALIGN_CONTENT = 250,
  Property_NameId_FONT = 251,
  Property_NameId_FLEX_WRAP = 252,
  Property_NameId_GRID_ROW_START = 253,
  Property_NameId_LIST_STYLE_IMAGE = 254,
  Property_NameId__WEBKIT_TAP_HIGHLIGHT_COLOR = 255,
  Property_NameId__WEBKIT_TEXT_EMPHASIS_COLOR = 256,
  Property_NameId_BORDER_LEFT = 257,
  Property_NameId__WEBKIT_BORDER_END_COLOR = 258,
  Property_NameId_COLUMNS = 259,
  Property_NameId_BOX_SHADOW = 260,
  Property_NameId__WEBKIT_FLEX_WRAP = 261,
  Property_NameId_ALIGN_SELF = 262,
  Property_NameId_BORDER_BOTTOM = 263,
  Property_NameId_BORDER_SPACING = 264,
  Property_NameId__WEBKIT_COLUMN_SPAN = 265,
  Property_NameId_GRID_ROW_END = 266,
  Property_NameId__WEBKIT_BORDER_END = 267,
  Property_NameId_PERSPECTIVE_ORIGIN = 268,
  Property_NameId_PAGE_BREAK_INSIDE = 269,
  Property_NameId_ORPHANS = 270,
  Property_NameId__WEBKIT_BORDER_START_STYLE = 271,
  Property_NameId_SCROLL_BEHAVIOR = 272,
  Property_NameId_COLUMN_SPAN = 273,
  Property_NameId__WEBKIT_HYPHENATE_CHARACTER = 274,
  Property_NameId_COLUMN_FILL = 275,
  Property_NameId_TAB_SIZE = 276,
  Property_NameId_CONTAIN = 277,
  Property_NameId_X = 278,
  Property_NameId_GRID_ROW = 279,
  Property_NameId_BORDER_BOTTOM_RIGHT_RADIUS = 280,
  Property_NameId_LINE_HEIGHT = 281,
  Property_NameId_STROKE_LINEJOIN = 282,
  Property_NameId_TEXT_ALIGN_LAST = 283,
  Property_NameId_OFFSET_POSITION = 284,
  Property_NameId_WORD_SPACING = 285,
  Property_NameId_TRANSFORM_STYLE = 286,
  Property_NameId__WEBKIT_APP_REGION = 287,
  Property_NameId__WEBKIT_BORDER_END_STYLE = 288,
  Property_NameId__WEBKIT_TRANSFORM_ORIGIN_Z = 289,
  Property_NameId__WEBKIT_TRANSFORM_ORIGIN_X = 290,
  Property_NameId__WEBKIT_TRANSFORM_ORIGIN_Y = 291,
  Property_NameId_BACKGROUND_REPEAT_X = 292,
  Property_NameId_BACKGROUND_REPEAT_Y = 293,
  Property_NameId_BORDER_BOTTOM_COLOR = 294,
  Property_NameId__WEBKIT_RUBY_POSITION = 295,
  Property_NameId__WEBKIT_LOGICAL_WIDTH = 296,
  Property_NameId_TEXT_JUSTIFY = 297,
  Property_NameId_SCROLL_MARGIN_INLINE_START = 298,
  Property_NameId_CAPTION_SIDE = 299,
  Property_NameId_MASK_SOURCE_TYPE = 300,
  Property_NameId__WEBKIT_MASK_BOX_IMAGE_SLICE = 301,
  Property_NameId__WEBKIT_BORDER_IMAGE = 302,
  Property_NameId_TEXT_SIZE_ADJUST = 303,
  Property_NameId__WEBKIT_TEXT_SECURITY = 304,
  Property_NameId__EPUB_WRITING_MODE = 305,
  Property_NameId_GRID_TEMPLATE = 306,
  Property_NameId__WEBKIT_MASK_BOX_IMAGE_REPEAT = 307,
  Property_NameId__WEBKIT_MASK_REPEAT = 308,
  Property_NameId__WEBKIT_JUSTIFY_CONTENT = 309,
  Property_NameId_BASELINE_SHIFT = 310,
  Property_NameId_BORDER_IMAGE = 311,
  Property_NameId_TEXT_DECORATION_COLOR = 312,
  Property_NameId_COLOR = 313,
  Property_NameId_SHAPE_IMAGE_THRESHOLD = 314,
  Property_NameId_SHAPE_RENDERING = 315,
  Property_NameId_CY = 316,
  Property_NameId_CX = 317,
  Property_NameId__WEBKIT_USER_MODIFY = 318,
  Property_NameId_OFFSET_DISTANCE = 319,
  Property_NameId__WEBKIT_BORDER_BOTTOM_LEFT_RADIUS = 320,
  Property_NameId_SPEAK = 321,
  Property_NameId_BORDER_BOTTOM_LEFT_RADIUS = 322,
  Property_NameId__WEBKIT_COLUMN_BREAK_AFTER = 323,
  Property_NameId__WEBKIT_FONT_SMOOTHING = 324,
  Property_NameId__WEBKIT_MAX_LOGICAL_HEIGHT = 325,
  Property_NameId__WEBKIT_LINE_BREAK = 326,
  Property_NameId_FILL_RULE = 327,
  Property_NameId__WEBKIT_MARGIN_START = 328,
  Property_NameId_MIN_WIDTH = 329,
  Property_NameId__EPUB_TEXT_COMBINE = 330,
  Property_NameId_BREAK_BEFORE = 331,
  Property_NameId_CARET_COLOR = 332,
  Property_NameId_EMPTY_CELLS = 333,
  Property_NameId_DIRECTION = 334,
  Property_NameId_CLIP_PATH = 335,
  Property_NameId_JUSTIFY_CONTENT = 336,
  Property_NameId_SCROLL_PADDING_BLOCK_END = 337,
  Property_NameId_Z_INDEX = 338,
  Property_NameId_BACKGROUND_POSITION_Y = 339,
  Property_NameId_TEXT_DECORATION_STYLE = 340,
  Property_NameId_GRID_TEMPLATE_AREAS = 341,
  Property_NameId__WEBKIT_MIN_LOGICAL_HEIGHT = 342,
  Property_NameId_FONT_SIZE_ADJUST = 343,
  Property_NameId_SCROLL_PADDING_BLOCK = 344,
  Property_NameId_OVERFLOW_ANCHOR = 345,
  Property_NameId_CURSOR = 346,
  Property_NameId_SCROLL_MARGIN_BLOCK_START = 347,
  Property_NameId__WEBKIT_MASK_BOX_IMAGE_SOURCE = 348,
  Property_NameId_MARGIN = 349,
  Property_NameId__WEBKIT_ANIMATION = 350,
  Property_NameId_LETTER_SPACING = 351,
  Property_NameId_ORIENTATION = 352,
  Property_NameId_WILL_CHANGE = 353,
  Property_NameId__WEBKIT_HIGHLIGHT = 354,
  Property_NameId_TRANSFORM_ORIGIN = 355,
  Property_NameId_FONT_VARIANT_LIGATURES = 356,
  Property_NameId__WEBKIT_ANIMATION_DURATION = 357,
  Property_NameId__WEBKIT_MASK_ORIGIN = 358,
  Property_NameId__WEBKIT_CLIP_PATH = 359,
  Property_NameId_WORD_BREAK = 360,
  Property_NameId_TABLE_LAYOUT = 361,
  Property_NameId_TEXT_OVERFLOW = 362,
  Property_NameId__WEBKIT_LOCALE = 363,
  Property_NameId__WEBKIT_FLEX = 364,
  Property_NameId_GRID_AUTO_FLOW = 365,
  Property_NameId_BORDER_TOP_RIGHT_RADIUS = 366,
  Property_NameId_BORDER_IMAGE_OUTSET = 367,
  Property_NameId_PLACE_ITEMS = 368,
  Property_NameId_BORDER_LEFT_COLOR = 369,
  Property_NameId_FONT_VARIATION_SETTINGS = 370,
  Property_NameId_BORDER_RIGHT_COLOR = 371,
  Property_NameId_MIN_ZOOM = 372,
  Property_NameId_SCROLL_MARGIN_INLINE = 373,
  Property_NameId__WEBKIT_BORDER_BEFORE_WIDTH = 374,
  Property_NameId_BACKFACE_VISIBILITY = 375,
  Property_NameId_BACKGROUND_IMAGE = 376,
  Property_NameId__WEBKIT_TRANSITION_PROPERTY = 377,
  Property_NameId_WRITING_MODE = 378,
  Property_NameId_STROKE_OPACITY = 379,
  Property_NameId__WEBKIT_MARGIN_COLLAPSE = 380,
  Property_NameId_BOX_SIZING = 381,
  Property_NameId_MARGIN_TOP = 382,
  Property_NameId_COLUMN_RULE_COLOR = 383,
  Property_NameId_Y = 384,
  Property_NameId_POSITION = 385,
  Property_NameId_SCROLL_MARGIN_BOTTOM = 386,
  Property_NameId_LIST_STYLE_POSITION = 387,
  Property_NameId__WEBKIT_BOX_PACK = 388,
  Property_NameId_SCROLL_PADDING_INLINE_END = 389,
  Property_NameId_QUOTES = 390,
  Property_NameId_BORDER_TOP = 391,
  Property_NameId_SCROLL_PADDING_LEFT = 392,
  Property_NameId__WEBKIT_TRANSITION = 393,
  Property_NameId__WEBKIT_COLUMN_BREAK_BEFORE = 394,
  Property_NameId_LIGHTING_COLOR = 395,
  Property_NameId_BACKGROUND_SIZE = 396,
  Property_NameId__WEBKIT_PADDING_BEFORE = 397,
  Property_NameId__WEBKIT_BORDER_TOP_LEFT_RADIUS = 398,
  Property_NameId_FLOOD_OPACITY = 399,
  Property_NameId_LINE_HEIGHT_STEP = 400,
  Property_NameId__WEBKIT_MASK_SIZE = 401,
  Property_NameId_TEXT_ALIGN = 402,
  Property_NameId__WEBKIT_FILTER = 403,
  Property_NameId_WORD_WRAP = 404,
  Property_NameId_MAX_ZOOM = 405,
  Property_NameId_GRID = 406,
  Property_NameId_BACKGROUND = 407,
  Property_NameId_HEIGHT = 408,
  Property_NameId_GRID_COLUMN_START = 409,
  Property_NameId_ANIMATION_FILL_MODE = 410,
  Property_NameId_ROTATE = 411,
  Property_NameId_MARKER_END = 412,
  Property_NameId_D = 413,
  Property_NameId_JUSTIFY_ITEMS = 414,
  Property_NameId_ZOOM = 415,
  Property_NameId_SCROLL_PADDING_BLOCK_START = 416,
  Property_NameId__WEBKIT_MARGIN_TOP_COLLAPSE = 417,
  Property_NameId_PAGE = 418,
  Property_NameId_RIGHT = 419,
  Property_NameId_USER_SELECT = 420,
  Property_NameId_MARGIN_RIGHT = 421,
  Property_NameId_MARKER = 422,
  Property_NameId_LINE_BREAK = 423,
  Property_NameId__WEBKIT_MARGIN_END = 424,
  Property_NameId__WEBKIT_TRANSITION_DURATION = 425,
  Property_NameId__WEBKIT_WRITING_MODE = 426,
  Property_NameId_BORDER_TOP_WIDTH = 427,
  Property_NameId_BOTTOM = 428,
  Property_NameId_PLACE_CONTENT = 429,
  Property_NameId__WEBKIT_SHAPE_IMAGE_THRESHOLD = 430,
  Property_NameId__WEBKIT_USER_DRAG = 431,
  Property_NameId__WEBKIT_BORDER_VERTICAL_SPACING = 432,
  Property_NameId__WEBKIT_COLUMN_GAP = 433,
  Property_NameId__WEBKIT_OPACITY = 434,
  Property_NameId_BACKGROUND_COLOR = 435,
  Property_NameId_COLUMN_GAP = 436,
  Property_NameId_SHAPE_OUTSIDE = 437,
  Property_NameId__WEBKIT_PADDING_END = 438,
  Property_NameId__WEBKIT_BORDER_START = 439,
  Property_NameId_ANIMATION_DELAY = 440,
  Property_NameId_UNICODE_BIDI = 441,
  Property_NameId_TEXT_SHADOW = 442,
  Property_NameId__WEBKIT_BOX_DIRECTION = 443,
  Property_NameId_IMAGE_RENDERING = 444,
  Property_NameId_SRC = 445,
  Property_NameId_GRID_GAP = 446,
  Property_NameId_POINTER_EVENTS = 447,
  Property_NameId_BORDER_IMAGE_WIDTH = 448,
  Property_NameId_MIN_BLOCK_SIZE = 449,
  Property_NameId_TRANSITION_PROPERTY = 450,
  Property_NameId__WEBKIT_MASK_IMAGE = 451,
  Property_NameId_FLOAT = 452,
  Property_NameId_MAX_HEIGHT = 453,
  Property_NameId_OUTLINE_OFFSET = 454,
  Property_NameId__WEBKIT_BOX_SHADOW = 455,
  Property_NameId_OVERFLOW_WRAP = 456,
  Property_NameId_BLOCK_SIZE = 457,
  Property_NameId_TRANSFORM = 458,
  Property_NameId_PLACE_SELF = 459,
  Property_NameId_WIDTH = 460,
  Property_NameId_STROKE_MITERLIMIT = 461,
  Property_NameId_STOP_OPACITY = 462,
  Property_NameId_BORDER_TOP_COLOR = 463,
  Property_NameId_TRANSLATE = 464,
  Property_NameId_OBJECT_FIT = 465,
  Property_NameId__WEBKIT_MASK_BOX_IMAGE_WIDTH = 466,
  Property_NameId__WEBKIT_BACKGROUND_ORIGIN = 467,
  Property_NameId__WEBKIT_ALIGN_ITEMS = 468,
  Property_NameId_TRANSITION_DELAY = 469,
  Property_NameId_SCROLL_MARGIN_LEFT = 470,
  Property_NameId_BORDER_STYLE = 471,
  Property_NameId_ANIMATION_ITERATION_COUNT = 472,
  Property_NameId__WEBKIT_MARGIN_AFTER_COLLAPSE = 473,
  Property_NameId__OVERFLOW = 474,
  Property_NameId_USER_ZOOM = 475,
  Property_NameId__WEBKIT_BORDER_TOP_RIGHT_RADIUS = 476,
  Property_NameId_GRID_TEMPLATE_COLUMNS = 477,
  Property_NameId__WEBKIT_ALIGN_SELF = 478,
  Property_NameId__WEBKIT_PERSPECTIVE_ORIGIN = 479,
  Property_NameId_COLUMN_RULE_STYLE = 480,
  Property_NameId_DISPLAY = 481,
  Property_NameId__WEBKIT_COLUMN_RULE_WIDTH = 482,
  Property_NameId__WEBKIT_BOX_LINES = 483,
  Property_NameId_BORDER_COLOR = 484,
  Property_NameId__WEBKIT_FLEX_BASIS = 485,
  Property_NameId_STROKE_DASHOFFSET = 486,
  Property_NameId__WEBKIT_TEXT_SIZE_ADJUST = 487,
  Property_NameId_OVERSCROLL_BEHAVIOR = 488,
  Property_NameId__WEBKIT_TEXT_STROKE = 489,
  Property_NameId_WIDOWS = 490,
  Property_NameId_FILL = 491,
  Property_NameId_OVERFLOW_Y = 492,
  Property_NameId_OVERFLOW_X = 493,
  Property_NameId_OPACITY = 494,
  Property_NameId__WEBKIT_PERSPECTIVE = 495,
  Property_NameId__WEBKIT_TEXT_STROKE_COLOR = 496,
  Property_NameId_SCROLL_MARGIN_INLINE_END = 497,
  Property_NameId_SCALE = 498,
  Property_NameId__WEBKIT_TEXT_ORIENTATION = 499,
  Property_NameId__WEBKIT_MASK_BOX_IMAGE_OUTSET = 500,
  Property_NameId_ALIGN_CONTENT = 501,
  Property_NameId__WEBKIT_BORDER_END_WIDTH = 502,
  Property_NameId_BORDER_BOTTOM_STYLE = 503,
  Property_NameId_MASK = 504,
  Property_NameId_BACKGROUND_POSITION_X = 505,
  Property_NameId__EPUB_TEXT_TRANSFORM = 506,
  Property_NameId_STOP_COLOR = 507,
  Property_NameId_STROKE_DASHARRAY = 508,
  Property_NameId__WEBKIT_LINE_CLAMP = 509,
  Property_NameId_INVALID_PROPERTY = 510
};
bool Property_NameId_IsValid(int value);
const Property_NameId Property_NameId_NameId_MIN = Property_NameId_ALL;
const Property_NameId Property_NameId_NameId_MAX = Property_NameId_INVALID_PROPERTY;
const int Property_NameId_NameId_ARRAYSIZE = Property_NameId_NameId_MAX + 1;

const ::google::protobuf::EnumDescriptor* Property_NameId_descriptor();
inline const ::std::string& Property_NameId_Name(Property_NameId value) {
  return ::google::protobuf::internal::NameOfEnum(
    Property_NameId_descriptor(), value);
}
inline bool Property_NameId_Parse(
    const ::std::string& name, Property_NameId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Property_NameId>(
    Property_NameId_descriptor(), name, value);
}
enum Attr_Type {
  Attr_Type_NONE = 1,
  Attr_Type_EQUAL = 6,
  Attr_Type_TILDE = 126,
  Attr_Type_PIPE = 124,
  Attr_Type_DOLLAR = 36,
  Attr_Type_STAR = 42
};
bool Attr_Type_IsValid(int value);
const Attr_Type Attr_Type_Type_MIN = Attr_Type_NONE;
const Attr_Type Attr_Type_Type_MAX = Attr_Type_TILDE;
const int Attr_Type_Type_ARRAYSIZE = Attr_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Attr_Type_descriptor();
inline const ::std::string& Attr_Type_Name(Attr_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Attr_Type_descriptor(), value);
}
inline bool Attr_Type_Parse(
    const ::std::string& name, Attr_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Attr_Type>(
    Attr_Type_descriptor(), name, value);
}
enum Selector_Type {
  Selector_Type_ELEMENT = 1,
  Selector_Type_CLASS = 2,
  Selector_Type_ID = 3,
  Selector_Type_UNIVERSAL = 4,
  Selector_Type_ATTR = 5
};
bool Selector_Type_IsValid(int value);
const Selector_Type Selector_Type_Type_MIN = Selector_Type_ELEMENT;
const Selector_Type Selector_Type_Type_MAX = Selector_Type_ATTR;
const int Selector_Type_Type_ARRAYSIZE = Selector_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Selector_Type_descriptor();
inline const ::std::string& Selector_Type_Name(Selector_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Selector_Type_descriptor(), value);
}
inline bool Selector_Type_Parse(
    const ::std::string& name, Selector_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Selector_Type>(
    Selector_Type_descriptor(), name, value);
}
enum Selector_PseudoValueId {
  Selector_PseudoValueId__INTERNAL_AUTOFILL_PREVIEWED = 1,
  Selector_PseudoValueId__INTERNAL_AUTOFILL_SELECTED = 2,
  Selector_PseudoValueId__INTERNAL_LIST_BOX = 3,
  Selector_PseudoValueId__INTERNAL_MEDIA_CONTROLS_OVERLAY_CAST_BUTTON = 4,
  Selector_PseudoValueId__INTERNAL_SHADOW_HOST_HAS_APPEARANCE = 5,
  Selector_PseudoValueId__INTERNAL_SPATIAL_NAVIGATION_FOCUS = 6,
  Selector_PseudoValueId__INTERNAL_VIDEO_PERSISTENT = 7,
  Selector_PseudoValueId__INTERNAL_VIDEO_PERSISTENT_ANCESTOR = 8,
  Selector_PseudoValueId__WEBKIT_ANY_LINK = 9,
  Selector_PseudoValueId__WEBKIT_AUTOFILL = 10,
  Selector_PseudoValueId__WEBKIT_DRAG = 11,
  Selector_PseudoValueId__WEBKIT_FULL_PAGE_MEDIA = 12,
  Selector_PseudoValueId__WEBKIT_FULL_SCREEN = 13,
  Selector_PseudoValueId__WEBKIT_FULL_SCREEN_ANCESTOR = 14,
  Selector_PseudoValueId__WEBKIT_RESIZER = 15,
  Selector_PseudoValueId__WEBKIT_SCROLLBAR = 16,
  Selector_PseudoValueId__WEBKIT_SCROLLBAR_BUTTON = 17,
  Selector_PseudoValueId__WEBKIT_SCROLLBAR_CORNER = 18,
  Selector_PseudoValueId__WEBKIT_SCROLLBAR_THUMB = 19,
  Selector_PseudoValueId__WEBKIT_SCROLLBAR_TRACK = 20,
  Selector_PseudoValueId__WEBKIT_SCROLLBAR_TRACK_PIECE = 21,
  Selector_PseudoValueId_ACTIVE = 22,
  Selector_PseudoValueId_AFTER = 23,
  Selector_PseudoValueId_BACKDROP = 24,
  Selector_PseudoValueId_BEFORE = 25,
  Selector_PseudoValueId_CHECKED = 26,
  Selector_PseudoValueId_CONTENT = 27,
  Selector_PseudoValueId_CORNER_PRESENT = 28,
  Selector_PseudoValueId_CUE = 29,
  Selector_PseudoValueId_DECREMENT = 30,
  Selector_PseudoValueId_DEFAULT = 31,
  Selector_PseudoValueId_DEFINED = 32,
  Selector_PseudoValueId_DISABLED = 33,
  Selector_PseudoValueId_DOUBLE_BUTTON = 34,
  Selector_PseudoValueId_EMPTY = 35,
  Selector_PseudoValueId_ENABLED = 36,
  Selector_PseudoValueId_END = 37,
  Selector_PseudoValueId_FIRST = 38,
  Selector_PseudoValueId_FIRST_CHILD = 39,
  Selector_PseudoValueId_FIRST_LETTER = 40,
  Selector_PseudoValueId_FIRST_LINE = 41,
  Selector_PseudoValueId_FIRST_OF_TYPE = 42,
  Selector_PseudoValueId_FOCUS = 43,
  Selector_PseudoValueId_FOCUS_WITHIN = 44,
  Selector_PseudoValueId_FULLSCREEN = 45,
  Selector_PseudoValueId_FUTURE = 46,
  Selector_PseudoValueId_HORIZONTAL = 47,
  Selector_PseudoValueId_HOST = 48,
  Selector_PseudoValueId_HOVER = 49,
  Selector_PseudoValueId_IN_RANGE = 50,
  Selector_PseudoValueId_INCREMENT = 51,
  Selector_PseudoValueId_INDETERMINATE = 52,
  Selector_PseudoValueId_INVALID = 53,
  Selector_PseudoValueId_LAST_CHILD = 54,
  Selector_PseudoValueId_LAST_OF_TYPE = 55,
  Selector_PseudoValueId_LEFT = 56,
  Selector_PseudoValueId_LINK = 57,
  Selector_PseudoValueId_NO_BUTTON = 58,
  Selector_PseudoValueId_ONLY_CHILD = 59,
  Selector_PseudoValueId_ONLY_OF_TYPE = 60,
  Selector_PseudoValueId_OPTIONAL = 61,
  Selector_PseudoValueId_OUT_OF_RANGE = 62,
  Selector_PseudoValueId_PAST = 63,
  Selector_PseudoValueId_PLACEHOLDER = 64,
  Selector_PseudoValueId_PLACEHOLDER_SHOWN = 65,
  Selector_PseudoValueId_READ_ONLY = 66,
  Selector_PseudoValueId_READ_WRITE = 67,
  Selector_PseudoValueId_REQUIRED = 68,
  Selector_PseudoValueId_RIGHT = 69,
  Selector_PseudoValueId_ROOT = 70,
  Selector_PseudoValueId_SCOPE = 71,
  Selector_PseudoValueId_SELECTION = 72,
  Selector_PseudoValueId_SHADOW = 73,
  Selector_PseudoValueId_SINGLE_BUTTON = 74,
  Selector_PseudoValueId_START = 75,
  Selector_PseudoValueId_TARGET = 76,
  Selector_PseudoValueId_UNRESOLVED = 77,
  Selector_PseudoValueId_VALID = 78,
  Selector_PseudoValueId_VERTICAL = 79,
  Selector_PseudoValueId_VISITED = 80,
  Selector_PseudoValueId_WINDOW_INACTIVE = 81,
  Selector_PseudoValueId__WEBKIT_ANY = 82,
  Selector_PseudoValueId_HOST_CONTEXT = 85,
  Selector_PseudoValueId_LANG = 86,
  Selector_PseudoValueId_NOT = 87,
  Selector_PseudoValueId_NTH_CHILD = 88,
  Selector_PseudoValueId_NTH_LAST_CHILD = 89,
  Selector_PseudoValueId_NTH_LAST_OF_TYPE = 90,
  Selector_PseudoValueId_NTH_OF_TYPE = 91,
  Selector_PseudoValueId_SLOTTED = 92,
  Selector_PseudoValueId_INVALID_PSEUDO_VALUE = 93
};
bool Selector_PseudoValueId_IsValid(int value);
const Selector_PseudoValueId Selector_PseudoValueId_PseudoValueId_MIN = Selector_PseudoValueId__INTERNAL_AUTOFILL_PREVIEWED;
const Selector_PseudoValueId Selector_PseudoValueId_PseudoValueId_MAX = Selector_PseudoValueId_INVALID_PSEUDO_VALUE;
const int Selector_PseudoValueId_PseudoValueId_ARRAYSIZE = Selector_PseudoValueId_PseudoValueId_MAX + 1;

const ::google::protobuf::EnumDescriptor* Selector_PseudoValueId_descriptor();
inline const ::std::string& Selector_PseudoValueId_Name(Selector_PseudoValueId value) {
  return ::google::protobuf::internal::NameOfEnum(
    Selector_PseudoValueId_descriptor(), value);
}
inline bool Selector_PseudoValueId_Parse(
    const ::std::string& name, Selector_PseudoValueId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Selector_PseudoValueId>(
    Selector_PseudoValueId_descriptor(), name, value);
}
enum PropertyAndValue_Prio {
  PropertyAndValue_Prio_UNSET = 0,
  PropertyAndValue_Prio_IS_SET = 1
};
bool PropertyAndValue_Prio_IsValid(int value);
const PropertyAndValue_Prio PropertyAndValue_Prio_Prio_MIN = PropertyAndValue_Prio_UNSET;
const PropertyAndValue_Prio PropertyAndValue_Prio_Prio_MAX = PropertyAndValue_Prio_IS_SET;
const int PropertyAndValue_Prio_Prio_ARRAYSIZE = PropertyAndValue_Prio_Prio_MAX + 1;

const ::google::protobuf::EnumDescriptor* PropertyAndValue_Prio_descriptor();
inline const ::std::string& PropertyAndValue_Prio_Name(PropertyAndValue_Prio value) {
  return ::google::protobuf::internal::NameOfEnum(
    PropertyAndValue_Prio_descriptor(), value);
}
inline bool PropertyAndValue_Prio_Parse(
    const ::std::string& name, PropertyAndValue_Prio* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PropertyAndValue_Prio>(
    PropertyAndValue_Prio_descriptor(), name, value);
}
enum PropertyAndValue_ValueId {
  PropertyAndValue_ValueId_ALL = 1,
  PropertyAndValue_ValueId_DYNAMIC = 2,
  PropertyAndValue_ValueId_YELLOW = 3,
  PropertyAndValue_ValueId_GRAYTEXT = 4,
  PropertyAndValue_ValueId_COLOR_DODGE = 5,
  PropertyAndValue_ValueId_DARKSEAGREEN = 6,
  PropertyAndValue_ValueId_DISC = 7,
  PropertyAndValue_ValueId_EXTRA_CONDENSED = 8,
  PropertyAndValue_ValueId_HANGING = 9,
  PropertyAndValue_ValueId_STEP_MIDDLE = 10,
  PropertyAndValue_ValueId_MENULIST = 11,
  PropertyAndValue_ValueId_ROW = 12,
  PropertyAndValue_ValueId_PRE_WRAP = 13,
  PropertyAndValue_ValueId_INLINE_BLOCK = 14,
  PropertyAndValue_ValueId_STEP_START = 15,
  PropertyAndValue_ValueId_ISOLATE_OVERRIDE = 16,
  PropertyAndValue_ValueId_SWAP = 17,
  PropertyAndValue_ValueId_RTL = 18,
  PropertyAndValue_ValueId_CRIMSON = 19,
  PropertyAndValue_ValueId_TB = 20,
  PropertyAndValue_ValueId_COMMON_LIGATURES = 21,
  PropertyAndValue_ValueId__WEBKIT_MIN_CONTENT = 22,
  PropertyAndValue_ValueId_BROWN = 23,
  PropertyAndValue_ValueId_KHMER = 24,
  PropertyAndValue_ValueId_INFINITE = 25,
  PropertyAndValue_ValueId_TABLE_HEADER_GROUP = 26,
  PropertyAndValue_ValueId_BEFORE_EDGE = 27,
  PropertyAndValue_ValueId_READ_WRITE = 28,
  PropertyAndValue_ValueId_RL = 29,
  PropertyAndValue_ValueId_WAVY = 30,
  PropertyAndValue_ValueId_PROPORTIONAL_WIDTH = 31,
  PropertyAndValue_ValueId_NO_DROP = 32,
  PropertyAndValue_ValueId_CYAN = 33,
  PropertyAndValue_ValueId_DIFFERENCE = 34,
  PropertyAndValue_ValueId_EXACT = 35,
  PropertyAndValue_ValueId_SQUARE_BUTTON = 36,
  PropertyAndValue_ValueId_SKYBLUE = 37,
  PropertyAndValue_ValueId__WEBKIT_ISOLATE_OVERRIDE = 38,
  PropertyAndValue_ValueId_TABLE_ROW_GROUP = 39,
  PropertyAndValue_ValueId_DARKGRAY = 40,
  PropertyAndValue_ValueId_BUTTON = 41,
  PropertyAndValue_ValueId_ETHIOPIC_HALEHAME_AM = 42,
  PropertyAndValue_ValueId_LARGE = 43,
  PropertyAndValue_ValueId_LIGHTPINK = 44,
  PropertyAndValue_ValueId_CROSSHAIR = 45,
  PropertyAndValue_ValueId_TEAL = 46,
  PropertyAndValue_ValueId_FILL_BOX = 47,
  PropertyAndValue_ValueId_SMALL = 48,
  PropertyAndValue_ValueId_MEDIA_SLIDERTHUMB = 49,
  PropertyAndValue_ValueId_ROUND = 50,
  PropertyAndValue_ValueId__INTERNAL_MEDIA_SUBTITLES_ICON = 51,
  PropertyAndValue_ValueId_MEDIA_PLAY_BUTTON = 52,
  PropertyAndValue_ValueId_SMALLER = 53,
  PropertyAndValue_ValueId_JIS04 = 54,
  PropertyAndValue_ValueId_LR_TB = 55,
  PropertyAndValue_ValueId_LIGHTGOLDENRODYELLOW = 56,
  PropertyAndValue_ValueId_LAVENDER = 57,
  PropertyAndValue_ValueId_ULTRA_EXPANDED = 58,
  PropertyAndValue_ValueId_DIMGREY = 59,
  PropertyAndValue_ValueId_DIAGONAL_FRACTIONS = 60,
  PropertyAndValue_ValueId_BLUE = 61,
  PropertyAndValue_ValueId_XOR = 62,
  PropertyAndValue_ValueId_SUB = 63,
  PropertyAndValue_ValueId_TELUGU = 64,
  PropertyAndValue_ValueId_CRISPEDGES = 65,
  PropertyAndValue_ValueId__WEBKIT_MINI_CONTROL = 66,
  PropertyAndValue_ValueId_ZOOM_OUT = 67,
  PropertyAndValue_ValueId_SEARCHFIELD = 68,
  PropertyAndValue_ValueId_CELL = 69,
  PropertyAndValue_ValueId_GUJARATI = 70,
  PropertyAndValue_ValueId_ABOVE = 71,
  PropertyAndValue_ValueId_NO_PUNCTUATION = 72,
  PropertyAndValue_ValueId_NEW = 73,
  PropertyAndValue_ValueId_FILLED = 74,
  PropertyAndValue_ValueId_USE_SCRIPT = 75,
  PropertyAndValue_ValueId_CONDENSED = 76,
  PropertyAndValue_ValueId_LOOSE = 77,
  PropertyAndValue_ValueId_SOURCE_OUT = 78,
  PropertyAndValue_ValueId_OBJECTS = 79,
  PropertyAndValue_ValueId_SLIDER_HORIZONTAL = 80,
  PropertyAndValue_ValueId_ROW_RESIZE = 81,
  PropertyAndValue_ValueId_BREAK_ALL = 82,
  PropertyAndValue_ValueId_WAIT = 83,
  PropertyAndValue_ValueId_MEDIA_EXIT_FULLSCREEN_BUTTON = 84,
  PropertyAndValue_ValueId_KOREAN_HANGUL_FORMAL = 85,
  PropertyAndValue_ValueId_FLORALWHITE = 86,
  PropertyAndValue_ValueId_RESET_SIZE = 87,
  PropertyAndValue_ValueId_ZOOM_IN = 88,
  PropertyAndValue_ValueId__WEBKIT_GRABBING = 89,
  PropertyAndValue_ValueId_LARGER = 90,
  PropertyAndValue_ValueId_MAX_CONTENT = 91,
  PropertyAndValue_ValueId_SRGB = 92,
  PropertyAndValue_ValueId_LITERAL_PUNCTUATION = 93,
  PropertyAndValue_ValueId_WINDOWFRAME = 94,
  PropertyAndValue_ValueId_SUBPIXEL_ANTIALIASED = 95,
  PropertyAndValue_ValueId_BUTTONHIGHLIGHT = 96,
  PropertyAndValue_ValueId_HUE = 97,
  PropertyAndValue_ValueId_PIXELATED = 98,
  PropertyAndValue_ValueId_STICKY = 99,
  PropertyAndValue_ValueId_GREENYELLOW = 100,
  PropertyAndValue_ValueId_LINEARRGB = 101,
  PropertyAndValue_ValueId_LIGHTSEAGREEN = 102,
  PropertyAndValue_ValueId_LOGICAL = 103,
  PropertyAndValue_ValueId__WEBKIT_RIGHT = 104,
  PropertyAndValue_ValueId_SIENNA = 105,
  PropertyAndValue_ValueId_FLOW_ROOT = 106,
  PropertyAndValue_ValueId_OPTIMIZESPEED = 107,
  PropertyAndValue_ValueId_KOREAN_HANJA_FORMAL = 108,
  PropertyAndValue_ValueId_NOWRAP = 109,
  PropertyAndValue_ValueId_X_SMALL = 110,
  PropertyAndValue_ValueId_LANDSCAPE = 111,
  PropertyAndValue_ValueId_LIME = 112,
  PropertyAndValue_ValueId_X_LARGE = 113,
  PropertyAndValue_ValueId_NS_RESIZE = 114,
  PropertyAndValue_ValueId_APPWORKSPACE = 115,
  PropertyAndValue_ValueId_PERU = 116,
  PropertyAndValue_ValueId_ALL_PETITE_CAPS = 117,
  PropertyAndValue_ValueId_BLACK = 118,
  PropertyAndValue_ValueId_XX_SMALL = 119,
  PropertyAndValue_ValueId_ALL_SCROLL = 120,
  PropertyAndValue_ValueId_DARKSLATEGRAY = 121,
  PropertyAndValue_ValueId_FLAT = 122,
  PropertyAndValue_ValueId_GEORGIAN = 123,
  PropertyAndValue_ValueId_UNDER = 124,
  PropertyAndValue_ValueId_LEMONCHIFFON = 125,
  PropertyAndValue_ValueId_CHOCOLATE = 126,
  PropertyAndValue_ValueId_PRE_LINE = 127,
  PropertyAndValue_ValueId_CONTEXT_MENU = 128,
  PropertyAndValue_ValueId_DARKGREY = 129,
  PropertyAndValue_ValueId_VIEW_BOX = 130,
  PropertyAndValue_ValueId_OLIVE = 131,
  PropertyAndValue_ValueId__WEBKIT_PLAINTEXT = 132,
  PropertyAndValue_ValueId_EXTRA_EXPANDED = 133,
  PropertyAndValue_ValueId_ANTIQUEWHITE = 134,
  PropertyAndValue_ValueId_NONE = 135,
  PropertyAndValue_ValueId_MOCCASIN = 136,
  PropertyAndValue_ValueId_LOCAL = 137,
  PropertyAndValue_ValueId_STROKE = 138,
  PropertyAndValue_ValueId_DARKSLATEBLUE = 139,
  PropertyAndValue_ValueId_LIGHTSKYBLUE = 140,
  PropertyAndValue_ValueId_CONTENT_BOX = 141,
  PropertyAndValue_ValueId_THIN = 142,
  PropertyAndValue_ValueId_DEEPPINK = 143,
  PropertyAndValue_ValueId_SPELL_OUT = 144,
  PropertyAndValue_ValueId_NON_SCALING_STROKE = 145,
  PropertyAndValue_ValueId_SLIDER_VERTICAL = 146,
  PropertyAndValue_ValueId__WEBKIT_BOX = 147,
  PropertyAndValue_ValueId_PLUM = 148,
  PropertyAndValue_ValueId__INTERNAL_MEDIA_OVERLAY_CAST_OFF_BUTTON = 149,
  PropertyAndValue_ValueId_INACTIVECAPTIONTEXT = 150,
  PropertyAndValue_ValueId_DODGERBLUE = 151,
  PropertyAndValue_ValueId_THREEDSHADOW = 152,
  PropertyAndValue_ValueId_PETITE_CAPS = 153,
  PropertyAndValue_ValueId_PAUSED = 154,
  PropertyAndValue_ValueId__WEBKIT_LINK = 155,
  PropertyAndValue_ValueId_MESSAGE_BOX = 156,
  PropertyAndValue_ValueId__INTERNAL_CENTER = 157,
  PropertyAndValue_ValueId_TRIANGLE = 158,
  PropertyAndValue_ValueId_MAGENTA = 159,
  PropertyAndValue_ValueId_TAN = 160,
  PropertyAndValue_ValueId_ABSOLUTE = 161,
  PropertyAndValue_ValueId_PINK = 162,
  PropertyAndValue_ValueId_HIRAGANA_IROHA = 163,
  PropertyAndValue_ValueId_FARTHEST_SIDE = 164,
  PropertyAndValue_ValueId_PALEVIOLETRED = 165,
  PropertyAndValue_ValueId_CLOSE_QUOTE = 166,
  PropertyAndValue_ValueId_THREEDLIGHTSHADOW = 167,
  PropertyAndValue_ValueId_CAPTION = 168,
  PropertyAndValue_ValueId_POWDERBLUE = 169,
  PropertyAndValue_ValueId_TABLE_COLUMN = 170,
  PropertyAndValue_ValueId_SOURCE_ATOP = 171,
  PropertyAndValue_ValueId_HIRAGANA = 172,
  PropertyAndValue_ValueId_UPPER_ARMENIAN = 173,
  PropertyAndValue_ValueId_WINDOWTEXT = 174,
  PropertyAndValue_ValueId_FULL_WIDTH = 175,
  PropertyAndValue_ValueId_PROGRESS_BAR_VALUE = 176,
  PropertyAndValue_ValueId_MIDNIGHTBLUE = 177,
  PropertyAndValue_ValueId_INLINE_FLEX = 178,
  PropertyAndValue_ValueId_ECONOMY = 179,
  PropertyAndValue_ValueId_LAO = 180,
  PropertyAndValue_ValueId_CLONE = 181,
  PropertyAndValue_ValueId_AFTER = 182,
  PropertyAndValue_ValueId_STATUS_BAR = 183,
  PropertyAndValue_ValueId_LOWERCASE = 184,
  PropertyAndValue_ValueId_MIXED = 185,
  PropertyAndValue_ValueId_LINE_THROUGH = 186,
  PropertyAndValue_ValueId_LIGHTSLATEGRAY = 187,
  PropertyAndValue_ValueId_SMALL_CAPTION = 188,
  PropertyAndValue_ValueId_INFOBACKGROUND = 189,
  PropertyAndValue_ValueId_DISCARD = 190,
  PropertyAndValue_ValueId_CAPTIONTEXT = 191,
  PropertyAndValue_ValueId_END = 192,
  PropertyAndValue_ValueId__INTERNAL_INACTIVE_LIST_BOX_SELECTION_TEXT = 193,
  PropertyAndValue_ValueId_CAPITALIZE = 194,
  PropertyAndValue_ValueId_MEDIUMSEAGREEN = 195,
  PropertyAndValue_ValueId_TOMATO = 196,
  PropertyAndValue_ValueId_CADETBLUE = 197,
  PropertyAndValue_ValueId_DECIMAL_LEADING_ZERO = 198,
  PropertyAndValue_ValueId_SANS_SERIF = 199,
  PropertyAndValue_ValueId_LINEN = 200,
  PropertyAndValue_ValueId_GREEN = 201,
  PropertyAndValue_ValueId_INACTIVEBORDER = 202,
  PropertyAndValue_ValueId_INLINE = 203,
  PropertyAndValue_ValueId_FALLBACK = 204,
  PropertyAndValue_ValueId_PEACHPUFF = 205,
  PropertyAndValue_ValueId__WEBKIT_MAX_CONTENT = 206,
  PropertyAndValue_ValueId_PLUS_LIGHTER = 207,
  PropertyAndValue_ValueId_CHECKBOX = 208,
  PropertyAndValue_ValueId_HELP = 209,
  PropertyAndValue_ValueId_OBLIQUE = 210,
  PropertyAndValue_ValueId_MOVE = 211,
  PropertyAndValue_ValueId_METER = 212,
  PropertyAndValue_ValueId_LEDGER = 213,
  PropertyAndValue_ValueId_SLATEGREY = 214,
  PropertyAndValue_ValueId_MEDIA_TIME_REMAINING_DISPLAY = 215,
  PropertyAndValue_ValueId_URDU = 216,
  PropertyAndValue_ValueId_POINTER = 217,
  PropertyAndValue_ValueId_BEFORE = 218,
  PropertyAndValue_ValueId_DARKSLATEGREY = 219,
  PropertyAndValue_ValueId__WEBKIT_CONTROL = 220,
  PropertyAndValue_ValueId__WEBKIT_INLINE_BOX = 221,
  PropertyAndValue_ValueId_HARD_LIGHT = 222,
  PropertyAndValue_ValueId_MITER = 223,
  PropertyAndValue_ValueId_ORIYA = 224,
  PropertyAndValue_ValueId_UPPER_LATIN = 225,
  PropertyAndValue_ValueId_WINDOW = 226,
  PropertyAndValue_ValueId_MEDIUMBLUE = 227,
  PropertyAndValue_ValueId_LR = 228,
  PropertyAndValue_ValueId_ORANGE = 229,
  PropertyAndValue_ValueId_HIDDEN = 230,
  PropertyAndValue_ValueId__INTERNAL_ACTIVE_LIST_BOX_SELECTION = 231,
  PropertyAndValue_ValueId_BOLDER = 232,
  PropertyAndValue_ValueId__WEBKIT_CENTER = 233,
  PropertyAndValue_ValueId_SAFE = 234,
  PropertyAndValue_ValueId_HIGHLIGHTTEXT = 235,
  PropertyAndValue_ValueId_ACCUMULATE = 236,
  PropertyAndValue_ValueId_FLEX_END = 237,
  PropertyAndValue_ValueId_TRANSPARENT = 238,
  PropertyAndValue_ValueId__INTERNAL_MEDIA_REMOTING_CAST_ICON = 239,
  PropertyAndValue_ValueId_GOLDENROD = 240,
  PropertyAndValue_ValueId_HISTORICAL_LIGATURES = 241,
  PropertyAndValue_ValueId_DARKVIOLET = 242,
  PropertyAndValue_ValueId_ALWAYS = 243,
  PropertyAndValue_ValueId_DECIMAL = 244,
  PropertyAndValue_ValueId_BLOCK_AXIS = 245,
  PropertyAndValue_ValueId_SCROLLBAR = 246,
  PropertyAndValue_ValueId_EW_RESIZE = 247,
  PropertyAndValue_ValueId_DARKMAGENTA = 248,
  PropertyAndValue_ValueId_NOT_ALLOWED = 249,
  PropertyAndValue_ValueId_EASE_IN = 250,
  PropertyAndValue_ValueId_TABLE_COLUMN_GROUP = 251,
  PropertyAndValue_ValueId_SQUARE = 252,
  PropertyAndValue_ValueId_NO_CONTEXTUAL = 253,
  PropertyAndValue_ValueId__WEBKIT_FILL_AVAILABLE = 254,
  PropertyAndValue_ValueId_FRAMES = 255,
  PropertyAndValue_ValueId_PERSIAN = 256,
  PropertyAndValue_ValueId_STATIC = 257,
  PropertyAndValue_ValueId_NAVY = 258,
  PropertyAndValue_ValueId_VISIBLEPAINTED = 259,
  PropertyAndValue_ValueId_THICK = 260,
  PropertyAndValue_ValueId_SIMP_CHINESE_FORMAL = 261,
  PropertyAndValue_ValueId_GHOSTWHITE = 262,
  PropertyAndValue_ValueId_SPACE = 263,
  PropertyAndValue_ValueId_DARKKHAKI = 264,
  PropertyAndValue_ValueId_KEEP_ALL = 265,
  PropertyAndValue_ValueId_CONTENT = 266,
  PropertyAndValue_ValueId__INTERNAL_MEDIA_DOWNLOAD_BUTTON = 267,
  PropertyAndValue_ValueId_UPPER_ROMAN = 268,
  PropertyAndValue_ValueId_CORNSILK = 269,
  PropertyAndValue_ValueId_RED = 270,
  PropertyAndValue_ValueId_NO_CHANGE = 271,
  PropertyAndValue_ValueId_LINEAR = 272,
  PropertyAndValue_ValueId__INTERNAL_MEDIA_CONTROL = 273,
  PropertyAndValue_ValueId_SIDEWAYS = 274,
  PropertyAndValue_ValueId_CONTAIN = 275,
  PropertyAndValue_ValueId_KATAKANA_IROHA = 276,
  PropertyAndValue_ValueId_STEELBLUE = 277,
  PropertyAndValue_ValueId_DOUBLE_CIRCLE = 278,
  PropertyAndValue_ValueId_ANTIALIASED = 279,
  PropertyAndValue_ValueId_ALICEBLUE = 280,
  PropertyAndValue_ValueId_LIGHTSLATEGREY = 281,
  PropertyAndValue_ValueId_GEOMETRICPRECISION = 282,
  PropertyAndValue_ValueId_GAINSBORO = 283,
  PropertyAndValue_ValueId_INLINE_TABLE = 284,
  PropertyAndValue_ValueId_LTR = 285,
  PropertyAndValue_ValueId_BACKWARDS = 286,
  PropertyAndValue_ValueId_S_RESIZE = 287,
  PropertyAndValue_ValueId_LIGHTGREY = 288,
  PropertyAndValue_ValueId_MEDIA_MUTE_BUTTON = 289,
  PropertyAndValue_ValueId_LISTITEM = 290,
  PropertyAndValue_ValueId_MISTYROSE = 291,
  PropertyAndValue_ValueId_DARKSALMON = 292,
  PropertyAndValue_ValueId_SIDEWAYS_RIGHT = 293,
  PropertyAndValue_ValueId_JIS83 = 294,
  PropertyAndValue_ValueId_MEDIUMSPRINGGREEN = 295,
  PropertyAndValue_ValueId_CAPS_LOCK_INDICATOR = 296,
  PropertyAndValue_ValueId_SLIDERTHUMB_HORIZONTAL = 297,
  PropertyAndValue_ValueId_FORWARDS = 298,
  PropertyAndValue_ValueId_UPPER_ALPHA = 299,
  PropertyAndValue_ValueId_BLINK = 300,
  PropertyAndValue_ValueId_FANTASY = 301,
  PropertyAndValue_ValueId_SIMPLIFIED = 302,
  PropertyAndValue_ValueId_ORANGERED = 303,
  PropertyAndValue_ValueId_NAVAJOWHITE = 304,
  PropertyAndValue_ValueId_OPEN = 305,
  PropertyAndValue_ValueId_HORIZONTAL = 306,
  PropertyAndValue_ValueId_SLATEGRAY = 307,
  PropertyAndValue_ValueId_ACTIVECAPTION = 308,
  PropertyAndValue_ValueId_KOREAN_HANJA_INFORMAL = 309,
  PropertyAndValue_ValueId_STRICT = 310,
  PropertyAndValue_ValueId_LIGHTCYAN = 311,
  PropertyAndValue_ValueId_TOP = 312,
  PropertyAndValue_ValueId__WEBKIT_PICTOGRAPH = 313,
  PropertyAndValue_ValueId_WHITE = 314,
  PropertyAndValue_ValueId_TEXT_AFTER_EDGE = 315,
  PropertyAndValue_ValueId_LIGHTGRAY = 316,
  PropertyAndValue_ValueId_COLLAPSE = 317,
  PropertyAndValue_ValueId_HOVER = 318,
  PropertyAndValue_ValueId__WEBKIT_OPTIMIZE_CONTRAST = 319,
  PropertyAndValue_ValueId_PADDING = 320,
  PropertyAndValue_ValueId_BUTT = 321,
  PropertyAndValue_ValueId_OFF = 322,
  PropertyAndValue_ValueId_THAI = 323,
  PropertyAndValue_ValueId_COPY = 324,
  PropertyAndValue_ValueId_HOTPINK = 325,
  PropertyAndValue_ValueId_DOUBLE = 326,
  PropertyAndValue_ValueId_LOWER_GREEK = 327,
  PropertyAndValue_ValueId_GREY = 328,
  PropertyAndValue_ValueId_MEDIA_VOLUME_SLIDER_CONTAINER = 329,
  PropertyAndValue_ValueId__WEBKIT_INLINE_FLEX = 330,
  PropertyAndValue_ValueId_SPACE_EVENLY = 331,
  PropertyAndValue_ValueId_ACTIVEBORDER = 332,
  PropertyAndValue_ValueId_BROWSER = 333,
  PropertyAndValue_ValueId_PRE = 334,
  PropertyAndValue_ValueId_UNICASE = 335,
  PropertyAndValue_ValueId_SIMP_CHINESE_INFORMAL = 336,
  PropertyAndValue_ValueId_CLIP = 337,
  PropertyAndValue_ValueId_CLOSEST_CORNER = 338,
  PropertyAndValue_ValueId_PLAINTEXT = 339,
  PropertyAndValue_ValueId_NO_REPEAT = 340,
  PropertyAndValue_ValueId_TEXT_TOP = 341,
  PropertyAndValue_ValueId_JIS78 = 342,
  PropertyAndValue_ValueId_XX_LARGE = 343,
  PropertyAndValue_ValueId_RL_TB = 344,
  PropertyAndValue_ValueId_TABLE_ROW = 345,
  PropertyAndValue_ValueId_MEDIUM = 346,
  PropertyAndValue_ValueId_MONGOLIAN = 347,
  PropertyAndValue_ValueId_KATAKANA = 348,
  PropertyAndValue_ValueId_ELEMENT = 349,
  PropertyAndValue_ValueId_BORDER = 350,
  PropertyAndValue_ValueId_ROSYBROWN = 351,
  PropertyAndValue_ValueId_PROGRESS_BAR = 352,
  PropertyAndValue_ValueId_WHITESMOKE = 353,
  PropertyAndValue_ValueId_LIGHTBLUE = 354,
  PropertyAndValue_ValueId__WEBKIT_LEFT = 355,
  PropertyAndValue_ValueId_NO_COMMON_LIGATURES = 356,
  PropertyAndValue_ValueId_LISTBOX = 357,
  PropertyAndValue_ValueId_ISOLATE = 358,
  PropertyAndValue_ValueId_SNOW = 359,
  PropertyAndValue_ValueId_STEP_END = 360,
  PropertyAndValue_ValueId_ETHIOPIC_HALEHAME_TI_ER = 361,
  PropertyAndValue_ValueId_ETHIOPIC_HALEHAME_TI_ET = 362,
  PropertyAndValue_ValueId_MULTIPLE = 363,
  PropertyAndValue_ValueId__INTERNAL_INACTIVE_LIST_BOX_SELECTION = 364,
  PropertyAndValue_ValueId_NORMAL = 365,
  PropertyAndValue_ValueId_BLUEVIOLET = 366,
  PropertyAndValue_ValueId_SALMON = 367,
  PropertyAndValue_ValueId_LOWER_ALPHA = 368,
  PropertyAndValue_ValueId_OLDLACE = 369,
  PropertyAndValue_ValueId_LETTER = 370,
  PropertyAndValue_ValueId_BORDER_BOX = 371,
  PropertyAndValue_ValueId_ALPHA = 372,
  PropertyAndValue_ValueId_TIBETAN = 373,
  PropertyAndValue_ValueId_ICON = 374,
  PropertyAndValue_ValueId_FLEX_START = 375,
  PropertyAndValue_ValueId_TEXTAREA = 376,
  PropertyAndValue_ValueId_W_RESIZE = 377,
  PropertyAndValue_ValueId_CLEAR = 378,
  PropertyAndValue_ValueId_COVER = 379,
  PropertyAndValue_ValueId_FARTHEST_CORNER = 380,
  PropertyAndValue_ValueId_MENULIST_TEXTFIELD = 381,
  PropertyAndValue_ValueId_TRADITIONAL = 382,
  PropertyAndValue_ValueId_LEFT = 383,
  PropertyAndValue_ValueId_DOT = 384,
  PropertyAndValue_ValueId_LUMINANCE = 385,
  PropertyAndValue_ValueId_GOLD = 386,
  PropertyAndValue_ValueId_SHOW = 387,
  PropertyAndValue_ValueId_TEXT = 388,
  PropertyAndValue_ValueId__WEBKIT_MATCH_PARENT = 389,
  PropertyAndValue_ValueId_RADIO = 390,
  PropertyAndValue_ValueId_CAMBODIAN = 391,
  PropertyAndValue_ValueId_REPEAT_X = 392,
  PropertyAndValue_ValueId_REPEAT_Y = 393,
  PropertyAndValue_ValueId_FINE = 394,
  PropertyAndValue_ValueId_TEXTFIELD = 395,
  PropertyAndValue_ValueId_FROM_IMAGE = 396,
  PropertyAndValue_ValueId_LINING_NUMS = 397,
  PropertyAndValue_ValueId_MENU = 398,
  PropertyAndValue_ValueId_PROPORTIONAL_NUMS = 399,
  PropertyAndValue_ValueId_SOURCE_OVER = 400,
  PropertyAndValue_ValueId_NE_RESIZE = 401,
  PropertyAndValue_ValueId_PAPAYAWHIP = 402,
  PropertyAndValue_ValueId_SOURCE_IN = 403,
  PropertyAndValue_ValueId_SE_RESIZE = 404,
  PropertyAndValue_ValueId_CIRCLE = 405,
  PropertyAndValue_ValueId_DESTINATION_OUT = 406,
  PropertyAndValue_ValueId_THREEDFACE = 407,
  PropertyAndValue_ValueId_OVER = 408,
  PropertyAndValue_ValueId_DISTRIBUTE = 409,
  PropertyAndValue_ValueId_INACTIVECAPTION = 410,
  PropertyAndValue_ValueId_LIGHTEN = 411,
  PropertyAndValue_ValueId__WEBKIT_FIT_CONTENT = 412,
  PropertyAndValue_ValueId_LIGHTER = 413,
  PropertyAndValue_ValueId_CONTEXTUAL = 414,
  PropertyAndValue_ValueId_GRAY = 415,
  PropertyAndValue_ValueId_DARKTURQUOISE = 416,
  PropertyAndValue_ValueId_E_RESIZE = 417,
  PropertyAndValue_ValueId_LUMINOSITY = 418,
  PropertyAndValue_ValueId_LIST_ITEM = 419,
  PropertyAndValue_ValueId_LIMEGREEN = 420,
  PropertyAndValue_ValueId_FIXED = 421,
  PropertyAndValue_ValueId_MIN_CONTENT = 422,
  PropertyAndValue_ValueId_MEDIA_SLIDER = 423,
  PropertyAndValue_ValueId_VISIBLESTROKE = 424,
  PropertyAndValue_ValueId_CUBIC_BEZIER = 425,
  PropertyAndValue_ValueId_CLOSEST_SIDE = 426,
  PropertyAndValue_ValueId_RELATIVE = 427,
  PropertyAndValue_ValueId_NO_OPEN_QUOTE = 428,
  PropertyAndValue_ValueId_THISTLE = 429,
  PropertyAndValue_ValueId_VIOLET = 430,
  PropertyAndValue_ValueId_PORTRAIT = 431,
  PropertyAndValue_ValueId_FULLSCREEN = 432,
  PropertyAndValue_ValueId_HONEYDEW = 433,
  PropertyAndValue_ValueId_ON_DEMAND = 434,
  PropertyAndValue_ValueId_CORNFLOWERBLUE = 435,
  PropertyAndValue_ValueId_DARKBLUE = 436,
  PropertyAndValue_ValueId_OUTSIDE = 437,
  PropertyAndValue_ValueId_PROGRESS = 438,
  PropertyAndValue_ValueId_MEDIUMPURPLE = 439,
  PropertyAndValue_ValueId_DARKCYAN = 440,
  PropertyAndValue_ValueId_VERTICAL = 441,
  PropertyAndValue_ValueId_MONOSPACE = 442,
  PropertyAndValue_ValueId_BREAK_WORD = 443,
  PropertyAndValue_ValueId_SCREEN = 444,
  PropertyAndValue_ValueId_REBECCAPURPLE = 445,
  PropertyAndValue_ValueId_DARKRED = 446,
  PropertyAndValue_ValueId_VERTICAL_LR = 447,
  PropertyAndValue_ValueId_OPTIMIZEQUALITY = 448,
  PropertyAndValue_ValueId_ARMENIAN = 449,
  PropertyAndValue_ValueId_NWSE_RESIZE = 450,
  PropertyAndValue_ValueId_TEXT_BEFORE_EDGE = 451,
  PropertyAndValue_ValueId_OPTIONAL = 452,
  PropertyAndValue_ValueId_EXCLUSION = 453,
  PropertyAndValue_ValueId_BOTH = 454,
  PropertyAndValue_ValueId_MEDIUMTURQUOISE = 455,
  PropertyAndValue_ValueId_LOWER_ROMAN = 456,
  PropertyAndValue_ValueId_REVERSE = 457,
  PropertyAndValue_ValueId_HANGUL_CONSONANT = 458,
  PropertyAndValue_ValueId_SOFT_LIGHT = 459,
  PropertyAndValue_ValueId_AQUA = 460,
  PropertyAndValue_ValueId_BUTTON_BEVEL = 461,
  PropertyAndValue_ValueId_GURMUKHI = 462,
  PropertyAndValue_ValueId_LIGHTSTEELBLUE = 463,
  PropertyAndValue_ValueId_SMALL_CAPS = 464,
  PropertyAndValue_ValueId_N_RESIZE = 465,
  PropertyAndValue_ValueId_TABLE_FOOTER_GROUP = 466,
  PropertyAndValue_ValueId_DESTINATION_IN = 467,
  PropertyAndValue_ValueId_OLIVEDRAB = 468,
  PropertyAndValue_ValueId_READ_WRITE_PLAINTEXT_ONLY = 469,
  PropertyAndValue_ValueId_PADDING_BOX = 470,
  PropertyAndValue_ValueId_COL_RESIZE = 471,
  PropertyAndValue_ValueId__INTERNAL_MEDIA_TRACK_SELECTION_CHECKMARK = 472,
  PropertyAndValue_ValueId_LOWER_LATIN = 473,
  PropertyAndValue_ValueId__WEBKIT_NOWRAP = 474,
  PropertyAndValue_ValueId_TABLE = 475,
  PropertyAndValue_ValueId_BUTTONSHADOW = 476,
  PropertyAndValue_ValueId_PALEGREEN = 477,
  PropertyAndValue_ValueId_JIS90 = 478,
  PropertyAndValue_ValueId_FIT_CONTENT = 479,
  PropertyAndValue_ValueId_STRETCH = 480,
  PropertyAndValue_ValueId_SEASHELL = 481,
  PropertyAndValue_ValueId_THREEDHIGHLIGHT = 482,
  PropertyAndValue_ValueId_VISIBLEFILL = 483,
  PropertyAndValue_ValueId_SPACE_AROUND = 484,
  PropertyAndValue_ValueId_COARSE = 485,
  PropertyAndValue_ValueId_AQUAMARINE = 486,
  PropertyAndValue_ValueId_DIGITS = 487,
  PropertyAndValue_ValueId_CURRENTCOLOR = 488,
  PropertyAndValue_ValueId_PAINTED = 489,
  PropertyAndValue_ValueId_TB_RL = 490,
  PropertyAndValue_ValueId_BUTTONFACE = 491,
  PropertyAndValue_ValueId_LAWNGREEN = 492,
  PropertyAndValue_ValueId_BURLYWOOD = 493,
  PropertyAndValue_ValueId__WEBKIT_SMALL_CONTROL = 494,
  PropertyAndValue_ValueId_SLATEBLUE = 495,
  PropertyAndValue_ValueId_MINTCREAM = 496,
  PropertyAndValue_ValueId_RUBY = 497,
  PropertyAndValue_ValueId_SOLID = 498,
  PropertyAndValue_ValueId_ULTRA_CONDENSED = 499,
  PropertyAndValue_ValueId_EXPANDED = 500,
  PropertyAndValue_ValueId_SADDLEBROWN = 501,
  PropertyAndValue_ValueId_VERTICAL_RL = 502,
  PropertyAndValue_ValueId_SESAME = 503,
  PropertyAndValue_ValueId__WEBKIT_BODY = 504,
  PropertyAndValue_ValueId_DESTINATION_ATOP = 505,
  PropertyAndValue_ValueId_MALAYALAM = 506,
  PropertyAndValue_ValueId_WRAP_REVERSE = 507,
  PropertyAndValue_ValueId_BALANCE = 508,
  PropertyAndValue_ValueId_VERTICAL_RIGHT = 509,
  PropertyAndValue_ValueId_NO_CLOSE_QUOTE = 510,
  PropertyAndValue_ValueId_FLEX = 511,
  PropertyAndValue_ValueId_PUSH_BUTTON = 512,
  PropertyAndValue_ValueId_DARKGOLDENROD = 513,
  PropertyAndValue_ValueId_SATURATION = 514,
  PropertyAndValue_ValueId_MIDDLE = 515,
  PropertyAndValue_ValueId_SANDYBROWN = 516,
  PropertyAndValue_ValueId_HEBREW = 517,
  PropertyAndValue_ValueId_MENUTEXT = 518,
  PropertyAndValue_ValueId_INLINE_AXIS = 519,
  PropertyAndValue_ValueId_BASELINE = 520,
  PropertyAndValue_ValueId__WEBKIT_GRAB = 521,
  PropertyAndValue_ValueId_DARKORANGE = 522,
  PropertyAndValue_ValueId__WEBKIT_FLEX = 523,
  PropertyAndValue_ValueId_NW_RESIZE = 524,
  PropertyAndValue_ValueId_CONTENTS = 525,
  PropertyAndValue_ValueId_AUTO = 526,
  PropertyAndValue_ValueId_MARGIN_BOX = 527,
  PropertyAndValue_ValueId_DOCUMENT = 528,
  PropertyAndValue_ValueId_PALEGOLDENROD = 529,
  PropertyAndValue_ValueId_ORDINAL = 530,
  PropertyAndValue_ValueId_HAND = 531,
  PropertyAndValue_ValueId_RUNNING = 532,
  PropertyAndValue_ValueId_CJK_EARTHLY_BRANCH = 533,
  PropertyAndValue_ValueId_TABLE_CAPTION = 534,
  PropertyAndValue_ValueId_MEDIA_TOGGLE_CLOSED_CAPTIONS_BUTTON = 535,
  PropertyAndValue_ValueId_AFTER_EDGE = 536,
  PropertyAndValue_ValueId_SLIDERTHUMB_VERTICAL = 537,
  PropertyAndValue_ValueId_CENTER = 538,
  PropertyAndValue_ValueId_LIGHTYELLOW = 539,
  PropertyAndValue_ValueId_LAVENDERBLUSH = 540,
  PropertyAndValue_ValueId__INTERNAL_MEDIA_CLOSED_CAPTIONS_ICON = 541,
  PropertyAndValue_ValueId_INHERIT = 542,
  PropertyAndValue_ValueId_MEDIA_CONTROLS_BACKGROUND = 543,
  PropertyAndValue_ValueId_JUSTIFY = 544,
  PropertyAndValue_ValueId_OPTIMIZELEGIBILITY = 545,
  PropertyAndValue_ValueId__WEBKIT_BASELINE_MIDDLE = 546,
  PropertyAndValue_ValueId_INDIGO = 547,
  PropertyAndValue_ValueId_MINIMAL_UI = 548,
  PropertyAndValue_ValueId_FIREBRICK = 549,
  PropertyAndValue_ValueId_INDIANRED = 550,
  PropertyAndValue_ValueId_DARKOLIVEGREEN = 551,
  PropertyAndValue_ValueId_SEMI_EXPANDED = 552,
  PropertyAndValue_ValueId_UNDERLINE = 553,
  PropertyAndValue_ValueId_MYANMAR = 554,
  PropertyAndValue_ValueId_SPACE_BETWEEN = 555,
  PropertyAndValue_ValueId_EASE = 556,
  PropertyAndValue_ValueId_ALTERNATE = 557,
  PropertyAndValue_ValueId_MEDIUMORCHID = 558,
  PropertyAndValue_ValueId_SILVER = 559,
  PropertyAndValue_ValueId_COLOR = 560,
  PropertyAndValue_ValueId_CHARTREUSE = 561,
  PropertyAndValue_ValueId_EASE_IN_OUT = 562,
  PropertyAndValue_ValueId_SPRINGGREEN = 563,
  PropertyAndValue_ValueId_LIGHTSALMON = 564,
  PropertyAndValue_ValueId_TURQUOISE = 565,
  PropertyAndValue_ValueId_HIDE = 566,
  PropertyAndValue_ValueId_HORIZONTAL_TB = 567,
  PropertyAndValue_ValueId_VERTICAL_TEXT = 568,
  PropertyAndValue_ValueId_ALIAS = 569,
  PropertyAndValue_ValueId_GRID = 570,
  PropertyAndValue_ValueId_NO_DISCRETIONARY_LIGATURES = 571,
  PropertyAndValue_ValueId_BACKGROUND = 572,
  PropertyAndValue_ValueId_DEVANAGARI = 573,
  PropertyAndValue_ValueId_TEXT_BOTTOM = 574,
  PropertyAndValue_ValueId_DARKGREEN = 575,
  PropertyAndValue_ValueId_VISIBLE = 576,
  PropertyAndValue_ValueId_TABULAR_NUMS = 577,
  PropertyAndValue_ValueId_MANUAL = 578,
  PropertyAndValue_ValueId_ZOOM = 579,
  PropertyAndValue_ValueId_CJK_HEAVENLY_STEM = 580,
  PropertyAndValue_ValueId_STEPS = 581,
  PropertyAndValue_ValueId_BOUNDING_BOX = 582,
  PropertyAndValue_ValueId_ALPHABETIC = 583,
  PropertyAndValue_ValueId_AFTER_WHITE_SPACE = 584,
  PropertyAndValue_ValueId_ROW_REVERSE = 585,
  PropertyAndValue_ValueId_MEDIA_CURRENT_TIME_DISPLAY = 586,
  PropertyAndValue_ValueId_MATHEMATICAL = 587,
  PropertyAndValue_ValueId_ETHIOPIC_HALEHAME = 588,
  PropertyAndValue_ValueId_RIGHT = 589,
  PropertyAndValue_ValueId_UPPERCASE = 590,
  PropertyAndValue_ValueId__WEBKIT_XXX_LARGE = 591,
  PropertyAndValue_ValueId_B4 = 592,
  PropertyAndValue_ValueId_B5 = 593,
  PropertyAndValue_ValueId_YELLOWGREEN = 594,
  PropertyAndValue_ValueId_MEDIA_CONTROLS_FULLSCREEN_BACKGROUND = 595,
  PropertyAndValue_ValueId_LOWER_ARMENIAN = 596,
  PropertyAndValue_ValueId_ORCHID = 597,
  PropertyAndValue_ValueId_NONZERO = 598,
  PropertyAndValue_ValueId_SLICE = 599,
  PropertyAndValue_ValueId_DENSE = 600,
  PropertyAndValue_ValueId_INTER_WORD = 601,
  PropertyAndValue_ValueId_BOTTOM = 602,
  PropertyAndValue_ValueId_PURPLE = 603,
  PropertyAndValue_ValueId_AVOID = 604,
  PropertyAndValue_ValueId_SEPARATE = 605,
  PropertyAndValue_ValueId_HANGUL = 606,
  PropertyAndValue_ValueId_LEGAL = 607,
  PropertyAndValue_ValueId_ALTERNATE_REVERSE = 608,
  PropertyAndValue_ValueId_PRESERVE_3D = 609,
  PropertyAndValue_ValueId_READ_ONLY = 610,
  PropertyAndValue_ValueId_ELLIPSIS = 611,
  PropertyAndValue_ValueId_MEDIA_OVERLAY_PLAY_BUTTON = 612,
  PropertyAndValue_ValueId_BISQUE = 613,
  PropertyAndValue_ValueId_INFOTEXT = 614,
  PropertyAndValue_ValueId_KHAKI = 615,
  PropertyAndValue_ValueId_WHEAT = 616,
  PropertyAndValue_ValueId_BOLD = 617,
  PropertyAndValue_ValueId_NO_HISTORICAL_LIGATURES = 618,
  PropertyAndValue_ValueId_BIDI_OVERRIDE = 619,
  PropertyAndValue_ValueId_DEEPSKYBLUE = 620,
  PropertyAndValue_ValueId_EASE_OUT = 621,
  PropertyAndValue_ValueId_CJK_IDEOGRAPHIC = 622,
  PropertyAndValue_ValueId_OLDSTYLE_NUMS = 623,
  PropertyAndValue_ValueId_MEDIA_ENTER_FULLSCREEN_BUTTON = 624,
  PropertyAndValue_ValueId_SUPER = 625,
  PropertyAndValue_ValueId_CURSIVE = 626,
  PropertyAndValue_ValueId_ON = 627,
  PropertyAndValue_ValueId_CENTRAL = 628,
  PropertyAndValue_ValueId__INTERNAL_MEDIA_OVERFLOW_BUTTON = 629,
  PropertyAndValue_ValueId_STANDALONE = 630,
  PropertyAndValue_ValueId_COLUMN = 631,
  PropertyAndValue_ValueId_CORAL = 632,
  PropertyAndValue_ValueId_DESTINATION_OVER = 633,
  PropertyAndValue_ValueId_DISCRETIONARY_LIGATURES = 634,
  PropertyAndValue_ValueId_BEIGE = 635,
  PropertyAndValue_ValueId_TABLE_CELL = 636,
  PropertyAndValue_ValueId_AZURE = 637,
  PropertyAndValue_ValueId_TRAD_CHINESE_INFORMAL = 638,
  PropertyAndValue_ValueId_TITLING_CAPS = 639,
  PropertyAndValue_ValueId__WEBKIT_ZOOM_IN = 640,
  PropertyAndValue_ValueId_BLOCK = 641,
  PropertyAndValue_ValueId_OUTSET = 642,
  PropertyAndValue_ValueId_MEDIUMVIOLETRED = 643,
  PropertyAndValue_ValueId_ROYALBLUE = 644,
  PropertyAndValue_ValueId_MENULIST_TEXT = 645,
  PropertyAndValue_ValueId_SW_RESIZE = 646,
  PropertyAndValue_ValueId_MULTIPLY = 647,
  PropertyAndValue_ValueId_THREEDDARKSHADOW = 648,
  PropertyAndValue_ValueId_WRAP = 649,
  PropertyAndValue_ValueId_LIGHTCORAL = 650,
  PropertyAndValue_ValueId_ELLIPSE = 651,
  PropertyAndValue_ValueId__INTERNAL_ACTIVE_LIST_BOX_SELECTION_TEXT = 652,
  PropertyAndValue_ValueId_RIDGE = 653,
  PropertyAndValue_ValueId__WEBKIT_AUTO = 654,
  PropertyAndValue_ValueId__INTERNAL_QUIRK_INHERIT = 655,
  PropertyAndValue_ValueId_INITIAL = 656,
  PropertyAndValue_ValueId_FUCHSIA = 657,
  PropertyAndValue_ValueId_MENULIST_BUTTON = 658,
  PropertyAndValue_ValueId_BLANCHEDALMOND = 659,
  PropertyAndValue_ValueId_CARET = 660,
  PropertyAndValue_ValueId_START = 661,
  PropertyAndValue_ValueId__INTERNAL_MEDIA_CAST_OFF_BUTTON = 662,
  PropertyAndValue_ValueId_ITALIC = 663,
  PropertyAndValue_ValueId_IVORY = 664,
  PropertyAndValue_ValueId_BUTTONTEXT = 665,
  PropertyAndValue_ValueId_SEMI_CONDENSED = 666,
  PropertyAndValue_ValueId_INLINE_GRID = 667,
  PropertyAndValue_ValueId__WEBKIT_ACTIVELINK = 668,
  PropertyAndValue_ValueId_SERIF = 669,
  PropertyAndValue_ValueId_FORESTGREEN = 670,
  PropertyAndValue_ValueId_BENGALI = 671,
  PropertyAndValue_ValueId_UPRIGHT = 672,
  PropertyAndValue_ValueId_RESET = 673,
  PropertyAndValue_ValueId_BEVEL = 674,
  PropertyAndValue_ValueId_IDEOGRAPHIC = 675,
  PropertyAndValue_ValueId_DARKEN = 676,
  PropertyAndValue_ValueId_MEDIA_VOLUME_SLIDERTHUMB = 677,
  PropertyAndValue_ValueId_DEFAULT = 678,
  PropertyAndValue_ValueId_INSIDE = 679,
  PropertyAndValue_ValueId_BELOW = 680,
  PropertyAndValue_ValueId_HIGHLIGHT = 681,
  PropertyAndValue_ValueId_EMBED = 682,
  PropertyAndValue_ValueId_GROOVE = 683,
  PropertyAndValue_ValueId_NESW_RESIZE = 684,
  PropertyAndValue_ValueId_STACKED_FRACTIONS = 685,
  PropertyAndValue_ValueId_UNSAFE = 686,
  PropertyAndValue_ValueId_MAROON = 687,
  PropertyAndValue_ValueId_KANNADA = 688,
  PropertyAndValue_ValueId_SINGLE = 689,
  PropertyAndValue_ValueId_AT = 690,
  PropertyAndValue_ValueId_INK = 691,
  PropertyAndValue_ValueId_ARABIC_INDIC = 692,
  PropertyAndValue_ValueId_MEDIA_VOLUME_SLIDER = 693,
  PropertyAndValue_ValueId_COLUMN_REVERSE = 694,
  PropertyAndValue_ValueId__WEBKIT_ZOOM_OUT = 695,
  PropertyAndValue_ValueId_FILL = 696,
  PropertyAndValue_ValueId_EVENODD = 697,
  PropertyAndValue_ValueId_DOTTED = 698,
  PropertyAndValue_ValueId_DIMGRAY = 699,
  PropertyAndValue_ValueId_DASHED = 700,
  PropertyAndValue_ValueId_SEAGREEN = 701,
  PropertyAndValue_ValueId_TRAD_CHINESE_FORMAL = 702,
  PropertyAndValue_ValueId_MEDIUMSLATEBLUE = 703,
  PropertyAndValue_ValueId_PALETURQUOISE = 704,
  PropertyAndValue_ValueId_INNER_SPIN_BUTTON = 705,
  PropertyAndValue_ValueId_REPEAT = 706,
  PropertyAndValue_ValueId_DARKORCHID = 707,
  PropertyAndValue_ValueId__WEBKIT_ISOLATE = 708,
  PropertyAndValue_ValueId_SEARCHFIELD_CANCEL_BUTTON = 709,
  PropertyAndValue_ValueId_ALL_SMALL_CAPS = 710,
  PropertyAndValue_ValueId_A3 = 711,
  PropertyAndValue_ValueId_A5 = 712,
  PropertyAndValue_ValueId_A4 = 713,
  PropertyAndValue_ValueId_OPEN_QUOTE = 714,
  PropertyAndValue_ValueId_LIGHTGREEN = 715,
  PropertyAndValue_ValueId_SLASHED_ZERO = 716,
  PropertyAndValue_ValueId_COLOR_BURN = 717,
  PropertyAndValue_ValueId_AUTO_FLOW = 718,
  PropertyAndValue_ValueId_OVERLAY = 719,
  PropertyAndValue_ValueId_VISUAL = 720,
  PropertyAndValue_ValueId_SCALE_DOWN = 721,
  PropertyAndValue_ValueId_OVERLINE = 722,
  PropertyAndValue_ValueId_INSET = 723,
  PropertyAndValue_ValueId_MEDIUMAQUAMARINE = 724,
  PropertyAndValue_ValueId_SCROLL = 725,
  PropertyAndValue_ValueId_INVALID_VALUE = 726
};
bool PropertyAndValue_ValueId_IsValid(int value);
const PropertyAndValue_ValueId PropertyAndValue_ValueId_ValueId_MIN = PropertyAndValue_ValueId_ALL;
const PropertyAndValue_ValueId PropertyAndValue_ValueId_ValueId_MAX = PropertyAndValue_ValueId_INVALID_VALUE;
const int PropertyAndValue_ValueId_ValueId_ARRAYSIZE = PropertyAndValue_ValueId_ValueId_MAX + 1;

const ::google::protobuf::EnumDescriptor* PropertyAndValue_ValueId_descriptor();
inline const ::std::string& PropertyAndValue_ValueId_Name(PropertyAndValue_ValueId value) {
  return ::google::protobuf::internal::NameOfEnum(
    PropertyAndValue_ValueId_descriptor(), value);
}
inline bool PropertyAndValue_ValueId_Parse(
    const ::std::string& name, PropertyAndValue_ValueId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PropertyAndValue_ValueId>(
    PropertyAndValue_ValueId_descriptor(), name, value);
}
enum Input_CSSParserMode {
  Input_CSSParserMode_kHTMLStandardMode = 0,
  Input_CSSParserMode_kHTMLQuirksMode = 1,
  Input_CSSParserMode_kSVGAttributeMode = 2,
  Input_CSSParserMode_kCSSViewportRuleMode = 3,
  Input_CSSParserMode_kCSSFontFaceRuleMode = 4,
  Input_CSSParserMode_kUASheetMode = 5
};
bool Input_CSSParserMode_IsValid(int value);
const Input_CSSParserMode Input_CSSParserMode_CSSParserMode_MIN = Input_CSSParserMode_kHTMLStandardMode;
const Input_CSSParserMode Input_CSSParserMode_CSSParserMode_MAX = Input_CSSParserMode_kUASheetMode;
const int Input_CSSParserMode_CSSParserMode_ARRAYSIZE = Input_CSSParserMode_CSSParserMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* Input_CSSParserMode_descriptor();
inline const ::std::string& Input_CSSParserMode_Name(Input_CSSParserMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    Input_CSSParserMode_descriptor(), value);
}
inline bool Input_CSSParserMode_Parse(
    const ::std::string& name, Input_CSSParserMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Input_CSSParserMode>(
    Input_CSSParserMode_descriptor(), name, value);
}
enum Input_SecureContextMode {
  Input_SecureContextMode_kInsecureContext = 0,
  Input_SecureContextMode_kSecureContext = 1
};
bool Input_SecureContextMode_IsValid(int value);
const Input_SecureContextMode Input_SecureContextMode_SecureContextMode_MIN = Input_SecureContextMode_kInsecureContext;
const Input_SecureContextMode Input_SecureContextMode_SecureContextMode_MAX = Input_SecureContextMode_kSecureContext;
const int Input_SecureContextMode_SecureContextMode_ARRAYSIZE = Input_SecureContextMode_SecureContextMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* Input_SecureContextMode_descriptor();
inline const ::std::string& Input_SecureContextMode_Name(Input_SecureContextMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    Input_SecureContextMode_descriptor(), value);
}
inline bool Input_SecureContextMode_Parse(
    const ::std::string& name, Input_SecureContextMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Input_SecureContextMode>(
    Input_SecureContextMode_descriptor(), name, value);
}
enum H {
  ZERO = 48,
  ONE = 49,
  TWO = 50,
  THREE = 51,
  FOUR = 52,
  FIVE = 53,
  SIX = 54,
  SEVEN = 55,
  EIGHT = 56,
  NINE = 57,
  A_UPPER = 65,
  B_UPPER = 66,
  C_UPPER = 67,
  D_UPPER = 68,
  E_UPPER = 69,
  F_UPPER = 70,
  A_LOWER = 97,
  B_LOWER = 98,
  C_LOWER = 99,
  D_LOWER = 100,
  E_LOWER = 101,
  F_LOWER = 102
};
bool H_IsValid(int value);
const H H_MIN = ZERO;
const H H_MAX = F_LOWER;
const int H_ARRAYSIZE = H_MAX + 1;

const ::google::protobuf::EnumDescriptor* H_descriptor();
inline const ::std::string& H_Name(H value) {
  return ::google::protobuf::internal::NameOfEnum(
    H_descriptor(), value);
}
inline bool H_Parse(
    const ::std::string& name, H* value) {
  return ::google::protobuf::internal::ParseNamedEnum<H>(
    H_descriptor(), name, value);
}
enum PseudoType {
  CLASS = 1,
  ELEMENT = 2
};
bool PseudoType_IsValid(int value);
const PseudoType PseudoType_MIN = CLASS;
const PseudoType PseudoType_MAX = ELEMENT;
const int PseudoType_ARRAYSIZE = PseudoType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PseudoType_descriptor();
inline const ::std::string& PseudoType_Name(PseudoType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PseudoType_descriptor(), value);
}
inline bool PseudoType_Parse(
    const ::std::string& name, PseudoType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PseudoType>(
    PseudoType_descriptor(), name, value);
}
enum Combinator {
  NONE = 1,
  DOLLAR = 36,
  COMMA = 44,
  GREATER_THAN = 62,
  PLUS = 43,
  TILDE = 126
};
bool Combinator_IsValid(int value);
const Combinator Combinator_MIN = NONE;
const Combinator Combinator_MAX = TILDE;
const int Combinator_ARRAYSIZE = Combinator_MAX + 1;

const ::google::protobuf::EnumDescriptor* Combinator_descriptor();
inline const ::std::string& Combinator_Name(Combinator value) {
  return ::google::protobuf::internal::NameOfEnum(
    Combinator_descriptor(), value);
}
inline bool Combinator_Parse(
    const ::std::string& name, Combinator* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Combinator>(
    Combinator_descriptor(), name, value);
}
// ===================================================================

class Unicode : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:css_proto_converter.Unicode) */ {
 public:
  Unicode();
  virtual ~Unicode();

  Unicode(const Unicode& from);

  inline Unicode& operator=(const Unicode& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Unicode(Unicode&& from) noexcept
    : Unicode() {
    *this = ::std::move(from);
  }

  inline Unicode& operator=(Unicode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Unicode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Unicode* internal_default_instance() {
    return reinterpret_cast<const Unicode*>(
               &_Unicode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(Unicode* other);
  friend void swap(Unicode& a, Unicode& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Unicode* New() const final {
    return CreateMaybeMessage<Unicode>(NULL);
  }

  Unicode* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Unicode>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Unicode& from);
  void MergeFrom(const Unicode& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Unicode* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .css_proto_converter.UnrepeatedW unrepeated_w = 7;
  bool has_unrepeated_w() const;
  void clear_unrepeated_w();
  static const int kUnrepeatedWFieldNumber = 7;
  private:
  const ::css_proto_converter::UnrepeatedW& _internal_unrepeated_w() const;
  public:
  const ::css_proto_converter::UnrepeatedW& unrepeated_w() const;
  ::css_proto_converter::UnrepeatedW* release_unrepeated_w();
  ::css_proto_converter::UnrepeatedW* mutable_unrepeated_w();
  void set_allocated_unrepeated_w(::css_proto_converter::UnrepeatedW* unrepeated_w);

  // required .css_proto_converter.H ascii_value_1 = 1;
  bool has_ascii_value_1() const;
  void clear_ascii_value_1();
  static const int kAsciiValue1FieldNumber = 1;
  ::css_proto_converter::H ascii_value_1() const;
  void set_ascii_value_1(::css_proto_converter::H value);

  // optional .css_proto_converter.H ascii_value_2 = 2;
  bool has_ascii_value_2() const;
  void clear_ascii_value_2();
  static const int kAsciiValue2FieldNumber = 2;
  ::css_proto_converter::H ascii_value_2() const;
  void set_ascii_value_2(::css_proto_converter::H value);

  // optional .css_proto_converter.H ascii_value_3 = 3;
  bool has_ascii_value_3() const;
  void clear_ascii_value_3();
  static const int kAsciiValue3FieldNumber = 3;
  ::css_proto_converter::H ascii_value_3() const;
  void set_ascii_value_3(::css_proto_converter::H value);

  // optional .css_proto_converter.H ascii_value_4 = 4;
  bool has_ascii_value_4() const;
  void clear_ascii_value_4();
  static const int kAsciiValue4FieldNumber = 4;
  ::css_proto_converter::H ascii_value_4() const;
  void set_ascii_value_4(::css_proto_converter::H value);

  // optional .css_proto_converter.H ascii_value_5 = 5;
  bool has_ascii_value_5() const;
  void clear_ascii_value_5();
  static const int kAsciiValue5FieldNumber = 5;
  ::css_proto_converter::H ascii_value_5() const;
  void set_ascii_value_5(::css_proto_converter::H value);

  // optional .css_proto_converter.H ascii_value_6 = 6;
  bool has_ascii_value_6() const;
  void clear_ascii_value_6();
  static const int kAsciiValue6FieldNumber = 6;
  ::css_proto_converter::H ascii_value_6() const;
  void set_ascii_value_6(::css_proto_converter::H value);

  // @@protoc_insertion_point(class_scope:css_proto_converter.Unicode)
 private:
  void set_has_ascii_value_1();
  void clear_has_ascii_value_1();
  void set_has_ascii_value_2();
  void clear_has_ascii_value_2();
  void set_has_ascii_value_3();
  void clear_has_ascii_value_3();
  void set_has_ascii_value_4();
  void clear_has_ascii_value_4();
  void set_has_ascii_value_5();
  void clear_has_ascii_value_5();
  void set_has_ascii_value_6();
  void clear_has_ascii_value_6();
  void set_has_unrepeated_w();
  void clear_has_unrepeated_w();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::css_proto_converter::UnrepeatedW* unrepeated_w_;
  int ascii_value_1_;
  int ascii_value_2_;
  int ascii_value_3_;
  int ascii_value_4_;
  int ascii_value_5_;
  int ascii_value_6_;
  friend struct ::protobuf_css_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Escape : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:css_proto_converter.Escape) */ {
 public:
  Escape();
  virtual ~Escape();

  Escape(const Escape& from);

  inline Escape& operator=(const Escape& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Escape(Escape&& from) noexcept
    : Escape() {
    *this = ::std::move(from);
  }

  inline Escape& operator=(Escape&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Escape& default_instance();

  enum RhsCase {
    kUnicode = 1,
    kAsciiValue = 2,
    RHS_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Escape* internal_default_instance() {
    return reinterpret_cast<const Escape*>(
               &_Escape_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(Escape* other);
  friend void swap(Escape& a, Escape& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Escape* New() const final {
    return CreateMaybeMessage<Escape>(NULL);
  }

  Escape* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Escape>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Escape& from);
  void MergeFrom(const Escape& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Escape* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Escape_AsciiValue AsciiValue;
  static const AsciiValue SPACE =
    Escape_AsciiValue_SPACE;
  static const AsciiValue EXCLAMATION_POINT =
    Escape_AsciiValue_EXCLAMATION_POINT;
  static const AsciiValue DOUBLE_QUOTE =
    Escape_AsciiValue_DOUBLE_QUOTE;
  static const AsciiValue HASH =
    Escape_AsciiValue_HASH;
  static const AsciiValue DOLLAR =
    Escape_AsciiValue_DOLLAR;
  static const AsciiValue PERCENT =
    Escape_AsciiValue_PERCENT;
  static const AsciiValue AMPERSAND =
    Escape_AsciiValue_AMPERSAND;
  static const AsciiValue APOSTROPHE =
    Escape_AsciiValue_APOSTROPHE;
  static const AsciiValue OPEN_PAREN =
    Escape_AsciiValue_OPEN_PAREN;
  static const AsciiValue CLOSE_PAREN =
    Escape_AsciiValue_CLOSE_PAREN;
  static const AsciiValue STAR =
    Escape_AsciiValue_STAR;
  static const AsciiValue PLUS =
    Escape_AsciiValue_PLUS;
  static const AsciiValue COMMA =
    Escape_AsciiValue_COMMA;
  static const AsciiValue MINUS =
    Escape_AsciiValue_MINUS;
  static const AsciiValue DOT =
    Escape_AsciiValue_DOT;
  static const AsciiValue SLASH =
    Escape_AsciiValue_SLASH;
  static const AsciiValue ZERO =
    Escape_AsciiValue_ZERO;
  static const AsciiValue ONE =
    Escape_AsciiValue_ONE;
  static const AsciiValue TWO =
    Escape_AsciiValue_TWO;
  static const AsciiValue THREE =
    Escape_AsciiValue_THREE;
  static const AsciiValue FOUR =
    Escape_AsciiValue_FOUR;
  static const AsciiValue FIVE =
    Escape_AsciiValue_FIVE;
  static const AsciiValue SIX =
    Escape_AsciiValue_SIX;
  static const AsciiValue SEVEN =
    Escape_AsciiValue_SEVEN;
  static const AsciiValue EIGHT =
    Escape_AsciiValue_EIGHT;
  static const AsciiValue NINE =
    Escape_AsciiValue_NINE;
  static const AsciiValue COLON =
    Escape_AsciiValue_COLON;
  static const AsciiValue SEMI_COLON =
    Escape_AsciiValue_SEMI_COLON;
  static const AsciiValue LESS_THAN =
    Escape_AsciiValue_LESS_THAN;
  static const AsciiValue EQUAL =
    Escape_AsciiValue_EQUAL;
  static const AsciiValue GREATER_THAN =
    Escape_AsciiValue_GREATER_THAN;
  static const AsciiValue QUESTION =
    Escape_AsciiValue_QUESTION;
  static const AsciiValue AT_SIGN =
    Escape_AsciiValue_AT_SIGN;
  static const AsciiValue A_UPPER =
    Escape_AsciiValue_A_UPPER;
  static const AsciiValue B_UPPER =
    Escape_AsciiValue_B_UPPER;
  static const AsciiValue C_UPPER =
    Escape_AsciiValue_C_UPPER;
  static const AsciiValue D_UPPER =
    Escape_AsciiValue_D_UPPER;
  static const AsciiValue E_UPPER =
    Escape_AsciiValue_E_UPPER;
  static const AsciiValue F_UPPER =
    Escape_AsciiValue_F_UPPER;
  static const AsciiValue G_UPPER =
    Escape_AsciiValue_G_UPPER;
  static const AsciiValue H_UPPER =
    Escape_AsciiValue_H_UPPER;
  static const AsciiValue I_UPPER =
    Escape_AsciiValue_I_UPPER;
  static const AsciiValue J_UPPER =
    Escape_AsciiValue_J_UPPER;
  static const AsciiValue K_UPPER =
    Escape_AsciiValue_K_UPPER;
  static const AsciiValue L_UPPER =
    Escape_AsciiValue_L_UPPER;
  static const AsciiValue M_UPPER =
    Escape_AsciiValue_M_UPPER;
  static const AsciiValue N_UPPER =
    Escape_AsciiValue_N_UPPER;
  static const AsciiValue O_UPPER =
    Escape_AsciiValue_O_UPPER;
  static const AsciiValue P_UPPER =
    Escape_AsciiValue_P_UPPER;
  static const AsciiValue Q_UPPER =
    Escape_AsciiValue_Q_UPPER;
  static const AsciiValue R_UPPER =
    Escape_AsciiValue_R_UPPER;
  static const AsciiValue S_UPPER =
    Escape_AsciiValue_S_UPPER;
  static const AsciiValue T_UPPER =
    Escape_AsciiValue_T_UPPER;
  static const AsciiValue U_UPPER =
    Escape_AsciiValue_U_UPPER;
  static const AsciiValue V_UPPER =
    Escape_AsciiValue_V_UPPER;
  static const AsciiValue W_UPPER =
    Escape_AsciiValue_W_UPPER;
  static const AsciiValue X_UPPER =
    Escape_AsciiValue_X_UPPER;
  static const AsciiValue Y_UPPER =
    Escape_AsciiValue_Y_UPPER;
  static const AsciiValue Z_UPPER =
    Escape_AsciiValue_Z_UPPER;
  static const AsciiValue OPEN_BRACKET =
    Escape_AsciiValue_OPEN_BRACKET;
  static const AsciiValue BACKSLASH =
    Escape_AsciiValue_BACKSLASH;
  static const AsciiValue CLOSE_BRACKET =
    Escape_AsciiValue_CLOSE_BRACKET;
  static const AsciiValue CARET =
    Escape_AsciiValue_CARET;
  static const AsciiValue UNDERSCORE =
    Escape_AsciiValue_UNDERSCORE;
  static const AsciiValue BACKTICK =
    Escape_AsciiValue_BACKTICK;
  static const AsciiValue A_LOWER =
    Escape_AsciiValue_A_LOWER;
  static const AsciiValue B_LOWER =
    Escape_AsciiValue_B_LOWER;
  static const AsciiValue C_LOWER =
    Escape_AsciiValue_C_LOWER;
  static const AsciiValue D_LOWER =
    Escape_AsciiValue_D_LOWER;
  static const AsciiValue E_LOWER =
    Escape_AsciiValue_E_LOWER;
  static const AsciiValue F_LOWER =
    Escape_AsciiValue_F_LOWER;
  static const AsciiValue G_LOWER =
    Escape_AsciiValue_G_LOWER;
  static const AsciiValue H_LOWER =
    Escape_AsciiValue_H_LOWER;
  static const AsciiValue I_LOWER =
    Escape_AsciiValue_I_LOWER;
  static const AsciiValue J_LOWER =
    Escape_AsciiValue_J_LOWER;
  static const AsciiValue K_LOWER =
    Escape_AsciiValue_K_LOWER;
  static const AsciiValue L_LOWER =
    Escape_AsciiValue_L_LOWER;
  static const AsciiValue M_LOWER =
    Escape_AsciiValue_M_LOWER;
  static const AsciiValue N_LOWER =
    Escape_AsciiValue_N_LOWER;
  static const AsciiValue O_LOWER =
    Escape_AsciiValue_O_LOWER;
  static const AsciiValue P_LOWER =
    Escape_AsciiValue_P_LOWER;
  static const AsciiValue Q_LOWER =
    Escape_AsciiValue_Q_LOWER;
  static const AsciiValue R_LOWER =
    Escape_AsciiValue_R_LOWER;
  static const AsciiValue S_LOWER =
    Escape_AsciiValue_S_LOWER;
  static const AsciiValue T_LOWER =
    Escape_AsciiValue_T_LOWER;
  static const AsciiValue U_LOWER =
    Escape_AsciiValue_U_LOWER;
  static const AsciiValue V_LOWER =
    Escape_AsciiValue_V_LOWER;
  static const AsciiValue W_LOWER =
    Escape_AsciiValue_W_LOWER;
  static const AsciiValue X_LOWER =
    Escape_AsciiValue_X_LOWER;
  static const AsciiValue Y_LOWER =
    Escape_AsciiValue_Y_LOWER;
  static const AsciiValue Z_LOWER =
    Escape_AsciiValue_Z_LOWER;
  static const AsciiValue OPEN_CURLY_BRACE =
    Escape_AsciiValue_OPEN_CURLY_BRACE;
  static const AsciiValue PIPE =
    Escape_AsciiValue_PIPE;
  static const AsciiValue CLOSE_CURLY_BRACE_ =
    Escape_AsciiValue_CLOSE_CURLY_BRACE_;
  static const AsciiValue TILDE =
    Escape_AsciiValue_TILDE;
  static inline bool AsciiValue_IsValid(int value) {
    return Escape_AsciiValue_IsValid(value);
  }
  static const AsciiValue AsciiValue_MIN =
    Escape_AsciiValue_AsciiValue_MIN;
  static const AsciiValue AsciiValue_MAX =
    Escape_AsciiValue_AsciiValue_MAX;
  static const int AsciiValue_ARRAYSIZE =
    Escape_AsciiValue_AsciiValue_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  AsciiValue_descriptor() {
    return Escape_AsciiValue_descriptor();
  }
  static inline const ::std::string& AsciiValue_Name(AsciiValue value) {
    return Escape_AsciiValue_Name(value);
  }
  static inline bool AsciiValue_Parse(const ::std::string& name,
      AsciiValue* value) {
    return Escape_AsciiValue_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .css_proto_converter.Unicode unicode = 1;
  bool has_unicode() const;
  void clear_unicode();
  static const int kUnicodeFieldNumber = 1;
  private:
  const ::css_proto_converter::Unicode& _internal_unicode() const;
  public:
  const ::css_proto_converter::Unicode& unicode() const;
  ::css_proto_converter::Unicode* release_unicode();
  ::css_proto_converter::Unicode* mutable_unicode();
  void set_allocated_unicode(::css_proto_converter::Unicode* unicode);

  // optional .css_proto_converter.Escape.AsciiValue ascii_value = 2;
  bool has_ascii_value() const;
  void clear_ascii_value();
  static const int kAsciiValueFieldNumber = 2;
  ::css_proto_converter::Escape_AsciiValue ascii_value() const;
  void set_ascii_value(::css_proto_converter::Escape_AsciiValue value);

  void clear_rhs();
  RhsCase rhs_case() const;
  // @@protoc_insertion_point(class_scope:css_proto_converter.Escape)
 private:
  void set_has_unicode();
  void set_has_ascii_value();

  inline bool has_rhs() const;
  inline void clear_has_rhs();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  union RhsUnion {
    RhsUnion() {}
    ::css_proto_converter::Unicode* unicode_;
    int ascii_value_;
  } rhs_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_css_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Nmstart : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:css_proto_converter.Nmstart) */ {
 public:
  Nmstart();
  virtual ~Nmstart();

  Nmstart(const Nmstart& from);

  inline Nmstart& operator=(const Nmstart& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Nmstart(Nmstart&& from) noexcept
    : Nmstart() {
    *this = ::std::move(from);
  }

  inline Nmstart& operator=(Nmstart&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Nmstart& default_instance();

  enum RhsCase {
    kAsciiValue = 1,
    kEscape = 2,
    RHS_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Nmstart* internal_default_instance() {
    return reinterpret_cast<const Nmstart*>(
               &_Nmstart_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(Nmstart* other);
  friend void swap(Nmstart& a, Nmstart& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Nmstart* New() const final {
    return CreateMaybeMessage<Nmstart>(NULL);
  }

  Nmstart* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Nmstart>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Nmstart& from);
  void MergeFrom(const Nmstart& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Nmstart* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Nmstart_AsciiValue AsciiValue;
  static const AsciiValue A_UPPER =
    Nmstart_AsciiValue_A_UPPER;
  static const AsciiValue B_UPPER =
    Nmstart_AsciiValue_B_UPPER;
  static const AsciiValue C_UPPER =
    Nmstart_AsciiValue_C_UPPER;
  static const AsciiValue D_UPPER =
    Nmstart_AsciiValue_D_UPPER;
  static const AsciiValue E_UPPER =
    Nmstart_AsciiValue_E_UPPER;
  static const AsciiValue F_UPPER =
    Nmstart_AsciiValue_F_UPPER;
  static const AsciiValue G_UPPER =
    Nmstart_AsciiValue_G_UPPER;
  static const AsciiValue H_UPPER =
    Nmstart_AsciiValue_H_UPPER;
  static const AsciiValue I_UPPER =
    Nmstart_AsciiValue_I_UPPER;
  static const AsciiValue J_UPPER =
    Nmstart_AsciiValue_J_UPPER;
  static const AsciiValue K_UPPER =
    Nmstart_AsciiValue_K_UPPER;
  static const AsciiValue L_UPPER =
    Nmstart_AsciiValue_L_UPPER;
  static const AsciiValue M_UPPER =
    Nmstart_AsciiValue_M_UPPER;
  static const AsciiValue N_UPPER =
    Nmstart_AsciiValue_N_UPPER;
  static const AsciiValue O_UPPER =
    Nmstart_AsciiValue_O_UPPER;
  static const AsciiValue P_UPPER =
    Nmstart_AsciiValue_P_UPPER;
  static const AsciiValue Q_UPPER =
    Nmstart_AsciiValue_Q_UPPER;
  static const AsciiValue R_UPPER =
    Nmstart_AsciiValue_R_UPPER;
  static const AsciiValue S_UPPER =
    Nmstart_AsciiValue_S_UPPER;
  static const AsciiValue T_UPPER =
    Nmstart_AsciiValue_T_UPPER;
  static const AsciiValue U_UPPER =
    Nmstart_AsciiValue_U_UPPER;
  static const AsciiValue V_UPPER =
    Nmstart_AsciiValue_V_UPPER;
  static const AsciiValue W_UPPER =
    Nmstart_AsciiValue_W_UPPER;
  static const AsciiValue X_UPPER =
    Nmstart_AsciiValue_X_UPPER;
  static const AsciiValue Y_UPPER =
    Nmstart_AsciiValue_Y_UPPER;
  static const AsciiValue Z_UPPER =
    Nmstart_AsciiValue_Z_UPPER;
  static const AsciiValue A_LOWER =
    Nmstart_AsciiValue_A_LOWER;
  static const AsciiValue B_LOWER =
    Nmstart_AsciiValue_B_LOWER;
  static const AsciiValue C_LOWER =
    Nmstart_AsciiValue_C_LOWER;
  static const AsciiValue D_LOWER =
    Nmstart_AsciiValue_D_LOWER;
  static const AsciiValue E_LOWER =
    Nmstart_AsciiValue_E_LOWER;
  static const AsciiValue F_LOWER =
    Nmstart_AsciiValue_F_LOWER;
  static const AsciiValue G_LOWER =
    Nmstart_AsciiValue_G_LOWER;
  static const AsciiValue H_LOWER =
    Nmstart_AsciiValue_H_LOWER;
  static const AsciiValue I_LOWER =
    Nmstart_AsciiValue_I_LOWER;
  static const AsciiValue J_LOWER =
    Nmstart_AsciiValue_J_LOWER;
  static const AsciiValue K_LOWER =
    Nmstart_AsciiValue_K_LOWER;
  static const AsciiValue L_LOWER =
    Nmstart_AsciiValue_L_LOWER;
  static const AsciiValue M_LOWER =
    Nmstart_AsciiValue_M_LOWER;
  static const AsciiValue N_LOWER =
    Nmstart_AsciiValue_N_LOWER;
  static const AsciiValue O_LOWER =
    Nmstart_AsciiValue_O_LOWER;
  static const AsciiValue P_LOWER =
    Nmstart_AsciiValue_P_LOWER;
  static const AsciiValue Q_LOWER =
    Nmstart_AsciiValue_Q_LOWER;
  static const AsciiValue R_LOWER =
    Nmstart_AsciiValue_R_LOWER;
  static const AsciiValue S_LOWER =
    Nmstart_AsciiValue_S_LOWER;
  static const AsciiValue T_LOWER =
    Nmstart_AsciiValue_T_LOWER;
  static const AsciiValue U_LOWER =
    Nmstart_AsciiValue_U_LOWER;
  static const AsciiValue V_LOWER =
    Nmstart_AsciiValue_V_LOWER;
  static const AsciiValue W_LOWER =
    Nmstart_AsciiValue_W_LOWER;
  static const AsciiValue X_LOWER =
    Nmstart_AsciiValue_X_LOWER;
  static const AsciiValue Y_LOWER =
    Nmstart_AsciiValue_Y_LOWER;
  static const AsciiValue Z_LOWER =
    Nmstart_AsciiValue_Z_LOWER;
  static inline bool AsciiValue_IsValid(int value) {
    return Nmstart_AsciiValue_IsValid(value);
  }
  static const AsciiValue AsciiValue_MIN =
    Nmstart_AsciiValue_AsciiValue_MIN;
  static const AsciiValue AsciiValue_MAX =
    Nmstart_AsciiValue_AsciiValue_MAX;
  static const int AsciiValue_ARRAYSIZE =
    Nmstart_AsciiValue_AsciiValue_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  AsciiValue_descriptor() {
    return Nmstart_AsciiValue_descriptor();
  }
  static inline const ::std::string& AsciiValue_Name(AsciiValue value) {
    return Nmstart_AsciiValue_Name(value);
  }
  static inline bool AsciiValue_Parse(const ::std::string& name,
      AsciiValue* value) {
    return Nmstart_AsciiValue_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .css_proto_converter.Nmstart.AsciiValue ascii_value = 1;
  bool has_ascii_value() const;
  void clear_ascii_value();
  static const int kAsciiValueFieldNumber = 1;
  ::css_proto_converter::Nmstart_AsciiValue ascii_value() const;
  void set_ascii_value(::css_proto_converter::Nmstart_AsciiValue value);

  // optional .css_proto_converter.Escape escape = 2;
  bool has_escape() const;
  void clear_escape();
  static const int kEscapeFieldNumber = 2;
  private:
  const ::css_proto_converter::Escape& _internal_escape() const;
  public:
  const ::css_proto_converter::Escape& escape() const;
  ::css_proto_converter::Escape* release_escape();
  ::css_proto_converter::Escape* mutable_escape();
  void set_allocated_escape(::css_proto_converter::Escape* escape);

  void clear_rhs();
  RhsCase rhs_case() const;
  // @@protoc_insertion_point(class_scope:css_proto_converter.Nmstart)
 private:
  void set_has_ascii_value();
  void set_has_escape();

  inline bool has_rhs() const;
  inline void clear_has_rhs();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  union RhsUnion {
    RhsUnion() {}
    int ascii_value_;
    ::css_proto_converter::Escape* escape_;
  } rhs_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_css_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Nmchar : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:css_proto_converter.Nmchar) */ {
 public:
  Nmchar();
  virtual ~Nmchar();

  Nmchar(const Nmchar& from);

  inline Nmchar& operator=(const Nmchar& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Nmchar(Nmchar&& from) noexcept
    : Nmchar() {
    *this = ::std::move(from);
  }

  inline Nmchar& operator=(Nmchar&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Nmchar& default_instance();

  enum RhsCase {
    kAsciiValue = 1,
    kEscape = 2,
    RHS_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Nmchar* internal_default_instance() {
    return reinterpret_cast<const Nmchar*>(
               &_Nmchar_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(Nmchar* other);
  friend void swap(Nmchar& a, Nmchar& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Nmchar* New() const final {
    return CreateMaybeMessage<Nmchar>(NULL);
  }

  Nmchar* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Nmchar>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Nmchar& from);
  void MergeFrom(const Nmchar& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Nmchar* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Nmchar_AsciiValue AsciiValue;
  static const AsciiValue MINUS =
    Nmchar_AsciiValue_MINUS;
  static const AsciiValue ZERO =
    Nmchar_AsciiValue_ZERO;
  static const AsciiValue ONE =
    Nmchar_AsciiValue_ONE;
  static const AsciiValue TWO =
    Nmchar_AsciiValue_TWO;
  static const AsciiValue THREE =
    Nmchar_AsciiValue_THREE;
  static const AsciiValue FOUR =
    Nmchar_AsciiValue_FOUR;
  static const AsciiValue FIVE =
    Nmchar_AsciiValue_FIVE;
  static const AsciiValue SIX =
    Nmchar_AsciiValue_SIX;
  static const AsciiValue SEVEN =
    Nmchar_AsciiValue_SEVEN;
  static const AsciiValue EIGHT =
    Nmchar_AsciiValue_EIGHT;
  static const AsciiValue NINE =
    Nmchar_AsciiValue_NINE;
  static const AsciiValue A_UPPER =
    Nmchar_AsciiValue_A_UPPER;
  static const AsciiValue B_UPPER =
    Nmchar_AsciiValue_B_UPPER;
  static const AsciiValue C_UPPER =
    Nmchar_AsciiValue_C_UPPER;
  static const AsciiValue D_UPPER =
    Nmchar_AsciiValue_D_UPPER;
  static const AsciiValue E_UPPER =
    Nmchar_AsciiValue_E_UPPER;
  static const AsciiValue F_UPPER =
    Nmchar_AsciiValue_F_UPPER;
  static const AsciiValue G_UPPER =
    Nmchar_AsciiValue_G_UPPER;
  static const AsciiValue H_UPPER =
    Nmchar_AsciiValue_H_UPPER;
  static const AsciiValue I_UPPER =
    Nmchar_AsciiValue_I_UPPER;
  static const AsciiValue J_UPPER =
    Nmchar_AsciiValue_J_UPPER;
  static const AsciiValue K_UPPER =
    Nmchar_AsciiValue_K_UPPER;
  static const AsciiValue L_UPPER =
    Nmchar_AsciiValue_L_UPPER;
  static const AsciiValue M_UPPER =
    Nmchar_AsciiValue_M_UPPER;
  static const AsciiValue N_UPPER =
    Nmchar_AsciiValue_N_UPPER;
  static const AsciiValue O_UPPER =
    Nmchar_AsciiValue_O_UPPER;
  static const AsciiValue P_UPPER =
    Nmchar_AsciiValue_P_UPPER;
  static const AsciiValue Q_UPPER =
    Nmchar_AsciiValue_Q_UPPER;
  static const AsciiValue R_UPPER =
    Nmchar_AsciiValue_R_UPPER;
  static const AsciiValue S_UPPER =
    Nmchar_AsciiValue_S_UPPER;
  static const AsciiValue T_UPPER =
    Nmchar_AsciiValue_T_UPPER;
  static const AsciiValue U_UPPER =
    Nmchar_AsciiValue_U_UPPER;
  static const AsciiValue V_UPPER =
    Nmchar_AsciiValue_V_UPPER;
  static const AsciiValue W_UPPER =
    Nmchar_AsciiValue_W_UPPER;
  static const AsciiValue X_UPPER =
    Nmchar_AsciiValue_X_UPPER;
  static const AsciiValue Y_UPPER =
    Nmchar_AsciiValue_Y_UPPER;
  static const AsciiValue Z_UPPER =
    Nmchar_AsciiValue_Z_UPPER;
  static const AsciiValue A_LOWER =
    Nmchar_AsciiValue_A_LOWER;
  static const AsciiValue B_LOWER =
    Nmchar_AsciiValue_B_LOWER;
  static const AsciiValue C_LOWER =
    Nmchar_AsciiValue_C_LOWER;
  static const AsciiValue D_LOWER =
    Nmchar_AsciiValue_D_LOWER;
  static const AsciiValue E_LOWER =
    Nmchar_AsciiValue_E_LOWER;
  static const AsciiValue F_LOWER =
    Nmchar_AsciiValue_F_LOWER;
  static const AsciiValue G_LOWER =
    Nmchar_AsciiValue_G_LOWER;
  static const AsciiValue H_LOWER =
    Nmchar_AsciiValue_H_LOWER;
  static const AsciiValue I_LOWER =
    Nmchar_AsciiValue_I_LOWER;
  static const AsciiValue J_LOWER =
    Nmchar_AsciiValue_J_LOWER;
  static const AsciiValue K_LOWER =
    Nmchar_AsciiValue_K_LOWER;
  static const AsciiValue L_LOWER =
    Nmchar_AsciiValue_L_LOWER;
  static const AsciiValue M_LOWER =
    Nmchar_AsciiValue_M_LOWER;
  static const AsciiValue N_LOWER =
    Nmchar_AsciiValue_N_LOWER;
  static const AsciiValue O_LOWER =
    Nmchar_AsciiValue_O_LOWER;
  static const AsciiValue P_LOWER =
    Nmchar_AsciiValue_P_LOWER;
  static const AsciiValue Q_LOWER =
    Nmchar_AsciiValue_Q_LOWER;
  static const AsciiValue R_LOWER =
    Nmchar_AsciiValue_R_LOWER;
  static const AsciiValue S_LOWER =
    Nmchar_AsciiValue_S_LOWER;
  static const AsciiValue T_LOWER =
    Nmchar_AsciiValue_T_LOWER;
  static const AsciiValue U_LOWER =
    Nmchar_AsciiValue_U_LOWER;
  static const AsciiValue V_LOWER =
    Nmchar_AsciiValue_V_LOWER;
  static const AsciiValue W_LOWER =
    Nmchar_AsciiValue_W_LOWER;
  static const AsciiValue X_LOWER =
    Nmchar_AsciiValue_X_LOWER;
  static const AsciiValue Y_LOWER =
    Nmchar_AsciiValue_Y_LOWER;
  static const AsciiValue Z_LOWER =
    Nmchar_AsciiValue_Z_LOWER;
  static inline bool AsciiValue_IsValid(int value) {
    return Nmchar_AsciiValue_IsValid(value);
  }
  static const AsciiValue AsciiValue_MIN =
    Nmchar_AsciiValue_AsciiValue_MIN;
  static const AsciiValue AsciiValue_MAX =
    Nmchar_AsciiValue_AsciiValue_MAX;
  static const int AsciiValue_ARRAYSIZE =
    Nmchar_AsciiValue_AsciiValue_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  AsciiValue_descriptor() {
    return Nmchar_AsciiValue_descriptor();
  }
  static inline const ::std::string& AsciiValue_Name(AsciiValue value) {
    return Nmchar_AsciiValue_Name(value);
  }
  static inline bool AsciiValue_Parse(const ::std::string& name,
      AsciiValue* value) {
    return Nmchar_AsciiValue_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .css_proto_converter.Nmchar.AsciiValue ascii_value = 1;
  bool has_ascii_value() const;
  void clear_ascii_value();
  static const int kAsciiValueFieldNumber = 1;
  ::css_proto_converter::Nmchar_AsciiValue ascii_value() const;
  void set_ascii_value(::css_proto_converter::Nmchar_AsciiValue value);

  // optional .css_proto_converter.Escape escape = 2;
  bool has_escape() const;
  void clear_escape();
  static const int kEscapeFieldNumber = 2;
  private:
  const ::css_proto_converter::Escape& _internal_escape() const;
  public:
  const ::css_proto_converter::Escape& escape() const;
  ::css_proto_converter::Escape* release_escape();
  ::css_proto_converter::Escape* mutable_escape();
  void set_allocated_escape(::css_proto_converter::Escape* escape);

  void clear_rhs();
  RhsCase rhs_case() const;
  // @@protoc_insertion_point(class_scope:css_proto_converter.Nmchar)
 private:
  void set_has_ascii_value();
  void set_has_escape();

  inline bool has_rhs() const;
  inline void clear_has_rhs();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  union RhsUnion {
    RhsUnion() {}
    int ascii_value_;
    ::css_proto_converter::Escape* escape_;
  } rhs_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_css_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class String : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:css_proto_converter.String) */ {
 public:
  String();
  virtual ~String();

  String(const String& from);

  inline String& operator=(const String& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  String(String&& from) noexcept
    : String() {
    *this = ::std::move(from);
  }

  inline String& operator=(String&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const String& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const String* internal_default_instance() {
    return reinterpret_cast<const String*>(
               &_String_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(String* other);
  friend void swap(String& a, String& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline String* New() const final {
    return CreateMaybeMessage<String>(NULL);
  }

  String* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<String>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const String& from);
  void MergeFrom(const String& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(String* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .css_proto_converter.StringCharOrQuote string_char_quotes = 2;
  int string_char_quotes_size() const;
  void clear_string_char_quotes();
  static const int kStringCharQuotesFieldNumber = 2;
  ::css_proto_converter::StringCharOrQuote* mutable_string_char_quotes(int index);
  ::google::protobuf::RepeatedPtrField< ::css_proto_converter::StringCharOrQuote >*
      mutable_string_char_quotes();
  const ::css_proto_converter::StringCharOrQuote& string_char_quotes(int index) const;
  ::css_proto_converter::StringCharOrQuote* add_string_char_quotes();
  const ::google::protobuf::RepeatedPtrField< ::css_proto_converter::StringCharOrQuote >&
      string_char_quotes() const;

  // required bool use_single_quotes = 1;
  bool has_use_single_quotes() const;
  void clear_use_single_quotes();
  static const int kUseSingleQuotesFieldNumber = 1;
  bool use_single_quotes() const;
  void set_use_single_quotes(bool value);

  // @@protoc_insertion_point(class_scope:css_proto_converter.String)
 private:
  void set_has_use_single_quotes();
  void clear_has_use_single_quotes();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::css_proto_converter::StringCharOrQuote > string_char_quotes_;
  bool use_single_quotes_;
  friend struct ::protobuf_css_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StringCharOrQuote : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:css_proto_converter.StringCharOrQuote) */ {
 public:
  StringCharOrQuote();
  virtual ~StringCharOrQuote();

  StringCharOrQuote(const StringCharOrQuote& from);

  inline StringCharOrQuote& operator=(const StringCharOrQuote& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StringCharOrQuote(StringCharOrQuote&& from) noexcept
    : StringCharOrQuote() {
    *this = ::std::move(from);
  }

  inline StringCharOrQuote& operator=(StringCharOrQuote&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StringCharOrQuote& default_instance();

  enum RhsCase {
    kStringChar = 2,
    kQuoteChar = 1,
    RHS_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StringCharOrQuote* internal_default_instance() {
    return reinterpret_cast<const StringCharOrQuote*>(
               &_StringCharOrQuote_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(StringCharOrQuote* other);
  friend void swap(StringCharOrQuote& a, StringCharOrQuote& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StringCharOrQuote* New() const final {
    return CreateMaybeMessage<StringCharOrQuote>(NULL);
  }

  StringCharOrQuote* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StringCharOrQuote>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StringCharOrQuote& from);
  void MergeFrom(const StringCharOrQuote& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StringCharOrQuote* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef StringCharOrQuote_QuoteChar QuoteChar;
  static const QuoteChar UNSET =
    StringCharOrQuote_QuoteChar_UNSET;
  static const QuoteChar IS_SET =
    StringCharOrQuote_QuoteChar_IS_SET;
  static inline bool QuoteChar_IsValid(int value) {
    return StringCharOrQuote_QuoteChar_IsValid(value);
  }
  static const QuoteChar QuoteChar_MIN =
    StringCharOrQuote_QuoteChar_QuoteChar_MIN;
  static const QuoteChar QuoteChar_MAX =
    StringCharOrQuote_QuoteChar_QuoteChar_MAX;
  static const int QuoteChar_ARRAYSIZE =
    StringCharOrQuote_QuoteChar_QuoteChar_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  QuoteChar_descriptor() {
    return StringCharOrQuote_QuoteChar_descriptor();
  }
  static inline const ::std::string& QuoteChar_Name(QuoteChar value) {
    return StringCharOrQuote_QuoteChar_Name(value);
  }
  static inline bool QuoteChar_Parse(const ::std::string& name,
      QuoteChar* value) {
    return StringCharOrQuote_QuoteChar_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .css_proto_converter.StringChar string_char = 2;
  bool has_string_char() const;
  void clear_string_char();
  static const int kStringCharFieldNumber = 2;
  private:
  const ::css_proto_converter::StringChar& _internal_string_char() const;
  public:
  const ::css_proto_converter::StringChar& string_char() const;
  ::css_proto_converter::StringChar* release_string_char();
  ::css_proto_converter::StringChar* mutable_string_char();
  void set_allocated_string_char(::css_proto_converter::StringChar* string_char);

  // optional .css_proto_converter.StringCharOrQuote.QuoteChar quote_char = 1;
  bool has_quote_char() const;
  void clear_quote_char();
  static const int kQuoteCharFieldNumber = 1;
  ::css_proto_converter::StringCharOrQuote_QuoteChar quote_char() const;
  void set_quote_char(::css_proto_converter::StringCharOrQuote_QuoteChar value);

  void clear_rhs();
  RhsCase rhs_case() const;
  // @@protoc_insertion_point(class_scope:css_proto_converter.StringCharOrQuote)
 private:
  void set_has_string_char();
  void set_has_quote_char();

  inline bool has_rhs() const;
  inline void clear_has_rhs();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  union RhsUnion {
    RhsUnion() {}
    ::css_proto_converter::StringChar* string_char_;
    int quote_char_;
  } rhs_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_css_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StringChar : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:css_proto_converter.StringChar) */ {
 public:
  StringChar();
  virtual ~StringChar();

  StringChar(const StringChar& from);

  inline StringChar& operator=(const StringChar& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StringChar(StringChar&& from) noexcept
    : StringChar() {
    *this = ::std::move(from);
  }

  inline StringChar& operator=(StringChar&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StringChar& default_instance();

  enum RhsCase {
    kUrlChar = 1,
    kSpace = 2,
    kNl = 3,
    RHS_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StringChar* internal_default_instance() {
    return reinterpret_cast<const StringChar*>(
               &_StringChar_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(StringChar* other);
  friend void swap(StringChar& a, StringChar& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StringChar* New() const final {
    return CreateMaybeMessage<StringChar>(NULL);
  }

  StringChar* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StringChar>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StringChar& from);
  void MergeFrom(const StringChar& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StringChar* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef StringChar_Space Space;
  static const Space UNSET =
    StringChar_Space_UNSET;
  static const Space IS_SET =
    StringChar_Space_IS_SET;
  static inline bool Space_IsValid(int value) {
    return StringChar_Space_IsValid(value);
  }
  static const Space Space_MIN =
    StringChar_Space_Space_MIN;
  static const Space Space_MAX =
    StringChar_Space_Space_MAX;
  static const int Space_ARRAYSIZE =
    StringChar_Space_Space_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Space_descriptor() {
    return StringChar_Space_descriptor();
  }
  static inline const ::std::string& Space_Name(Space value) {
    return StringChar_Space_Name(value);
  }
  static inline bool Space_Parse(const ::std::string& name,
      Space* value) {
    return StringChar_Space_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .css_proto_converter.UrlChar url_char = 1;
  bool has_url_char() const;
  void clear_url_char();
  static const int kUrlCharFieldNumber = 1;
  private:
  const ::css_proto_converter::UrlChar& _internal_url_char() const;
  public:
  const ::css_proto_converter::UrlChar& url_char() const;
  ::css_proto_converter::UrlChar* release_url_char();
  ::css_proto_converter::UrlChar* mutable_url_char();
  void set_allocated_url_char(::css_proto_converter::UrlChar* url_char);

  // optional .css_proto_converter.StringChar.Space space = 2;
  bool has_space() const;
  void clear_space();
  static const int kSpaceFieldNumber = 2;
  ::css_proto_converter::StringChar_Space space() const;
  void set_space(::css_proto_converter::StringChar_Space value);

  // optional .css_proto_converter.Nl nl = 3;
  bool has_nl() const;
  void clear_nl();
  static const int kNlFieldNumber = 3;
  private:
  const ::css_proto_converter::Nl& _internal_nl() const;
  public:
  const ::css_proto_converter::Nl& nl() const;
  ::css_proto_converter::Nl* release_nl();
  ::css_proto_converter::Nl* mutable_nl();
  void set_allocated_nl(::css_proto_converter::Nl* nl);

  void clear_rhs();
  RhsCase rhs_case() const;
  // @@protoc_insertion_point(class_scope:css_proto_converter.StringChar)
 private:
  void set_has_url_char();
  void set_has_space();
  void set_has_nl();

  inline bool has_rhs() const;
  inline void clear_has_rhs();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  union RhsUnion {
    RhsUnion() {}
    ::css_proto_converter::UrlChar* url_char_;
    int space_;
    ::css_proto_converter::Nl* nl_;
  } rhs_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_css_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Ident : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:css_proto_converter.Ident) */ {
 public:
  Ident();
  virtual ~Ident();

  Ident(const Ident& from);

  inline Ident& operator=(const Ident& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Ident(Ident&& from) noexcept
    : Ident() {
    *this = ::std::move(from);
  }

  inline Ident& operator=(Ident&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Ident& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ident* internal_default_instance() {
    return reinterpret_cast<const Ident*>(
               &_Ident_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(Ident* other);
  friend void swap(Ident& a, Ident& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Ident* New() const final {
    return CreateMaybeMessage<Ident>(NULL);
  }

  Ident* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Ident>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Ident& from);
  void MergeFrom(const Ident& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ident* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .css_proto_converter.Nmchar nmchars = 3;
  int nmchars_size() const;
  void clear_nmchars();
  static const int kNmcharsFieldNumber = 3;
  ::css_proto_converter::Nmchar* mutable_nmchars(int index);
  ::google::protobuf::RepeatedPtrField< ::css_proto_converter::Nmchar >*
      mutable_nmchars();
  const ::css_proto_converter::Nmchar& nmchars(int index) const;
  ::css_proto_converter::Nmchar* add_nmchars();
  const ::google::protobuf::RepeatedPtrField< ::css_proto_converter::Nmchar >&
      nmchars() const;

  // required .css_proto_converter.Nmstart nmstart = 2;
  bool has_nmstart() const;
  void clear_nmstart();
  static const int kNmstartFieldNumber = 2;
  private:
  const ::css_proto_converter::Nmstart& _internal_nmstart() const;
  public:
  const ::css_proto_converter::Nmstart& nmstart() const;
  ::css_proto_converter::Nmstart* release_nmstart();
  ::css_proto_converter::Nmstart* mutable_nmstart();
  void set_allocated_nmstart(::css_proto_converter::Nmstart* nmstart);

  // optional bool starting_minus = 1 [default = false];
  bool has_starting_minus() const;
  void clear_starting_minus();
  static const int kStartingMinusFieldNumber = 1;
  bool starting_minus() const;
  void set_starting_minus(bool value);

  // @@protoc_insertion_point(class_scope:css_proto_converter.Ident)
 private:
  void set_has_starting_minus();
  void clear_has_starting_minus();
  void set_has_nmstart();
  void clear_has_nmstart();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::css_proto_converter::Nmchar > nmchars_;
  ::css_proto_converter::Nmstart* nmstart_;
  bool starting_minus_;
  friend struct ::protobuf_css_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Num : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:css_proto_converter.Num) */ {
 public:
  Num();
  virtual ~Num();

  Num(const Num& from);

  inline Num& operator=(const Num& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Num(Num&& from) noexcept
    : Num() {
    *this = ::std::move(from);
  }

  inline Num& operator=(Num&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Num& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Num* internal_default_instance() {
    return reinterpret_cast<const Num*>(
               &_Num_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(Num* other);
  friend void swap(Num& a, Num& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Num* New() const final {
    return CreateMaybeMessage<Num>(NULL);
  }

  Num* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Num>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Num& from);
  void MergeFrom(const Num& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Num* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required sint64 signed_int_value = 1;
  bool has_signed_int_value() const;
  void clear_signed_int_value();
  static const int kSignedIntValueFieldNumber = 1;
  ::google::protobuf::int64 signed_int_value() const;
  void set_signed_int_value(::google::protobuf::int64 value);

  // optional float float_value = 2;
  bool has_float_value() const;
  void clear_float_value();
  static const int kFloatValueFieldNumber = 2;
  float float_value() const;
  void set_float_value(float value);

  // @@protoc_insertion_point(class_scope:css_proto_converter.Num)
 private:
  void set_has_signed_int_value();
  void clear_has_signed_int_value();
  void set_has_float_value();
  void clear_has_float_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int64 signed_int_value_;
  float float_value_;
  friend struct ::protobuf_css_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UrlChar : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:css_proto_converter.UrlChar) */ {
 public:
  UrlChar();
  virtual ~UrlChar();

  UrlChar(const UrlChar& from);

  inline UrlChar& operator=(const UrlChar& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UrlChar(UrlChar&& from) noexcept
    : UrlChar() {
    *this = ::std::move(from);
  }

  inline UrlChar& operator=(UrlChar&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UrlChar& default_instance();

  enum RhsCase {
    kAsciiValue = 1,
    kEscape = 2,
    RHS_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UrlChar* internal_default_instance() {
    return reinterpret_cast<const UrlChar*>(
               &_UrlChar_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(UrlChar* other);
  friend void swap(UrlChar& a, UrlChar& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UrlChar* New() const final {
    return CreateMaybeMessage<UrlChar>(NULL);
  }

  UrlChar* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UrlChar>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UrlChar& from);
  void MergeFrom(const UrlChar& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UrlChar* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef UrlChar_AsciiValue AsciiValue;
  static const AsciiValue NUL =
    UrlChar_AsciiValue_NUL;
  static const AsciiValue HT =
    UrlChar_AsciiValue_HT;
  static const AsciiValue EXCLAMATION_POINT =
    UrlChar_AsciiValue_EXCLAMATION_POINT;
  static const AsciiValue HASH =
    UrlChar_AsciiValue_HASH;
  static const AsciiValue DOLLAR =
    UrlChar_AsciiValue_DOLLAR;
  static const AsciiValue PERCENT =
    UrlChar_AsciiValue_PERCENT;
  static const AsciiValue AMPERSAND =
    UrlChar_AsciiValue_AMPERSAND;
  static const AsciiValue APOSTROPHE =
    UrlChar_AsciiValue_APOSTROPHE;
  static const AsciiValue OPEN_PAREN =
    UrlChar_AsciiValue_OPEN_PAREN;
  static const AsciiValue CLOSE_PAREN =
    UrlChar_AsciiValue_CLOSE_PAREN;
  static const AsciiValue STAR =
    UrlChar_AsciiValue_STAR;
  static const AsciiValue PLUS =
    UrlChar_AsciiValue_PLUS;
  static const AsciiValue COMMA =
    UrlChar_AsciiValue_COMMA;
  static const AsciiValue MINUS =
    UrlChar_AsciiValue_MINUS;
  static const AsciiValue DOT =
    UrlChar_AsciiValue_DOT;
  static const AsciiValue SLASH =
    UrlChar_AsciiValue_SLASH;
  static const AsciiValue ZERO =
    UrlChar_AsciiValue_ZERO;
  static const AsciiValue ONE =
    UrlChar_AsciiValue_ONE;
  static const AsciiValue TWO =
    UrlChar_AsciiValue_TWO;
  static const AsciiValue THREE =
    UrlChar_AsciiValue_THREE;
  static const AsciiValue FOUR =
    UrlChar_AsciiValue_FOUR;
  static const AsciiValue FIVE =
    UrlChar_AsciiValue_FIVE;
  static const AsciiValue SIX =
    UrlChar_AsciiValue_SIX;
  static const AsciiValue SEVEN =
    UrlChar_AsciiValue_SEVEN;
  static const AsciiValue EIGHT =
    UrlChar_AsciiValue_EIGHT;
  static const AsciiValue NINE =
    UrlChar_AsciiValue_NINE;
  static const AsciiValue COLON =
    UrlChar_AsciiValue_COLON;
  static const AsciiValue SEMI_COLON =
    UrlChar_AsciiValue_SEMI_COLON;
  static const AsciiValue LESS_THAN =
    UrlChar_AsciiValue_LESS_THAN;
  static const AsciiValue EQUAL =
    UrlChar_AsciiValue_EQUAL;
  static const AsciiValue GREATER_THAN =
    UrlChar_AsciiValue_GREATER_THAN;
  static const AsciiValue QUESTION =
    UrlChar_AsciiValue_QUESTION;
  static const AsciiValue AT_SIGN =
    UrlChar_AsciiValue_AT_SIGN;
  static const AsciiValue A_UPPER =
    UrlChar_AsciiValue_A_UPPER;
  static const AsciiValue B_UPPER =
    UrlChar_AsciiValue_B_UPPER;
  static const AsciiValue C_UPPER =
    UrlChar_AsciiValue_C_UPPER;
  static const AsciiValue D_UPPER =
    UrlChar_AsciiValue_D_UPPER;
  static const AsciiValue E_UPPER =
    UrlChar_AsciiValue_E_UPPER;
  static const AsciiValue F_UPPER =
    UrlChar_AsciiValue_F_UPPER;
  static const AsciiValue G_UPPER =
    UrlChar_AsciiValue_G_UPPER;
  static const AsciiValue H_UPPER =
    UrlChar_AsciiValue_H_UPPER;
  static const AsciiValue I_UPPER =
    UrlChar_AsciiValue_I_UPPER;
  static const AsciiValue J_UPPER =
    UrlChar_AsciiValue_J_UPPER;
  static const AsciiValue K_UPPER =
    UrlChar_AsciiValue_K_UPPER;
  static const AsciiValue L_UPPER =
    UrlChar_AsciiValue_L_UPPER;
  static const AsciiValue M_UPPER =
    UrlChar_AsciiValue_M_UPPER;
  static const AsciiValue N_UPPER =
    UrlChar_AsciiValue_N_UPPER;
  static const AsciiValue O_UPPER =
    UrlChar_AsciiValue_O_UPPER;
  static const AsciiValue P_UPPER =
    UrlChar_AsciiValue_P_UPPER;
  static const AsciiValue Q_UPPER =
    UrlChar_AsciiValue_Q_UPPER;
  static const AsciiValue R_UPPER =
    UrlChar_AsciiValue_R_UPPER;
  static const AsciiValue S_UPPER =
    UrlChar_AsciiValue_S_UPPER;
  static const AsciiValue T_UPPER =
    UrlChar_AsciiValue_T_UPPER;
  static const AsciiValue U_UPPER =
    UrlChar_AsciiValue_U_UPPER;
  static const AsciiValue V_UPPER =
    UrlChar_AsciiValue_V_UPPER;
  static const AsciiValue W_UPPER =
    UrlChar_AsciiValue_W_UPPER;
  static const AsciiValue X_UPPER =
    UrlChar_AsciiValue_X_UPPER;
  static const AsciiValue Y_UPPER =
    UrlChar_AsciiValue_Y_UPPER;
  static const AsciiValue Z_UPPER =
    UrlChar_AsciiValue_Z_UPPER;
  static const AsciiValue OPEN_BRACKET =
    UrlChar_AsciiValue_OPEN_BRACKET;
  static const AsciiValue BACKSLASH =
    UrlChar_AsciiValue_BACKSLASH;
  static const AsciiValue CLOSE_BRACKET =
    UrlChar_AsciiValue_CLOSE_BRACKET;
  static const AsciiValue CARET =
    UrlChar_AsciiValue_CARET;
  static const AsciiValue UNDERSCORE =
    UrlChar_AsciiValue_UNDERSCORE;
  static const AsciiValue BACKTICK =
    UrlChar_AsciiValue_BACKTICK;
  static const AsciiValue A_LOWER =
    UrlChar_AsciiValue_A_LOWER;
  static const AsciiValue B_LOWER =
    UrlChar_AsciiValue_B_LOWER;
  static const AsciiValue C_LOWER =
    UrlChar_AsciiValue_C_LOWER;
  static const AsciiValue D_LOWER =
    UrlChar_AsciiValue_D_LOWER;
  static const AsciiValue E_LOWER =
    UrlChar_AsciiValue_E_LOWER;
  static const AsciiValue F_LOWER =
    UrlChar_AsciiValue_F_LOWER;
  static const AsciiValue G_LOWER =
    UrlChar_AsciiValue_G_LOWER;
  static const AsciiValue H_LOWER =
    UrlChar_AsciiValue_H_LOWER;
  static const AsciiValue I_LOWER =
    UrlChar_AsciiValue_I_LOWER;
  static const AsciiValue J_LOWER =
    UrlChar_AsciiValue_J_LOWER;
  static const AsciiValue K_LOWER =
    UrlChar_AsciiValue_K_LOWER;
  static const AsciiValue L_LOWER =
    UrlChar_AsciiValue_L_LOWER;
  static const AsciiValue M_LOWER =
    UrlChar_AsciiValue_M_LOWER;
  static const AsciiValue N_LOWER =
    UrlChar_AsciiValue_N_LOWER;
  static const AsciiValue O_LOWER =
    UrlChar_AsciiValue_O_LOWER;
  static const AsciiValue P_LOWER =
    UrlChar_AsciiValue_P_LOWER;
  static const AsciiValue Q_LOWER =
    UrlChar_AsciiValue_Q_LOWER;
  static const AsciiValue R_LOWER =
    UrlChar_AsciiValue_R_LOWER;
  static const AsciiValue S_LOWER =
    UrlChar_AsciiValue_S_LOWER;
  static const AsciiValue T_LOWER =
    UrlChar_AsciiValue_T_LOWER;
  static const AsciiValue U_LOWER =
    UrlChar_AsciiValue_U_LOWER;
  static const AsciiValue V_LOWER =
    UrlChar_AsciiValue_V_LOWER;
  static const AsciiValue W_LOWER =
    UrlChar_AsciiValue_W_LOWER;
  static const AsciiValue X_LOWER =
    UrlChar_AsciiValue_X_LOWER;
  static const AsciiValue Y_LOWER =
    UrlChar_AsciiValue_Y_LOWER;
  static const AsciiValue Z_LOWER =
    UrlChar_AsciiValue_Z_LOWER;
  static const AsciiValue OPEN_CURLY_BRACE =
    UrlChar_AsciiValue_OPEN_CURLY_BRACE;
  static const AsciiValue PIPE =
    UrlChar_AsciiValue_PIPE;
  static const AsciiValue CLOSE_CURLY_BRACE_ =
    UrlChar_AsciiValue_CLOSE_CURLY_BRACE_;
  static const AsciiValue TILDE =
    UrlChar_AsciiValue_TILDE;
  static inline bool AsciiValue_IsValid(int value) {
    return UrlChar_AsciiValue_IsValid(value);
  }
  static const AsciiValue AsciiValue_MIN =
    UrlChar_AsciiValue_AsciiValue_MIN;
  static const AsciiValue AsciiValue_MAX =
    UrlChar_AsciiValue_AsciiValue_MAX;
  static const int AsciiValue_ARRAYSIZE =
    UrlChar_AsciiValue_AsciiValue_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  AsciiValue_descriptor() {
    return UrlChar_AsciiValue_descriptor();
  }
  static inline const ::std::string& AsciiValue_Name(AsciiValue value) {
    return UrlChar_AsciiValue_Name(value);
  }
  static inline bool AsciiValue_Parse(const ::std::string& name,
      AsciiValue* value) {
    return UrlChar_AsciiValue_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .css_proto_converter.UrlChar.AsciiValue ascii_value = 1;
  bool has_ascii_value() const;
  void clear_ascii_value();
  static const int kAsciiValueFieldNumber = 1;
  ::css_proto_converter::UrlChar_AsciiValue ascii_value() const;
  void set_ascii_value(::css_proto_converter::UrlChar_AsciiValue value);

  // optional .css_proto_converter.Escape escape = 2;
  bool has_escape() const;
  void clear_escape();
  static const int kEscapeFieldNumber = 2;
  private:
  const ::css_proto_converter::Escape& _internal_escape() const;
  public:
  const ::css_proto_converter::Escape& escape() const;
  ::css_proto_converter::Escape* release_escape();
  ::css_proto_converter::Escape* mutable_escape();
  void set_allocated_escape(::css_proto_converter::Escape* escape);

  void clear_rhs();
  RhsCase rhs_case() const;
  // @@protoc_insertion_point(class_scope:css_proto_converter.UrlChar)
 private:
  void set_has_ascii_value();
  void set_has_escape();

  inline bool has_rhs() const;
  inline void clear_has_rhs();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  union RhsUnion {
    RhsUnion() {}
    int ascii_value_;
    ::css_proto_converter::Escape* escape_;
  } rhs_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_css_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class W : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:css_proto_converter.W) */ {
 public:
  W();
  virtual ~W();

  W(const W& from);

  inline W& operator=(const W& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  W(W&& from) noexcept
    : W() {
    *this = ::std::move(from);
  }

  inline W& operator=(W&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const W& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const W* internal_default_instance() {
    return reinterpret_cast<const W*>(
               &_W_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(W* other);
  friend void swap(W& a, W& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline W* New() const final {
    return CreateMaybeMessage<W>(NULL);
  }

  W* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<W>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const W& from);
  void MergeFrom(const W& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(W* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .css_proto_converter.UnrepeatedW unrepeated_w = 1;
  int unrepeated_w_size() const;
  void clear_unrepeated_w();
  static const int kUnrepeatedWFieldNumber = 1;
  ::css_proto_converter::UnrepeatedW* mutable_unrepeated_w(int index);
  ::google::protobuf::RepeatedPtrField< ::css_proto_converter::UnrepeatedW >*
      mutable_unrepeated_w();
  const ::css_proto_converter::UnrepeatedW& unrepeated_w(int index) const;
  ::css_proto_converter::UnrepeatedW* add_unrepeated_w();
  const ::google::protobuf::RepeatedPtrField< ::css_proto_converter::UnrepeatedW >&
      unrepeated_w() const;

  // @@protoc_insertion_point(class_scope:css_proto_converter.W)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::css_proto_converter::UnrepeatedW > unrepeated_w_;
  friend struct ::protobuf_css_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UnrepeatedW : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:css_proto_converter.UnrepeatedW) */ {
 public:
  UnrepeatedW();
  virtual ~UnrepeatedW();

  UnrepeatedW(const UnrepeatedW& from);

  inline UnrepeatedW& operator=(const UnrepeatedW& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UnrepeatedW(UnrepeatedW&& from) noexcept
    : UnrepeatedW() {
    *this = ::std::move(from);
  }

  inline UnrepeatedW& operator=(UnrepeatedW&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UnrepeatedW& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnrepeatedW* internal_default_instance() {
    return reinterpret_cast<const UnrepeatedW*>(
               &_UnrepeatedW_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(UnrepeatedW* other);
  friend void swap(UnrepeatedW& a, UnrepeatedW& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UnrepeatedW* New() const final {
    return CreateMaybeMessage<UnrepeatedW>(NULL);
  }

  UnrepeatedW* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UnrepeatedW>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UnrepeatedW& from);
  void MergeFrom(const UnrepeatedW& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnrepeatedW* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef UnrepeatedW_AsciiValue AsciiValue;
  static const AsciiValue HT =
    UnrepeatedW_AsciiValue_HT;
  static const AsciiValue LF =
    UnrepeatedW_AsciiValue_LF;
  static const AsciiValue FF =
    UnrepeatedW_AsciiValue_FF;
  static const AsciiValue CR =
    UnrepeatedW_AsciiValue_CR;
  static const AsciiValue SPACE =
    UnrepeatedW_AsciiValue_SPACE;
  static inline bool AsciiValue_IsValid(int value) {
    return UnrepeatedW_AsciiValue_IsValid(value);
  }
  static const AsciiValue AsciiValue_MIN =
    UnrepeatedW_AsciiValue_AsciiValue_MIN;
  static const AsciiValue AsciiValue_MAX =
    UnrepeatedW_AsciiValue_AsciiValue_MAX;
  static const int AsciiValue_ARRAYSIZE =
    UnrepeatedW_AsciiValue_AsciiValue_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  AsciiValue_descriptor() {
    return UnrepeatedW_AsciiValue_descriptor();
  }
  static inline const ::std::string& AsciiValue_Name(AsciiValue value) {
    return UnrepeatedW_AsciiValue_Name(value);
  }
  static inline bool AsciiValue_Parse(const ::std::string& name,
      AsciiValue* value) {
    return UnrepeatedW_AsciiValue_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .css_proto_converter.UnrepeatedW.AsciiValue ascii_value = 1;
  bool has_ascii_value() const;
  void clear_ascii_value();
  static const int kAsciiValueFieldNumber = 1;
  ::css_proto_converter::UnrepeatedW_AsciiValue ascii_value() const;
  void set_ascii_value(::css_proto_converter::UnrepeatedW_AsciiValue value);

  // @@protoc_insertion_point(class_scope:css_proto_converter.UnrepeatedW)
 private:
  void set_has_ascii_value();
  void clear_has_ascii_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  int ascii_value_;
  friend struct ::protobuf_css_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Nl : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:css_proto_converter.Nl) */ {
 public:
  Nl();
  virtual ~Nl();

  Nl(const Nl& from);

  inline Nl& operator=(const Nl& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Nl(Nl&& from) noexcept
    : Nl() {
    *this = ::std::move(from);
  }

  inline Nl& operator=(Nl&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Nl& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Nl* internal_default_instance() {
    return reinterpret_cast<const Nl*>(
               &_Nl_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(Nl* other);
  friend void swap(Nl& a, Nl& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Nl* New() const final {
    return CreateMaybeMessage<Nl>(NULL);
  }

  Nl* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Nl>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Nl& from);
  void MergeFrom(const Nl& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Nl* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Nl_NewlineKind NewlineKind;
  static const NewlineKind LF =
    Nl_NewlineKind_LF;
  static const NewlineKind CR_LF =
    Nl_NewlineKind_CR_LF;
  static const NewlineKind CR =
    Nl_NewlineKind_CR;
  static const NewlineKind FF =
    Nl_NewlineKind_FF;
  static inline bool NewlineKind_IsValid(int value) {
    return Nl_NewlineKind_IsValid(value);
  }
  static const NewlineKind NewlineKind_MIN =
    Nl_NewlineKind_NewlineKind_MIN;
  static const NewlineKind NewlineKind_MAX =
    Nl_NewlineKind_NewlineKind_MAX;
  static const int NewlineKind_ARRAYSIZE =
    Nl_NewlineKind_NewlineKind_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  NewlineKind_descriptor() {
    return Nl_NewlineKind_descriptor();
  }
  static inline const ::std::string& NewlineKind_Name(NewlineKind value) {
    return Nl_NewlineKind_Name(value);
  }
  static inline bool NewlineKind_Parse(const ::std::string& name,
      NewlineKind* value) {
    return Nl_NewlineKind_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .css_proto_converter.Nl.NewlineKind newline_kind = 1;
  bool has_newline_kind() const;
  void clear_newline_kind();
  static const int kNewlineKindFieldNumber = 1;
  ::css_proto_converter::Nl_NewlineKind newline_kind() const;
  void set_newline_kind(::css_proto_converter::Nl_NewlineKind value);

  // @@protoc_insertion_point(class_scope:css_proto_converter.Nl)
 private:
  void set_has_newline_kind();
  void clear_has_newline_kind();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  int newline_kind_;
  friend struct ::protobuf_css_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Length : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:css_proto_converter.Length) */ {
 public:
  Length();
  virtual ~Length();

  Length(const Length& from);

  inline Length& operator=(const Length& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Length(Length&& from) noexcept
    : Length() {
    *this = ::std::move(from);
  }

  inline Length& operator=(Length&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Length& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Length* internal_default_instance() {
    return reinterpret_cast<const Length*>(
               &_Length_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(Length* other);
  friend void swap(Length& a, Length& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Length* New() const final {
    return CreateMaybeMessage<Length>(NULL);
  }

  Length* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Length>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Length& from);
  void MergeFrom(const Length& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Length* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Length_Unit Unit;
  static const Unit PX =
    Length_Unit_PX;
  static const Unit CM =
    Length_Unit_CM;
  static const Unit MM =
    Length_Unit_MM;
  static const Unit IN =
    Length_Unit_IN;
  static const Unit PT =
    Length_Unit_PT;
  static const Unit PC =
    Length_Unit_PC;
  static inline bool Unit_IsValid(int value) {
    return Length_Unit_IsValid(value);
  }
  static const Unit Unit_MIN =
    Length_Unit_Unit_MIN;
  static const Unit Unit_MAX =
    Length_Unit_Unit_MAX;
  static const int Unit_ARRAYSIZE =
    Length_Unit_Unit_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Unit_descriptor() {
    return Length_Unit_descriptor();
  }
  static inline const ::std::string& Unit_Name(Unit value) {
    return Length_Unit_Name(value);
  }
  static inline bool Unit_Parse(const ::std::string& name,
      Unit* value) {
    return Length_Unit_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .css_proto_converter.Num num = 1;
  bool has_num() const;
  void clear_num();
  static const int kNumFieldNumber = 1;
  private:
  const ::css_proto_converter::Num& _internal_num() const;
  public:
  const ::css_proto_converter::Num& num() const;
  ::css_proto_converter::Num* release_num();
  ::css_proto_converter::Num* mutable_num();
  void set_allocated_num(::css_proto_converter::Num* num);

  // required .css_proto_converter.Length.Unit unit = 2;
  bool has_unit() const;
  void clear_unit();
  static const int kUnitFieldNumber = 2;
  ::css_proto_converter::Length_Unit unit() const;
  void set_unit(::css_proto_converter::Length_Unit value);

  // @@protoc_insertion_point(class_scope:css_proto_converter.Length)
 private:
  void set_has_num();
  void clear_has_num();
  void set_has_unit();
  void clear_has_unit();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::css_proto_converter::Num* num_;
  int unit_;
  friend struct ::protobuf_css_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Angle : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:css_proto_converter.Angle) */ {
 public:
  Angle();
  virtual ~Angle();

  Angle(const Angle& from);

  inline Angle& operator=(const Angle& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Angle(Angle&& from) noexcept
    : Angle() {
    *this = ::std::move(from);
  }

  inline Angle& operator=(Angle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Angle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Angle* internal_default_instance() {
    return reinterpret_cast<const Angle*>(
               &_Angle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(Angle* other);
  friend void swap(Angle& a, Angle& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Angle* New() const final {
    return CreateMaybeMessage<Angle>(NULL);
  }

  Angle* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Angle>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Angle& from);
  void MergeFrom(const Angle& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Angle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Angle_Unit Unit;
  static const Unit DEG =
    Angle_Unit_DEG;
  static const Unit RAD =
    Angle_Unit_RAD;
  static const Unit GRAD =
    Angle_Unit_GRAD;
  static inline bool Unit_IsValid(int value) {
    return Angle_Unit_IsValid(value);
  }
  static const Unit Unit_MIN =
    Angle_Unit_Unit_MIN;
  static const Unit Unit_MAX =
    Angle_Unit_Unit_MAX;
  static const int Unit_ARRAYSIZE =
    Angle_Unit_Unit_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Unit_descriptor() {
    return Angle_Unit_descriptor();
  }
  static inline const ::std::string& Unit_Name(Unit value) {
    return Angle_Unit_Name(value);
  }
  static inline bool Unit_Parse(const ::std::string& name,
      Unit* value) {
    return Angle_Unit_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .css_proto_converter.Num num = 1;
  bool has_num() const;
  void clear_num();
  static const int kNumFieldNumber = 1;
  private:
  const ::css_proto_converter::Num& _internal_num() const;
  public:
  const ::css_proto_converter::Num& num() const;
  ::css_proto_converter::Num* release_num();
  ::css_proto_converter::Num* mutable_num();
  void set_allocated_num(::css_proto_converter::Num* num);

  // required .css_proto_converter.Angle.Unit unit = 2;
  bool has_unit() const;
  void clear_unit();
  static const int kUnitFieldNumber = 2;
  ::css_proto_converter::Angle_Unit unit() const;
  void set_unit(::css_proto_converter::Angle_Unit value);

  // @@protoc_insertion_point(class_scope:css_proto_converter.Angle)
 private:
  void set_has_num();
  void clear_has_num();
  void set_has_unit();
  void clear_has_unit();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::css_proto_converter::Num* num_;
  int unit_;
  friend struct ::protobuf_css_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Time : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:css_proto_converter.Time) */ {
 public:
  Time();
  virtual ~Time();

  Time(const Time& from);

  inline Time& operator=(const Time& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Time(Time&& from) noexcept
    : Time() {
    *this = ::std::move(from);
  }

  inline Time& operator=(Time&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Time& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Time* internal_default_instance() {
    return reinterpret_cast<const Time*>(
               &_Time_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(Time* other);
  friend void swap(Time& a, Time& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Time* New() const final {
    return CreateMaybeMessage<Time>(NULL);
  }

  Time* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Time>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Time& from);
  void MergeFrom(const Time& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Time* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Time_Unit Unit;
  static const Unit MS =
    Time_Unit_MS;
  static const Unit S =
    Time_Unit_S;
  static inline bool Unit_IsValid(int value) {
    return Time_Unit_IsValid(value);
  }
  static const Unit Unit_MIN =
    Time_Unit_Unit_MIN;
  static const Unit Unit_MAX =
    Time_Unit_Unit_MAX;
  static const int Unit_ARRAYSIZE =
    Time_Unit_Unit_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Unit_descriptor() {
    return Time_Unit_descriptor();
  }
  static inline const ::std::string& Unit_Name(Unit value) {
    return Time_Unit_Name(value);
  }
  static inline bool Unit_Parse(const ::std::string& name,
      Unit* value) {
    return Time_Unit_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .css_proto_converter.Num num = 1;
  bool has_num() const;
  void clear_num();
  static const int kNumFieldNumber = 1;
  private:
  const ::css_proto_converter::Num& _internal_num() const;
  public:
  const ::css_proto_converter::Num& num() const;
  ::css_proto_converter::Num* release_num();
  ::css_proto_converter::Num* mutable_num();
  void set_allocated_num(::css_proto_converter::Num* num);

  // required .css_proto_converter.Time.Unit unit = 2;
  bool has_unit() const;
  void clear_unit();
  static const int kUnitFieldNumber = 2;
  ::css_proto_converter::Time_Unit unit() const;
  void set_unit(::css_proto_converter::Time_Unit value);

  // @@protoc_insertion_point(class_scope:css_proto_converter.Time)
 private:
  void set_has_num();
  void clear_has_num();
  void set_has_unit();
  void clear_has_unit();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::css_proto_converter::Num* num_;
  int unit_;
  friend struct ::protobuf_css_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Freq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:css_proto_converter.Freq) */ {
 public:
  Freq();
  virtual ~Freq();

  Freq(const Freq& from);

  inline Freq& operator=(const Freq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Freq(Freq&& from) noexcept
    : Freq() {
    *this = ::std::move(from);
  }

  inline Freq& operator=(Freq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Freq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Freq* internal_default_instance() {
    return reinterpret_cast<const Freq*>(
               &_Freq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(Freq* other);
  friend void swap(Freq& a, Freq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Freq* New() const final {
    return CreateMaybeMessage<Freq>(NULL);
  }

  Freq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Freq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Freq& from);
  void MergeFrom(const Freq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Freq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Freq_Unit Unit;
  static const Unit _HZ =
    Freq_Unit__HZ;
  static const Unit KHZ =
    Freq_Unit_KHZ;
  static inline bool Unit_IsValid(int value) {
    return Freq_Unit_IsValid(value);
  }
  static const Unit Unit_MIN =
    Freq_Unit_Unit_MIN;
  static const Unit Unit_MAX =
    Freq_Unit_Unit_MAX;
  static const int Unit_ARRAYSIZE =
    Freq_Unit_Unit_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Unit_descriptor() {
    return Freq_Unit_descriptor();
  }
  static inline const ::std::string& Unit_Name(Unit value) {
    return Freq_Unit_Name(value);
  }
  static inline bool Unit_Parse(const ::std::string& name,
      Unit* value) {
    return Freq_Unit_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .css_proto_converter.Num num = 1;
  bool has_num() const;
  void clear_num();
  static const int kNumFieldNumber = 1;
  private:
  const ::css_proto_converter::Num& _internal_num() const;
  public:
  const ::css_proto_converter::Num& num() const;
  ::css_proto_converter::Num* release_num();
  ::css_proto_converter::Num* mutable_num();
  void set_allocated_num(::css_proto_converter::Num* num);

  // required .css_proto_converter.Freq.Unit unit = 2;
  bool has_unit() const;
  void clear_unit();
  static const int kUnitFieldNumber = 2;
  ::css_proto_converter::Freq_Unit unit() const;
  void set_unit(::css_proto_converter::Freq_Unit value);

  // @@protoc_insertion_point(class_scope:css_proto_converter.Freq)
 private:
  void set_has_num();
  void clear_has_num();
  void set_has_unit();
  void clear_has_unit();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::css_proto_converter::Num* num_;
  int unit_;
  friend struct ::protobuf_css_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Uri : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:css_proto_converter.Uri) */ {
 public:
  Uri();
  virtual ~Uri();

  Uri(const Uri& from);

  inline Uri& operator=(const Uri& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Uri(Uri&& from) noexcept
    : Uri() {
    *this = ::std::move(from);
  }

  inline Uri& operator=(Uri&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Uri& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Uri* internal_default_instance() {
    return reinterpret_cast<const Uri*>(
               &_Uri_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(Uri* other);
  friend void swap(Uri& a, Uri& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Uri* New() const final {
    return CreateMaybeMessage<Uri>(NULL);
  }

  Uri* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Uri>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Uri& from);
  void MergeFrom(const Uri& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Uri* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:css_proto_converter.Uri)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_css_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FunctionToken : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:css_proto_converter.FunctionToken) */ {
 public:
  FunctionToken();
  virtual ~FunctionToken();

  FunctionToken(const FunctionToken& from);

  inline FunctionToken& operator=(const FunctionToken& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FunctionToken(FunctionToken&& from) noexcept
    : FunctionToken() {
    *this = ::std::move(from);
  }

  inline FunctionToken& operator=(FunctionToken&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FunctionToken& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FunctionToken* internal_default_instance() {
    return reinterpret_cast<const FunctionToken*>(
               &_FunctionToken_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(FunctionToken* other);
  friend void swap(FunctionToken& a, FunctionToken& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FunctionToken* New() const final {
    return CreateMaybeMessage<FunctionToken>(NULL);
  }

  FunctionToken* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FunctionToken>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FunctionToken& from);
  void MergeFrom(const FunctionToken& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FunctionToken* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .css_proto_converter.Ident ident = 1;
  bool has_ident() const;
  void clear_ident();
  static const int kIdentFieldNumber = 1;
  private:
  const ::css_proto_converter::Ident& _internal_ident() const;
  public:
  const ::css_proto_converter::Ident& ident() const;
  ::css_proto_converter::Ident* release_ident();
  ::css_proto_converter::Ident* mutable_ident();
  void set_allocated_ident(::css_proto_converter::Ident* ident);

  // @@protoc_insertion_point(class_scope:css_proto_converter.FunctionToken)
 private:
  void set_has_ident();
  void clear_has_ident();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::css_proto_converter::Ident* ident_;
  friend struct ::protobuf_css_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StyleSheet : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:css_proto_converter.StyleSheet) */ {
 public:
  StyleSheet();
  virtual ~StyleSheet();

  StyleSheet(const StyleSheet& from);

  inline StyleSheet& operator=(const StyleSheet& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StyleSheet(StyleSheet&& from) noexcept
    : StyleSheet() {
    *this = ::std::move(from);
  }

  inline StyleSheet& operator=(StyleSheet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StyleSheet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StyleSheet* internal_default_instance() {
    return reinterpret_cast<const StyleSheet*>(
               &_StyleSheet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(StyleSheet* other);
  friend void swap(StyleSheet& a, StyleSheet& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StyleSheet* New() const final {
    return CreateMaybeMessage<StyleSheet>(NULL);
  }

  StyleSheet* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StyleSheet>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StyleSheet& from);
  void MergeFrom(const StyleSheet& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StyleSheet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .css_proto_converter.Import imports = 2;
  int imports_size() const;
  void clear_imports();
  static const int kImportsFieldNumber = 2;
  ::css_proto_converter::Import* mutable_imports(int index);
  ::google::protobuf::RepeatedPtrField< ::css_proto_converter::Import >*
      mutable_imports();
  const ::css_proto_converter::Import& imports(int index) const;
  ::css_proto_converter::Import* add_imports();
  const ::google::protobuf::RepeatedPtrField< ::css_proto_converter::Import >&
      imports() const;

  // repeated .css_proto_converter.Namespace namespaces = 3;
  int namespaces_size() const;
  void clear_namespaces();
  static const int kNamespacesFieldNumber = 3;
  ::css_proto_converter::Namespace* mutable_namespaces(int index);
  ::google::protobuf::RepeatedPtrField< ::css_proto_converter::Namespace >*
      mutable_namespaces();
  const ::css_proto_converter::Namespace& namespaces(int index) const;
  ::css_proto_converter::Namespace* add_namespaces();
  const ::google::protobuf::RepeatedPtrField< ::css_proto_converter::Namespace >&
      namespaces() const;

  // repeated .css_proto_converter.NestedAtRule nested_at_rules = 4;
  int nested_at_rules_size() const;
  void clear_nested_at_rules();
  static const int kNestedAtRulesFieldNumber = 4;
  ::css_proto_converter::NestedAtRule* mutable_nested_at_rules(int index);
  ::google::protobuf::RepeatedPtrField< ::css_proto_converter::NestedAtRule >*
      mutable_nested_at_rules();
  const ::css_proto_converter::NestedAtRule& nested_at_rules(int index) const;
  ::css_proto_converter::NestedAtRule* add_nested_at_rules();
  const ::google::protobuf::RepeatedPtrField< ::css_proto_converter::NestedAtRule >&
      nested_at_rules() const;

  // optional .css_proto_converter.CharsetDeclaration charset_declaration = 1;
  bool has_charset_declaration() const;
  void clear_charset_declaration();
  static const int kCharsetDeclarationFieldNumber = 1;
  private:
  const ::css_proto_converter::CharsetDeclaration& _internal_charset_declaration() const;
  public:
  const ::css_proto_converter::CharsetDeclaration& charset_declaration() const;
  ::css_proto_converter::CharsetDeclaration* release_charset_declaration();
  ::css_proto_converter::CharsetDeclaration* mutable_charset_declaration();
  void set_allocated_charset_declaration(::css_proto_converter::CharsetDeclaration* charset_declaration);

  // @@protoc_insertion_point(class_scope:css_proto_converter.StyleSheet)
 private:
  void set_has_charset_declaration();
  void clear_has_charset_declaration();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::css_proto_converter::Import > imports_;
  ::google::protobuf::RepeatedPtrField< ::css_proto_converter::Namespace > namespaces_;
  ::google::protobuf::RepeatedPtrField< ::css_proto_converter::NestedAtRule > nested_at_rules_;
  ::css_proto_converter::CharsetDeclaration* charset_declaration_;
  friend struct ::protobuf_css_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CharsetDeclaration : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:css_proto_converter.CharsetDeclaration) */ {
 public:
  CharsetDeclaration();
  virtual ~CharsetDeclaration();

  CharsetDeclaration(const CharsetDeclaration& from);

  inline CharsetDeclaration& operator=(const CharsetDeclaration& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CharsetDeclaration(CharsetDeclaration&& from) noexcept
    : CharsetDeclaration() {
    *this = ::std::move(from);
  }

  inline CharsetDeclaration& operator=(CharsetDeclaration&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CharsetDeclaration& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CharsetDeclaration* internal_default_instance() {
    return reinterpret_cast<const CharsetDeclaration*>(
               &_CharsetDeclaration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(CharsetDeclaration* other);
  friend void swap(CharsetDeclaration& a, CharsetDeclaration& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CharsetDeclaration* New() const final {
    return CreateMaybeMessage<CharsetDeclaration>(NULL);
  }

  CharsetDeclaration* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CharsetDeclaration>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CharsetDeclaration& from);
  void MergeFrom(const CharsetDeclaration& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CharsetDeclaration* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CharsetDeclaration_EncodingId EncodingId;
  static const EncodingId UTF_8 =
    CharsetDeclaration_EncodingId_UTF_8;
  static const EncodingId UTF_16 =
    CharsetDeclaration_EncodingId_UTF_16;
  static const EncodingId UTF_32 =
    CharsetDeclaration_EncodingId_UTF_32;
  static inline bool EncodingId_IsValid(int value) {
    return CharsetDeclaration_EncodingId_IsValid(value);
  }
  static const EncodingId EncodingId_MIN =
    CharsetDeclaration_EncodingId_EncodingId_MIN;
  static const EncodingId EncodingId_MAX =
    CharsetDeclaration_EncodingId_EncodingId_MAX;
  static const int EncodingId_ARRAYSIZE =
    CharsetDeclaration_EncodingId_EncodingId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EncodingId_descriptor() {
    return CharsetDeclaration_EncodingId_descriptor();
  }
  static inline const ::std::string& EncodingId_Name(EncodingId value) {
    return CharsetDeclaration_EncodingId_Name(value);
  }
  static inline bool EncodingId_Parse(const ::std::string& name,
      EncodingId* value) {
    return CharsetDeclaration_EncodingId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .css_proto_converter.CharsetDeclaration.EncodingId encoding_id = 1;
  bool has_encoding_id() const;
  void clear_encoding_id();
  static const int kEncodingIdFieldNumber = 1;
  ::css_proto_converter::CharsetDeclaration_EncodingId encoding_id() const;
  void set_encoding_id(::css_proto_converter::CharsetDeclaration_EncodingId value);

  // @@protoc_insertion_point(class_scope:css_proto_converter.CharsetDeclaration)
 private:
  void set_has_encoding_id();
  void clear_has_encoding_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  int encoding_id_;
  friend struct ::protobuf_css_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NestedAtRule : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:css_proto_converter.NestedAtRule) */ {
 public:
  NestedAtRule();
  virtual ~NestedAtRule();

  NestedAtRule(const NestedAtRule& from);

  inline NestedAtRule& operator=(const NestedAtRule& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NestedAtRule(NestedAtRule&& from) noexcept
    : NestedAtRule() {
    *this = ::std::move(from);
  }

  inline NestedAtRule& operator=(NestedAtRule&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NestedAtRule& default_instance();

  enum RhsCase {
    kRuleset = 1,
    kMedia = 2,
    kPage = 3,
    kFontFace = 4,
    kViewport = 5,
    kSupportsRule = 6,
    RHS_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NestedAtRule* internal_default_instance() {
    return reinterpret_cast<const NestedAtRule*>(
               &_NestedAtRule_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(NestedAtRule* other);
  friend void swap(NestedAtRule& a, NestedAtRule& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NestedAtRule* New() const final {
    return CreateMaybeMessage<NestedAtRule>(NULL);
  }

  NestedAtRule* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NestedAtRule>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NestedAtRule& from);
  void MergeFrom(const NestedAtRule& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NestedAtRule* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .css_proto_converter.Ruleset ruleset = 1;
  bool has_ruleset() const;
  void clear_ruleset();
  static const int kRulesetFieldNumber = 1;
  private:
  const ::css_proto_converter::Ruleset& _internal_ruleset() const;
  public:
  const ::css_proto_converter::Ruleset& ruleset() const;
  ::css_proto_converter::Ruleset* release_ruleset();
  ::css_proto_converter::Ruleset* mutable_ruleset();
  void set_allocated_ruleset(::css_proto_converter::Ruleset* ruleset);

  // optional .css_proto_converter.Media media = 2;
  bool has_media() const;
  void clear_media();
  static const int kMediaFieldNumber = 2;
  private:
  const ::css_proto_converter::Media& _internal_media() const;
  public:
  const ::css_proto_converter::Media& media() const;
  ::css_proto_converter::Media* release_media();
  ::css_proto_converter::Media* mutable_media();
  void set_allocated_media(::css_proto_converter::Media* media);

  // optional .css_proto_converter.Page page = 3;
  bool has_page() const;
  void clear_page();
  static const int kPageFieldNumber = 3;
  private:
  const ::css_proto_converter::Page& _internal_page() const;
  public:
  const ::css_proto_converter::Page& page() const;
  ::css_proto_converter::Page* release_page();
  ::css_proto_converter::Page* mutable_page();
  void set_allocated_page(::css_proto_converter::Page* page);

  // optional .css_proto_converter.FontFace font_face = 4;
  bool has_font_face() const;
  void clear_font_face();
  static const int kFontFaceFieldNumber = 4;
  private:
  const ::css_proto_converter::FontFace& _internal_font_face() const;
  public:
  const ::css_proto_converter::FontFace& font_face() const;
  ::css_proto_converter::FontFace* release_font_face();
  ::css_proto_converter::FontFace* mutable_font_face();
  void set_allocated_font_face(::css_proto_converter::FontFace* font_face);

  // optional .css_proto_converter.Viewport viewport = 5;
  bool has_viewport() const;
  void clear_viewport();
  static const int kViewportFieldNumber = 5;
  private:
  const ::css_proto_converter::Viewport& _internal_viewport() const;
  public:
  const ::css_proto_converter::Viewport& viewport() const;
  ::css_proto_converter::Viewport* release_viewport();
  ::css_proto_converter::Viewport* mutable_viewport();
  void set_allocated_viewport(::css_proto_converter::Viewport* viewport);

  // optional .css_proto_converter.SupportsRule supports_rule = 6;
  bool has_supports_rule() const;
  void clear_supports_rule();
  static const int kSupportsRuleFieldNumber = 6;
  private:
  const ::css_proto_converter::SupportsRule& _internal_supports_rule() const;
  public:
  const ::css_proto_converter::SupportsRule& supports_rule() const;
  ::css_proto_converter::SupportsRule* release_supports_rule();
  ::css_proto_converter::SupportsRule* mutable_supports_rule();
  void set_allocated_supports_rule(::css_proto_converter::SupportsRule* supports_rule);

  void clear_rhs();
  RhsCase rhs_case() const;
  // @@protoc_insertion_point(class_scope:css_proto_converter.NestedAtRule)
 private:
  void set_has_ruleset();
  void set_has_media();
  void set_has_page();
  void set_has_font_face();
  void set_has_viewport();
  void set_has_supports_rule();

  inline bool has_rhs() const;
  inline void clear_has_rhs();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  union RhsUnion {
    RhsUnion() {}
    ::css_proto_converter::Ruleset* ruleset_;
    ::css_proto_converter::Media* media_;
    ::css_proto_converter::Page* page_;
    ::css_proto_converter::FontFace* font_face_;
    ::css_proto_converter::Viewport* viewport_;
    ::css_proto_converter::SupportsRule* supports_rule_;
  } rhs_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_css_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SupportsRule : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:css_proto_converter.SupportsRule) */ {
 public:
  SupportsRule();
  virtual ~SupportsRule();

  SupportsRule(const SupportsRule& from);

  inline SupportsRule& operator=(const SupportsRule& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SupportsRule(SupportsRule&& from) noexcept
    : SupportsRule() {
    *this = ::std::move(from);
  }

  inline SupportsRule& operator=(SupportsRule&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SupportsRule& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SupportsRule* internal_default_instance() {
    return reinterpret_cast<const SupportsRule*>(
               &_SupportsRule_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(SupportsRule* other);
  friend void swap(SupportsRule& a, SupportsRule& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SupportsRule* New() const final {
    return CreateMaybeMessage<SupportsRule>(NULL);
  }

  SupportsRule* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SupportsRule>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SupportsRule& from);
  void MergeFrom(const SupportsRule& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SupportsRule* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .css_proto_converter.AtRuleOrRulesets at_rule_or_rulesets = 2;
  int at_rule_or_rulesets_size() const;
  void clear_at_rule_or_rulesets();
  static const int kAtRuleOrRulesetsFieldNumber = 2;
  ::css_proto_converter::AtRuleOrRulesets* mutable_at_rule_or_rulesets(int index);
  ::google::protobuf::RepeatedPtrField< ::css_proto_converter::AtRuleOrRulesets >*
      mutable_at_rule_or_rulesets();
  const ::css_proto_converter::AtRuleOrRulesets& at_rule_or_rulesets(int index) const;
  ::css_proto_converter::AtRuleOrRulesets* add_at_rule_or_rulesets();
  const ::google::protobuf::RepeatedPtrField< ::css_proto_converter::AtRuleOrRulesets >&
      at_rule_or_rulesets() const;

  // required .css_proto_converter.SupportsCondition supports_condition = 1;
  bool has_supports_condition() const;
  void clear_supports_condition();
  static const int kSupportsConditionFieldNumber = 1;
  private:
  const ::css_proto_converter::SupportsCondition& _internal_supports_condition() const;
  public:
  const ::css_proto_converter::SupportsCondition& supports_condition() const;
  ::css_proto_converter::SupportsCondition* release_supports_condition();
  ::css_proto_converter::SupportsCondition* mutable_supports_condition();
  void set_allocated_supports_condition(::css_proto_converter::SupportsCondition* supports_condition);

  // @@protoc_insertion_point(class_scope:css_proto_converter.SupportsRule)
 private:
  void set_has_supports_condition();
  void clear_has_supports_condition();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::css_proto_converter::AtRuleOrRulesets > at_rule_or_rulesets_;
  ::css_proto_converter::SupportsCondition* supports_condition_;
  friend struct ::protobuf_css_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AtRuleOrRulesets : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:css_proto_converter.AtRuleOrRulesets) */ {
 public:
  AtRuleOrRulesets();
  virtual ~AtRuleOrRulesets();

  AtRuleOrRulesets(const AtRuleOrRulesets& from);

  inline AtRuleOrRulesets& operator=(const AtRuleOrRulesets& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AtRuleOrRulesets(AtRuleOrRulesets&& from) noexcept
    : AtRuleOrRulesets() {
    *this = ::std::move(from);
  }

  inline AtRuleOrRulesets& operator=(AtRuleOrRulesets&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AtRuleOrRulesets& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AtRuleOrRulesets* internal_default_instance() {
    return reinterpret_cast<const AtRuleOrRulesets*>(
               &_AtRuleOrRulesets_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(AtRuleOrRulesets* other);
  friend void swap(AtRuleOrRulesets& a, AtRuleOrRulesets& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AtRuleOrRulesets* New() const final {
    return CreateMaybeMessage<AtRuleOrRulesets>(NULL);
  }

  AtRuleOrRulesets* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AtRuleOrRulesets>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AtRuleOrRulesets& from);
  void MergeFrom(const AtRuleOrRulesets& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AtRuleOrRulesets* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .css_proto_converter.AtRuleOrRuleset laters = 2;
  int laters_size() const;
  void clear_laters();
  static const int kLatersFieldNumber = 2;
  ::css_proto_converter::AtRuleOrRuleset* mutable_laters(int index);
  ::google::protobuf::RepeatedPtrField< ::css_proto_converter::AtRuleOrRuleset >*
      mutable_laters();
  const ::css_proto_converter::AtRuleOrRuleset& laters(int index) const;
  ::css_proto_converter::AtRuleOrRuleset* add_laters();
  const ::google::protobuf::RepeatedPtrField< ::css_proto_converter::AtRuleOrRuleset >&
      laters() const;

  // required .css_proto_converter.AtRuleOrRuleset first = 1;
  bool has_first() const;
  void clear_first();
  static const int kFirstFieldNumber = 1;
  private:
  const ::css_proto_converter::AtRuleOrRuleset& _internal_first() const;
  public:
  const ::css_proto_converter::AtRuleOrRuleset& first() const;
  ::css_proto_converter::AtRuleOrRuleset* release_first();
  ::css_proto_converter::AtRuleOrRuleset* mutable_first();
  void set_allocated_first(::css_proto_converter::AtRuleOrRuleset* first);

  // @@protoc_insertion_point(class_scope:css_proto_converter.AtRuleOrRulesets)
 private:
  void set_has_first();
  void clear_has_first();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::css_proto_converter::AtRuleOrRuleset > laters_;
  ::css_proto_converter::AtRuleOrRuleset* first_;
  friend struct ::protobuf_css_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AtRuleOrRuleset : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:css_proto_converter.AtRuleOrRuleset) */ {
 public:
  AtRuleOrRuleset();
  virtual ~AtRuleOrRuleset();

  AtRuleOrRuleset(const AtRuleOrRuleset& from);

  inline AtRuleOrRuleset& operator=(const AtRuleOrRuleset& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AtRuleOrRuleset(AtRuleOrRuleset&& from) noexcept
    : AtRuleOrRuleset() {
    *this = ::std::move(from);
  }

  inline AtRuleOrRuleset& operator=(AtRuleOrRuleset&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AtRuleOrRuleset& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AtRuleOrRuleset* internal_default_instance() {
    return reinterpret_cast<const AtRuleOrRuleset*>(
               &_AtRuleOrRuleset_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(AtRuleOrRuleset* other);
  friend void swap(AtRuleOrRuleset& a, AtRuleOrRuleset& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AtRuleOrRuleset* New() const final {
    return CreateMaybeMessage<AtRuleOrRuleset>(NULL);
  }

  AtRuleOrRuleset* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AtRuleOrRuleset>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AtRuleOrRuleset& from);
  void MergeFrom(const AtRuleOrRuleset& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AtRuleOrRuleset* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .css_proto_converter.Ruleset ruleset = 1;
  bool has_ruleset() const;
  void clear_ruleset();
  static const int kRulesetFieldNumber = 1;
  private:
  const ::css_proto_converter::Ruleset& _internal_ruleset() const;
  public:
  const ::css_proto_converter::Ruleset& ruleset() const;
  ::css_proto_converter::Ruleset* release_ruleset();
  ::css_proto_converter::Ruleset* mutable_ruleset();
  void set_allocated_ruleset(::css_proto_converter::Ruleset* ruleset);

  // optional .css_proto_converter.NestedAtRule at_rule = 2;
  bool has_at_rule() const;
  void clear_at_rule();
  static const int kAtRuleFieldNumber = 2;
  private:
  const ::css_proto_converter::NestedAtRule& _internal_at_rule() const;
  public:
  const ::css_proto_converter::NestedAtRule& at_rule() const;
  ::css_proto_converter::NestedAtRule* release_at_rule();
  ::css_proto_converter::NestedAtRule* mutable_at_rule();
  void set_allocated_at_rule(::css_proto_converter::NestedAtRule* at_rule);

  // @@protoc_insertion_point(class_scope:css_proto_converter.AtRuleOrRuleset)
 private:
  void set_has_ruleset();
  void clear_has_ruleset();
  void set_has_at_rule();
  void clear_has_at_rule();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::css_proto_converter::Ruleset* ruleset_;
  ::css_proto_converter::NestedAtRule* at_rule_;
  friend struct ::protobuf_css_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SupportsCondition : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:css_proto_converter.SupportsCondition) */ {
 public:
  SupportsCondition();
  virtual ~SupportsCondition();

  SupportsCondition(const SupportsCondition& from);

  inline SupportsCondition& operator=(const SupportsCondition& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SupportsCondition(SupportsCondition&& from) noexcept
    : SupportsCondition() {
    *this = ::std::move(from);
  }

  inline SupportsCondition& operator=(SupportsCondition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SupportsCondition& default_instance();

  enum RhsCase {
    kAndSupportsCondition = 3,
    kOrSupportsCondition = 4,
    RHS_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SupportsCondition* internal_default_instance() {
    return reinterpret_cast<const SupportsCondition*>(
               &_SupportsCondition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(SupportsCondition* other);
  friend void swap(SupportsCondition& a, SupportsCondition& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SupportsCondition* New() const final {
    return CreateMaybeMessage<SupportsCondition>(NULL);
  }

  SupportsCondition* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SupportsCondition>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SupportsCondition& from);
  void MergeFrom(const SupportsCondition& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SupportsCondition* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .css_proto_converter.PropertyAndValue property_and_value = 1;
  bool has_property_and_value() const;
  void clear_property_and_value();
  static const int kPropertyAndValueFieldNumber = 1;
  private:
  const ::css_proto_converter::PropertyAndValue& _internal_property_and_value() const;
  public:
  const ::css_proto_converter::PropertyAndValue& property_and_value() const;
  ::css_proto_converter::PropertyAndValue* release_property_and_value();
  ::css_proto_converter::PropertyAndValue* mutable_property_and_value();
  void set_allocated_property_and_value(::css_proto_converter::PropertyAndValue* property_and_value);

  // required bool not_condition = 2;
  bool has_not_condition() const;
  void clear_not_condition();
  static const int kNotConditionFieldNumber = 2;
  bool not_condition() const;
  void set_not_condition(bool value);

  // optional .css_proto_converter.BinarySupportsCondition and_supports_condition = 3;
  bool has_and_supports_condition() const;
  void clear_and_supports_condition();
  static const int kAndSupportsConditionFieldNumber = 3;
  private:
  const ::css_proto_converter::BinarySupportsCondition& _internal_and_supports_condition() const;
  public:
  const ::css_proto_converter::BinarySupportsCondition& and_supports_condition() const;
  ::css_proto_converter::BinarySupportsCondition* release_and_supports_condition();
  ::css_proto_converter::BinarySupportsCondition* mutable_and_supports_condition();
  void set_allocated_and_supports_condition(::css_proto_converter::BinarySupportsCondition* and_supports_condition);

  // optional .css_proto_converter.BinarySupportsCondition or_supports_condition = 4;
  bool has_or_supports_condition() const;
  void clear_or_supports_condition();
  static const int kOrSupportsConditionFieldNumber = 4;
  private:
  const ::css_proto_converter::BinarySupportsCondition& _internal_or_supports_condition() const;
  public:
  const ::css_proto_converter::BinarySupportsCondition& or_supports_condition() const;
  ::css_proto_converter::BinarySupportsCondition* release_or_supports_condition();
  ::css_proto_converter::BinarySupportsCondition* mutable_or_supports_condition();
  void set_allocated_or_supports_condition(::css_proto_converter::BinarySupportsCondition* or_supports_condition);

  void clear_rhs();
  RhsCase rhs_case() const;
  // @@protoc_insertion_point(class_scope:css_proto_converter.SupportsCondition)
 private:
  void set_has_property_and_value();
  void clear_has_property_and_value();
  void set_has_not_condition();
  void clear_has_not_condition();
  void set_has_and_supports_condition();
  void set_has_or_supports_condition();

  inline bool has_rhs() const;
  inline void clear_has_rhs();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::css_proto_converter::PropertyAndValue* property_and_value_;
  bool not_condition_;
  union RhsUnion {
    RhsUnion() {}
    ::css_proto_converter::BinarySupportsCondition* and_supports_condition_;
    ::css_proto_converter::BinarySupportsCondition* or_supports_condition_;
  } rhs_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_css_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BinarySupportsCondition : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:css_proto_converter.BinarySupportsCondition) */ {
 public:
  BinarySupportsCondition();
  virtual ~BinarySupportsCondition();

  BinarySupportsCondition(const BinarySupportsCondition& from);

  inline BinarySupportsCondition& operator=(const BinarySupportsCondition& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BinarySupportsCondition(BinarySupportsCondition&& from) noexcept
    : BinarySupportsCondition() {
    *this = ::std::move(from);
  }

  inline BinarySupportsCondition& operator=(BinarySupportsCondition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BinarySupportsCondition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BinarySupportsCondition* internal_default_instance() {
    return reinterpret_cast<const BinarySupportsCondition*>(
               &_BinarySupportsCondition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(BinarySupportsCondition* other);
  friend void swap(BinarySupportsCondition& a, BinarySupportsCondition& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BinarySupportsCondition* New() const final {
    return CreateMaybeMessage<BinarySupportsCondition>(NULL);
  }

  BinarySupportsCondition* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BinarySupportsCondition>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BinarySupportsCondition& from);
  void MergeFrom(const BinarySupportsCondition& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BinarySupportsCondition* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .css_proto_converter.SupportsCondition condition_1 = 1;
  bool has_condition_1() const;
  void clear_condition_1();
  static const int kCondition1FieldNumber = 1;
  private:
  const ::css_proto_converter::SupportsCondition& _internal_condition_1() const;
  public:
  const ::css_proto_converter::SupportsCondition& condition_1() const;
  ::css_proto_converter::SupportsCondition* release_condition_1();
  ::css_proto_converter::SupportsCondition* mutable_condition_1();
  void set_allocated_condition_1(::css_proto_converter::SupportsCondition* condition_1);

  // required .css_proto_converter.SupportsCondition condition_2 = 2;
  bool has_condition_2() const;
  void clear_condition_2();
  static const int kCondition2FieldNumber = 2;
  private:
  const ::css_proto_converter::SupportsCondition& _internal_condition_2() const;
  public:
  const ::css_proto_converter::SupportsCondition& condition_2() const;
  ::css_proto_converter::SupportsCondition* release_condition_2();
  ::css_proto_converter::SupportsCondition* mutable_condition_2();
  void set_allocated_condition_2(::css_proto_converter::SupportsCondition* condition_2);

  // @@protoc_insertion_point(class_scope:css_proto_converter.BinarySupportsCondition)
 private:
  void set_has_condition_1();
  void clear_has_condition_1();
  void set_has_condition_2();
  void clear_has_condition_2();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::css_proto_converter::SupportsCondition* condition_1_;
  ::css_proto_converter::SupportsCondition* condition_2_;
  friend struct ::protobuf_css_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Viewport : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:css_proto_converter.Viewport) */ {
 public:
  Viewport();
  virtual ~Viewport();

  Viewport(const Viewport& from);

  inline Viewport& operator=(const Viewport& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Viewport(Viewport&& from) noexcept
    : Viewport() {
    *this = ::std::move(from);
  }

  inline Viewport& operator=(Viewport&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Viewport& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Viewport* internal_default_instance() {
    return reinterpret_cast<const Viewport*>(
               &_Viewport_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(Viewport* other);
  friend void swap(Viewport& a, Viewport& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Viewport* New() const final {
    return CreateMaybeMessage<Viewport>(NULL);
  }

  Viewport* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Viewport>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Viewport& from);
  void MergeFrom(const Viewport& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Viewport* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .css_proto_converter.ViewportPropertyAndValue properties_and_values = 1;
  int properties_and_values_size() const;
  void clear_properties_and_values();
  static const int kPropertiesAndValuesFieldNumber = 1;
  ::css_proto_converter::ViewportPropertyAndValue* mutable_properties_and_values(int index);
  ::google::protobuf::RepeatedPtrField< ::css_proto_converter::ViewportPropertyAndValue >*
      mutable_properties_and_values();
  const ::css_proto_converter::ViewportPropertyAndValue& properties_and_values(int index) const;
  ::css_proto_converter::ViewportPropertyAndValue* add_properties_and_values();
  const ::google::protobuf::RepeatedPtrField< ::css_proto_converter::ViewportPropertyAndValue >&
      properties_and_values() const;

  // @@protoc_insertion_point(class_scope:css_proto_converter.Viewport)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::css_proto_converter::ViewportPropertyAndValue > properties_and_values_;
  friend struct ::protobuf_css_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ViewportPropertyAndValue : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:css_proto_converter.ViewportPropertyAndValue) */ {
 public:
  ViewportPropertyAndValue();
  virtual ~ViewportPropertyAndValue();

  ViewportPropertyAndValue(const ViewportPropertyAndValue& from);

  inline ViewportPropertyAndValue& operator=(const ViewportPropertyAndValue& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ViewportPropertyAndValue(ViewportPropertyAndValue&& from) noexcept
    : ViewportPropertyAndValue() {
    *this = ::std::move(from);
  }

  inline ViewportPropertyAndValue& operator=(ViewportPropertyAndValue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ViewportPropertyAndValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ViewportPropertyAndValue* internal_default_instance() {
    return reinterpret_cast<const ViewportPropertyAndValue*>(
               &_ViewportPropertyAndValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(ViewportPropertyAndValue* other);
  friend void swap(ViewportPropertyAndValue& a, ViewportPropertyAndValue& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ViewportPropertyAndValue* New() const final {
    return CreateMaybeMessage<ViewportPropertyAndValue>(NULL);
  }

  ViewportPropertyAndValue* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ViewportPropertyAndValue>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ViewportPropertyAndValue& from);
  void MergeFrom(const ViewportPropertyAndValue& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ViewportPropertyAndValue* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .css_proto_converter.ViewportProperty property = 1;
  bool has_property() const;
  void clear_property();
  static const int kPropertyFieldNumber = 1;
  private:
  const ::css_proto_converter::ViewportProperty& _internal_property() const;
  public:
  const ::css_proto_converter::ViewportProperty& property() const;
  ::css_proto_converter::ViewportProperty* release_property();
  ::css_proto_converter::ViewportProperty* mutable_property();
  void set_allocated_property(::css_proto_converter::ViewportProperty* property);

  // required .css_proto_converter.ViewportValue value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  private:
  const ::css_proto_converter::ViewportValue& _internal_value() const;
  public:
  const ::css_proto_converter::ViewportValue& value() const;
  ::css_proto_converter::ViewportValue* release_value();
  ::css_proto_converter::ViewportValue* mutable_value();
  void set_allocated_value(::css_proto_converter::ViewportValue* value);

  // @@protoc_insertion_point(class_scope:css_proto_converter.ViewportPropertyAndValue)
 private:
  void set_has_property();
  void clear_has_property();
  void set_has_value();
  void clear_has_value();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::css_proto_converter::ViewportProperty* property_;
  ::css_proto_converter::ViewportValue* value_;
  friend struct ::protobuf_css_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ViewportProperty : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:css_proto_converter.ViewportProperty) */ {
 public:
  ViewportProperty();
  virtual ~ViewportProperty();

  ViewportProperty(const ViewportProperty& from);

  inline ViewportProperty& operator=(const ViewportProperty& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ViewportProperty(ViewportProperty&& from) noexcept
    : ViewportProperty() {
    *this = ::std::move(from);
  }

  inline ViewportProperty& operator=(ViewportProperty&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ViewportProperty& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ViewportProperty* internal_default_instance() {
    return reinterpret_cast<const ViewportProperty*>(
               &_ViewportProperty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(ViewportProperty* other);
  friend void swap(ViewportProperty& a, ViewportProperty& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ViewportProperty* New() const final {
    return CreateMaybeMessage<ViewportProperty>(NULL);
  }

  ViewportProperty* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ViewportProperty>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ViewportProperty& from);
  void MergeFrom(const ViewportProperty& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ViewportProperty* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ViewportProperty_PropertyId PropertyId;
  static const PropertyId MIN_WIDTH =
    ViewportProperty_PropertyId_MIN_WIDTH;
  static const PropertyId MAX_WIDTH =
    ViewportProperty_PropertyId_MAX_WIDTH;
  static const PropertyId WIDTH =
    ViewportProperty_PropertyId_WIDTH;
  static const PropertyId MIN_HEIGHT =
    ViewportProperty_PropertyId_MIN_HEIGHT;
  static const PropertyId MAX_HEIGHT =
    ViewportProperty_PropertyId_MAX_HEIGHT;
  static const PropertyId HEIGHT =
    ViewportProperty_PropertyId_HEIGHT;
  static const PropertyId ZOOM =
    ViewportProperty_PropertyId_ZOOM;
  static const PropertyId MIN_ZOOM =
    ViewportProperty_PropertyId_MIN_ZOOM;
  static const PropertyId USER_ZOOM =
    ViewportProperty_PropertyId_USER_ZOOM;
  static const PropertyId MAX_ZOOM =
    ViewportProperty_PropertyId_MAX_ZOOM;
  static const PropertyId ORIENTATION =
    ViewportProperty_PropertyId_ORIENTATION;
  static inline bool PropertyId_IsValid(int value) {
    return ViewportProperty_PropertyId_IsValid(value);
  }
  static const PropertyId PropertyId_MIN =
    ViewportProperty_PropertyId_PropertyId_MIN;
  static const PropertyId PropertyId_MAX =
    ViewportProperty_PropertyId_PropertyId_MAX;
  static const int PropertyId_ARRAYSIZE =
    ViewportProperty_PropertyId_PropertyId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PropertyId_descriptor() {
    return ViewportProperty_PropertyId_descriptor();
  }
  static inline const ::std::string& PropertyId_Name(PropertyId value) {
    return ViewportProperty_PropertyId_Name(value);
  }
  static inline bool PropertyId_Parse(const ::std::string& name,
      PropertyId* value) {
    return ViewportProperty_PropertyId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .css_proto_converter.ViewportProperty.PropertyId id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::css_proto_converter::ViewportProperty_PropertyId id() const;
  void set_id(::css_proto_converter::ViewportProperty_PropertyId value);

  // @@protoc_insertion_point(class_scope:css_proto_converter.ViewportProperty)
 private:
  void set_has_id();
  void clear_has_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  int id_;
  friend struct ::protobuf_css_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ViewportValue : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:css_proto_converter.ViewportValue) */ {
 public:
  ViewportValue();
  virtual ~ViewportValue();

  ViewportValue(const ViewportValue& from);

  inline ViewportValue& operator=(const ViewportValue& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ViewportValue(ViewportValue&& from) noexcept
    : ViewportValue() {
    *this = ::std::move(from);
  }

  inline ViewportValue& operator=(ViewportValue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ViewportValue& default_instance();

  enum RhsCase {
    kLength = 2,
    kNum = 3,
    RHS_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ViewportValue* internal_default_instance() {
    return reinterpret_cast<const ViewportValue*>(
               &_ViewportValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(ViewportValue* other);
  friend void swap(ViewportValue& a, ViewportValue& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ViewportValue* New() const final {
    return CreateMaybeMessage<ViewportValue>(NULL);
  }

  ViewportValue* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ViewportValue>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ViewportValue& from);
  void MergeFrom(const ViewportValue& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ViewportValue* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ViewportValue_ValueId ValueId;
  static const ValueId LANDSCAPE =
    ViewportValue_ValueId_LANDSCAPE;
  static const ValueId PORTRAIT =
    ViewportValue_ValueId_PORTRAIT;
  static const ValueId AUTO =
    ViewportValue_ValueId_AUTO;
  static const ValueId ZOOM =
    ViewportValue_ValueId_ZOOM;
  static const ValueId FIXED =
    ViewportValue_ValueId_FIXED;
  static const ValueId NONE =
    ViewportValue_ValueId_NONE;
  static inline bool ValueId_IsValid(int value) {
    return ViewportValue_ValueId_IsValid(value);
  }
  static const ValueId ValueId_MIN =
    ViewportValue_ValueId_ValueId_MIN;
  static const ValueId ValueId_MAX =
    ViewportValue_ValueId_ValueId_MAX;
  static const int ValueId_ARRAYSIZE =
    ViewportValue_ValueId_ValueId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ValueId_descriptor() {
    return ViewportValue_ValueId_descriptor();
  }
  static inline const ::std::string& ValueId_Name(ValueId value) {
    return ViewportValue_ValueId_Name(value);
  }
  static inline bool ValueId_Parse(const ::std::string& name,
      ValueId* value) {
    return ViewportValue_ValueId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .css_proto_converter.ViewportValue.ValueId value_id = 1;
  bool has_value_id() const;
  void clear_value_id();
  static const int kValueIdFieldNumber = 1;
  ::css_proto_converter::ViewportValue_ValueId value_id() const;
  void set_value_id(::css_proto_converter::ViewportValue_ValueId value);

  // optional .css_proto_converter.Length length = 2;
  bool has_length() const;
  void clear_length();
  static const int kLengthFieldNumber = 2;
  private:
  const ::css_proto_converter::Length& _internal_length() const;
  public:
  const ::css_proto_converter::Length& length() const;
  ::css_proto_converter::Length* release_length();
  ::css_proto_converter::Length* mutable_length();
  void set_allocated_length(::css_proto_converter::Length* length);

  // optional .css_proto_converter.Num num = 3;
  bool has_num() const;
  void clear_num();
  static const int kNumFieldNumber = 3;
  private:
  const ::css_proto_converter::Num& _internal_num() const;
  public:
  const ::css_proto_converter::Num& num() const;
  ::css_proto_converter::Num* release_num();
  ::css_proto_converter::Num* mutable_num();
  void set_allocated_num(::css_proto_converter::Num* num);

  void clear_rhs();
  RhsCase rhs_case() const;
  // @@protoc_insertion_point(class_scope:css_proto_converter.ViewportValue)
 private:
  void set_has_value_id();
  void clear_has_value_id();
  void set_has_length();
  void set_has_num();

  inline bool has_rhs() const;
  inline void clear_has_rhs();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  int value_id_;
  union RhsUnion {
    RhsUnion() {}
    ::css_proto_converter::Length* length_;
    ::css_proto_converter::Num* num_;
  } rhs_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_css_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Import : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:css_proto_converter.Import) */ {
 public:
  Import();
  virtual ~Import();

  Import(const Import& from);

  inline Import& operator=(const Import& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Import(Import&& from) noexcept
    : Import() {
    *this = ::std::move(from);
  }

  inline Import& operator=(Import&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Import& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Import* internal_default_instance() {
    return reinterpret_cast<const Import*>(
               &_Import_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(Import* other);
  friend void swap(Import& a, Import& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Import* New() const final {
    return CreateMaybeMessage<Import>(NULL);
  }

  Import* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Import>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Import& from);
  void MergeFrom(const Import& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Import* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Import_SrcId SrcId;
  static const SrcId RELATIVE_STRING =
    Import_SrcId_RELATIVE_STRING;
  static const SrcId FULL_URL =
    Import_SrcId_FULL_URL;
  static inline bool SrcId_IsValid(int value) {
    return Import_SrcId_IsValid(value);
  }
  static const SrcId SrcId_MIN =
    Import_SrcId_SrcId_MIN;
  static const SrcId SrcId_MAX =
    Import_SrcId_SrcId_MAX;
  static const int SrcId_ARRAYSIZE =
    Import_SrcId_SrcId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SrcId_descriptor() {
    return Import_SrcId_descriptor();
  }
  static inline const ::std::string& SrcId_Name(SrcId value) {
    return Import_SrcId_Name(value);
  }
  static inline bool SrcId_Parse(const ::std::string& name,
      SrcId* value) {
    return Import_SrcId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .css_proto_converter.MediaQueryList media_query_list = 2;
  bool has_media_query_list() const;
  void clear_media_query_list();
  static const int kMediaQueryListFieldNumber = 2;
  private:
  const ::css_proto_converter::MediaQueryList& _internal_media_query_list() const;
  public:
  const ::css_proto_converter::MediaQueryList& media_query_list() const;
  ::css_proto_converter::MediaQueryList* release_media_query_list();
  ::css_proto_converter::MediaQueryList* mutable_media_query_list();
  void set_allocated_media_query_list(::css_proto_converter::MediaQueryList* media_query_list);

  // optional .css_proto_converter.Import.SrcId src_id = 1;
  bool has_src_id() const;
  void clear_src_id();
  static const int kSrcIdFieldNumber = 1;
  ::css_proto_converter::Import_SrcId src_id() const;
  void set_src_id(::css_proto_converter::Import_SrcId value);

  // @@protoc_insertion_point(class_scope:css_proto_converter.Import)
 private:
  void set_has_src_id();
  void clear_has_src_id();
  void set_has_media_query_list();
  void clear_has_media_query_list();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::css_proto_converter::MediaQueryList* media_query_list_;
  int src_id_;
  friend struct ::protobuf_css_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MediaQueryList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:css_proto_converter.MediaQueryList) */ {
 public:
  MediaQueryList();
  virtual ~MediaQueryList();

  MediaQueryList(const MediaQueryList& from);

  inline MediaQueryList& operator=(const MediaQueryList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MediaQueryList(MediaQueryList&& from) noexcept
    : MediaQueryList() {
    *this = ::std::move(from);
  }

  inline MediaQueryList& operator=(MediaQueryList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MediaQueryList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MediaQueryList* internal_default_instance() {
    return reinterpret_cast<const MediaQueryList*>(
               &_MediaQueryList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(MediaQueryList* other);
  friend void swap(MediaQueryList& a, MediaQueryList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MediaQueryList* New() const final {
    return CreateMaybeMessage<MediaQueryList>(NULL);
  }

  MediaQueryList* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MediaQueryList>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MediaQueryList& from);
  void MergeFrom(const MediaQueryList& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MediaQueryList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .css_proto_converter.MediaQuery media_queries = 1;
  int media_queries_size() const;
  void clear_media_queries();
  static const int kMediaQueriesFieldNumber = 1;
  ::css_proto_converter::MediaQuery* mutable_media_queries(int index);
  ::google::protobuf::RepeatedPtrField< ::css_proto_converter::MediaQuery >*
      mutable_media_queries();
  const ::css_proto_converter::MediaQuery& media_queries(int index) const;
  ::css_proto_converter::MediaQuery* add_media_queries();
  const ::google::protobuf::RepeatedPtrField< ::css_proto_converter::MediaQuery >&
      media_queries() const;

  // @@protoc_insertion_point(class_scope:css_proto_converter.MediaQueryList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::css_proto_converter::MediaQuery > media_queries_;
  friend struct ::protobuf_css_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MediaQuery : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:css_proto_converter.MediaQuery) */ {
 public:
  MediaQuery();
  virtual ~MediaQuery();

  MediaQuery(const MediaQuery& from);

  inline MediaQuery& operator=(const MediaQuery& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MediaQuery(MediaQuery&& from) noexcept
    : MediaQuery() {
    *this = ::std::move(from);
  }

  inline MediaQuery& operator=(MediaQuery&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MediaQuery& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MediaQuery* internal_default_instance() {
    return reinterpret_cast<const MediaQuery*>(
               &_MediaQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(MediaQuery* other);
  friend void swap(MediaQuery& a, MediaQuery& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MediaQuery* New() const final {
    return CreateMaybeMessage<MediaQuery>(NULL);
  }

  MediaQuery* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MediaQuery>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MediaQuery& from);
  void MergeFrom(const MediaQuery& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MediaQuery* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .css_proto_converter.MediaCondition media_condition = 1;
  bool has_media_condition() const;
  void clear_media_condition();
  static const int kMediaConditionFieldNumber = 1;
  private:
  const ::css_proto_converter::MediaCondition& _internal_media_condition() const;
  public:
  const ::css_proto_converter::MediaCondition& media_condition() const;
  ::css_proto_converter::MediaCondition* release_media_condition();
  ::css_proto_converter::MediaCondition* mutable_media_condition();
  void set_allocated_media_condition(::css_proto_converter::MediaCondition* media_condition);

  // optional .css_proto_converter.MediaQueryPartTwo media_query_part_two = 2;
  bool has_media_query_part_two() const;
  void clear_media_query_part_two();
  static const int kMediaQueryPartTwoFieldNumber = 2;
  private:
  const ::css_proto_converter::MediaQueryPartTwo& _internal_media_query_part_two() const;
  public:
  const ::css_proto_converter::MediaQueryPartTwo& media_query_part_two() const;
  ::css_proto_converter::MediaQueryPartTwo* release_media_query_part_two();
  ::css_proto_converter::MediaQueryPartTwo* mutable_media_query_part_two();
  void set_allocated_media_query_part_two(::css_proto_converter::MediaQueryPartTwo* media_query_part_two);

  // @@protoc_insertion_point(class_scope:css_proto_converter.MediaQuery)
 private:
  void set_has_media_condition();
  void clear_has_media_condition();
  void set_has_media_query_part_two();
  void clear_has_media_query_part_two();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::css_proto_converter::MediaCondition* media_condition_;
  ::css_proto_converter::MediaQueryPartTwo* media_query_part_two_;
  friend struct ::protobuf_css_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MediaQueryPartTwo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:css_proto_converter.MediaQueryPartTwo) */ {
 public:
  MediaQueryPartTwo();
  virtual ~MediaQueryPartTwo();

  MediaQueryPartTwo(const MediaQueryPartTwo& from);

  inline MediaQueryPartTwo& operator=(const MediaQueryPartTwo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MediaQueryPartTwo(MediaQueryPartTwo&& from) noexcept
    : MediaQueryPartTwo() {
    *this = ::std::move(from);
  }

  inline MediaQueryPartTwo& operator=(MediaQueryPartTwo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MediaQueryPartTwo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MediaQueryPartTwo* internal_default_instance() {
    return reinterpret_cast<const MediaQueryPartTwo*>(
               &_MediaQueryPartTwo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(MediaQueryPartTwo* other);
  friend void swap(MediaQueryPartTwo& a, MediaQueryPartTwo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MediaQueryPartTwo* New() const final {
    return CreateMaybeMessage<MediaQueryPartTwo>(NULL);
  }

  MediaQueryPartTwo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MediaQueryPartTwo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MediaQueryPartTwo& from);
  void MergeFrom(const MediaQueryPartTwo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MediaQueryPartTwo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef MediaQueryPartTwo_NotOrOnly NotOrOnly;
  static const NotOrOnly NOT =
    MediaQueryPartTwo_NotOrOnly_NOT;
  static const NotOrOnly ONLY =
    MediaQueryPartTwo_NotOrOnly_ONLY;
  static inline bool NotOrOnly_IsValid(int value) {
    return MediaQueryPartTwo_NotOrOnly_IsValid(value);
  }
  static const NotOrOnly NotOrOnly_MIN =
    MediaQueryPartTwo_NotOrOnly_NotOrOnly_MIN;
  static const NotOrOnly NotOrOnly_MAX =
    MediaQueryPartTwo_NotOrOnly_NotOrOnly_MAX;
  static const int NotOrOnly_ARRAYSIZE =
    MediaQueryPartTwo_NotOrOnly_NotOrOnly_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  NotOrOnly_descriptor() {
    return MediaQueryPartTwo_NotOrOnly_descriptor();
  }
  static inline const ::std::string& NotOrOnly_Name(NotOrOnly value) {
    return MediaQueryPartTwo_NotOrOnly_Name(value);
  }
  static inline bool NotOrOnly_Parse(const ::std::string& name,
      NotOrOnly* value) {
    return MediaQueryPartTwo_NotOrOnly_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .css_proto_converter.MediaType media_type = 2;
  bool has_media_type() const;
  void clear_media_type();
  static const int kMediaTypeFieldNumber = 2;
  private:
  const ::css_proto_converter::MediaType& _internal_media_type() const;
  public:
  const ::css_proto_converter::MediaType& media_type() const;
  ::css_proto_converter::MediaType* release_media_type();
  ::css_proto_converter::MediaType* mutable_media_type();
  void set_allocated_media_type(::css_proto_converter::MediaType* media_type);

  // optional .css_proto_converter.MediaConditionWithoutOr media_condition_without_or = 3;
  bool has_media_condition_without_or() const;
  void clear_media_condition_without_or();
  static const int kMediaConditionWithoutOrFieldNumber = 3;
  private:
  const ::css_proto_converter::MediaConditionWithoutOr& _internal_media_condition_without_or() const;
  public:
  const ::css_proto_converter::MediaConditionWithoutOr& media_condition_without_or() const;
  ::css_proto_converter::MediaConditionWithoutOr* release_media_condition_without_or();
  ::css_proto_converter::MediaConditionWithoutOr* mutable_media_condition_without_or();
  void set_allocated_media_condition_without_or(::css_proto_converter::MediaConditionWithoutOr* media_condition_without_or);

  // optional .css_proto_converter.MediaQueryPartTwo.NotOrOnly not_or_only = 1;
  bool has_not_or_only() const;
  void clear_not_or_only();
  static const int kNotOrOnlyFieldNumber = 1;
  ::css_proto_converter::MediaQueryPartTwo_NotOrOnly not_or_only() const;
  void set_not_or_only(::css_proto_converter::MediaQueryPartTwo_NotOrOnly value);

  // @@protoc_insertion_point(class_scope:css_proto_converter.MediaQueryPartTwo)
 private:
  void set_has_not_or_only();
  void clear_has_not_or_only();
  void set_has_media_type();
  void clear_has_media_type();
  void set_has_media_condition_without_or();
  void clear_has_media_condition_without_or();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::css_proto_converter::MediaType* media_type_;
  ::css_proto_converter::MediaConditionWithoutOr* media_condition_without_or_;
  int not_or_only_;
  friend struct ::protobuf_css_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MediaConditionWithoutOr : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:css_proto_converter.MediaConditionWithoutOr) */ {
 public:
  MediaConditionWithoutOr();
  virtual ~MediaConditionWithoutOr();

  MediaConditionWithoutOr(const MediaConditionWithoutOr& from);

  inline MediaConditionWithoutOr& operator=(const MediaConditionWithoutOr& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MediaConditionWithoutOr(MediaConditionWithoutOr&& from) noexcept
    : MediaConditionWithoutOr() {
    *this = ::std::move(from);
  }

  inline MediaConditionWithoutOr& operator=(MediaConditionWithoutOr&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MediaConditionWithoutOr& default_instance();

  enum RhsCase {
    kMediaAnd = 2,
    kMediaInParens = 3,
    RHS_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MediaConditionWithoutOr* internal_default_instance() {
    return reinterpret_cast<const MediaConditionWithoutOr*>(
               &_MediaConditionWithoutOr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(MediaConditionWithoutOr* other);
  friend void swap(MediaConditionWithoutOr& a, MediaConditionWithoutOr& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MediaConditionWithoutOr* New() const final {
    return CreateMaybeMessage<MediaConditionWithoutOr>(NULL);
  }

  MediaConditionWithoutOr* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MediaConditionWithoutOr>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MediaConditionWithoutOr& from);
  void MergeFrom(const MediaConditionWithoutOr& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MediaConditionWithoutOr* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .css_proto_converter.MediaNot media_not = 1;
  bool has_media_not() const;
  void clear_media_not();
  static const int kMediaNotFieldNumber = 1;
  private:
  const ::css_proto_converter::MediaNot& _internal_media_not() const;
  public:
  const ::css_proto_converter::MediaNot& media_not() const;
  ::css_proto_converter::MediaNot* release_media_not();
  ::css_proto_converter::MediaNot* mutable_media_not();
  void set_allocated_media_not(::css_proto_converter::MediaNot* media_not);

  // optional .css_proto_converter.MediaAnd media_and = 2;
  bool has_media_and() const;
  void clear_media_and();
  static const int kMediaAndFieldNumber = 2;
  private:
  const ::css_proto_converter::MediaAnd& _internal_media_and() const;
  public:
  const ::css_proto_converter::MediaAnd& media_and() const;
  ::css_proto_converter::MediaAnd* release_media_and();
  ::css_proto_converter::MediaAnd* mutable_media_and();
  void set_allocated_media_and(::css_proto_converter::MediaAnd* media_and);

  // optional .css_proto_converter.MediaInParens media_in_parens = 3;
  bool has_media_in_parens() const;
  void clear_media_in_parens();
  static const int kMediaInParensFieldNumber = 3;
  private:
  const ::css_proto_converter::MediaInParens& _internal_media_in_parens() const;
  public:
  const ::css_proto_converter::MediaInParens& media_in_parens() const;
  ::css_proto_converter::MediaInParens* release_media_in_parens();
  ::css_proto_converter::MediaInParens* mutable_media_in_parens();
  void set_allocated_media_in_parens(::css_proto_converter::MediaInParens* media_in_parens);

  void clear_rhs();
  RhsCase rhs_case() const;
  // @@protoc_insertion_point(class_scope:css_proto_converter.MediaConditionWithoutOr)
 private:
  void set_has_media_not();
  void clear_has_media_not();
  void set_has_media_and();
  void set_has_media_in_parens();

  inline bool has_rhs() const;
  inline void clear_has_rhs();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::css_proto_converter::MediaNot* media_not_;
  union RhsUnion {
    RhsUnion() {}
    ::css_proto_converter::MediaAnd* media_and_;
    ::css_proto_converter::MediaInParens* media_in_parens_;
  } rhs_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_css_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MediaCondition : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:css_proto_converter.MediaCondition) */ {
 public:
  MediaCondition();
  virtual ~MediaCondition();

  MediaCondition(const MediaCondition& from);

  inline MediaCondition& operator=(const MediaCondition& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MediaCondition(MediaCondition&& from) noexcept
    : MediaCondition() {
    *this = ::std::move(from);
  }

  inline MediaCondition& operator=(MediaCondition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MediaCondition& default_instance();

  enum RhsCase {
    kMediaNot = 2,
    kMediaOr = 3,
    kMediaInParens = 4,
    RHS_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MediaCondition* internal_default_instance() {
    return reinterpret_cast<const MediaCondition*>(
               &_MediaCondition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(MediaCondition* other);
  friend void swap(MediaCondition& a, MediaCondition& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MediaCondition* New() const final {
    return CreateMaybeMessage<MediaCondition>(NULL);
  }

  MediaCondition* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MediaCondition>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MediaCondition& from);
  void MergeFrom(const MediaCondition& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MediaCondition* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .css_proto_converter.MediaAnd media_and = 1;
  bool has_media_and() const;
  void clear_media_and();
  static const int kMediaAndFieldNumber = 1;
  private:
  const ::css_proto_converter::MediaAnd& _internal_media_and() const;
  public:
  const ::css_proto_converter::MediaAnd& media_and() const;
  ::css_proto_converter::MediaAnd* release_media_and();
  ::css_proto_converter::MediaAnd* mutable_media_and();
  void set_allocated_media_and(::css_proto_converter::MediaAnd* media_and);

  // optional .css_proto_converter.MediaNot media_not = 2;
  bool has_media_not() const;
  void clear_media_not();
  static const int kMediaNotFieldNumber = 2;
  private:
  const ::css_proto_converter::MediaNot& _internal_media_not() const;
  public:
  const ::css_proto_converter::MediaNot& media_not() const;
  ::css_proto_converter::MediaNot* release_media_not();
  ::css_proto_converter::MediaNot* mutable_media_not();
  void set_allocated_media_not(::css_proto_converter::MediaNot* media_not);

  // optional .css_proto_converter.MediaOr media_or = 3;
  bool has_media_or() const;
  void clear_media_or();
  static const int kMediaOrFieldNumber = 3;
  private:
  const ::css_proto_converter::MediaOr& _internal_media_or() const;
  public:
  const ::css_proto_converter::MediaOr& media_or() const;
  ::css_proto_converter::MediaOr* release_media_or();
  ::css_proto_converter::MediaOr* mutable_media_or();
  void set_allocated_media_or(::css_proto_converter::MediaOr* media_or);

  // optional .css_proto_converter.MediaInParens media_in_parens = 4;
  bool has_media_in_parens() const;
  void clear_media_in_parens();
  static const int kMediaInParensFieldNumber = 4;
  private:
  const ::css_proto_converter::MediaInParens& _internal_media_in_parens() const;
  public:
  const ::css_proto_converter::MediaInParens& media_in_parens() const;
  ::css_proto_converter::MediaInParens* release_media_in_parens();
  ::css_proto_converter::MediaInParens* mutable_media_in_parens();
  void set_allocated_media_in_parens(::css_proto_converter::MediaInParens* media_in_parens);

  void clear_rhs();
  RhsCase rhs_case() const;
  // @@protoc_insertion_point(class_scope:css_proto_converter.MediaCondition)
 private:
  void set_has_media_and();
  void clear_has_media_and();
  void set_has_media_not();
  void set_has_media_or();
  void set_has_media_in_parens();

  inline bool has_rhs() const;
  inline void clear_has_rhs();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::css_proto_converter::MediaAnd* media_and_;
  union RhsUnion {
    RhsUnion() {}
    ::css_proto_converter::MediaNot* media_not_;
    ::css_proto_converter::MediaOr* media_or_;
    ::css_proto_converter::MediaInParens* media_in_parens_;
  } rhs_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_css_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MediaType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:css_proto_converter.MediaType) */ {
 public:
  MediaType();
  virtual ~MediaType();

  MediaType(const MediaType& from);

  inline MediaType& operator=(const MediaType& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MediaType(MediaType&& from) noexcept
    : MediaType() {
    *this = ::std::move(from);
  }

  inline MediaType& operator=(MediaType&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MediaType& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MediaType* internal_default_instance() {
    return reinterpret_cast<const MediaType*>(
               &_MediaType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(MediaType* other);
  friend void swap(MediaType& a, MediaType& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MediaType* New() const final {
    return CreateMaybeMessage<MediaType>(NULL);
  }

  MediaType* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MediaType>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MediaType& from);
  void MergeFrom(const MediaType& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MediaType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef MediaType_ValueId ValueId;
  static const ValueId ALL =
    MediaType_ValueId_ALL;
  static const ValueId BRAILLE =
    MediaType_ValueId_BRAILLE;
  static const ValueId EMBOSSED =
    MediaType_ValueId_EMBOSSED;
  static const ValueId HANDHELD =
    MediaType_ValueId_HANDHELD;
  static const ValueId PRINT =
    MediaType_ValueId_PRINT;
  static const ValueId PROJECTION =
    MediaType_ValueId_PROJECTION;
  static const ValueId SCREEN =
    MediaType_ValueId_SCREEN;
  static const ValueId SPEECH =
    MediaType_ValueId_SPEECH;
  static const ValueId TTY =
    MediaType_ValueId_TTY;
  static const ValueId TV =
    MediaType_ValueId_TV;
  static const ValueId INVALID_MEDIA_TYPE =
    MediaType_ValueId_INVALID_MEDIA_TYPE;
  static inline bool ValueId_IsValid(int value) {
    return MediaType_ValueId_IsValid(value);
  }
  static const ValueId ValueId_MIN =
    MediaType_ValueId_ValueId_MIN;
  static const ValueId ValueId_MAX =
    MediaType_ValueId_ValueId_MAX;
  static const int ValueId_ARRAYSIZE =
    MediaType_ValueId_ValueId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ValueId_descriptor() {
    return MediaType_ValueId_descriptor();
  }
  static inline const ::std::string& ValueId_Name(ValueId value) {
    return MediaType_ValueId_Name(value);
  }
  static inline bool ValueId_Parse(const ::std::string& name,
      ValueId* value) {
    return MediaType_ValueId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .css_proto_converter.MediaType.ValueId value_id = 1;
  bool has_value_id() const;
  void clear_value_id();
  static const int kValueIdFieldNumber = 1;
  ::css_proto_converter::MediaType_ValueId value_id() const;
  void set_value_id(::css_proto_converter::MediaType_ValueId value);

  // @@protoc_insertion_point(class_scope:css_proto_converter.MediaType)
 private:
  void set_has_value_id();
  void clear_has_value_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  int value_id_;
  friend struct ::protobuf_css_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MediaNot : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:css_proto_converter.MediaNot) */ {
 public:
  MediaNot();
  virtual ~MediaNot();

  MediaNot(const MediaNot& from);

  inline MediaNot& operator=(const MediaNot& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MediaNot(MediaNot&& from) noexcept
    : MediaNot() {
    *this = ::std::move(from);
  }

  inline MediaNot& operator=(MediaNot&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MediaNot& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MediaNot* internal_default_instance() {
    return reinterpret_cast<const MediaNot*>(
               &_MediaNot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(MediaNot* other);
  friend void swap(MediaNot& a, MediaNot& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MediaNot* New() const final {
    return CreateMaybeMessage<MediaNot>(NULL);
  }

  MediaNot* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MediaNot>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MediaNot& from);
  void MergeFrom(const MediaNot& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MediaNot* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .css_proto_converter.MediaInParens media_in_parens = 1;
  bool has_media_in_parens() const;
  void clear_media_in_parens();
  static const int kMediaInParensFieldNumber = 1;
  private:
  const ::css_proto_converter::MediaInParens& _internal_media_in_parens() const;
  public:
  const ::css_proto_converter::MediaInParens& media_in_parens() const;
  ::css_proto_converter::MediaInParens* release_media_in_parens();
  ::css_proto_converter::MediaInParens* mutable_media_in_parens();
  void set_allocated_media_in_parens(::css_proto_converter::MediaInParens* media_in_parens);

  // @@protoc_insertion_point(class_scope:css_proto_converter.MediaNot)
 private:
  void set_has_media_in_parens();
  void clear_has_media_in_parens();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::css_proto_converter::MediaInParens* media_in_parens_;
  friend struct ::protobuf_css_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MediaAnd : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:css_proto_converter.MediaAnd) */ {
 public:
  MediaAnd();
  virtual ~MediaAnd();

  MediaAnd(const MediaAnd& from);

  inline MediaAnd& operator=(const MediaAnd& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MediaAnd(MediaAnd&& from) noexcept
    : MediaAnd() {
    *this = ::std::move(from);
  }

  inline MediaAnd& operator=(MediaAnd&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MediaAnd& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MediaAnd* internal_default_instance() {
    return reinterpret_cast<const MediaAnd*>(
               &_MediaAnd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(MediaAnd* other);
  friend void swap(MediaAnd& a, MediaAnd& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MediaAnd* New() const final {
    return CreateMaybeMessage<MediaAnd>(NULL);
  }

  MediaAnd* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MediaAnd>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MediaAnd& from);
  void MergeFrom(const MediaAnd& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MediaAnd* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .css_proto_converter.MediaInParens media_in_parens_list = 3;
  int media_in_parens_list_size() const;
  void clear_media_in_parens_list();
  static const int kMediaInParensListFieldNumber = 3;
  ::css_proto_converter::MediaInParens* mutable_media_in_parens_list(int index);
  ::google::protobuf::RepeatedPtrField< ::css_proto_converter::MediaInParens >*
      mutable_media_in_parens_list();
  const ::css_proto_converter::MediaInParens& media_in_parens_list(int index) const;
  ::css_proto_converter::MediaInParens* add_media_in_parens_list();
  const ::google::protobuf::RepeatedPtrField< ::css_proto_converter::MediaInParens >&
      media_in_parens_list() const;

  // required .css_proto_converter.MediaInParens first_media_in_parens = 1;
  bool has_first_media_in_parens() const;
  void clear_first_media_in_parens();
  static const int kFirstMediaInParensFieldNumber = 1;
  private:
  const ::css_proto_converter::MediaInParens& _internal_first_media_in_parens() const;
  public:
  const ::css_proto_converter::MediaInParens& first_media_in_parens() const;
  ::css_proto_converter::MediaInParens* release_first_media_in_parens();
  ::css_proto_converter::MediaInParens* mutable_first_media_in_parens();
  void set_allocated_first_media_in_parens(::css_proto_converter::MediaInParens* first_media_in_parens);

  // required .css_proto_converter.MediaInParens second_media_in_parens = 2;
  bool has_second_media_in_parens() const;
  void clear_second_media_in_parens();
  static const int kSecondMediaInParensFieldNumber = 2;
  private:
  const ::css_proto_converter::MediaInParens& _internal_second_media_in_parens() const;
  public:
  const ::css_proto_converter::MediaInParens& second_media_in_parens() const;
  ::css_proto_converter::MediaInParens* release_second_media_in_parens();
  ::css_proto_converter::MediaInParens* mutable_second_media_in_parens();
  void set_allocated_second_media_in_parens(::css_proto_converter::MediaInParens* second_media_in_parens);

  // @@protoc_insertion_point(class_scope:css_proto_converter.MediaAnd)
 private:
  void set_has_first_media_in_parens();
  void clear_has_first_media_in_parens();
  void set_has_second_media_in_parens();
  void clear_has_second_media_in_parens();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::css_proto_converter::MediaInParens > media_in_parens_list_;
  ::css_proto_converter::MediaInParens* first_media_in_parens_;
  ::css_proto_converter::MediaInParens* second_media_in_parens_;
  friend struct ::protobuf_css_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MediaOr : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:css_proto_converter.MediaOr) */ {
 public:
  MediaOr();
  virtual ~MediaOr();

  MediaOr(const MediaOr& from);

  inline MediaOr& operator=(const MediaOr& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MediaOr(MediaOr&& from) noexcept
    : MediaOr() {
    *this = ::std::move(from);
  }

  inline MediaOr& operator=(MediaOr&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MediaOr& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MediaOr* internal_default_instance() {
    return reinterpret_cast<const MediaOr*>(
               &_MediaOr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(MediaOr* other);
  friend void swap(MediaOr& a, MediaOr& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MediaOr* New() const final {
    return CreateMaybeMessage<MediaOr>(NULL);
  }

  MediaOr* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MediaOr>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MediaOr& from);
  void MergeFrom(const MediaOr& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MediaOr* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .css_proto_converter.MediaInParens media_in_parens_list = 3;
  int media_in_parens_list_size() const;
  void clear_media_in_parens_list();
  static const int kMediaInParensListFieldNumber = 3;
  ::css_proto_converter::MediaInParens* mutable_media_in_parens_list(int index);
  ::google::protobuf::RepeatedPtrField< ::css_proto_converter::MediaInParens >*
      mutable_media_in_parens_list();
  const ::css_proto_converter::MediaInParens& media_in_parens_list(int index) const;
  ::css_proto_converter::MediaInParens* add_media_in_parens_list();
  const ::google::protobuf::RepeatedPtrField< ::css_proto_converter::MediaInParens >&
      media_in_parens_list() const;

  // required .css_proto_converter.MediaInParens first_media_in_parens = 1;
  bool has_first_media_in_parens() const;
  void clear_first_media_in_parens();
  static const int kFirstMediaInParensFieldNumber = 1;
  private:
  const ::css_proto_converter::MediaInParens& _internal_first_media_in_parens() const;
  public:
  const ::css_proto_converter::MediaInParens& first_media_in_parens() const;
  ::css_proto_converter::MediaInParens* release_first_media_in_parens();
  ::css_proto_converter::MediaInParens* mutable_first_media_in_parens();
  void set_allocated_first_media_in_parens(::css_proto_converter::MediaInParens* first_media_in_parens);

  // required .css_proto_converter.MediaInParens second_media_in_parens = 2;
  bool has_second_media_in_parens() const;
  void clear_second_media_in_parens();
  static const int kSecondMediaInParensFieldNumber = 2;
  private:
  const ::css_proto_converter::MediaInParens& _internal_second_media_in_parens() const;
  public:
  const ::css_proto_converter::MediaInParens& second_media_in_parens() const;
  ::css_proto_converter::MediaInParens* release_second_media_in_parens();
  ::css_proto_converter::MediaInParens* mutable_second_media_in_parens();
  void set_allocated_second_media_in_parens(::css_proto_converter::MediaInParens* second_media_in_parens);

  // @@protoc_insertion_point(class_scope:css_proto_converter.MediaOr)
 private:
  void set_has_first_media_in_parens();
  void clear_has_first_media_in_parens();
  void set_has_second_media_in_parens();
  void clear_has_second_media_in_parens();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::css_proto_converter::MediaInParens > media_in_parens_list_;
  ::css_proto_converter::MediaInParens* first_media_in_parens_;
  ::css_proto_converter::MediaInParens* second_media_in_parens_;
  friend struct ::protobuf_css_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MediaInParens : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:css_proto_converter.MediaInParens) */ {
 public:
  MediaInParens();
  virtual ~MediaInParens();

  MediaInParens(const MediaInParens& from);

  inline MediaInParens& operator=(const MediaInParens& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MediaInParens(MediaInParens&& from) noexcept
    : MediaInParens() {
    *this = ::std::move(from);
  }

  inline MediaInParens& operator=(MediaInParens&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MediaInParens& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MediaInParens* internal_default_instance() {
    return reinterpret_cast<const MediaInParens*>(
               &_MediaInParens_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(MediaInParens* other);
  friend void swap(MediaInParens& a, MediaInParens& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MediaInParens* New() const final {
    return CreateMaybeMessage<MediaInParens>(NULL);
  }

  MediaInParens* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MediaInParens>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MediaInParens& from);
  void MergeFrom(const MediaInParens& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MediaInParens* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .css_proto_converter.MediaFeature media_feature = 1;
  bool has_media_feature() const;
  void clear_media_feature();
  static const int kMediaFeatureFieldNumber = 1;
  private:
  const ::css_proto_converter::MediaFeature& _internal_media_feature() const;
  public:
  const ::css_proto_converter::MediaFeature& media_feature() const;
  ::css_proto_converter::MediaFeature* release_media_feature();
  ::css_proto_converter::MediaFeature* mutable_media_feature();
  void set_allocated_media_feature(::css_proto_converter::MediaFeature* media_feature);

  // optional .css_proto_converter.MediaCondition media_condition = 2;
  bool has_media_condition() const;
  void clear_media_condition();
  static const int kMediaConditionFieldNumber = 2;
  private:
  const ::css_proto_converter::MediaCondition& _internal_media_condition() const;
  public:
  const ::css_proto_converter::MediaCondition& media_condition() const;
  ::css_proto_converter::MediaCondition* release_media_condition();
  ::css_proto_converter::MediaCondition* mutable_media_condition();
  void set_allocated_media_condition(::css_proto_converter::MediaCondition* media_condition);

  // @@protoc_insertion_point(class_scope:css_proto_converter.MediaInParens)
 private:
  void set_has_media_feature();
  void clear_has_media_feature();
  void set_has_media_condition();
  void clear_has_media_condition();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::css_proto_converter::MediaFeature* media_feature_;
  ::css_proto_converter::MediaCondition* media_condition_;
  friend struct ::protobuf_css_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MediaFeature : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:css_proto_converter.MediaFeature) */ {
 public:
  MediaFeature();
  virtual ~MediaFeature();

  MediaFeature(const MediaFeature& from);

  inline MediaFeature& operator=(const MediaFeature& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MediaFeature(MediaFeature&& from) noexcept
    : MediaFeature() {
    *this = ::std::move(from);
  }

  inline MediaFeature& operator=(MediaFeature&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MediaFeature& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MediaFeature* internal_default_instance() {
    return reinterpret_cast<const MediaFeature*>(
               &_MediaFeature_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(MediaFeature* other);
  friend void swap(MediaFeature& a, MediaFeature& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MediaFeature* New() const final {
    return CreateMaybeMessage<MediaFeature>(NULL);
  }

  MediaFeature* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MediaFeature>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MediaFeature& from);
  void MergeFrom(const MediaFeature& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MediaFeature* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .css_proto_converter.MfPlain mf_plain = 1;
  bool has_mf_plain() const;
  void clear_mf_plain();
  static const int kMfPlainFieldNumber = 1;
  private:
  const ::css_proto_converter::MfPlain& _internal_mf_plain() const;
  public:
  const ::css_proto_converter::MfPlain& mf_plain() const;
  ::css_proto_converter::MfPlain* release_mf_plain();
  ::css_proto_converter::MfPlain* mutable_mf_plain();
  void set_allocated_mf_plain(::css_proto_converter::MfPlain* mf_plain);

  // optional .css_proto_converter.MfBool mf_bool = 2;
  bool has_mf_bool() const;
  void clear_mf_bool();
  static const int kMfBoolFieldNumber = 2;
  private:
  const ::css_proto_converter::MfBool& _internal_mf_bool() const;
  public:
  const ::css_proto_converter::MfBool& mf_bool() const;
  ::css_proto_converter::MfBool* release_mf_bool();
  ::css_proto_converter::MfBool* mutable_mf_bool();
  void set_allocated_mf_bool(::css_proto_converter::MfBool* mf_bool);

  // @@protoc_insertion_point(class_scope:css_proto_converter.MediaFeature)
 private:
  void set_has_mf_plain();
  void clear_has_mf_plain();
  void set_has_mf_bool();
  void clear_has_mf_bool();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::css_proto_converter::MfPlain* mf_plain_;
  ::css_proto_converter::MfBool* mf_bool_;
  friend struct ::protobuf_css_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MfPlain : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:css_proto_converter.MfPlain) */ {
 public:
  MfPlain();
  virtual ~MfPlain();

  MfPlain(const MfPlain& from);

  inline MfPlain& operator=(const MfPlain& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MfPlain(MfPlain&& from) noexcept
    : MfPlain() {
    *this = ::std::move(from);
  }

  inline MfPlain& operator=(MfPlain&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MfPlain& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MfPlain* internal_default_instance() {
    return reinterpret_cast<const MfPlain*>(
               &_MfPlain_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(MfPlain* other);
  friend void swap(MfPlain& a, MfPlain& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MfPlain* New() const final {
    return CreateMaybeMessage<MfPlain>(NULL);
  }

  MfPlain* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MfPlain>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MfPlain& from);
  void MergeFrom(const MfPlain& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MfPlain* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .css_proto_converter.MfName property = 1;
  bool has_property() const;
  void clear_property();
  static const int kPropertyFieldNumber = 1;
  private:
  const ::css_proto_converter::MfName& _internal_property() const;
  public:
  const ::css_proto_converter::MfName& property() const;
  ::css_proto_converter::MfName* release_property();
  ::css_proto_converter::MfName* mutable_property();
  void set_allocated_property(::css_proto_converter::MfName* property);

  // required .css_proto_converter.MfValue value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  private:
  const ::css_proto_converter::MfValue& _internal_value() const;
  public:
  const ::css_proto_converter::MfValue& value() const;
  ::css_proto_converter::MfValue* release_value();
  ::css_proto_converter::MfValue* mutable_value();
  void set_allocated_value(::css_proto_converter::MfValue* value);

  // @@protoc_insertion_point(class_scope:css_proto_converter.MfPlain)
 private:
  void set_has_property();
  void clear_has_property();
  void set_has_value();
  void clear_has_value();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::css_proto_converter::MfName* property_;
  ::css_proto_converter::MfValue* value_;
  friend struct ::protobuf_css_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MfBool : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:css_proto_converter.MfBool) */ {
 public:
  MfBool();
  virtual ~MfBool();

  MfBool(const MfBool& from);

  inline MfBool& operator=(const MfBool& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MfBool(MfBool&& from) noexcept
    : MfBool() {
    *this = ::std::move(from);
  }

  inline MfBool& operator=(MfBool&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MfBool& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MfBool* internal_default_instance() {
    return reinterpret_cast<const MfBool*>(
               &_MfBool_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(MfBool* other);
  friend void swap(MfBool& a, MfBool& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MfBool* New() const final {
    return CreateMaybeMessage<MfBool>(NULL);
  }

  MfBool* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MfBool>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MfBool& from);
  void MergeFrom(const MfBool& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MfBool* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .css_proto_converter.MfName mf_name = 1;
  bool has_mf_name() const;
  void clear_mf_name();
  static const int kMfNameFieldNumber = 1;
  private:
  const ::css_proto_converter::MfName& _internal_mf_name() const;
  public:
  const ::css_proto_converter::MfName& mf_name() const;
  ::css_proto_converter::MfName* release_mf_name();
  ::css_proto_converter::MfName* mutable_mf_name();
  void set_allocated_mf_name(::css_proto_converter::MfName* mf_name);

  // @@protoc_insertion_point(class_scope:css_proto_converter.MfBool)
 private:
  void set_has_mf_name();
  void clear_has_mf_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::css_proto_converter::MfName* mf_name_;
  friend struct ::protobuf_css_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MfName : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:css_proto_converter.MfName) */ {
 public:
  MfName();
  virtual ~MfName();

  MfName(const MfName& from);

  inline MfName& operator=(const MfName& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MfName(MfName&& from) noexcept
    : MfName() {
    *this = ::std::move(from);
  }

  inline MfName& operator=(MfName&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MfName& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MfName* internal_default_instance() {
    return reinterpret_cast<const MfName*>(
               &_MfName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(MfName* other);
  friend void swap(MfName& a, MfName& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MfName* New() const final {
    return CreateMaybeMessage<MfName>(NULL);
  }

  MfName* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MfName>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MfName& from);
  void MergeFrom(const MfName& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MfName* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef MfName_ValueId ValueId;
  static const ValueId ANY_HOVER =
    MfName_ValueId_ANY_HOVER;
  static const ValueId ANY_POINTER =
    MfName_ValueId_ANY_POINTER;
  static const ValueId COLOR =
    MfName_ValueId_COLOR;
  static const ValueId COLOR_INDEX =
    MfName_ValueId_COLOR_INDEX;
  static const ValueId COLOR_GAMUT =
    MfName_ValueId_COLOR_GAMUT;
  static const ValueId GRID =
    MfName_ValueId_GRID;
  static const ValueId MONOCHROME =
    MfName_ValueId_MONOCHROME;
  static const ValueId HEIGHT =
    MfName_ValueId_HEIGHT;
  static const ValueId HOVER =
    MfName_ValueId_HOVER;
  static const ValueId WIDTH =
    MfName_ValueId_WIDTH;
  static const ValueId ORIENTATION =
    MfName_ValueId_ORIENTATION;
  static const ValueId ASPECT_RATIO =
    MfName_ValueId_ASPECT_RATIO;
  static const ValueId DEVICE_ASPECT_RATIO =
    MfName_ValueId_DEVICE_ASPECT_RATIO;
  static const ValueId _WEBKIT_DEVICE_PIXEL_RATIO =
    MfName_ValueId__WEBKIT_DEVICE_PIXEL_RATIO;
  static const ValueId DEVICE_HEIGHT =
    MfName_ValueId_DEVICE_HEIGHT;
  static const ValueId DEVICE_WIDTH =
    MfName_ValueId_DEVICE_WIDTH;
  static const ValueId DISPLAY_MODE =
    MfName_ValueId_DISPLAY_MODE;
  static const ValueId MAX_COLOR =
    MfName_ValueId_MAX_COLOR;
  static const ValueId MAX_COLOR_INDEX =
    MfName_ValueId_MAX_COLOR_INDEX;
  static const ValueId MAX_ASPECT_RATIO =
    MfName_ValueId_MAX_ASPECT_RATIO;
  static const ValueId MAX_DEVICE_ASPECT_RATIO =
    MfName_ValueId_MAX_DEVICE_ASPECT_RATIO;
  static const ValueId _WEBKIT_MAX_DEVICE_PIXEL_RATIO =
    MfName_ValueId__WEBKIT_MAX_DEVICE_PIXEL_RATIO;
  static const ValueId MAX_DEVICE_HEIGHT =
    MfName_ValueId_MAX_DEVICE_HEIGHT;
  static const ValueId MAX_DEVICE_WIDTH =
    MfName_ValueId_MAX_DEVICE_WIDTH;
  static const ValueId MAX_HEIGHT =
    MfName_ValueId_MAX_HEIGHT;
  static const ValueId MAX_MONOCHROME =
    MfName_ValueId_MAX_MONOCHROME;
  static const ValueId MAX_WIDTH =
    MfName_ValueId_MAX_WIDTH;
  static const ValueId MAX_RESOLUTION =
    MfName_ValueId_MAX_RESOLUTION;
  static const ValueId MIN_COLOR =
    MfName_ValueId_MIN_COLOR;
  static const ValueId MIN_COLOR_INDEX =
    MfName_ValueId_MIN_COLOR_INDEX;
  static const ValueId MIN_ASPECT_RATIO =
    MfName_ValueId_MIN_ASPECT_RATIO;
  static const ValueId MIN_DEVICE_ASPECT_RATIO =
    MfName_ValueId_MIN_DEVICE_ASPECT_RATIO;
  static const ValueId _WEBKIT_MIN_DEVICE_PIXEL_RATIO =
    MfName_ValueId__WEBKIT_MIN_DEVICE_PIXEL_RATIO;
  static const ValueId MIN_DEVICE_HEIGHT =
    MfName_ValueId_MIN_DEVICE_HEIGHT;
  static const ValueId MIN_DEVICE_WIDTH =
    MfName_ValueId_MIN_DEVICE_WIDTH;
  static const ValueId MIN_HEIGHT =
    MfName_ValueId_MIN_HEIGHT;
  static const ValueId MIN_MONOCHROME =
    MfName_ValueId_MIN_MONOCHROME;
  static const ValueId MIN_WIDTH =
    MfName_ValueId_MIN_WIDTH;
  static const ValueId MIN_RESOLUTION =
    MfName_ValueId_MIN_RESOLUTION;
  static const ValueId POINTER =
    MfName_ValueId_POINTER;
  static const ValueId RESOLUTION =
    MfName_ValueId_RESOLUTION;
  static const ValueId _WEBKIT_TRANSFORM_3D =
    MfName_ValueId__WEBKIT_TRANSFORM_3D;
  static const ValueId SCAN =
    MfName_ValueId_SCAN;
  static const ValueId SHAPE =
    MfName_ValueId_SHAPE;
  static const ValueId IMMERSIVE =
    MfName_ValueId_IMMERSIVE;
  static const ValueId INVALID_NAME =
    MfName_ValueId_INVALID_NAME;
  static inline bool ValueId_IsValid(int value) {
    return MfName_ValueId_IsValid(value);
  }
  static const ValueId ValueId_MIN =
    MfName_ValueId_ValueId_MIN;
  static const ValueId ValueId_MAX =
    MfName_ValueId_ValueId_MAX;
  static const int ValueId_ARRAYSIZE =
    MfName_ValueId_ValueId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ValueId_descriptor() {
    return MfName_ValueId_descriptor();
  }
  static inline const ::std::string& ValueId_Name(ValueId value) {
    return MfName_ValueId_Name(value);
  }
  static inline bool ValueId_Parse(const ::std::string& name,
      ValueId* value) {
    return MfName_ValueId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .css_proto_converter.MfName.ValueId id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::css_proto_converter::MfName_ValueId id() const;
  void set_id(::css_proto_converter::MfName_ValueId value);

  // @@protoc_insertion_point(class_scope:css_proto_converter.MfName)
 private:
  void set_has_id();
  void clear_has_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  int id_;
  friend struct ::protobuf_css_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MfValue : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:css_proto_converter.MfValue) */ {
 public:
  MfValue();
  virtual ~MfValue();

  MfValue(const MfValue& from);

  inline MfValue& operator=(const MfValue& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MfValue(MfValue&& from) noexcept
    : MfValue() {
    *this = ::std::move(from);
  }

  inline MfValue& operator=(MfValue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MfValue& default_instance();

  enum RhsCase {
    kLength = 2,
    kIdent = 3,
    RHS_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MfValue* internal_default_instance() {
    return reinterpret_cast<const MfValue*>(
               &_MfValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(MfValue* other);
  friend void swap(MfValue& a, MfValue& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MfValue* New() const final {
    return CreateMaybeMessage<MfValue>(NULL);
  }

  MfValue* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MfValue>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MfValue& from);
  void MergeFrom(const MfValue& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MfValue* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .css_proto_converter.Num num = 1;
  bool has_num() const;
  void clear_num();
  static const int kNumFieldNumber = 1;
  private:
  const ::css_proto_converter::Num& _internal_num() const;
  public:
  const ::css_proto_converter::Num& num() const;
  ::css_proto_converter::Num* release_num();
  ::css_proto_converter::Num* mutable_num();
  void set_allocated_num(::css_proto_converter::Num* num);

  // optional .css_proto_converter.Length length = 2;
  bool has_length() const;
  void clear_length();
  static const int kLengthFieldNumber = 2;
  private:
  const ::css_proto_converter::Length& _internal_length() const;
  public:
  const ::css_proto_converter::Length& length() const;
  ::css_proto_converter::Length* release_length();
  ::css_proto_converter::Length* mutable_length();
  void set_allocated_length(::css_proto_converter::Length* length);

  // optional .css_proto_converter.Ident ident = 3;
  bool has_ident() const;
  void clear_ident();
  static const int kIdentFieldNumber = 3;
  private:
  const ::css_proto_converter::Ident& _internal_ident() const;
  public:
  const ::css_proto_converter::Ident& ident() const;
  ::css_proto_converter::Ident* release_ident();
  ::css_proto_converter::Ident* mutable_ident();
  void set_allocated_ident(::css_proto_converter::Ident* ident);

  void clear_rhs();
  RhsCase rhs_case() const;
  // @@protoc_insertion_point(class_scope:css_proto_converter.MfValue)
 private:
  void set_has_num();
  void clear_has_num();
  void set_has_length();
  void set_has_ident();

  inline bool has_rhs() const;
  inline void clear_has_rhs();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::css_proto_converter::Num* num_;
  union RhsUnion {
    RhsUnion() {}
    ::css_proto_converter::Length* length_;
    ::css_proto_converter::Ident* ident_;
  } rhs_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_css_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Namespace : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:css_proto_converter.Namespace) */ {
 public:
  Namespace();
  virtual ~Namespace();

  Namespace(const Namespace& from);

  inline Namespace& operator=(const Namespace& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Namespace(Namespace&& from) noexcept
    : Namespace() {
    *this = ::std::move(from);
  }

  inline Namespace& operator=(Namespace&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Namespace& default_instance();

  enum RhsCase {
    kString = 2,
    kUri = 3,
    RHS_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Namespace* internal_default_instance() {
    return reinterpret_cast<const Namespace*>(
               &_Namespace_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(Namespace* other);
  friend void swap(Namespace& a, Namespace& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Namespace* New() const final {
    return CreateMaybeMessage<Namespace>(NULL);
  }

  Namespace* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Namespace>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Namespace& from);
  void MergeFrom(const Namespace& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Namespace* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .css_proto_converter.NamespacePrefix namespace_prefix = 1;
  bool has_namespace_prefix() const;
  void clear_namespace_prefix();
  static const int kNamespacePrefixFieldNumber = 1;
  private:
  const ::css_proto_converter::NamespacePrefix& _internal_namespace_prefix() const;
  public:
  const ::css_proto_converter::NamespacePrefix& namespace_prefix() const;
  ::css_proto_converter::NamespacePrefix* release_namespace_prefix();
  ::css_proto_converter::NamespacePrefix* mutable_namespace_prefix();
  void set_allocated_namespace_prefix(::css_proto_converter::NamespacePrefix* namespace_prefix);

  // optional .css_proto_converter.String string = 2;
  bool has_string() const;
  void clear_string();
  static const int kStringFieldNumber = 2;
  private:
  const ::css_proto_converter::String& _internal_string() const;
  public:
  const ::css_proto_converter::String& string() const;
  ::css_proto_converter::String* release_string();
  ::css_proto_converter::String* mutable_string();
  void set_allocated_string(::css_proto_converter::String* string);

  // optional .css_proto_converter.Uri uri = 3;
  bool has_uri() const;
  void clear_uri();
  static const int kUriFieldNumber = 3;
  private:
  const ::css_proto_converter::Uri& _internal_uri() const;
  public:
  const ::css_proto_converter::Uri& uri() const;
  ::css_proto_converter::Uri* release_uri();
  ::css_proto_converter::Uri* mutable_uri();
  void set_allocated_uri(::css_proto_converter::Uri* uri);

  void clear_rhs();
  RhsCase rhs_case() const;
  // @@protoc_insertion_point(class_scope:css_proto_converter.Namespace)
 private:
  void set_has_namespace_prefix();
  void clear_has_namespace_prefix();
  void set_has_string();
  void set_has_uri();

  inline bool has_rhs() const;
  inline void clear_has_rhs();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::css_proto_converter::NamespacePrefix* namespace_prefix_;
  union RhsUnion {
    RhsUnion() {}
    ::css_proto_converter::String* string_;
    ::css_proto_converter::Uri* uri_;
  } rhs_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_css_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NamespacePrefix : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:css_proto_converter.NamespacePrefix) */ {
 public:
  NamespacePrefix();
  virtual ~NamespacePrefix();

  NamespacePrefix(const NamespacePrefix& from);

  inline NamespacePrefix& operator=(const NamespacePrefix& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NamespacePrefix(NamespacePrefix&& from) noexcept
    : NamespacePrefix() {
    *this = ::std::move(from);
  }

  inline NamespacePrefix& operator=(NamespacePrefix&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NamespacePrefix& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NamespacePrefix* internal_default_instance() {
    return reinterpret_cast<const NamespacePrefix*>(
               &_NamespacePrefix_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(NamespacePrefix* other);
  friend void swap(NamespacePrefix& a, NamespacePrefix& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NamespacePrefix* New() const final {
    return CreateMaybeMessage<NamespacePrefix>(NULL);
  }

  NamespacePrefix* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NamespacePrefix>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NamespacePrefix& from);
  void MergeFrom(const NamespacePrefix& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NamespacePrefix* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .css_proto_converter.Ident ident = 1;
  bool has_ident() const;
  void clear_ident();
  static const int kIdentFieldNumber = 1;
  private:
  const ::css_proto_converter::Ident& _internal_ident() const;
  public:
  const ::css_proto_converter::Ident& ident() const;
  ::css_proto_converter::Ident* release_ident();
  ::css_proto_converter::Ident* mutable_ident();
  void set_allocated_ident(::css_proto_converter::Ident* ident);

  // @@protoc_insertion_point(class_scope:css_proto_converter.NamespacePrefix)
 private:
  void set_has_ident();
  void clear_has_ident();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::css_proto_converter::Ident* ident_;
  friend struct ::protobuf_css_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Media : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:css_proto_converter.Media) */ {
 public:
  Media();
  virtual ~Media();

  Media(const Media& from);

  inline Media& operator=(const Media& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Media(Media&& from) noexcept
    : Media() {
    *this = ::std::move(from);
  }

  inline Media& operator=(Media&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Media& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Media* internal_default_instance() {
    return reinterpret_cast<const Media*>(
               &_Media_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(Media* other);
  friend void swap(Media& a, Media& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Media* New() const final {
    return CreateMaybeMessage<Media>(NULL);
  }

  Media* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Media>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Media& from);
  void MergeFrom(const Media& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Media* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .css_proto_converter.Ruleset rulesets = 2;
  int rulesets_size() const;
  void clear_rulesets();
  static const int kRulesetsFieldNumber = 2;
  ::css_proto_converter::Ruleset* mutable_rulesets(int index);
  ::google::protobuf::RepeatedPtrField< ::css_proto_converter::Ruleset >*
      mutable_rulesets();
  const ::css_proto_converter::Ruleset& rulesets(int index) const;
  ::css_proto_converter::Ruleset* add_rulesets();
  const ::google::protobuf::RepeatedPtrField< ::css_proto_converter::Ruleset >&
      rulesets() const;

  // required .css_proto_converter.MediaQueryList media_query_list = 1;
  bool has_media_query_list() const;
  void clear_media_query_list();
  static const int kMediaQueryListFieldNumber = 1;
  private:
  const ::css_proto_converter::MediaQueryList& _internal_media_query_list() const;
  public:
  const ::css_proto_converter::MediaQueryList& media_query_list() const;
  ::css_proto_converter::MediaQueryList* release_media_query_list();
  ::css_proto_converter::MediaQueryList* mutable_media_query_list();
  void set_allocated_media_query_list(::css_proto_converter::MediaQueryList* media_query_list);

  // @@protoc_insertion_point(class_scope:css_proto_converter.Media)
 private:
  void set_has_media_query_list();
  void clear_has_media_query_list();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::css_proto_converter::Ruleset > rulesets_;
  ::css_proto_converter::MediaQueryList* media_query_list_;
  friend struct ::protobuf_css_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Page : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:css_proto_converter.Page) */ {
 public:
  Page();
  virtual ~Page();

  Page(const Page& from);

  inline Page& operator=(const Page& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Page(Page&& from) noexcept
    : Page() {
    *this = ::std::move(from);
  }

  inline Page& operator=(Page&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Page& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Page* internal_default_instance() {
    return reinterpret_cast<const Page*>(
               &_Page_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(Page* other);
  friend void swap(Page& a, Page& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Page* New() const final {
    return CreateMaybeMessage<Page>(NULL);
  }

  Page* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Page>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Page& from);
  void MergeFrom(const Page& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Page* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .css_proto_converter.Ident ident = 1;
  bool has_ident() const;
  void clear_ident();
  static const int kIdentFieldNumber = 1;
  private:
  const ::css_proto_converter::Ident& _internal_ident() const;
  public:
  const ::css_proto_converter::Ident& ident() const;
  ::css_proto_converter::Ident* release_ident();
  ::css_proto_converter::Ident* mutable_ident();
  void set_allocated_ident(::css_proto_converter::Ident* ident);

  // optional .css_proto_converter.PseudoPage pseudo_page = 2;
  bool has_pseudo_page() const;
  void clear_pseudo_page();
  static const int kPseudoPageFieldNumber = 2;
  private:
  const ::css_proto_converter::PseudoPage& _internal_pseudo_page() const;
  public:
  const ::css_proto_converter::PseudoPage& pseudo_page() const;
  ::css_proto_converter::PseudoPage* release_pseudo_page();
  ::css_proto_converter::PseudoPage* mutable_pseudo_page();
  void set_allocated_pseudo_page(::css_proto_converter::PseudoPage* pseudo_page);

  // required .css_proto_converter.DeclarationList declaration_list = 3;
  bool has_declaration_list() const;
  void clear_declaration_list();
  static const int kDeclarationListFieldNumber = 3;
  private:
  const ::css_proto_converter::DeclarationList& _internal_declaration_list() const;
  public:
  const ::css_proto_converter::DeclarationList& declaration_list() const;
  ::css_proto_converter::DeclarationList* release_declaration_list();
  ::css_proto_converter::DeclarationList* mutable_declaration_list();
  void set_allocated_declaration_list(::css_proto_converter::DeclarationList* declaration_list);

  // @@protoc_insertion_point(class_scope:css_proto_converter.Page)
 private:
  void set_has_ident();
  void clear_has_ident();
  void set_has_pseudo_page();
  void clear_has_pseudo_page();
  void set_has_declaration_list();
  void clear_has_declaration_list();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::css_proto_converter::Ident* ident_;
  ::css_proto_converter::PseudoPage* pseudo_page_;
  ::css_proto_converter::DeclarationList* declaration_list_;
  friend struct ::protobuf_css_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeclarationList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:css_proto_converter.DeclarationList) */ {
 public:
  DeclarationList();
  virtual ~DeclarationList();

  DeclarationList(const DeclarationList& from);

  inline DeclarationList& operator=(const DeclarationList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeclarationList(DeclarationList&& from) noexcept
    : DeclarationList() {
    *this = ::std::move(from);
  }

  inline DeclarationList& operator=(DeclarationList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeclarationList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeclarationList* internal_default_instance() {
    return reinterpret_cast<const DeclarationList*>(
               &_DeclarationList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(DeclarationList* other);
  friend void swap(DeclarationList& a, DeclarationList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeclarationList* New() const final {
    return CreateMaybeMessage<DeclarationList>(NULL);
  }

  DeclarationList* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeclarationList>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeclarationList& from);
  void MergeFrom(const DeclarationList& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeclarationList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .css_proto_converter.Declaration later_declarations = 2;
  int later_declarations_size() const;
  void clear_later_declarations();
  static const int kLaterDeclarationsFieldNumber = 2;
  ::css_proto_converter::Declaration* mutable_later_declarations(int index);
  ::google::protobuf::RepeatedPtrField< ::css_proto_converter::Declaration >*
      mutable_later_declarations();
  const ::css_proto_converter::Declaration& later_declarations(int index) const;
  ::css_proto_converter::Declaration* add_later_declarations();
  const ::google::protobuf::RepeatedPtrField< ::css_proto_converter::Declaration >&
      later_declarations() const;

  // required .css_proto_converter.Declaration first_declaration = 1;
  bool has_first_declaration() const;
  void clear_first_declaration();
  static const int kFirstDeclarationFieldNumber = 1;
  private:
  const ::css_proto_converter::Declaration& _internal_first_declaration() const;
  public:
  const ::css_proto_converter::Declaration& first_declaration() const;
  ::css_proto_converter::Declaration* release_first_declaration();
  ::css_proto_converter::Declaration* mutable_first_declaration();
  void set_allocated_first_declaration(::css_proto_converter::Declaration* first_declaration);

  // @@protoc_insertion_point(class_scope:css_proto_converter.DeclarationList)
 private:
  void set_has_first_declaration();
  void clear_has_first_declaration();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::css_proto_converter::Declaration > later_declarations_;
  ::css_proto_converter::Declaration* first_declaration_;
  friend struct ::protobuf_css_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PseudoPage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:css_proto_converter.PseudoPage) */ {
 public:
  PseudoPage();
  virtual ~PseudoPage();

  PseudoPage(const PseudoPage& from);

  inline PseudoPage& operator=(const PseudoPage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PseudoPage(PseudoPage&& from) noexcept
    : PseudoPage() {
    *this = ::std::move(from);
  }

  inline PseudoPage& operator=(PseudoPage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PseudoPage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PseudoPage* internal_default_instance() {
    return reinterpret_cast<const PseudoPage*>(
               &_PseudoPage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(PseudoPage* other);
  friend void swap(PseudoPage& a, PseudoPage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PseudoPage* New() const final {
    return CreateMaybeMessage<PseudoPage>(NULL);
  }

  PseudoPage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PseudoPage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PseudoPage& from);
  void MergeFrom(const PseudoPage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PseudoPage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .css_proto_converter.Ident ident = 1;
  bool has_ident() const;
  void clear_ident();
  static const int kIdentFieldNumber = 1;
  private:
  const ::css_proto_converter::Ident& _internal_ident() const;
  public:
  const ::css_proto_converter::Ident& ident() const;
  ::css_proto_converter::Ident* release_ident();
  ::css_proto_converter::Ident* mutable_ident();
  void set_allocated_ident(::css_proto_converter::Ident* ident);

  // @@protoc_insertion_point(class_scope:css_proto_converter.PseudoPage)
 private:
  void set_has_ident();
  void clear_has_ident();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::css_proto_converter::Ident* ident_;
  friend struct ::protobuf_css_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FontFace : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:css_proto_converter.FontFace) */ {
 public:
  FontFace();
  virtual ~FontFace();

  FontFace(const FontFace& from);

  inline FontFace& operator=(const FontFace& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FontFace(FontFace&& from) noexcept
    : FontFace() {
    *this = ::std::move(from);
  }

  inline FontFace& operator=(FontFace&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FontFace& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FontFace* internal_default_instance() {
    return reinterpret_cast<const FontFace*>(
               &_FontFace_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(FontFace* other);
  friend void swap(FontFace& a, FontFace& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FontFace* New() const final {
    return CreateMaybeMessage<FontFace>(NULL);
  }

  FontFace* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FontFace>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FontFace& from);
  void MergeFrom(const FontFace& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FontFace* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:css_proto_converter.FontFace)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_css_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Operator : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:css_proto_converter.Operator) */ {
 public:
  Operator();
  virtual ~Operator();

  Operator(const Operator& from);

  inline Operator& operator=(const Operator& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Operator(Operator&& from) noexcept
    : Operator() {
    *this = ::std::move(from);
  }

  inline Operator& operator=(Operator&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Operator& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Operator* internal_default_instance() {
    return reinterpret_cast<const Operator*>(
               &_Operator_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(Operator* other);
  friend void swap(Operator& a, Operator& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Operator* New() const final {
    return CreateMaybeMessage<Operator>(NULL);
  }

  Operator* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Operator>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Operator& from);
  void MergeFrom(const Operator& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Operator* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Operator_AsciiValue AsciiValue;
  static const AsciiValue COMMA =
    Operator_AsciiValue_COMMA;
  static const AsciiValue SLASH =
    Operator_AsciiValue_SLASH;
  static inline bool AsciiValue_IsValid(int value) {
    return Operator_AsciiValue_IsValid(value);
  }
  static const AsciiValue AsciiValue_MIN =
    Operator_AsciiValue_AsciiValue_MIN;
  static const AsciiValue AsciiValue_MAX =
    Operator_AsciiValue_AsciiValue_MAX;
  static const int AsciiValue_ARRAYSIZE =
    Operator_AsciiValue_AsciiValue_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  AsciiValue_descriptor() {
    return Operator_AsciiValue_descriptor();
  }
  static inline const ::std::string& AsciiValue_Name(AsciiValue value) {
    return Operator_AsciiValue_Name(value);
  }
  static inline bool AsciiValue_Parse(const ::std::string& name,
      AsciiValue* value) {
    return Operator_AsciiValue_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .css_proto_converter.Operator.AsciiValue ascii_value = 1;
  bool has_ascii_value() const;
  void clear_ascii_value();
  static const int kAsciiValueFieldNumber = 1;
  ::css_proto_converter::Operator_AsciiValue ascii_value() const;
  void set_ascii_value(::css_proto_converter::Operator_AsciiValue value);

  // @@protoc_insertion_point(class_scope:css_proto_converter.Operator)
 private:
  void set_has_ascii_value();
  void clear_has_ascii_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  int ascii_value_;
  friend struct ::protobuf_css_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UnaryOperator : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:css_proto_converter.UnaryOperator) */ {
 public:
  UnaryOperator();
  virtual ~UnaryOperator();

  UnaryOperator(const UnaryOperator& from);

  inline UnaryOperator& operator=(const UnaryOperator& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UnaryOperator(UnaryOperator&& from) noexcept
    : UnaryOperator() {
    *this = ::std::move(from);
  }

  inline UnaryOperator& operator=(UnaryOperator&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UnaryOperator& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnaryOperator* internal_default_instance() {
    return reinterpret_cast<const UnaryOperator*>(
               &_UnaryOperator_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(UnaryOperator* other);
  friend void swap(UnaryOperator& a, UnaryOperator& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UnaryOperator* New() const final {
    return CreateMaybeMessage<UnaryOperator>(NULL);
  }

  UnaryOperator* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UnaryOperator>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UnaryOperator& from);
  void MergeFrom(const UnaryOperator& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnaryOperator* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef UnaryOperator_AsciiValue AsciiValue;
  static const AsciiValue PLUS =
    UnaryOperator_AsciiValue_PLUS;
  static const AsciiValue MINUS =
    UnaryOperator_AsciiValue_MINUS;
  static inline bool AsciiValue_IsValid(int value) {
    return UnaryOperator_AsciiValue_IsValid(value);
  }
  static const AsciiValue AsciiValue_MIN =
    UnaryOperator_AsciiValue_AsciiValue_MIN;
  static const AsciiValue AsciiValue_MAX =
    UnaryOperator_AsciiValue_AsciiValue_MAX;
  static const int AsciiValue_ARRAYSIZE =
    UnaryOperator_AsciiValue_AsciiValue_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  AsciiValue_descriptor() {
    return UnaryOperator_AsciiValue_descriptor();
  }
  static inline const ::std::string& AsciiValue_Name(AsciiValue value) {
    return UnaryOperator_AsciiValue_Name(value);
  }
  static inline bool AsciiValue_Parse(const ::std::string& name,
      AsciiValue* value) {
    return UnaryOperator_AsciiValue_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .css_proto_converter.UnaryOperator.AsciiValue ascii_value = 1;
  bool has_ascii_value() const;
  void clear_ascii_value();
  static const int kAsciiValueFieldNumber = 1;
  ::css_proto_converter::UnaryOperator_AsciiValue ascii_value() const;
  void set_ascii_value(::css_proto_converter::UnaryOperator_AsciiValue value);

  // @@protoc_insertion_point(class_scope:css_proto_converter.UnaryOperator)
 private:
  void set_has_ascii_value();
  void clear_has_ascii_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  int ascii_value_;
  friend struct ::protobuf_css_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Property : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:css_proto_converter.Property) */ {
 public:
  Property();
  virtual ~Property();

  Property(const Property& from);

  inline Property& operator=(const Property& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Property(Property&& from) noexcept
    : Property() {
    *this = ::std::move(from);
  }

  inline Property& operator=(Property&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Property& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Property* internal_default_instance() {
    return reinterpret_cast<const Property*>(
               &_Property_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(Property* other);
  friend void swap(Property& a, Property& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Property* New() const final {
    return CreateMaybeMessage<Property>(NULL);
  }

  Property* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Property>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Property& from);
  void MergeFrom(const Property& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Property* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Property_NameId NameId;
  static const NameId ALL =
    Property_NameId_ALL;
  static const NameId _WEBKIT_ANIMATION_ITERATION_COUNT =
    Property_NameId__WEBKIT_ANIMATION_ITERATION_COUNT;
  static const NameId FONT_FEATURE_SETTINGS =
    Property_NameId_FONT_FEATURE_SETTINGS;
  static const NameId _WEBKIT_TEXT_EMPHASIS_POSITION =
    Property_NameId__WEBKIT_TEXT_EMPHASIS_POSITION;
  static const NameId _WEBKIT_TEXT_EMPHASIS_STYLE =
    Property_NameId__WEBKIT_TEXT_EMPHASIS_STYLE;
  static const NameId GRID_TEMPLATE_ROWS =
    Property_NameId_GRID_TEMPLATE_ROWS;
  static const NameId TEXT_UNDERLINE_POSITION =
    Property_NameId_TEXT_UNDERLINE_POSITION;
  static const NameId _WEBKIT_FLEX_GROW =
    Property_NameId__WEBKIT_FLEX_GROW;
  static const NameId SCROLL_MARGIN_RIGHT =
    Property_NameId_SCROLL_MARGIN_RIGHT;
  static const NameId _WEBKIT_COLUMN_RULE =
    Property_NameId__WEBKIT_COLUMN_RULE;
  static const NameId _WEBKIT_ORDER =
    Property_NameId__WEBKIT_ORDER;
  static const NameId GRID_ROW_GAP =
    Property_NameId_GRID_ROW_GAP;
  static const NameId BACKDROP_FILTER =
    Property_NameId_BACKDROP_FILTER;
  static const NameId FONT_VARIANT_EAST_ASIAN =
    Property_NameId_FONT_VARIANT_EAST_ASIAN;
  static const NameId BUFFERED_RENDERING =
    Property_NameId_BUFFERED_RENDERING;
  static const NameId _WEBKIT_APPEARANCE =
    Property_NameId__WEBKIT_APPEARANCE;
  static const NameId OUTLINE_WIDTH =
    Property_NameId_OUTLINE_WIDTH;
  static const NameId ALIGNMENT_BASELINE =
    Property_NameId_ALIGNMENT_BASELINE;
  static const NameId _WEBKIT_FLEX_FLOW =
    Property_NameId__WEBKIT_FLEX_FLOW;
  static const NameId COLUMN_RULE =
    Property_NameId_COLUMN_RULE;
  static const NameId GRID_COLUMN_GAP =
    Property_NameId_GRID_COLUMN_GAP;
  static const NameId _WEBKIT_BORDER_AFTER =
    Property_NameId__WEBKIT_BORDER_AFTER;
  static const NameId _WEBKIT_COLUMN_BREAK_INSIDE =
    Property_NameId__WEBKIT_COLUMN_BREAK_INSIDE;
  static const NameId _WEBKIT_SHAPE_OUTSIDE =
    Property_NameId__WEBKIT_SHAPE_OUTSIDE;
  static const NameId _WEBKIT_PRINT_COLOR_ADJUST =
    Property_NameId__WEBKIT_PRINT_COLOR_ADJUST;
  static const NameId LIST_STYLE_TYPE =
    Property_NameId_LIST_STYLE_TYPE;
  static const NameId PAGE_BREAK_BEFORE =
    Property_NameId_PAGE_BREAK_BEFORE;
  static const NameId FLOOD_COLOR =
    Property_NameId_FLOOD_COLOR;
  static const NameId TEXT_ANCHOR =
    Property_NameId_TEXT_ANCHOR;
  static const NameId _WEBKIT_PADDING_START =
    Property_NameId__WEBKIT_PADDING_START;
  static const NameId _WEBKIT_USER_SELECT =
    Property_NameId__WEBKIT_USER_SELECT;
  static const NameId _WEBKIT_COLUMN_RULE_COLOR =
    Property_NameId__WEBKIT_COLUMN_RULE_COLOR;
  static const NameId PADDING_LEFT =
    Property_NameId_PADDING_LEFT;
  static const NameId _WEBKIT_BACKFACE_VISIBILITY =
    Property_NameId__WEBKIT_BACKFACE_VISIBILITY;
  static const NameId _WEBKIT_MARGIN_BEFORE =
    Property_NameId__WEBKIT_MARGIN_BEFORE;
  static const NameId BREAK_INSIDE =
    Property_NameId_BREAK_INSIDE;
  static const NameId COLUMN_COUNT =
    Property_NameId_COLUMN_COUNT;
  static const NameId _WEBKIT_LOGICAL_HEIGHT =
    Property_NameId__WEBKIT_LOGICAL_HEIGHT;
  static const NameId PERSPECTIVE =
    Property_NameId_PERSPECTIVE;
  static const NameId MAX_BLOCK_SIZE =
    Property_NameId_MAX_BLOCK_SIZE;
  static const NameId _WEBKIT_ANIMATION_PLAY_STATE =
    Property_NameId__WEBKIT_ANIMATION_PLAY_STATE;
  static const NameId BORDER_IMAGE_REPEAT =
    Property_NameId_BORDER_IMAGE_REPEAT;
  static const NameId _WEBKIT_FONT_SIZE_DELTA =
    Property_NameId__WEBKIT_FONT_SIZE_DELTA;
  static const NameId SCROLL_PADDING_BOTTOM =
    Property_NameId_SCROLL_PADDING_BOTTOM;
  static const NameId BORDER_RIGHT_STYLE =
    Property_NameId_BORDER_RIGHT_STYLE;
  static const NameId BORDER_LEFT_STYLE =
    Property_NameId_BORDER_LEFT_STYLE;
  static const NameId SCROLL_MARGIN_BLOCK =
    Property_NameId_SCROLL_MARGIN_BLOCK;
  static const NameId FLEX_FLOW =
    Property_NameId_FLEX_FLOW;
  static const NameId OUTLINE_COLOR =
    Property_NameId_OUTLINE_COLOR;
  static const NameId FLEX_GROW =
    Property_NameId_FLEX_GROW;
  static const NameId MAX_WIDTH =
    Property_NameId_MAX_WIDTH;
  static const NameId GRID_COLUMN =
    Property_NameId_GRID_COLUMN;
  static const NameId IMAGE_ORIENTATION =
    Property_NameId_IMAGE_ORIENTATION;
  static const NameId ANIMATION_DURATION =
    Property_NameId_ANIMATION_DURATION;
  static const NameId _WEBKIT_COLUMNS =
    Property_NameId__WEBKIT_COLUMNS;
  static const NameId _WEBKIT_BOX_FLEX_GROUP =
    Property_NameId__WEBKIT_BOX_FLEX_GROUP;
  static const NameId _WEBKIT_ANIMATION_DELAY =
    Property_NameId__WEBKIT_ANIMATION_DELAY;
  static const NameId _EPUB_TEXT_EMPHASIS =
    Property_NameId__EPUB_TEXT_EMPHASIS;
  static const NameId FLEX_SHRINK =
    Property_NameId_FLEX_SHRINK;
  static const NameId TEXT_RENDERING =
    Property_NameId_TEXT_RENDERING;
  static const NameId ALIGN_ITEMS =
    Property_NameId_ALIGN_ITEMS;
  static const NameId BORDER_COLLAPSE =
    Property_NameId_BORDER_COLLAPSE;
  static const NameId OFFSET =
    Property_NameId_OFFSET;
  static const NameId TEXT_COMBINE_UPRIGHT =
    Property_NameId_TEXT_COMBINE_UPRIGHT;
  static const NameId _WEBKIT_MASK_POSITION_X =
    Property_NameId__WEBKIT_MASK_POSITION_X;
  static const NameId _WEBKIT_MASK_POSITION_Y =
    Property_NameId__WEBKIT_MASK_POSITION_Y;
  static const NameId OUTLINE_STYLE =
    Property_NameId_OUTLINE_STYLE;
  static const NameId _WEBKIT_MARGIN_BOTTOM_COLLAPSE =
    Property_NameId__WEBKIT_MARGIN_BOTTOM_COLLAPSE;
  static const NameId COLOR_INTERPOLATION_FILTERS =
    Property_NameId_COLOR_INTERPOLATION_FILTERS;
  static const NameId FONT_VARIANT =
    Property_NameId_FONT_VARIANT;
  static const NameId _WEBKIT_ANIMATION_FILL_MODE =
    Property_NameId__WEBKIT_ANIMATION_FILL_MODE;
  static const NameId BORDER_RIGHT =
    Property_NameId_BORDER_RIGHT;
  static const NameId VISIBILITY =
    Property_NameId_VISIBILITY;
  static const NameId TRANSFORM_BOX =
    Property_NameId_TRANSFORM_BOX;
  static const NameId FONT_VARIANT_CAPS =
    Property_NameId_FONT_VARIANT_CAPS;
  static const NameId _EPUB_TEXT_EMPHASIS_COLOR =
    Property_NameId__EPUB_TEXT_EMPHASIS_COLOR;
  static const NameId _WEBKIT_BORDER_BEFORE_STYLE =
    Property_NameId__WEBKIT_BORDER_BEFORE_STYLE;
  static const NameId RESIZE =
    Property_NameId_RESIZE;
  static const NameId _WEBKIT_RTL_ORDERING =
    Property_NameId__WEBKIT_RTL_ORDERING;
  static const NameId _WEBKIT_BOX_ORDINAL_GROUP =
    Property_NameId__WEBKIT_BOX_ORDINAL_GROUP;
  static const NameId PAINT_ORDER =
    Property_NameId_PAINT_ORDER;
  static const NameId STROKE_LINECAP =
    Property_NameId_STROKE_LINECAP;
  static const NameId ANIMATION_DIRECTION =
    Property_NameId_ANIMATION_DIRECTION;
  static const NameId _WEBKIT_FONT_FEATURE_SETTINGS =
    Property_NameId__WEBKIT_FONT_FEATURE_SETTINGS;
  static const NameId BORDER_TOP_LEFT_RADIUS =
    Property_NameId_BORDER_TOP_LEFT_RADIUS;
  static const NameId _WEBKIT_COLUMN_WIDTH =
    Property_NameId__WEBKIT_COLUMN_WIDTH;
  static const NameId _WEBKIT_BOX_ALIGN =
    Property_NameId__WEBKIT_BOX_ALIGN;
  static const NameId _WEBKIT_PADDING_AFTER =
    Property_NameId__WEBKIT_PADDING_AFTER;
  static const NameId COLUMN_WIDTH =
    Property_NameId_COLUMN_WIDTH;
  static const NameId LIST_STYLE =
    Property_NameId_LIST_STYLE;
  static const NameId _WEBKIT_MASK_REPEAT_Y =
    Property_NameId__WEBKIT_MASK_REPEAT_Y;
  static const NameId _WEBKIT_MARGIN_BEFORE_COLLAPSE =
    Property_NameId__WEBKIT_MARGIN_BEFORE_COLLAPSE;
  static const NameId STROKE =
    Property_NameId_STROKE;
  static const NameId TEXT_DECORATION_LINE =
    Property_NameId_TEXT_DECORATION_LINE;
  static const NameId _WEBKIT_BACKGROUND_SIZE =
    Property_NameId__WEBKIT_BACKGROUND_SIZE;
  static const NameId _WEBKIT_MASK_REPEAT_X =
    Property_NameId__WEBKIT_MASK_REPEAT_X;
  static const NameId PADDING_BOTTOM =
    Property_NameId_PADDING_BOTTOM;
  static const NameId FONT_STYLE =
    Property_NameId_FONT_STYLE;
  static const NameId _WEBKIT_TRANSITION_DELAY =
    Property_NameId__WEBKIT_TRANSITION_DELAY;
  static const NameId BACKGROUND_REPEAT =
    Property_NameId_BACKGROUND_REPEAT;
  static const NameId FLEX_BASIS =
    Property_NameId_FLEX_BASIS;
  static const NameId BORDER_IMAGE_SLICE =
    Property_NameId_BORDER_IMAGE_SLICE;
  static const NameId _WEBKIT_TRANSFORM_ORIGIN =
    Property_NameId__WEBKIT_TRANSFORM_ORIGIN;
  static const NameId OVERSCROLL_BEHAVIOR_X =
    Property_NameId_OVERSCROLL_BEHAVIOR_X;
  static const NameId OVERSCROLL_BEHAVIOR_Y =
    Property_NameId_OVERSCROLL_BEHAVIOR_Y;
  static const NameId VECTOR_EFFECT =
    Property_NameId_VECTOR_EFFECT;
  static const NameId _WEBKIT_ANIMATION_TIMING_FUNCTION =
    Property_NameId__WEBKIT_ANIMATION_TIMING_FUNCTION;
  static const NameId _WEBKIT_BORDER_AFTER_STYLE =
    Property_NameId__WEBKIT_BORDER_AFTER_STYLE;
  static const NameId _WEBKIT_PERSPECTIVE_ORIGIN_X =
    Property_NameId__WEBKIT_PERSPECTIVE_ORIGIN_X;
  static const NameId _WEBKIT_PERSPECTIVE_ORIGIN_Y =
    Property_NameId__WEBKIT_PERSPECTIVE_ORIGIN_Y;
  static const NameId INLINE_SIZE =
    Property_NameId_INLINE_SIZE;
  static const NameId OUTLINE =
    Property_NameId_OUTLINE;
  static const NameId FONT_DISPLAY =
    Property_NameId_FONT_DISPLAY;
  static const NameId _WEBKIT_BORDER_BEFORE =
    Property_NameId__WEBKIT_BORDER_BEFORE;
  static const NameId BORDER_IMAGE_SOURCE =
    Property_NameId_BORDER_IMAGE_SOURCE;
  static const NameId TRANSITION_DURATION =
    Property_NameId_TRANSITION_DURATION;
  static const NameId SCROLL_PADDING_TOP =
    Property_NameId_SCROLL_PADDING_TOP;
  static const NameId ORDER =
    Property_NameId_ORDER;
  static const NameId _WEBKIT_BOX_ORIENT =
    Property_NameId__WEBKIT_BOX_ORIENT;
  static const NameId COUNTER_RESET =
    Property_NameId_COUNTER_RESET;
  static const NameId COLOR_RENDERING =
    Property_NameId_COLOR_RENDERING;
  static const NameId FLEX_DIRECTION =
    Property_NameId_FLEX_DIRECTION;
  static const NameId _WEBKIT_TEXT_STROKE_WIDTH =
    Property_NameId__WEBKIT_TEXT_STROKE_WIDTH;
  static const NameId FONT_VARIANT_NUMERIC =
    Property_NameId_FONT_VARIANT_NUMERIC;
  static const NameId SCROLL_MARGIN_BLOCK_END =
    Property_NameId_SCROLL_MARGIN_BLOCK_END;
  static const NameId MIN_HEIGHT =
    Property_NameId_MIN_HEIGHT;
  static const NameId SCROLL_PADDING_INLINE_START =
    Property_NameId_SCROLL_PADDING_INLINE_START;
  static const NameId _WEBKIT_MASK_BOX_IMAGE =
    Property_NameId__WEBKIT_MASK_BOX_IMAGE;
  static const NameId LEFT =
    Property_NameId_LEFT;
  static const NameId _WEBKIT_MASK =
    Property_NameId__WEBKIT_MASK;
  static const NameId _WEBKIT_BORDER_AFTER_WIDTH =
    Property_NameId__WEBKIT_BORDER_AFTER_WIDTH;
  static const NameId STROKE_WIDTH =
    Property_NameId_STROKE_WIDTH;
  static const NameId _WEBKIT_BOX_DECORATION_BREAK =
    Property_NameId__WEBKIT_BOX_DECORATION_BREAK;
  static const NameId _WEBKIT_MASK_POSITION =
    Property_NameId__WEBKIT_MASK_POSITION;
  static const NameId BACKGROUND_ORIGIN =
    Property_NameId_BACKGROUND_ORIGIN;
  static const NameId _WEBKIT_BORDER_START_COLOR =
    Property_NameId__WEBKIT_BORDER_START_COLOR;
  static const NameId FONT_STRETCH =
    Property_NameId_FONT_STRETCH;
  static const NameId _WEBKIT_BACKGROUND_CLIP =
    Property_NameId__WEBKIT_BACKGROUND_CLIP;
  static const NameId SCROLL_MARGIN_TOP =
    Property_NameId_SCROLL_MARGIN_TOP;
  static const NameId _WEBKIT_BORDER_HORIZONTAL_SPACING =
    Property_NameId__WEBKIT_BORDER_HORIZONTAL_SPACING;
  static const NameId BORDER_RADIUS =
    Property_NameId_BORDER_RADIUS;
  static const NameId FLEX =
    Property_NameId_FLEX;
  static const NameId TEXT_INDENT =
    Property_NameId_TEXT_INDENT;
  static const NameId HYPHENS =
    Property_NameId_HYPHENS;
  static const NameId COLUMN_RULE_WIDTH =
    Property_NameId_COLUMN_RULE_WIDTH;
  static const NameId _WEBKIT_MARGIN_AFTER =
    Property_NameId__WEBKIT_MARGIN_AFTER;
  static const NameId _EPUB_CAPTION_SIDE =
    Property_NameId__EPUB_CAPTION_SIDE;
  static const NameId BREAK_AFTER =
    Property_NameId_BREAK_AFTER;
  static const NameId TEXT_TRANSFORM =
    Property_NameId_TEXT_TRANSFORM;
  static const NameId TOUCH_ACTION =
    Property_NameId_TOUCH_ACTION;
  static const NameId FONT_SIZE =
    Property_NameId_FONT_SIZE;
  static const NameId _WEBKIT_ANIMATION_NAME =
    Property_NameId__WEBKIT_ANIMATION_NAME;
  static const NameId SCROLL_PADDING_INLINE =
    Property_NameId_SCROLL_PADDING_INLINE;
  static const NameId OFFSET_PATH =
    Property_NameId_OFFSET_PATH;
  static const NameId SCROLL_MARGIN =
    Property_NameId_SCROLL_MARGIN;
  static const NameId PADDING_TOP =
    Property_NameId_PADDING_TOP;
  static const NameId SCROLL_SNAP_ALIGN =
    Property_NameId_SCROLL_SNAP_ALIGN;
  static const NameId _WEBKIT_TEXT_COMBINE =
    Property_NameId__WEBKIT_TEXT_COMBINE;
  static const NameId _WEBKIT_FLEX_SHRINK =
    Property_NameId__WEBKIT_FLEX_SHRINK;
  static const NameId RX =
    Property_NameId_RX;
  static const NameId RY =
    Property_NameId_RY;
  static const NameId CONTENT =
    Property_NameId_CONTENT;
  static const NameId PADDING_RIGHT =
    Property_NameId_PADDING_RIGHT;
  static const NameId _WEBKIT_TRANSFORM =
    Property_NameId__WEBKIT_TRANSFORM;
  static const NameId MARKER_MID =
    Property_NameId_MARKER_MID;
  static const NameId _WEBKIT_MIN_LOGICAL_WIDTH =
    Property_NameId__WEBKIT_MIN_LOGICAL_WIDTH;
  static const NameId CLIP_RULE =
    Property_NameId_CLIP_RULE;
  static const NameId FONT_FAMILY =
    Property_NameId_FONT_FAMILY;
  static const NameId SCROLL_SNAP_TYPE =
    Property_NameId_SCROLL_SNAP_TYPE;
  static const NameId TEXT_DECORATION_SKIP =
    Property_NameId_TEXT_DECORATION_SKIP;
  static const NameId TRANSITION =
    Property_NameId_TRANSITION;
  static const NameId FILTER =
    Property_NameId_FILTER;
  static const NameId BORDER_RIGHT_WIDTH =
    Property_NameId_BORDER_RIGHT_WIDTH;
  static const NameId _WEBKIT_FLEX_DIRECTION =
    Property_NameId__WEBKIT_FLEX_DIRECTION;
  static const NameId _WEBKIT_MASK_COMPOSITE =
    Property_NameId__WEBKIT_MASK_COMPOSITE;
  static const NameId MIX_BLEND_MODE =
    Property_NameId_MIX_BLEND_MODE;
  static const NameId COLOR_INTERPOLATION =
    Property_NameId_COLOR_INTERPOLATION;
  static const NameId BORDER_TOP_STYLE =
    Property_NameId_BORDER_TOP_STYLE;
  static const NameId FILL_OPACITY =
    Property_NameId_FILL_OPACITY;
  static const NameId MARKER_START =
    Property_NameId_MARKER_START;
  static const NameId BORDER_BOTTOM_WIDTH =
    Property_NameId_BORDER_BOTTOM_WIDTH;
  static const NameId _WEBKIT_TEXT_EMPHASIS =
    Property_NameId__WEBKIT_TEXT_EMPHASIS;
  static const NameId GRID_AREA =
    Property_NameId_GRID_AREA;
  static const NameId SIZE =
    Property_NameId_SIZE;
  static const NameId BACKGROUND_CLIP =
    Property_NameId_BACKGROUND_CLIP;
  static const NameId _WEBKIT_TEXT_FILL_COLOR =
    Property_NameId__WEBKIT_TEXT_FILL_COLOR;
  static const NameId TOP =
    Property_NameId_TOP;
  static const NameId _WEBKIT_BOX_REFLECT =
    Property_NameId__WEBKIT_BOX_REFLECT;
  static const NameId BORDER_WIDTH =
    Property_NameId_BORDER_WIDTH;
  static const NameId OFFSET_ANCHOR =
    Property_NameId_OFFSET_ANCHOR;
  static const NameId MAX_INLINE_SIZE =
    Property_NameId_MAX_INLINE_SIZE;
  static const NameId _WEBKIT_COLUMN_RULE_STYLE =
    Property_NameId__WEBKIT_COLUMN_RULE_STYLE;
  static const NameId _WEBKIT_COLUMN_COUNT =
    Property_NameId__WEBKIT_COLUMN_COUNT;
  static const NameId ANIMATION_PLAY_STATE =
    Property_NameId_ANIMATION_PLAY_STATE;
  static const NameId PADDING =
    Property_NameId_PADDING;
  static const NameId DOMINANT_BASELINE =
    Property_NameId_DOMINANT_BASELINE;
  static const NameId BACKGROUND_ATTACHMENT =
    Property_NameId_BACKGROUND_ATTACHMENT;
  static const NameId _WEBKIT_BOX_SIZING =
    Property_NameId__WEBKIT_BOX_SIZING;
  static const NameId _WEBKIT_BOX_FLEX =
    Property_NameId__WEBKIT_BOX_FLEX;
  static const NameId TEXT_ORIENTATION =
    Property_NameId_TEXT_ORIENTATION;
  static const NameId BACKGROUND_POSITION =
    Property_NameId_BACKGROUND_POSITION;
  static const NameId _WEBKIT_BORDER_START_WIDTH =
    Property_NameId__WEBKIT_BORDER_START_WIDTH;
  static const NameId _EPUB_TEXT_EMPHASIS_STYLE =
    Property_NameId__EPUB_TEXT_EMPHASIS_STYLE;
  static const NameId ISOLATION =
    Property_NameId_ISOLATION;
  static const NameId _EPUB_TEXT_ORIENTATION =
    Property_NameId__EPUB_TEXT_ORIENTATION;
  static const NameId _WEBKIT_BORDER_BOTTOM_RIGHT_RADIUS =
    Property_NameId__WEBKIT_BORDER_BOTTOM_RIGHT_RADIUS;
  static const NameId R =
    Property_NameId_R;
  static const NameId BORDER_LEFT_WIDTH =
    Property_NameId_BORDER_LEFT_WIDTH;
  static const NameId GRID_COLUMN_END =
    Property_NameId_GRID_COLUMN_END;
  static const NameId BACKGROUND_BLEND_MODE =
    Property_NameId_BACKGROUND_BLEND_MODE;
  static const NameId VERTICAL_ALIGN =
    Property_NameId_VERTICAL_ALIGN;
  static const NameId CLIP =
    Property_NameId_CLIP;
  static const NameId GRID_AUTO_ROWS =
    Property_NameId_GRID_AUTO_ROWS;
  static const NameId OFFSET_ROTATE =
    Property_NameId_OFFSET_ROTATE;
  static const NameId MARGIN_LEFT =
    Property_NameId_MARGIN_LEFT;
  static const NameId ANIMATION_NAME =
    Property_NameId_ANIMATION_NAME;
  static const NameId TEXT_DECORATION =
    Property_NameId_TEXT_DECORATION;
  static const NameId BORDER =
    Property_NameId_BORDER;
  static const NameId _WEBKIT_TRANSITION_TIMING_FUNCTION =
    Property_NameId__WEBKIT_TRANSITION_TIMING_FUNCTION;
  static const NameId MARGIN_BOTTOM =
    Property_NameId_MARGIN_BOTTOM;
  static const NameId UNICODE_RANGE =
    Property_NameId_UNICODE_RANGE;
  static const NameId ANIMATION =
    Property_NameId_ANIMATION;
  static const NameId _WEBKIT_SHAPE_MARGIN =
    Property_NameId__WEBKIT_SHAPE_MARGIN;
  static const NameId FONT_WEIGHT =
    Property_NameId_FONT_WEIGHT;
  static const NameId SHAPE_MARGIN =
    Property_NameId_SHAPE_MARGIN;
  static const NameId MASK_TYPE =
    Property_NameId_MASK_TYPE;
  static const NameId SCROLL_PADDING =
    Property_NameId_SCROLL_PADDING;
  static const NameId MIN_INLINE_SIZE =
    Property_NameId_MIN_INLINE_SIZE;
  static const NameId OBJECT_POSITION =
    Property_NameId_OBJECT_POSITION;
  static const NameId PAGE_BREAK_AFTER =
    Property_NameId_PAGE_BREAK_AFTER;
  static const NameId _WEBKIT_MASK_CLIP =
    Property_NameId__WEBKIT_MASK_CLIP;
  static const NameId WHITE_SPACE =
    Property_NameId_WHITE_SPACE;
  static const NameId _WEBKIT_BORDER_AFTER_COLOR =
    Property_NameId__WEBKIT_BORDER_AFTER_COLOR;
  static const NameId _WEBKIT_MAX_LOGICAL_WIDTH =
    Property_NameId__WEBKIT_MAX_LOGICAL_WIDTH;
  static const NameId _WEBKIT_BORDER_BEFORE_COLOR =
    Property_NameId__WEBKIT_BORDER_BEFORE_COLOR;
  static const NameId FONT_KERNING =
    Property_NameId_FONT_KERNING;
  static const NameId _EPUB_WORD_BREAK =
    Property_NameId__EPUB_WORD_BREAK;
  static const NameId CLEAR =
    Property_NameId_CLEAR;
  static const NameId ANIMATION_TIMING_FUNCTION =
    Property_NameId_ANIMATION_TIMING_FUNCTION;
  static const NameId _WEBKIT_BORDER_RADIUS =
    Property_NameId__WEBKIT_BORDER_RADIUS;
  static const NameId SCROLL_PADDING_RIGHT =
    Property_NameId_SCROLL_PADDING_RIGHT;
  static const NameId _WEBKIT_TEXT_DECORATIONS_IN_EFFECT =
    Property_NameId__WEBKIT_TEXT_DECORATIONS_IN_EFFECT;
  static const NameId _WEBKIT_ANIMATION_DIRECTION =
    Property_NameId__WEBKIT_ANIMATION_DIRECTION;
  static const NameId JUSTIFY_SELF =
    Property_NameId_JUSTIFY_SELF;
  static const NameId TRANSITION_TIMING_FUNCTION =
    Property_NameId_TRANSITION_TIMING_FUNCTION;
  static const NameId SCROLL_SNAP_STOP =
    Property_NameId_SCROLL_SNAP_STOP;
  static const NameId COUNTER_INCREMENT =
    Property_NameId_COUNTER_INCREMENT;
  static const NameId _WEBKIT_TRANSFORM_STYLE =
    Property_NameId__WEBKIT_TRANSFORM_STYLE;
  static const NameId GRID_AUTO_COLUMNS =
    Property_NameId_GRID_AUTO_COLUMNS;
  static const NameId _WEBKIT_ALIGN_CONTENT =
    Property_NameId__WEBKIT_ALIGN_CONTENT;
  static const NameId FONT =
    Property_NameId_FONT;
  static const NameId FLEX_WRAP =
    Property_NameId_FLEX_WRAP;
  static const NameId GRID_ROW_START =
    Property_NameId_GRID_ROW_START;
  static const NameId LIST_STYLE_IMAGE =
    Property_NameId_LIST_STYLE_IMAGE;
  static const NameId _WEBKIT_TAP_HIGHLIGHT_COLOR =
    Property_NameId__WEBKIT_TAP_HIGHLIGHT_COLOR;
  static const NameId _WEBKIT_TEXT_EMPHASIS_COLOR =
    Property_NameId__WEBKIT_TEXT_EMPHASIS_COLOR;
  static const NameId BORDER_LEFT =
    Property_NameId_BORDER_LEFT;
  static const NameId _WEBKIT_BORDER_END_COLOR =
    Property_NameId__WEBKIT_BORDER_END_COLOR;
  static const NameId COLUMNS =
    Property_NameId_COLUMNS;
  static const NameId BOX_SHADOW =
    Property_NameId_BOX_SHADOW;
  static const NameId _WEBKIT_FLEX_WRAP =
    Property_NameId__WEBKIT_FLEX_WRAP;
  static const NameId ALIGN_SELF =
    Property_NameId_ALIGN_SELF;
  static const NameId BORDER_BOTTOM =
    Property_NameId_BORDER_BOTTOM;
  static const NameId BORDER_SPACING =
    Property_NameId_BORDER_SPACING;
  static const NameId _WEBKIT_COLUMN_SPAN =
    Property_NameId__WEBKIT_COLUMN_SPAN;
  static const NameId GRID_ROW_END =
    Property_NameId_GRID_ROW_END;
  static const NameId _WEBKIT_BORDER_END =
    Property_NameId__WEBKIT_BORDER_END;
  static const NameId PERSPECTIVE_ORIGIN =
    Property_NameId_PERSPECTIVE_ORIGIN;
  static const NameId PAGE_BREAK_INSIDE =
    Property_NameId_PAGE_BREAK_INSIDE;
  static const NameId ORPHANS =
    Property_NameId_ORPHANS;
  static const NameId _WEBKIT_BORDER_START_STYLE =
    Property_NameId__WEBKIT_BORDER_START_STYLE;
  static const NameId SCROLL_BEHAVIOR =
    Property_NameId_SCROLL_BEHAVIOR;
  static const NameId COLUMN_SPAN =
    Property_NameId_COLUMN_SPAN;
  static const NameId _WEBKIT_HYPHENATE_CHARACTER =
    Property_NameId__WEBKIT_HYPHENATE_CHARACTER;
  static const NameId COLUMN_FILL =
    Property_NameId_COLUMN_FILL;
  static const NameId TAB_SIZE =
    Property_NameId_TAB_SIZE;
  static const NameId CONTAIN =
    Property_NameId_CONTAIN;
  static const NameId X =
    Property_NameId_X;
  static const NameId GRID_ROW =
    Property_NameId_GRID_ROW;
  static const NameId BORDER_BOTTOM_RIGHT_RADIUS =
    Property_NameId_BORDER_BOTTOM_RIGHT_RADIUS;
  static const NameId LINE_HEIGHT =
    Property_NameId_LINE_HEIGHT;
  static const NameId STROKE_LINEJOIN =
    Property_NameId_STROKE_LINEJOIN;
  static const NameId TEXT_ALIGN_LAST =
    Property_NameId_TEXT_ALIGN_LAST;
  static const NameId OFFSET_POSITION =
    Property_NameId_OFFSET_POSITION;
  static const NameId WORD_SPACING =
    Property_NameId_WORD_SPACING;
  static const NameId TRANSFORM_STYLE =
    Property_NameId_TRANSFORM_STYLE;
  static const NameId _WEBKIT_APP_REGION =
    Property_NameId__WEBKIT_APP_REGION;
  static const NameId _WEBKIT_BORDER_END_STYLE =
    Property_NameId__WEBKIT_BORDER_END_STYLE;
  static const NameId _WEBKIT_TRANSFORM_ORIGIN_Z =
    Property_NameId__WEBKIT_TRANSFORM_ORIGIN_Z;
  static const NameId _WEBKIT_TRANSFORM_ORIGIN_X =
    Property_NameId__WEBKIT_TRANSFORM_ORIGIN_X;
  static const NameId _WEBKIT_TRANSFORM_ORIGIN_Y =
    Property_NameId__WEBKIT_TRANSFORM_ORIGIN_Y;
  static const NameId BACKGROUND_REPEAT_X =
    Property_NameId_BACKGROUND_REPEAT_X;
  static const NameId BACKGROUND_REPEAT_Y =
    Property_NameId_BACKGROUND_REPEAT_Y;
  static const NameId BORDER_BOTTOM_COLOR =
    Property_NameId_BORDER_BOTTOM_COLOR;
  static const NameId _WEBKIT_RUBY_POSITION =
    Property_NameId__WEBKIT_RUBY_POSITION;
  static const NameId _WEBKIT_LOGICAL_WIDTH =
    Property_NameId__WEBKIT_LOGICAL_WIDTH;
  static const NameId TEXT_JUSTIFY =
    Property_NameId_TEXT_JUSTIFY;
  static const NameId SCROLL_MARGIN_INLINE_START =
    Property_NameId_SCROLL_MARGIN_INLINE_START;
  static const NameId CAPTION_SIDE =
    Property_NameId_CAPTION_SIDE;
  static const NameId MASK_SOURCE_TYPE =
    Property_NameId_MASK_SOURCE_TYPE;
  static const NameId _WEBKIT_MASK_BOX_IMAGE_SLICE =
    Property_NameId__WEBKIT_MASK_BOX_IMAGE_SLICE;
  static const NameId _WEBKIT_BORDER_IMAGE =
    Property_NameId__WEBKIT_BORDER_IMAGE;
  static const NameId TEXT_SIZE_ADJUST =
    Property_NameId_TEXT_SIZE_ADJUST;
  static const NameId _WEBKIT_TEXT_SECURITY =
    Property_NameId__WEBKIT_TEXT_SECURITY;
  static const NameId _EPUB_WRITING_MODE =
    Property_NameId__EPUB_WRITING_MODE;
  static const NameId GRID_TEMPLATE =
    Property_NameId_GRID_TEMPLATE;
  static const NameId _WEBKIT_MASK_BOX_IMAGE_REPEAT =
    Property_NameId__WEBKIT_MASK_BOX_IMAGE_REPEAT;
  static const NameId _WEBKIT_MASK_REPEAT =
    Property_NameId__WEBKIT_MASK_REPEAT;
  static const NameId _WEBKIT_JUSTIFY_CONTENT =
    Property_NameId__WEBKIT_JUSTIFY_CONTENT;
  static const NameId BASELINE_SHIFT =
    Property_NameId_BASELINE_SHIFT;
  static const NameId BORDER_IMAGE =
    Property_NameId_BORDER_IMAGE;
  static const NameId TEXT_DECORATION_COLOR =
    Property_NameId_TEXT_DECORATION_COLOR;
  static const NameId COLOR =
    Property_NameId_COLOR;
  static const NameId SHAPE_IMAGE_THRESHOLD =
    Property_NameId_SHAPE_IMAGE_THRESHOLD;
  static const NameId SHAPE_RENDERING =
    Property_NameId_SHAPE_RENDERING;
  static const NameId CY =
    Property_NameId_CY;
  static const NameId CX =
    Property_NameId_CX;
  static const NameId _WEBKIT_USER_MODIFY =
    Property_NameId__WEBKIT_USER_MODIFY;
  static const NameId OFFSET_DISTANCE =
    Property_NameId_OFFSET_DISTANCE;
  static const NameId _WEBKIT_BORDER_BOTTOM_LEFT_RADIUS =
    Property_NameId__WEBKIT_BORDER_BOTTOM_LEFT_RADIUS;
  static const NameId SPEAK =
    Property_NameId_SPEAK;
  static const NameId BORDER_BOTTOM_LEFT_RADIUS =
    Property_NameId_BORDER_BOTTOM_LEFT_RADIUS;
  static const NameId _WEBKIT_COLUMN_BREAK_AFTER =
    Property_NameId__WEBKIT_COLUMN_BREAK_AFTER;
  static const NameId _WEBKIT_FONT_SMOOTHING =
    Property_NameId__WEBKIT_FONT_SMOOTHING;
  static const NameId _WEBKIT_MAX_LOGICAL_HEIGHT =
    Property_NameId__WEBKIT_MAX_LOGICAL_HEIGHT;
  static const NameId _WEBKIT_LINE_BREAK =
    Property_NameId__WEBKIT_LINE_BREAK;
  static const NameId FILL_RULE =
    Property_NameId_FILL_RULE;
  static const NameId _WEBKIT_MARGIN_START =
    Property_NameId__WEBKIT_MARGIN_START;
  static const NameId MIN_WIDTH =
    Property_NameId_MIN_WIDTH;
  static const NameId _EPUB_TEXT_COMBINE =
    Property_NameId__EPUB_TEXT_COMBINE;
  static const NameId BREAK_BEFORE =
    Property_NameId_BREAK_BEFORE;
  static const NameId CARET_COLOR =
    Property_NameId_CARET_COLOR;
  static const NameId EMPTY_CELLS =
    Property_NameId_EMPTY_CELLS;
  static const NameId DIRECTION =
    Property_NameId_DIRECTION;
  static const NameId CLIP_PATH =
    Property_NameId_CLIP_PATH;
  static const NameId JUSTIFY_CONTENT =
    Property_NameId_JUSTIFY_CONTENT;
  static const NameId SCROLL_PADDING_BLOCK_END =
    Property_NameId_SCROLL_PADDING_BLOCK_END;
  static const NameId Z_INDEX =
    Property_NameId_Z_INDEX;
  static const NameId BACKGROUND_POSITION_Y =
    Property_NameId_BACKGROUND_POSITION_Y;
  static const NameId TEXT_DECORATION_STYLE =
    Property_NameId_TEXT_DECORATION_STYLE;
  static const NameId GRID_TEMPLATE_AREAS =
    Property_NameId_GRID_TEMPLATE_AREAS;
  static const NameId _WEBKIT_MIN_LOGICAL_HEIGHT =
    Property_NameId__WEBKIT_MIN_LOGICAL_HEIGHT;
  static const NameId FONT_SIZE_ADJUST =
    Property_NameId_FONT_SIZE_ADJUST;
  static const NameId SCROLL_PADDING_BLOCK =
    Property_NameId_SCROLL_PADDING_BLOCK;
  static const NameId OVERFLOW_ANCHOR =
    Property_NameId_OVERFLOW_ANCHOR;
  static const NameId CURSOR =
    Property_NameId_CURSOR;
  static const NameId SCROLL_MARGIN_BLOCK_START =
    Property_NameId_SCROLL_MARGIN_BLOCK_START;
  static const NameId _WEBKIT_MASK_BOX_IMAGE_SOURCE =
    Property_NameId__WEBKIT_MASK_BOX_IMAGE_SOURCE;
  static const NameId MARGIN =
    Property_NameId_MARGIN;
  static const NameId _WEBKIT_ANIMATION =
    Property_NameId__WEBKIT_ANIMATION;
  static const NameId LETTER_SPACING =
    Property_NameId_LETTER_SPACING;
  static const NameId ORIENTATION =
    Property_NameId_ORIENTATION;
  static const NameId WILL_CHANGE =
    Property_NameId_WILL_CHANGE;
  static const NameId _WEBKIT_HIGHLIGHT =
    Property_NameId__WEBKIT_HIGHLIGHT;
  static const NameId TRANSFORM_ORIGIN =
    Property_NameId_TRANSFORM_ORIGIN;
  static const NameId FONT_VARIANT_LIGATURES =
    Property_NameId_FONT_VARIANT_LIGATURES;
  static const NameId _WEBKIT_ANIMATION_DURATION =
    Property_NameId__WEBKIT_ANIMATION_DURATION;
  static const NameId _WEBKIT_MASK_ORIGIN =
    Property_NameId__WEBKIT_MASK_ORIGIN;
  static const NameId _WEBKIT_CLIP_PATH =
    Property_NameId__WEBKIT_CLIP_PATH;
  static const NameId WORD_BREAK =
    Property_NameId_WORD_BREAK;
  static const NameId TABLE_LAYOUT =
    Property_NameId_TABLE_LAYOUT;
  static const NameId TEXT_OVERFLOW =
    Property_NameId_TEXT_OVERFLOW;
  static const NameId _WEBKIT_LOCALE =
    Property_NameId__WEBKIT_LOCALE;
  static const NameId _WEBKIT_FLEX =
    Property_NameId__WEBKIT_FLEX;
  static const NameId GRID_AUTO_FLOW =
    Property_NameId_GRID_AUTO_FLOW;
  static const NameId BORDER_TOP_RIGHT_RADIUS =
    Property_NameId_BORDER_TOP_RIGHT_RADIUS;
  static const NameId BORDER_IMAGE_OUTSET =
    Property_NameId_BORDER_IMAGE_OUTSET;
  static const NameId PLACE_ITEMS =
    Property_NameId_PLACE_ITEMS;
  static const NameId BORDER_LEFT_COLOR =
    Property_NameId_BORDER_LEFT_COLOR;
  static const NameId FONT_VARIATION_SETTINGS =
    Property_NameId_FONT_VARIATION_SETTINGS;
  static const NameId BORDER_RIGHT_COLOR =
    Property_NameId_BORDER_RIGHT_COLOR;
  static const NameId MIN_ZOOM =
    Property_NameId_MIN_ZOOM;
  static const NameId SCROLL_MARGIN_INLINE =
    Property_NameId_SCROLL_MARGIN_INLINE;
  static const NameId _WEBKIT_BORDER_BEFORE_WIDTH =
    Property_NameId__WEBKIT_BORDER_BEFORE_WIDTH;
  static const NameId BACKFACE_VISIBILITY =
    Property_NameId_BACKFACE_VISIBILITY;
  static const NameId BACKGROUND_IMAGE =
    Property_NameId_BACKGROUND_IMAGE;
  static const NameId _WEBKIT_TRANSITION_PROPERTY =
    Property_NameId__WEBKIT_TRANSITION_PROPERTY;
  static const NameId WRITING_MODE =
    Property_NameId_WRITING_MODE;
  static const NameId STROKE_OPACITY =
    Property_NameId_STROKE_OPACITY;
  static const NameId _WEBKIT_MARGIN_COLLAPSE =
    Property_NameId__WEBKIT_MARGIN_COLLAPSE;
  static const NameId BOX_SIZING =
    Property_NameId_BOX_SIZING;
  static const NameId MARGIN_TOP =
    Property_NameId_MARGIN_TOP;
  static const NameId COLUMN_RULE_COLOR =
    Property_NameId_COLUMN_RULE_COLOR;
  static const NameId Y =
    Property_NameId_Y;
  static const NameId POSITION =
    Property_NameId_POSITION;
  static const NameId SCROLL_MARGIN_BOTTOM =
    Property_NameId_SCROLL_MARGIN_BOTTOM;
  static const NameId LIST_STYLE_POSITION =
    Property_NameId_LIST_STYLE_POSITION;
  static const NameId _WEBKIT_BOX_PACK =
    Property_NameId__WEBKIT_BOX_PACK;
  static const NameId SCROLL_PADDING_INLINE_END =
    Property_NameId_SCROLL_PADDING_INLINE_END;
  static const NameId QUOTES =
    Property_NameId_QUOTES;
  static const NameId BORDER_TOP =
    Property_NameId_BORDER_TOP;
  static const NameId SCROLL_PADDING_LEFT =
    Property_NameId_SCROLL_PADDING_LEFT;
  static const NameId _WEBKIT_TRANSITION =
    Property_NameId__WEBKIT_TRANSITION;
  static const NameId _WEBKIT_COLUMN_BREAK_BEFORE =
    Property_NameId__WEBKIT_COLUMN_BREAK_BEFORE;
  static const NameId LIGHTING_COLOR =
    Property_NameId_LIGHTING_COLOR;
  static const NameId BACKGROUND_SIZE =
    Property_NameId_BACKGROUND_SIZE;
  static const NameId _WEBKIT_PADDING_BEFORE =
    Property_NameId__WEBKIT_PADDING_BEFORE;
  static const NameId _WEBKIT_BORDER_TOP_LEFT_RADIUS =
    Property_NameId__WEBKIT_BORDER_TOP_LEFT_RADIUS;
  static const NameId FLOOD_OPACITY =
    Property_NameId_FLOOD_OPACITY;
  static const NameId LINE_HEIGHT_STEP =
    Property_NameId_LINE_HEIGHT_STEP;
  static const NameId _WEBKIT_MASK_SIZE =
    Property_NameId__WEBKIT_MASK_SIZE;
  static const NameId TEXT_ALIGN =
    Property_NameId_TEXT_ALIGN;
  static const NameId _WEBKIT_FILTER =
    Property_NameId__WEBKIT_FILTER;
  static const NameId WORD_WRAP =
    Property_NameId_WORD_WRAP;
  static const NameId MAX_ZOOM =
    Property_NameId_MAX_ZOOM;
  static const NameId GRID =
    Property_NameId_GRID;
  static const NameId BACKGROUND =
    Property_NameId_BACKGROUND;
  static const NameId HEIGHT =
    Property_NameId_HEIGHT;
  static const NameId GRID_COLUMN_START =
    Property_NameId_GRID_COLUMN_START;
  static const NameId ANIMATION_FILL_MODE =
    Property_NameId_ANIMATION_FILL_MODE;
  static const NameId ROTATE =
    Property_NameId_ROTATE;
  static const NameId MARKER_END =
    Property_NameId_MARKER_END;
  static const NameId D =
    Property_NameId_D;
  static const NameId JUSTIFY_ITEMS =
    Property_NameId_JUSTIFY_ITEMS;
  static const NameId ZOOM =
    Property_NameId_ZOOM;
  static const NameId SCROLL_PADDING_BLOCK_START =
    Property_NameId_SCROLL_PADDING_BLOCK_START;
  static const NameId _WEBKIT_MARGIN_TOP_COLLAPSE =
    Property_NameId__WEBKIT_MARGIN_TOP_COLLAPSE;
  static const NameId PAGE =
    Property_NameId_PAGE;
  static const NameId RIGHT =
    Property_NameId_RIGHT;
  static const NameId USER_SELECT =
    Property_NameId_USER_SELECT;
  static const NameId MARGIN_RIGHT =
    Property_NameId_MARGIN_RIGHT;
  static const NameId MARKER =
    Property_NameId_MARKER;
  static const NameId LINE_BREAK =
    Property_NameId_LINE_BREAK;
  static const NameId _WEBKIT_MARGIN_END =
    Property_NameId__WEBKIT_MARGIN_END;
  static const NameId _WEBKIT_TRANSITION_DURATION =
    Property_NameId__WEBKIT_TRANSITION_DURATION;
  static const NameId _WEBKIT_WRITING_MODE =
    Property_NameId__WEBKIT_WRITING_MODE;
  static const NameId BORDER_TOP_WIDTH =
    Property_NameId_BORDER_TOP_WIDTH;
  static const NameId BOTTOM =
    Property_NameId_BOTTOM;
  static const NameId PLACE_CONTENT =
    Property_NameId_PLACE_CONTENT;
  static const NameId _WEBKIT_SHAPE_IMAGE_THRESHOLD =
    Property_NameId__WEBKIT_SHAPE_IMAGE_THRESHOLD;
  static const NameId _WEBKIT_USER_DRAG =
    Property_NameId__WEBKIT_USER_DRAG;
  static const NameId _WEBKIT_BORDER_VERTICAL_SPACING =
    Property_NameId__WEBKIT_BORDER_VERTICAL_SPACING;
  static const NameId _WEBKIT_COLUMN_GAP =
    Property_NameId__WEBKIT_COLUMN_GAP;
  static const NameId _WEBKIT_OPACITY =
    Property_NameId__WEBKIT_OPACITY;
  static const NameId BACKGROUND_COLOR =
    Property_NameId_BACKGROUND_COLOR;
  static const NameId COLUMN_GAP =
    Property_NameId_COLUMN_GAP;
  static const NameId SHAPE_OUTSIDE =
    Property_NameId_SHAPE_OUTSIDE;
  static const NameId _WEBKIT_PADDING_END =
    Property_NameId__WEBKIT_PADDING_END;
  static const NameId _WEBKIT_BORDER_START =
    Property_NameId__WEBKIT_BORDER_START;
  static const NameId ANIMATION_DELAY =
    Property_NameId_ANIMATION_DELAY;
  static const NameId UNICODE_BIDI =
    Property_NameId_UNICODE_BIDI;
  static const NameId TEXT_SHADOW =
    Property_NameId_TEXT_SHADOW;
  static const NameId _WEBKIT_BOX_DIRECTION =
    Property_NameId__WEBKIT_BOX_DIRECTION;
  static const NameId IMAGE_RENDERING =
    Property_NameId_IMAGE_RENDERING;
  static const NameId SRC =
    Property_NameId_SRC;
  static const NameId GRID_GAP =
    Property_NameId_GRID_GAP;
  static const NameId POINTER_EVENTS =
    Property_NameId_POINTER_EVENTS;
  static const NameId BORDER_IMAGE_WIDTH =
    Property_NameId_BORDER_IMAGE_WIDTH;
  static const NameId MIN_BLOCK_SIZE =
    Property_NameId_MIN_BLOCK_SIZE;
  static const NameId TRANSITION_PROPERTY =
    Property_NameId_TRANSITION_PROPERTY;
  static const NameId _WEBKIT_MASK_IMAGE =
    Property_NameId__WEBKIT_MASK_IMAGE;
  static const NameId FLOAT =
    Property_NameId_FLOAT;
  static const NameId MAX_HEIGHT =
    Property_NameId_MAX_HEIGHT;
  static const NameId OUTLINE_OFFSET =
    Property_NameId_OUTLINE_OFFSET;
  static const NameId _WEBKIT_BOX_SHADOW =
    Property_NameId__WEBKIT_BOX_SHADOW;
  static const NameId OVERFLOW_WRAP =
    Property_NameId_OVERFLOW_WRAP;
  static const NameId BLOCK_SIZE =
    Property_NameId_BLOCK_SIZE;
  static const NameId TRANSFORM =
    Property_NameId_TRANSFORM;
  static const NameId PLACE_SELF =
    Property_NameId_PLACE_SELF;
  static const NameId WIDTH =
    Property_NameId_WIDTH;
  static const NameId STROKE_MITERLIMIT =
    Property_NameId_STROKE_MITERLIMIT;
  static const NameId STOP_OPACITY =
    Property_NameId_STOP_OPACITY;
  static const NameId BORDER_TOP_COLOR =
    Property_NameId_BORDER_TOP_COLOR;
  static const NameId TRANSLATE =
    Property_NameId_TRANSLATE;
  static const NameId OBJECT_FIT =
    Property_NameId_OBJECT_FIT;
  static const NameId _WEBKIT_MASK_BOX_IMAGE_WIDTH =
    Property_NameId__WEBKIT_MASK_BOX_IMAGE_WIDTH;
  static const NameId _WEBKIT_BACKGROUND_ORIGIN =
    Property_NameId__WEBKIT_BACKGROUND_ORIGIN;
  static const NameId _WEBKIT_ALIGN_ITEMS =
    Property_NameId__WEBKIT_ALIGN_ITEMS;
  static const NameId TRANSITION_DELAY =
    Property_NameId_TRANSITION_DELAY;
  static const NameId SCROLL_MARGIN_LEFT =
    Property_NameId_SCROLL_MARGIN_LEFT;
  static const NameId BORDER_STYLE =
    Property_NameId_BORDER_STYLE;
  static const NameId ANIMATION_ITERATION_COUNT =
    Property_NameId_ANIMATION_ITERATION_COUNT;
  static const NameId _WEBKIT_MARGIN_AFTER_COLLAPSE =
    Property_NameId__WEBKIT_MARGIN_AFTER_COLLAPSE;
  static const NameId _OVERFLOW =
    Property_NameId__OVERFLOW;
  static const NameId USER_ZOOM =
    Property_NameId_USER_ZOOM;
  static const NameId _WEBKIT_BORDER_TOP_RIGHT_RADIUS =
    Property_NameId__WEBKIT_BORDER_TOP_RIGHT_RADIUS;
  static const NameId GRID_TEMPLATE_COLUMNS =
    Property_NameId_GRID_TEMPLATE_COLUMNS;
  static const NameId _WEBKIT_ALIGN_SELF =
    Property_NameId__WEBKIT_ALIGN_SELF;
  static const NameId _WEBKIT_PERSPECTIVE_ORIGIN =
    Property_NameId__WEBKIT_PERSPECTIVE_ORIGIN;
  static const NameId COLUMN_RULE_STYLE =
    Property_NameId_COLUMN_RULE_STYLE;
  static const NameId DISPLAY =
    Property_NameId_DISPLAY;
  static const NameId _WEBKIT_COLUMN_RULE_WIDTH =
    Property_NameId__WEBKIT_COLUMN_RULE_WIDTH;
  static const NameId _WEBKIT_BOX_LINES =
    Property_NameId__WEBKIT_BOX_LINES;
  static const NameId BORDER_COLOR =
    Property_NameId_BORDER_COLOR;
  static const NameId _WEBKIT_FLEX_BASIS =
    Property_NameId__WEBKIT_FLEX_BASIS;
  static const NameId STROKE_DASHOFFSET =
    Property_NameId_STROKE_DASHOFFSET;
  static const NameId _WEBKIT_TEXT_SIZE_ADJUST =
    Property_NameId__WEBKIT_TEXT_SIZE_ADJUST;
  static const NameId OVERSCROLL_BEHAVIOR =
    Property_NameId_OVERSCROLL_BEHAVIOR;
  static const NameId _WEBKIT_TEXT_STROKE =
    Property_NameId__WEBKIT_TEXT_STROKE;
  static const NameId WIDOWS =
    Property_NameId_WIDOWS;
  static const NameId FILL =
    Property_NameId_FILL;
  static const NameId OVERFLOW_Y =
    Property_NameId_OVERFLOW_Y;
  static const NameId OVERFLOW_X =
    Property_NameId_OVERFLOW_X;
  static const NameId OPACITY =
    Property_NameId_OPACITY;
  static const NameId _WEBKIT_PERSPECTIVE =
    Property_NameId__WEBKIT_PERSPECTIVE;
  static const NameId _WEBKIT_TEXT_STROKE_COLOR =
    Property_NameId__WEBKIT_TEXT_STROKE_COLOR;
  static const NameId SCROLL_MARGIN_INLINE_END =
    Property_NameId_SCROLL_MARGIN_INLINE_END;
  static const NameId SCALE =
    Property_NameId_SCALE;
  static const NameId _WEBKIT_TEXT_ORIENTATION =
    Property_NameId__WEBKIT_TEXT_ORIENTATION;
  static const NameId _WEBKIT_MASK_BOX_IMAGE_OUTSET =
    Property_NameId__WEBKIT_MASK_BOX_IMAGE_OUTSET;
  static const NameId ALIGN_CONTENT =
    Property_NameId_ALIGN_CONTENT;
  static const NameId _WEBKIT_BORDER_END_WIDTH =
    Property_NameId__WEBKIT_BORDER_END_WIDTH;
  static const NameId BORDER_BOTTOM_STYLE =
    Property_NameId_BORDER_BOTTOM_STYLE;
  static const NameId MASK =
    Property_NameId_MASK;
  static const NameId BACKGROUND_POSITION_X =
    Property_NameId_BACKGROUND_POSITION_X;
  static const NameId _EPUB_TEXT_TRANSFORM =
    Property_NameId__EPUB_TEXT_TRANSFORM;
  static const NameId STOP_COLOR =
    Property_NameId_STOP_COLOR;
  static const NameId STROKE_DASHARRAY =
    Property_NameId_STROKE_DASHARRAY;
  static const NameId _WEBKIT_LINE_CLAMP =
    Property_NameId__WEBKIT_LINE_CLAMP;
  static const NameId INVALID_PROPERTY =
    Property_NameId_INVALID_PROPERTY;
  static inline bool NameId_IsValid(int value) {
    return Property_NameId_IsValid(value);
  }
  static const NameId NameId_MIN =
    Property_NameId_NameId_MIN;
  static const NameId NameId_MAX =
    Property_NameId_NameId_MAX;
  static const int NameId_ARRAYSIZE =
    Property_NameId_NameId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  NameId_descriptor() {
    return Property_NameId_descriptor();
  }
  static inline const ::std::string& NameId_Name(NameId value) {
    return Property_NameId_Name(value);
  }
  static inline bool NameId_Parse(const ::std::string& name,
      NameId* value) {
    return Property_NameId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .css_proto_converter.Property.NameId name_id = 1;
  bool has_name_id() const;
  void clear_name_id();
  static const int kNameIdFieldNumber = 1;
  ::css_proto_converter::Property_NameId name_id() const;
  void set_name_id(::css_proto_converter::Property_NameId value);

  // @@protoc_insertion_point(class_scope:css_proto_converter.Property)
 private:
  void set_has_name_id();
  void clear_has_name_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  int name_id_;
  friend struct ::protobuf_css_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Ruleset : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:css_proto_converter.Ruleset) */ {
 public:
  Ruleset();
  virtual ~Ruleset();

  Ruleset(const Ruleset& from);

  inline Ruleset& operator=(const Ruleset& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Ruleset(Ruleset&& from) noexcept
    : Ruleset() {
    *this = ::std::move(from);
  }

  inline Ruleset& operator=(Ruleset&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Ruleset& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ruleset* internal_default_instance() {
    return reinterpret_cast<const Ruleset*>(
               &_Ruleset_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(Ruleset* other);
  friend void swap(Ruleset& a, Ruleset& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Ruleset* New() const final {
    return CreateMaybeMessage<Ruleset>(NULL);
  }

  Ruleset* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Ruleset>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Ruleset& from);
  void MergeFrom(const Ruleset& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ruleset* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .css_proto_converter.SelectorList selector_list = 1;
  bool has_selector_list() const;
  void clear_selector_list();
  static const int kSelectorListFieldNumber = 1;
  private:
  const ::css_proto_converter::SelectorList& _internal_selector_list() const;
  public:
  const ::css_proto_converter::SelectorList& selector_list() const;
  ::css_proto_converter::SelectorList* release_selector_list();
  ::css_proto_converter::SelectorList* mutable_selector_list();
  void set_allocated_selector_list(::css_proto_converter::SelectorList* selector_list);

  // required .css_proto_converter.DeclarationList declaration_list = 2;
  bool has_declaration_list() const;
  void clear_declaration_list();
  static const int kDeclarationListFieldNumber = 2;
  private:
  const ::css_proto_converter::DeclarationList& _internal_declaration_list() const;
  public:
  const ::css_proto_converter::DeclarationList& declaration_list() const;
  ::css_proto_converter::DeclarationList* release_declaration_list();
  ::css_proto_converter::DeclarationList* mutable_declaration_list();
  void set_allocated_declaration_list(::css_proto_converter::DeclarationList* declaration_list);

  // @@protoc_insertion_point(class_scope:css_proto_converter.Ruleset)
 private:
  void set_has_selector_list();
  void clear_has_selector_list();
  void set_has_declaration_list();
  void clear_has_declaration_list();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::css_proto_converter::SelectorList* selector_list_;
  ::css_proto_converter::DeclarationList* declaration_list_;
  friend struct ::protobuf_css_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SelectorList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:css_proto_converter.SelectorList) */ {
 public:
  SelectorList();
  virtual ~SelectorList();

  SelectorList(const SelectorList& from);

  inline SelectorList& operator=(const SelectorList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SelectorList(SelectorList&& from) noexcept
    : SelectorList() {
    *this = ::std::move(from);
  }

  inline SelectorList& operator=(SelectorList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SelectorList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SelectorList* internal_default_instance() {
    return reinterpret_cast<const SelectorList*>(
               &_SelectorList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(SelectorList* other);
  friend void swap(SelectorList& a, SelectorList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SelectorList* New() const final {
    return CreateMaybeMessage<SelectorList>(NULL);
  }

  SelectorList* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SelectorList>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SelectorList& from);
  void MergeFrom(const SelectorList& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SelectorList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .css_proto_converter.Selector later_selectors = 2;
  int later_selectors_size() const;
  void clear_later_selectors();
  static const int kLaterSelectorsFieldNumber = 2;
  ::css_proto_converter::Selector* mutable_later_selectors(int index);
  ::google::protobuf::RepeatedPtrField< ::css_proto_converter::Selector >*
      mutable_later_selectors();
  const ::css_proto_converter::Selector& later_selectors(int index) const;
  ::css_proto_converter::Selector* add_later_selectors();
  const ::google::protobuf::RepeatedPtrField< ::css_proto_converter::Selector >&
      later_selectors() const;

  // required .css_proto_converter.Selector first_selector = 1;
  bool has_first_selector() const;
  void clear_first_selector();
  static const int kFirstSelectorFieldNumber = 1;
  private:
  const ::css_proto_converter::Selector& _internal_first_selector() const;
  public:
  const ::css_proto_converter::Selector& first_selector() const;
  ::css_proto_converter::Selector* release_first_selector();
  ::css_proto_converter::Selector* mutable_first_selector();
  void set_allocated_first_selector(::css_proto_converter::Selector* first_selector);

  // @@protoc_insertion_point(class_scope:css_proto_converter.SelectorList)
 private:
  void set_has_first_selector();
  void clear_has_first_selector();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::css_proto_converter::Selector > later_selectors_;
  ::css_proto_converter::Selector* first_selector_;
  friend struct ::protobuf_css_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Attr : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:css_proto_converter.Attr) */ {
 public:
  Attr();
  virtual ~Attr();

  Attr(const Attr& from);

  inline Attr& operator=(const Attr& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Attr(Attr&& from) noexcept
    : Attr() {
    *this = ::std::move(from);
  }

  inline Attr& operator=(Attr&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Attr& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Attr* internal_default_instance() {
    return reinterpret_cast<const Attr*>(
               &_Attr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(Attr* other);
  friend void swap(Attr& a, Attr& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Attr* New() const final {
    return CreateMaybeMessage<Attr>(NULL);
  }

  Attr* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Attr>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Attr& from);
  void MergeFrom(const Attr& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Attr* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Attr_Type Type;
  static const Type NONE =
    Attr_Type_NONE;
  static const Type EQUAL =
    Attr_Type_EQUAL;
  static const Type TILDE =
    Attr_Type_TILDE;
  static const Type PIPE =
    Attr_Type_PIPE;
  static const Type DOLLAR =
    Attr_Type_DOLLAR;
  static const Type STAR =
    Attr_Type_STAR;
  static inline bool Type_IsValid(int value) {
    return Attr_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Attr_Type_Type_MIN;
  static const Type Type_MAX =
    Attr_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Attr_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Attr_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Attr_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Attr_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional bool attr_i = 2;
  bool has_attr_i() const;
  void clear_attr_i();
  static const int kAttrIFieldNumber = 2;
  bool attr_i() const;
  void set_attr_i(bool value);

  // required .css_proto_converter.Attr.Type type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::css_proto_converter::Attr_Type type() const;
  void set_type(::css_proto_converter::Attr_Type value);

  // @@protoc_insertion_point(class_scope:css_proto_converter.Attr)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_attr_i();
  void clear_has_attr_i();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  bool attr_i_;
  int type_;
  friend struct ::protobuf_css_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Selector : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:css_proto_converter.Selector) */ {
 public:
  Selector();
  virtual ~Selector();

  Selector(const Selector& from);

  inline Selector& operator=(const Selector& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Selector(Selector&& from) noexcept
    : Selector() {
    *this = ::std::move(from);
  }

  inline Selector& operator=(Selector&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Selector& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Selector* internal_default_instance() {
    return reinterpret_cast<const Selector*>(
               &_Selector_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(Selector* other);
  friend void swap(Selector& a, Selector& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Selector* New() const final {
    return CreateMaybeMessage<Selector>(NULL);
  }

  Selector* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Selector>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Selector& from);
  void MergeFrom(const Selector& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Selector* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Selector_Type Type;
  static const Type ELEMENT =
    Selector_Type_ELEMENT;
  static const Type CLASS =
    Selector_Type_CLASS;
  static const Type ID =
    Selector_Type_ID;
  static const Type UNIVERSAL =
    Selector_Type_UNIVERSAL;
  static const Type ATTR =
    Selector_Type_ATTR;
  static inline bool Type_IsValid(int value) {
    return Selector_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Selector_Type_Type_MIN;
  static const Type Type_MAX =
    Selector_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Selector_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Selector_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Selector_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Selector_Type_Parse(name, value);
  }

  typedef Selector_PseudoValueId PseudoValueId;
  static const PseudoValueId _INTERNAL_AUTOFILL_PREVIEWED =
    Selector_PseudoValueId__INTERNAL_AUTOFILL_PREVIEWED;
  static const PseudoValueId _INTERNAL_AUTOFILL_SELECTED =
    Selector_PseudoValueId__INTERNAL_AUTOFILL_SELECTED;
  static const PseudoValueId _INTERNAL_LIST_BOX =
    Selector_PseudoValueId__INTERNAL_LIST_BOX;
  static const PseudoValueId _INTERNAL_MEDIA_CONTROLS_OVERLAY_CAST_BUTTON =
    Selector_PseudoValueId__INTERNAL_MEDIA_CONTROLS_OVERLAY_CAST_BUTTON;
  static const PseudoValueId _INTERNAL_SHADOW_HOST_HAS_APPEARANCE =
    Selector_PseudoValueId__INTERNAL_SHADOW_HOST_HAS_APPEARANCE;
  static const PseudoValueId _INTERNAL_SPATIAL_NAVIGATION_FOCUS =
    Selector_PseudoValueId__INTERNAL_SPATIAL_NAVIGATION_FOCUS;
  static const PseudoValueId _INTERNAL_VIDEO_PERSISTENT =
    Selector_PseudoValueId__INTERNAL_VIDEO_PERSISTENT;
  static const PseudoValueId _INTERNAL_VIDEO_PERSISTENT_ANCESTOR =
    Selector_PseudoValueId__INTERNAL_VIDEO_PERSISTENT_ANCESTOR;
  static const PseudoValueId _WEBKIT_ANY_LINK =
    Selector_PseudoValueId__WEBKIT_ANY_LINK;
  static const PseudoValueId _WEBKIT_AUTOFILL =
    Selector_PseudoValueId__WEBKIT_AUTOFILL;
  static const PseudoValueId _WEBKIT_DRAG =
    Selector_PseudoValueId__WEBKIT_DRAG;
  static const PseudoValueId _WEBKIT_FULL_PAGE_MEDIA =
    Selector_PseudoValueId__WEBKIT_FULL_PAGE_MEDIA;
  static const PseudoValueId _WEBKIT_FULL_SCREEN =
    Selector_PseudoValueId__WEBKIT_FULL_SCREEN;
  static const PseudoValueId _WEBKIT_FULL_SCREEN_ANCESTOR =
    Selector_PseudoValueId__WEBKIT_FULL_SCREEN_ANCESTOR;
  static const PseudoValueId _WEBKIT_RESIZER =
    Selector_PseudoValueId__WEBKIT_RESIZER;
  static const PseudoValueId _WEBKIT_SCROLLBAR =
    Selector_PseudoValueId__WEBKIT_SCROLLBAR;
  static const PseudoValueId _WEBKIT_SCROLLBAR_BUTTON =
    Selector_PseudoValueId__WEBKIT_SCROLLBAR_BUTTON;
  static const PseudoValueId _WEBKIT_SCROLLBAR_CORNER =
    Selector_PseudoValueId__WEBKIT_SCROLLBAR_CORNER;
  static const PseudoValueId _WEBKIT_SCROLLBAR_THUMB =
    Selector_PseudoValueId__WEBKIT_SCROLLBAR_THUMB;
  static const PseudoValueId _WEBKIT_SCROLLBAR_TRACK =
    Selector_PseudoValueId__WEBKIT_SCROLLBAR_TRACK;
  static const PseudoValueId _WEBKIT_SCROLLBAR_TRACK_PIECE =
    Selector_PseudoValueId__WEBKIT_SCROLLBAR_TRACK_PIECE;
  static const PseudoValueId ACTIVE =
    Selector_PseudoValueId_ACTIVE;
  static const PseudoValueId AFTER =
    Selector_PseudoValueId_AFTER;
  static const PseudoValueId BACKDROP =
    Selector_PseudoValueId_BACKDROP;
  static const PseudoValueId BEFORE =
    Selector_PseudoValueId_BEFORE;
  static const PseudoValueId CHECKED =
    Selector_PseudoValueId_CHECKED;
  static const PseudoValueId CONTENT =
    Selector_PseudoValueId_CONTENT;
  static const PseudoValueId CORNER_PRESENT =
    Selector_PseudoValueId_CORNER_PRESENT;
  static const PseudoValueId CUE =
    Selector_PseudoValueId_CUE;
  static const PseudoValueId DECREMENT =
    Selector_PseudoValueId_DECREMENT;
  static const PseudoValueId DEFAULT =
    Selector_PseudoValueId_DEFAULT;
  static const PseudoValueId DEFINED =
    Selector_PseudoValueId_DEFINED;
  static const PseudoValueId DISABLED =
    Selector_PseudoValueId_DISABLED;
  static const PseudoValueId DOUBLE_BUTTON =
    Selector_PseudoValueId_DOUBLE_BUTTON;
  static const PseudoValueId EMPTY =
    Selector_PseudoValueId_EMPTY;
  static const PseudoValueId ENABLED =
    Selector_PseudoValueId_ENABLED;
  static const PseudoValueId END =
    Selector_PseudoValueId_END;
  static const PseudoValueId FIRST =
    Selector_PseudoValueId_FIRST;
  static const PseudoValueId FIRST_CHILD =
    Selector_PseudoValueId_FIRST_CHILD;
  static const PseudoValueId FIRST_LETTER =
    Selector_PseudoValueId_FIRST_LETTER;
  static const PseudoValueId FIRST_LINE =
    Selector_PseudoValueId_FIRST_LINE;
  static const PseudoValueId FIRST_OF_TYPE =
    Selector_PseudoValueId_FIRST_OF_TYPE;
  static const PseudoValueId FOCUS =
    Selector_PseudoValueId_FOCUS;
  static const PseudoValueId FOCUS_WITHIN =
    Selector_PseudoValueId_FOCUS_WITHIN;
  static const PseudoValueId FULLSCREEN =
    Selector_PseudoValueId_FULLSCREEN;
  static const PseudoValueId FUTURE =
    Selector_PseudoValueId_FUTURE;
  static const PseudoValueId HORIZONTAL =
    Selector_PseudoValueId_HORIZONTAL;
  static const PseudoValueId HOST =
    Selector_PseudoValueId_HOST;
  static const PseudoValueId HOVER =
    Selector_PseudoValueId_HOVER;
  static const PseudoValueId IN_RANGE =
    Selector_PseudoValueId_IN_RANGE;
  static const PseudoValueId INCREMENT =
    Selector_PseudoValueId_INCREMENT;
  static const PseudoValueId INDETERMINATE =
    Selector_PseudoValueId_INDETERMINATE;
  static const PseudoValueId INVALID =
    Selector_PseudoValueId_INVALID;
  static const PseudoValueId LAST_CHILD =
    Selector_PseudoValueId_LAST_CHILD;
  static const PseudoValueId LAST_OF_TYPE =
    Selector_PseudoValueId_LAST_OF_TYPE;
  static const PseudoValueId LEFT =
    Selector_PseudoValueId_LEFT;
  static const PseudoValueId LINK =
    Selector_PseudoValueId_LINK;
  static const PseudoValueId NO_BUTTON =
    Selector_PseudoValueId_NO_BUTTON;
  static const PseudoValueId ONLY_CHILD =
    Selector_PseudoValueId_ONLY_CHILD;
  static const PseudoValueId ONLY_OF_TYPE =
    Selector_PseudoValueId_ONLY_OF_TYPE;
  static const PseudoValueId OPTIONAL =
    Selector_PseudoValueId_OPTIONAL;
  static const PseudoValueId OUT_OF_RANGE =
    Selector_PseudoValueId_OUT_OF_RANGE;
  static const PseudoValueId PAST =
    Selector_PseudoValueId_PAST;
  static const PseudoValueId PLACEHOLDER =
    Selector_PseudoValueId_PLACEHOLDER;
  static const PseudoValueId PLACEHOLDER_SHOWN =
    Selector_PseudoValueId_PLACEHOLDER_SHOWN;
  static const PseudoValueId READ_ONLY =
    Selector_PseudoValueId_READ_ONLY;
  static const PseudoValueId READ_WRITE =
    Selector_PseudoValueId_READ_WRITE;
  static const PseudoValueId REQUIRED =
    Selector_PseudoValueId_REQUIRED;
  static const PseudoValueId RIGHT =
    Selector_PseudoValueId_RIGHT;
  static const PseudoValueId ROOT =
    Selector_PseudoValueId_ROOT;
  static const PseudoValueId SCOPE =
    Selector_PseudoValueId_SCOPE;
  static const PseudoValueId SELECTION =
    Selector_PseudoValueId_SELECTION;
  static const PseudoValueId SHADOW =
    Selector_PseudoValueId_SHADOW;
  static const PseudoValueId SINGLE_BUTTON =
    Selector_PseudoValueId_SINGLE_BUTTON;
  static const PseudoValueId START =
    Selector_PseudoValueId_START;
  static const PseudoValueId TARGET =
    Selector_PseudoValueId_TARGET;
  static const PseudoValueId UNRESOLVED =
    Selector_PseudoValueId_UNRESOLVED;
  static const PseudoValueId VALID =
    Selector_PseudoValueId_VALID;
  static const PseudoValueId VERTICAL =
    Selector_PseudoValueId_VERTICAL;
  static const PseudoValueId VISITED =
    Selector_PseudoValueId_VISITED;
  static const PseudoValueId WINDOW_INACTIVE =
    Selector_PseudoValueId_WINDOW_INACTIVE;
  static const PseudoValueId _WEBKIT_ANY =
    Selector_PseudoValueId__WEBKIT_ANY;
  static const PseudoValueId HOST_CONTEXT =
    Selector_PseudoValueId_HOST_CONTEXT;
  static const PseudoValueId LANG =
    Selector_PseudoValueId_LANG;
  static const PseudoValueId NOT =
    Selector_PseudoValueId_NOT;
  static const PseudoValueId NTH_CHILD =
    Selector_PseudoValueId_NTH_CHILD;
  static const PseudoValueId NTH_LAST_CHILD =
    Selector_PseudoValueId_NTH_LAST_CHILD;
  static const PseudoValueId NTH_LAST_OF_TYPE =
    Selector_PseudoValueId_NTH_LAST_OF_TYPE;
  static const PseudoValueId NTH_OF_TYPE =
    Selector_PseudoValueId_NTH_OF_TYPE;
  static const PseudoValueId SLOTTED =
    Selector_PseudoValueId_SLOTTED;
  static const PseudoValueId INVALID_PSEUDO_VALUE =
    Selector_PseudoValueId_INVALID_PSEUDO_VALUE;
  static inline bool PseudoValueId_IsValid(int value) {
    return Selector_PseudoValueId_IsValid(value);
  }
  static const PseudoValueId PseudoValueId_MIN =
    Selector_PseudoValueId_PseudoValueId_MIN;
  static const PseudoValueId PseudoValueId_MAX =
    Selector_PseudoValueId_PseudoValueId_MAX;
  static const int PseudoValueId_ARRAYSIZE =
    Selector_PseudoValueId_PseudoValueId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PseudoValueId_descriptor() {
    return Selector_PseudoValueId_descriptor();
  }
  static inline const ::std::string& PseudoValueId_Name(PseudoValueId value) {
    return Selector_PseudoValueId_Name(value);
  }
  static inline bool PseudoValueId_Parse(const ::std::string& name,
      PseudoValueId* value) {
    return Selector_PseudoValueId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .css_proto_converter.Attr attr = 2;
  bool has_attr() const;
  void clear_attr();
  static const int kAttrFieldNumber = 2;
  private:
  const ::css_proto_converter::Attr& _internal_attr() const;
  public:
  const ::css_proto_converter::Attr& attr() const;
  ::css_proto_converter::Attr* release_attr();
  ::css_proto_converter::Attr* mutable_attr();
  void set_allocated_attr(::css_proto_converter::Attr* attr);

  // required .css_proto_converter.Selector.Type type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::css_proto_converter::Selector_Type type() const;
  void set_type(::css_proto_converter::Selector_Type value);

  // required .css_proto_converter.PseudoType pseudo_type = 3;
  bool has_pseudo_type() const;
  void clear_pseudo_type();
  static const int kPseudoTypeFieldNumber = 3;
  ::css_proto_converter::PseudoType pseudo_type() const;
  void set_pseudo_type(::css_proto_converter::PseudoType value);

  // optional .css_proto_converter.Selector.PseudoValueId pseudo_value_id = 4;
  bool has_pseudo_value_id() const;
  void clear_pseudo_value_id();
  static const int kPseudoValueIdFieldNumber = 4;
  ::css_proto_converter::Selector_PseudoValueId pseudo_value_id() const;
  void set_pseudo_value_id(::css_proto_converter::Selector_PseudoValueId value);

  // required .css_proto_converter.Combinator combinator = 5;
  bool has_combinator() const;
  void clear_combinator();
  static const int kCombinatorFieldNumber = 5;
  ::css_proto_converter::Combinator combinator() const;
  void set_combinator(::css_proto_converter::Combinator value);

  // @@protoc_insertion_point(class_scope:css_proto_converter.Selector)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_attr();
  void clear_has_attr();
  void set_has_pseudo_type();
  void clear_has_pseudo_type();
  void set_has_pseudo_value_id();
  void clear_has_pseudo_value_id();
  void set_has_combinator();
  void clear_has_combinator();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::css_proto_converter::Attr* attr_;
  int type_;
  int pseudo_type_;
  int pseudo_value_id_;
  int combinator_;
  friend struct ::protobuf_css_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Pseudo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:css_proto_converter.Pseudo) */ {
 public:
  Pseudo();
  virtual ~Pseudo();

  Pseudo(const Pseudo& from);

  inline Pseudo& operator=(const Pseudo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Pseudo(Pseudo&& from) noexcept
    : Pseudo() {
    *this = ::std::move(from);
  }

  inline Pseudo& operator=(Pseudo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Pseudo& default_instance();

  enum RhsCase {
    kIdent1 = 1,
    kFunctionToken = 2,
    RHS_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Pseudo* internal_default_instance() {
    return reinterpret_cast<const Pseudo*>(
               &_Pseudo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(Pseudo* other);
  friend void swap(Pseudo& a, Pseudo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Pseudo* New() const final {
    return CreateMaybeMessage<Pseudo>(NULL);
  }

  Pseudo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Pseudo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Pseudo& from);
  void MergeFrom(const Pseudo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pseudo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .css_proto_converter.Ident ident_2 = 3;
  bool has_ident_2() const;
  void clear_ident_2();
  static const int kIdent2FieldNumber = 3;
  private:
  const ::css_proto_converter::Ident& _internal_ident_2() const;
  public:
  const ::css_proto_converter::Ident& ident_2() const;
  ::css_proto_converter::Ident* release_ident_2();
  ::css_proto_converter::Ident* mutable_ident_2();
  void set_allocated_ident_2(::css_proto_converter::Ident* ident_2);

  // optional .css_proto_converter.Ident ident_1 = 1;
  bool has_ident_1() const;
  void clear_ident_1();
  static const int kIdent1FieldNumber = 1;
  private:
  const ::css_proto_converter::Ident& _internal_ident_1() const;
  public:
  const ::css_proto_converter::Ident& ident_1() const;
  ::css_proto_converter::Ident* release_ident_1();
  ::css_proto_converter::Ident* mutable_ident_1();
  void set_allocated_ident_1(::css_proto_converter::Ident* ident_1);

  // optional .css_proto_converter.FunctionToken function_token = 2;
  bool has_function_token() const;
  void clear_function_token();
  static const int kFunctionTokenFieldNumber = 2;
  private:
  const ::css_proto_converter::FunctionToken& _internal_function_token() const;
  public:
  const ::css_proto_converter::FunctionToken& function_token() const;
  ::css_proto_converter::FunctionToken* release_function_token();
  ::css_proto_converter::FunctionToken* mutable_function_token();
  void set_allocated_function_token(::css_proto_converter::FunctionToken* function_token);

  void clear_rhs();
  RhsCase rhs_case() const;
  // @@protoc_insertion_point(class_scope:css_proto_converter.Pseudo)
 private:
  void set_has_ident_1();
  void set_has_function_token();
  void set_has_ident_2();
  void clear_has_ident_2();

  inline bool has_rhs() const;
  inline void clear_has_rhs();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::css_proto_converter::Ident* ident_2_;
  union RhsUnion {
    RhsUnion() {}
    ::css_proto_converter::Ident* ident_1_;
    ::css_proto_converter::FunctionToken* function_token_;
  } rhs_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_css_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Declaration : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:css_proto_converter.Declaration) */ {
 public:
  Declaration();
  virtual ~Declaration();

  Declaration(const Declaration& from);

  inline Declaration& operator=(const Declaration& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Declaration(Declaration&& from) noexcept
    : Declaration() {
    *this = ::std::move(from);
  }

  inline Declaration& operator=(Declaration&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Declaration& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Declaration* internal_default_instance() {
    return reinterpret_cast<const Declaration*>(
               &_Declaration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(Declaration* other);
  friend void swap(Declaration& a, Declaration& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Declaration* New() const final {
    return CreateMaybeMessage<Declaration>(NULL);
  }

  Declaration* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Declaration>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Declaration& from);
  void MergeFrom(const Declaration& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Declaration* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .css_proto_converter.PropertyAndValue property_and_value = 1;
  bool has_property_and_value() const;
  void clear_property_and_value();
  static const int kPropertyAndValueFieldNumber = 1;
  private:
  const ::css_proto_converter::PropertyAndValue& _internal_property_and_value() const;
  public:
  const ::css_proto_converter::PropertyAndValue& property_and_value() const;
  ::css_proto_converter::PropertyAndValue* release_property_and_value();
  ::css_proto_converter::PropertyAndValue* mutable_property_and_value();
  void set_allocated_property_and_value(::css_proto_converter::PropertyAndValue* property_and_value);

  // @@protoc_insertion_point(class_scope:css_proto_converter.Declaration)
 private:
  void set_has_property_and_value();
  void clear_has_property_and_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::css_proto_converter::PropertyAndValue* property_and_value_;
  friend struct ::protobuf_css_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PropertyAndValue : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:css_proto_converter.PropertyAndValue) */ {
 public:
  PropertyAndValue();
  virtual ~PropertyAndValue();

  PropertyAndValue(const PropertyAndValue& from);

  inline PropertyAndValue& operator=(const PropertyAndValue& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PropertyAndValue(PropertyAndValue&& from) noexcept
    : PropertyAndValue() {
    *this = ::std::move(from);
  }

  inline PropertyAndValue& operator=(PropertyAndValue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PropertyAndValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PropertyAndValue* internal_default_instance() {
    return reinterpret_cast<const PropertyAndValue*>(
               &_PropertyAndValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(PropertyAndValue* other);
  friend void swap(PropertyAndValue& a, PropertyAndValue& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PropertyAndValue* New() const final {
    return CreateMaybeMessage<PropertyAndValue>(NULL);
  }

  PropertyAndValue* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PropertyAndValue>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PropertyAndValue& from);
  void MergeFrom(const PropertyAndValue& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PropertyAndValue* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PropertyAndValue_Prio Prio;
  static const Prio UNSET =
    PropertyAndValue_Prio_UNSET;
  static const Prio IS_SET =
    PropertyAndValue_Prio_IS_SET;
  static inline bool Prio_IsValid(int value) {
    return PropertyAndValue_Prio_IsValid(value);
  }
  static const Prio Prio_MIN =
    PropertyAndValue_Prio_Prio_MIN;
  static const Prio Prio_MAX =
    PropertyAndValue_Prio_Prio_MAX;
  static const int Prio_ARRAYSIZE =
    PropertyAndValue_Prio_Prio_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Prio_descriptor() {
    return PropertyAndValue_Prio_descriptor();
  }
  static inline const ::std::string& Prio_Name(Prio value) {
    return PropertyAndValue_Prio_Name(value);
  }
  static inline bool Prio_Parse(const ::std::string& name,
      Prio* value) {
    return PropertyAndValue_Prio_Parse(name, value);
  }

  typedef PropertyAndValue_ValueId ValueId;
  static const ValueId ALL =
    PropertyAndValue_ValueId_ALL;
  static const ValueId DYNAMIC =
    PropertyAndValue_ValueId_DYNAMIC;
  static const ValueId YELLOW =
    PropertyAndValue_ValueId_YELLOW;
  static const ValueId GRAYTEXT =
    PropertyAndValue_ValueId_GRAYTEXT;
  static const ValueId COLOR_DODGE =
    PropertyAndValue_ValueId_COLOR_DODGE;
  static const ValueId DARKSEAGREEN =
    PropertyAndValue_ValueId_DARKSEAGREEN;
  static const ValueId DISC =
    PropertyAndValue_ValueId_DISC;
  static const ValueId EXTRA_CONDENSED =
    PropertyAndValue_ValueId_EXTRA_CONDENSED;
  static const ValueId HANGING =
    PropertyAndValue_ValueId_HANGING;
  static const ValueId STEP_MIDDLE =
    PropertyAndValue_ValueId_STEP_MIDDLE;
  static const ValueId MENULIST =
    PropertyAndValue_ValueId_MENULIST;
  static const ValueId ROW =
    PropertyAndValue_ValueId_ROW;
  static const ValueId PRE_WRAP =
    PropertyAndValue_ValueId_PRE_WRAP;
  static const ValueId INLINE_BLOCK =
    PropertyAndValue_ValueId_INLINE_BLOCK;
  static const ValueId STEP_START =
    PropertyAndValue_ValueId_STEP_START;
  static const ValueId ISOLATE_OVERRIDE =
    PropertyAndValue_ValueId_ISOLATE_OVERRIDE;
  static const ValueId SWAP =
    PropertyAndValue_ValueId_SWAP;
  static const ValueId RTL =
    PropertyAndValue_ValueId_RTL;
  static const ValueId CRIMSON =
    PropertyAndValue_ValueId_CRIMSON;
  static const ValueId TB =
    PropertyAndValue_ValueId_TB;
  static const ValueId COMMON_LIGATURES =
    PropertyAndValue_ValueId_COMMON_LIGATURES;
  static const ValueId _WEBKIT_MIN_CONTENT =
    PropertyAndValue_ValueId__WEBKIT_MIN_CONTENT;
  static const ValueId BROWN =
    PropertyAndValue_ValueId_BROWN;
  static const ValueId KHMER =
    PropertyAndValue_ValueId_KHMER;
  static const ValueId INFINITE =
    PropertyAndValue_ValueId_INFINITE;
  static const ValueId TABLE_HEADER_GROUP =
    PropertyAndValue_ValueId_TABLE_HEADER_GROUP;
  static const ValueId BEFORE_EDGE =
    PropertyAndValue_ValueId_BEFORE_EDGE;
  static const ValueId READ_WRITE =
    PropertyAndValue_ValueId_READ_WRITE;
  static const ValueId RL =
    PropertyAndValue_ValueId_RL;
  static const ValueId WAVY =
    PropertyAndValue_ValueId_WAVY;
  static const ValueId PROPORTIONAL_WIDTH =
    PropertyAndValue_ValueId_PROPORTIONAL_WIDTH;
  static const ValueId NO_DROP =
    PropertyAndValue_ValueId_NO_DROP;
  static const ValueId CYAN =
    PropertyAndValue_ValueId_CYAN;
  static const ValueId DIFFERENCE =
    PropertyAndValue_ValueId_DIFFERENCE;
  static const ValueId EXACT =
    PropertyAndValue_ValueId_EXACT;
  static const ValueId SQUARE_BUTTON =
    PropertyAndValue_ValueId_SQUARE_BUTTON;
  static const ValueId SKYBLUE =
    PropertyAndValue_ValueId_SKYBLUE;
  static const ValueId _WEBKIT_ISOLATE_OVERRIDE =
    PropertyAndValue_ValueId__WEBKIT_ISOLATE_OVERRIDE;
  static const ValueId TABLE_ROW_GROUP =
    PropertyAndValue_ValueId_TABLE_ROW_GROUP;
  static const ValueId DARKGRAY =
    PropertyAndValue_ValueId_DARKGRAY;
  static const ValueId BUTTON =
    PropertyAndValue_ValueId_BUTTON;
  static const ValueId ETHIOPIC_HALEHAME_AM =
    PropertyAndValue_ValueId_ETHIOPIC_HALEHAME_AM;
  static const ValueId LARGE =
    PropertyAndValue_ValueId_LARGE;
  static const ValueId LIGHTPINK =
    PropertyAndValue_ValueId_LIGHTPINK;
  static const ValueId CROSSHAIR =
    PropertyAndValue_ValueId_CROSSHAIR;
  static const ValueId TEAL =
    PropertyAndValue_ValueId_TEAL;
  static const ValueId FILL_BOX =
    PropertyAndValue_ValueId_FILL_BOX;
  static const ValueId SMALL =
    PropertyAndValue_ValueId_SMALL;
  static const ValueId MEDIA_SLIDERTHUMB =
    PropertyAndValue_ValueId_MEDIA_SLIDERTHUMB;
  static const ValueId ROUND =
    PropertyAndValue_ValueId_ROUND;
  static const ValueId _INTERNAL_MEDIA_SUBTITLES_ICON =
    PropertyAndValue_ValueId__INTERNAL_MEDIA_SUBTITLES_ICON;
  static const ValueId MEDIA_PLAY_BUTTON =
    PropertyAndValue_ValueId_MEDIA_PLAY_BUTTON;
  static const ValueId SMALLER =
    PropertyAndValue_ValueId_SMALLER;
  static const ValueId JIS04 =
    PropertyAndValue_ValueId_JIS04;
  static const ValueId LR_TB =
    PropertyAndValue_ValueId_LR_TB;
  static const ValueId LIGHTGOLDENRODYELLOW =
    PropertyAndValue_ValueId_LIGHTGOLDENRODYELLOW;
  static const ValueId LAVENDER =
    PropertyAndValue_ValueId_LAVENDER;
  static const ValueId ULTRA_EXPANDED =
    PropertyAndValue_ValueId_ULTRA_EXPANDED;
  static const ValueId DIMGREY =
    PropertyAndValue_ValueId_DIMGREY;
  static const ValueId DIAGONAL_FRACTIONS =
    PropertyAndValue_ValueId_DIAGONAL_FRACTIONS;
  static const ValueId BLUE =
    PropertyAndValue_ValueId_BLUE;
  static const ValueId XOR =
    PropertyAndValue_ValueId_XOR;
  static const ValueId SUB =
    PropertyAndValue_ValueId_SUB;
  static const ValueId TELUGU =
    PropertyAndValue_ValueId_TELUGU;
  static const ValueId CRISPEDGES =
    PropertyAndValue_ValueId_CRISPEDGES;
  static const ValueId _WEBKIT_MINI_CONTROL =
    PropertyAndValue_ValueId__WEBKIT_MINI_CONTROL;
  static const ValueId ZOOM_OUT =
    PropertyAndValue_ValueId_ZOOM_OUT;
  static const ValueId SEARCHFIELD =
    PropertyAndValue_ValueId_SEARCHFIELD;
  static const ValueId CELL =
    PropertyAndValue_ValueId_CELL;
  static const ValueId GUJARATI =
    PropertyAndValue_ValueId_GUJARATI;
  static const ValueId ABOVE =
    PropertyAndValue_ValueId_ABOVE;
  static const ValueId NO_PUNCTUATION =
    PropertyAndValue_ValueId_NO_PUNCTUATION;
  static const ValueId NEW =
    PropertyAndValue_ValueId_NEW;
  static const ValueId FILLED =
    PropertyAndValue_ValueId_FILLED;
  static const ValueId USE_SCRIPT =
    PropertyAndValue_ValueId_USE_SCRIPT;
  static const ValueId CONDENSED =
    PropertyAndValue_ValueId_CONDENSED;
  static const ValueId LOOSE =
    PropertyAndValue_ValueId_LOOSE;
  static const ValueId SOURCE_OUT =
    PropertyAndValue_ValueId_SOURCE_OUT;
  static const ValueId OBJECTS =
    PropertyAndValue_ValueId_OBJECTS;
  static const ValueId SLIDER_HORIZONTAL =
    PropertyAndValue_ValueId_SLIDER_HORIZONTAL;
  static const ValueId ROW_RESIZE =
    PropertyAndValue_ValueId_ROW_RESIZE;
  static const ValueId BREAK_ALL =
    PropertyAndValue_ValueId_BREAK_ALL;
  static const ValueId WAIT =
    PropertyAndValue_ValueId_WAIT;
  static const ValueId MEDIA_EXIT_FULLSCREEN_BUTTON =
    PropertyAndValue_ValueId_MEDIA_EXIT_FULLSCREEN_BUTTON;
  static const ValueId KOREAN_HANGUL_FORMAL =
    PropertyAndValue_ValueId_KOREAN_HANGUL_FORMAL;
  static const ValueId FLORALWHITE =
    PropertyAndValue_ValueId_FLORALWHITE;
  static const ValueId RESET_SIZE =
    PropertyAndValue_ValueId_RESET_SIZE;
  static const ValueId ZOOM_IN =
    PropertyAndValue_ValueId_ZOOM_IN;
  static const ValueId _WEBKIT_GRABBING =
    PropertyAndValue_ValueId__WEBKIT_GRABBING;
  static const ValueId LARGER =
    PropertyAndValue_ValueId_LARGER;
  static const ValueId MAX_CONTENT =
    PropertyAndValue_ValueId_MAX_CONTENT;
  static const ValueId SRGB =
    PropertyAndValue_ValueId_SRGB;
  static const ValueId LITERAL_PUNCTUATION =
    PropertyAndValue_ValueId_LITERAL_PUNCTUATION;
  static const ValueId WINDOWFRAME =
    PropertyAndValue_ValueId_WINDOWFRAME;
  static const ValueId SUBPIXEL_ANTIALIASED =
    PropertyAndValue_ValueId_SUBPIXEL_ANTIALIASED;
  static const ValueId BUTTONHIGHLIGHT =
    PropertyAndValue_ValueId_BUTTONHIGHLIGHT;
  static const ValueId HUE =
    PropertyAndValue_ValueId_HUE;
  static const ValueId PIXELATED =
    PropertyAndValue_ValueId_PIXELATED;
  static const ValueId STICKY =
    PropertyAndValue_ValueId_STICKY;
  static const ValueId GREENYELLOW =
    PropertyAndValue_ValueId_GREENYELLOW;
  static const ValueId LINEARRGB =
    PropertyAndValue_ValueId_LINEARRGB;
  static const ValueId LIGHTSEAGREEN =
    PropertyAndValue_ValueId_LIGHTSEAGREEN;
  static const ValueId LOGICAL =
    PropertyAndValue_ValueId_LOGICAL;
  static const ValueId _WEBKIT_RIGHT =
    PropertyAndValue_ValueId__WEBKIT_RIGHT;
  static const ValueId SIENNA =
    PropertyAndValue_ValueId_SIENNA;
  static const ValueId FLOW_ROOT =
    PropertyAndValue_ValueId_FLOW_ROOT;
  static const ValueId OPTIMIZESPEED =
    PropertyAndValue_ValueId_OPTIMIZESPEED;
  static const ValueId KOREAN_HANJA_FORMAL =
    PropertyAndValue_ValueId_KOREAN_HANJA_FORMAL;
  static const ValueId NOWRAP =
    PropertyAndValue_ValueId_NOWRAP;
  static const ValueId X_SMALL =
    PropertyAndValue_ValueId_X_SMALL;
  static const ValueId LANDSCAPE =
    PropertyAndValue_ValueId_LANDSCAPE;
  static const ValueId LIME =
    PropertyAndValue_ValueId_LIME;
  static const ValueId X_LARGE =
    PropertyAndValue_ValueId_X_LARGE;
  static const ValueId NS_RESIZE =
    PropertyAndValue_ValueId_NS_RESIZE;
  static const ValueId APPWORKSPACE =
    PropertyAndValue_ValueId_APPWORKSPACE;
  static const ValueId PERU =
    PropertyAndValue_ValueId_PERU;
  static const ValueId ALL_PETITE_CAPS =
    PropertyAndValue_ValueId_ALL_PETITE_CAPS;
  static const ValueId BLACK =
    PropertyAndValue_ValueId_BLACK;
  static const ValueId XX_SMALL =
    PropertyAndValue_ValueId_XX_SMALL;
  static const ValueId ALL_SCROLL =
    PropertyAndValue_ValueId_ALL_SCROLL;
  static const ValueId DARKSLATEGRAY =
    PropertyAndValue_ValueId_DARKSLATEGRAY;
  static const ValueId FLAT =
    PropertyAndValue_ValueId_FLAT;
  static const ValueId GEORGIAN =
    PropertyAndValue_ValueId_GEORGIAN;
  static const ValueId UNDER =
    PropertyAndValue_ValueId_UNDER;
  static const ValueId LEMONCHIFFON =
    PropertyAndValue_ValueId_LEMONCHIFFON;
  static const ValueId CHOCOLATE =
    PropertyAndValue_ValueId_CHOCOLATE;
  static const ValueId PRE_LINE =
    PropertyAndValue_ValueId_PRE_LINE;
  static const ValueId CONTEXT_MENU =
    PropertyAndValue_ValueId_CONTEXT_MENU;
  static const ValueId DARKGREY =
    PropertyAndValue_ValueId_DARKGREY;
  static const ValueId VIEW_BOX =
    PropertyAndValue_ValueId_VIEW_BOX;
  static const ValueId OLIVE =
    PropertyAndValue_ValueId_OLIVE;
  static const ValueId _WEBKIT_PLAINTEXT =
    PropertyAndValue_ValueId__WEBKIT_PLAINTEXT;
  static const ValueId EXTRA_EXPANDED =
    PropertyAndValue_ValueId_EXTRA_EXPANDED;
  static const ValueId ANTIQUEWHITE =
    PropertyAndValue_ValueId_ANTIQUEWHITE;
  static const ValueId NONE =
    PropertyAndValue_ValueId_NONE;
  static const ValueId MOCCASIN =
    PropertyAndValue_ValueId_MOCCASIN;
  static const ValueId LOCAL =
    PropertyAndValue_ValueId_LOCAL;
  static const ValueId STROKE =
    PropertyAndValue_ValueId_STROKE;
  static const ValueId DARKSLATEBLUE =
    PropertyAndValue_ValueId_DARKSLATEBLUE;
  static const ValueId LIGHTSKYBLUE =
    PropertyAndValue_ValueId_LIGHTSKYBLUE;
  static const ValueId CONTENT_BOX =
    PropertyAndValue_ValueId_CONTENT_BOX;
  static const ValueId THIN =
    PropertyAndValue_ValueId_THIN;
  static const ValueId DEEPPINK =
    PropertyAndValue_ValueId_DEEPPINK;
  static const ValueId SPELL_OUT =
    PropertyAndValue_ValueId_SPELL_OUT;
  static const ValueId NON_SCALING_STROKE =
    PropertyAndValue_ValueId_NON_SCALING_STROKE;
  static const ValueId SLIDER_VERTICAL =
    PropertyAndValue_ValueId_SLIDER_VERTICAL;
  static const ValueId _WEBKIT_BOX =
    PropertyAndValue_ValueId__WEBKIT_BOX;
  static const ValueId PLUM =
    PropertyAndValue_ValueId_PLUM;
  static const ValueId _INTERNAL_MEDIA_OVERLAY_CAST_OFF_BUTTON =
    PropertyAndValue_ValueId__INTERNAL_MEDIA_OVERLAY_CAST_OFF_BUTTON;
  static const ValueId INACTIVECAPTIONTEXT =
    PropertyAndValue_ValueId_INACTIVECAPTIONTEXT;
  static const ValueId DODGERBLUE =
    PropertyAndValue_ValueId_DODGERBLUE;
  static const ValueId THREEDSHADOW =
    PropertyAndValue_ValueId_THREEDSHADOW;
  static const ValueId PETITE_CAPS =
    PropertyAndValue_ValueId_PETITE_CAPS;
  static const ValueId PAUSED =
    PropertyAndValue_ValueId_PAUSED;
  static const ValueId _WEBKIT_LINK =
    PropertyAndValue_ValueId__WEBKIT_LINK;
  static const ValueId MESSAGE_BOX =
    PropertyAndValue_ValueId_MESSAGE_BOX;
  static const ValueId _INTERNAL_CENTER =
    PropertyAndValue_ValueId__INTERNAL_CENTER;
  static const ValueId TRIANGLE =
    PropertyAndValue_ValueId_TRIANGLE;
  static const ValueId MAGENTA =
    PropertyAndValue_ValueId_MAGENTA;
  static const ValueId TAN =
    PropertyAndValue_ValueId_TAN;
  static const ValueId ABSOLUTE =
    PropertyAndValue_ValueId_ABSOLUTE;
  static const ValueId PINK =
    PropertyAndValue_ValueId_PINK;
  static const ValueId HIRAGANA_IROHA =
    PropertyAndValue_ValueId_HIRAGANA_IROHA;
  static const ValueId FARTHEST_SIDE =
    PropertyAndValue_ValueId_FARTHEST_SIDE;
  static const ValueId PALEVIOLETRED =
    PropertyAndValue_ValueId_PALEVIOLETRED;
  static const ValueId CLOSE_QUOTE =
    PropertyAndValue_ValueId_CLOSE_QUOTE;
  static const ValueId THREEDLIGHTSHADOW =
    PropertyAndValue_ValueId_THREEDLIGHTSHADOW;
  static const ValueId CAPTION =
    PropertyAndValue_ValueId_CAPTION;
  static const ValueId POWDERBLUE =
    PropertyAndValue_ValueId_POWDERBLUE;
  static const ValueId TABLE_COLUMN =
    PropertyAndValue_ValueId_TABLE_COLUMN;
  static const ValueId SOURCE_ATOP =
    PropertyAndValue_ValueId_SOURCE_ATOP;
  static const ValueId HIRAGANA =
    PropertyAndValue_ValueId_HIRAGANA;
  static const ValueId UPPER_ARMENIAN =
    PropertyAndValue_ValueId_UPPER_ARMENIAN;
  static const ValueId WINDOWTEXT =
    PropertyAndValue_ValueId_WINDOWTEXT;
  static const ValueId FULL_WIDTH =
    PropertyAndValue_ValueId_FULL_WIDTH;
  static const ValueId PROGRESS_BAR_VALUE =
    PropertyAndValue_ValueId_PROGRESS_BAR_VALUE;
  static const ValueId MIDNIGHTBLUE =
    PropertyAndValue_ValueId_MIDNIGHTBLUE;
  static const ValueId INLINE_FLEX =
    PropertyAndValue_ValueId_INLINE_FLEX;
  static const ValueId ECONOMY =
    PropertyAndValue_ValueId_ECONOMY;
  static const ValueId LAO =
    PropertyAndValue_ValueId_LAO;
  static const ValueId CLONE =
    PropertyAndValue_ValueId_CLONE;
  static const ValueId AFTER =
    PropertyAndValue_ValueId_AFTER;
  static const ValueId STATUS_BAR =
    PropertyAndValue_ValueId_STATUS_BAR;
  static const ValueId LOWERCASE =
    PropertyAndValue_ValueId_LOWERCASE;
  static const ValueId MIXED =
    PropertyAndValue_ValueId_MIXED;
  static const ValueId LINE_THROUGH =
    PropertyAndValue_ValueId_LINE_THROUGH;
  static const ValueId LIGHTSLATEGRAY =
    PropertyAndValue_ValueId_LIGHTSLATEGRAY;
  static const ValueId SMALL_CAPTION =
    PropertyAndValue_ValueId_SMALL_CAPTION;
  static const ValueId INFOBACKGROUND =
    PropertyAndValue_ValueId_INFOBACKGROUND;
  static const ValueId DISCARD =
    PropertyAndValue_ValueId_DISCARD;
  static const ValueId CAPTIONTEXT =
    PropertyAndValue_ValueId_CAPTIONTEXT;
  static const ValueId END =
    PropertyAndValue_ValueId_END;
  static const ValueId _INTERNAL_INACTIVE_LIST_BOX_SELECTION_TEXT =
    PropertyAndValue_ValueId__INTERNAL_INACTIVE_LIST_BOX_SELECTION_TEXT;
  static const ValueId CAPITALIZE =
    PropertyAndValue_ValueId_CAPITALIZE;
  static const ValueId MEDIUMSEAGREEN =
    PropertyAndValue_ValueId_MEDIUMSEAGREEN;
  static const ValueId TOMATO =
    PropertyAndValue_ValueId_TOMATO;
  static const ValueId CADETBLUE =
    PropertyAndValue_ValueId_CADETBLUE;
  static const ValueId DECIMAL_LEADING_ZERO =
    PropertyAndValue_ValueId_DECIMAL_LEADING_ZERO;
  static const ValueId SANS_SERIF =
    PropertyAndValue_ValueId_SANS_SERIF;
  static const ValueId LINEN =
    PropertyAndValue_ValueId_LINEN;
  static const ValueId GREEN =
    PropertyAndValue_ValueId_GREEN;
  static const ValueId INACTIVEBORDER =
    PropertyAndValue_ValueId_INACTIVEBORDER;
  static const ValueId INLINE =
    PropertyAndValue_ValueId_INLINE;
  static const ValueId FALLBACK =
    PropertyAndValue_ValueId_FALLBACK;
  static const ValueId PEACHPUFF =
    PropertyAndValue_ValueId_PEACHPUFF;
  static const ValueId _WEBKIT_MAX_CONTENT =
    PropertyAndValue_ValueId__WEBKIT_MAX_CONTENT;
  static const ValueId PLUS_LIGHTER =
    PropertyAndValue_ValueId_PLUS_LIGHTER;
  static const ValueId CHECKBOX =
    PropertyAndValue_ValueId_CHECKBOX;
  static const ValueId HELP =
    PropertyAndValue_ValueId_HELP;
  static const ValueId OBLIQUE =
    PropertyAndValue_ValueId_OBLIQUE;
  static const ValueId MOVE =
    PropertyAndValue_ValueId_MOVE;
  static const ValueId METER =
    PropertyAndValue_ValueId_METER;
  static const ValueId LEDGER =
    PropertyAndValue_ValueId_LEDGER;
  static const ValueId SLATEGREY =
    PropertyAndValue_ValueId_SLATEGREY;
  static const ValueId MEDIA_TIME_REMAINING_DISPLAY =
    PropertyAndValue_ValueId_MEDIA_TIME_REMAINING_DISPLAY;
  static const ValueId URDU =
    PropertyAndValue_ValueId_URDU;
  static const ValueId POINTER =
    PropertyAndValue_ValueId_POINTER;
  static const ValueId BEFORE =
    PropertyAndValue_ValueId_BEFORE;
  static const ValueId DARKSLATEGREY =
    PropertyAndValue_ValueId_DARKSLATEGREY;
  static const ValueId _WEBKIT_CONTROL =
    PropertyAndValue_ValueId__WEBKIT_CONTROL;
  static const ValueId _WEBKIT_INLINE_BOX =
    PropertyAndValue_ValueId__WEBKIT_INLINE_BOX;
  static const ValueId HARD_LIGHT =
    PropertyAndValue_ValueId_HARD_LIGHT;
  static const ValueId MITER =
    PropertyAndValue_ValueId_MITER;
  static const ValueId ORIYA =
    PropertyAndValue_ValueId_ORIYA;
  static const ValueId UPPER_LATIN =
    PropertyAndValue_ValueId_UPPER_LATIN;
  static const ValueId WINDOW =
    PropertyAndValue_ValueId_WINDOW;
  static const ValueId MEDIUMBLUE =
    PropertyAndValue_ValueId_MEDIUMBLUE;
  static const ValueId LR =
    PropertyAndValue_ValueId_LR;
  static const ValueId ORANGE =
    PropertyAndValue_ValueId_ORANGE;
  static const ValueId HIDDEN =
    PropertyAndValue_ValueId_HIDDEN;
  static const ValueId _INTERNAL_ACTIVE_LIST_BOX_SELECTION =
    PropertyAndValue_ValueId__INTERNAL_ACTIVE_LIST_BOX_SELECTION;
  static const ValueId BOLDER =
    PropertyAndValue_ValueId_BOLDER;
  static const ValueId _WEBKIT_CENTER =
    PropertyAndValue_ValueId__WEBKIT_CENTER;
  static const ValueId SAFE =
    PropertyAndValue_ValueId_SAFE;
  static const ValueId HIGHLIGHTTEXT =
    PropertyAndValue_ValueId_HIGHLIGHTTEXT;
  static const ValueId ACCUMULATE =
    PropertyAndValue_ValueId_ACCUMULATE;
  static const ValueId FLEX_END =
    PropertyAndValue_ValueId_FLEX_END;
  static const ValueId TRANSPARENT =
    PropertyAndValue_ValueId_TRANSPARENT;
  static const ValueId _INTERNAL_MEDIA_REMOTING_CAST_ICON =
    PropertyAndValue_ValueId__INTERNAL_MEDIA_REMOTING_CAST_ICON;
  static const ValueId GOLDENROD =
    PropertyAndValue_ValueId_GOLDENROD;
  static const ValueId HISTORICAL_LIGATURES =
    PropertyAndValue_ValueId_HISTORICAL_LIGATURES;
  static const ValueId DARKVIOLET =
    PropertyAndValue_ValueId_DARKVIOLET;
  static const ValueId ALWAYS =
    PropertyAndValue_ValueId_ALWAYS;
  static const ValueId DECIMAL =
    PropertyAndValue_ValueId_DECIMAL;
  static const ValueId BLOCK_AXIS =
    PropertyAndValue_ValueId_BLOCK_AXIS;
  static const ValueId SCROLLBAR =
    PropertyAndValue_ValueId_SCROLLBAR;
  static const ValueId EW_RESIZE =
    PropertyAndValue_ValueId_EW_RESIZE;
  static const ValueId DARKMAGENTA =
    PropertyAndValue_ValueId_DARKMAGENTA;
  static const ValueId NOT_ALLOWED =
    PropertyAndValue_ValueId_NOT_ALLOWED;
  static const ValueId EASE_IN =
    PropertyAndValue_ValueId_EASE_IN;
  static const ValueId TABLE_COLUMN_GROUP =
    PropertyAndValue_ValueId_TABLE_COLUMN_GROUP;
  static const ValueId SQUARE =
    PropertyAndValue_ValueId_SQUARE;
  static const ValueId NO_CONTEXTUAL =
    PropertyAndValue_ValueId_NO_CONTEXTUAL;
  static const ValueId _WEBKIT_FILL_AVAILABLE =
    PropertyAndValue_ValueId__WEBKIT_FILL_AVAILABLE;
  static const ValueId FRAMES =
    PropertyAndValue_ValueId_FRAMES;
  static const ValueId PERSIAN =
    PropertyAndValue_ValueId_PERSIAN;
  static const ValueId STATIC =
    PropertyAndValue_ValueId_STATIC;
  static const ValueId NAVY =
    PropertyAndValue_ValueId_NAVY;
  static const ValueId VISIBLEPAINTED =
    PropertyAndValue_ValueId_VISIBLEPAINTED;
  static const ValueId THICK =
    PropertyAndValue_ValueId_THICK;
  static const ValueId SIMP_CHINESE_FORMAL =
    PropertyAndValue_ValueId_SIMP_CHINESE_FORMAL;
  static const ValueId GHOSTWHITE =
    PropertyAndValue_ValueId_GHOSTWHITE;
  static const ValueId SPACE =
    PropertyAndValue_ValueId_SPACE;
  static const ValueId DARKKHAKI =
    PropertyAndValue_ValueId_DARKKHAKI;
  static const ValueId KEEP_ALL =
    PropertyAndValue_ValueId_KEEP_ALL;
  static const ValueId CONTENT =
    PropertyAndValue_ValueId_CONTENT;
  static const ValueId _INTERNAL_MEDIA_DOWNLOAD_BUTTON =
    PropertyAndValue_ValueId__INTERNAL_MEDIA_DOWNLOAD_BUTTON;
  static const ValueId UPPER_ROMAN =
    PropertyAndValue_ValueId_UPPER_ROMAN;
  static const ValueId CORNSILK =
    PropertyAndValue_ValueId_CORNSILK;
  static const ValueId RED =
    PropertyAndValue_ValueId_RED;
  static const ValueId NO_CHANGE =
    PropertyAndValue_ValueId_NO_CHANGE;
  static const ValueId LINEAR =
    PropertyAndValue_ValueId_LINEAR;
  static const ValueId _INTERNAL_MEDIA_CONTROL =
    PropertyAndValue_ValueId__INTERNAL_MEDIA_CONTROL;
  static const ValueId SIDEWAYS =
    PropertyAndValue_ValueId_SIDEWAYS;
  static const ValueId CONTAIN =
    PropertyAndValue_ValueId_CONTAIN;
  static const ValueId KATAKANA_IROHA =
    PropertyAndValue_ValueId_KATAKANA_IROHA;
  static const ValueId STEELBLUE =
    PropertyAndValue_ValueId_STEELBLUE;
  static const ValueId DOUBLE_CIRCLE =
    PropertyAndValue_ValueId_DOUBLE_CIRCLE;
  static const ValueId ANTIALIASED =
    PropertyAndValue_ValueId_ANTIALIASED;
  static const ValueId ALICEBLUE =
    PropertyAndValue_ValueId_ALICEBLUE;
  static const ValueId LIGHTSLATEGREY =
    PropertyAndValue_ValueId_LIGHTSLATEGREY;
  static const ValueId GEOMETRICPRECISION =
    PropertyAndValue_ValueId_GEOMETRICPRECISION;
  static const ValueId GAINSBORO =
    PropertyAndValue_ValueId_GAINSBORO;
  static const ValueId INLINE_TABLE =
    PropertyAndValue_ValueId_INLINE_TABLE;
  static const ValueId LTR =
    PropertyAndValue_ValueId_LTR;
  static const ValueId BACKWARDS =
    PropertyAndValue_ValueId_BACKWARDS;
  static const ValueId S_RESIZE =
    PropertyAndValue_ValueId_S_RESIZE;
  static const ValueId LIGHTGREY =
    PropertyAndValue_ValueId_LIGHTGREY;
  static const ValueId MEDIA_MUTE_BUTTON =
    PropertyAndValue_ValueId_MEDIA_MUTE_BUTTON;
  static const ValueId LISTITEM =
    PropertyAndValue_ValueId_LISTITEM;
  static const ValueId MISTYROSE =
    PropertyAndValue_ValueId_MISTYROSE;
  static const ValueId DARKSALMON =
    PropertyAndValue_ValueId_DARKSALMON;
  static const ValueId SIDEWAYS_RIGHT =
    PropertyAndValue_ValueId_SIDEWAYS_RIGHT;
  static const ValueId JIS83 =
    PropertyAndValue_ValueId_JIS83;
  static const ValueId MEDIUMSPRINGGREEN =
    PropertyAndValue_ValueId_MEDIUMSPRINGGREEN;
  static const ValueId CAPS_LOCK_INDICATOR =
    PropertyAndValue_ValueId_CAPS_LOCK_INDICATOR;
  static const ValueId SLIDERTHUMB_HORIZONTAL =
    PropertyAndValue_ValueId_SLIDERTHUMB_HORIZONTAL;
  static const ValueId FORWARDS =
    PropertyAndValue_ValueId_FORWARDS;
  static const ValueId UPPER_ALPHA =
    PropertyAndValue_ValueId_UPPER_ALPHA;
  static const ValueId BLINK =
    PropertyAndValue_ValueId_BLINK;
  static const ValueId FANTASY =
    PropertyAndValue_ValueId_FANTASY;
  static const ValueId SIMPLIFIED =
    PropertyAndValue_ValueId_SIMPLIFIED;
  static const ValueId ORANGERED =
    PropertyAndValue_ValueId_ORANGERED;
  static const ValueId NAVAJOWHITE =
    PropertyAndValue_ValueId_NAVAJOWHITE;
  static const ValueId OPEN =
    PropertyAndValue_ValueId_OPEN;
  static const ValueId HORIZONTAL =
    PropertyAndValue_ValueId_HORIZONTAL;
  static const ValueId SLATEGRAY =
    PropertyAndValue_ValueId_SLATEGRAY;
  static const ValueId ACTIVECAPTION =
    PropertyAndValue_ValueId_ACTIVECAPTION;
  static const ValueId KOREAN_HANJA_INFORMAL =
    PropertyAndValue_ValueId_KOREAN_HANJA_INFORMAL;
  static const ValueId STRICT =
    PropertyAndValue_ValueId_STRICT;
  static const ValueId LIGHTCYAN =
    PropertyAndValue_ValueId_LIGHTCYAN;
  static const ValueId TOP =
    PropertyAndValue_ValueId_TOP;
  static const ValueId _WEBKIT_PICTOGRAPH =
    PropertyAndValue_ValueId__WEBKIT_PICTOGRAPH;
  static const ValueId WHITE =
    PropertyAndValue_ValueId_WHITE;
  static const ValueId TEXT_AFTER_EDGE =
    PropertyAndValue_ValueId_TEXT_AFTER_EDGE;
  static const ValueId LIGHTGRAY =
    PropertyAndValue_ValueId_LIGHTGRAY;
  static const ValueId COLLAPSE =
    PropertyAndValue_ValueId_COLLAPSE;
  static const ValueId HOVER =
    PropertyAndValue_ValueId_HOVER;
  static const ValueId _WEBKIT_OPTIMIZE_CONTRAST =
    PropertyAndValue_ValueId__WEBKIT_OPTIMIZE_CONTRAST;
  static const ValueId PADDING =
    PropertyAndValue_ValueId_PADDING;
  static const ValueId BUTT =
    PropertyAndValue_ValueId_BUTT;
  static const ValueId OFF =
    PropertyAndValue_ValueId_OFF;
  static const ValueId THAI =
    PropertyAndValue_ValueId_THAI;
  static const ValueId COPY =
    PropertyAndValue_ValueId_COPY;
  static const ValueId HOTPINK =
    PropertyAndValue_ValueId_HOTPINK;
  static const ValueId DOUBLE =
    PropertyAndValue_ValueId_DOUBLE;
  static const ValueId LOWER_GREEK =
    PropertyAndValue_ValueId_LOWER_GREEK;
  static const ValueId GREY =
    PropertyAndValue_ValueId_GREY;
  static const ValueId MEDIA_VOLUME_SLIDER_CONTAINER =
    PropertyAndValue_ValueId_MEDIA_VOLUME_SLIDER_CONTAINER;
  static const ValueId _WEBKIT_INLINE_FLEX =
    PropertyAndValue_ValueId__WEBKIT_INLINE_FLEX;
  static const ValueId SPACE_EVENLY =
    PropertyAndValue_ValueId_SPACE_EVENLY;
  static const ValueId ACTIVEBORDER =
    PropertyAndValue_ValueId_ACTIVEBORDER;
  static const ValueId BROWSER =
    PropertyAndValue_ValueId_BROWSER;
  static const ValueId PRE =
    PropertyAndValue_ValueId_PRE;
  static const ValueId UNICASE =
    PropertyAndValue_ValueId_UNICASE;
  static const ValueId SIMP_CHINESE_INFORMAL =
    PropertyAndValue_ValueId_SIMP_CHINESE_INFORMAL;
  static const ValueId CLIP =
    PropertyAndValue_ValueId_CLIP;
  static const ValueId CLOSEST_CORNER =
    PropertyAndValue_ValueId_CLOSEST_CORNER;
  static const ValueId PLAINTEXT =
    PropertyAndValue_ValueId_PLAINTEXT;
  static const ValueId NO_REPEAT =
    PropertyAndValue_ValueId_NO_REPEAT;
  static const ValueId TEXT_TOP =
    PropertyAndValue_ValueId_TEXT_TOP;
  static const ValueId JIS78 =
    PropertyAndValue_ValueId_JIS78;
  static const ValueId XX_LARGE =
    PropertyAndValue_ValueId_XX_LARGE;
  static const ValueId RL_TB =
    PropertyAndValue_ValueId_RL_TB;
  static const ValueId TABLE_ROW =
    PropertyAndValue_ValueId_TABLE_ROW;
  static const ValueId MEDIUM =
    PropertyAndValue_ValueId_MEDIUM;
  static const ValueId MONGOLIAN =
    PropertyAndValue_ValueId_MONGOLIAN;
  static const ValueId KATAKANA =
    PropertyAndValue_ValueId_KATAKANA;
  static const ValueId ELEMENT =
    PropertyAndValue_ValueId_ELEMENT;
  static const ValueId BORDER =
    PropertyAndValue_ValueId_BORDER;
  static const ValueId ROSYBROWN =
    PropertyAndValue_ValueId_ROSYBROWN;
  static const ValueId PROGRESS_BAR =
    PropertyAndValue_ValueId_PROGRESS_BAR;
  static const ValueId WHITESMOKE =
    PropertyAndValue_ValueId_WHITESMOKE;
  static const ValueId LIGHTBLUE =
    PropertyAndValue_ValueId_LIGHTBLUE;
  static const ValueId _WEBKIT_LEFT =
    PropertyAndValue_ValueId__WEBKIT_LEFT;
  static const ValueId NO_COMMON_LIGATURES =
    PropertyAndValue_ValueId_NO_COMMON_LIGATURES;
  static const ValueId LISTBOX =
    PropertyAndValue_ValueId_LISTBOX;
  static const ValueId ISOLATE =
    PropertyAndValue_ValueId_ISOLATE;
  static const ValueId SNOW =
    PropertyAndValue_ValueId_SNOW;
  static const ValueId STEP_END =
    PropertyAndValue_ValueId_STEP_END;
  static const ValueId ETHIOPIC_HALEHAME_TI_ER =
    PropertyAndValue_ValueId_ETHIOPIC_HALEHAME_TI_ER;
  static const ValueId ETHIOPIC_HALEHAME_TI_ET =
    PropertyAndValue_ValueId_ETHIOPIC_HALEHAME_TI_ET;
  static const ValueId MULTIPLE =
    PropertyAndValue_ValueId_MULTIPLE;
  static const ValueId _INTERNAL_INACTIVE_LIST_BOX_SELECTION =
    PropertyAndValue_ValueId__INTERNAL_INACTIVE_LIST_BOX_SELECTION;
  static const ValueId NORMAL =
    PropertyAndValue_ValueId_NORMAL;
  static const ValueId BLUEVIOLET =
    PropertyAndValue_ValueId_BLUEVIOLET;
  static const ValueId SALMON =
    PropertyAndValue_ValueId_SALMON;
  static const ValueId LOWER_ALPHA =
    PropertyAndValue_ValueId_LOWER_ALPHA;
  static const ValueId OLDLACE =
    PropertyAndValue_ValueId_OLDLACE;
  static const ValueId LETTER =
    PropertyAndValue_ValueId_LETTER;
  static const ValueId BORDER_BOX =
    PropertyAndValue_ValueId_BORDER_BOX;
  static const ValueId ALPHA =
    PropertyAndValue_ValueId_ALPHA;
  static const ValueId TIBETAN =
    PropertyAndValue_ValueId_TIBETAN;
  static const ValueId ICON =
    PropertyAndValue_ValueId_ICON;
  static const ValueId FLEX_START =
    PropertyAndValue_ValueId_FLEX_START;
  static const ValueId TEXTAREA =
    PropertyAndValue_ValueId_TEXTAREA;
  static const ValueId W_RESIZE =
    PropertyAndValue_ValueId_W_RESIZE;
  static const ValueId CLEAR =
    PropertyAndValue_ValueId_CLEAR;
  static const ValueId COVER =
    PropertyAndValue_ValueId_COVER;
  static const ValueId FARTHEST_CORNER =
    PropertyAndValue_ValueId_FARTHEST_CORNER;
  static const ValueId MENULIST_TEXTFIELD =
    PropertyAndValue_ValueId_MENULIST_TEXTFIELD;
  static const ValueId TRADITIONAL =
    PropertyAndValue_ValueId_TRADITIONAL;
  static const ValueId LEFT =
    PropertyAndValue_ValueId_LEFT;
  static const ValueId DOT =
    PropertyAndValue_ValueId_DOT;
  static const ValueId LUMINANCE =
    PropertyAndValue_ValueId_LUMINANCE;
  static const ValueId GOLD =
    PropertyAndValue_ValueId_GOLD;
  static const ValueId SHOW =
    PropertyAndValue_ValueId_SHOW;
  static const ValueId TEXT =
    PropertyAndValue_ValueId_TEXT;
  static const ValueId _WEBKIT_MATCH_PARENT =
    PropertyAndValue_ValueId__WEBKIT_MATCH_PARENT;
  static const ValueId RADIO =
    PropertyAndValue_ValueId_RADIO;
  static const ValueId CAMBODIAN =
    PropertyAndValue_ValueId_CAMBODIAN;
  static const ValueId REPEAT_X =
    PropertyAndValue_ValueId_REPEAT_X;
  static const ValueId REPEAT_Y =
    PropertyAndValue_ValueId_REPEAT_Y;
  static const ValueId FINE =
    PropertyAndValue_ValueId_FINE;
  static const ValueId TEXTFIELD =
    PropertyAndValue_ValueId_TEXTFIELD;
  static const ValueId FROM_IMAGE =
    PropertyAndValue_ValueId_FROM_IMAGE;
  static const ValueId LINING_NUMS =
    PropertyAndValue_ValueId_LINING_NUMS;
  static const ValueId MENU =
    PropertyAndValue_ValueId_MENU;
  static const ValueId PROPORTIONAL_NUMS =
    PropertyAndValue_ValueId_PROPORTIONAL_NUMS;
  static const ValueId SOURCE_OVER =
    PropertyAndValue_ValueId_SOURCE_OVER;
  static const ValueId NE_RESIZE =
    PropertyAndValue_ValueId_NE_RESIZE;
  static const ValueId PAPAYAWHIP =
    PropertyAndValue_ValueId_PAPAYAWHIP;
  static const ValueId SOURCE_IN =
    PropertyAndValue_ValueId_SOURCE_IN;
  static const ValueId SE_RESIZE =
    PropertyAndValue_ValueId_SE_RESIZE;
  static const ValueId CIRCLE =
    PropertyAndValue_ValueId_CIRCLE;
  static const ValueId DESTINATION_OUT =
    PropertyAndValue_ValueId_DESTINATION_OUT;
  static const ValueId THREEDFACE =
    PropertyAndValue_ValueId_THREEDFACE;
  static const ValueId OVER =
    PropertyAndValue_ValueId_OVER;
  static const ValueId DISTRIBUTE =
    PropertyAndValue_ValueId_DISTRIBUTE;
  static const ValueId INACTIVECAPTION =
    PropertyAndValue_ValueId_INACTIVECAPTION;
  static const ValueId LIGHTEN =
    PropertyAndValue_ValueId_LIGHTEN;
  static const ValueId _WEBKIT_FIT_CONTENT =
    PropertyAndValue_ValueId__WEBKIT_FIT_CONTENT;
  static const ValueId LIGHTER =
    PropertyAndValue_ValueId_LIGHTER;
  static const ValueId CONTEXTUAL =
    PropertyAndValue_ValueId_CONTEXTUAL;
  static const ValueId GRAY =
    PropertyAndValue_ValueId_GRAY;
  static const ValueId DARKTURQUOISE =
    PropertyAndValue_ValueId_DARKTURQUOISE;
  static const ValueId E_RESIZE =
    PropertyAndValue_ValueId_E_RESIZE;
  static const ValueId LUMINOSITY =
    PropertyAndValue_ValueId_LUMINOSITY;
  static const ValueId LIST_ITEM =
    PropertyAndValue_ValueId_LIST_ITEM;
  static const ValueId LIMEGREEN =
    PropertyAndValue_ValueId_LIMEGREEN;
  static const ValueId FIXED =
    PropertyAndValue_ValueId_FIXED;
  static const ValueId MIN_CONTENT =
    PropertyAndValue_ValueId_MIN_CONTENT;
  static const ValueId MEDIA_SLIDER =
    PropertyAndValue_ValueId_MEDIA_SLIDER;
  static const ValueId VISIBLESTROKE =
    PropertyAndValue_ValueId_VISIBLESTROKE;
  static const ValueId CUBIC_BEZIER =
    PropertyAndValue_ValueId_CUBIC_BEZIER;
  static const ValueId CLOSEST_SIDE =
    PropertyAndValue_ValueId_CLOSEST_SIDE;
  static const ValueId RELATIVE =
    PropertyAndValue_ValueId_RELATIVE;
  static const ValueId NO_OPEN_QUOTE =
    PropertyAndValue_ValueId_NO_OPEN_QUOTE;
  static const ValueId THISTLE =
    PropertyAndValue_ValueId_THISTLE;
  static const ValueId VIOLET =
    PropertyAndValue_ValueId_VIOLET;
  static const ValueId PORTRAIT =
    PropertyAndValue_ValueId_PORTRAIT;
  static const ValueId FULLSCREEN =
    PropertyAndValue_ValueId_FULLSCREEN;
  static const ValueId HONEYDEW =
    PropertyAndValue_ValueId_HONEYDEW;
  static const ValueId ON_DEMAND =
    PropertyAndValue_ValueId_ON_DEMAND;
  static const ValueId CORNFLOWERBLUE =
    PropertyAndValue_ValueId_CORNFLOWERBLUE;
  static const ValueId DARKBLUE =
    PropertyAndValue_ValueId_DARKBLUE;
  static const ValueId OUTSIDE =
    PropertyAndValue_ValueId_OUTSIDE;
  static const ValueId PROGRESS =
    PropertyAndValue_ValueId_PROGRESS;
  static const ValueId MEDIUMPURPLE =
    PropertyAndValue_ValueId_MEDIUMPURPLE;
  static const ValueId DARKCYAN =
    PropertyAndValue_ValueId_DARKCYAN;
  static const ValueId VERTICAL =
    PropertyAndValue_ValueId_VERTICAL;
  static const ValueId MONOSPACE =
    PropertyAndValue_ValueId_MONOSPACE;
  static const ValueId BREAK_WORD =
    PropertyAndValue_ValueId_BREAK_WORD;
  static const ValueId SCREEN =
    PropertyAndValue_ValueId_SCREEN;
  static const ValueId REBECCAPURPLE =
    PropertyAndValue_ValueId_REBECCAPURPLE;
  static const ValueId DARKRED =
    PropertyAndValue_ValueId_DARKRED;
  static const ValueId VERTICAL_LR =
    PropertyAndValue_ValueId_VERTICAL_LR;
  static const ValueId OPTIMIZEQUALITY =
    PropertyAndValue_ValueId_OPTIMIZEQUALITY;
  static const ValueId ARMENIAN =
    PropertyAndValue_ValueId_ARMENIAN;
  static const ValueId NWSE_RESIZE =
    PropertyAndValue_ValueId_NWSE_RESIZE;
  static const ValueId TEXT_BEFORE_EDGE =
    PropertyAndValue_ValueId_TEXT_BEFORE_EDGE;
  static const ValueId OPTIONAL =
    PropertyAndValue_ValueId_OPTIONAL;
  static const ValueId EXCLUSION =
    PropertyAndValue_ValueId_EXCLUSION;
  static const ValueId BOTH =
    PropertyAndValue_ValueId_BOTH;
  static const ValueId MEDIUMTURQUOISE =
    PropertyAndValue_ValueId_MEDIUMTURQUOISE;
  static const ValueId LOWER_ROMAN =
    PropertyAndValue_ValueId_LOWER_ROMAN;
  static const ValueId REVERSE =
    PropertyAndValue_ValueId_REVERSE;
  static const ValueId HANGUL_CONSONANT =
    PropertyAndValue_ValueId_HANGUL_CONSONANT;
  static const ValueId SOFT_LIGHT =
    PropertyAndValue_ValueId_SOFT_LIGHT;
  static const ValueId AQUA =
    PropertyAndValue_ValueId_AQUA;
  static const ValueId BUTTON_BEVEL =
    PropertyAndValue_ValueId_BUTTON_BEVEL;
  static const ValueId GURMUKHI =
    PropertyAndValue_ValueId_GURMUKHI;
  static const ValueId LIGHTSTEELBLUE =
    PropertyAndValue_ValueId_LIGHTSTEELBLUE;
  static const ValueId SMALL_CAPS =
    PropertyAndValue_ValueId_SMALL_CAPS;
  static const ValueId N_RESIZE =
    PropertyAndValue_ValueId_N_RESIZE;
  static const ValueId TABLE_FOOTER_GROUP =
    PropertyAndValue_ValueId_TABLE_FOOTER_GROUP;
  static const ValueId DESTINATION_IN =
    PropertyAndValue_ValueId_DESTINATION_IN;
  static const ValueId OLIVEDRAB =
    PropertyAndValue_ValueId_OLIVEDRAB;
  static const ValueId READ_WRITE_PLAINTEXT_ONLY =
    PropertyAndValue_ValueId_READ_WRITE_PLAINTEXT_ONLY;
  static const ValueId PADDING_BOX =
    PropertyAndValue_ValueId_PADDING_BOX;
  static const ValueId COL_RESIZE =
    PropertyAndValue_ValueId_COL_RESIZE;
  static const ValueId _INTERNAL_MEDIA_TRACK_SELECTION_CHECKMARK =
    PropertyAndValue_ValueId__INTERNAL_MEDIA_TRACK_SELECTION_CHECKMARK;
  static const ValueId LOWER_LATIN =
    PropertyAndValue_ValueId_LOWER_LATIN;
  static const ValueId _WEBKIT_NOWRAP =
    PropertyAndValue_ValueId__WEBKIT_NOWRAP;
  static const ValueId TABLE =
    PropertyAndValue_ValueId_TABLE;
  static const ValueId BUTTONSHADOW =
    PropertyAndValue_ValueId_BUTTONSHADOW;
  static const ValueId PALEGREEN =
    PropertyAndValue_ValueId_PALEGREEN;
  static const ValueId JIS90 =
    PropertyAndValue_ValueId_JIS90;
  static const ValueId FIT_CONTENT =
    PropertyAndValue_ValueId_FIT_CONTENT;
  static const ValueId STRETCH =
    PropertyAndValue_ValueId_STRETCH;
  static const ValueId SEASHELL =
    PropertyAndValue_ValueId_SEASHELL;
  static const ValueId THREEDHIGHLIGHT =
    PropertyAndValue_ValueId_THREEDHIGHLIGHT;
  static const ValueId VISIBLEFILL =
    PropertyAndValue_ValueId_VISIBLEFILL;
  static const ValueId SPACE_AROUND =
    PropertyAndValue_ValueId_SPACE_AROUND;
  static const ValueId COARSE =
    PropertyAndValue_ValueId_COARSE;
  static const ValueId AQUAMARINE =
    PropertyAndValue_ValueId_AQUAMARINE;
  static const ValueId DIGITS =
    PropertyAndValue_ValueId_DIGITS;
  static const ValueId CURRENTCOLOR =
    PropertyAndValue_ValueId_CURRENTCOLOR;
  static const ValueId PAINTED =
    PropertyAndValue_ValueId_PAINTED;
  static const ValueId TB_RL =
    PropertyAndValue_ValueId_TB_RL;
  static const ValueId BUTTONFACE =
    PropertyAndValue_ValueId_BUTTONFACE;
  static const ValueId LAWNGREEN =
    PropertyAndValue_ValueId_LAWNGREEN;
  static const ValueId BURLYWOOD =
    PropertyAndValue_ValueId_BURLYWOOD;
  static const ValueId _WEBKIT_SMALL_CONTROL =
    PropertyAndValue_ValueId__WEBKIT_SMALL_CONTROL;
  static const ValueId SLATEBLUE =
    PropertyAndValue_ValueId_SLATEBLUE;
  static const ValueId MINTCREAM =
    PropertyAndValue_ValueId_MINTCREAM;
  static const ValueId RUBY =
    PropertyAndValue_ValueId_RUBY;
  static const ValueId SOLID =
    PropertyAndValue_ValueId_SOLID;
  static const ValueId ULTRA_CONDENSED =
    PropertyAndValue_ValueId_ULTRA_CONDENSED;
  static const ValueId EXPANDED =
    PropertyAndValue_ValueId_EXPANDED;
  static const ValueId SADDLEBROWN =
    PropertyAndValue_ValueId_SADDLEBROWN;
  static const ValueId VERTICAL_RL =
    PropertyAndValue_ValueId_VERTICAL_RL;
  static const ValueId SESAME =
    PropertyAndValue_ValueId_SESAME;
  static const ValueId _WEBKIT_BODY =
    PropertyAndValue_ValueId__WEBKIT_BODY;
  static const ValueId DESTINATION_ATOP =
    PropertyAndValue_ValueId_DESTINATION_ATOP;
  static const ValueId MALAYALAM =
    PropertyAndValue_ValueId_MALAYALAM;
  static const ValueId WRAP_REVERSE =
    PropertyAndValue_ValueId_WRAP_REVERSE;
  static const ValueId BALANCE =
    PropertyAndValue_ValueId_BALANCE;
  static const ValueId VERTICAL_RIGHT =
    PropertyAndValue_ValueId_VERTICAL_RIGHT;
  static const ValueId NO_CLOSE_QUOTE =
    PropertyAndValue_ValueId_NO_CLOSE_QUOTE;
  static const ValueId FLEX =
    PropertyAndValue_ValueId_FLEX;
  static const ValueId PUSH_BUTTON =
    PropertyAndValue_ValueId_PUSH_BUTTON;
  static const ValueId DARKGOLDENROD =
    PropertyAndValue_ValueId_DARKGOLDENROD;
  static const ValueId SATURATION =
    PropertyAndValue_ValueId_SATURATION;
  static const ValueId MIDDLE =
    PropertyAndValue_ValueId_MIDDLE;
  static const ValueId SANDYBROWN =
    PropertyAndValue_ValueId_SANDYBROWN;
  static const ValueId HEBREW =
    PropertyAndValue_ValueId_HEBREW;
  static const ValueId MENUTEXT =
    PropertyAndValue_ValueId_MENUTEXT;
  static const ValueId INLINE_AXIS =
    PropertyAndValue_ValueId_INLINE_AXIS;
  static const ValueId BASELINE =
    PropertyAndValue_ValueId_BASELINE;
  static const ValueId _WEBKIT_GRAB =
    PropertyAndValue_ValueId__WEBKIT_GRAB;
  static const ValueId DARKORANGE =
    PropertyAndValue_ValueId_DARKORANGE;
  static const ValueId _WEBKIT_FLEX =
    PropertyAndValue_ValueId__WEBKIT_FLEX;
  static const ValueId NW_RESIZE =
    PropertyAndValue_ValueId_NW_RESIZE;
  static const ValueId CONTENTS =
    PropertyAndValue_ValueId_CONTENTS;
  static const ValueId AUTO =
    PropertyAndValue_ValueId_AUTO;
  static const ValueId MARGIN_BOX =
    PropertyAndValue_ValueId_MARGIN_BOX;
  static const ValueId DOCUMENT =
    PropertyAndValue_ValueId_DOCUMENT;
  static const ValueId PALEGOLDENROD =
    PropertyAndValue_ValueId_PALEGOLDENROD;
  static const ValueId ORDINAL =
    PropertyAndValue_ValueId_ORDINAL;
  static const ValueId HAND =
    PropertyAndValue_ValueId_HAND;
  static const ValueId RUNNING =
    PropertyAndValue_ValueId_RUNNING;
  static const ValueId CJK_EARTHLY_BRANCH =
    PropertyAndValue_ValueId_CJK_EARTHLY_BRANCH;
  static const ValueId TABLE_CAPTION =
    PropertyAndValue_ValueId_TABLE_CAPTION;
  static const ValueId MEDIA_TOGGLE_CLOSED_CAPTIONS_BUTTON =
    PropertyAndValue_ValueId_MEDIA_TOGGLE_CLOSED_CAPTIONS_BUTTON;
  static const ValueId AFTER_EDGE =
    PropertyAndValue_ValueId_AFTER_EDGE;
  static const ValueId SLIDERTHUMB_VERTICAL =
    PropertyAndValue_ValueId_SLIDERTHUMB_VERTICAL;
  static const ValueId CENTER =
    PropertyAndValue_ValueId_CENTER;
  static const ValueId LIGHTYELLOW =
    PropertyAndValue_ValueId_LIGHTYELLOW;
  static const ValueId LAVENDERBLUSH =
    PropertyAndValue_ValueId_LAVENDERBLUSH;
  static const ValueId _INTERNAL_MEDIA_CLOSED_CAPTIONS_ICON =
    PropertyAndValue_ValueId__INTERNAL_MEDIA_CLOSED_CAPTIONS_ICON;
  static const ValueId INHERIT =
    PropertyAndValue_ValueId_INHERIT;
  static const ValueId MEDIA_CONTROLS_BACKGROUND =
    PropertyAndValue_ValueId_MEDIA_CONTROLS_BACKGROUND;
  static const ValueId JUSTIFY =
    PropertyAndValue_ValueId_JUSTIFY;
  static const ValueId OPTIMIZELEGIBILITY =
    PropertyAndValue_ValueId_OPTIMIZELEGIBILITY;
  static const ValueId _WEBKIT_BASELINE_MIDDLE =
    PropertyAndValue_ValueId__WEBKIT_BASELINE_MIDDLE;
  static const ValueId INDIGO =
    PropertyAndValue_ValueId_INDIGO;
  static const ValueId MINIMAL_UI =
    PropertyAndValue_ValueId_MINIMAL_UI;
  static const ValueId FIREBRICK =
    PropertyAndValue_ValueId_FIREBRICK;
  static const ValueId INDIANRED =
    PropertyAndValue_ValueId_INDIANRED;
  static const ValueId DARKOLIVEGREEN =
    PropertyAndValue_ValueId_DARKOLIVEGREEN;
  static const ValueId SEMI_EXPANDED =
    PropertyAndValue_ValueId_SEMI_EXPANDED;
  static const ValueId UNDERLINE =
    PropertyAndValue_ValueId_UNDERLINE;
  static const ValueId MYANMAR =
    PropertyAndValue_ValueId_MYANMAR;
  static const ValueId SPACE_BETWEEN =
    PropertyAndValue_ValueId_SPACE_BETWEEN;
  static const ValueId EASE =
    PropertyAndValue_ValueId_EASE;
  static const ValueId ALTERNATE =
    PropertyAndValue_ValueId_ALTERNATE;
  static const ValueId MEDIUMORCHID =
    PropertyAndValue_ValueId_MEDIUMORCHID;
  static const ValueId SILVER =
    PropertyAndValue_ValueId_SILVER;
  static const ValueId COLOR =
    PropertyAndValue_ValueId_COLOR;
  static const ValueId CHARTREUSE =
    PropertyAndValue_ValueId_CHARTREUSE;
  static const ValueId EASE_IN_OUT =
    PropertyAndValue_ValueId_EASE_IN_OUT;
  static const ValueId SPRINGGREEN =
    PropertyAndValue_ValueId_SPRINGGREEN;
  static const ValueId LIGHTSALMON =
    PropertyAndValue_ValueId_LIGHTSALMON;
  static const ValueId TURQUOISE =
    PropertyAndValue_ValueId_TURQUOISE;
  static const ValueId HIDE =
    PropertyAndValue_ValueId_HIDE;
  static const ValueId HORIZONTAL_TB =
    PropertyAndValue_ValueId_HORIZONTAL_TB;
  static const ValueId VERTICAL_TEXT =
    PropertyAndValue_ValueId_VERTICAL_TEXT;
  static const ValueId ALIAS =
    PropertyAndValue_ValueId_ALIAS;
  static const ValueId GRID =
    PropertyAndValue_ValueId_GRID;
  static const ValueId NO_DISCRETIONARY_LIGATURES =
    PropertyAndValue_ValueId_NO_DISCRETIONARY_LIGATURES;
  static const ValueId BACKGROUND =
    PropertyAndValue_ValueId_BACKGROUND;
  static const ValueId DEVANAGARI =
    PropertyAndValue_ValueId_DEVANAGARI;
  static const ValueId TEXT_BOTTOM =
    PropertyAndValue_ValueId_TEXT_BOTTOM;
  static const ValueId DARKGREEN =
    PropertyAndValue_ValueId_DARKGREEN;
  static const ValueId VISIBLE =
    PropertyAndValue_ValueId_VISIBLE;
  static const ValueId TABULAR_NUMS =
    PropertyAndValue_ValueId_TABULAR_NUMS;
  static const ValueId MANUAL =
    PropertyAndValue_ValueId_MANUAL;
  static const ValueId ZOOM =
    PropertyAndValue_ValueId_ZOOM;
  static const ValueId CJK_HEAVENLY_STEM =
    PropertyAndValue_ValueId_CJK_HEAVENLY_STEM;
  static const ValueId STEPS =
    PropertyAndValue_ValueId_STEPS;
  static const ValueId BOUNDING_BOX =
    PropertyAndValue_ValueId_BOUNDING_BOX;
  static const ValueId ALPHABETIC =
    PropertyAndValue_ValueId_ALPHABETIC;
  static const ValueId AFTER_WHITE_SPACE =
    PropertyAndValue_ValueId_AFTER_WHITE_SPACE;
  static const ValueId ROW_REVERSE =
    PropertyAndValue_ValueId_ROW_REVERSE;
  static const ValueId MEDIA_CURRENT_TIME_DISPLAY =
    PropertyAndValue_ValueId_MEDIA_CURRENT_TIME_DISPLAY;
  static const ValueId MATHEMATICAL =
    PropertyAndValue_ValueId_MATHEMATICAL;
  static const ValueId ETHIOPIC_HALEHAME =
    PropertyAndValue_ValueId_ETHIOPIC_HALEHAME;
  static const ValueId RIGHT =
    PropertyAndValue_ValueId_RIGHT;
  static const ValueId UPPERCASE =
    PropertyAndValue_ValueId_UPPERCASE;
  static const ValueId _WEBKIT_XXX_LARGE =
    PropertyAndValue_ValueId__WEBKIT_XXX_LARGE;
  static const ValueId B4 =
    PropertyAndValue_ValueId_B4;
  static const ValueId B5 =
    PropertyAndValue_ValueId_B5;
  static const ValueId YELLOWGREEN =
    PropertyAndValue_ValueId_YELLOWGREEN;
  static const ValueId MEDIA_CONTROLS_FULLSCREEN_BACKGROUND =
    PropertyAndValue_ValueId_MEDIA_CONTROLS_FULLSCREEN_BACKGROUND;
  static const ValueId LOWER_ARMENIAN =
    PropertyAndValue_ValueId_LOWER_ARMENIAN;
  static const ValueId ORCHID =
    PropertyAndValue_ValueId_ORCHID;
  static const ValueId NONZERO =
    PropertyAndValue_ValueId_NONZERO;
  static const ValueId SLICE =
    PropertyAndValue_ValueId_SLICE;
  static const ValueId DENSE =
    PropertyAndValue_ValueId_DENSE;
  static const ValueId INTER_WORD =
    PropertyAndValue_ValueId_INTER_WORD;
  static const ValueId BOTTOM =
    PropertyAndValue_ValueId_BOTTOM;
  static const ValueId PURPLE =
    PropertyAndValue_ValueId_PURPLE;
  static const ValueId AVOID =
    PropertyAndValue_ValueId_AVOID;
  static const ValueId SEPARATE =
    PropertyAndValue_ValueId_SEPARATE;
  static const ValueId HANGUL =
    PropertyAndValue_ValueId_HANGUL;
  static const ValueId LEGAL =
    PropertyAndValue_ValueId_LEGAL;
  static const ValueId ALTERNATE_REVERSE =
    PropertyAndValue_ValueId_ALTERNATE_REVERSE;
  static const ValueId PRESERVE_3D =
    PropertyAndValue_ValueId_PRESERVE_3D;
  static const ValueId READ_ONLY =
    PropertyAndValue_ValueId_READ_ONLY;
  static const ValueId ELLIPSIS =
    PropertyAndValue_ValueId_ELLIPSIS;
  static const ValueId MEDIA_OVERLAY_PLAY_BUTTON =
    PropertyAndValue_ValueId_MEDIA_OVERLAY_PLAY_BUTTON;
  static const ValueId BISQUE =
    PropertyAndValue_ValueId_BISQUE;
  static const ValueId INFOTEXT =
    PropertyAndValue_ValueId_INFOTEXT;
  static const ValueId KHAKI =
    PropertyAndValue_ValueId_KHAKI;
  static const ValueId WHEAT =
    PropertyAndValue_ValueId_WHEAT;
  static const ValueId BOLD =
    PropertyAndValue_ValueId_BOLD;
  static const ValueId NO_HISTORICAL_LIGATURES =
    PropertyAndValue_ValueId_NO_HISTORICAL_LIGATURES;
  static const ValueId BIDI_OVERRIDE =
    PropertyAndValue_ValueId_BIDI_OVERRIDE;
  static const ValueId DEEPSKYBLUE =
    PropertyAndValue_ValueId_DEEPSKYBLUE;
  static const ValueId EASE_OUT =
    PropertyAndValue_ValueId_EASE_OUT;
  static const ValueId CJK_IDEOGRAPHIC =
    PropertyAndValue_ValueId_CJK_IDEOGRAPHIC;
  static const ValueId OLDSTYLE_NUMS =
    PropertyAndValue_ValueId_OLDSTYLE_NUMS;
  static const ValueId MEDIA_ENTER_FULLSCREEN_BUTTON =
    PropertyAndValue_ValueId_MEDIA_ENTER_FULLSCREEN_BUTTON;
  static const ValueId SUPER =
    PropertyAndValue_ValueId_SUPER;
  static const ValueId CURSIVE =
    PropertyAndValue_ValueId_CURSIVE;
  static const ValueId ON =
    PropertyAndValue_ValueId_ON;
  static const ValueId CENTRAL =
    PropertyAndValue_ValueId_CENTRAL;
  static const ValueId _INTERNAL_MEDIA_OVERFLOW_BUTTON =
    PropertyAndValue_ValueId__INTERNAL_MEDIA_OVERFLOW_BUTTON;
  static const ValueId STANDALONE =
    PropertyAndValue_ValueId_STANDALONE;
  static const ValueId COLUMN =
    PropertyAndValue_ValueId_COLUMN;
  static const ValueId CORAL =
    PropertyAndValue_ValueId_CORAL;
  static const ValueId DESTINATION_OVER =
    PropertyAndValue_ValueId_DESTINATION_OVER;
  static const ValueId DISCRETIONARY_LIGATURES =
    PropertyAndValue_ValueId_DISCRETIONARY_LIGATURES;
  static const ValueId BEIGE =
    PropertyAndValue_ValueId_BEIGE;
  static const ValueId TABLE_CELL =
    PropertyAndValue_ValueId_TABLE_CELL;
  static const ValueId AZURE =
    PropertyAndValue_ValueId_AZURE;
  static const ValueId TRAD_CHINESE_INFORMAL =
    PropertyAndValue_ValueId_TRAD_CHINESE_INFORMAL;
  static const ValueId TITLING_CAPS =
    PropertyAndValue_ValueId_TITLING_CAPS;
  static const ValueId _WEBKIT_ZOOM_IN =
    PropertyAndValue_ValueId__WEBKIT_ZOOM_IN;
  static const ValueId BLOCK =
    PropertyAndValue_ValueId_BLOCK;
  static const ValueId OUTSET =
    PropertyAndValue_ValueId_OUTSET;
  static const ValueId MEDIUMVIOLETRED =
    PropertyAndValue_ValueId_MEDIUMVIOLETRED;
  static const ValueId ROYALBLUE =
    PropertyAndValue_ValueId_ROYALBLUE;
  static const ValueId MENULIST_TEXT =
    PropertyAndValue_ValueId_MENULIST_TEXT;
  static const ValueId SW_RESIZE =
    PropertyAndValue_ValueId_SW_RESIZE;
  static const ValueId MULTIPLY =
    PropertyAndValue_ValueId_MULTIPLY;
  static const ValueId THREEDDARKSHADOW =
    PropertyAndValue_ValueId_THREEDDARKSHADOW;
  static const ValueId WRAP =
    PropertyAndValue_ValueId_WRAP;
  static const ValueId LIGHTCORAL =
    PropertyAndValue_ValueId_LIGHTCORAL;
  static const ValueId ELLIPSE =
    PropertyAndValue_ValueId_ELLIPSE;
  static const ValueId _INTERNAL_ACTIVE_LIST_BOX_SELECTION_TEXT =
    PropertyAndValue_ValueId__INTERNAL_ACTIVE_LIST_BOX_SELECTION_TEXT;
  static const ValueId RIDGE =
    PropertyAndValue_ValueId_RIDGE;
  static const ValueId _WEBKIT_AUTO =
    PropertyAndValue_ValueId__WEBKIT_AUTO;
  static const ValueId _INTERNAL_QUIRK_INHERIT =
    PropertyAndValue_ValueId__INTERNAL_QUIRK_INHERIT;
  static const ValueId INITIAL =
    PropertyAndValue_ValueId_INITIAL;
  static const ValueId FUCHSIA =
    PropertyAndValue_ValueId_FUCHSIA;
  static const ValueId MENULIST_BUTTON =
    PropertyAndValue_ValueId_MENULIST_BUTTON;
  static const ValueId BLANCHEDALMOND =
    PropertyAndValue_ValueId_BLANCHEDALMOND;
  static const ValueId CARET =
    PropertyAndValue_ValueId_CARET;
  static const ValueId START =
    PropertyAndValue_ValueId_START;
  static const ValueId _INTERNAL_MEDIA_CAST_OFF_BUTTON =
    PropertyAndValue_ValueId__INTERNAL_MEDIA_CAST_OFF_BUTTON;
  static const ValueId ITALIC =
    PropertyAndValue_ValueId_ITALIC;
  static const ValueId IVORY =
    PropertyAndValue_ValueId_IVORY;
  static const ValueId BUTTONTEXT =
    PropertyAndValue_ValueId_BUTTONTEXT;
  static const ValueId SEMI_CONDENSED =
    PropertyAndValue_ValueId_SEMI_CONDENSED;
  static const ValueId INLINE_GRID =
    PropertyAndValue_ValueId_INLINE_GRID;
  static const ValueId _WEBKIT_ACTIVELINK =
    PropertyAndValue_ValueId__WEBKIT_ACTIVELINK;
  static const ValueId SERIF =
    PropertyAndValue_ValueId_SERIF;
  static const ValueId FORESTGREEN =
    PropertyAndValue_ValueId_FORESTGREEN;
  static const ValueId BENGALI =
    PropertyAndValue_ValueId_BENGALI;
  static const ValueId UPRIGHT =
    PropertyAndValue_ValueId_UPRIGHT;
  static const ValueId RESET =
    PropertyAndValue_ValueId_RESET;
  static const ValueId BEVEL =
    PropertyAndValue_ValueId_BEVEL;
  static const ValueId IDEOGRAPHIC =
    PropertyAndValue_ValueId_IDEOGRAPHIC;
  static const ValueId DARKEN =
    PropertyAndValue_ValueId_DARKEN;
  static const ValueId MEDIA_VOLUME_SLIDERTHUMB =
    PropertyAndValue_ValueId_MEDIA_VOLUME_SLIDERTHUMB;
  static const ValueId DEFAULT =
    PropertyAndValue_ValueId_DEFAULT;
  static const ValueId INSIDE =
    PropertyAndValue_ValueId_INSIDE;
  static const ValueId BELOW =
    PropertyAndValue_ValueId_BELOW;
  static const ValueId HIGHLIGHT =
    PropertyAndValue_ValueId_HIGHLIGHT;
  static const ValueId EMBED =
    PropertyAndValue_ValueId_EMBED;
  static const ValueId GROOVE =
    PropertyAndValue_ValueId_GROOVE;
  static const ValueId NESW_RESIZE =
    PropertyAndValue_ValueId_NESW_RESIZE;
  static const ValueId STACKED_FRACTIONS =
    PropertyAndValue_ValueId_STACKED_FRACTIONS;
  static const ValueId UNSAFE =
    PropertyAndValue_ValueId_UNSAFE;
  static const ValueId MAROON =
    PropertyAndValue_ValueId_MAROON;
  static const ValueId KANNADA =
    PropertyAndValue_ValueId_KANNADA;
  static const ValueId SINGLE =
    PropertyAndValue_ValueId_SINGLE;
  static const ValueId AT =
    PropertyAndValue_ValueId_AT;
  static const ValueId INK =
    PropertyAndValue_ValueId_INK;
  static const ValueId ARABIC_INDIC =
    PropertyAndValue_ValueId_ARABIC_INDIC;
  static const ValueId MEDIA_VOLUME_SLIDER =
    PropertyAndValue_ValueId_MEDIA_VOLUME_SLIDER;
  static const ValueId COLUMN_REVERSE =
    PropertyAndValue_ValueId_COLUMN_REVERSE;
  static const ValueId _WEBKIT_ZOOM_OUT =
    PropertyAndValue_ValueId__WEBKIT_ZOOM_OUT;
  static const ValueId FILL =
    PropertyAndValue_ValueId_FILL;
  static const ValueId EVENODD =
    PropertyAndValue_ValueId_EVENODD;
  static const ValueId DOTTED =
    PropertyAndValue_ValueId_DOTTED;
  static const ValueId DIMGRAY =
    PropertyAndValue_ValueId_DIMGRAY;
  static const ValueId DASHED =
    PropertyAndValue_ValueId_DASHED;
  static const ValueId SEAGREEN =
    PropertyAndValue_ValueId_SEAGREEN;
  static const ValueId TRAD_CHINESE_FORMAL =
    PropertyAndValue_ValueId_TRAD_CHINESE_FORMAL;
  static const ValueId MEDIUMSLATEBLUE =
    PropertyAndValue_ValueId_MEDIUMSLATEBLUE;
  static const ValueId PALETURQUOISE =
    PropertyAndValue_ValueId_PALETURQUOISE;
  static const ValueId INNER_SPIN_BUTTON =
    PropertyAndValue_ValueId_INNER_SPIN_BUTTON;
  static const ValueId REPEAT =
    PropertyAndValue_ValueId_REPEAT;
  static const ValueId DARKORCHID =
    PropertyAndValue_ValueId_DARKORCHID;
  static const ValueId _WEBKIT_ISOLATE =
    PropertyAndValue_ValueId__WEBKIT_ISOLATE;
  static const ValueId SEARCHFIELD_CANCEL_BUTTON =
    PropertyAndValue_ValueId_SEARCHFIELD_CANCEL_BUTTON;
  static const ValueId ALL_SMALL_CAPS =
    PropertyAndValue_ValueId_ALL_SMALL_CAPS;
  static const ValueId A3 =
    PropertyAndValue_ValueId_A3;
  static const ValueId A5 =
    PropertyAndValue_ValueId_A5;
  static const ValueId A4 =
    PropertyAndValue_ValueId_A4;
  static const ValueId OPEN_QUOTE =
    PropertyAndValue_ValueId_OPEN_QUOTE;
  static const ValueId LIGHTGREEN =
    PropertyAndValue_ValueId_LIGHTGREEN;
  static const ValueId SLASHED_ZERO =
    PropertyAndValue_ValueId_SLASHED_ZERO;
  static const ValueId COLOR_BURN =
    PropertyAndValue_ValueId_COLOR_BURN;
  static const ValueId AUTO_FLOW =
    PropertyAndValue_ValueId_AUTO_FLOW;
  static const ValueId OVERLAY =
    PropertyAndValue_ValueId_OVERLAY;
  static const ValueId VISUAL =
    PropertyAndValue_ValueId_VISUAL;
  static const ValueId SCALE_DOWN =
    PropertyAndValue_ValueId_SCALE_DOWN;
  static const ValueId OVERLINE =
    PropertyAndValue_ValueId_OVERLINE;
  static const ValueId INSET =
    PropertyAndValue_ValueId_INSET;
  static const ValueId MEDIUMAQUAMARINE =
    PropertyAndValue_ValueId_MEDIUMAQUAMARINE;
  static const ValueId SCROLL =
    PropertyAndValue_ValueId_SCROLL;
  static const ValueId INVALID_VALUE =
    PropertyAndValue_ValueId_INVALID_VALUE;
  static inline bool ValueId_IsValid(int value) {
    return PropertyAndValue_ValueId_IsValid(value);
  }
  static const ValueId ValueId_MIN =
    PropertyAndValue_ValueId_ValueId_MIN;
  static const ValueId ValueId_MAX =
    PropertyAndValue_ValueId_ValueId_MAX;
  static const int ValueId_ARRAYSIZE =
    PropertyAndValue_ValueId_ValueId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ValueId_descriptor() {
    return PropertyAndValue_ValueId_descriptor();
  }
  static inline const ::std::string& ValueId_Name(ValueId value) {
    return PropertyAndValue_ValueId_Name(value);
  }
  static inline bool ValueId_Parse(const ::std::string& name,
      ValueId* value) {
    return PropertyAndValue_ValueId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .css_proto_converter.Property property = 1;
  bool has_property() const;
  void clear_property();
  static const int kPropertyFieldNumber = 1;
  private:
  const ::css_proto_converter::Property& _internal_property() const;
  public:
  const ::css_proto_converter::Property& property() const;
  ::css_proto_converter::Property* release_property();
  ::css_proto_converter::Property* mutable_property();
  void set_allocated_property(::css_proto_converter::Property* property);

  // required .css_proto_converter.Expr expr = 2;
  bool has_expr() const;
  void clear_expr();
  static const int kExprFieldNumber = 2;
  private:
  const ::css_proto_converter::Expr& _internal_expr() const;
  public:
  const ::css_proto_converter::Expr& expr() const;
  ::css_proto_converter::Expr* release_expr();
  ::css_proto_converter::Expr* mutable_expr();
  void set_allocated_expr(::css_proto_converter::Expr* expr);

  // optional .css_proto_converter.PropertyAndValue.Prio prio = 3;
  bool has_prio() const;
  void clear_prio();
  static const int kPrioFieldNumber = 3;
  ::css_proto_converter::PropertyAndValue_Prio prio() const;
  void set_prio(::css_proto_converter::PropertyAndValue_Prio value);

  // optional .css_proto_converter.PropertyAndValue.ValueId value_id = 4;
  bool has_value_id() const;
  void clear_value_id();
  static const int kValueIdFieldNumber = 4;
  ::css_proto_converter::PropertyAndValue_ValueId value_id() const;
  void set_value_id(::css_proto_converter::PropertyAndValue_ValueId value);

  // @@protoc_insertion_point(class_scope:css_proto_converter.PropertyAndValue)
 private:
  void set_has_property();
  void clear_has_property();
  void set_has_expr();
  void clear_has_expr();
  void set_has_prio();
  void clear_has_prio();
  void set_has_value_id();
  void clear_has_value_id();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::css_proto_converter::Property* property_;
  ::css_proto_converter::Expr* expr_;
  int prio_;
  int value_id_;
  friend struct ::protobuf_css_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Expr : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:css_proto_converter.Expr) */ {
 public:
  Expr();
  virtual ~Expr();

  Expr(const Expr& from);

  inline Expr& operator=(const Expr& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Expr(Expr&& from) noexcept
    : Expr() {
    *this = ::std::move(from);
  }

  inline Expr& operator=(Expr&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Expr& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Expr* internal_default_instance() {
    return reinterpret_cast<const Expr*>(
               &_Expr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(Expr* other);
  friend void swap(Expr& a, Expr& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Expr* New() const final {
    return CreateMaybeMessage<Expr>(NULL);
  }

  Expr* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Expr>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Expr& from);
  void MergeFrom(const Expr& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expr* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .css_proto_converter.OperatorTerm operator_terms = 2;
  int operator_terms_size() const;
  void clear_operator_terms();
  static const int kOperatorTermsFieldNumber = 2;
  ::css_proto_converter::OperatorTerm* mutable_operator_terms(int index);
  ::google::protobuf::RepeatedPtrField< ::css_proto_converter::OperatorTerm >*
      mutable_operator_terms();
  const ::css_proto_converter::OperatorTerm& operator_terms(int index) const;
  ::css_proto_converter::OperatorTerm* add_operator_terms();
  const ::google::protobuf::RepeatedPtrField< ::css_proto_converter::OperatorTerm >&
      operator_terms() const;

  // required .css_proto_converter.Term term = 1;
  bool has_term() const;
  void clear_term();
  static const int kTermFieldNumber = 1;
  private:
  const ::css_proto_converter::Term& _internal_term() const;
  public:
  const ::css_proto_converter::Term& term() const;
  ::css_proto_converter::Term* release_term();
  ::css_proto_converter::Term* mutable_term();
  void set_allocated_term(::css_proto_converter::Term* term);

  // @@protoc_insertion_point(class_scope:css_proto_converter.Expr)
 private:
  void set_has_term();
  void clear_has_term();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::css_proto_converter::OperatorTerm > operator_terms_;
  ::css_proto_converter::Term* term_;
  friend struct ::protobuf_css_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OperatorTerm : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:css_proto_converter.OperatorTerm) */ {
 public:
  OperatorTerm();
  virtual ~OperatorTerm();

  OperatorTerm(const OperatorTerm& from);

  inline OperatorTerm& operator=(const OperatorTerm& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OperatorTerm(OperatorTerm&& from) noexcept
    : OperatorTerm() {
    *this = ::std::move(from);
  }

  inline OperatorTerm& operator=(OperatorTerm&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OperatorTerm& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OperatorTerm* internal_default_instance() {
    return reinterpret_cast<const OperatorTerm*>(
               &_OperatorTerm_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(OperatorTerm* other);
  friend void swap(OperatorTerm& a, OperatorTerm& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OperatorTerm* New() const final {
    return CreateMaybeMessage<OperatorTerm>(NULL);
  }

  OperatorTerm* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OperatorTerm>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OperatorTerm& from);
  void MergeFrom(const OperatorTerm& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OperatorTerm* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .css_proto_converter.Operator _operator = 1;
  bool has__operator() const;
  void clear__operator();
  static const int kOperatorFieldNumber = 1;
  private:
  const ::css_proto_converter::Operator& _internal__operator() const;
  public:
  const ::css_proto_converter::Operator& _operator() const;
  ::css_proto_converter::Operator* release__operator();
  ::css_proto_converter::Operator* mutable__operator();
  void set_allocated__operator(::css_proto_converter::Operator* _operator);

  // required .css_proto_converter.Term term = 2;
  bool has_term() const;
  void clear_term();
  static const int kTermFieldNumber = 2;
  private:
  const ::css_proto_converter::Term& _internal_term() const;
  public:
  const ::css_proto_converter::Term& term() const;
  ::css_proto_converter::Term* release_term();
  ::css_proto_converter::Term* mutable_term();
  void set_allocated_term(::css_proto_converter::Term* term);

  // @@protoc_insertion_point(class_scope:css_proto_converter.OperatorTerm)
 private:
  void set_has__operator();
  void clear_has__operator();
  void set_has_term();
  void clear_has_term();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::css_proto_converter::Operator* _operator_;
  ::css_proto_converter::Term* term_;
  friend struct ::protobuf_css_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Term : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:css_proto_converter.Term) */ {
 public:
  Term();
  virtual ~Term();

  Term(const Term& from);

  inline Term& operator=(const Term& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Term(Term&& from) noexcept
    : Term() {
    *this = ::std::move(from);
  }

  inline Term& operator=(Term&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Term& default_instance();

  enum RhsCase {
    kTermPart = 2,
    kString = 3,
    RHS_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Term* internal_default_instance() {
    return reinterpret_cast<const Term*>(
               &_Term_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(Term* other);
  friend void swap(Term& a, Term& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Term* New() const final {
    return CreateMaybeMessage<Term>(NULL);
  }

  Term* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Term>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Term& from);
  void MergeFrom(const Term& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Term* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .css_proto_converter.UnaryOperator unary_operator = 1;
  bool has_unary_operator() const;
  void clear_unary_operator();
  static const int kUnaryOperatorFieldNumber = 1;
  private:
  const ::css_proto_converter::UnaryOperator& _internal_unary_operator() const;
  public:
  const ::css_proto_converter::UnaryOperator& unary_operator() const;
  ::css_proto_converter::UnaryOperator* release_unary_operator();
  ::css_proto_converter::UnaryOperator* mutable_unary_operator();
  void set_allocated_unary_operator(::css_proto_converter::UnaryOperator* unary_operator);

  // optional .css_proto_converter.Ident ident = 4;
  bool has_ident() const;
  void clear_ident();
  static const int kIdentFieldNumber = 4;
  private:
  const ::css_proto_converter::Ident& _internal_ident() const;
  public:
  const ::css_proto_converter::Ident& ident() const;
  ::css_proto_converter::Ident* release_ident();
  ::css_proto_converter::Ident* mutable_ident();
  void set_allocated_ident(::css_proto_converter::Ident* ident);

  // optional .css_proto_converter.Uri uri = 5;
  bool has_uri() const;
  void clear_uri();
  static const int kUriFieldNumber = 5;
  private:
  const ::css_proto_converter::Uri& _internal_uri() const;
  public:
  const ::css_proto_converter::Uri& uri() const;
  ::css_proto_converter::Uri* release_uri();
  ::css_proto_converter::Uri* mutable_uri();
  void set_allocated_uri(::css_proto_converter::Uri* uri);

  // optional .css_proto_converter.Hexcolor hexcolor = 6;
  bool has_hexcolor() const;
  void clear_hexcolor();
  static const int kHexcolorFieldNumber = 6;
  private:
  const ::css_proto_converter::Hexcolor& _internal_hexcolor() const;
  public:
  const ::css_proto_converter::Hexcolor& hexcolor() const;
  ::css_proto_converter::Hexcolor* release_hexcolor();
  ::css_proto_converter::Hexcolor* mutable_hexcolor();
  void set_allocated_hexcolor(::css_proto_converter::Hexcolor* hexcolor);

  // optional .css_proto_converter.TermPart term_part = 2;
  bool has_term_part() const;
  void clear_term_part();
  static const int kTermPartFieldNumber = 2;
  private:
  const ::css_proto_converter::TermPart& _internal_term_part() const;
  public:
  const ::css_proto_converter::TermPart& term_part() const;
  ::css_proto_converter::TermPart* release_term_part();
  ::css_proto_converter::TermPart* mutable_term_part();
  void set_allocated_term_part(::css_proto_converter::TermPart* term_part);

  // optional .css_proto_converter.String string = 3;
  bool has_string() const;
  void clear_string();
  static const int kStringFieldNumber = 3;
  private:
  const ::css_proto_converter::String& _internal_string() const;
  public:
  const ::css_proto_converter::String& string() const;
  ::css_proto_converter::String* release_string();
  ::css_proto_converter::String* mutable_string();
  void set_allocated_string(::css_proto_converter::String* string);

  void clear_rhs();
  RhsCase rhs_case() const;
  // @@protoc_insertion_point(class_scope:css_proto_converter.Term)
 private:
  void set_has_unary_operator();
  void clear_has_unary_operator();
  void set_has_term_part();
  void set_has_string();
  void set_has_ident();
  void clear_has_ident();
  void set_has_uri();
  void clear_has_uri();
  void set_has_hexcolor();
  void clear_has_hexcolor();

  inline bool has_rhs() const;
  inline void clear_has_rhs();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::css_proto_converter::UnaryOperator* unary_operator_;
  ::css_proto_converter::Ident* ident_;
  ::css_proto_converter::Uri* uri_;
  ::css_proto_converter::Hexcolor* hexcolor_;
  union RhsUnion {
    RhsUnion() {}
    ::css_proto_converter::TermPart* term_part_;
    ::css_proto_converter::String* string_;
  } rhs_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_css_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TermPart : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:css_proto_converter.TermPart) */ {
 public:
  TermPart();
  virtual ~TermPart();

  TermPart(const TermPart& from);

  inline TermPart& operator=(const TermPart& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TermPart(TermPart&& from) noexcept
    : TermPart() {
    *this = ::std::move(from);
  }

  inline TermPart& operator=(TermPart&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TermPart& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TermPart* internal_default_instance() {
    return reinterpret_cast<const TermPart*>(
               &_TermPart_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(TermPart* other);
  friend void swap(TermPart& a, TermPart& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TermPart* New() const final {
    return CreateMaybeMessage<TermPart>(NULL);
  }

  TermPart* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TermPart>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TermPart& from);
  void MergeFrom(const TermPart& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TermPart* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .css_proto_converter.Num number = 1;
  bool has_number() const;
  void clear_number();
  static const int kNumberFieldNumber = 1;
  private:
  const ::css_proto_converter::Num& _internal_number() const;
  public:
  const ::css_proto_converter::Num& number() const;
  ::css_proto_converter::Num* release_number();
  ::css_proto_converter::Num* mutable_number();
  void set_allocated_number(::css_proto_converter::Num* number);

  // optional .css_proto_converter.Num percentage = 2;
  bool has_percentage() const;
  void clear_percentage();
  static const int kPercentageFieldNumber = 2;
  private:
  const ::css_proto_converter::Num& _internal_percentage() const;
  public:
  const ::css_proto_converter::Num& percentage() const;
  ::css_proto_converter::Num* release_percentage();
  ::css_proto_converter::Num* mutable_percentage();
  void set_allocated_percentage(::css_proto_converter::Num* percentage);

  // optional .css_proto_converter.Length length = 3;
  bool has_length() const;
  void clear_length();
  static const int kLengthFieldNumber = 3;
  private:
  const ::css_proto_converter::Length& _internal_length() const;
  public:
  const ::css_proto_converter::Length& length() const;
  ::css_proto_converter::Length* release_length();
  ::css_proto_converter::Length* mutable_length();
  void set_allocated_length(::css_proto_converter::Length* length);

  // optional .css_proto_converter.Num ems = 4;
  bool has_ems() const;
  void clear_ems();
  static const int kEmsFieldNumber = 4;
  private:
  const ::css_proto_converter::Num& _internal_ems() const;
  public:
  const ::css_proto_converter::Num& ems() const;
  ::css_proto_converter::Num* release_ems();
  ::css_proto_converter::Num* mutable_ems();
  void set_allocated_ems(::css_proto_converter::Num* ems);

  // optional .css_proto_converter.Num exs = 5;
  bool has_exs() const;
  void clear_exs();
  static const int kExsFieldNumber = 5;
  private:
  const ::css_proto_converter::Num& _internal_exs() const;
  public:
  const ::css_proto_converter::Num& exs() const;
  ::css_proto_converter::Num* release_exs();
  ::css_proto_converter::Num* mutable_exs();
  void set_allocated_exs(::css_proto_converter::Num* exs);

  // optional .css_proto_converter.Angle angle = 6;
  bool has_angle() const;
  void clear_angle();
  static const int kAngleFieldNumber = 6;
  private:
  const ::css_proto_converter::Angle& _internal_angle() const;
  public:
  const ::css_proto_converter::Angle& angle() const;
  ::css_proto_converter::Angle* release_angle();
  ::css_proto_converter::Angle* mutable_angle();
  void set_allocated_angle(::css_proto_converter::Angle* angle);

  // optional .css_proto_converter.Time time = 7;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 7;
  private:
  const ::css_proto_converter::Time& _internal_time() const;
  public:
  const ::css_proto_converter::Time& time() const;
  ::css_proto_converter::Time* release_time();
  ::css_proto_converter::Time* mutable_time();
  void set_allocated_time(::css_proto_converter::Time* time);

  // optional .css_proto_converter.Freq freq = 8;
  bool has_freq() const;
  void clear_freq();
  static const int kFreqFieldNumber = 8;
  private:
  const ::css_proto_converter::Freq& _internal_freq() const;
  public:
  const ::css_proto_converter::Freq& freq() const;
  ::css_proto_converter::Freq* release_freq();
  ::css_proto_converter::Freq* mutable_freq();
  void set_allocated_freq(::css_proto_converter::Freq* freq);

  // optional .css_proto_converter.Function function = 9;
  bool has_function() const;
  void clear_function();
  static const int kFunctionFieldNumber = 9;
  private:
  const ::css_proto_converter::Function& _internal_function() const;
  public:
  const ::css_proto_converter::Function& function() const;
  ::css_proto_converter::Function* release_function();
  ::css_proto_converter::Function* mutable_function();
  void set_allocated_function(::css_proto_converter::Function* function);

  // @@protoc_insertion_point(class_scope:css_proto_converter.TermPart)
 private:
  void set_has_number();
  void clear_has_number();
  void set_has_percentage();
  void clear_has_percentage();
  void set_has_length();
  void clear_has_length();
  void set_has_ems();
  void clear_has_ems();
  void set_has_exs();
  void clear_has_exs();
  void set_has_angle();
  void clear_has_angle();
  void set_has_time();
  void clear_has_time();
  void set_has_freq();
  void clear_has_freq();
  void set_has_function();
  void clear_has_function();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::css_proto_converter::Num* number_;
  ::css_proto_converter::Num* percentage_;
  ::css_proto_converter::Length* length_;
  ::css_proto_converter::Num* ems_;
  ::css_proto_converter::Num* exs_;
  ::css_proto_converter::Angle* angle_;
  ::css_proto_converter::Time* time_;
  ::css_proto_converter::Freq* freq_;
  ::css_proto_converter::Function* function_;
  friend struct ::protobuf_css_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Function : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:css_proto_converter.Function) */ {
 public:
  Function();
  virtual ~Function();

  Function(const Function& from);

  inline Function& operator=(const Function& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Function(Function&& from) noexcept
    : Function() {
    *this = ::std::move(from);
  }

  inline Function& operator=(Function&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Function& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Function* internal_default_instance() {
    return reinterpret_cast<const Function*>(
               &_Function_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(Function* other);
  friend void swap(Function& a, Function& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Function* New() const final {
    return CreateMaybeMessage<Function>(NULL);
  }

  Function* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Function>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Function& from);
  void MergeFrom(const Function& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Function* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .css_proto_converter.FunctionToken function_token = 1;
  bool has_function_token() const;
  void clear_function_token();
  static const int kFunctionTokenFieldNumber = 1;
  private:
  const ::css_proto_converter::FunctionToken& _internal_function_token() const;
  public:
  const ::css_proto_converter::FunctionToken& function_token() const;
  ::css_proto_converter::FunctionToken* release_function_token();
  ::css_proto_converter::FunctionToken* mutable_function_token();
  void set_allocated_function_token(::css_proto_converter::FunctionToken* function_token);

  // required .css_proto_converter.Expr expr = 2;
  bool has_expr() const;
  void clear_expr();
  static const int kExprFieldNumber = 2;
  private:
  const ::css_proto_converter::Expr& _internal_expr() const;
  public:
  const ::css_proto_converter::Expr& expr() const;
  ::css_proto_converter::Expr* release_expr();
  ::css_proto_converter::Expr* mutable_expr();
  void set_allocated_expr(::css_proto_converter::Expr* expr);

  // @@protoc_insertion_point(class_scope:css_proto_converter.Function)
 private:
  void set_has_function_token();
  void clear_has_function_token();
  void set_has_expr();
  void clear_has_expr();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::css_proto_converter::FunctionToken* function_token_;
  ::css_proto_converter::Expr* expr_;
  friend struct ::protobuf_css_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Hexcolor : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:css_proto_converter.Hexcolor) */ {
 public:
  Hexcolor();
  virtual ~Hexcolor();

  Hexcolor(const Hexcolor& from);

  inline Hexcolor& operator=(const Hexcolor& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Hexcolor(Hexcolor&& from) noexcept
    : Hexcolor() {
    *this = ::std::move(from);
  }

  inline Hexcolor& operator=(Hexcolor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Hexcolor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Hexcolor* internal_default_instance() {
    return reinterpret_cast<const Hexcolor*>(
               &_Hexcolor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(Hexcolor* other);
  friend void swap(Hexcolor& a, Hexcolor& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Hexcolor* New() const final {
    return CreateMaybeMessage<Hexcolor>(NULL);
  }

  Hexcolor* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Hexcolor>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Hexcolor& from);
  void MergeFrom(const Hexcolor& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Hexcolor* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .css_proto_converter.HexcolorThree first_three = 1;
  bool has_first_three() const;
  void clear_first_three();
  static const int kFirstThreeFieldNumber = 1;
  private:
  const ::css_proto_converter::HexcolorThree& _internal_first_three() const;
  public:
  const ::css_proto_converter::HexcolorThree& first_three() const;
  ::css_proto_converter::HexcolorThree* release_first_three();
  ::css_proto_converter::HexcolorThree* mutable_first_three();
  void set_allocated_first_three(::css_proto_converter::HexcolorThree* first_three);

  // optional .css_proto_converter.HexcolorThree last_three = 2;
  bool has_last_three() const;
  void clear_last_three();
  static const int kLastThreeFieldNumber = 2;
  private:
  const ::css_proto_converter::HexcolorThree& _internal_last_three() const;
  public:
  const ::css_proto_converter::HexcolorThree& last_three() const;
  ::css_proto_converter::HexcolorThree* release_last_three();
  ::css_proto_converter::HexcolorThree* mutable_last_three();
  void set_allocated_last_three(::css_proto_converter::HexcolorThree* last_three);

  // @@protoc_insertion_point(class_scope:css_proto_converter.Hexcolor)
 private:
  void set_has_first_three();
  void clear_has_first_three();
  void set_has_last_three();
  void clear_has_last_three();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::css_proto_converter::HexcolorThree* first_three_;
  ::css_proto_converter::HexcolorThree* last_three_;
  friend struct ::protobuf_css_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HexcolorThree : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:css_proto_converter.HexcolorThree) */ {
 public:
  HexcolorThree();
  virtual ~HexcolorThree();

  HexcolorThree(const HexcolorThree& from);

  inline HexcolorThree& operator=(const HexcolorThree& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HexcolorThree(HexcolorThree&& from) noexcept
    : HexcolorThree() {
    *this = ::std::move(from);
  }

  inline HexcolorThree& operator=(HexcolorThree&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HexcolorThree& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HexcolorThree* internal_default_instance() {
    return reinterpret_cast<const HexcolorThree*>(
               &_HexcolorThree_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(HexcolorThree* other);
  friend void swap(HexcolorThree& a, HexcolorThree& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HexcolorThree* New() const final {
    return CreateMaybeMessage<HexcolorThree>(NULL);
  }

  HexcolorThree* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<HexcolorThree>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const HexcolorThree& from);
  void MergeFrom(const HexcolorThree& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HexcolorThree* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .css_proto_converter.H ascii_value_3 = 3;
  bool has_ascii_value_3() const;
  void clear_ascii_value_3();
  static const int kAsciiValue3FieldNumber = 3;
  ::css_proto_converter::H ascii_value_3() const;
  void set_ascii_value_3(::css_proto_converter::H value);

  // required .css_proto_converter.H ascii_value_1 = 1;
  bool has_ascii_value_1() const;
  void clear_ascii_value_1();
  static const int kAsciiValue1FieldNumber = 1;
  ::css_proto_converter::H ascii_value_1() const;
  void set_ascii_value_1(::css_proto_converter::H value);

  // required .css_proto_converter.H ascii_value_2 = 2;
  bool has_ascii_value_2() const;
  void clear_ascii_value_2();
  static const int kAsciiValue2FieldNumber = 2;
  ::css_proto_converter::H ascii_value_2() const;
  void set_ascii_value_2(::css_proto_converter::H value);

  // @@protoc_insertion_point(class_scope:css_proto_converter.HexcolorThree)
 private:
  void set_has_ascii_value_1();
  void clear_has_ascii_value_1();
  void set_has_ascii_value_2();
  void clear_has_ascii_value_2();
  void set_has_ascii_value_3();
  void clear_has_ascii_value_3();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  int ascii_value_3_;
  int ascii_value_1_;
  int ascii_value_2_;
  friend struct ::protobuf_css_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Input : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:css_proto_converter.Input) */ {
 public:
  Input();
  virtual ~Input();

  Input(const Input& from);

  inline Input& operator=(const Input& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Input(Input&& from) noexcept
    : Input() {
    *this = ::std::move(from);
  }

  inline Input& operator=(Input&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Input& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Input* internal_default_instance() {
    return reinterpret_cast<const Input*>(
               &_Input_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(Input* other);
  friend void swap(Input& a, Input& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Input* New() const final {
    return CreateMaybeMessage<Input>(NULL);
  }

  Input* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Input>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Input& from);
  void MergeFrom(const Input& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Input* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Input_CSSParserMode CSSParserMode;
  static const CSSParserMode kHTMLStandardMode =
    Input_CSSParserMode_kHTMLStandardMode;
  static const CSSParserMode kHTMLQuirksMode =
    Input_CSSParserMode_kHTMLQuirksMode;
  static const CSSParserMode kSVGAttributeMode =
    Input_CSSParserMode_kSVGAttributeMode;
  static const CSSParserMode kCSSViewportRuleMode =
    Input_CSSParserMode_kCSSViewportRuleMode;
  static const CSSParserMode kCSSFontFaceRuleMode =
    Input_CSSParserMode_kCSSFontFaceRuleMode;
  static const CSSParserMode kUASheetMode =
    Input_CSSParserMode_kUASheetMode;
  static inline bool CSSParserMode_IsValid(int value) {
    return Input_CSSParserMode_IsValid(value);
  }
  static const CSSParserMode CSSParserMode_MIN =
    Input_CSSParserMode_CSSParserMode_MIN;
  static const CSSParserMode CSSParserMode_MAX =
    Input_CSSParserMode_CSSParserMode_MAX;
  static const int CSSParserMode_ARRAYSIZE =
    Input_CSSParserMode_CSSParserMode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CSSParserMode_descriptor() {
    return Input_CSSParserMode_descriptor();
  }
  static inline const ::std::string& CSSParserMode_Name(CSSParserMode value) {
    return Input_CSSParserMode_Name(value);
  }
  static inline bool CSSParserMode_Parse(const ::std::string& name,
      CSSParserMode* value) {
    return Input_CSSParserMode_Parse(name, value);
  }

  typedef Input_SecureContextMode SecureContextMode;
  static const SecureContextMode kInsecureContext =
    Input_SecureContextMode_kInsecureContext;
  static const SecureContextMode kSecureContext =
    Input_SecureContextMode_kSecureContext;
  static inline bool SecureContextMode_IsValid(int value) {
    return Input_SecureContextMode_IsValid(value);
  }
  static const SecureContextMode SecureContextMode_MIN =
    Input_SecureContextMode_SecureContextMode_MIN;
  static const SecureContextMode SecureContextMode_MAX =
    Input_SecureContextMode_SecureContextMode_MAX;
  static const int SecureContextMode_ARRAYSIZE =
    Input_SecureContextMode_SecureContextMode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SecureContextMode_descriptor() {
    return Input_SecureContextMode_descriptor();
  }
  static inline const ::std::string& SecureContextMode_Name(SecureContextMode value) {
    return Input_SecureContextMode_Name(value);
  }
  static inline bool SecureContextMode_Parse(const ::std::string& name,
      SecureContextMode* value) {
    return Input_SecureContextMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .css_proto_converter.StyleSheet style_sheet = 3;
  bool has_style_sheet() const;
  void clear_style_sheet();
  static const int kStyleSheetFieldNumber = 3;
  private:
  const ::css_proto_converter::StyleSheet& _internal_style_sheet() const;
  public:
  const ::css_proto_converter::StyleSheet& style_sheet() const;
  ::css_proto_converter::StyleSheet* release_style_sheet();
  ::css_proto_converter::StyleSheet* mutable_style_sheet();
  void set_allocated_style_sheet(::css_proto_converter::StyleSheet* style_sheet);

  // required .css_proto_converter.Input.CSSParserMode css_parser_mode = 1;
  bool has_css_parser_mode() const;
  void clear_css_parser_mode();
  static const int kCssParserModeFieldNumber = 1;
  ::css_proto_converter::Input_CSSParserMode css_parser_mode() const;
  void set_css_parser_mode(::css_proto_converter::Input_CSSParserMode value);

  // required bool defer_property_parsing = 2;
  bool has_defer_property_parsing() const;
  void clear_defer_property_parsing();
  static const int kDeferPropertyParsingFieldNumber = 2;
  bool defer_property_parsing() const;
  void set_defer_property_parsing(bool value);

  // required bool is_live_profile = 4;
  bool has_is_live_profile() const;
  void clear_is_live_profile();
  static const int kIsLiveProfileFieldNumber = 4;
  bool is_live_profile() const;
  void set_is_live_profile(bool value);

  // required .css_proto_converter.Input.SecureContextMode secure_context_mode = 5;
  bool has_secure_context_mode() const;
  void clear_secure_context_mode();
  static const int kSecureContextModeFieldNumber = 5;
  ::css_proto_converter::Input_SecureContextMode secure_context_mode() const;
  void set_secure_context_mode(::css_proto_converter::Input_SecureContextMode value);

  // @@protoc_insertion_point(class_scope:css_proto_converter.Input)
 private:
  void set_has_css_parser_mode();
  void clear_has_css_parser_mode();
  void set_has_defer_property_parsing();
  void clear_has_defer_property_parsing();
  void set_has_style_sheet();
  void clear_has_style_sheet();
  void set_has_is_live_profile();
  void clear_has_is_live_profile();
  void set_has_secure_context_mode();
  void clear_has_secure_context_mode();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::css_proto_converter::StyleSheet* style_sheet_;
  int css_parser_mode_;
  bool defer_property_parsing_;
  bool is_live_profile_;
  int secure_context_mode_;
  friend struct ::protobuf_css_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Unicode

// required .css_proto_converter.H ascii_value_1 = 1;
inline bool Unicode::has_ascii_value_1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Unicode::set_has_ascii_value_1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Unicode::clear_has_ascii_value_1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Unicode::clear_ascii_value_1() {
  ascii_value_1_ = 48;
  clear_has_ascii_value_1();
}
inline ::css_proto_converter::H Unicode::ascii_value_1() const {
  // @@protoc_insertion_point(field_get:css_proto_converter.Unicode.ascii_value_1)
  return static_cast< ::css_proto_converter::H >(ascii_value_1_);
}
inline void Unicode::set_ascii_value_1(::css_proto_converter::H value) {
  assert(::css_proto_converter::H_IsValid(value));
  set_has_ascii_value_1();
  ascii_value_1_ = value;
  // @@protoc_insertion_point(field_set:css_proto_converter.Unicode.ascii_value_1)
}

// optional .css_proto_converter.H ascii_value_2 = 2;
inline bool Unicode::has_ascii_value_2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Unicode::set_has_ascii_value_2() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Unicode::clear_has_ascii_value_2() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Unicode::clear_ascii_value_2() {
  ascii_value_2_ = 48;
  clear_has_ascii_value_2();
}
inline ::css_proto_converter::H Unicode::ascii_value_2() const {
  // @@protoc_insertion_point(field_get:css_proto_converter.Unicode.ascii_value_2)
  return static_cast< ::css_proto_converter::H >(ascii_value_2_);
}
inline void Unicode::set_ascii_value_2(::css_proto_converter::H value) {
  assert(::css_proto_converter::H_IsValid(value));
  set_has_ascii_value_2();
  ascii_value_2_ = value;
  // @@protoc_insertion_point(field_set:css_proto_converter.Unicode.ascii_value_2)
}

// optional .css_proto_converter.H ascii_value_3 = 3;
inline bool Unicode::has_ascii_value_3() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Unicode::set_has_ascii_value_3() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Unicode::clear_has_ascii_value_3() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Unicode::clear_ascii_value_3() {
  ascii_value_3_ = 48;
  clear_has_ascii_value_3();
}
inline ::css_proto_converter::H Unicode::ascii_value_3() const {
  // @@protoc_insertion_point(field_get:css_proto_converter.Unicode.ascii_value_3)
  return static_cast< ::css_proto_converter::H >(ascii_value_3_);
}
inline void Unicode::set_ascii_value_3(::css_proto_converter::H value) {
  assert(::css_proto_converter::H_IsValid(value));
  set_has_ascii_value_3();
  ascii_value_3_ = value;
  // @@protoc_insertion_point(field_set:css_proto_converter.Unicode.ascii_value_3)
}

// optional .css_proto_converter.H ascii_value_4 = 4;
inline bool Unicode::has_ascii_value_4() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Unicode::set_has_ascii_value_4() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Unicode::clear_has_ascii_value_4() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Unicode::clear_ascii_value_4() {
  ascii_value_4_ = 48;
  clear_has_ascii_value_4();
}
inline ::css_proto_converter::H Unicode::ascii_value_4() const {
  // @@protoc_insertion_point(field_get:css_proto_converter.Unicode.ascii_value_4)
  return static_cast< ::css_proto_converter::H >(ascii_value_4_);
}
inline void Unicode::set_ascii_value_4(::css_proto_converter::H value) {
  assert(::css_proto_converter::H_IsValid(value));
  set_has_ascii_value_4();
  ascii_value_4_ = value;
  // @@protoc_insertion_point(field_set:css_proto_converter.Unicode.ascii_value_4)
}

// optional .css_proto_converter.H ascii_value_5 = 5;
inline bool Unicode::has_ascii_value_5() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Unicode::set_has_ascii_value_5() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Unicode::clear_has_ascii_value_5() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Unicode::clear_ascii_value_5() {
  ascii_value_5_ = 48;
  clear_has_ascii_value_5();
}
inline ::css_proto_converter::H Unicode::ascii_value_5() const {
  // @@protoc_insertion_point(field_get:css_proto_converter.Unicode.ascii_value_5)
  return static_cast< ::css_proto_converter::H >(ascii_value_5_);
}
inline void Unicode::set_ascii_value_5(::css_proto_converter::H value) {
  assert(::css_proto_converter::H_IsValid(value));
  set_has_ascii_value_5();
  ascii_value_5_ = value;
  // @@protoc_insertion_point(field_set:css_proto_converter.Unicode.ascii_value_5)
}

// optional .css_proto_converter.H ascii_value_6 = 6;
inline bool Unicode::has_ascii_value_6() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Unicode::set_has_ascii_value_6() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Unicode::clear_has_ascii_value_6() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Unicode::clear_ascii_value_6() {
  ascii_value_6_ = 48;
  clear_has_ascii_value_6();
}
inline ::css_proto_converter::H Unicode::ascii_value_6() const {
  // @@protoc_insertion_point(field_get:css_proto_converter.Unicode.ascii_value_6)
  return static_cast< ::css_proto_converter::H >(ascii_value_6_);
}
inline void Unicode::set_ascii_value_6(::css_proto_converter::H value) {
  assert(::css_proto_converter::H_IsValid(value));
  set_has_ascii_value_6();
  ascii_value_6_ = value;
  // @@protoc_insertion_point(field_set:css_proto_converter.Unicode.ascii_value_6)
}

// optional .css_proto_converter.UnrepeatedW unrepeated_w = 7;
inline bool Unicode::has_unrepeated_w() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Unicode::set_has_unrepeated_w() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Unicode::clear_has_unrepeated_w() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Unicode::clear_unrepeated_w() {
  if (unrepeated_w_ != NULL) unrepeated_w_->Clear();
  clear_has_unrepeated_w();
}
inline const ::css_proto_converter::UnrepeatedW& Unicode::_internal_unrepeated_w() const {
  return *unrepeated_w_;
}
inline const ::css_proto_converter::UnrepeatedW& Unicode::unrepeated_w() const {
  const ::css_proto_converter::UnrepeatedW* p = unrepeated_w_;
  // @@protoc_insertion_point(field_get:css_proto_converter.Unicode.unrepeated_w)
  return p != NULL ? *p : *reinterpret_cast<const ::css_proto_converter::UnrepeatedW*>(
      &::css_proto_converter::_UnrepeatedW_default_instance_);
}
inline ::css_proto_converter::UnrepeatedW* Unicode::release_unrepeated_w() {
  // @@protoc_insertion_point(field_release:css_proto_converter.Unicode.unrepeated_w)
  clear_has_unrepeated_w();
  ::css_proto_converter::UnrepeatedW* temp = unrepeated_w_;
  unrepeated_w_ = NULL;
  return temp;
}
inline ::css_proto_converter::UnrepeatedW* Unicode::mutable_unrepeated_w() {
  set_has_unrepeated_w();
  if (unrepeated_w_ == NULL) {
    auto* p = CreateMaybeMessage<::css_proto_converter::UnrepeatedW>(GetArenaNoVirtual());
    unrepeated_w_ = p;
  }
  // @@protoc_insertion_point(field_mutable:css_proto_converter.Unicode.unrepeated_w)
  return unrepeated_w_;
}
inline void Unicode::set_allocated_unrepeated_w(::css_proto_converter::UnrepeatedW* unrepeated_w) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete unrepeated_w_;
  }
  if (unrepeated_w) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      unrepeated_w = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, unrepeated_w, submessage_arena);
    }
    set_has_unrepeated_w();
  } else {
    clear_has_unrepeated_w();
  }
  unrepeated_w_ = unrepeated_w;
  // @@protoc_insertion_point(field_set_allocated:css_proto_converter.Unicode.unrepeated_w)
}

// -------------------------------------------------------------------

// Escape

// optional .css_proto_converter.Unicode unicode = 1;
inline bool Escape::has_unicode() const {
  return rhs_case() == kUnicode;
}
inline void Escape::set_has_unicode() {
  _oneof_case_[0] = kUnicode;
}
inline void Escape::clear_unicode() {
  if (has_unicode()) {
    delete rhs_.unicode_;
    clear_has_rhs();
  }
}
inline const ::css_proto_converter::Unicode& Escape::_internal_unicode() const {
  return *rhs_.unicode_;
}
inline ::css_proto_converter::Unicode* Escape::release_unicode() {
  // @@protoc_insertion_point(field_release:css_proto_converter.Escape.unicode)
  if (has_unicode()) {
    clear_has_rhs();
      ::css_proto_converter::Unicode* temp = rhs_.unicode_;
    rhs_.unicode_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::css_proto_converter::Unicode& Escape::unicode() const {
  // @@protoc_insertion_point(field_get:css_proto_converter.Escape.unicode)
  return has_unicode()
      ? *rhs_.unicode_
      : *reinterpret_cast< ::css_proto_converter::Unicode*>(&::css_proto_converter::_Unicode_default_instance_);
}
inline ::css_proto_converter::Unicode* Escape::mutable_unicode() {
  if (!has_unicode()) {
    clear_rhs();
    set_has_unicode();
    rhs_.unicode_ = CreateMaybeMessage< ::css_proto_converter::Unicode >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:css_proto_converter.Escape.unicode)
  return rhs_.unicode_;
}

// optional .css_proto_converter.Escape.AsciiValue ascii_value = 2;
inline bool Escape::has_ascii_value() const {
  return rhs_case() == kAsciiValue;
}
inline void Escape::set_has_ascii_value() {
  _oneof_case_[0] = kAsciiValue;
}
inline void Escape::clear_ascii_value() {
  if (has_ascii_value()) {
    rhs_.ascii_value_ = 32;
    clear_has_rhs();
  }
}
inline ::css_proto_converter::Escape_AsciiValue Escape::ascii_value() const {
  // @@protoc_insertion_point(field_get:css_proto_converter.Escape.ascii_value)
  if (has_ascii_value()) {
    return static_cast< ::css_proto_converter::Escape_AsciiValue >(rhs_.ascii_value_);
  }
  return static_cast< ::css_proto_converter::Escape_AsciiValue >(32);
}
inline void Escape::set_ascii_value(::css_proto_converter::Escape_AsciiValue value) {
  assert(::css_proto_converter::Escape_AsciiValue_IsValid(value));
  if (!has_ascii_value()) {
    clear_rhs();
    set_has_ascii_value();
  }
  rhs_.ascii_value_ = value;
  // @@protoc_insertion_point(field_set:css_proto_converter.Escape.ascii_value)
}

inline bool Escape::has_rhs() const {
  return rhs_case() != RHS_NOT_SET;
}
inline void Escape::clear_has_rhs() {
  _oneof_case_[0] = RHS_NOT_SET;
}
inline Escape::RhsCase Escape::rhs_case() const {
  return Escape::RhsCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Nmstart

// optional .css_proto_converter.Nmstart.AsciiValue ascii_value = 1;
inline bool Nmstart::has_ascii_value() const {
  return rhs_case() == kAsciiValue;
}
inline void Nmstart::set_has_ascii_value() {
  _oneof_case_[0] = kAsciiValue;
}
inline void Nmstart::clear_ascii_value() {
  if (has_ascii_value()) {
    rhs_.ascii_value_ = 65;
    clear_has_rhs();
  }
}
inline ::css_proto_converter::Nmstart_AsciiValue Nmstart::ascii_value() const {
  // @@protoc_insertion_point(field_get:css_proto_converter.Nmstart.ascii_value)
  if (has_ascii_value()) {
    return static_cast< ::css_proto_converter::Nmstart_AsciiValue >(rhs_.ascii_value_);
  }
  return static_cast< ::css_proto_converter::Nmstart_AsciiValue >(65);
}
inline void Nmstart::set_ascii_value(::css_proto_converter::Nmstart_AsciiValue value) {
  assert(::css_proto_converter::Nmstart_AsciiValue_IsValid(value));
  if (!has_ascii_value()) {
    clear_rhs();
    set_has_ascii_value();
  }
  rhs_.ascii_value_ = value;
  // @@protoc_insertion_point(field_set:css_proto_converter.Nmstart.ascii_value)
}

// optional .css_proto_converter.Escape escape = 2;
inline bool Nmstart::has_escape() const {
  return rhs_case() == kEscape;
}
inline void Nmstart::set_has_escape() {
  _oneof_case_[0] = kEscape;
}
inline void Nmstart::clear_escape() {
  if (has_escape()) {
    delete rhs_.escape_;
    clear_has_rhs();
  }
}
inline const ::css_proto_converter::Escape& Nmstart::_internal_escape() const {
  return *rhs_.escape_;
}
inline ::css_proto_converter::Escape* Nmstart::release_escape() {
  // @@protoc_insertion_point(field_release:css_proto_converter.Nmstart.escape)
  if (has_escape()) {
    clear_has_rhs();
      ::css_proto_converter::Escape* temp = rhs_.escape_;
    rhs_.escape_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::css_proto_converter::Escape& Nmstart::escape() const {
  // @@protoc_insertion_point(field_get:css_proto_converter.Nmstart.escape)
  return has_escape()
      ? *rhs_.escape_
      : *reinterpret_cast< ::css_proto_converter::Escape*>(&::css_proto_converter::_Escape_default_instance_);
}
inline ::css_proto_converter::Escape* Nmstart::mutable_escape() {
  if (!has_escape()) {
    clear_rhs();
    set_has_escape();
    rhs_.escape_ = CreateMaybeMessage< ::css_proto_converter::Escape >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:css_proto_converter.Nmstart.escape)
  return rhs_.escape_;
}

inline bool Nmstart::has_rhs() const {
  return rhs_case() != RHS_NOT_SET;
}
inline void Nmstart::clear_has_rhs() {
  _oneof_case_[0] = RHS_NOT_SET;
}
inline Nmstart::RhsCase Nmstart::rhs_case() const {
  return Nmstart::RhsCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Nmchar

// optional .css_proto_converter.Nmchar.AsciiValue ascii_value = 1;
inline bool Nmchar::has_ascii_value() const {
  return rhs_case() == kAsciiValue;
}
inline void Nmchar::set_has_ascii_value() {
  _oneof_case_[0] = kAsciiValue;
}
inline void Nmchar::clear_ascii_value() {
  if (has_ascii_value()) {
    rhs_.ascii_value_ = 45;
    clear_has_rhs();
  }
}
inline ::css_proto_converter::Nmchar_AsciiValue Nmchar::ascii_value() const {
  // @@protoc_insertion_point(field_get:css_proto_converter.Nmchar.ascii_value)
  if (has_ascii_value()) {
    return static_cast< ::css_proto_converter::Nmchar_AsciiValue >(rhs_.ascii_value_);
  }
  return static_cast< ::css_proto_converter::Nmchar_AsciiValue >(45);
}
inline void Nmchar::set_ascii_value(::css_proto_converter::Nmchar_AsciiValue value) {
  assert(::css_proto_converter::Nmchar_AsciiValue_IsValid(value));
  if (!has_ascii_value()) {
    clear_rhs();
    set_has_ascii_value();
  }
  rhs_.ascii_value_ = value;
  // @@protoc_insertion_point(field_set:css_proto_converter.Nmchar.ascii_value)
}

// optional .css_proto_converter.Escape escape = 2;
inline bool Nmchar::has_escape() const {
  return rhs_case() == kEscape;
}
inline void Nmchar::set_has_escape() {
  _oneof_case_[0] = kEscape;
}
inline void Nmchar::clear_escape() {
  if (has_escape()) {
    delete rhs_.escape_;
    clear_has_rhs();
  }
}
inline const ::css_proto_converter::Escape& Nmchar::_internal_escape() const {
  return *rhs_.escape_;
}
inline ::css_proto_converter::Escape* Nmchar::release_escape() {
  // @@protoc_insertion_point(field_release:css_proto_converter.Nmchar.escape)
  if (has_escape()) {
    clear_has_rhs();
      ::css_proto_converter::Escape* temp = rhs_.escape_;
    rhs_.escape_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::css_proto_converter::Escape& Nmchar::escape() const {
  // @@protoc_insertion_point(field_get:css_proto_converter.Nmchar.escape)
  return has_escape()
      ? *rhs_.escape_
      : *reinterpret_cast< ::css_proto_converter::Escape*>(&::css_proto_converter::_Escape_default_instance_);
}
inline ::css_proto_converter::Escape* Nmchar::mutable_escape() {
  if (!has_escape()) {
    clear_rhs();
    set_has_escape();
    rhs_.escape_ = CreateMaybeMessage< ::css_proto_converter::Escape >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:css_proto_converter.Nmchar.escape)
  return rhs_.escape_;
}

inline bool Nmchar::has_rhs() const {
  return rhs_case() != RHS_NOT_SET;
}
inline void Nmchar::clear_has_rhs() {
  _oneof_case_[0] = RHS_NOT_SET;
}
inline Nmchar::RhsCase Nmchar::rhs_case() const {
  return Nmchar::RhsCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// String

// required bool use_single_quotes = 1;
inline bool String::has_use_single_quotes() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void String::set_has_use_single_quotes() {
  _has_bits_[0] |= 0x00000001u;
}
inline void String::clear_has_use_single_quotes() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void String::clear_use_single_quotes() {
  use_single_quotes_ = false;
  clear_has_use_single_quotes();
}
inline bool String::use_single_quotes() const {
  // @@protoc_insertion_point(field_get:css_proto_converter.String.use_single_quotes)
  return use_single_quotes_;
}
inline void String::set_use_single_quotes(bool value) {
  set_has_use_single_quotes();
  use_single_quotes_ = value;
  // @@protoc_insertion_point(field_set:css_proto_converter.String.use_single_quotes)
}

// repeated .css_proto_converter.StringCharOrQuote string_char_quotes = 2;
inline int String::string_char_quotes_size() const {
  return string_char_quotes_.size();
}
inline void String::clear_string_char_quotes() {
  string_char_quotes_.Clear();
}
inline ::css_proto_converter::StringCharOrQuote* String::mutable_string_char_quotes(int index) {
  // @@protoc_insertion_point(field_mutable:css_proto_converter.String.string_char_quotes)
  return string_char_quotes_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::css_proto_converter::StringCharOrQuote >*
String::mutable_string_char_quotes() {
  // @@protoc_insertion_point(field_mutable_list:css_proto_converter.String.string_char_quotes)
  return &string_char_quotes_;
}
inline const ::css_proto_converter::StringCharOrQuote& String::string_char_quotes(int index) const {
  // @@protoc_insertion_point(field_get:css_proto_converter.String.string_char_quotes)
  return string_char_quotes_.Get(index);
}
inline ::css_proto_converter::StringCharOrQuote* String::add_string_char_quotes() {
  // @@protoc_insertion_point(field_add:css_proto_converter.String.string_char_quotes)
  return string_char_quotes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::css_proto_converter::StringCharOrQuote >&
String::string_char_quotes() const {
  // @@protoc_insertion_point(field_list:css_proto_converter.String.string_char_quotes)
  return string_char_quotes_;
}

// -------------------------------------------------------------------

// StringCharOrQuote

// optional .css_proto_converter.StringChar string_char = 2;
inline bool StringCharOrQuote::has_string_char() const {
  return rhs_case() == kStringChar;
}
inline void StringCharOrQuote::set_has_string_char() {
  _oneof_case_[0] = kStringChar;
}
inline void StringCharOrQuote::clear_string_char() {
  if (has_string_char()) {
    delete rhs_.string_char_;
    clear_has_rhs();
  }
}
inline const ::css_proto_converter::StringChar& StringCharOrQuote::_internal_string_char() const {
  return *rhs_.string_char_;
}
inline ::css_proto_converter::StringChar* StringCharOrQuote::release_string_char() {
  // @@protoc_insertion_point(field_release:css_proto_converter.StringCharOrQuote.string_char)
  if (has_string_char()) {
    clear_has_rhs();
      ::css_proto_converter::StringChar* temp = rhs_.string_char_;
    rhs_.string_char_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::css_proto_converter::StringChar& StringCharOrQuote::string_char() const {
  // @@protoc_insertion_point(field_get:css_proto_converter.StringCharOrQuote.string_char)
  return has_string_char()
      ? *rhs_.string_char_
      : *reinterpret_cast< ::css_proto_converter::StringChar*>(&::css_proto_converter::_StringChar_default_instance_);
}
inline ::css_proto_converter::StringChar* StringCharOrQuote::mutable_string_char() {
  if (!has_string_char()) {
    clear_rhs();
    set_has_string_char();
    rhs_.string_char_ = CreateMaybeMessage< ::css_proto_converter::StringChar >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:css_proto_converter.StringCharOrQuote.string_char)
  return rhs_.string_char_;
}

// optional .css_proto_converter.StringCharOrQuote.QuoteChar quote_char = 1;
inline bool StringCharOrQuote::has_quote_char() const {
  return rhs_case() == kQuoteChar;
}
inline void StringCharOrQuote::set_has_quote_char() {
  _oneof_case_[0] = kQuoteChar;
}
inline void StringCharOrQuote::clear_quote_char() {
  if (has_quote_char()) {
    rhs_.quote_char_ = 0;
    clear_has_rhs();
  }
}
inline ::css_proto_converter::StringCharOrQuote_QuoteChar StringCharOrQuote::quote_char() const {
  // @@protoc_insertion_point(field_get:css_proto_converter.StringCharOrQuote.quote_char)
  if (has_quote_char()) {
    return static_cast< ::css_proto_converter::StringCharOrQuote_QuoteChar >(rhs_.quote_char_);
  }
  return static_cast< ::css_proto_converter::StringCharOrQuote_QuoteChar >(0);
}
inline void StringCharOrQuote::set_quote_char(::css_proto_converter::StringCharOrQuote_QuoteChar value) {
  assert(::css_proto_converter::StringCharOrQuote_QuoteChar_IsValid(value));
  if (!has_quote_char()) {
    clear_rhs();
    set_has_quote_char();
  }
  rhs_.quote_char_ = value;
  // @@protoc_insertion_point(field_set:css_proto_converter.StringCharOrQuote.quote_char)
}

inline bool StringCharOrQuote::has_rhs() const {
  return rhs_case() != RHS_NOT_SET;
}
inline void StringCharOrQuote::clear_has_rhs() {
  _oneof_case_[0] = RHS_NOT_SET;
}
inline StringCharOrQuote::RhsCase StringCharOrQuote::rhs_case() const {
  return StringCharOrQuote::RhsCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// StringChar

// optional .css_proto_converter.UrlChar url_char = 1;
inline bool StringChar::has_url_char() const {
  return rhs_case() == kUrlChar;
}
inline void StringChar::set_has_url_char() {
  _oneof_case_[0] = kUrlChar;
}
inline void StringChar::clear_url_char() {
  if (has_url_char()) {
    delete rhs_.url_char_;
    clear_has_rhs();
  }
}
inline const ::css_proto_converter::UrlChar& StringChar::_internal_url_char() const {
  return *rhs_.url_char_;
}
inline ::css_proto_converter::UrlChar* StringChar::release_url_char() {
  // @@protoc_insertion_point(field_release:css_proto_converter.StringChar.url_char)
  if (has_url_char()) {
    clear_has_rhs();
      ::css_proto_converter::UrlChar* temp = rhs_.url_char_;
    rhs_.url_char_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::css_proto_converter::UrlChar& StringChar::url_char() const {
  // @@protoc_insertion_point(field_get:css_proto_converter.StringChar.url_char)
  return has_url_char()
      ? *rhs_.url_char_
      : *reinterpret_cast< ::css_proto_converter::UrlChar*>(&::css_proto_converter::_UrlChar_default_instance_);
}
inline ::css_proto_converter::UrlChar* StringChar::mutable_url_char() {
  if (!has_url_char()) {
    clear_rhs();
    set_has_url_char();
    rhs_.url_char_ = CreateMaybeMessage< ::css_proto_converter::UrlChar >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:css_proto_converter.StringChar.url_char)
  return rhs_.url_char_;
}

// optional .css_proto_converter.StringChar.Space space = 2;
inline bool StringChar::has_space() const {
  return rhs_case() == kSpace;
}
inline void StringChar::set_has_space() {
  _oneof_case_[0] = kSpace;
}
inline void StringChar::clear_space() {
  if (has_space()) {
    rhs_.space_ = 0;
    clear_has_rhs();
  }
}
inline ::css_proto_converter::StringChar_Space StringChar::space() const {
  // @@protoc_insertion_point(field_get:css_proto_converter.StringChar.space)
  if (has_space()) {
    return static_cast< ::css_proto_converter::StringChar_Space >(rhs_.space_);
  }
  return static_cast< ::css_proto_converter::StringChar_Space >(0);
}
inline void StringChar::set_space(::css_proto_converter::StringChar_Space value) {
  assert(::css_proto_converter::StringChar_Space_IsValid(value));
  if (!has_space()) {
    clear_rhs();
    set_has_space();
  }
  rhs_.space_ = value;
  // @@protoc_insertion_point(field_set:css_proto_converter.StringChar.space)
}

// optional .css_proto_converter.Nl nl = 3;
inline bool StringChar::has_nl() const {
  return rhs_case() == kNl;
}
inline void StringChar::set_has_nl() {
  _oneof_case_[0] = kNl;
}
inline void StringChar::clear_nl() {
  if (has_nl()) {
    delete rhs_.nl_;
    clear_has_rhs();
  }
}
inline const ::css_proto_converter::Nl& StringChar::_internal_nl() const {
  return *rhs_.nl_;
}
inline ::css_proto_converter::Nl* StringChar::release_nl() {
  // @@protoc_insertion_point(field_release:css_proto_converter.StringChar.nl)
  if (has_nl()) {
    clear_has_rhs();
      ::css_proto_converter::Nl* temp = rhs_.nl_;
    rhs_.nl_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::css_proto_converter::Nl& StringChar::nl() const {
  // @@protoc_insertion_point(field_get:css_proto_converter.StringChar.nl)
  return has_nl()
      ? *rhs_.nl_
      : *reinterpret_cast< ::css_proto_converter::Nl*>(&::css_proto_converter::_Nl_default_instance_);
}
inline ::css_proto_converter::Nl* StringChar::mutable_nl() {
  if (!has_nl()) {
    clear_rhs();
    set_has_nl();
    rhs_.nl_ = CreateMaybeMessage< ::css_proto_converter::Nl >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:css_proto_converter.StringChar.nl)
  return rhs_.nl_;
}

inline bool StringChar::has_rhs() const {
  return rhs_case() != RHS_NOT_SET;
}
inline void StringChar::clear_has_rhs() {
  _oneof_case_[0] = RHS_NOT_SET;
}
inline StringChar::RhsCase StringChar::rhs_case() const {
  return StringChar::RhsCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Ident

// optional bool starting_minus = 1 [default = false];
inline bool Ident::has_starting_minus() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ident::set_has_starting_minus() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Ident::clear_has_starting_minus() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Ident::clear_starting_minus() {
  starting_minus_ = false;
  clear_has_starting_minus();
}
inline bool Ident::starting_minus() const {
  // @@protoc_insertion_point(field_get:css_proto_converter.Ident.starting_minus)
  return starting_minus_;
}
inline void Ident::set_starting_minus(bool value) {
  set_has_starting_minus();
  starting_minus_ = value;
  // @@protoc_insertion_point(field_set:css_proto_converter.Ident.starting_minus)
}

// required .css_proto_converter.Nmstart nmstart = 2;
inline bool Ident::has_nmstart() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ident::set_has_nmstart() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Ident::clear_has_nmstart() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Ident::clear_nmstart() {
  if (nmstart_ != NULL) nmstart_->Clear();
  clear_has_nmstart();
}
inline const ::css_proto_converter::Nmstart& Ident::_internal_nmstart() const {
  return *nmstart_;
}
inline const ::css_proto_converter::Nmstart& Ident::nmstart() const {
  const ::css_proto_converter::Nmstart* p = nmstart_;
  // @@protoc_insertion_point(field_get:css_proto_converter.Ident.nmstart)
  return p != NULL ? *p : *reinterpret_cast<const ::css_proto_converter::Nmstart*>(
      &::css_proto_converter::_Nmstart_default_instance_);
}
inline ::css_proto_converter::Nmstart* Ident::release_nmstart() {
  // @@protoc_insertion_point(field_release:css_proto_converter.Ident.nmstart)
  clear_has_nmstart();
  ::css_proto_converter::Nmstart* temp = nmstart_;
  nmstart_ = NULL;
  return temp;
}
inline ::css_proto_converter::Nmstart* Ident::mutable_nmstart() {
  set_has_nmstart();
  if (nmstart_ == NULL) {
    auto* p = CreateMaybeMessage<::css_proto_converter::Nmstart>(GetArenaNoVirtual());
    nmstart_ = p;
  }
  // @@protoc_insertion_point(field_mutable:css_proto_converter.Ident.nmstart)
  return nmstart_;
}
inline void Ident::set_allocated_nmstart(::css_proto_converter::Nmstart* nmstart) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete nmstart_;
  }
  if (nmstart) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      nmstart = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, nmstart, submessage_arena);
    }
    set_has_nmstart();
  } else {
    clear_has_nmstart();
  }
  nmstart_ = nmstart;
  // @@protoc_insertion_point(field_set_allocated:css_proto_converter.Ident.nmstart)
}

// repeated .css_proto_converter.Nmchar nmchars = 3;
inline int Ident::nmchars_size() const {
  return nmchars_.size();
}
inline void Ident::clear_nmchars() {
  nmchars_.Clear();
}
inline ::css_proto_converter::Nmchar* Ident::mutable_nmchars(int index) {
  // @@protoc_insertion_point(field_mutable:css_proto_converter.Ident.nmchars)
  return nmchars_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::css_proto_converter::Nmchar >*
Ident::mutable_nmchars() {
  // @@protoc_insertion_point(field_mutable_list:css_proto_converter.Ident.nmchars)
  return &nmchars_;
}
inline const ::css_proto_converter::Nmchar& Ident::nmchars(int index) const {
  // @@protoc_insertion_point(field_get:css_proto_converter.Ident.nmchars)
  return nmchars_.Get(index);
}
inline ::css_proto_converter::Nmchar* Ident::add_nmchars() {
  // @@protoc_insertion_point(field_add:css_proto_converter.Ident.nmchars)
  return nmchars_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::css_proto_converter::Nmchar >&
Ident::nmchars() const {
  // @@protoc_insertion_point(field_list:css_proto_converter.Ident.nmchars)
  return nmchars_;
}

// -------------------------------------------------------------------

// Num

// required sint64 signed_int_value = 1;
inline bool Num::has_signed_int_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Num::set_has_signed_int_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Num::clear_has_signed_int_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Num::clear_signed_int_value() {
  signed_int_value_ = GOOGLE_LONGLONG(0);
  clear_has_signed_int_value();
}
inline ::google::protobuf::int64 Num::signed_int_value() const {
  // @@protoc_insertion_point(field_get:css_proto_converter.Num.signed_int_value)
  return signed_int_value_;
}
inline void Num::set_signed_int_value(::google::protobuf::int64 value) {
  set_has_signed_int_value();
  signed_int_value_ = value;
  // @@protoc_insertion_point(field_set:css_proto_converter.Num.signed_int_value)
}

// optional float float_value = 2;
inline bool Num::has_float_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Num::set_has_float_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Num::clear_has_float_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Num::clear_float_value() {
  float_value_ = 0;
  clear_has_float_value();
}
inline float Num::float_value() const {
  // @@protoc_insertion_point(field_get:css_proto_converter.Num.float_value)
  return float_value_;
}
inline void Num::set_float_value(float value) {
  set_has_float_value();
  float_value_ = value;
  // @@protoc_insertion_point(field_set:css_proto_converter.Num.float_value)
}

// -------------------------------------------------------------------

// UrlChar

// optional .css_proto_converter.UrlChar.AsciiValue ascii_value = 1;
inline bool UrlChar::has_ascii_value() const {
  return rhs_case() == kAsciiValue;
}
inline void UrlChar::set_has_ascii_value() {
  _oneof_case_[0] = kAsciiValue;
}
inline void UrlChar::clear_ascii_value() {
  if (has_ascii_value()) {
    rhs_.ascii_value_ = 0;
    clear_has_rhs();
  }
}
inline ::css_proto_converter::UrlChar_AsciiValue UrlChar::ascii_value() const {
  // @@protoc_insertion_point(field_get:css_proto_converter.UrlChar.ascii_value)
  if (has_ascii_value()) {
    return static_cast< ::css_proto_converter::UrlChar_AsciiValue >(rhs_.ascii_value_);
  }
  return static_cast< ::css_proto_converter::UrlChar_AsciiValue >(0);
}
inline void UrlChar::set_ascii_value(::css_proto_converter::UrlChar_AsciiValue value) {
  assert(::css_proto_converter::UrlChar_AsciiValue_IsValid(value));
  if (!has_ascii_value()) {
    clear_rhs();
    set_has_ascii_value();
  }
  rhs_.ascii_value_ = value;
  // @@protoc_insertion_point(field_set:css_proto_converter.UrlChar.ascii_value)
}

// optional .css_proto_converter.Escape escape = 2;
inline bool UrlChar::has_escape() const {
  return rhs_case() == kEscape;
}
inline void UrlChar::set_has_escape() {
  _oneof_case_[0] = kEscape;
}
inline void UrlChar::clear_escape() {
  if (has_escape()) {
    delete rhs_.escape_;
    clear_has_rhs();
  }
}
inline const ::css_proto_converter::Escape& UrlChar::_internal_escape() const {
  return *rhs_.escape_;
}
inline ::css_proto_converter::Escape* UrlChar::release_escape() {
  // @@protoc_insertion_point(field_release:css_proto_converter.UrlChar.escape)
  if (has_escape()) {
    clear_has_rhs();
      ::css_proto_converter::Escape* temp = rhs_.escape_;
    rhs_.escape_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::css_proto_converter::Escape& UrlChar::escape() const {
  // @@protoc_insertion_point(field_get:css_proto_converter.UrlChar.escape)
  return has_escape()
      ? *rhs_.escape_
      : *reinterpret_cast< ::css_proto_converter::Escape*>(&::css_proto_converter::_Escape_default_instance_);
}
inline ::css_proto_converter::Escape* UrlChar::mutable_escape() {
  if (!has_escape()) {
    clear_rhs();
    set_has_escape();
    rhs_.escape_ = CreateMaybeMessage< ::css_proto_converter::Escape >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:css_proto_converter.UrlChar.escape)
  return rhs_.escape_;
}

inline bool UrlChar::has_rhs() const {
  return rhs_case() != RHS_NOT_SET;
}
inline void UrlChar::clear_has_rhs() {
  _oneof_case_[0] = RHS_NOT_SET;
}
inline UrlChar::RhsCase UrlChar::rhs_case() const {
  return UrlChar::RhsCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// W

// repeated .css_proto_converter.UnrepeatedW unrepeated_w = 1;
inline int W::unrepeated_w_size() const {
  return unrepeated_w_.size();
}
inline void W::clear_unrepeated_w() {
  unrepeated_w_.Clear();
}
inline ::css_proto_converter::UnrepeatedW* W::mutable_unrepeated_w(int index) {
  // @@protoc_insertion_point(field_mutable:css_proto_converter.W.unrepeated_w)
  return unrepeated_w_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::css_proto_converter::UnrepeatedW >*
W::mutable_unrepeated_w() {
  // @@protoc_insertion_point(field_mutable_list:css_proto_converter.W.unrepeated_w)
  return &unrepeated_w_;
}
inline const ::css_proto_converter::UnrepeatedW& W::unrepeated_w(int index) const {
  // @@protoc_insertion_point(field_get:css_proto_converter.W.unrepeated_w)
  return unrepeated_w_.Get(index);
}
inline ::css_proto_converter::UnrepeatedW* W::add_unrepeated_w() {
  // @@protoc_insertion_point(field_add:css_proto_converter.W.unrepeated_w)
  return unrepeated_w_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::css_proto_converter::UnrepeatedW >&
W::unrepeated_w() const {
  // @@protoc_insertion_point(field_list:css_proto_converter.W.unrepeated_w)
  return unrepeated_w_;
}

// -------------------------------------------------------------------

// UnrepeatedW

// required .css_proto_converter.UnrepeatedW.AsciiValue ascii_value = 1;
inline bool UnrepeatedW::has_ascii_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UnrepeatedW::set_has_ascii_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UnrepeatedW::clear_has_ascii_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UnrepeatedW::clear_ascii_value() {
  ascii_value_ = 9;
  clear_has_ascii_value();
}
inline ::css_proto_converter::UnrepeatedW_AsciiValue UnrepeatedW::ascii_value() const {
  // @@protoc_insertion_point(field_get:css_proto_converter.UnrepeatedW.ascii_value)
  return static_cast< ::css_proto_converter::UnrepeatedW_AsciiValue >(ascii_value_);
}
inline void UnrepeatedW::set_ascii_value(::css_proto_converter::UnrepeatedW_AsciiValue value) {
  assert(::css_proto_converter::UnrepeatedW_AsciiValue_IsValid(value));
  set_has_ascii_value();
  ascii_value_ = value;
  // @@protoc_insertion_point(field_set:css_proto_converter.UnrepeatedW.ascii_value)
}

// -------------------------------------------------------------------

// Nl

// required .css_proto_converter.Nl.NewlineKind newline_kind = 1;
inline bool Nl::has_newline_kind() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Nl::set_has_newline_kind() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Nl::clear_has_newline_kind() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Nl::clear_newline_kind() {
  newline_kind_ = 10;
  clear_has_newline_kind();
}
inline ::css_proto_converter::Nl_NewlineKind Nl::newline_kind() const {
  // @@protoc_insertion_point(field_get:css_proto_converter.Nl.newline_kind)
  return static_cast< ::css_proto_converter::Nl_NewlineKind >(newline_kind_);
}
inline void Nl::set_newline_kind(::css_proto_converter::Nl_NewlineKind value) {
  assert(::css_proto_converter::Nl_NewlineKind_IsValid(value));
  set_has_newline_kind();
  newline_kind_ = value;
  // @@protoc_insertion_point(field_set:css_proto_converter.Nl.newline_kind)
}

// -------------------------------------------------------------------

// Length

// required .css_proto_converter.Num num = 1;
inline bool Length::has_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Length::set_has_num() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Length::clear_has_num() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Length::clear_num() {
  if (num_ != NULL) num_->Clear();
  clear_has_num();
}
inline const ::css_proto_converter::Num& Length::_internal_num() const {
  return *num_;
}
inline const ::css_proto_converter::Num& Length::num() const {
  const ::css_proto_converter::Num* p = num_;
  // @@protoc_insertion_point(field_get:css_proto_converter.Length.num)
  return p != NULL ? *p : *reinterpret_cast<const ::css_proto_converter::Num*>(
      &::css_proto_converter::_Num_default_instance_);
}
inline ::css_proto_converter::Num* Length::release_num() {
  // @@protoc_insertion_point(field_release:css_proto_converter.Length.num)
  clear_has_num();
  ::css_proto_converter::Num* temp = num_;
  num_ = NULL;
  return temp;
}
inline ::css_proto_converter::Num* Length::mutable_num() {
  set_has_num();
  if (num_ == NULL) {
    auto* p = CreateMaybeMessage<::css_proto_converter::Num>(GetArenaNoVirtual());
    num_ = p;
  }
  // @@protoc_insertion_point(field_mutable:css_proto_converter.Length.num)
  return num_;
}
inline void Length::set_allocated_num(::css_proto_converter::Num* num) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete num_;
  }
  if (num) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      num = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, num, submessage_arena);
    }
    set_has_num();
  } else {
    clear_has_num();
  }
  num_ = num;
  // @@protoc_insertion_point(field_set_allocated:css_proto_converter.Length.num)
}

// required .css_proto_converter.Length.Unit unit = 2;
inline bool Length::has_unit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Length::set_has_unit() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Length::clear_has_unit() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Length::clear_unit() {
  unit_ = 1;
  clear_has_unit();
}
inline ::css_proto_converter::Length_Unit Length::unit() const {
  // @@protoc_insertion_point(field_get:css_proto_converter.Length.unit)
  return static_cast< ::css_proto_converter::Length_Unit >(unit_);
}
inline void Length::set_unit(::css_proto_converter::Length_Unit value) {
  assert(::css_proto_converter::Length_Unit_IsValid(value));
  set_has_unit();
  unit_ = value;
  // @@protoc_insertion_point(field_set:css_proto_converter.Length.unit)
}

// -------------------------------------------------------------------

// Angle

// required .css_proto_converter.Num num = 1;
inline bool Angle::has_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Angle::set_has_num() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Angle::clear_has_num() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Angle::clear_num() {
  if (num_ != NULL) num_->Clear();
  clear_has_num();
}
inline const ::css_proto_converter::Num& Angle::_internal_num() const {
  return *num_;
}
inline const ::css_proto_converter::Num& Angle::num() const {
  const ::css_proto_converter::Num* p = num_;
  // @@protoc_insertion_point(field_get:css_proto_converter.Angle.num)
  return p != NULL ? *p : *reinterpret_cast<const ::css_proto_converter::Num*>(
      &::css_proto_converter::_Num_default_instance_);
}
inline ::css_proto_converter::Num* Angle::release_num() {
  // @@protoc_insertion_point(field_release:css_proto_converter.Angle.num)
  clear_has_num();
  ::css_proto_converter::Num* temp = num_;
  num_ = NULL;
  return temp;
}
inline ::css_proto_converter::Num* Angle::mutable_num() {
  set_has_num();
  if (num_ == NULL) {
    auto* p = CreateMaybeMessage<::css_proto_converter::Num>(GetArenaNoVirtual());
    num_ = p;
  }
  // @@protoc_insertion_point(field_mutable:css_proto_converter.Angle.num)
  return num_;
}
inline void Angle::set_allocated_num(::css_proto_converter::Num* num) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete num_;
  }
  if (num) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      num = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, num, submessage_arena);
    }
    set_has_num();
  } else {
    clear_has_num();
  }
  num_ = num;
  // @@protoc_insertion_point(field_set_allocated:css_proto_converter.Angle.num)
}

// required .css_proto_converter.Angle.Unit unit = 2;
inline bool Angle::has_unit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Angle::set_has_unit() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Angle::clear_has_unit() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Angle::clear_unit() {
  unit_ = 1;
  clear_has_unit();
}
inline ::css_proto_converter::Angle_Unit Angle::unit() const {
  // @@protoc_insertion_point(field_get:css_proto_converter.Angle.unit)
  return static_cast< ::css_proto_converter::Angle_Unit >(unit_);
}
inline void Angle::set_unit(::css_proto_converter::Angle_Unit value) {
  assert(::css_proto_converter::Angle_Unit_IsValid(value));
  set_has_unit();
  unit_ = value;
  // @@protoc_insertion_point(field_set:css_proto_converter.Angle.unit)
}

// -------------------------------------------------------------------

// Time

// required .css_proto_converter.Num num = 1;
inline bool Time::has_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Time::set_has_num() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Time::clear_has_num() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Time::clear_num() {
  if (num_ != NULL) num_->Clear();
  clear_has_num();
}
inline const ::css_proto_converter::Num& Time::_internal_num() const {
  return *num_;
}
inline const ::css_proto_converter::Num& Time::num() const {
  const ::css_proto_converter::Num* p = num_;
  // @@protoc_insertion_point(field_get:css_proto_converter.Time.num)
  return p != NULL ? *p : *reinterpret_cast<const ::css_proto_converter::Num*>(
      &::css_proto_converter::_Num_default_instance_);
}
inline ::css_proto_converter::Num* Time::release_num() {
  // @@protoc_insertion_point(field_release:css_proto_converter.Time.num)
  clear_has_num();
  ::css_proto_converter::Num* temp = num_;
  num_ = NULL;
  return temp;
}
inline ::css_proto_converter::Num* Time::mutable_num() {
  set_has_num();
  if (num_ == NULL) {
    auto* p = CreateMaybeMessage<::css_proto_converter::Num>(GetArenaNoVirtual());
    num_ = p;
  }
  // @@protoc_insertion_point(field_mutable:css_proto_converter.Time.num)
  return num_;
}
inline void Time::set_allocated_num(::css_proto_converter::Num* num) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete num_;
  }
  if (num) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      num = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, num, submessage_arena);
    }
    set_has_num();
  } else {
    clear_has_num();
  }
  num_ = num;
  // @@protoc_insertion_point(field_set_allocated:css_proto_converter.Time.num)
}

// required .css_proto_converter.Time.Unit unit = 2;
inline bool Time::has_unit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Time::set_has_unit() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Time::clear_has_unit() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Time::clear_unit() {
  unit_ = 1;
  clear_has_unit();
}
inline ::css_proto_converter::Time_Unit Time::unit() const {
  // @@protoc_insertion_point(field_get:css_proto_converter.Time.unit)
  return static_cast< ::css_proto_converter::Time_Unit >(unit_);
}
inline void Time::set_unit(::css_proto_converter::Time_Unit value) {
  assert(::css_proto_converter::Time_Unit_IsValid(value));
  set_has_unit();
  unit_ = value;
  // @@protoc_insertion_point(field_set:css_proto_converter.Time.unit)
}

// -------------------------------------------------------------------

// Freq

// required .css_proto_converter.Num num = 1;
inline bool Freq::has_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Freq::set_has_num() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Freq::clear_has_num() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Freq::clear_num() {
  if (num_ != NULL) num_->Clear();
  clear_has_num();
}
inline const ::css_proto_converter::Num& Freq::_internal_num() const {
  return *num_;
}
inline const ::css_proto_converter::Num& Freq::num() const {
  const ::css_proto_converter::Num* p = num_;
  // @@protoc_insertion_point(field_get:css_proto_converter.Freq.num)
  return p != NULL ? *p : *reinterpret_cast<const ::css_proto_converter::Num*>(
      &::css_proto_converter::_Num_default_instance_);
}
inline ::css_proto_converter::Num* Freq::release_num() {
  // @@protoc_insertion_point(field_release:css_proto_converter.Freq.num)
  clear_has_num();
  ::css_proto_converter::Num* temp = num_;
  num_ = NULL;
  return temp;
}
inline ::css_proto_converter::Num* Freq::mutable_num() {
  set_has_num();
  if (num_ == NULL) {
    auto* p = CreateMaybeMessage<::css_proto_converter::Num>(GetArenaNoVirtual());
    num_ = p;
  }
  // @@protoc_insertion_point(field_mutable:css_proto_converter.Freq.num)
  return num_;
}
inline void Freq::set_allocated_num(::css_proto_converter::Num* num) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete num_;
  }
  if (num) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      num = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, num, submessage_arena);
    }
    set_has_num();
  } else {
    clear_has_num();
  }
  num_ = num;
  // @@protoc_insertion_point(field_set_allocated:css_proto_converter.Freq.num)
}

// required .css_proto_converter.Freq.Unit unit = 2;
inline bool Freq::has_unit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Freq::set_has_unit() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Freq::clear_has_unit() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Freq::clear_unit() {
  unit_ = 1;
  clear_has_unit();
}
inline ::css_proto_converter::Freq_Unit Freq::unit() const {
  // @@protoc_insertion_point(field_get:css_proto_converter.Freq.unit)
  return static_cast< ::css_proto_converter::Freq_Unit >(unit_);
}
inline void Freq::set_unit(::css_proto_converter::Freq_Unit value) {
  assert(::css_proto_converter::Freq_Unit_IsValid(value));
  set_has_unit();
  unit_ = value;
  // @@protoc_insertion_point(field_set:css_proto_converter.Freq.unit)
}

// -------------------------------------------------------------------

// Uri

// -------------------------------------------------------------------

// FunctionToken

// required .css_proto_converter.Ident ident = 1;
inline bool FunctionToken::has_ident() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FunctionToken::set_has_ident() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FunctionToken::clear_has_ident() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FunctionToken::clear_ident() {
  if (ident_ != NULL) ident_->Clear();
  clear_has_ident();
}
inline const ::css_proto_converter::Ident& FunctionToken::_internal_ident() const {
  return *ident_;
}
inline const ::css_proto_converter::Ident& FunctionToken::ident() const {
  const ::css_proto_converter::Ident* p = ident_;
  // @@protoc_insertion_point(field_get:css_proto_converter.FunctionToken.ident)
  return p != NULL ? *p : *reinterpret_cast<const ::css_proto_converter::Ident*>(
      &::css_proto_converter::_Ident_default_instance_);
}
inline ::css_proto_converter::Ident* FunctionToken::release_ident() {
  // @@protoc_insertion_point(field_release:css_proto_converter.FunctionToken.ident)
  clear_has_ident();
  ::css_proto_converter::Ident* temp = ident_;
  ident_ = NULL;
  return temp;
}
inline ::css_proto_converter::Ident* FunctionToken::mutable_ident() {
  set_has_ident();
  if (ident_ == NULL) {
    auto* p = CreateMaybeMessage<::css_proto_converter::Ident>(GetArenaNoVirtual());
    ident_ = p;
  }
  // @@protoc_insertion_point(field_mutable:css_proto_converter.FunctionToken.ident)
  return ident_;
}
inline void FunctionToken::set_allocated_ident(::css_proto_converter::Ident* ident) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete ident_;
  }
  if (ident) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ident = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ident, submessage_arena);
    }
    set_has_ident();
  } else {
    clear_has_ident();
  }
  ident_ = ident;
  // @@protoc_insertion_point(field_set_allocated:css_proto_converter.FunctionToken.ident)
}

// -------------------------------------------------------------------

// StyleSheet

// optional .css_proto_converter.CharsetDeclaration charset_declaration = 1;
inline bool StyleSheet::has_charset_declaration() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StyleSheet::set_has_charset_declaration() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StyleSheet::clear_has_charset_declaration() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StyleSheet::clear_charset_declaration() {
  if (charset_declaration_ != NULL) charset_declaration_->Clear();
  clear_has_charset_declaration();
}
inline const ::css_proto_converter::CharsetDeclaration& StyleSheet::_internal_charset_declaration() const {
  return *charset_declaration_;
}
inline const ::css_proto_converter::CharsetDeclaration& StyleSheet::charset_declaration() const {
  const ::css_proto_converter::CharsetDeclaration* p = charset_declaration_;
  // @@protoc_insertion_point(field_get:css_proto_converter.StyleSheet.charset_declaration)
  return p != NULL ? *p : *reinterpret_cast<const ::css_proto_converter::CharsetDeclaration*>(
      &::css_proto_converter::_CharsetDeclaration_default_instance_);
}
inline ::css_proto_converter::CharsetDeclaration* StyleSheet::release_charset_declaration() {
  // @@protoc_insertion_point(field_release:css_proto_converter.StyleSheet.charset_declaration)
  clear_has_charset_declaration();
  ::css_proto_converter::CharsetDeclaration* temp = charset_declaration_;
  charset_declaration_ = NULL;
  return temp;
}
inline ::css_proto_converter::CharsetDeclaration* StyleSheet::mutable_charset_declaration() {
  set_has_charset_declaration();
  if (charset_declaration_ == NULL) {
    auto* p = CreateMaybeMessage<::css_proto_converter::CharsetDeclaration>(GetArenaNoVirtual());
    charset_declaration_ = p;
  }
  // @@protoc_insertion_point(field_mutable:css_proto_converter.StyleSheet.charset_declaration)
  return charset_declaration_;
}
inline void StyleSheet::set_allocated_charset_declaration(::css_proto_converter::CharsetDeclaration* charset_declaration) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete charset_declaration_;
  }
  if (charset_declaration) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      charset_declaration = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, charset_declaration, submessage_arena);
    }
    set_has_charset_declaration();
  } else {
    clear_has_charset_declaration();
  }
  charset_declaration_ = charset_declaration;
  // @@protoc_insertion_point(field_set_allocated:css_proto_converter.StyleSheet.charset_declaration)
}

// repeated .css_proto_converter.Import imports = 2;
inline int StyleSheet::imports_size() const {
  return imports_.size();
}
inline void StyleSheet::clear_imports() {
  imports_.Clear();
}
inline ::css_proto_converter::Import* StyleSheet::mutable_imports(int index) {
  // @@protoc_insertion_point(field_mutable:css_proto_converter.StyleSheet.imports)
  return imports_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::css_proto_converter::Import >*
StyleSheet::mutable_imports() {
  // @@protoc_insertion_point(field_mutable_list:css_proto_converter.StyleSheet.imports)
  return &imports_;
}
inline const ::css_proto_converter::Import& StyleSheet::imports(int index) const {
  // @@protoc_insertion_point(field_get:css_proto_converter.StyleSheet.imports)
  return imports_.Get(index);
}
inline ::css_proto_converter::Import* StyleSheet::add_imports() {
  // @@protoc_insertion_point(field_add:css_proto_converter.StyleSheet.imports)
  return imports_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::css_proto_converter::Import >&
StyleSheet::imports() const {
  // @@protoc_insertion_point(field_list:css_proto_converter.StyleSheet.imports)
  return imports_;
}

// repeated .css_proto_converter.Namespace namespaces = 3;
inline int StyleSheet::namespaces_size() const {
  return namespaces_.size();
}
inline void StyleSheet::clear_namespaces() {
  namespaces_.Clear();
}
inline ::css_proto_converter::Namespace* StyleSheet::mutable_namespaces(int index) {
  // @@protoc_insertion_point(field_mutable:css_proto_converter.StyleSheet.namespaces)
  return namespaces_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::css_proto_converter::Namespace >*
StyleSheet::mutable_namespaces() {
  // @@protoc_insertion_point(field_mutable_list:css_proto_converter.StyleSheet.namespaces)
  return &namespaces_;
}
inline const ::css_proto_converter::Namespace& StyleSheet::namespaces(int index) const {
  // @@protoc_insertion_point(field_get:css_proto_converter.StyleSheet.namespaces)
  return namespaces_.Get(index);
}
inline ::css_proto_converter::Namespace* StyleSheet::add_namespaces() {
  // @@protoc_insertion_point(field_add:css_proto_converter.StyleSheet.namespaces)
  return namespaces_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::css_proto_converter::Namespace >&
StyleSheet::namespaces() const {
  // @@protoc_insertion_point(field_list:css_proto_converter.StyleSheet.namespaces)
  return namespaces_;
}

// repeated .css_proto_converter.NestedAtRule nested_at_rules = 4;
inline int StyleSheet::nested_at_rules_size() const {
  return nested_at_rules_.size();
}
inline void StyleSheet::clear_nested_at_rules() {
  nested_at_rules_.Clear();
}
inline ::css_proto_converter::NestedAtRule* StyleSheet::mutable_nested_at_rules(int index) {
  // @@protoc_insertion_point(field_mutable:css_proto_converter.StyleSheet.nested_at_rules)
  return nested_at_rules_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::css_proto_converter::NestedAtRule >*
StyleSheet::mutable_nested_at_rules() {
  // @@protoc_insertion_point(field_mutable_list:css_proto_converter.StyleSheet.nested_at_rules)
  return &nested_at_rules_;
}
inline const ::css_proto_converter::NestedAtRule& StyleSheet::nested_at_rules(int index) const {
  // @@protoc_insertion_point(field_get:css_proto_converter.StyleSheet.nested_at_rules)
  return nested_at_rules_.Get(index);
}
inline ::css_proto_converter::NestedAtRule* StyleSheet::add_nested_at_rules() {
  // @@protoc_insertion_point(field_add:css_proto_converter.StyleSheet.nested_at_rules)
  return nested_at_rules_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::css_proto_converter::NestedAtRule >&
StyleSheet::nested_at_rules() const {
  // @@protoc_insertion_point(field_list:css_proto_converter.StyleSheet.nested_at_rules)
  return nested_at_rules_;
}

// -------------------------------------------------------------------

// CharsetDeclaration

// required .css_proto_converter.CharsetDeclaration.EncodingId encoding_id = 1;
inline bool CharsetDeclaration::has_encoding_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CharsetDeclaration::set_has_encoding_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CharsetDeclaration::clear_has_encoding_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CharsetDeclaration::clear_encoding_id() {
  encoding_id_ = 1;
  clear_has_encoding_id();
}
inline ::css_proto_converter::CharsetDeclaration_EncodingId CharsetDeclaration::encoding_id() const {
  // @@protoc_insertion_point(field_get:css_proto_converter.CharsetDeclaration.encoding_id)
  return static_cast< ::css_proto_converter::CharsetDeclaration_EncodingId >(encoding_id_);
}
inline void CharsetDeclaration::set_encoding_id(::css_proto_converter::CharsetDeclaration_EncodingId value) {
  assert(::css_proto_converter::CharsetDeclaration_EncodingId_IsValid(value));
  set_has_encoding_id();
  encoding_id_ = value;
  // @@protoc_insertion_point(field_set:css_proto_converter.CharsetDeclaration.encoding_id)
}

// -------------------------------------------------------------------

// NestedAtRule

// optional .css_proto_converter.Ruleset ruleset = 1;
inline bool NestedAtRule::has_ruleset() const {
  return rhs_case() == kRuleset;
}
inline void NestedAtRule::set_has_ruleset() {
  _oneof_case_[0] = kRuleset;
}
inline void NestedAtRule::clear_ruleset() {
  if (has_ruleset()) {
    delete rhs_.ruleset_;
    clear_has_rhs();
  }
}
inline const ::css_proto_converter::Ruleset& NestedAtRule::_internal_ruleset() const {
  return *rhs_.ruleset_;
}
inline ::css_proto_converter::Ruleset* NestedAtRule::release_ruleset() {
  // @@protoc_insertion_point(field_release:css_proto_converter.NestedAtRule.ruleset)
  if (has_ruleset()) {
    clear_has_rhs();
      ::css_proto_converter::Ruleset* temp = rhs_.ruleset_;
    rhs_.ruleset_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::css_proto_converter::Ruleset& NestedAtRule::ruleset() const {
  // @@protoc_insertion_point(field_get:css_proto_converter.NestedAtRule.ruleset)
  return has_ruleset()
      ? *rhs_.ruleset_
      : *reinterpret_cast< ::css_proto_converter::Ruleset*>(&::css_proto_converter::_Ruleset_default_instance_);
}
inline ::css_proto_converter::Ruleset* NestedAtRule::mutable_ruleset() {
  if (!has_ruleset()) {
    clear_rhs();
    set_has_ruleset();
    rhs_.ruleset_ = CreateMaybeMessage< ::css_proto_converter::Ruleset >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:css_proto_converter.NestedAtRule.ruleset)
  return rhs_.ruleset_;
}

// optional .css_proto_converter.Media media = 2;
inline bool NestedAtRule::has_media() const {
  return rhs_case() == kMedia;
}
inline void NestedAtRule::set_has_media() {
  _oneof_case_[0] = kMedia;
}
inline void NestedAtRule::clear_media() {
  if (has_media()) {
    delete rhs_.media_;
    clear_has_rhs();
  }
}
inline const ::css_proto_converter::Media& NestedAtRule::_internal_media() const {
  return *rhs_.media_;
}
inline ::css_proto_converter::Media* NestedAtRule::release_media() {
  // @@protoc_insertion_point(field_release:css_proto_converter.NestedAtRule.media)
  if (has_media()) {
    clear_has_rhs();
      ::css_proto_converter::Media* temp = rhs_.media_;
    rhs_.media_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::css_proto_converter::Media& NestedAtRule::media() const {
  // @@protoc_insertion_point(field_get:css_proto_converter.NestedAtRule.media)
  return has_media()
      ? *rhs_.media_
      : *reinterpret_cast< ::css_proto_converter::Media*>(&::css_proto_converter::_Media_default_instance_);
}
inline ::css_proto_converter::Media* NestedAtRule::mutable_media() {
  if (!has_media()) {
    clear_rhs();
    set_has_media();
    rhs_.media_ = CreateMaybeMessage< ::css_proto_converter::Media >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:css_proto_converter.NestedAtRule.media)
  return rhs_.media_;
}

// optional .css_proto_converter.Page page = 3;
inline bool NestedAtRule::has_page() const {
  return rhs_case() == kPage;
}
inline void NestedAtRule::set_has_page() {
  _oneof_case_[0] = kPage;
}
inline void NestedAtRule::clear_page() {
  if (has_page()) {
    delete rhs_.page_;
    clear_has_rhs();
  }
}
inline const ::css_proto_converter::Page& NestedAtRule::_internal_page() const {
  return *rhs_.page_;
}
inline ::css_proto_converter::Page* NestedAtRule::release_page() {
  // @@protoc_insertion_point(field_release:css_proto_converter.NestedAtRule.page)
  if (has_page()) {
    clear_has_rhs();
      ::css_proto_converter::Page* temp = rhs_.page_;
    rhs_.page_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::css_proto_converter::Page& NestedAtRule::page() const {
  // @@protoc_insertion_point(field_get:css_proto_converter.NestedAtRule.page)
  return has_page()
      ? *rhs_.page_
      : *reinterpret_cast< ::css_proto_converter::Page*>(&::css_proto_converter::_Page_default_instance_);
}
inline ::css_proto_converter::Page* NestedAtRule::mutable_page() {
  if (!has_page()) {
    clear_rhs();
    set_has_page();
    rhs_.page_ = CreateMaybeMessage< ::css_proto_converter::Page >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:css_proto_converter.NestedAtRule.page)
  return rhs_.page_;
}

// optional .css_proto_converter.FontFace font_face = 4;
inline bool NestedAtRule::has_font_face() const {
  return rhs_case() == kFontFace;
}
inline void NestedAtRule::set_has_font_face() {
  _oneof_case_[0] = kFontFace;
}
inline void NestedAtRule::clear_font_face() {
  if (has_font_face()) {
    delete rhs_.font_face_;
    clear_has_rhs();
  }
}
inline const ::css_proto_converter::FontFace& NestedAtRule::_internal_font_face() const {
  return *rhs_.font_face_;
}
inline ::css_proto_converter::FontFace* NestedAtRule::release_font_face() {
  // @@protoc_insertion_point(field_release:css_proto_converter.NestedAtRule.font_face)
  if (has_font_face()) {
    clear_has_rhs();
      ::css_proto_converter::FontFace* temp = rhs_.font_face_;
    rhs_.font_face_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::css_proto_converter::FontFace& NestedAtRule::font_face() const {
  // @@protoc_insertion_point(field_get:css_proto_converter.NestedAtRule.font_face)
  return has_font_face()
      ? *rhs_.font_face_
      : *reinterpret_cast< ::css_proto_converter::FontFace*>(&::css_proto_converter::_FontFace_default_instance_);
}
inline ::css_proto_converter::FontFace* NestedAtRule::mutable_font_face() {
  if (!has_font_face()) {
    clear_rhs();
    set_has_font_face();
    rhs_.font_face_ = CreateMaybeMessage< ::css_proto_converter::FontFace >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:css_proto_converter.NestedAtRule.font_face)
  return rhs_.font_face_;
}

// optional .css_proto_converter.Viewport viewport = 5;
inline bool NestedAtRule::has_viewport() const {
  return rhs_case() == kViewport;
}
inline void NestedAtRule::set_has_viewport() {
  _oneof_case_[0] = kViewport;
}
inline void NestedAtRule::clear_viewport() {
  if (has_viewport()) {
    delete rhs_.viewport_;
    clear_has_rhs();
  }
}
inline const ::css_proto_converter::Viewport& NestedAtRule::_internal_viewport() const {
  return *rhs_.viewport_;
}
inline ::css_proto_converter::Viewport* NestedAtRule::release_viewport() {
  // @@protoc_insertion_point(field_release:css_proto_converter.NestedAtRule.viewport)
  if (has_viewport()) {
    clear_has_rhs();
      ::css_proto_converter::Viewport* temp = rhs_.viewport_;
    rhs_.viewport_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::css_proto_converter::Viewport& NestedAtRule::viewport() const {
  // @@protoc_insertion_point(field_get:css_proto_converter.NestedAtRule.viewport)
  return has_viewport()
      ? *rhs_.viewport_
      : *reinterpret_cast< ::css_proto_converter::Viewport*>(&::css_proto_converter::_Viewport_default_instance_);
}
inline ::css_proto_converter::Viewport* NestedAtRule::mutable_viewport() {
  if (!has_viewport()) {
    clear_rhs();
    set_has_viewport();
    rhs_.viewport_ = CreateMaybeMessage< ::css_proto_converter::Viewport >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:css_proto_converter.NestedAtRule.viewport)
  return rhs_.viewport_;
}

// optional .css_proto_converter.SupportsRule supports_rule = 6;
inline bool NestedAtRule::has_supports_rule() const {
  return rhs_case() == kSupportsRule;
}
inline void NestedAtRule::set_has_supports_rule() {
  _oneof_case_[0] = kSupportsRule;
}
inline void NestedAtRule::clear_supports_rule() {
  if (has_supports_rule()) {
    delete rhs_.supports_rule_;
    clear_has_rhs();
  }
}
inline const ::css_proto_converter::SupportsRule& NestedAtRule::_internal_supports_rule() const {
  return *rhs_.supports_rule_;
}
inline ::css_proto_converter::SupportsRule* NestedAtRule::release_supports_rule() {
  // @@protoc_insertion_point(field_release:css_proto_converter.NestedAtRule.supports_rule)
  if (has_supports_rule()) {
    clear_has_rhs();
      ::css_proto_converter::SupportsRule* temp = rhs_.supports_rule_;
    rhs_.supports_rule_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::css_proto_converter::SupportsRule& NestedAtRule::supports_rule() const {
  // @@protoc_insertion_point(field_get:css_proto_converter.NestedAtRule.supports_rule)
  return has_supports_rule()
      ? *rhs_.supports_rule_
      : *reinterpret_cast< ::css_proto_converter::SupportsRule*>(&::css_proto_converter::_SupportsRule_default_instance_);
}
inline ::css_proto_converter::SupportsRule* NestedAtRule::mutable_supports_rule() {
  if (!has_supports_rule()) {
    clear_rhs();
    set_has_supports_rule();
    rhs_.supports_rule_ = CreateMaybeMessage< ::css_proto_converter::SupportsRule >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:css_proto_converter.NestedAtRule.supports_rule)
  return rhs_.supports_rule_;
}

inline bool NestedAtRule::has_rhs() const {
  return rhs_case() != RHS_NOT_SET;
}
inline void NestedAtRule::clear_has_rhs() {
  _oneof_case_[0] = RHS_NOT_SET;
}
inline NestedAtRule::RhsCase NestedAtRule::rhs_case() const {
  return NestedAtRule::RhsCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SupportsRule

// required .css_proto_converter.SupportsCondition supports_condition = 1;
inline bool SupportsRule::has_supports_condition() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SupportsRule::set_has_supports_condition() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SupportsRule::clear_has_supports_condition() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SupportsRule::clear_supports_condition() {
  if (supports_condition_ != NULL) supports_condition_->Clear();
  clear_has_supports_condition();
}
inline const ::css_proto_converter::SupportsCondition& SupportsRule::_internal_supports_condition() const {
  return *supports_condition_;
}
inline const ::css_proto_converter::SupportsCondition& SupportsRule::supports_condition() const {
  const ::css_proto_converter::SupportsCondition* p = supports_condition_;
  // @@protoc_insertion_point(field_get:css_proto_converter.SupportsRule.supports_condition)
  return p != NULL ? *p : *reinterpret_cast<const ::css_proto_converter::SupportsCondition*>(
      &::css_proto_converter::_SupportsCondition_default_instance_);
}
inline ::css_proto_converter::SupportsCondition* SupportsRule::release_supports_condition() {
  // @@protoc_insertion_point(field_release:css_proto_converter.SupportsRule.supports_condition)
  clear_has_supports_condition();
  ::css_proto_converter::SupportsCondition* temp = supports_condition_;
  supports_condition_ = NULL;
  return temp;
}
inline ::css_proto_converter::SupportsCondition* SupportsRule::mutable_supports_condition() {
  set_has_supports_condition();
  if (supports_condition_ == NULL) {
    auto* p = CreateMaybeMessage<::css_proto_converter::SupportsCondition>(GetArenaNoVirtual());
    supports_condition_ = p;
  }
  // @@protoc_insertion_point(field_mutable:css_proto_converter.SupportsRule.supports_condition)
  return supports_condition_;
}
inline void SupportsRule::set_allocated_supports_condition(::css_proto_converter::SupportsCondition* supports_condition) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete supports_condition_;
  }
  if (supports_condition) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      supports_condition = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, supports_condition, submessage_arena);
    }
    set_has_supports_condition();
  } else {
    clear_has_supports_condition();
  }
  supports_condition_ = supports_condition;
  // @@protoc_insertion_point(field_set_allocated:css_proto_converter.SupportsRule.supports_condition)
}

// repeated .css_proto_converter.AtRuleOrRulesets at_rule_or_rulesets = 2;
inline int SupportsRule::at_rule_or_rulesets_size() const {
  return at_rule_or_rulesets_.size();
}
inline void SupportsRule::clear_at_rule_or_rulesets() {
  at_rule_or_rulesets_.Clear();
}
inline ::css_proto_converter::AtRuleOrRulesets* SupportsRule::mutable_at_rule_or_rulesets(int index) {
  // @@protoc_insertion_point(field_mutable:css_proto_converter.SupportsRule.at_rule_or_rulesets)
  return at_rule_or_rulesets_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::css_proto_converter::AtRuleOrRulesets >*
SupportsRule::mutable_at_rule_or_rulesets() {
  // @@protoc_insertion_point(field_mutable_list:css_proto_converter.SupportsRule.at_rule_or_rulesets)
  return &at_rule_or_rulesets_;
}
inline const ::css_proto_converter::AtRuleOrRulesets& SupportsRule::at_rule_or_rulesets(int index) const {
  // @@protoc_insertion_point(field_get:css_proto_converter.SupportsRule.at_rule_or_rulesets)
  return at_rule_or_rulesets_.Get(index);
}
inline ::css_proto_converter::AtRuleOrRulesets* SupportsRule::add_at_rule_or_rulesets() {
  // @@protoc_insertion_point(field_add:css_proto_converter.SupportsRule.at_rule_or_rulesets)
  return at_rule_or_rulesets_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::css_proto_converter::AtRuleOrRulesets >&
SupportsRule::at_rule_or_rulesets() const {
  // @@protoc_insertion_point(field_list:css_proto_converter.SupportsRule.at_rule_or_rulesets)
  return at_rule_or_rulesets_;
}

// -------------------------------------------------------------------

// AtRuleOrRulesets

// required .css_proto_converter.AtRuleOrRuleset first = 1;
inline bool AtRuleOrRulesets::has_first() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AtRuleOrRulesets::set_has_first() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AtRuleOrRulesets::clear_has_first() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AtRuleOrRulesets::clear_first() {
  if (first_ != NULL) first_->Clear();
  clear_has_first();
}
inline const ::css_proto_converter::AtRuleOrRuleset& AtRuleOrRulesets::_internal_first() const {
  return *first_;
}
inline const ::css_proto_converter::AtRuleOrRuleset& AtRuleOrRulesets::first() const {
  const ::css_proto_converter::AtRuleOrRuleset* p = first_;
  // @@protoc_insertion_point(field_get:css_proto_converter.AtRuleOrRulesets.first)
  return p != NULL ? *p : *reinterpret_cast<const ::css_proto_converter::AtRuleOrRuleset*>(
      &::css_proto_converter::_AtRuleOrRuleset_default_instance_);
}
inline ::css_proto_converter::AtRuleOrRuleset* AtRuleOrRulesets::release_first() {
  // @@protoc_insertion_point(field_release:css_proto_converter.AtRuleOrRulesets.first)
  clear_has_first();
  ::css_proto_converter::AtRuleOrRuleset* temp = first_;
  first_ = NULL;
  return temp;
}
inline ::css_proto_converter::AtRuleOrRuleset* AtRuleOrRulesets::mutable_first() {
  set_has_first();
  if (first_ == NULL) {
    auto* p = CreateMaybeMessage<::css_proto_converter::AtRuleOrRuleset>(GetArenaNoVirtual());
    first_ = p;
  }
  // @@protoc_insertion_point(field_mutable:css_proto_converter.AtRuleOrRulesets.first)
  return first_;
}
inline void AtRuleOrRulesets::set_allocated_first(::css_proto_converter::AtRuleOrRuleset* first) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete first_;
  }
  if (first) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      first = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, first, submessage_arena);
    }
    set_has_first();
  } else {
    clear_has_first();
  }
  first_ = first;
  // @@protoc_insertion_point(field_set_allocated:css_proto_converter.AtRuleOrRulesets.first)
}

// repeated .css_proto_converter.AtRuleOrRuleset laters = 2;
inline int AtRuleOrRulesets::laters_size() const {
  return laters_.size();
}
inline void AtRuleOrRulesets::clear_laters() {
  laters_.Clear();
}
inline ::css_proto_converter::AtRuleOrRuleset* AtRuleOrRulesets::mutable_laters(int index) {
  // @@protoc_insertion_point(field_mutable:css_proto_converter.AtRuleOrRulesets.laters)
  return laters_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::css_proto_converter::AtRuleOrRuleset >*
AtRuleOrRulesets::mutable_laters() {
  // @@protoc_insertion_point(field_mutable_list:css_proto_converter.AtRuleOrRulesets.laters)
  return &laters_;
}
inline const ::css_proto_converter::AtRuleOrRuleset& AtRuleOrRulesets::laters(int index) const {
  // @@protoc_insertion_point(field_get:css_proto_converter.AtRuleOrRulesets.laters)
  return laters_.Get(index);
}
inline ::css_proto_converter::AtRuleOrRuleset* AtRuleOrRulesets::add_laters() {
  // @@protoc_insertion_point(field_add:css_proto_converter.AtRuleOrRulesets.laters)
  return laters_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::css_proto_converter::AtRuleOrRuleset >&
AtRuleOrRulesets::laters() const {
  // @@protoc_insertion_point(field_list:css_proto_converter.AtRuleOrRulesets.laters)
  return laters_;
}

// -------------------------------------------------------------------

// AtRuleOrRuleset

// required .css_proto_converter.Ruleset ruleset = 1;
inline bool AtRuleOrRuleset::has_ruleset() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AtRuleOrRuleset::set_has_ruleset() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AtRuleOrRuleset::clear_has_ruleset() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AtRuleOrRuleset::clear_ruleset() {
  if (ruleset_ != NULL) ruleset_->Clear();
  clear_has_ruleset();
}
inline const ::css_proto_converter::Ruleset& AtRuleOrRuleset::_internal_ruleset() const {
  return *ruleset_;
}
inline const ::css_proto_converter::Ruleset& AtRuleOrRuleset::ruleset() const {
  const ::css_proto_converter::Ruleset* p = ruleset_;
  // @@protoc_insertion_point(field_get:css_proto_converter.AtRuleOrRuleset.ruleset)
  return p != NULL ? *p : *reinterpret_cast<const ::css_proto_converter::Ruleset*>(
      &::css_proto_converter::_Ruleset_default_instance_);
}
inline ::css_proto_converter::Ruleset* AtRuleOrRuleset::release_ruleset() {
  // @@protoc_insertion_point(field_release:css_proto_converter.AtRuleOrRuleset.ruleset)
  clear_has_ruleset();
  ::css_proto_converter::Ruleset* temp = ruleset_;
  ruleset_ = NULL;
  return temp;
}
inline ::css_proto_converter::Ruleset* AtRuleOrRuleset::mutable_ruleset() {
  set_has_ruleset();
  if (ruleset_ == NULL) {
    auto* p = CreateMaybeMessage<::css_proto_converter::Ruleset>(GetArenaNoVirtual());
    ruleset_ = p;
  }
  // @@protoc_insertion_point(field_mutable:css_proto_converter.AtRuleOrRuleset.ruleset)
  return ruleset_;
}
inline void AtRuleOrRuleset::set_allocated_ruleset(::css_proto_converter::Ruleset* ruleset) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete ruleset_;
  }
  if (ruleset) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ruleset = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ruleset, submessage_arena);
    }
    set_has_ruleset();
  } else {
    clear_has_ruleset();
  }
  ruleset_ = ruleset;
  // @@protoc_insertion_point(field_set_allocated:css_proto_converter.AtRuleOrRuleset.ruleset)
}

// optional .css_proto_converter.NestedAtRule at_rule = 2;
inline bool AtRuleOrRuleset::has_at_rule() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AtRuleOrRuleset::set_has_at_rule() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AtRuleOrRuleset::clear_has_at_rule() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AtRuleOrRuleset::clear_at_rule() {
  if (at_rule_ != NULL) at_rule_->Clear();
  clear_has_at_rule();
}
inline const ::css_proto_converter::NestedAtRule& AtRuleOrRuleset::_internal_at_rule() const {
  return *at_rule_;
}
inline const ::css_proto_converter::NestedAtRule& AtRuleOrRuleset::at_rule() const {
  const ::css_proto_converter::NestedAtRule* p = at_rule_;
  // @@protoc_insertion_point(field_get:css_proto_converter.AtRuleOrRuleset.at_rule)
  return p != NULL ? *p : *reinterpret_cast<const ::css_proto_converter::NestedAtRule*>(
      &::css_proto_converter::_NestedAtRule_default_instance_);
}
inline ::css_proto_converter::NestedAtRule* AtRuleOrRuleset::release_at_rule() {
  // @@protoc_insertion_point(field_release:css_proto_converter.AtRuleOrRuleset.at_rule)
  clear_has_at_rule();
  ::css_proto_converter::NestedAtRule* temp = at_rule_;
  at_rule_ = NULL;
  return temp;
}
inline ::css_proto_converter::NestedAtRule* AtRuleOrRuleset::mutable_at_rule() {
  set_has_at_rule();
  if (at_rule_ == NULL) {
    auto* p = CreateMaybeMessage<::css_proto_converter::NestedAtRule>(GetArenaNoVirtual());
    at_rule_ = p;
  }
  // @@protoc_insertion_point(field_mutable:css_proto_converter.AtRuleOrRuleset.at_rule)
  return at_rule_;
}
inline void AtRuleOrRuleset::set_allocated_at_rule(::css_proto_converter::NestedAtRule* at_rule) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete at_rule_;
  }
  if (at_rule) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      at_rule = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, at_rule, submessage_arena);
    }
    set_has_at_rule();
  } else {
    clear_has_at_rule();
  }
  at_rule_ = at_rule;
  // @@protoc_insertion_point(field_set_allocated:css_proto_converter.AtRuleOrRuleset.at_rule)
}

// -------------------------------------------------------------------

// SupportsCondition

// required .css_proto_converter.PropertyAndValue property_and_value = 1;
inline bool SupportsCondition::has_property_and_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SupportsCondition::set_has_property_and_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SupportsCondition::clear_has_property_and_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SupportsCondition::clear_property_and_value() {
  if (property_and_value_ != NULL) property_and_value_->Clear();
  clear_has_property_and_value();
}
inline const ::css_proto_converter::PropertyAndValue& SupportsCondition::_internal_property_and_value() const {
  return *property_and_value_;
}
inline const ::css_proto_converter::PropertyAndValue& SupportsCondition::property_and_value() const {
  const ::css_proto_converter::PropertyAndValue* p = property_and_value_;
  // @@protoc_insertion_point(field_get:css_proto_converter.SupportsCondition.property_and_value)
  return p != NULL ? *p : *reinterpret_cast<const ::css_proto_converter::PropertyAndValue*>(
      &::css_proto_converter::_PropertyAndValue_default_instance_);
}
inline ::css_proto_converter::PropertyAndValue* SupportsCondition::release_property_and_value() {
  // @@protoc_insertion_point(field_release:css_proto_converter.SupportsCondition.property_and_value)
  clear_has_property_and_value();
  ::css_proto_converter::PropertyAndValue* temp = property_and_value_;
  property_and_value_ = NULL;
  return temp;
}
inline ::css_proto_converter::PropertyAndValue* SupportsCondition::mutable_property_and_value() {
  set_has_property_and_value();
  if (property_and_value_ == NULL) {
    auto* p = CreateMaybeMessage<::css_proto_converter::PropertyAndValue>(GetArenaNoVirtual());
    property_and_value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:css_proto_converter.SupportsCondition.property_and_value)
  return property_and_value_;
}
inline void SupportsCondition::set_allocated_property_and_value(::css_proto_converter::PropertyAndValue* property_and_value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete property_and_value_;
  }
  if (property_and_value) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      property_and_value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, property_and_value, submessage_arena);
    }
    set_has_property_and_value();
  } else {
    clear_has_property_and_value();
  }
  property_and_value_ = property_and_value;
  // @@protoc_insertion_point(field_set_allocated:css_proto_converter.SupportsCondition.property_and_value)
}

// required bool not_condition = 2;
inline bool SupportsCondition::has_not_condition() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SupportsCondition::set_has_not_condition() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SupportsCondition::clear_has_not_condition() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SupportsCondition::clear_not_condition() {
  not_condition_ = false;
  clear_has_not_condition();
}
inline bool SupportsCondition::not_condition() const {
  // @@protoc_insertion_point(field_get:css_proto_converter.SupportsCondition.not_condition)
  return not_condition_;
}
inline void SupportsCondition::set_not_condition(bool value) {
  set_has_not_condition();
  not_condition_ = value;
  // @@protoc_insertion_point(field_set:css_proto_converter.SupportsCondition.not_condition)
}

// optional .css_proto_converter.BinarySupportsCondition and_supports_condition = 3;
inline bool SupportsCondition::has_and_supports_condition() const {
  return rhs_case() == kAndSupportsCondition;
}
inline void SupportsCondition::set_has_and_supports_condition() {
  _oneof_case_[0] = kAndSupportsCondition;
}
inline void SupportsCondition::clear_and_supports_condition() {
  if (has_and_supports_condition()) {
    delete rhs_.and_supports_condition_;
    clear_has_rhs();
  }
}
inline const ::css_proto_converter::BinarySupportsCondition& SupportsCondition::_internal_and_supports_condition() const {
  return *rhs_.and_supports_condition_;
}
inline ::css_proto_converter::BinarySupportsCondition* SupportsCondition::release_and_supports_condition() {
  // @@protoc_insertion_point(field_release:css_proto_converter.SupportsCondition.and_supports_condition)
  if (has_and_supports_condition()) {
    clear_has_rhs();
      ::css_proto_converter::BinarySupportsCondition* temp = rhs_.and_supports_condition_;
    rhs_.and_supports_condition_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::css_proto_converter::BinarySupportsCondition& SupportsCondition::and_supports_condition() const {
  // @@protoc_insertion_point(field_get:css_proto_converter.SupportsCondition.and_supports_condition)
  return has_and_supports_condition()
      ? *rhs_.and_supports_condition_
      : *reinterpret_cast< ::css_proto_converter::BinarySupportsCondition*>(&::css_proto_converter::_BinarySupportsCondition_default_instance_);
}
inline ::css_proto_converter::BinarySupportsCondition* SupportsCondition::mutable_and_supports_condition() {
  if (!has_and_supports_condition()) {
    clear_rhs();
    set_has_and_supports_condition();
    rhs_.and_supports_condition_ = CreateMaybeMessage< ::css_proto_converter::BinarySupportsCondition >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:css_proto_converter.SupportsCondition.and_supports_condition)
  return rhs_.and_supports_condition_;
}

// optional .css_proto_converter.BinarySupportsCondition or_supports_condition = 4;
inline bool SupportsCondition::has_or_supports_condition() const {
  return rhs_case() == kOrSupportsCondition;
}
inline void SupportsCondition::set_has_or_supports_condition() {
  _oneof_case_[0] = kOrSupportsCondition;
}
inline void SupportsCondition::clear_or_supports_condition() {
  if (has_or_supports_condition()) {
    delete rhs_.or_supports_condition_;
    clear_has_rhs();
  }
}
inline const ::css_proto_converter::BinarySupportsCondition& SupportsCondition::_internal_or_supports_condition() const {
  return *rhs_.or_supports_condition_;
}
inline ::css_proto_converter::BinarySupportsCondition* SupportsCondition::release_or_supports_condition() {
  // @@protoc_insertion_point(field_release:css_proto_converter.SupportsCondition.or_supports_condition)
  if (has_or_supports_condition()) {
    clear_has_rhs();
      ::css_proto_converter::BinarySupportsCondition* temp = rhs_.or_supports_condition_;
    rhs_.or_supports_condition_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::css_proto_converter::BinarySupportsCondition& SupportsCondition::or_supports_condition() const {
  // @@protoc_insertion_point(field_get:css_proto_converter.SupportsCondition.or_supports_condition)
  return has_or_supports_condition()
      ? *rhs_.or_supports_condition_
      : *reinterpret_cast< ::css_proto_converter::BinarySupportsCondition*>(&::css_proto_converter::_BinarySupportsCondition_default_instance_);
}
inline ::css_proto_converter::BinarySupportsCondition* SupportsCondition::mutable_or_supports_condition() {
  if (!has_or_supports_condition()) {
    clear_rhs();
    set_has_or_supports_condition();
    rhs_.or_supports_condition_ = CreateMaybeMessage< ::css_proto_converter::BinarySupportsCondition >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:css_proto_converter.SupportsCondition.or_supports_condition)
  return rhs_.or_supports_condition_;
}

inline bool SupportsCondition::has_rhs() const {
  return rhs_case() != RHS_NOT_SET;
}
inline void SupportsCondition::clear_has_rhs() {
  _oneof_case_[0] = RHS_NOT_SET;
}
inline SupportsCondition::RhsCase SupportsCondition::rhs_case() const {
  return SupportsCondition::RhsCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// BinarySupportsCondition

// required .css_proto_converter.SupportsCondition condition_1 = 1;
inline bool BinarySupportsCondition::has_condition_1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BinarySupportsCondition::set_has_condition_1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BinarySupportsCondition::clear_has_condition_1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BinarySupportsCondition::clear_condition_1() {
  if (condition_1_ != NULL) condition_1_->Clear();
  clear_has_condition_1();
}
inline const ::css_proto_converter::SupportsCondition& BinarySupportsCondition::_internal_condition_1() const {
  return *condition_1_;
}
inline const ::css_proto_converter::SupportsCondition& BinarySupportsCondition::condition_1() const {
  const ::css_proto_converter::SupportsCondition* p = condition_1_;
  // @@protoc_insertion_point(field_get:css_proto_converter.BinarySupportsCondition.condition_1)
  return p != NULL ? *p : *reinterpret_cast<const ::css_proto_converter::SupportsCondition*>(
      &::css_proto_converter::_SupportsCondition_default_instance_);
}
inline ::css_proto_converter::SupportsCondition* BinarySupportsCondition::release_condition_1() {
  // @@protoc_insertion_point(field_release:css_proto_converter.BinarySupportsCondition.condition_1)
  clear_has_condition_1();
  ::css_proto_converter::SupportsCondition* temp = condition_1_;
  condition_1_ = NULL;
  return temp;
}
inline ::css_proto_converter::SupportsCondition* BinarySupportsCondition::mutable_condition_1() {
  set_has_condition_1();
  if (condition_1_ == NULL) {
    auto* p = CreateMaybeMessage<::css_proto_converter::SupportsCondition>(GetArenaNoVirtual());
    condition_1_ = p;
  }
  // @@protoc_insertion_point(field_mutable:css_proto_converter.BinarySupportsCondition.condition_1)
  return condition_1_;
}
inline void BinarySupportsCondition::set_allocated_condition_1(::css_proto_converter::SupportsCondition* condition_1) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete condition_1_;
  }
  if (condition_1) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      condition_1 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, condition_1, submessage_arena);
    }
    set_has_condition_1();
  } else {
    clear_has_condition_1();
  }
  condition_1_ = condition_1;
  // @@protoc_insertion_point(field_set_allocated:css_proto_converter.BinarySupportsCondition.condition_1)
}

// required .css_proto_converter.SupportsCondition condition_2 = 2;
inline bool BinarySupportsCondition::has_condition_2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BinarySupportsCondition::set_has_condition_2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BinarySupportsCondition::clear_has_condition_2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BinarySupportsCondition::clear_condition_2() {
  if (condition_2_ != NULL) condition_2_->Clear();
  clear_has_condition_2();
}
inline const ::css_proto_converter::SupportsCondition& BinarySupportsCondition::_internal_condition_2() const {
  return *condition_2_;
}
inline const ::css_proto_converter::SupportsCondition& BinarySupportsCondition::condition_2() const {
  const ::css_proto_converter::SupportsCondition* p = condition_2_;
  // @@protoc_insertion_point(field_get:css_proto_converter.BinarySupportsCondition.condition_2)
  return p != NULL ? *p : *reinterpret_cast<const ::css_proto_converter::SupportsCondition*>(
      &::css_proto_converter::_SupportsCondition_default_instance_);
}
inline ::css_proto_converter::SupportsCondition* BinarySupportsCondition::release_condition_2() {
  // @@protoc_insertion_point(field_release:css_proto_converter.BinarySupportsCondition.condition_2)
  clear_has_condition_2();
  ::css_proto_converter::SupportsCondition* temp = condition_2_;
  condition_2_ = NULL;
  return temp;
}
inline ::css_proto_converter::SupportsCondition* BinarySupportsCondition::mutable_condition_2() {
  set_has_condition_2();
  if (condition_2_ == NULL) {
    auto* p = CreateMaybeMessage<::css_proto_converter::SupportsCondition>(GetArenaNoVirtual());
    condition_2_ = p;
  }
  // @@protoc_insertion_point(field_mutable:css_proto_converter.BinarySupportsCondition.condition_2)
  return condition_2_;
}
inline void BinarySupportsCondition::set_allocated_condition_2(::css_proto_converter::SupportsCondition* condition_2) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete condition_2_;
  }
  if (condition_2) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      condition_2 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, condition_2, submessage_arena);
    }
    set_has_condition_2();
  } else {
    clear_has_condition_2();
  }
  condition_2_ = condition_2;
  // @@protoc_insertion_point(field_set_allocated:css_proto_converter.BinarySupportsCondition.condition_2)
}

// -------------------------------------------------------------------

// Viewport

// repeated .css_proto_converter.ViewportPropertyAndValue properties_and_values = 1;
inline int Viewport::properties_and_values_size() const {
  return properties_and_values_.size();
}
inline void Viewport::clear_properties_and_values() {
  properties_and_values_.Clear();
}
inline ::css_proto_converter::ViewportPropertyAndValue* Viewport::mutable_properties_and_values(int index) {
  // @@protoc_insertion_point(field_mutable:css_proto_converter.Viewport.properties_and_values)
  return properties_and_values_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::css_proto_converter::ViewportPropertyAndValue >*
Viewport::mutable_properties_and_values() {
  // @@protoc_insertion_point(field_mutable_list:css_proto_converter.Viewport.properties_and_values)
  return &properties_and_values_;
}
inline const ::css_proto_converter::ViewportPropertyAndValue& Viewport::properties_and_values(int index) const {
  // @@protoc_insertion_point(field_get:css_proto_converter.Viewport.properties_and_values)
  return properties_and_values_.Get(index);
}
inline ::css_proto_converter::ViewportPropertyAndValue* Viewport::add_properties_and_values() {
  // @@protoc_insertion_point(field_add:css_proto_converter.Viewport.properties_and_values)
  return properties_and_values_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::css_proto_converter::ViewportPropertyAndValue >&
Viewport::properties_and_values() const {
  // @@protoc_insertion_point(field_list:css_proto_converter.Viewport.properties_and_values)
  return properties_and_values_;
}

// -------------------------------------------------------------------

// ViewportPropertyAndValue

// required .css_proto_converter.ViewportProperty property = 1;
inline bool ViewportPropertyAndValue::has_property() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ViewportPropertyAndValue::set_has_property() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ViewportPropertyAndValue::clear_has_property() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ViewportPropertyAndValue::clear_property() {
  if (property_ != NULL) property_->Clear();
  clear_has_property();
}
inline const ::css_proto_converter::ViewportProperty& ViewportPropertyAndValue::_internal_property() const {
  return *property_;
}
inline const ::css_proto_converter::ViewportProperty& ViewportPropertyAndValue::property() const {
  const ::css_proto_converter::ViewportProperty* p = property_;
  // @@protoc_insertion_point(field_get:css_proto_converter.ViewportPropertyAndValue.property)
  return p != NULL ? *p : *reinterpret_cast<const ::css_proto_converter::ViewportProperty*>(
      &::css_proto_converter::_ViewportProperty_default_instance_);
}
inline ::css_proto_converter::ViewportProperty* ViewportPropertyAndValue::release_property() {
  // @@protoc_insertion_point(field_release:css_proto_converter.ViewportPropertyAndValue.property)
  clear_has_property();
  ::css_proto_converter::ViewportProperty* temp = property_;
  property_ = NULL;
  return temp;
}
inline ::css_proto_converter::ViewportProperty* ViewportPropertyAndValue::mutable_property() {
  set_has_property();
  if (property_ == NULL) {
    auto* p = CreateMaybeMessage<::css_proto_converter::ViewportProperty>(GetArenaNoVirtual());
    property_ = p;
  }
  // @@protoc_insertion_point(field_mutable:css_proto_converter.ViewportPropertyAndValue.property)
  return property_;
}
inline void ViewportPropertyAndValue::set_allocated_property(::css_proto_converter::ViewportProperty* property) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete property_;
  }
  if (property) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      property = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, property, submessage_arena);
    }
    set_has_property();
  } else {
    clear_has_property();
  }
  property_ = property;
  // @@protoc_insertion_point(field_set_allocated:css_proto_converter.ViewportPropertyAndValue.property)
}

// required .css_proto_converter.ViewportValue value = 2;
inline bool ViewportPropertyAndValue::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ViewportPropertyAndValue::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ViewportPropertyAndValue::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ViewportPropertyAndValue::clear_value() {
  if (value_ != NULL) value_->Clear();
  clear_has_value();
}
inline const ::css_proto_converter::ViewportValue& ViewportPropertyAndValue::_internal_value() const {
  return *value_;
}
inline const ::css_proto_converter::ViewportValue& ViewportPropertyAndValue::value() const {
  const ::css_proto_converter::ViewportValue* p = value_;
  // @@protoc_insertion_point(field_get:css_proto_converter.ViewportPropertyAndValue.value)
  return p != NULL ? *p : *reinterpret_cast<const ::css_proto_converter::ViewportValue*>(
      &::css_proto_converter::_ViewportValue_default_instance_);
}
inline ::css_proto_converter::ViewportValue* ViewportPropertyAndValue::release_value() {
  // @@protoc_insertion_point(field_release:css_proto_converter.ViewportPropertyAndValue.value)
  clear_has_value();
  ::css_proto_converter::ViewportValue* temp = value_;
  value_ = NULL;
  return temp;
}
inline ::css_proto_converter::ViewportValue* ViewportPropertyAndValue::mutable_value() {
  set_has_value();
  if (value_ == NULL) {
    auto* p = CreateMaybeMessage<::css_proto_converter::ViewportValue>(GetArenaNoVirtual());
    value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:css_proto_converter.ViewportPropertyAndValue.value)
  return value_;
}
inline void ViewportPropertyAndValue::set_allocated_value(::css_proto_converter::ViewportValue* value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete value_;
  }
  if (value) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    set_has_value();
  } else {
    clear_has_value();
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:css_proto_converter.ViewportPropertyAndValue.value)
}

// -------------------------------------------------------------------

// ViewportProperty

// required .css_proto_converter.ViewportProperty.PropertyId id = 1;
inline bool ViewportProperty::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ViewportProperty::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ViewportProperty::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ViewportProperty::clear_id() {
  id_ = 1;
  clear_has_id();
}
inline ::css_proto_converter::ViewportProperty_PropertyId ViewportProperty::id() const {
  // @@protoc_insertion_point(field_get:css_proto_converter.ViewportProperty.id)
  return static_cast< ::css_proto_converter::ViewportProperty_PropertyId >(id_);
}
inline void ViewportProperty::set_id(::css_proto_converter::ViewportProperty_PropertyId value) {
  assert(::css_proto_converter::ViewportProperty_PropertyId_IsValid(value));
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:css_proto_converter.ViewportProperty.id)
}

// -------------------------------------------------------------------

// ViewportValue

// required .css_proto_converter.ViewportValue.ValueId value_id = 1;
inline bool ViewportValue::has_value_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ViewportValue::set_has_value_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ViewportValue::clear_has_value_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ViewportValue::clear_value_id() {
  value_id_ = 1;
  clear_has_value_id();
}
inline ::css_proto_converter::ViewportValue_ValueId ViewportValue::value_id() const {
  // @@protoc_insertion_point(field_get:css_proto_converter.ViewportValue.value_id)
  return static_cast< ::css_proto_converter::ViewportValue_ValueId >(value_id_);
}
inline void ViewportValue::set_value_id(::css_proto_converter::ViewportValue_ValueId value) {
  assert(::css_proto_converter::ViewportValue_ValueId_IsValid(value));
  set_has_value_id();
  value_id_ = value;
  // @@protoc_insertion_point(field_set:css_proto_converter.ViewportValue.value_id)
}

// optional .css_proto_converter.Length length = 2;
inline bool ViewportValue::has_length() const {
  return rhs_case() == kLength;
}
inline void ViewportValue::set_has_length() {
  _oneof_case_[0] = kLength;
}
inline void ViewportValue::clear_length() {
  if (has_length()) {
    delete rhs_.length_;
    clear_has_rhs();
  }
}
inline const ::css_proto_converter::Length& ViewportValue::_internal_length() const {
  return *rhs_.length_;
}
inline ::css_proto_converter::Length* ViewportValue::release_length() {
  // @@protoc_insertion_point(field_release:css_proto_converter.ViewportValue.length)
  if (has_length()) {
    clear_has_rhs();
      ::css_proto_converter::Length* temp = rhs_.length_;
    rhs_.length_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::css_proto_converter::Length& ViewportValue::length() const {
  // @@protoc_insertion_point(field_get:css_proto_converter.ViewportValue.length)
  return has_length()
      ? *rhs_.length_
      : *reinterpret_cast< ::css_proto_converter::Length*>(&::css_proto_converter::_Length_default_instance_);
}
inline ::css_proto_converter::Length* ViewportValue::mutable_length() {
  if (!has_length()) {
    clear_rhs();
    set_has_length();
    rhs_.length_ = CreateMaybeMessage< ::css_proto_converter::Length >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:css_proto_converter.ViewportValue.length)
  return rhs_.length_;
}

// optional .css_proto_converter.Num num = 3;
inline bool ViewportValue::has_num() const {
  return rhs_case() == kNum;
}
inline void ViewportValue::set_has_num() {
  _oneof_case_[0] = kNum;
}
inline void ViewportValue::clear_num() {
  if (has_num()) {
    delete rhs_.num_;
    clear_has_rhs();
  }
}
inline const ::css_proto_converter::Num& ViewportValue::_internal_num() const {
  return *rhs_.num_;
}
inline ::css_proto_converter::Num* ViewportValue::release_num() {
  // @@protoc_insertion_point(field_release:css_proto_converter.ViewportValue.num)
  if (has_num()) {
    clear_has_rhs();
      ::css_proto_converter::Num* temp = rhs_.num_;
    rhs_.num_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::css_proto_converter::Num& ViewportValue::num() const {
  // @@protoc_insertion_point(field_get:css_proto_converter.ViewportValue.num)
  return has_num()
      ? *rhs_.num_
      : *reinterpret_cast< ::css_proto_converter::Num*>(&::css_proto_converter::_Num_default_instance_);
}
inline ::css_proto_converter::Num* ViewportValue::mutable_num() {
  if (!has_num()) {
    clear_rhs();
    set_has_num();
    rhs_.num_ = CreateMaybeMessage< ::css_proto_converter::Num >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:css_proto_converter.ViewportValue.num)
  return rhs_.num_;
}

inline bool ViewportValue::has_rhs() const {
  return rhs_case() != RHS_NOT_SET;
}
inline void ViewportValue::clear_has_rhs() {
  _oneof_case_[0] = RHS_NOT_SET;
}
inline ViewportValue::RhsCase ViewportValue::rhs_case() const {
  return ViewportValue::RhsCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Import

// optional .css_proto_converter.Import.SrcId src_id = 1;
inline bool Import::has_src_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Import::set_has_src_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Import::clear_has_src_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Import::clear_src_id() {
  src_id_ = 1;
  clear_has_src_id();
}
inline ::css_proto_converter::Import_SrcId Import::src_id() const {
  // @@protoc_insertion_point(field_get:css_proto_converter.Import.src_id)
  return static_cast< ::css_proto_converter::Import_SrcId >(src_id_);
}
inline void Import::set_src_id(::css_proto_converter::Import_SrcId value) {
  assert(::css_proto_converter::Import_SrcId_IsValid(value));
  set_has_src_id();
  src_id_ = value;
  // @@protoc_insertion_point(field_set:css_proto_converter.Import.src_id)
}

// optional .css_proto_converter.MediaQueryList media_query_list = 2;
inline bool Import::has_media_query_list() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Import::set_has_media_query_list() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Import::clear_has_media_query_list() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Import::clear_media_query_list() {
  if (media_query_list_ != NULL) media_query_list_->Clear();
  clear_has_media_query_list();
}
inline const ::css_proto_converter::MediaQueryList& Import::_internal_media_query_list() const {
  return *media_query_list_;
}
inline const ::css_proto_converter::MediaQueryList& Import::media_query_list() const {
  const ::css_proto_converter::MediaQueryList* p = media_query_list_;
  // @@protoc_insertion_point(field_get:css_proto_converter.Import.media_query_list)
  return p != NULL ? *p : *reinterpret_cast<const ::css_proto_converter::MediaQueryList*>(
      &::css_proto_converter::_MediaQueryList_default_instance_);
}
inline ::css_proto_converter::MediaQueryList* Import::release_media_query_list() {
  // @@protoc_insertion_point(field_release:css_proto_converter.Import.media_query_list)
  clear_has_media_query_list();
  ::css_proto_converter::MediaQueryList* temp = media_query_list_;
  media_query_list_ = NULL;
  return temp;
}
inline ::css_proto_converter::MediaQueryList* Import::mutable_media_query_list() {
  set_has_media_query_list();
  if (media_query_list_ == NULL) {
    auto* p = CreateMaybeMessage<::css_proto_converter::MediaQueryList>(GetArenaNoVirtual());
    media_query_list_ = p;
  }
  // @@protoc_insertion_point(field_mutable:css_proto_converter.Import.media_query_list)
  return media_query_list_;
}
inline void Import::set_allocated_media_query_list(::css_proto_converter::MediaQueryList* media_query_list) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete media_query_list_;
  }
  if (media_query_list) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      media_query_list = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, media_query_list, submessage_arena);
    }
    set_has_media_query_list();
  } else {
    clear_has_media_query_list();
  }
  media_query_list_ = media_query_list;
  // @@protoc_insertion_point(field_set_allocated:css_proto_converter.Import.media_query_list)
}

// -------------------------------------------------------------------

// MediaQueryList

// repeated .css_proto_converter.MediaQuery media_queries = 1;
inline int MediaQueryList::media_queries_size() const {
  return media_queries_.size();
}
inline void MediaQueryList::clear_media_queries() {
  media_queries_.Clear();
}
inline ::css_proto_converter::MediaQuery* MediaQueryList::mutable_media_queries(int index) {
  // @@protoc_insertion_point(field_mutable:css_proto_converter.MediaQueryList.media_queries)
  return media_queries_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::css_proto_converter::MediaQuery >*
MediaQueryList::mutable_media_queries() {
  // @@protoc_insertion_point(field_mutable_list:css_proto_converter.MediaQueryList.media_queries)
  return &media_queries_;
}
inline const ::css_proto_converter::MediaQuery& MediaQueryList::media_queries(int index) const {
  // @@protoc_insertion_point(field_get:css_proto_converter.MediaQueryList.media_queries)
  return media_queries_.Get(index);
}
inline ::css_proto_converter::MediaQuery* MediaQueryList::add_media_queries() {
  // @@protoc_insertion_point(field_add:css_proto_converter.MediaQueryList.media_queries)
  return media_queries_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::css_proto_converter::MediaQuery >&
MediaQueryList::media_queries() const {
  // @@protoc_insertion_point(field_list:css_proto_converter.MediaQueryList.media_queries)
  return media_queries_;
}

// -------------------------------------------------------------------

// MediaQuery

// required .css_proto_converter.MediaCondition media_condition = 1;
inline bool MediaQuery::has_media_condition() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MediaQuery::set_has_media_condition() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MediaQuery::clear_has_media_condition() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MediaQuery::clear_media_condition() {
  if (media_condition_ != NULL) media_condition_->Clear();
  clear_has_media_condition();
}
inline const ::css_proto_converter::MediaCondition& MediaQuery::_internal_media_condition() const {
  return *media_condition_;
}
inline const ::css_proto_converter::MediaCondition& MediaQuery::media_condition() const {
  const ::css_proto_converter::MediaCondition* p = media_condition_;
  // @@protoc_insertion_point(field_get:css_proto_converter.MediaQuery.media_condition)
  return p != NULL ? *p : *reinterpret_cast<const ::css_proto_converter::MediaCondition*>(
      &::css_proto_converter::_MediaCondition_default_instance_);
}
inline ::css_proto_converter::MediaCondition* MediaQuery::release_media_condition() {
  // @@protoc_insertion_point(field_release:css_proto_converter.MediaQuery.media_condition)
  clear_has_media_condition();
  ::css_proto_converter::MediaCondition* temp = media_condition_;
  media_condition_ = NULL;
  return temp;
}
inline ::css_proto_converter::MediaCondition* MediaQuery::mutable_media_condition() {
  set_has_media_condition();
  if (media_condition_ == NULL) {
    auto* p = CreateMaybeMessage<::css_proto_converter::MediaCondition>(GetArenaNoVirtual());
    media_condition_ = p;
  }
  // @@protoc_insertion_point(field_mutable:css_proto_converter.MediaQuery.media_condition)
  return media_condition_;
}
inline void MediaQuery::set_allocated_media_condition(::css_proto_converter::MediaCondition* media_condition) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete media_condition_;
  }
  if (media_condition) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      media_condition = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, media_condition, submessage_arena);
    }
    set_has_media_condition();
  } else {
    clear_has_media_condition();
  }
  media_condition_ = media_condition;
  // @@protoc_insertion_point(field_set_allocated:css_proto_converter.MediaQuery.media_condition)
}

// optional .css_proto_converter.MediaQueryPartTwo media_query_part_two = 2;
inline bool MediaQuery::has_media_query_part_two() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MediaQuery::set_has_media_query_part_two() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MediaQuery::clear_has_media_query_part_two() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MediaQuery::clear_media_query_part_two() {
  if (media_query_part_two_ != NULL) media_query_part_two_->Clear();
  clear_has_media_query_part_two();
}
inline const ::css_proto_converter::MediaQueryPartTwo& MediaQuery::_internal_media_query_part_two() const {
  return *media_query_part_two_;
}
inline const ::css_proto_converter::MediaQueryPartTwo& MediaQuery::media_query_part_two() const {
  const ::css_proto_converter::MediaQueryPartTwo* p = media_query_part_two_;
  // @@protoc_insertion_point(field_get:css_proto_converter.MediaQuery.media_query_part_two)
  return p != NULL ? *p : *reinterpret_cast<const ::css_proto_converter::MediaQueryPartTwo*>(
      &::css_proto_converter::_MediaQueryPartTwo_default_instance_);
}
inline ::css_proto_converter::MediaQueryPartTwo* MediaQuery::release_media_query_part_two() {
  // @@protoc_insertion_point(field_release:css_proto_converter.MediaQuery.media_query_part_two)
  clear_has_media_query_part_two();
  ::css_proto_converter::MediaQueryPartTwo* temp = media_query_part_two_;
  media_query_part_two_ = NULL;
  return temp;
}
inline ::css_proto_converter::MediaQueryPartTwo* MediaQuery::mutable_media_query_part_two() {
  set_has_media_query_part_two();
  if (media_query_part_two_ == NULL) {
    auto* p = CreateMaybeMessage<::css_proto_converter::MediaQueryPartTwo>(GetArenaNoVirtual());
    media_query_part_two_ = p;
  }
  // @@protoc_insertion_point(field_mutable:css_proto_converter.MediaQuery.media_query_part_two)
  return media_query_part_two_;
}
inline void MediaQuery::set_allocated_media_query_part_two(::css_proto_converter::MediaQueryPartTwo* media_query_part_two) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete media_query_part_two_;
  }
  if (media_query_part_two) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      media_query_part_two = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, media_query_part_two, submessage_arena);
    }
    set_has_media_query_part_two();
  } else {
    clear_has_media_query_part_two();
  }
  media_query_part_two_ = media_query_part_two;
  // @@protoc_insertion_point(field_set_allocated:css_proto_converter.MediaQuery.media_query_part_two)
}

// -------------------------------------------------------------------

// MediaQueryPartTwo

// optional .css_proto_converter.MediaQueryPartTwo.NotOrOnly not_or_only = 1;
inline bool MediaQueryPartTwo::has_not_or_only() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MediaQueryPartTwo::set_has_not_or_only() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MediaQueryPartTwo::clear_has_not_or_only() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MediaQueryPartTwo::clear_not_or_only() {
  not_or_only_ = 1;
  clear_has_not_or_only();
}
inline ::css_proto_converter::MediaQueryPartTwo_NotOrOnly MediaQueryPartTwo::not_or_only() const {
  // @@protoc_insertion_point(field_get:css_proto_converter.MediaQueryPartTwo.not_or_only)
  return static_cast< ::css_proto_converter::MediaQueryPartTwo_NotOrOnly >(not_or_only_);
}
inline void MediaQueryPartTwo::set_not_or_only(::css_proto_converter::MediaQueryPartTwo_NotOrOnly value) {
  assert(::css_proto_converter::MediaQueryPartTwo_NotOrOnly_IsValid(value));
  set_has_not_or_only();
  not_or_only_ = value;
  // @@protoc_insertion_point(field_set:css_proto_converter.MediaQueryPartTwo.not_or_only)
}

// required .css_proto_converter.MediaType media_type = 2;
inline bool MediaQueryPartTwo::has_media_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MediaQueryPartTwo::set_has_media_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MediaQueryPartTwo::clear_has_media_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MediaQueryPartTwo::clear_media_type() {
  if (media_type_ != NULL) media_type_->Clear();
  clear_has_media_type();
}
inline const ::css_proto_converter::MediaType& MediaQueryPartTwo::_internal_media_type() const {
  return *media_type_;
}
inline const ::css_proto_converter::MediaType& MediaQueryPartTwo::media_type() const {
  const ::css_proto_converter::MediaType* p = media_type_;
  // @@protoc_insertion_point(field_get:css_proto_converter.MediaQueryPartTwo.media_type)
  return p != NULL ? *p : *reinterpret_cast<const ::css_proto_converter::MediaType*>(
      &::css_proto_converter::_MediaType_default_instance_);
}
inline ::css_proto_converter::MediaType* MediaQueryPartTwo::release_media_type() {
  // @@protoc_insertion_point(field_release:css_proto_converter.MediaQueryPartTwo.media_type)
  clear_has_media_type();
  ::css_proto_converter::MediaType* temp = media_type_;
  media_type_ = NULL;
  return temp;
}
inline ::css_proto_converter::MediaType* MediaQueryPartTwo::mutable_media_type() {
  set_has_media_type();
  if (media_type_ == NULL) {
    auto* p = CreateMaybeMessage<::css_proto_converter::MediaType>(GetArenaNoVirtual());
    media_type_ = p;
  }
  // @@protoc_insertion_point(field_mutable:css_proto_converter.MediaQueryPartTwo.media_type)
  return media_type_;
}
inline void MediaQueryPartTwo::set_allocated_media_type(::css_proto_converter::MediaType* media_type) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete media_type_;
  }
  if (media_type) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      media_type = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, media_type, submessage_arena);
    }
    set_has_media_type();
  } else {
    clear_has_media_type();
  }
  media_type_ = media_type;
  // @@protoc_insertion_point(field_set_allocated:css_proto_converter.MediaQueryPartTwo.media_type)
}

// optional .css_proto_converter.MediaConditionWithoutOr media_condition_without_or = 3;
inline bool MediaQueryPartTwo::has_media_condition_without_or() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MediaQueryPartTwo::set_has_media_condition_without_or() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MediaQueryPartTwo::clear_has_media_condition_without_or() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MediaQueryPartTwo::clear_media_condition_without_or() {
  if (media_condition_without_or_ != NULL) media_condition_without_or_->Clear();
  clear_has_media_condition_without_or();
}
inline const ::css_proto_converter::MediaConditionWithoutOr& MediaQueryPartTwo::_internal_media_condition_without_or() const {
  return *media_condition_without_or_;
}
inline const ::css_proto_converter::MediaConditionWithoutOr& MediaQueryPartTwo::media_condition_without_or() const {
  const ::css_proto_converter::MediaConditionWithoutOr* p = media_condition_without_or_;
  // @@protoc_insertion_point(field_get:css_proto_converter.MediaQueryPartTwo.media_condition_without_or)
  return p != NULL ? *p : *reinterpret_cast<const ::css_proto_converter::MediaConditionWithoutOr*>(
      &::css_proto_converter::_MediaConditionWithoutOr_default_instance_);
}
inline ::css_proto_converter::MediaConditionWithoutOr* MediaQueryPartTwo::release_media_condition_without_or() {
  // @@protoc_insertion_point(field_release:css_proto_converter.MediaQueryPartTwo.media_condition_without_or)
  clear_has_media_condition_without_or();
  ::css_proto_converter::MediaConditionWithoutOr* temp = media_condition_without_or_;
  media_condition_without_or_ = NULL;
  return temp;
}
inline ::css_proto_converter::MediaConditionWithoutOr* MediaQueryPartTwo::mutable_media_condition_without_or() {
  set_has_media_condition_without_or();
  if (media_condition_without_or_ == NULL) {
    auto* p = CreateMaybeMessage<::css_proto_converter::MediaConditionWithoutOr>(GetArenaNoVirtual());
    media_condition_without_or_ = p;
  }
  // @@protoc_insertion_point(field_mutable:css_proto_converter.MediaQueryPartTwo.media_condition_without_or)
  return media_condition_without_or_;
}
inline void MediaQueryPartTwo::set_allocated_media_condition_without_or(::css_proto_converter::MediaConditionWithoutOr* media_condition_without_or) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete media_condition_without_or_;
  }
  if (media_condition_without_or) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      media_condition_without_or = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, media_condition_without_or, submessage_arena);
    }
    set_has_media_condition_without_or();
  } else {
    clear_has_media_condition_without_or();
  }
  media_condition_without_or_ = media_condition_without_or;
  // @@protoc_insertion_point(field_set_allocated:css_proto_converter.MediaQueryPartTwo.media_condition_without_or)
}

// -------------------------------------------------------------------

// MediaConditionWithoutOr

// required .css_proto_converter.MediaNot media_not = 1;
inline bool MediaConditionWithoutOr::has_media_not() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MediaConditionWithoutOr::set_has_media_not() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MediaConditionWithoutOr::clear_has_media_not() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MediaConditionWithoutOr::clear_media_not() {
  if (media_not_ != NULL) media_not_->Clear();
  clear_has_media_not();
}
inline const ::css_proto_converter::MediaNot& MediaConditionWithoutOr::_internal_media_not() const {
  return *media_not_;
}
inline const ::css_proto_converter::MediaNot& MediaConditionWithoutOr::media_not() const {
  const ::css_proto_converter::MediaNot* p = media_not_;
  // @@protoc_insertion_point(field_get:css_proto_converter.MediaConditionWithoutOr.media_not)
  return p != NULL ? *p : *reinterpret_cast<const ::css_proto_converter::MediaNot*>(
      &::css_proto_converter::_MediaNot_default_instance_);
}
inline ::css_proto_converter::MediaNot* MediaConditionWithoutOr::release_media_not() {
  // @@protoc_insertion_point(field_release:css_proto_converter.MediaConditionWithoutOr.media_not)
  clear_has_media_not();
  ::css_proto_converter::MediaNot* temp = media_not_;
  media_not_ = NULL;
  return temp;
}
inline ::css_proto_converter::MediaNot* MediaConditionWithoutOr::mutable_media_not() {
  set_has_media_not();
  if (media_not_ == NULL) {
    auto* p = CreateMaybeMessage<::css_proto_converter::MediaNot>(GetArenaNoVirtual());
    media_not_ = p;
  }
  // @@protoc_insertion_point(field_mutable:css_proto_converter.MediaConditionWithoutOr.media_not)
  return media_not_;
}
inline void MediaConditionWithoutOr::set_allocated_media_not(::css_proto_converter::MediaNot* media_not) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete media_not_;
  }
  if (media_not) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      media_not = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, media_not, submessage_arena);
    }
    set_has_media_not();
  } else {
    clear_has_media_not();
  }
  media_not_ = media_not;
  // @@protoc_insertion_point(field_set_allocated:css_proto_converter.MediaConditionWithoutOr.media_not)
}

// optional .css_proto_converter.MediaAnd media_and = 2;
inline bool MediaConditionWithoutOr::has_media_and() const {
  return rhs_case() == kMediaAnd;
}
inline void MediaConditionWithoutOr::set_has_media_and() {
  _oneof_case_[0] = kMediaAnd;
}
inline void MediaConditionWithoutOr::clear_media_and() {
  if (has_media_and()) {
    delete rhs_.media_and_;
    clear_has_rhs();
  }
}
inline const ::css_proto_converter::MediaAnd& MediaConditionWithoutOr::_internal_media_and() const {
  return *rhs_.media_and_;
}
inline ::css_proto_converter::MediaAnd* MediaConditionWithoutOr::release_media_and() {
  // @@protoc_insertion_point(field_release:css_proto_converter.MediaConditionWithoutOr.media_and)
  if (has_media_and()) {
    clear_has_rhs();
      ::css_proto_converter::MediaAnd* temp = rhs_.media_and_;
    rhs_.media_and_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::css_proto_converter::MediaAnd& MediaConditionWithoutOr::media_and() const {
  // @@protoc_insertion_point(field_get:css_proto_converter.MediaConditionWithoutOr.media_and)
  return has_media_and()
      ? *rhs_.media_and_
      : *reinterpret_cast< ::css_proto_converter::MediaAnd*>(&::css_proto_converter::_MediaAnd_default_instance_);
}
inline ::css_proto_converter::MediaAnd* MediaConditionWithoutOr::mutable_media_and() {
  if (!has_media_and()) {
    clear_rhs();
    set_has_media_and();
    rhs_.media_and_ = CreateMaybeMessage< ::css_proto_converter::MediaAnd >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:css_proto_converter.MediaConditionWithoutOr.media_and)
  return rhs_.media_and_;
}

// optional .css_proto_converter.MediaInParens media_in_parens = 3;
inline bool MediaConditionWithoutOr::has_media_in_parens() const {
  return rhs_case() == kMediaInParens;
}
inline void MediaConditionWithoutOr::set_has_media_in_parens() {
  _oneof_case_[0] = kMediaInParens;
}
inline void MediaConditionWithoutOr::clear_media_in_parens() {
  if (has_media_in_parens()) {
    delete rhs_.media_in_parens_;
    clear_has_rhs();
  }
}
inline const ::css_proto_converter::MediaInParens& MediaConditionWithoutOr::_internal_media_in_parens() const {
  return *rhs_.media_in_parens_;
}
inline ::css_proto_converter::MediaInParens* MediaConditionWithoutOr::release_media_in_parens() {
  // @@protoc_insertion_point(field_release:css_proto_converter.MediaConditionWithoutOr.media_in_parens)
  if (has_media_in_parens()) {
    clear_has_rhs();
      ::css_proto_converter::MediaInParens* temp = rhs_.media_in_parens_;
    rhs_.media_in_parens_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::css_proto_converter::MediaInParens& MediaConditionWithoutOr::media_in_parens() const {
  // @@protoc_insertion_point(field_get:css_proto_converter.MediaConditionWithoutOr.media_in_parens)
  return has_media_in_parens()
      ? *rhs_.media_in_parens_
      : *reinterpret_cast< ::css_proto_converter::MediaInParens*>(&::css_proto_converter::_MediaInParens_default_instance_);
}
inline ::css_proto_converter::MediaInParens* MediaConditionWithoutOr::mutable_media_in_parens() {
  if (!has_media_in_parens()) {
    clear_rhs();
    set_has_media_in_parens();
    rhs_.media_in_parens_ = CreateMaybeMessage< ::css_proto_converter::MediaInParens >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:css_proto_converter.MediaConditionWithoutOr.media_in_parens)
  return rhs_.media_in_parens_;
}

inline bool MediaConditionWithoutOr::has_rhs() const {
  return rhs_case() != RHS_NOT_SET;
}
inline void MediaConditionWithoutOr::clear_has_rhs() {
  _oneof_case_[0] = RHS_NOT_SET;
}
inline MediaConditionWithoutOr::RhsCase MediaConditionWithoutOr::rhs_case() const {
  return MediaConditionWithoutOr::RhsCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// MediaCondition

// required .css_proto_converter.MediaAnd media_and = 1;
inline bool MediaCondition::has_media_and() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MediaCondition::set_has_media_and() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MediaCondition::clear_has_media_and() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MediaCondition::clear_media_and() {
  if (media_and_ != NULL) media_and_->Clear();
  clear_has_media_and();
}
inline const ::css_proto_converter::MediaAnd& MediaCondition::_internal_media_and() const {
  return *media_and_;
}
inline const ::css_proto_converter::MediaAnd& MediaCondition::media_and() const {
  const ::css_proto_converter::MediaAnd* p = media_and_;
  // @@protoc_insertion_point(field_get:css_proto_converter.MediaCondition.media_and)
  return p != NULL ? *p : *reinterpret_cast<const ::css_proto_converter::MediaAnd*>(
      &::css_proto_converter::_MediaAnd_default_instance_);
}
inline ::css_proto_converter::MediaAnd* MediaCondition::release_media_and() {
  // @@protoc_insertion_point(field_release:css_proto_converter.MediaCondition.media_and)
  clear_has_media_and();
  ::css_proto_converter::MediaAnd* temp = media_and_;
  media_and_ = NULL;
  return temp;
}
inline ::css_proto_converter::MediaAnd* MediaCondition::mutable_media_and() {
  set_has_media_and();
  if (media_and_ == NULL) {
    auto* p = CreateMaybeMessage<::css_proto_converter::MediaAnd>(GetArenaNoVirtual());
    media_and_ = p;
  }
  // @@protoc_insertion_point(field_mutable:css_proto_converter.MediaCondition.media_and)
  return media_and_;
}
inline void MediaCondition::set_allocated_media_and(::css_proto_converter::MediaAnd* media_and) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete media_and_;
  }
  if (media_and) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      media_and = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, media_and, submessage_arena);
    }
    set_has_media_and();
  } else {
    clear_has_media_and();
  }
  media_and_ = media_and;
  // @@protoc_insertion_point(field_set_allocated:css_proto_converter.MediaCondition.media_and)
}

// optional .css_proto_converter.MediaNot media_not = 2;
inline bool MediaCondition::has_media_not() const {
  return rhs_case() == kMediaNot;
}
inline void MediaCondition::set_has_media_not() {
  _oneof_case_[0] = kMediaNot;
}
inline void MediaCondition::clear_media_not() {
  if (has_media_not()) {
    delete rhs_.media_not_;
    clear_has_rhs();
  }
}
inline const ::css_proto_converter::MediaNot& MediaCondition::_internal_media_not() const {
  return *rhs_.media_not_;
}
inline ::css_proto_converter::MediaNot* MediaCondition::release_media_not() {
  // @@protoc_insertion_point(field_release:css_proto_converter.MediaCondition.media_not)
  if (has_media_not()) {
    clear_has_rhs();
      ::css_proto_converter::MediaNot* temp = rhs_.media_not_;
    rhs_.media_not_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::css_proto_converter::MediaNot& MediaCondition::media_not() const {
  // @@protoc_insertion_point(field_get:css_proto_converter.MediaCondition.media_not)
  return has_media_not()
      ? *rhs_.media_not_
      : *reinterpret_cast< ::css_proto_converter::MediaNot*>(&::css_proto_converter::_MediaNot_default_instance_);
}
inline ::css_proto_converter::MediaNot* MediaCondition::mutable_media_not() {
  if (!has_media_not()) {
    clear_rhs();
    set_has_media_not();
    rhs_.media_not_ = CreateMaybeMessage< ::css_proto_converter::MediaNot >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:css_proto_converter.MediaCondition.media_not)
  return rhs_.media_not_;
}

// optional .css_proto_converter.MediaOr media_or = 3;
inline bool MediaCondition::has_media_or() const {
  return rhs_case() == kMediaOr;
}
inline void MediaCondition::set_has_media_or() {
  _oneof_case_[0] = kMediaOr;
}
inline void MediaCondition::clear_media_or() {
  if (has_media_or()) {
    delete rhs_.media_or_;
    clear_has_rhs();
  }
}
inline const ::css_proto_converter::MediaOr& MediaCondition::_internal_media_or() const {
  return *rhs_.media_or_;
}
inline ::css_proto_converter::MediaOr* MediaCondition::release_media_or() {
  // @@protoc_insertion_point(field_release:css_proto_converter.MediaCondition.media_or)
  if (has_media_or()) {
    clear_has_rhs();
      ::css_proto_converter::MediaOr* temp = rhs_.media_or_;
    rhs_.media_or_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::css_proto_converter::MediaOr& MediaCondition::media_or() const {
  // @@protoc_insertion_point(field_get:css_proto_converter.MediaCondition.media_or)
  return has_media_or()
      ? *rhs_.media_or_
      : *reinterpret_cast< ::css_proto_converter::MediaOr*>(&::css_proto_converter::_MediaOr_default_instance_);
}
inline ::css_proto_converter::MediaOr* MediaCondition::mutable_media_or() {
  if (!has_media_or()) {
    clear_rhs();
    set_has_media_or();
    rhs_.media_or_ = CreateMaybeMessage< ::css_proto_converter::MediaOr >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:css_proto_converter.MediaCondition.media_or)
  return rhs_.media_or_;
}

// optional .css_proto_converter.MediaInParens media_in_parens = 4;
inline bool MediaCondition::has_media_in_parens() const {
  return rhs_case() == kMediaInParens;
}
inline void MediaCondition::set_has_media_in_parens() {
  _oneof_case_[0] = kMediaInParens;
}
inline void MediaCondition::clear_media_in_parens() {
  if (has_media_in_parens()) {
    delete rhs_.media_in_parens_;
    clear_has_rhs();
  }
}
inline const ::css_proto_converter::MediaInParens& MediaCondition::_internal_media_in_parens() const {
  return *rhs_.media_in_parens_;
}
inline ::css_proto_converter::MediaInParens* MediaCondition::release_media_in_parens() {
  // @@protoc_insertion_point(field_release:css_proto_converter.MediaCondition.media_in_parens)
  if (has_media_in_parens()) {
    clear_has_rhs();
      ::css_proto_converter::MediaInParens* temp = rhs_.media_in_parens_;
    rhs_.media_in_parens_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::css_proto_converter::MediaInParens& MediaCondition::media_in_parens() const {
  // @@protoc_insertion_point(field_get:css_proto_converter.MediaCondition.media_in_parens)
  return has_media_in_parens()
      ? *rhs_.media_in_parens_
      : *reinterpret_cast< ::css_proto_converter::MediaInParens*>(&::css_proto_converter::_MediaInParens_default_instance_);
}
inline ::css_proto_converter::MediaInParens* MediaCondition::mutable_media_in_parens() {
  if (!has_media_in_parens()) {
    clear_rhs();
    set_has_media_in_parens();
    rhs_.media_in_parens_ = CreateMaybeMessage< ::css_proto_converter::MediaInParens >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:css_proto_converter.MediaCondition.media_in_parens)
  return rhs_.media_in_parens_;
}

inline bool MediaCondition::has_rhs() const {
  return rhs_case() != RHS_NOT_SET;
}
inline void MediaCondition::clear_has_rhs() {
  _oneof_case_[0] = RHS_NOT_SET;
}
inline MediaCondition::RhsCase MediaCondition::rhs_case() const {
  return MediaCondition::RhsCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// MediaType

// required .css_proto_converter.MediaType.ValueId value_id = 1;
inline bool MediaType::has_value_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MediaType::set_has_value_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MediaType::clear_has_value_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MediaType::clear_value_id() {
  value_id_ = 1;
  clear_has_value_id();
}
inline ::css_proto_converter::MediaType_ValueId MediaType::value_id() const {
  // @@protoc_insertion_point(field_get:css_proto_converter.MediaType.value_id)
  return static_cast< ::css_proto_converter::MediaType_ValueId >(value_id_);
}
inline void MediaType::set_value_id(::css_proto_converter::MediaType_ValueId value) {
  assert(::css_proto_converter::MediaType_ValueId_IsValid(value));
  set_has_value_id();
  value_id_ = value;
  // @@protoc_insertion_point(field_set:css_proto_converter.MediaType.value_id)
}

// -------------------------------------------------------------------

// MediaNot

// required .css_proto_converter.MediaInParens media_in_parens = 1;
inline bool MediaNot::has_media_in_parens() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MediaNot::set_has_media_in_parens() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MediaNot::clear_has_media_in_parens() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MediaNot::clear_media_in_parens() {
  if (media_in_parens_ != NULL) media_in_parens_->Clear();
  clear_has_media_in_parens();
}
inline const ::css_proto_converter::MediaInParens& MediaNot::_internal_media_in_parens() const {
  return *media_in_parens_;
}
inline const ::css_proto_converter::MediaInParens& MediaNot::media_in_parens() const {
  const ::css_proto_converter::MediaInParens* p = media_in_parens_;
  // @@protoc_insertion_point(field_get:css_proto_converter.MediaNot.media_in_parens)
  return p != NULL ? *p : *reinterpret_cast<const ::css_proto_converter::MediaInParens*>(
      &::css_proto_converter::_MediaInParens_default_instance_);
}
inline ::css_proto_converter::MediaInParens* MediaNot::release_media_in_parens() {
  // @@protoc_insertion_point(field_release:css_proto_converter.MediaNot.media_in_parens)
  clear_has_media_in_parens();
  ::css_proto_converter::MediaInParens* temp = media_in_parens_;
  media_in_parens_ = NULL;
  return temp;
}
inline ::css_proto_converter::MediaInParens* MediaNot::mutable_media_in_parens() {
  set_has_media_in_parens();
  if (media_in_parens_ == NULL) {
    auto* p = CreateMaybeMessage<::css_proto_converter::MediaInParens>(GetArenaNoVirtual());
    media_in_parens_ = p;
  }
  // @@protoc_insertion_point(field_mutable:css_proto_converter.MediaNot.media_in_parens)
  return media_in_parens_;
}
inline void MediaNot::set_allocated_media_in_parens(::css_proto_converter::MediaInParens* media_in_parens) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete media_in_parens_;
  }
  if (media_in_parens) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      media_in_parens = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, media_in_parens, submessage_arena);
    }
    set_has_media_in_parens();
  } else {
    clear_has_media_in_parens();
  }
  media_in_parens_ = media_in_parens;
  // @@protoc_insertion_point(field_set_allocated:css_proto_converter.MediaNot.media_in_parens)
}

// -------------------------------------------------------------------

// MediaAnd

// required .css_proto_converter.MediaInParens first_media_in_parens = 1;
inline bool MediaAnd::has_first_media_in_parens() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MediaAnd::set_has_first_media_in_parens() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MediaAnd::clear_has_first_media_in_parens() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MediaAnd::clear_first_media_in_parens() {
  if (first_media_in_parens_ != NULL) first_media_in_parens_->Clear();
  clear_has_first_media_in_parens();
}
inline const ::css_proto_converter::MediaInParens& MediaAnd::_internal_first_media_in_parens() const {
  return *first_media_in_parens_;
}
inline const ::css_proto_converter::MediaInParens& MediaAnd::first_media_in_parens() const {
  const ::css_proto_converter::MediaInParens* p = first_media_in_parens_;
  // @@protoc_insertion_point(field_get:css_proto_converter.MediaAnd.first_media_in_parens)
  return p != NULL ? *p : *reinterpret_cast<const ::css_proto_converter::MediaInParens*>(
      &::css_proto_converter::_MediaInParens_default_instance_);
}
inline ::css_proto_converter::MediaInParens* MediaAnd::release_first_media_in_parens() {
  // @@protoc_insertion_point(field_release:css_proto_converter.MediaAnd.first_media_in_parens)
  clear_has_first_media_in_parens();
  ::css_proto_converter::MediaInParens* temp = first_media_in_parens_;
  first_media_in_parens_ = NULL;
  return temp;
}
inline ::css_proto_converter::MediaInParens* MediaAnd::mutable_first_media_in_parens() {
  set_has_first_media_in_parens();
  if (first_media_in_parens_ == NULL) {
    auto* p = CreateMaybeMessage<::css_proto_converter::MediaInParens>(GetArenaNoVirtual());
    first_media_in_parens_ = p;
  }
  // @@protoc_insertion_point(field_mutable:css_proto_converter.MediaAnd.first_media_in_parens)
  return first_media_in_parens_;
}
inline void MediaAnd::set_allocated_first_media_in_parens(::css_proto_converter::MediaInParens* first_media_in_parens) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete first_media_in_parens_;
  }
  if (first_media_in_parens) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      first_media_in_parens = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, first_media_in_parens, submessage_arena);
    }
    set_has_first_media_in_parens();
  } else {
    clear_has_first_media_in_parens();
  }
  first_media_in_parens_ = first_media_in_parens;
  // @@protoc_insertion_point(field_set_allocated:css_proto_converter.MediaAnd.first_media_in_parens)
}

// required .css_proto_converter.MediaInParens second_media_in_parens = 2;
inline bool MediaAnd::has_second_media_in_parens() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MediaAnd::set_has_second_media_in_parens() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MediaAnd::clear_has_second_media_in_parens() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MediaAnd::clear_second_media_in_parens() {
  if (second_media_in_parens_ != NULL) second_media_in_parens_->Clear();
  clear_has_second_media_in_parens();
}
inline const ::css_proto_converter::MediaInParens& MediaAnd::_internal_second_media_in_parens() const {
  return *second_media_in_parens_;
}
inline const ::css_proto_converter::MediaInParens& MediaAnd::second_media_in_parens() const {
  const ::css_proto_converter::MediaInParens* p = second_media_in_parens_;
  // @@protoc_insertion_point(field_get:css_proto_converter.MediaAnd.second_media_in_parens)
  return p != NULL ? *p : *reinterpret_cast<const ::css_proto_converter::MediaInParens*>(
      &::css_proto_converter::_MediaInParens_default_instance_);
}
inline ::css_proto_converter::MediaInParens* MediaAnd::release_second_media_in_parens() {
  // @@protoc_insertion_point(field_release:css_proto_converter.MediaAnd.second_media_in_parens)
  clear_has_second_media_in_parens();
  ::css_proto_converter::MediaInParens* temp = second_media_in_parens_;
  second_media_in_parens_ = NULL;
  return temp;
}
inline ::css_proto_converter::MediaInParens* MediaAnd::mutable_second_media_in_parens() {
  set_has_second_media_in_parens();
  if (second_media_in_parens_ == NULL) {
    auto* p = CreateMaybeMessage<::css_proto_converter::MediaInParens>(GetArenaNoVirtual());
    second_media_in_parens_ = p;
  }
  // @@protoc_insertion_point(field_mutable:css_proto_converter.MediaAnd.second_media_in_parens)
  return second_media_in_parens_;
}
inline void MediaAnd::set_allocated_second_media_in_parens(::css_proto_converter::MediaInParens* second_media_in_parens) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete second_media_in_parens_;
  }
  if (second_media_in_parens) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      second_media_in_parens = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, second_media_in_parens, submessage_arena);
    }
    set_has_second_media_in_parens();
  } else {
    clear_has_second_media_in_parens();
  }
  second_media_in_parens_ = second_media_in_parens;
  // @@protoc_insertion_point(field_set_allocated:css_proto_converter.MediaAnd.second_media_in_parens)
}

// repeated .css_proto_converter.MediaInParens media_in_parens_list = 3;
inline int MediaAnd::media_in_parens_list_size() const {
  return media_in_parens_list_.size();
}
inline void MediaAnd::clear_media_in_parens_list() {
  media_in_parens_list_.Clear();
}
inline ::css_proto_converter::MediaInParens* MediaAnd::mutable_media_in_parens_list(int index) {
  // @@protoc_insertion_point(field_mutable:css_proto_converter.MediaAnd.media_in_parens_list)
  return media_in_parens_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::css_proto_converter::MediaInParens >*
MediaAnd::mutable_media_in_parens_list() {
  // @@protoc_insertion_point(field_mutable_list:css_proto_converter.MediaAnd.media_in_parens_list)
  return &media_in_parens_list_;
}
inline const ::css_proto_converter::MediaInParens& MediaAnd::media_in_parens_list(int index) const {
  // @@protoc_insertion_point(field_get:css_proto_converter.MediaAnd.media_in_parens_list)
  return media_in_parens_list_.Get(index);
}
inline ::css_proto_converter::MediaInParens* MediaAnd::add_media_in_parens_list() {
  // @@protoc_insertion_point(field_add:css_proto_converter.MediaAnd.media_in_parens_list)
  return media_in_parens_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::css_proto_converter::MediaInParens >&
MediaAnd::media_in_parens_list() const {
  // @@protoc_insertion_point(field_list:css_proto_converter.MediaAnd.media_in_parens_list)
  return media_in_parens_list_;
}

// -------------------------------------------------------------------

// MediaOr

// required .css_proto_converter.MediaInParens first_media_in_parens = 1;
inline bool MediaOr::has_first_media_in_parens() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MediaOr::set_has_first_media_in_parens() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MediaOr::clear_has_first_media_in_parens() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MediaOr::clear_first_media_in_parens() {
  if (first_media_in_parens_ != NULL) first_media_in_parens_->Clear();
  clear_has_first_media_in_parens();
}
inline const ::css_proto_converter::MediaInParens& MediaOr::_internal_first_media_in_parens() const {
  return *first_media_in_parens_;
}
inline const ::css_proto_converter::MediaInParens& MediaOr::first_media_in_parens() const {
  const ::css_proto_converter::MediaInParens* p = first_media_in_parens_;
  // @@protoc_insertion_point(field_get:css_proto_converter.MediaOr.first_media_in_parens)
  return p != NULL ? *p : *reinterpret_cast<const ::css_proto_converter::MediaInParens*>(
      &::css_proto_converter::_MediaInParens_default_instance_);
}
inline ::css_proto_converter::MediaInParens* MediaOr::release_first_media_in_parens() {
  // @@protoc_insertion_point(field_release:css_proto_converter.MediaOr.first_media_in_parens)
  clear_has_first_media_in_parens();
  ::css_proto_converter::MediaInParens* temp = first_media_in_parens_;
  first_media_in_parens_ = NULL;
  return temp;
}
inline ::css_proto_converter::MediaInParens* MediaOr::mutable_first_media_in_parens() {
  set_has_first_media_in_parens();
  if (first_media_in_parens_ == NULL) {
    auto* p = CreateMaybeMessage<::css_proto_converter::MediaInParens>(GetArenaNoVirtual());
    first_media_in_parens_ = p;
  }
  // @@protoc_insertion_point(field_mutable:css_proto_converter.MediaOr.first_media_in_parens)
  return first_media_in_parens_;
}
inline void MediaOr::set_allocated_first_media_in_parens(::css_proto_converter::MediaInParens* first_media_in_parens) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete first_media_in_parens_;
  }
  if (first_media_in_parens) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      first_media_in_parens = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, first_media_in_parens, submessage_arena);
    }
    set_has_first_media_in_parens();
  } else {
    clear_has_first_media_in_parens();
  }
  first_media_in_parens_ = first_media_in_parens;
  // @@protoc_insertion_point(field_set_allocated:css_proto_converter.MediaOr.first_media_in_parens)
}

// required .css_proto_converter.MediaInParens second_media_in_parens = 2;
inline bool MediaOr::has_second_media_in_parens() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MediaOr::set_has_second_media_in_parens() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MediaOr::clear_has_second_media_in_parens() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MediaOr::clear_second_media_in_parens() {
  if (second_media_in_parens_ != NULL) second_media_in_parens_->Clear();
  clear_has_second_media_in_parens();
}
inline const ::css_proto_converter::MediaInParens& MediaOr::_internal_second_media_in_parens() const {
  return *second_media_in_parens_;
}
inline const ::css_proto_converter::MediaInParens& MediaOr::second_media_in_parens() const {
  const ::css_proto_converter::MediaInParens* p = second_media_in_parens_;
  // @@protoc_insertion_point(field_get:css_proto_converter.MediaOr.second_media_in_parens)
  return p != NULL ? *p : *reinterpret_cast<const ::css_proto_converter::MediaInParens*>(
      &::css_proto_converter::_MediaInParens_default_instance_);
}
inline ::css_proto_converter::MediaInParens* MediaOr::release_second_media_in_parens() {
  // @@protoc_insertion_point(field_release:css_proto_converter.MediaOr.second_media_in_parens)
  clear_has_second_media_in_parens();
  ::css_proto_converter::MediaInParens* temp = second_media_in_parens_;
  second_media_in_parens_ = NULL;
  return temp;
}
inline ::css_proto_converter::MediaInParens* MediaOr::mutable_second_media_in_parens() {
  set_has_second_media_in_parens();
  if (second_media_in_parens_ == NULL) {
    auto* p = CreateMaybeMessage<::css_proto_converter::MediaInParens>(GetArenaNoVirtual());
    second_media_in_parens_ = p;
  }
  // @@protoc_insertion_point(field_mutable:css_proto_converter.MediaOr.second_media_in_parens)
  return second_media_in_parens_;
}
inline void MediaOr::set_allocated_second_media_in_parens(::css_proto_converter::MediaInParens* second_media_in_parens) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete second_media_in_parens_;
  }
  if (second_media_in_parens) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      second_media_in_parens = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, second_media_in_parens, submessage_arena);
    }
    set_has_second_media_in_parens();
  } else {
    clear_has_second_media_in_parens();
  }
  second_media_in_parens_ = second_media_in_parens;
  // @@protoc_insertion_point(field_set_allocated:css_proto_converter.MediaOr.second_media_in_parens)
}

// repeated .css_proto_converter.MediaInParens media_in_parens_list = 3;
inline int MediaOr::media_in_parens_list_size() const {
  return media_in_parens_list_.size();
}
inline void MediaOr::clear_media_in_parens_list() {
  media_in_parens_list_.Clear();
}
inline ::css_proto_converter::MediaInParens* MediaOr::mutable_media_in_parens_list(int index) {
  // @@protoc_insertion_point(field_mutable:css_proto_converter.MediaOr.media_in_parens_list)
  return media_in_parens_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::css_proto_converter::MediaInParens >*
MediaOr::mutable_media_in_parens_list() {
  // @@protoc_insertion_point(field_mutable_list:css_proto_converter.MediaOr.media_in_parens_list)
  return &media_in_parens_list_;
}
inline const ::css_proto_converter::MediaInParens& MediaOr::media_in_parens_list(int index) const {
  // @@protoc_insertion_point(field_get:css_proto_converter.MediaOr.media_in_parens_list)
  return media_in_parens_list_.Get(index);
}
inline ::css_proto_converter::MediaInParens* MediaOr::add_media_in_parens_list() {
  // @@protoc_insertion_point(field_add:css_proto_converter.MediaOr.media_in_parens_list)
  return media_in_parens_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::css_proto_converter::MediaInParens >&
MediaOr::media_in_parens_list() const {
  // @@protoc_insertion_point(field_list:css_proto_converter.MediaOr.media_in_parens_list)
  return media_in_parens_list_;
}

// -------------------------------------------------------------------

// MediaInParens

// required .css_proto_converter.MediaFeature media_feature = 1;
inline bool MediaInParens::has_media_feature() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MediaInParens::set_has_media_feature() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MediaInParens::clear_has_media_feature() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MediaInParens::clear_media_feature() {
  if (media_feature_ != NULL) media_feature_->Clear();
  clear_has_media_feature();
}
inline const ::css_proto_converter::MediaFeature& MediaInParens::_internal_media_feature() const {
  return *media_feature_;
}
inline const ::css_proto_converter::MediaFeature& MediaInParens::media_feature() const {
  const ::css_proto_converter::MediaFeature* p = media_feature_;
  // @@protoc_insertion_point(field_get:css_proto_converter.MediaInParens.media_feature)
  return p != NULL ? *p : *reinterpret_cast<const ::css_proto_converter::MediaFeature*>(
      &::css_proto_converter::_MediaFeature_default_instance_);
}
inline ::css_proto_converter::MediaFeature* MediaInParens::release_media_feature() {
  // @@protoc_insertion_point(field_release:css_proto_converter.MediaInParens.media_feature)
  clear_has_media_feature();
  ::css_proto_converter::MediaFeature* temp = media_feature_;
  media_feature_ = NULL;
  return temp;
}
inline ::css_proto_converter::MediaFeature* MediaInParens::mutable_media_feature() {
  set_has_media_feature();
  if (media_feature_ == NULL) {
    auto* p = CreateMaybeMessage<::css_proto_converter::MediaFeature>(GetArenaNoVirtual());
    media_feature_ = p;
  }
  // @@protoc_insertion_point(field_mutable:css_proto_converter.MediaInParens.media_feature)
  return media_feature_;
}
inline void MediaInParens::set_allocated_media_feature(::css_proto_converter::MediaFeature* media_feature) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete media_feature_;
  }
  if (media_feature) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      media_feature = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, media_feature, submessage_arena);
    }
    set_has_media_feature();
  } else {
    clear_has_media_feature();
  }
  media_feature_ = media_feature;
  // @@protoc_insertion_point(field_set_allocated:css_proto_converter.MediaInParens.media_feature)
}

// optional .css_proto_converter.MediaCondition media_condition = 2;
inline bool MediaInParens::has_media_condition() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MediaInParens::set_has_media_condition() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MediaInParens::clear_has_media_condition() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MediaInParens::clear_media_condition() {
  if (media_condition_ != NULL) media_condition_->Clear();
  clear_has_media_condition();
}
inline const ::css_proto_converter::MediaCondition& MediaInParens::_internal_media_condition() const {
  return *media_condition_;
}
inline const ::css_proto_converter::MediaCondition& MediaInParens::media_condition() const {
  const ::css_proto_converter::MediaCondition* p = media_condition_;
  // @@protoc_insertion_point(field_get:css_proto_converter.MediaInParens.media_condition)
  return p != NULL ? *p : *reinterpret_cast<const ::css_proto_converter::MediaCondition*>(
      &::css_proto_converter::_MediaCondition_default_instance_);
}
inline ::css_proto_converter::MediaCondition* MediaInParens::release_media_condition() {
  // @@protoc_insertion_point(field_release:css_proto_converter.MediaInParens.media_condition)
  clear_has_media_condition();
  ::css_proto_converter::MediaCondition* temp = media_condition_;
  media_condition_ = NULL;
  return temp;
}
inline ::css_proto_converter::MediaCondition* MediaInParens::mutable_media_condition() {
  set_has_media_condition();
  if (media_condition_ == NULL) {
    auto* p = CreateMaybeMessage<::css_proto_converter::MediaCondition>(GetArenaNoVirtual());
    media_condition_ = p;
  }
  // @@protoc_insertion_point(field_mutable:css_proto_converter.MediaInParens.media_condition)
  return media_condition_;
}
inline void MediaInParens::set_allocated_media_condition(::css_proto_converter::MediaCondition* media_condition) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete media_condition_;
  }
  if (media_condition) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      media_condition = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, media_condition, submessage_arena);
    }
    set_has_media_condition();
  } else {
    clear_has_media_condition();
  }
  media_condition_ = media_condition;
  // @@protoc_insertion_point(field_set_allocated:css_proto_converter.MediaInParens.media_condition)
}

// -------------------------------------------------------------------

// MediaFeature

// required .css_proto_converter.MfPlain mf_plain = 1;
inline bool MediaFeature::has_mf_plain() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MediaFeature::set_has_mf_plain() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MediaFeature::clear_has_mf_plain() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MediaFeature::clear_mf_plain() {
  if (mf_plain_ != NULL) mf_plain_->Clear();
  clear_has_mf_plain();
}
inline const ::css_proto_converter::MfPlain& MediaFeature::_internal_mf_plain() const {
  return *mf_plain_;
}
inline const ::css_proto_converter::MfPlain& MediaFeature::mf_plain() const {
  const ::css_proto_converter::MfPlain* p = mf_plain_;
  // @@protoc_insertion_point(field_get:css_proto_converter.MediaFeature.mf_plain)
  return p != NULL ? *p : *reinterpret_cast<const ::css_proto_converter::MfPlain*>(
      &::css_proto_converter::_MfPlain_default_instance_);
}
inline ::css_proto_converter::MfPlain* MediaFeature::release_mf_plain() {
  // @@protoc_insertion_point(field_release:css_proto_converter.MediaFeature.mf_plain)
  clear_has_mf_plain();
  ::css_proto_converter::MfPlain* temp = mf_plain_;
  mf_plain_ = NULL;
  return temp;
}
inline ::css_proto_converter::MfPlain* MediaFeature::mutable_mf_plain() {
  set_has_mf_plain();
  if (mf_plain_ == NULL) {
    auto* p = CreateMaybeMessage<::css_proto_converter::MfPlain>(GetArenaNoVirtual());
    mf_plain_ = p;
  }
  // @@protoc_insertion_point(field_mutable:css_proto_converter.MediaFeature.mf_plain)
  return mf_plain_;
}
inline void MediaFeature::set_allocated_mf_plain(::css_proto_converter::MfPlain* mf_plain) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete mf_plain_;
  }
  if (mf_plain) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      mf_plain = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, mf_plain, submessage_arena);
    }
    set_has_mf_plain();
  } else {
    clear_has_mf_plain();
  }
  mf_plain_ = mf_plain;
  // @@protoc_insertion_point(field_set_allocated:css_proto_converter.MediaFeature.mf_plain)
}

// optional .css_proto_converter.MfBool mf_bool = 2;
inline bool MediaFeature::has_mf_bool() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MediaFeature::set_has_mf_bool() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MediaFeature::clear_has_mf_bool() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MediaFeature::clear_mf_bool() {
  if (mf_bool_ != NULL) mf_bool_->Clear();
  clear_has_mf_bool();
}
inline const ::css_proto_converter::MfBool& MediaFeature::_internal_mf_bool() const {
  return *mf_bool_;
}
inline const ::css_proto_converter::MfBool& MediaFeature::mf_bool() const {
  const ::css_proto_converter::MfBool* p = mf_bool_;
  // @@protoc_insertion_point(field_get:css_proto_converter.MediaFeature.mf_bool)
  return p != NULL ? *p : *reinterpret_cast<const ::css_proto_converter::MfBool*>(
      &::css_proto_converter::_MfBool_default_instance_);
}
inline ::css_proto_converter::MfBool* MediaFeature::release_mf_bool() {
  // @@protoc_insertion_point(field_release:css_proto_converter.MediaFeature.mf_bool)
  clear_has_mf_bool();
  ::css_proto_converter::MfBool* temp = mf_bool_;
  mf_bool_ = NULL;
  return temp;
}
inline ::css_proto_converter::MfBool* MediaFeature::mutable_mf_bool() {
  set_has_mf_bool();
  if (mf_bool_ == NULL) {
    auto* p = CreateMaybeMessage<::css_proto_converter::MfBool>(GetArenaNoVirtual());
    mf_bool_ = p;
  }
  // @@protoc_insertion_point(field_mutable:css_proto_converter.MediaFeature.mf_bool)
  return mf_bool_;
}
inline void MediaFeature::set_allocated_mf_bool(::css_proto_converter::MfBool* mf_bool) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete mf_bool_;
  }
  if (mf_bool) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      mf_bool = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, mf_bool, submessage_arena);
    }
    set_has_mf_bool();
  } else {
    clear_has_mf_bool();
  }
  mf_bool_ = mf_bool;
  // @@protoc_insertion_point(field_set_allocated:css_proto_converter.MediaFeature.mf_bool)
}

// -------------------------------------------------------------------

// MfPlain

// required .css_proto_converter.MfName property = 1;
inline bool MfPlain::has_property() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MfPlain::set_has_property() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MfPlain::clear_has_property() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MfPlain::clear_property() {
  if (property_ != NULL) property_->Clear();
  clear_has_property();
}
inline const ::css_proto_converter::MfName& MfPlain::_internal_property() const {
  return *property_;
}
inline const ::css_proto_converter::MfName& MfPlain::property() const {
  const ::css_proto_converter::MfName* p = property_;
  // @@protoc_insertion_point(field_get:css_proto_converter.MfPlain.property)
  return p != NULL ? *p : *reinterpret_cast<const ::css_proto_converter::MfName*>(
      &::css_proto_converter::_MfName_default_instance_);
}
inline ::css_proto_converter::MfName* MfPlain::release_property() {
  // @@protoc_insertion_point(field_release:css_proto_converter.MfPlain.property)
  clear_has_property();
  ::css_proto_converter::MfName* temp = property_;
  property_ = NULL;
  return temp;
}
inline ::css_proto_converter::MfName* MfPlain::mutable_property() {
  set_has_property();
  if (property_ == NULL) {
    auto* p = CreateMaybeMessage<::css_proto_converter::MfName>(GetArenaNoVirtual());
    property_ = p;
  }
  // @@protoc_insertion_point(field_mutable:css_proto_converter.MfPlain.property)
  return property_;
}
inline void MfPlain::set_allocated_property(::css_proto_converter::MfName* property) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete property_;
  }
  if (property) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      property = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, property, submessage_arena);
    }
    set_has_property();
  } else {
    clear_has_property();
  }
  property_ = property;
  // @@protoc_insertion_point(field_set_allocated:css_proto_converter.MfPlain.property)
}

// required .css_proto_converter.MfValue value = 2;
inline bool MfPlain::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MfPlain::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MfPlain::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MfPlain::clear_value() {
  if (value_ != NULL) value_->Clear();
  clear_has_value();
}
inline const ::css_proto_converter::MfValue& MfPlain::_internal_value() const {
  return *value_;
}
inline const ::css_proto_converter::MfValue& MfPlain::value() const {
  const ::css_proto_converter::MfValue* p = value_;
  // @@protoc_insertion_point(field_get:css_proto_converter.MfPlain.value)
  return p != NULL ? *p : *reinterpret_cast<const ::css_proto_converter::MfValue*>(
      &::css_proto_converter::_MfValue_default_instance_);
}
inline ::css_proto_converter::MfValue* MfPlain::release_value() {
  // @@protoc_insertion_point(field_release:css_proto_converter.MfPlain.value)
  clear_has_value();
  ::css_proto_converter::MfValue* temp = value_;
  value_ = NULL;
  return temp;
}
inline ::css_proto_converter::MfValue* MfPlain::mutable_value() {
  set_has_value();
  if (value_ == NULL) {
    auto* p = CreateMaybeMessage<::css_proto_converter::MfValue>(GetArenaNoVirtual());
    value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:css_proto_converter.MfPlain.value)
  return value_;
}
inline void MfPlain::set_allocated_value(::css_proto_converter::MfValue* value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete value_;
  }
  if (value) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    set_has_value();
  } else {
    clear_has_value();
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:css_proto_converter.MfPlain.value)
}

// -------------------------------------------------------------------

// MfBool

// required .css_proto_converter.MfName mf_name = 1;
inline bool MfBool::has_mf_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MfBool::set_has_mf_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MfBool::clear_has_mf_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MfBool::clear_mf_name() {
  if (mf_name_ != NULL) mf_name_->Clear();
  clear_has_mf_name();
}
inline const ::css_proto_converter::MfName& MfBool::_internal_mf_name() const {
  return *mf_name_;
}
inline const ::css_proto_converter::MfName& MfBool::mf_name() const {
  const ::css_proto_converter::MfName* p = mf_name_;
  // @@protoc_insertion_point(field_get:css_proto_converter.MfBool.mf_name)
  return p != NULL ? *p : *reinterpret_cast<const ::css_proto_converter::MfName*>(
      &::css_proto_converter::_MfName_default_instance_);
}
inline ::css_proto_converter::MfName* MfBool::release_mf_name() {
  // @@protoc_insertion_point(field_release:css_proto_converter.MfBool.mf_name)
  clear_has_mf_name();
  ::css_proto_converter::MfName* temp = mf_name_;
  mf_name_ = NULL;
  return temp;
}
inline ::css_proto_converter::MfName* MfBool::mutable_mf_name() {
  set_has_mf_name();
  if (mf_name_ == NULL) {
    auto* p = CreateMaybeMessage<::css_proto_converter::MfName>(GetArenaNoVirtual());
    mf_name_ = p;
  }
  // @@protoc_insertion_point(field_mutable:css_proto_converter.MfBool.mf_name)
  return mf_name_;
}
inline void MfBool::set_allocated_mf_name(::css_proto_converter::MfName* mf_name) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete mf_name_;
  }
  if (mf_name) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      mf_name = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, mf_name, submessage_arena);
    }
    set_has_mf_name();
  } else {
    clear_has_mf_name();
  }
  mf_name_ = mf_name;
  // @@protoc_insertion_point(field_set_allocated:css_proto_converter.MfBool.mf_name)
}

// -------------------------------------------------------------------

// MfName

// required .css_proto_converter.MfName.ValueId id = 1;
inline bool MfName::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MfName::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MfName::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MfName::clear_id() {
  id_ = 1;
  clear_has_id();
}
inline ::css_proto_converter::MfName_ValueId MfName::id() const {
  // @@protoc_insertion_point(field_get:css_proto_converter.MfName.id)
  return static_cast< ::css_proto_converter::MfName_ValueId >(id_);
}
inline void MfName::set_id(::css_proto_converter::MfName_ValueId value) {
  assert(::css_proto_converter::MfName_ValueId_IsValid(value));
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:css_proto_converter.MfName.id)
}

// -------------------------------------------------------------------

// MfValue

// required .css_proto_converter.Num num = 1;
inline bool MfValue::has_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MfValue::set_has_num() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MfValue::clear_has_num() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MfValue::clear_num() {
  if (num_ != NULL) num_->Clear();
  clear_has_num();
}
inline const ::css_proto_converter::Num& MfValue::_internal_num() const {
  return *num_;
}
inline const ::css_proto_converter::Num& MfValue::num() const {
  const ::css_proto_converter::Num* p = num_;
  // @@protoc_insertion_point(field_get:css_proto_converter.MfValue.num)
  return p != NULL ? *p : *reinterpret_cast<const ::css_proto_converter::Num*>(
      &::css_proto_converter::_Num_default_instance_);
}
inline ::css_proto_converter::Num* MfValue::release_num() {
  // @@protoc_insertion_point(field_release:css_proto_converter.MfValue.num)
  clear_has_num();
  ::css_proto_converter::Num* temp = num_;
  num_ = NULL;
  return temp;
}
inline ::css_proto_converter::Num* MfValue::mutable_num() {
  set_has_num();
  if (num_ == NULL) {
    auto* p = CreateMaybeMessage<::css_proto_converter::Num>(GetArenaNoVirtual());
    num_ = p;
  }
  // @@protoc_insertion_point(field_mutable:css_proto_converter.MfValue.num)
  return num_;
}
inline void MfValue::set_allocated_num(::css_proto_converter::Num* num) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete num_;
  }
  if (num) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      num = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, num, submessage_arena);
    }
    set_has_num();
  } else {
    clear_has_num();
  }
  num_ = num;
  // @@protoc_insertion_point(field_set_allocated:css_proto_converter.MfValue.num)
}

// optional .css_proto_converter.Length length = 2;
inline bool MfValue::has_length() const {
  return rhs_case() == kLength;
}
inline void MfValue::set_has_length() {
  _oneof_case_[0] = kLength;
}
inline void MfValue::clear_length() {
  if (has_length()) {
    delete rhs_.length_;
    clear_has_rhs();
  }
}
inline const ::css_proto_converter::Length& MfValue::_internal_length() const {
  return *rhs_.length_;
}
inline ::css_proto_converter::Length* MfValue::release_length() {
  // @@protoc_insertion_point(field_release:css_proto_converter.MfValue.length)
  if (has_length()) {
    clear_has_rhs();
      ::css_proto_converter::Length* temp = rhs_.length_;
    rhs_.length_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::css_proto_converter::Length& MfValue::length() const {
  // @@protoc_insertion_point(field_get:css_proto_converter.MfValue.length)
  return has_length()
      ? *rhs_.length_
      : *reinterpret_cast< ::css_proto_converter::Length*>(&::css_proto_converter::_Length_default_instance_);
}
inline ::css_proto_converter::Length* MfValue::mutable_length() {
  if (!has_length()) {
    clear_rhs();
    set_has_length();
    rhs_.length_ = CreateMaybeMessage< ::css_proto_converter::Length >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:css_proto_converter.MfValue.length)
  return rhs_.length_;
}

// optional .css_proto_converter.Ident ident = 3;
inline bool MfValue::has_ident() const {
  return rhs_case() == kIdent;
}
inline void MfValue::set_has_ident() {
  _oneof_case_[0] = kIdent;
}
inline void MfValue::clear_ident() {
  if (has_ident()) {
    delete rhs_.ident_;
    clear_has_rhs();
  }
}
inline const ::css_proto_converter::Ident& MfValue::_internal_ident() const {
  return *rhs_.ident_;
}
inline ::css_proto_converter::Ident* MfValue::release_ident() {
  // @@protoc_insertion_point(field_release:css_proto_converter.MfValue.ident)
  if (has_ident()) {
    clear_has_rhs();
      ::css_proto_converter::Ident* temp = rhs_.ident_;
    rhs_.ident_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::css_proto_converter::Ident& MfValue::ident() const {
  // @@protoc_insertion_point(field_get:css_proto_converter.MfValue.ident)
  return has_ident()
      ? *rhs_.ident_
      : *reinterpret_cast< ::css_proto_converter::Ident*>(&::css_proto_converter::_Ident_default_instance_);
}
inline ::css_proto_converter::Ident* MfValue::mutable_ident() {
  if (!has_ident()) {
    clear_rhs();
    set_has_ident();
    rhs_.ident_ = CreateMaybeMessage< ::css_proto_converter::Ident >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:css_proto_converter.MfValue.ident)
  return rhs_.ident_;
}

inline bool MfValue::has_rhs() const {
  return rhs_case() != RHS_NOT_SET;
}
inline void MfValue::clear_has_rhs() {
  _oneof_case_[0] = RHS_NOT_SET;
}
inline MfValue::RhsCase MfValue::rhs_case() const {
  return MfValue::RhsCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Namespace

// optional .css_proto_converter.NamespacePrefix namespace_prefix = 1;
inline bool Namespace::has_namespace_prefix() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Namespace::set_has_namespace_prefix() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Namespace::clear_has_namespace_prefix() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Namespace::clear_namespace_prefix() {
  if (namespace_prefix_ != NULL) namespace_prefix_->Clear();
  clear_has_namespace_prefix();
}
inline const ::css_proto_converter::NamespacePrefix& Namespace::_internal_namespace_prefix() const {
  return *namespace_prefix_;
}
inline const ::css_proto_converter::NamespacePrefix& Namespace::namespace_prefix() const {
  const ::css_proto_converter::NamespacePrefix* p = namespace_prefix_;
  // @@protoc_insertion_point(field_get:css_proto_converter.Namespace.namespace_prefix)
  return p != NULL ? *p : *reinterpret_cast<const ::css_proto_converter::NamespacePrefix*>(
      &::css_proto_converter::_NamespacePrefix_default_instance_);
}
inline ::css_proto_converter::NamespacePrefix* Namespace::release_namespace_prefix() {
  // @@protoc_insertion_point(field_release:css_proto_converter.Namespace.namespace_prefix)
  clear_has_namespace_prefix();
  ::css_proto_converter::NamespacePrefix* temp = namespace_prefix_;
  namespace_prefix_ = NULL;
  return temp;
}
inline ::css_proto_converter::NamespacePrefix* Namespace::mutable_namespace_prefix() {
  set_has_namespace_prefix();
  if (namespace_prefix_ == NULL) {
    auto* p = CreateMaybeMessage<::css_proto_converter::NamespacePrefix>(GetArenaNoVirtual());
    namespace_prefix_ = p;
  }
  // @@protoc_insertion_point(field_mutable:css_proto_converter.Namespace.namespace_prefix)
  return namespace_prefix_;
}
inline void Namespace::set_allocated_namespace_prefix(::css_proto_converter::NamespacePrefix* namespace_prefix) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete namespace_prefix_;
  }
  if (namespace_prefix) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      namespace_prefix = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, namespace_prefix, submessage_arena);
    }
    set_has_namespace_prefix();
  } else {
    clear_has_namespace_prefix();
  }
  namespace_prefix_ = namespace_prefix;
  // @@protoc_insertion_point(field_set_allocated:css_proto_converter.Namespace.namespace_prefix)
}

// optional .css_proto_converter.String string = 2;
inline bool Namespace::has_string() const {
  return rhs_case() == kString;
}
inline void Namespace::set_has_string() {
  _oneof_case_[0] = kString;
}
inline void Namespace::clear_string() {
  if (has_string()) {
    delete rhs_.string_;
    clear_has_rhs();
  }
}
inline const ::css_proto_converter::String& Namespace::_internal_string() const {
  return *rhs_.string_;
}
inline ::css_proto_converter::String* Namespace::release_string() {
  // @@protoc_insertion_point(field_release:css_proto_converter.Namespace.string)
  if (has_string()) {
    clear_has_rhs();
      ::css_proto_converter::String* temp = rhs_.string_;
    rhs_.string_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::css_proto_converter::String& Namespace::string() const {
  // @@protoc_insertion_point(field_get:css_proto_converter.Namespace.string)
  return has_string()
      ? *rhs_.string_
      : *reinterpret_cast< ::css_proto_converter::String*>(&::css_proto_converter::_String_default_instance_);
}
inline ::css_proto_converter::String* Namespace::mutable_string() {
  if (!has_string()) {
    clear_rhs();
    set_has_string();
    rhs_.string_ = CreateMaybeMessage< ::css_proto_converter::String >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:css_proto_converter.Namespace.string)
  return rhs_.string_;
}

// optional .css_proto_converter.Uri uri = 3;
inline bool Namespace::has_uri() const {
  return rhs_case() == kUri;
}
inline void Namespace::set_has_uri() {
  _oneof_case_[0] = kUri;
}
inline void Namespace::clear_uri() {
  if (has_uri()) {
    delete rhs_.uri_;
    clear_has_rhs();
  }
}
inline const ::css_proto_converter::Uri& Namespace::_internal_uri() const {
  return *rhs_.uri_;
}
inline ::css_proto_converter::Uri* Namespace::release_uri() {
  // @@protoc_insertion_point(field_release:css_proto_converter.Namespace.uri)
  if (has_uri()) {
    clear_has_rhs();
      ::css_proto_converter::Uri* temp = rhs_.uri_;
    rhs_.uri_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::css_proto_converter::Uri& Namespace::uri() const {
  // @@protoc_insertion_point(field_get:css_proto_converter.Namespace.uri)
  return has_uri()
      ? *rhs_.uri_
      : *reinterpret_cast< ::css_proto_converter::Uri*>(&::css_proto_converter::_Uri_default_instance_);
}
inline ::css_proto_converter::Uri* Namespace::mutable_uri() {
  if (!has_uri()) {
    clear_rhs();
    set_has_uri();
    rhs_.uri_ = CreateMaybeMessage< ::css_proto_converter::Uri >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:css_proto_converter.Namespace.uri)
  return rhs_.uri_;
}

inline bool Namespace::has_rhs() const {
  return rhs_case() != RHS_NOT_SET;
}
inline void Namespace::clear_has_rhs() {
  _oneof_case_[0] = RHS_NOT_SET;
}
inline Namespace::RhsCase Namespace::rhs_case() const {
  return Namespace::RhsCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// NamespacePrefix

// required .css_proto_converter.Ident ident = 1;
inline bool NamespacePrefix::has_ident() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NamespacePrefix::set_has_ident() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NamespacePrefix::clear_has_ident() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NamespacePrefix::clear_ident() {
  if (ident_ != NULL) ident_->Clear();
  clear_has_ident();
}
inline const ::css_proto_converter::Ident& NamespacePrefix::_internal_ident() const {
  return *ident_;
}
inline const ::css_proto_converter::Ident& NamespacePrefix::ident() const {
  const ::css_proto_converter::Ident* p = ident_;
  // @@protoc_insertion_point(field_get:css_proto_converter.NamespacePrefix.ident)
  return p != NULL ? *p : *reinterpret_cast<const ::css_proto_converter::Ident*>(
      &::css_proto_converter::_Ident_default_instance_);
}
inline ::css_proto_converter::Ident* NamespacePrefix::release_ident() {
  // @@protoc_insertion_point(field_release:css_proto_converter.NamespacePrefix.ident)
  clear_has_ident();
  ::css_proto_converter::Ident* temp = ident_;
  ident_ = NULL;
  return temp;
}
inline ::css_proto_converter::Ident* NamespacePrefix::mutable_ident() {
  set_has_ident();
  if (ident_ == NULL) {
    auto* p = CreateMaybeMessage<::css_proto_converter::Ident>(GetArenaNoVirtual());
    ident_ = p;
  }
  // @@protoc_insertion_point(field_mutable:css_proto_converter.NamespacePrefix.ident)
  return ident_;
}
inline void NamespacePrefix::set_allocated_ident(::css_proto_converter::Ident* ident) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete ident_;
  }
  if (ident) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ident = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ident, submessage_arena);
    }
    set_has_ident();
  } else {
    clear_has_ident();
  }
  ident_ = ident;
  // @@protoc_insertion_point(field_set_allocated:css_proto_converter.NamespacePrefix.ident)
}

// -------------------------------------------------------------------

// Media

// required .css_proto_converter.MediaQueryList media_query_list = 1;
inline bool Media::has_media_query_list() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Media::set_has_media_query_list() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Media::clear_has_media_query_list() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Media::clear_media_query_list() {
  if (media_query_list_ != NULL) media_query_list_->Clear();
  clear_has_media_query_list();
}
inline const ::css_proto_converter::MediaQueryList& Media::_internal_media_query_list() const {
  return *media_query_list_;
}
inline const ::css_proto_converter::MediaQueryList& Media::media_query_list() const {
  const ::css_proto_converter::MediaQueryList* p = media_query_list_;
  // @@protoc_insertion_point(field_get:css_proto_converter.Media.media_query_list)
  return p != NULL ? *p : *reinterpret_cast<const ::css_proto_converter::MediaQueryList*>(
      &::css_proto_converter::_MediaQueryList_default_instance_);
}
inline ::css_proto_converter::MediaQueryList* Media::release_media_query_list() {
  // @@protoc_insertion_point(field_release:css_proto_converter.Media.media_query_list)
  clear_has_media_query_list();
  ::css_proto_converter::MediaQueryList* temp = media_query_list_;
  media_query_list_ = NULL;
  return temp;
}
inline ::css_proto_converter::MediaQueryList* Media::mutable_media_query_list() {
  set_has_media_query_list();
  if (media_query_list_ == NULL) {
    auto* p = CreateMaybeMessage<::css_proto_converter::MediaQueryList>(GetArenaNoVirtual());
    media_query_list_ = p;
  }
  // @@protoc_insertion_point(field_mutable:css_proto_converter.Media.media_query_list)
  return media_query_list_;
}
inline void Media::set_allocated_media_query_list(::css_proto_converter::MediaQueryList* media_query_list) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete media_query_list_;
  }
  if (media_query_list) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      media_query_list = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, media_query_list, submessage_arena);
    }
    set_has_media_query_list();
  } else {
    clear_has_media_query_list();
  }
  media_query_list_ = media_query_list;
  // @@protoc_insertion_point(field_set_allocated:css_proto_converter.Media.media_query_list)
}

// repeated .css_proto_converter.Ruleset rulesets = 2;
inline int Media::rulesets_size() const {
  return rulesets_.size();
}
inline void Media::clear_rulesets() {
  rulesets_.Clear();
}
inline ::css_proto_converter::Ruleset* Media::mutable_rulesets(int index) {
  // @@protoc_insertion_point(field_mutable:css_proto_converter.Media.rulesets)
  return rulesets_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::css_proto_converter::Ruleset >*
Media::mutable_rulesets() {
  // @@protoc_insertion_point(field_mutable_list:css_proto_converter.Media.rulesets)
  return &rulesets_;
}
inline const ::css_proto_converter::Ruleset& Media::rulesets(int index) const {
  // @@protoc_insertion_point(field_get:css_proto_converter.Media.rulesets)
  return rulesets_.Get(index);
}
inline ::css_proto_converter::Ruleset* Media::add_rulesets() {
  // @@protoc_insertion_point(field_add:css_proto_converter.Media.rulesets)
  return rulesets_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::css_proto_converter::Ruleset >&
Media::rulesets() const {
  // @@protoc_insertion_point(field_list:css_proto_converter.Media.rulesets)
  return rulesets_;
}

// -------------------------------------------------------------------

// Page

// optional .css_proto_converter.Ident ident = 1;
inline bool Page::has_ident() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Page::set_has_ident() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Page::clear_has_ident() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Page::clear_ident() {
  if (ident_ != NULL) ident_->Clear();
  clear_has_ident();
}
inline const ::css_proto_converter::Ident& Page::_internal_ident() const {
  return *ident_;
}
inline const ::css_proto_converter::Ident& Page::ident() const {
  const ::css_proto_converter::Ident* p = ident_;
  // @@protoc_insertion_point(field_get:css_proto_converter.Page.ident)
  return p != NULL ? *p : *reinterpret_cast<const ::css_proto_converter::Ident*>(
      &::css_proto_converter::_Ident_default_instance_);
}
inline ::css_proto_converter::Ident* Page::release_ident() {
  // @@protoc_insertion_point(field_release:css_proto_converter.Page.ident)
  clear_has_ident();
  ::css_proto_converter::Ident* temp = ident_;
  ident_ = NULL;
  return temp;
}
inline ::css_proto_converter::Ident* Page::mutable_ident() {
  set_has_ident();
  if (ident_ == NULL) {
    auto* p = CreateMaybeMessage<::css_proto_converter::Ident>(GetArenaNoVirtual());
    ident_ = p;
  }
  // @@protoc_insertion_point(field_mutable:css_proto_converter.Page.ident)
  return ident_;
}
inline void Page::set_allocated_ident(::css_proto_converter::Ident* ident) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete ident_;
  }
  if (ident) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ident = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ident, submessage_arena);
    }
    set_has_ident();
  } else {
    clear_has_ident();
  }
  ident_ = ident;
  // @@protoc_insertion_point(field_set_allocated:css_proto_converter.Page.ident)
}

// optional .css_proto_converter.PseudoPage pseudo_page = 2;
inline bool Page::has_pseudo_page() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Page::set_has_pseudo_page() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Page::clear_has_pseudo_page() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Page::clear_pseudo_page() {
  if (pseudo_page_ != NULL) pseudo_page_->Clear();
  clear_has_pseudo_page();
}
inline const ::css_proto_converter::PseudoPage& Page::_internal_pseudo_page() const {
  return *pseudo_page_;
}
inline const ::css_proto_converter::PseudoPage& Page::pseudo_page() const {
  const ::css_proto_converter::PseudoPage* p = pseudo_page_;
  // @@protoc_insertion_point(field_get:css_proto_converter.Page.pseudo_page)
  return p != NULL ? *p : *reinterpret_cast<const ::css_proto_converter::PseudoPage*>(
      &::css_proto_converter::_PseudoPage_default_instance_);
}
inline ::css_proto_converter::PseudoPage* Page::release_pseudo_page() {
  // @@protoc_insertion_point(field_release:css_proto_converter.Page.pseudo_page)
  clear_has_pseudo_page();
  ::css_proto_converter::PseudoPage* temp = pseudo_page_;
  pseudo_page_ = NULL;
  return temp;
}
inline ::css_proto_converter::PseudoPage* Page::mutable_pseudo_page() {
  set_has_pseudo_page();
  if (pseudo_page_ == NULL) {
    auto* p = CreateMaybeMessage<::css_proto_converter::PseudoPage>(GetArenaNoVirtual());
    pseudo_page_ = p;
  }
  // @@protoc_insertion_point(field_mutable:css_proto_converter.Page.pseudo_page)
  return pseudo_page_;
}
inline void Page::set_allocated_pseudo_page(::css_proto_converter::PseudoPage* pseudo_page) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete pseudo_page_;
  }
  if (pseudo_page) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pseudo_page = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pseudo_page, submessage_arena);
    }
    set_has_pseudo_page();
  } else {
    clear_has_pseudo_page();
  }
  pseudo_page_ = pseudo_page;
  // @@protoc_insertion_point(field_set_allocated:css_proto_converter.Page.pseudo_page)
}

// required .css_proto_converter.DeclarationList declaration_list = 3;
inline bool Page::has_declaration_list() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Page::set_has_declaration_list() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Page::clear_has_declaration_list() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Page::clear_declaration_list() {
  if (declaration_list_ != NULL) declaration_list_->Clear();
  clear_has_declaration_list();
}
inline const ::css_proto_converter::DeclarationList& Page::_internal_declaration_list() const {
  return *declaration_list_;
}
inline const ::css_proto_converter::DeclarationList& Page::declaration_list() const {
  const ::css_proto_converter::DeclarationList* p = declaration_list_;
  // @@protoc_insertion_point(field_get:css_proto_converter.Page.declaration_list)
  return p != NULL ? *p : *reinterpret_cast<const ::css_proto_converter::DeclarationList*>(
      &::css_proto_converter::_DeclarationList_default_instance_);
}
inline ::css_proto_converter::DeclarationList* Page::release_declaration_list() {
  // @@protoc_insertion_point(field_release:css_proto_converter.Page.declaration_list)
  clear_has_declaration_list();
  ::css_proto_converter::DeclarationList* temp = declaration_list_;
  declaration_list_ = NULL;
  return temp;
}
inline ::css_proto_converter::DeclarationList* Page::mutable_declaration_list() {
  set_has_declaration_list();
  if (declaration_list_ == NULL) {
    auto* p = CreateMaybeMessage<::css_proto_converter::DeclarationList>(GetArenaNoVirtual());
    declaration_list_ = p;
  }
  // @@protoc_insertion_point(field_mutable:css_proto_converter.Page.declaration_list)
  return declaration_list_;
}
inline void Page::set_allocated_declaration_list(::css_proto_converter::DeclarationList* declaration_list) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete declaration_list_;
  }
  if (declaration_list) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      declaration_list = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, declaration_list, submessage_arena);
    }
    set_has_declaration_list();
  } else {
    clear_has_declaration_list();
  }
  declaration_list_ = declaration_list;
  // @@protoc_insertion_point(field_set_allocated:css_proto_converter.Page.declaration_list)
}

// -------------------------------------------------------------------

// DeclarationList

// required .css_proto_converter.Declaration first_declaration = 1;
inline bool DeclarationList::has_first_declaration() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeclarationList::set_has_first_declaration() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeclarationList::clear_has_first_declaration() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeclarationList::clear_first_declaration() {
  if (first_declaration_ != NULL) first_declaration_->Clear();
  clear_has_first_declaration();
}
inline const ::css_proto_converter::Declaration& DeclarationList::_internal_first_declaration() const {
  return *first_declaration_;
}
inline const ::css_proto_converter::Declaration& DeclarationList::first_declaration() const {
  const ::css_proto_converter::Declaration* p = first_declaration_;
  // @@protoc_insertion_point(field_get:css_proto_converter.DeclarationList.first_declaration)
  return p != NULL ? *p : *reinterpret_cast<const ::css_proto_converter::Declaration*>(
      &::css_proto_converter::_Declaration_default_instance_);
}
inline ::css_proto_converter::Declaration* DeclarationList::release_first_declaration() {
  // @@protoc_insertion_point(field_release:css_proto_converter.DeclarationList.first_declaration)
  clear_has_first_declaration();
  ::css_proto_converter::Declaration* temp = first_declaration_;
  first_declaration_ = NULL;
  return temp;
}
inline ::css_proto_converter::Declaration* DeclarationList::mutable_first_declaration() {
  set_has_first_declaration();
  if (first_declaration_ == NULL) {
    auto* p = CreateMaybeMessage<::css_proto_converter::Declaration>(GetArenaNoVirtual());
    first_declaration_ = p;
  }
  // @@protoc_insertion_point(field_mutable:css_proto_converter.DeclarationList.first_declaration)
  return first_declaration_;
}
inline void DeclarationList::set_allocated_first_declaration(::css_proto_converter::Declaration* first_declaration) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete first_declaration_;
  }
  if (first_declaration) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      first_declaration = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, first_declaration, submessage_arena);
    }
    set_has_first_declaration();
  } else {
    clear_has_first_declaration();
  }
  first_declaration_ = first_declaration;
  // @@protoc_insertion_point(field_set_allocated:css_proto_converter.DeclarationList.first_declaration)
}

// repeated .css_proto_converter.Declaration later_declarations = 2;
inline int DeclarationList::later_declarations_size() const {
  return later_declarations_.size();
}
inline void DeclarationList::clear_later_declarations() {
  later_declarations_.Clear();
}
inline ::css_proto_converter::Declaration* DeclarationList::mutable_later_declarations(int index) {
  // @@protoc_insertion_point(field_mutable:css_proto_converter.DeclarationList.later_declarations)
  return later_declarations_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::css_proto_converter::Declaration >*
DeclarationList::mutable_later_declarations() {
  // @@protoc_insertion_point(field_mutable_list:css_proto_converter.DeclarationList.later_declarations)
  return &later_declarations_;
}
inline const ::css_proto_converter::Declaration& DeclarationList::later_declarations(int index) const {
  // @@protoc_insertion_point(field_get:css_proto_converter.DeclarationList.later_declarations)
  return later_declarations_.Get(index);
}
inline ::css_proto_converter::Declaration* DeclarationList::add_later_declarations() {
  // @@protoc_insertion_point(field_add:css_proto_converter.DeclarationList.later_declarations)
  return later_declarations_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::css_proto_converter::Declaration >&
DeclarationList::later_declarations() const {
  // @@protoc_insertion_point(field_list:css_proto_converter.DeclarationList.later_declarations)
  return later_declarations_;
}

// -------------------------------------------------------------------

// PseudoPage

// required .css_proto_converter.Ident ident = 1;
inline bool PseudoPage::has_ident() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PseudoPage::set_has_ident() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PseudoPage::clear_has_ident() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PseudoPage::clear_ident() {
  if (ident_ != NULL) ident_->Clear();
  clear_has_ident();
}
inline const ::css_proto_converter::Ident& PseudoPage::_internal_ident() const {
  return *ident_;
}
inline const ::css_proto_converter::Ident& PseudoPage::ident() const {
  const ::css_proto_converter::Ident* p = ident_;
  // @@protoc_insertion_point(field_get:css_proto_converter.PseudoPage.ident)
  return p != NULL ? *p : *reinterpret_cast<const ::css_proto_converter::Ident*>(
      &::css_proto_converter::_Ident_default_instance_);
}
inline ::css_proto_converter::Ident* PseudoPage::release_ident() {
  // @@protoc_insertion_point(field_release:css_proto_converter.PseudoPage.ident)
  clear_has_ident();
  ::css_proto_converter::Ident* temp = ident_;
  ident_ = NULL;
  return temp;
}
inline ::css_proto_converter::Ident* PseudoPage::mutable_ident() {
  set_has_ident();
  if (ident_ == NULL) {
    auto* p = CreateMaybeMessage<::css_proto_converter::Ident>(GetArenaNoVirtual());
    ident_ = p;
  }
  // @@protoc_insertion_point(field_mutable:css_proto_converter.PseudoPage.ident)
  return ident_;
}
inline void PseudoPage::set_allocated_ident(::css_proto_converter::Ident* ident) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete ident_;
  }
  if (ident) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ident = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ident, submessage_arena);
    }
    set_has_ident();
  } else {
    clear_has_ident();
  }
  ident_ = ident;
  // @@protoc_insertion_point(field_set_allocated:css_proto_converter.PseudoPage.ident)
}

// -------------------------------------------------------------------

// FontFace

// -------------------------------------------------------------------

// Operator

// optional .css_proto_converter.Operator.AsciiValue ascii_value = 1;
inline bool Operator::has_ascii_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Operator::set_has_ascii_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Operator::clear_has_ascii_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Operator::clear_ascii_value() {
  ascii_value_ = 44;
  clear_has_ascii_value();
}
inline ::css_proto_converter::Operator_AsciiValue Operator::ascii_value() const {
  // @@protoc_insertion_point(field_get:css_proto_converter.Operator.ascii_value)
  return static_cast< ::css_proto_converter::Operator_AsciiValue >(ascii_value_);
}
inline void Operator::set_ascii_value(::css_proto_converter::Operator_AsciiValue value) {
  assert(::css_proto_converter::Operator_AsciiValue_IsValid(value));
  set_has_ascii_value();
  ascii_value_ = value;
  // @@protoc_insertion_point(field_set:css_proto_converter.Operator.ascii_value)
}

// -------------------------------------------------------------------

// UnaryOperator

// required .css_proto_converter.UnaryOperator.AsciiValue ascii_value = 1;
inline bool UnaryOperator::has_ascii_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UnaryOperator::set_has_ascii_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UnaryOperator::clear_has_ascii_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UnaryOperator::clear_ascii_value() {
  ascii_value_ = 43;
  clear_has_ascii_value();
}
inline ::css_proto_converter::UnaryOperator_AsciiValue UnaryOperator::ascii_value() const {
  // @@protoc_insertion_point(field_get:css_proto_converter.UnaryOperator.ascii_value)
  return static_cast< ::css_proto_converter::UnaryOperator_AsciiValue >(ascii_value_);
}
inline void UnaryOperator::set_ascii_value(::css_proto_converter::UnaryOperator_AsciiValue value) {
  assert(::css_proto_converter::UnaryOperator_AsciiValue_IsValid(value));
  set_has_ascii_value();
  ascii_value_ = value;
  // @@protoc_insertion_point(field_set:css_proto_converter.UnaryOperator.ascii_value)
}

// -------------------------------------------------------------------

// Property

// required .css_proto_converter.Property.NameId name_id = 1;
inline bool Property::has_name_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Property::set_has_name_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Property::clear_has_name_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Property::clear_name_id() {
  name_id_ = 1;
  clear_has_name_id();
}
inline ::css_proto_converter::Property_NameId Property::name_id() const {
  // @@protoc_insertion_point(field_get:css_proto_converter.Property.name_id)
  return static_cast< ::css_proto_converter::Property_NameId >(name_id_);
}
inline void Property::set_name_id(::css_proto_converter::Property_NameId value) {
  assert(::css_proto_converter::Property_NameId_IsValid(value));
  set_has_name_id();
  name_id_ = value;
  // @@protoc_insertion_point(field_set:css_proto_converter.Property.name_id)
}

// -------------------------------------------------------------------

// Ruleset

// required .css_proto_converter.SelectorList selector_list = 1;
inline bool Ruleset::has_selector_list() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ruleset::set_has_selector_list() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Ruleset::clear_has_selector_list() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Ruleset::clear_selector_list() {
  if (selector_list_ != NULL) selector_list_->Clear();
  clear_has_selector_list();
}
inline const ::css_proto_converter::SelectorList& Ruleset::_internal_selector_list() const {
  return *selector_list_;
}
inline const ::css_proto_converter::SelectorList& Ruleset::selector_list() const {
  const ::css_proto_converter::SelectorList* p = selector_list_;
  // @@protoc_insertion_point(field_get:css_proto_converter.Ruleset.selector_list)
  return p != NULL ? *p : *reinterpret_cast<const ::css_proto_converter::SelectorList*>(
      &::css_proto_converter::_SelectorList_default_instance_);
}
inline ::css_proto_converter::SelectorList* Ruleset::release_selector_list() {
  // @@protoc_insertion_point(field_release:css_proto_converter.Ruleset.selector_list)
  clear_has_selector_list();
  ::css_proto_converter::SelectorList* temp = selector_list_;
  selector_list_ = NULL;
  return temp;
}
inline ::css_proto_converter::SelectorList* Ruleset::mutable_selector_list() {
  set_has_selector_list();
  if (selector_list_ == NULL) {
    auto* p = CreateMaybeMessage<::css_proto_converter::SelectorList>(GetArenaNoVirtual());
    selector_list_ = p;
  }
  // @@protoc_insertion_point(field_mutable:css_proto_converter.Ruleset.selector_list)
  return selector_list_;
}
inline void Ruleset::set_allocated_selector_list(::css_proto_converter::SelectorList* selector_list) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete selector_list_;
  }
  if (selector_list) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      selector_list = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, selector_list, submessage_arena);
    }
    set_has_selector_list();
  } else {
    clear_has_selector_list();
  }
  selector_list_ = selector_list;
  // @@protoc_insertion_point(field_set_allocated:css_proto_converter.Ruleset.selector_list)
}

// required .css_proto_converter.DeclarationList declaration_list = 2;
inline bool Ruleset::has_declaration_list() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ruleset::set_has_declaration_list() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Ruleset::clear_has_declaration_list() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Ruleset::clear_declaration_list() {
  if (declaration_list_ != NULL) declaration_list_->Clear();
  clear_has_declaration_list();
}
inline const ::css_proto_converter::DeclarationList& Ruleset::_internal_declaration_list() const {
  return *declaration_list_;
}
inline const ::css_proto_converter::DeclarationList& Ruleset::declaration_list() const {
  const ::css_proto_converter::DeclarationList* p = declaration_list_;
  // @@protoc_insertion_point(field_get:css_proto_converter.Ruleset.declaration_list)
  return p != NULL ? *p : *reinterpret_cast<const ::css_proto_converter::DeclarationList*>(
      &::css_proto_converter::_DeclarationList_default_instance_);
}
inline ::css_proto_converter::DeclarationList* Ruleset::release_declaration_list() {
  // @@protoc_insertion_point(field_release:css_proto_converter.Ruleset.declaration_list)
  clear_has_declaration_list();
  ::css_proto_converter::DeclarationList* temp = declaration_list_;
  declaration_list_ = NULL;
  return temp;
}
inline ::css_proto_converter::DeclarationList* Ruleset::mutable_declaration_list() {
  set_has_declaration_list();
  if (declaration_list_ == NULL) {
    auto* p = CreateMaybeMessage<::css_proto_converter::DeclarationList>(GetArenaNoVirtual());
    declaration_list_ = p;
  }
  // @@protoc_insertion_point(field_mutable:css_proto_converter.Ruleset.declaration_list)
  return declaration_list_;
}
inline void Ruleset::set_allocated_declaration_list(::css_proto_converter::DeclarationList* declaration_list) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete declaration_list_;
  }
  if (declaration_list) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      declaration_list = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, declaration_list, submessage_arena);
    }
    set_has_declaration_list();
  } else {
    clear_has_declaration_list();
  }
  declaration_list_ = declaration_list;
  // @@protoc_insertion_point(field_set_allocated:css_proto_converter.Ruleset.declaration_list)
}

// -------------------------------------------------------------------

// SelectorList

// required .css_proto_converter.Selector first_selector = 1;
inline bool SelectorList::has_first_selector() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SelectorList::set_has_first_selector() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SelectorList::clear_has_first_selector() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SelectorList::clear_first_selector() {
  if (first_selector_ != NULL) first_selector_->Clear();
  clear_has_first_selector();
}
inline const ::css_proto_converter::Selector& SelectorList::_internal_first_selector() const {
  return *first_selector_;
}
inline const ::css_proto_converter::Selector& SelectorList::first_selector() const {
  const ::css_proto_converter::Selector* p = first_selector_;
  // @@protoc_insertion_point(field_get:css_proto_converter.SelectorList.first_selector)
  return p != NULL ? *p : *reinterpret_cast<const ::css_proto_converter::Selector*>(
      &::css_proto_converter::_Selector_default_instance_);
}
inline ::css_proto_converter::Selector* SelectorList::release_first_selector() {
  // @@protoc_insertion_point(field_release:css_proto_converter.SelectorList.first_selector)
  clear_has_first_selector();
  ::css_proto_converter::Selector* temp = first_selector_;
  first_selector_ = NULL;
  return temp;
}
inline ::css_proto_converter::Selector* SelectorList::mutable_first_selector() {
  set_has_first_selector();
  if (first_selector_ == NULL) {
    auto* p = CreateMaybeMessage<::css_proto_converter::Selector>(GetArenaNoVirtual());
    first_selector_ = p;
  }
  // @@protoc_insertion_point(field_mutable:css_proto_converter.SelectorList.first_selector)
  return first_selector_;
}
inline void SelectorList::set_allocated_first_selector(::css_proto_converter::Selector* first_selector) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete first_selector_;
  }
  if (first_selector) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      first_selector = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, first_selector, submessage_arena);
    }
    set_has_first_selector();
  } else {
    clear_has_first_selector();
  }
  first_selector_ = first_selector;
  // @@protoc_insertion_point(field_set_allocated:css_proto_converter.SelectorList.first_selector)
}

// repeated .css_proto_converter.Selector later_selectors = 2;
inline int SelectorList::later_selectors_size() const {
  return later_selectors_.size();
}
inline void SelectorList::clear_later_selectors() {
  later_selectors_.Clear();
}
inline ::css_proto_converter::Selector* SelectorList::mutable_later_selectors(int index) {
  // @@protoc_insertion_point(field_mutable:css_proto_converter.SelectorList.later_selectors)
  return later_selectors_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::css_proto_converter::Selector >*
SelectorList::mutable_later_selectors() {
  // @@protoc_insertion_point(field_mutable_list:css_proto_converter.SelectorList.later_selectors)
  return &later_selectors_;
}
inline const ::css_proto_converter::Selector& SelectorList::later_selectors(int index) const {
  // @@protoc_insertion_point(field_get:css_proto_converter.SelectorList.later_selectors)
  return later_selectors_.Get(index);
}
inline ::css_proto_converter::Selector* SelectorList::add_later_selectors() {
  // @@protoc_insertion_point(field_add:css_proto_converter.SelectorList.later_selectors)
  return later_selectors_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::css_proto_converter::Selector >&
SelectorList::later_selectors() const {
  // @@protoc_insertion_point(field_list:css_proto_converter.SelectorList.later_selectors)
  return later_selectors_;
}

// -------------------------------------------------------------------

// Attr

// required .css_proto_converter.Attr.Type type = 1;
inline bool Attr::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Attr::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Attr::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Attr::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::css_proto_converter::Attr_Type Attr::type() const {
  // @@protoc_insertion_point(field_get:css_proto_converter.Attr.type)
  return static_cast< ::css_proto_converter::Attr_Type >(type_);
}
inline void Attr::set_type(::css_proto_converter::Attr_Type value) {
  assert(::css_proto_converter::Attr_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:css_proto_converter.Attr.type)
}

// optional bool attr_i = 2;
inline bool Attr::has_attr_i() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Attr::set_has_attr_i() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Attr::clear_has_attr_i() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Attr::clear_attr_i() {
  attr_i_ = false;
  clear_has_attr_i();
}
inline bool Attr::attr_i() const {
  // @@protoc_insertion_point(field_get:css_proto_converter.Attr.attr_i)
  return attr_i_;
}
inline void Attr::set_attr_i(bool value) {
  set_has_attr_i();
  attr_i_ = value;
  // @@protoc_insertion_point(field_set:css_proto_converter.Attr.attr_i)
}

// -------------------------------------------------------------------

// Selector

// required .css_proto_converter.Selector.Type type = 1;
inline bool Selector::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Selector::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Selector::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Selector::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::css_proto_converter::Selector_Type Selector::type() const {
  // @@protoc_insertion_point(field_get:css_proto_converter.Selector.type)
  return static_cast< ::css_proto_converter::Selector_Type >(type_);
}
inline void Selector::set_type(::css_proto_converter::Selector_Type value) {
  assert(::css_proto_converter::Selector_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:css_proto_converter.Selector.type)
}

// required .css_proto_converter.Attr attr = 2;
inline bool Selector::has_attr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Selector::set_has_attr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Selector::clear_has_attr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Selector::clear_attr() {
  if (attr_ != NULL) attr_->Clear();
  clear_has_attr();
}
inline const ::css_proto_converter::Attr& Selector::_internal_attr() const {
  return *attr_;
}
inline const ::css_proto_converter::Attr& Selector::attr() const {
  const ::css_proto_converter::Attr* p = attr_;
  // @@protoc_insertion_point(field_get:css_proto_converter.Selector.attr)
  return p != NULL ? *p : *reinterpret_cast<const ::css_proto_converter::Attr*>(
      &::css_proto_converter::_Attr_default_instance_);
}
inline ::css_proto_converter::Attr* Selector::release_attr() {
  // @@protoc_insertion_point(field_release:css_proto_converter.Selector.attr)
  clear_has_attr();
  ::css_proto_converter::Attr* temp = attr_;
  attr_ = NULL;
  return temp;
}
inline ::css_proto_converter::Attr* Selector::mutable_attr() {
  set_has_attr();
  if (attr_ == NULL) {
    auto* p = CreateMaybeMessage<::css_proto_converter::Attr>(GetArenaNoVirtual());
    attr_ = p;
  }
  // @@protoc_insertion_point(field_mutable:css_proto_converter.Selector.attr)
  return attr_;
}
inline void Selector::set_allocated_attr(::css_proto_converter::Attr* attr) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete attr_;
  }
  if (attr) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      attr = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, attr, submessage_arena);
    }
    set_has_attr();
  } else {
    clear_has_attr();
  }
  attr_ = attr;
  // @@protoc_insertion_point(field_set_allocated:css_proto_converter.Selector.attr)
}

// required .css_proto_converter.PseudoType pseudo_type = 3;
inline bool Selector::has_pseudo_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Selector::set_has_pseudo_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Selector::clear_has_pseudo_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Selector::clear_pseudo_type() {
  pseudo_type_ = 1;
  clear_has_pseudo_type();
}
inline ::css_proto_converter::PseudoType Selector::pseudo_type() const {
  // @@protoc_insertion_point(field_get:css_proto_converter.Selector.pseudo_type)
  return static_cast< ::css_proto_converter::PseudoType >(pseudo_type_);
}
inline void Selector::set_pseudo_type(::css_proto_converter::PseudoType value) {
  assert(::css_proto_converter::PseudoType_IsValid(value));
  set_has_pseudo_type();
  pseudo_type_ = value;
  // @@protoc_insertion_point(field_set:css_proto_converter.Selector.pseudo_type)
}

// optional .css_proto_converter.Selector.PseudoValueId pseudo_value_id = 4;
inline bool Selector::has_pseudo_value_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Selector::set_has_pseudo_value_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Selector::clear_has_pseudo_value_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Selector::clear_pseudo_value_id() {
  pseudo_value_id_ = 1;
  clear_has_pseudo_value_id();
}
inline ::css_proto_converter::Selector_PseudoValueId Selector::pseudo_value_id() const {
  // @@protoc_insertion_point(field_get:css_proto_converter.Selector.pseudo_value_id)
  return static_cast< ::css_proto_converter::Selector_PseudoValueId >(pseudo_value_id_);
}
inline void Selector::set_pseudo_value_id(::css_proto_converter::Selector_PseudoValueId value) {
  assert(::css_proto_converter::Selector_PseudoValueId_IsValid(value));
  set_has_pseudo_value_id();
  pseudo_value_id_ = value;
  // @@protoc_insertion_point(field_set:css_proto_converter.Selector.pseudo_value_id)
}

// required .css_proto_converter.Combinator combinator = 5;
inline bool Selector::has_combinator() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Selector::set_has_combinator() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Selector::clear_has_combinator() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Selector::clear_combinator() {
  combinator_ = 1;
  clear_has_combinator();
}
inline ::css_proto_converter::Combinator Selector::combinator() const {
  // @@protoc_insertion_point(field_get:css_proto_converter.Selector.combinator)
  return static_cast< ::css_proto_converter::Combinator >(combinator_);
}
inline void Selector::set_combinator(::css_proto_converter::Combinator value) {
  assert(::css_proto_converter::Combinator_IsValid(value));
  set_has_combinator();
  combinator_ = value;
  // @@protoc_insertion_point(field_set:css_proto_converter.Selector.combinator)
}

// -------------------------------------------------------------------

// Pseudo

// optional .css_proto_converter.Ident ident_1 = 1;
inline bool Pseudo::has_ident_1() const {
  return rhs_case() == kIdent1;
}
inline void Pseudo::set_has_ident_1() {
  _oneof_case_[0] = kIdent1;
}
inline void Pseudo::clear_ident_1() {
  if (has_ident_1()) {
    delete rhs_.ident_1_;
    clear_has_rhs();
  }
}
inline const ::css_proto_converter::Ident& Pseudo::_internal_ident_1() const {
  return *rhs_.ident_1_;
}
inline ::css_proto_converter::Ident* Pseudo::release_ident_1() {
  // @@protoc_insertion_point(field_release:css_proto_converter.Pseudo.ident_1)
  if (has_ident_1()) {
    clear_has_rhs();
      ::css_proto_converter::Ident* temp = rhs_.ident_1_;
    rhs_.ident_1_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::css_proto_converter::Ident& Pseudo::ident_1() const {
  // @@protoc_insertion_point(field_get:css_proto_converter.Pseudo.ident_1)
  return has_ident_1()
      ? *rhs_.ident_1_
      : *reinterpret_cast< ::css_proto_converter::Ident*>(&::css_proto_converter::_Ident_default_instance_);
}
inline ::css_proto_converter::Ident* Pseudo::mutable_ident_1() {
  if (!has_ident_1()) {
    clear_rhs();
    set_has_ident_1();
    rhs_.ident_1_ = CreateMaybeMessage< ::css_proto_converter::Ident >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:css_proto_converter.Pseudo.ident_1)
  return rhs_.ident_1_;
}

// optional .css_proto_converter.FunctionToken function_token = 2;
inline bool Pseudo::has_function_token() const {
  return rhs_case() == kFunctionToken;
}
inline void Pseudo::set_has_function_token() {
  _oneof_case_[0] = kFunctionToken;
}
inline void Pseudo::clear_function_token() {
  if (has_function_token()) {
    delete rhs_.function_token_;
    clear_has_rhs();
  }
}
inline const ::css_proto_converter::FunctionToken& Pseudo::_internal_function_token() const {
  return *rhs_.function_token_;
}
inline ::css_proto_converter::FunctionToken* Pseudo::release_function_token() {
  // @@protoc_insertion_point(field_release:css_proto_converter.Pseudo.function_token)
  if (has_function_token()) {
    clear_has_rhs();
      ::css_proto_converter::FunctionToken* temp = rhs_.function_token_;
    rhs_.function_token_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::css_proto_converter::FunctionToken& Pseudo::function_token() const {
  // @@protoc_insertion_point(field_get:css_proto_converter.Pseudo.function_token)
  return has_function_token()
      ? *rhs_.function_token_
      : *reinterpret_cast< ::css_proto_converter::FunctionToken*>(&::css_proto_converter::_FunctionToken_default_instance_);
}
inline ::css_proto_converter::FunctionToken* Pseudo::mutable_function_token() {
  if (!has_function_token()) {
    clear_rhs();
    set_has_function_token();
    rhs_.function_token_ = CreateMaybeMessage< ::css_proto_converter::FunctionToken >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:css_proto_converter.Pseudo.function_token)
  return rhs_.function_token_;
}

// required .css_proto_converter.Ident ident_2 = 3;
inline bool Pseudo::has_ident_2() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Pseudo::set_has_ident_2() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Pseudo::clear_has_ident_2() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Pseudo::clear_ident_2() {
  if (ident_2_ != NULL) ident_2_->Clear();
  clear_has_ident_2();
}
inline const ::css_proto_converter::Ident& Pseudo::_internal_ident_2() const {
  return *ident_2_;
}
inline const ::css_proto_converter::Ident& Pseudo::ident_2() const {
  const ::css_proto_converter::Ident* p = ident_2_;
  // @@protoc_insertion_point(field_get:css_proto_converter.Pseudo.ident_2)
  return p != NULL ? *p : *reinterpret_cast<const ::css_proto_converter::Ident*>(
      &::css_proto_converter::_Ident_default_instance_);
}
inline ::css_proto_converter::Ident* Pseudo::release_ident_2() {
  // @@protoc_insertion_point(field_release:css_proto_converter.Pseudo.ident_2)
  clear_has_ident_2();
  ::css_proto_converter::Ident* temp = ident_2_;
  ident_2_ = NULL;
  return temp;
}
inline ::css_proto_converter::Ident* Pseudo::mutable_ident_2() {
  set_has_ident_2();
  if (ident_2_ == NULL) {
    auto* p = CreateMaybeMessage<::css_proto_converter::Ident>(GetArenaNoVirtual());
    ident_2_ = p;
  }
  // @@protoc_insertion_point(field_mutable:css_proto_converter.Pseudo.ident_2)
  return ident_2_;
}
inline void Pseudo::set_allocated_ident_2(::css_proto_converter::Ident* ident_2) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete ident_2_;
  }
  if (ident_2) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ident_2 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ident_2, submessage_arena);
    }
    set_has_ident_2();
  } else {
    clear_has_ident_2();
  }
  ident_2_ = ident_2;
  // @@protoc_insertion_point(field_set_allocated:css_proto_converter.Pseudo.ident_2)
}

inline bool Pseudo::has_rhs() const {
  return rhs_case() != RHS_NOT_SET;
}
inline void Pseudo::clear_has_rhs() {
  _oneof_case_[0] = RHS_NOT_SET;
}
inline Pseudo::RhsCase Pseudo::rhs_case() const {
  return Pseudo::RhsCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Declaration

// optional .css_proto_converter.PropertyAndValue property_and_value = 1;
inline bool Declaration::has_property_and_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Declaration::set_has_property_and_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Declaration::clear_has_property_and_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Declaration::clear_property_and_value() {
  if (property_and_value_ != NULL) property_and_value_->Clear();
  clear_has_property_and_value();
}
inline const ::css_proto_converter::PropertyAndValue& Declaration::_internal_property_and_value() const {
  return *property_and_value_;
}
inline const ::css_proto_converter::PropertyAndValue& Declaration::property_and_value() const {
  const ::css_proto_converter::PropertyAndValue* p = property_and_value_;
  // @@protoc_insertion_point(field_get:css_proto_converter.Declaration.property_and_value)
  return p != NULL ? *p : *reinterpret_cast<const ::css_proto_converter::PropertyAndValue*>(
      &::css_proto_converter::_PropertyAndValue_default_instance_);
}
inline ::css_proto_converter::PropertyAndValue* Declaration::release_property_and_value() {
  // @@protoc_insertion_point(field_release:css_proto_converter.Declaration.property_and_value)
  clear_has_property_and_value();
  ::css_proto_converter::PropertyAndValue* temp = property_and_value_;
  property_and_value_ = NULL;
  return temp;
}
inline ::css_proto_converter::PropertyAndValue* Declaration::mutable_property_and_value() {
  set_has_property_and_value();
  if (property_and_value_ == NULL) {
    auto* p = CreateMaybeMessage<::css_proto_converter::PropertyAndValue>(GetArenaNoVirtual());
    property_and_value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:css_proto_converter.Declaration.property_and_value)
  return property_and_value_;
}
inline void Declaration::set_allocated_property_and_value(::css_proto_converter::PropertyAndValue* property_and_value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete property_and_value_;
  }
  if (property_and_value) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      property_and_value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, property_and_value, submessage_arena);
    }
    set_has_property_and_value();
  } else {
    clear_has_property_and_value();
  }
  property_and_value_ = property_and_value;
  // @@protoc_insertion_point(field_set_allocated:css_proto_converter.Declaration.property_and_value)
}

// -------------------------------------------------------------------

// PropertyAndValue

// required .css_proto_converter.Property property = 1;
inline bool PropertyAndValue::has_property() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PropertyAndValue::set_has_property() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PropertyAndValue::clear_has_property() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PropertyAndValue::clear_property() {
  if (property_ != NULL) property_->Clear();
  clear_has_property();
}
inline const ::css_proto_converter::Property& PropertyAndValue::_internal_property() const {
  return *property_;
}
inline const ::css_proto_converter::Property& PropertyAndValue::property() const {
  const ::css_proto_converter::Property* p = property_;
  // @@protoc_insertion_point(field_get:css_proto_converter.PropertyAndValue.property)
  return p != NULL ? *p : *reinterpret_cast<const ::css_proto_converter::Property*>(
      &::css_proto_converter::_Property_default_instance_);
}
inline ::css_proto_converter::Property* PropertyAndValue::release_property() {
  // @@protoc_insertion_point(field_release:css_proto_converter.PropertyAndValue.property)
  clear_has_property();
  ::css_proto_converter::Property* temp = property_;
  property_ = NULL;
  return temp;
}
inline ::css_proto_converter::Property* PropertyAndValue::mutable_property() {
  set_has_property();
  if (property_ == NULL) {
    auto* p = CreateMaybeMessage<::css_proto_converter::Property>(GetArenaNoVirtual());
    property_ = p;
  }
  // @@protoc_insertion_point(field_mutable:css_proto_converter.PropertyAndValue.property)
  return property_;
}
inline void PropertyAndValue::set_allocated_property(::css_proto_converter::Property* property) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete property_;
  }
  if (property) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      property = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, property, submessage_arena);
    }
    set_has_property();
  } else {
    clear_has_property();
  }
  property_ = property;
  // @@protoc_insertion_point(field_set_allocated:css_proto_converter.PropertyAndValue.property)
}

// required .css_proto_converter.Expr expr = 2;
inline bool PropertyAndValue::has_expr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PropertyAndValue::set_has_expr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PropertyAndValue::clear_has_expr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PropertyAndValue::clear_expr() {
  if (expr_ != NULL) expr_->Clear();
  clear_has_expr();
}
inline const ::css_proto_converter::Expr& PropertyAndValue::_internal_expr() const {
  return *expr_;
}
inline const ::css_proto_converter::Expr& PropertyAndValue::expr() const {
  const ::css_proto_converter::Expr* p = expr_;
  // @@protoc_insertion_point(field_get:css_proto_converter.PropertyAndValue.expr)
  return p != NULL ? *p : *reinterpret_cast<const ::css_proto_converter::Expr*>(
      &::css_proto_converter::_Expr_default_instance_);
}
inline ::css_proto_converter::Expr* PropertyAndValue::release_expr() {
  // @@protoc_insertion_point(field_release:css_proto_converter.PropertyAndValue.expr)
  clear_has_expr();
  ::css_proto_converter::Expr* temp = expr_;
  expr_ = NULL;
  return temp;
}
inline ::css_proto_converter::Expr* PropertyAndValue::mutable_expr() {
  set_has_expr();
  if (expr_ == NULL) {
    auto* p = CreateMaybeMessage<::css_proto_converter::Expr>(GetArenaNoVirtual());
    expr_ = p;
  }
  // @@protoc_insertion_point(field_mutable:css_proto_converter.PropertyAndValue.expr)
  return expr_;
}
inline void PropertyAndValue::set_allocated_expr(::css_proto_converter::Expr* expr) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete expr_;
  }
  if (expr) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      expr = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, expr, submessage_arena);
    }
    set_has_expr();
  } else {
    clear_has_expr();
  }
  expr_ = expr;
  // @@protoc_insertion_point(field_set_allocated:css_proto_converter.PropertyAndValue.expr)
}

// optional .css_proto_converter.PropertyAndValue.Prio prio = 3;
inline bool PropertyAndValue::has_prio() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PropertyAndValue::set_has_prio() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PropertyAndValue::clear_has_prio() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PropertyAndValue::clear_prio() {
  prio_ = 0;
  clear_has_prio();
}
inline ::css_proto_converter::PropertyAndValue_Prio PropertyAndValue::prio() const {
  // @@protoc_insertion_point(field_get:css_proto_converter.PropertyAndValue.prio)
  return static_cast< ::css_proto_converter::PropertyAndValue_Prio >(prio_);
}
inline void PropertyAndValue::set_prio(::css_proto_converter::PropertyAndValue_Prio value) {
  assert(::css_proto_converter::PropertyAndValue_Prio_IsValid(value));
  set_has_prio();
  prio_ = value;
  // @@protoc_insertion_point(field_set:css_proto_converter.PropertyAndValue.prio)
}

// optional .css_proto_converter.PropertyAndValue.ValueId value_id = 4;
inline bool PropertyAndValue::has_value_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PropertyAndValue::set_has_value_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PropertyAndValue::clear_has_value_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PropertyAndValue::clear_value_id() {
  value_id_ = 1;
  clear_has_value_id();
}
inline ::css_proto_converter::PropertyAndValue_ValueId PropertyAndValue::value_id() const {
  // @@protoc_insertion_point(field_get:css_proto_converter.PropertyAndValue.value_id)
  return static_cast< ::css_proto_converter::PropertyAndValue_ValueId >(value_id_);
}
inline void PropertyAndValue::set_value_id(::css_proto_converter::PropertyAndValue_ValueId value) {
  assert(::css_proto_converter::PropertyAndValue_ValueId_IsValid(value));
  set_has_value_id();
  value_id_ = value;
  // @@protoc_insertion_point(field_set:css_proto_converter.PropertyAndValue.value_id)
}

// -------------------------------------------------------------------

// Expr

// required .css_proto_converter.Term term = 1;
inline bool Expr::has_term() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Expr::set_has_term() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Expr::clear_has_term() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Expr::clear_term() {
  if (term_ != NULL) term_->Clear();
  clear_has_term();
}
inline const ::css_proto_converter::Term& Expr::_internal_term() const {
  return *term_;
}
inline const ::css_proto_converter::Term& Expr::term() const {
  const ::css_proto_converter::Term* p = term_;
  // @@protoc_insertion_point(field_get:css_proto_converter.Expr.term)
  return p != NULL ? *p : *reinterpret_cast<const ::css_proto_converter::Term*>(
      &::css_proto_converter::_Term_default_instance_);
}
inline ::css_proto_converter::Term* Expr::release_term() {
  // @@protoc_insertion_point(field_release:css_proto_converter.Expr.term)
  clear_has_term();
  ::css_proto_converter::Term* temp = term_;
  term_ = NULL;
  return temp;
}
inline ::css_proto_converter::Term* Expr::mutable_term() {
  set_has_term();
  if (term_ == NULL) {
    auto* p = CreateMaybeMessage<::css_proto_converter::Term>(GetArenaNoVirtual());
    term_ = p;
  }
  // @@protoc_insertion_point(field_mutable:css_proto_converter.Expr.term)
  return term_;
}
inline void Expr::set_allocated_term(::css_proto_converter::Term* term) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete term_;
  }
  if (term) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      term = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, term, submessage_arena);
    }
    set_has_term();
  } else {
    clear_has_term();
  }
  term_ = term;
  // @@protoc_insertion_point(field_set_allocated:css_proto_converter.Expr.term)
}

// repeated .css_proto_converter.OperatorTerm operator_terms = 2;
inline int Expr::operator_terms_size() const {
  return operator_terms_.size();
}
inline void Expr::clear_operator_terms() {
  operator_terms_.Clear();
}
inline ::css_proto_converter::OperatorTerm* Expr::mutable_operator_terms(int index) {
  // @@protoc_insertion_point(field_mutable:css_proto_converter.Expr.operator_terms)
  return operator_terms_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::css_proto_converter::OperatorTerm >*
Expr::mutable_operator_terms() {
  // @@protoc_insertion_point(field_mutable_list:css_proto_converter.Expr.operator_terms)
  return &operator_terms_;
}
inline const ::css_proto_converter::OperatorTerm& Expr::operator_terms(int index) const {
  // @@protoc_insertion_point(field_get:css_proto_converter.Expr.operator_terms)
  return operator_terms_.Get(index);
}
inline ::css_proto_converter::OperatorTerm* Expr::add_operator_terms() {
  // @@protoc_insertion_point(field_add:css_proto_converter.Expr.operator_terms)
  return operator_terms_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::css_proto_converter::OperatorTerm >&
Expr::operator_terms() const {
  // @@protoc_insertion_point(field_list:css_proto_converter.Expr.operator_terms)
  return operator_terms_;
}

// -------------------------------------------------------------------

// OperatorTerm

// required .css_proto_converter.Operator _operator = 1;
inline bool OperatorTerm::has__operator() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OperatorTerm::set_has__operator() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OperatorTerm::clear_has__operator() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OperatorTerm::clear__operator() {
  if (_operator_ != NULL) _operator_->Clear();
  clear_has__operator();
}
inline const ::css_proto_converter::Operator& OperatorTerm::_internal__operator() const {
  return *_operator_;
}
inline const ::css_proto_converter::Operator& OperatorTerm::_operator() const {
  const ::css_proto_converter::Operator* p = _operator_;
  // @@protoc_insertion_point(field_get:css_proto_converter.OperatorTerm._operator)
  return p != NULL ? *p : *reinterpret_cast<const ::css_proto_converter::Operator*>(
      &::css_proto_converter::_Operator_default_instance_);
}
inline ::css_proto_converter::Operator* OperatorTerm::release__operator() {
  // @@protoc_insertion_point(field_release:css_proto_converter.OperatorTerm._operator)
  clear_has__operator();
  ::css_proto_converter::Operator* temp = _operator_;
  _operator_ = NULL;
  return temp;
}
inline ::css_proto_converter::Operator* OperatorTerm::mutable__operator() {
  set_has__operator();
  if (_operator_ == NULL) {
    auto* p = CreateMaybeMessage<::css_proto_converter::Operator>(GetArenaNoVirtual());
    _operator_ = p;
  }
  // @@protoc_insertion_point(field_mutable:css_proto_converter.OperatorTerm._operator)
  return _operator_;
}
inline void OperatorTerm::set_allocated__operator(::css_proto_converter::Operator* _operator) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete _operator_;
  }
  if (_operator) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      _operator = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, _operator, submessage_arena);
    }
    set_has__operator();
  } else {
    clear_has__operator();
  }
  _operator_ = _operator;
  // @@protoc_insertion_point(field_set_allocated:css_proto_converter.OperatorTerm._operator)
}

// required .css_proto_converter.Term term = 2;
inline bool OperatorTerm::has_term() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OperatorTerm::set_has_term() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OperatorTerm::clear_has_term() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OperatorTerm::clear_term() {
  if (term_ != NULL) term_->Clear();
  clear_has_term();
}
inline const ::css_proto_converter::Term& OperatorTerm::_internal_term() const {
  return *term_;
}
inline const ::css_proto_converter::Term& OperatorTerm::term() const {
  const ::css_proto_converter::Term* p = term_;
  // @@protoc_insertion_point(field_get:css_proto_converter.OperatorTerm.term)
  return p != NULL ? *p : *reinterpret_cast<const ::css_proto_converter::Term*>(
      &::css_proto_converter::_Term_default_instance_);
}
inline ::css_proto_converter::Term* OperatorTerm::release_term() {
  // @@protoc_insertion_point(field_release:css_proto_converter.OperatorTerm.term)
  clear_has_term();
  ::css_proto_converter::Term* temp = term_;
  term_ = NULL;
  return temp;
}
inline ::css_proto_converter::Term* OperatorTerm::mutable_term() {
  set_has_term();
  if (term_ == NULL) {
    auto* p = CreateMaybeMessage<::css_proto_converter::Term>(GetArenaNoVirtual());
    term_ = p;
  }
  // @@protoc_insertion_point(field_mutable:css_proto_converter.OperatorTerm.term)
  return term_;
}
inline void OperatorTerm::set_allocated_term(::css_proto_converter::Term* term) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete term_;
  }
  if (term) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      term = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, term, submessage_arena);
    }
    set_has_term();
  } else {
    clear_has_term();
  }
  term_ = term;
  // @@protoc_insertion_point(field_set_allocated:css_proto_converter.OperatorTerm.term)
}

// -------------------------------------------------------------------

// Term

// optional .css_proto_converter.UnaryOperator unary_operator = 1;
inline bool Term::has_unary_operator() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Term::set_has_unary_operator() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Term::clear_has_unary_operator() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Term::clear_unary_operator() {
  if (unary_operator_ != NULL) unary_operator_->Clear();
  clear_has_unary_operator();
}
inline const ::css_proto_converter::UnaryOperator& Term::_internal_unary_operator() const {
  return *unary_operator_;
}
inline const ::css_proto_converter::UnaryOperator& Term::unary_operator() const {
  const ::css_proto_converter::UnaryOperator* p = unary_operator_;
  // @@protoc_insertion_point(field_get:css_proto_converter.Term.unary_operator)
  return p != NULL ? *p : *reinterpret_cast<const ::css_proto_converter::UnaryOperator*>(
      &::css_proto_converter::_UnaryOperator_default_instance_);
}
inline ::css_proto_converter::UnaryOperator* Term::release_unary_operator() {
  // @@protoc_insertion_point(field_release:css_proto_converter.Term.unary_operator)
  clear_has_unary_operator();
  ::css_proto_converter::UnaryOperator* temp = unary_operator_;
  unary_operator_ = NULL;
  return temp;
}
inline ::css_proto_converter::UnaryOperator* Term::mutable_unary_operator() {
  set_has_unary_operator();
  if (unary_operator_ == NULL) {
    auto* p = CreateMaybeMessage<::css_proto_converter::UnaryOperator>(GetArenaNoVirtual());
    unary_operator_ = p;
  }
  // @@protoc_insertion_point(field_mutable:css_proto_converter.Term.unary_operator)
  return unary_operator_;
}
inline void Term::set_allocated_unary_operator(::css_proto_converter::UnaryOperator* unary_operator) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete unary_operator_;
  }
  if (unary_operator) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      unary_operator = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, unary_operator, submessage_arena);
    }
    set_has_unary_operator();
  } else {
    clear_has_unary_operator();
  }
  unary_operator_ = unary_operator;
  // @@protoc_insertion_point(field_set_allocated:css_proto_converter.Term.unary_operator)
}

// optional .css_proto_converter.TermPart term_part = 2;
inline bool Term::has_term_part() const {
  return rhs_case() == kTermPart;
}
inline void Term::set_has_term_part() {
  _oneof_case_[0] = kTermPart;
}
inline void Term::clear_term_part() {
  if (has_term_part()) {
    delete rhs_.term_part_;
    clear_has_rhs();
  }
}
inline const ::css_proto_converter::TermPart& Term::_internal_term_part() const {
  return *rhs_.term_part_;
}
inline ::css_proto_converter::TermPart* Term::release_term_part() {
  // @@protoc_insertion_point(field_release:css_proto_converter.Term.term_part)
  if (has_term_part()) {
    clear_has_rhs();
      ::css_proto_converter::TermPart* temp = rhs_.term_part_;
    rhs_.term_part_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::css_proto_converter::TermPart& Term::term_part() const {
  // @@protoc_insertion_point(field_get:css_proto_converter.Term.term_part)
  return has_term_part()
      ? *rhs_.term_part_
      : *reinterpret_cast< ::css_proto_converter::TermPart*>(&::css_proto_converter::_TermPart_default_instance_);
}
inline ::css_proto_converter::TermPart* Term::mutable_term_part() {
  if (!has_term_part()) {
    clear_rhs();
    set_has_term_part();
    rhs_.term_part_ = CreateMaybeMessage< ::css_proto_converter::TermPart >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:css_proto_converter.Term.term_part)
  return rhs_.term_part_;
}

// optional .css_proto_converter.String string = 3;
inline bool Term::has_string() const {
  return rhs_case() == kString;
}
inline void Term::set_has_string() {
  _oneof_case_[0] = kString;
}
inline void Term::clear_string() {
  if (has_string()) {
    delete rhs_.string_;
    clear_has_rhs();
  }
}
inline const ::css_proto_converter::String& Term::_internal_string() const {
  return *rhs_.string_;
}
inline ::css_proto_converter::String* Term::release_string() {
  // @@protoc_insertion_point(field_release:css_proto_converter.Term.string)
  if (has_string()) {
    clear_has_rhs();
      ::css_proto_converter::String* temp = rhs_.string_;
    rhs_.string_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::css_proto_converter::String& Term::string() const {
  // @@protoc_insertion_point(field_get:css_proto_converter.Term.string)
  return has_string()
      ? *rhs_.string_
      : *reinterpret_cast< ::css_proto_converter::String*>(&::css_proto_converter::_String_default_instance_);
}
inline ::css_proto_converter::String* Term::mutable_string() {
  if (!has_string()) {
    clear_rhs();
    set_has_string();
    rhs_.string_ = CreateMaybeMessage< ::css_proto_converter::String >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:css_proto_converter.Term.string)
  return rhs_.string_;
}

// optional .css_proto_converter.Ident ident = 4;
inline bool Term::has_ident() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Term::set_has_ident() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Term::clear_has_ident() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Term::clear_ident() {
  if (ident_ != NULL) ident_->Clear();
  clear_has_ident();
}
inline const ::css_proto_converter::Ident& Term::_internal_ident() const {
  return *ident_;
}
inline const ::css_proto_converter::Ident& Term::ident() const {
  const ::css_proto_converter::Ident* p = ident_;
  // @@protoc_insertion_point(field_get:css_proto_converter.Term.ident)
  return p != NULL ? *p : *reinterpret_cast<const ::css_proto_converter::Ident*>(
      &::css_proto_converter::_Ident_default_instance_);
}
inline ::css_proto_converter::Ident* Term::release_ident() {
  // @@protoc_insertion_point(field_release:css_proto_converter.Term.ident)
  clear_has_ident();
  ::css_proto_converter::Ident* temp = ident_;
  ident_ = NULL;
  return temp;
}
inline ::css_proto_converter::Ident* Term::mutable_ident() {
  set_has_ident();
  if (ident_ == NULL) {
    auto* p = CreateMaybeMessage<::css_proto_converter::Ident>(GetArenaNoVirtual());
    ident_ = p;
  }
  // @@protoc_insertion_point(field_mutable:css_proto_converter.Term.ident)
  return ident_;
}
inline void Term::set_allocated_ident(::css_proto_converter::Ident* ident) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete ident_;
  }
  if (ident) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ident = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ident, submessage_arena);
    }
    set_has_ident();
  } else {
    clear_has_ident();
  }
  ident_ = ident;
  // @@protoc_insertion_point(field_set_allocated:css_proto_converter.Term.ident)
}

// optional .css_proto_converter.Uri uri = 5;
inline bool Term::has_uri() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Term::set_has_uri() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Term::clear_has_uri() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Term::clear_uri() {
  if (uri_ != NULL) uri_->Clear();
  clear_has_uri();
}
inline const ::css_proto_converter::Uri& Term::_internal_uri() const {
  return *uri_;
}
inline const ::css_proto_converter::Uri& Term::uri() const {
  const ::css_proto_converter::Uri* p = uri_;
  // @@protoc_insertion_point(field_get:css_proto_converter.Term.uri)
  return p != NULL ? *p : *reinterpret_cast<const ::css_proto_converter::Uri*>(
      &::css_proto_converter::_Uri_default_instance_);
}
inline ::css_proto_converter::Uri* Term::release_uri() {
  // @@protoc_insertion_point(field_release:css_proto_converter.Term.uri)
  clear_has_uri();
  ::css_proto_converter::Uri* temp = uri_;
  uri_ = NULL;
  return temp;
}
inline ::css_proto_converter::Uri* Term::mutable_uri() {
  set_has_uri();
  if (uri_ == NULL) {
    auto* p = CreateMaybeMessage<::css_proto_converter::Uri>(GetArenaNoVirtual());
    uri_ = p;
  }
  // @@protoc_insertion_point(field_mutable:css_proto_converter.Term.uri)
  return uri_;
}
inline void Term::set_allocated_uri(::css_proto_converter::Uri* uri) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete uri_;
  }
  if (uri) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      uri = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, uri, submessage_arena);
    }
    set_has_uri();
  } else {
    clear_has_uri();
  }
  uri_ = uri;
  // @@protoc_insertion_point(field_set_allocated:css_proto_converter.Term.uri)
}

// optional .css_proto_converter.Hexcolor hexcolor = 6;
inline bool Term::has_hexcolor() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Term::set_has_hexcolor() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Term::clear_has_hexcolor() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Term::clear_hexcolor() {
  if (hexcolor_ != NULL) hexcolor_->Clear();
  clear_has_hexcolor();
}
inline const ::css_proto_converter::Hexcolor& Term::_internal_hexcolor() const {
  return *hexcolor_;
}
inline const ::css_proto_converter::Hexcolor& Term::hexcolor() const {
  const ::css_proto_converter::Hexcolor* p = hexcolor_;
  // @@protoc_insertion_point(field_get:css_proto_converter.Term.hexcolor)
  return p != NULL ? *p : *reinterpret_cast<const ::css_proto_converter::Hexcolor*>(
      &::css_proto_converter::_Hexcolor_default_instance_);
}
inline ::css_proto_converter::Hexcolor* Term::release_hexcolor() {
  // @@protoc_insertion_point(field_release:css_proto_converter.Term.hexcolor)
  clear_has_hexcolor();
  ::css_proto_converter::Hexcolor* temp = hexcolor_;
  hexcolor_ = NULL;
  return temp;
}
inline ::css_proto_converter::Hexcolor* Term::mutable_hexcolor() {
  set_has_hexcolor();
  if (hexcolor_ == NULL) {
    auto* p = CreateMaybeMessage<::css_proto_converter::Hexcolor>(GetArenaNoVirtual());
    hexcolor_ = p;
  }
  // @@protoc_insertion_point(field_mutable:css_proto_converter.Term.hexcolor)
  return hexcolor_;
}
inline void Term::set_allocated_hexcolor(::css_proto_converter::Hexcolor* hexcolor) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete hexcolor_;
  }
  if (hexcolor) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      hexcolor = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hexcolor, submessage_arena);
    }
    set_has_hexcolor();
  } else {
    clear_has_hexcolor();
  }
  hexcolor_ = hexcolor;
  // @@protoc_insertion_point(field_set_allocated:css_proto_converter.Term.hexcolor)
}

inline bool Term::has_rhs() const {
  return rhs_case() != RHS_NOT_SET;
}
inline void Term::clear_has_rhs() {
  _oneof_case_[0] = RHS_NOT_SET;
}
inline Term::RhsCase Term::rhs_case() const {
  return Term::RhsCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// TermPart

// required .css_proto_converter.Num number = 1;
inline bool TermPart::has_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TermPart::set_has_number() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TermPart::clear_has_number() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TermPart::clear_number() {
  if (number_ != NULL) number_->Clear();
  clear_has_number();
}
inline const ::css_proto_converter::Num& TermPart::_internal_number() const {
  return *number_;
}
inline const ::css_proto_converter::Num& TermPart::number() const {
  const ::css_proto_converter::Num* p = number_;
  // @@protoc_insertion_point(field_get:css_proto_converter.TermPart.number)
  return p != NULL ? *p : *reinterpret_cast<const ::css_proto_converter::Num*>(
      &::css_proto_converter::_Num_default_instance_);
}
inline ::css_proto_converter::Num* TermPart::release_number() {
  // @@protoc_insertion_point(field_release:css_proto_converter.TermPart.number)
  clear_has_number();
  ::css_proto_converter::Num* temp = number_;
  number_ = NULL;
  return temp;
}
inline ::css_proto_converter::Num* TermPart::mutable_number() {
  set_has_number();
  if (number_ == NULL) {
    auto* p = CreateMaybeMessage<::css_proto_converter::Num>(GetArenaNoVirtual());
    number_ = p;
  }
  // @@protoc_insertion_point(field_mutable:css_proto_converter.TermPart.number)
  return number_;
}
inline void TermPart::set_allocated_number(::css_proto_converter::Num* number) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete number_;
  }
  if (number) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      number = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, number, submessage_arena);
    }
    set_has_number();
  } else {
    clear_has_number();
  }
  number_ = number;
  // @@protoc_insertion_point(field_set_allocated:css_proto_converter.TermPart.number)
}

// optional .css_proto_converter.Num percentage = 2;
inline bool TermPart::has_percentage() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TermPart::set_has_percentage() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TermPart::clear_has_percentage() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TermPart::clear_percentage() {
  if (percentage_ != NULL) percentage_->Clear();
  clear_has_percentage();
}
inline const ::css_proto_converter::Num& TermPart::_internal_percentage() const {
  return *percentage_;
}
inline const ::css_proto_converter::Num& TermPart::percentage() const {
  const ::css_proto_converter::Num* p = percentage_;
  // @@protoc_insertion_point(field_get:css_proto_converter.TermPart.percentage)
  return p != NULL ? *p : *reinterpret_cast<const ::css_proto_converter::Num*>(
      &::css_proto_converter::_Num_default_instance_);
}
inline ::css_proto_converter::Num* TermPart::release_percentage() {
  // @@protoc_insertion_point(field_release:css_proto_converter.TermPart.percentage)
  clear_has_percentage();
  ::css_proto_converter::Num* temp = percentage_;
  percentage_ = NULL;
  return temp;
}
inline ::css_proto_converter::Num* TermPart::mutable_percentage() {
  set_has_percentage();
  if (percentage_ == NULL) {
    auto* p = CreateMaybeMessage<::css_proto_converter::Num>(GetArenaNoVirtual());
    percentage_ = p;
  }
  // @@protoc_insertion_point(field_mutable:css_proto_converter.TermPart.percentage)
  return percentage_;
}
inline void TermPart::set_allocated_percentage(::css_proto_converter::Num* percentage) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete percentage_;
  }
  if (percentage) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      percentage = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, percentage, submessage_arena);
    }
    set_has_percentage();
  } else {
    clear_has_percentage();
  }
  percentage_ = percentage;
  // @@protoc_insertion_point(field_set_allocated:css_proto_converter.TermPart.percentage)
}

// optional .css_proto_converter.Length length = 3;
inline bool TermPart::has_length() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TermPart::set_has_length() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TermPart::clear_has_length() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TermPart::clear_length() {
  if (length_ != NULL) length_->Clear();
  clear_has_length();
}
inline const ::css_proto_converter::Length& TermPart::_internal_length() const {
  return *length_;
}
inline const ::css_proto_converter::Length& TermPart::length() const {
  const ::css_proto_converter::Length* p = length_;
  // @@protoc_insertion_point(field_get:css_proto_converter.TermPart.length)
  return p != NULL ? *p : *reinterpret_cast<const ::css_proto_converter::Length*>(
      &::css_proto_converter::_Length_default_instance_);
}
inline ::css_proto_converter::Length* TermPart::release_length() {
  // @@protoc_insertion_point(field_release:css_proto_converter.TermPart.length)
  clear_has_length();
  ::css_proto_converter::Length* temp = length_;
  length_ = NULL;
  return temp;
}
inline ::css_proto_converter::Length* TermPart::mutable_length() {
  set_has_length();
  if (length_ == NULL) {
    auto* p = CreateMaybeMessage<::css_proto_converter::Length>(GetArenaNoVirtual());
    length_ = p;
  }
  // @@protoc_insertion_point(field_mutable:css_proto_converter.TermPart.length)
  return length_;
}
inline void TermPart::set_allocated_length(::css_proto_converter::Length* length) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete length_;
  }
  if (length) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      length = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, length, submessage_arena);
    }
    set_has_length();
  } else {
    clear_has_length();
  }
  length_ = length;
  // @@protoc_insertion_point(field_set_allocated:css_proto_converter.TermPart.length)
}

// optional .css_proto_converter.Num ems = 4;
inline bool TermPart::has_ems() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TermPart::set_has_ems() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TermPart::clear_has_ems() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TermPart::clear_ems() {
  if (ems_ != NULL) ems_->Clear();
  clear_has_ems();
}
inline const ::css_proto_converter::Num& TermPart::_internal_ems() const {
  return *ems_;
}
inline const ::css_proto_converter::Num& TermPart::ems() const {
  const ::css_proto_converter::Num* p = ems_;
  // @@protoc_insertion_point(field_get:css_proto_converter.TermPart.ems)
  return p != NULL ? *p : *reinterpret_cast<const ::css_proto_converter::Num*>(
      &::css_proto_converter::_Num_default_instance_);
}
inline ::css_proto_converter::Num* TermPart::release_ems() {
  // @@protoc_insertion_point(field_release:css_proto_converter.TermPart.ems)
  clear_has_ems();
  ::css_proto_converter::Num* temp = ems_;
  ems_ = NULL;
  return temp;
}
inline ::css_proto_converter::Num* TermPart::mutable_ems() {
  set_has_ems();
  if (ems_ == NULL) {
    auto* p = CreateMaybeMessage<::css_proto_converter::Num>(GetArenaNoVirtual());
    ems_ = p;
  }
  // @@protoc_insertion_point(field_mutable:css_proto_converter.TermPart.ems)
  return ems_;
}
inline void TermPart::set_allocated_ems(::css_proto_converter::Num* ems) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete ems_;
  }
  if (ems) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ems = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ems, submessage_arena);
    }
    set_has_ems();
  } else {
    clear_has_ems();
  }
  ems_ = ems;
  // @@protoc_insertion_point(field_set_allocated:css_proto_converter.TermPart.ems)
}

// optional .css_proto_converter.Num exs = 5;
inline bool TermPart::has_exs() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TermPart::set_has_exs() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TermPart::clear_has_exs() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TermPart::clear_exs() {
  if (exs_ != NULL) exs_->Clear();
  clear_has_exs();
}
inline const ::css_proto_converter::Num& TermPart::_internal_exs() const {
  return *exs_;
}
inline const ::css_proto_converter::Num& TermPart::exs() const {
  const ::css_proto_converter::Num* p = exs_;
  // @@protoc_insertion_point(field_get:css_proto_converter.TermPart.exs)
  return p != NULL ? *p : *reinterpret_cast<const ::css_proto_converter::Num*>(
      &::css_proto_converter::_Num_default_instance_);
}
inline ::css_proto_converter::Num* TermPart::release_exs() {
  // @@protoc_insertion_point(field_release:css_proto_converter.TermPart.exs)
  clear_has_exs();
  ::css_proto_converter::Num* temp = exs_;
  exs_ = NULL;
  return temp;
}
inline ::css_proto_converter::Num* TermPart::mutable_exs() {
  set_has_exs();
  if (exs_ == NULL) {
    auto* p = CreateMaybeMessage<::css_proto_converter::Num>(GetArenaNoVirtual());
    exs_ = p;
  }
  // @@protoc_insertion_point(field_mutable:css_proto_converter.TermPart.exs)
  return exs_;
}
inline void TermPart::set_allocated_exs(::css_proto_converter::Num* exs) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete exs_;
  }
  if (exs) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      exs = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, exs, submessage_arena);
    }
    set_has_exs();
  } else {
    clear_has_exs();
  }
  exs_ = exs;
  // @@protoc_insertion_point(field_set_allocated:css_proto_converter.TermPart.exs)
}

// optional .css_proto_converter.Angle angle = 6;
inline bool TermPart::has_angle() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TermPart::set_has_angle() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TermPart::clear_has_angle() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TermPart::clear_angle() {
  if (angle_ != NULL) angle_->Clear();
  clear_has_angle();
}
inline const ::css_proto_converter::Angle& TermPart::_internal_angle() const {
  return *angle_;
}
inline const ::css_proto_converter::Angle& TermPart::angle() const {
  const ::css_proto_converter::Angle* p = angle_;
  // @@protoc_insertion_point(field_get:css_proto_converter.TermPart.angle)
  return p != NULL ? *p : *reinterpret_cast<const ::css_proto_converter::Angle*>(
      &::css_proto_converter::_Angle_default_instance_);
}
inline ::css_proto_converter::Angle* TermPart::release_angle() {
  // @@protoc_insertion_point(field_release:css_proto_converter.TermPart.angle)
  clear_has_angle();
  ::css_proto_converter::Angle* temp = angle_;
  angle_ = NULL;
  return temp;
}
inline ::css_proto_converter::Angle* TermPart::mutable_angle() {
  set_has_angle();
  if (angle_ == NULL) {
    auto* p = CreateMaybeMessage<::css_proto_converter::Angle>(GetArenaNoVirtual());
    angle_ = p;
  }
  // @@protoc_insertion_point(field_mutable:css_proto_converter.TermPart.angle)
  return angle_;
}
inline void TermPart::set_allocated_angle(::css_proto_converter::Angle* angle) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete angle_;
  }
  if (angle) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      angle = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, angle, submessage_arena);
    }
    set_has_angle();
  } else {
    clear_has_angle();
  }
  angle_ = angle;
  // @@protoc_insertion_point(field_set_allocated:css_proto_converter.TermPart.angle)
}

// optional .css_proto_converter.Time time = 7;
inline bool TermPart::has_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TermPart::set_has_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TermPart::clear_has_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TermPart::clear_time() {
  if (time_ != NULL) time_->Clear();
  clear_has_time();
}
inline const ::css_proto_converter::Time& TermPart::_internal_time() const {
  return *time_;
}
inline const ::css_proto_converter::Time& TermPart::time() const {
  const ::css_proto_converter::Time* p = time_;
  // @@protoc_insertion_point(field_get:css_proto_converter.TermPart.time)
  return p != NULL ? *p : *reinterpret_cast<const ::css_proto_converter::Time*>(
      &::css_proto_converter::_Time_default_instance_);
}
inline ::css_proto_converter::Time* TermPart::release_time() {
  // @@protoc_insertion_point(field_release:css_proto_converter.TermPart.time)
  clear_has_time();
  ::css_proto_converter::Time* temp = time_;
  time_ = NULL;
  return temp;
}
inline ::css_proto_converter::Time* TermPart::mutable_time() {
  set_has_time();
  if (time_ == NULL) {
    auto* p = CreateMaybeMessage<::css_proto_converter::Time>(GetArenaNoVirtual());
    time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:css_proto_converter.TermPart.time)
  return time_;
}
inline void TermPart::set_allocated_time(::css_proto_converter::Time* time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete time_;
  }
  if (time) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, time, submessage_arena);
    }
    set_has_time();
  } else {
    clear_has_time();
  }
  time_ = time;
  // @@protoc_insertion_point(field_set_allocated:css_proto_converter.TermPart.time)
}

// optional .css_proto_converter.Freq freq = 8;
inline bool TermPart::has_freq() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TermPart::set_has_freq() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TermPart::clear_has_freq() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TermPart::clear_freq() {
  if (freq_ != NULL) freq_->Clear();
  clear_has_freq();
}
inline const ::css_proto_converter::Freq& TermPart::_internal_freq() const {
  return *freq_;
}
inline const ::css_proto_converter::Freq& TermPart::freq() const {
  const ::css_proto_converter::Freq* p = freq_;
  // @@protoc_insertion_point(field_get:css_proto_converter.TermPart.freq)
  return p != NULL ? *p : *reinterpret_cast<const ::css_proto_converter::Freq*>(
      &::css_proto_converter::_Freq_default_instance_);
}
inline ::css_proto_converter::Freq* TermPart::release_freq() {
  // @@protoc_insertion_point(field_release:css_proto_converter.TermPart.freq)
  clear_has_freq();
  ::css_proto_converter::Freq* temp = freq_;
  freq_ = NULL;
  return temp;
}
inline ::css_proto_converter::Freq* TermPart::mutable_freq() {
  set_has_freq();
  if (freq_ == NULL) {
    auto* p = CreateMaybeMessage<::css_proto_converter::Freq>(GetArenaNoVirtual());
    freq_ = p;
  }
  // @@protoc_insertion_point(field_mutable:css_proto_converter.TermPart.freq)
  return freq_;
}
inline void TermPart::set_allocated_freq(::css_proto_converter::Freq* freq) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete freq_;
  }
  if (freq) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      freq = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, freq, submessage_arena);
    }
    set_has_freq();
  } else {
    clear_has_freq();
  }
  freq_ = freq;
  // @@protoc_insertion_point(field_set_allocated:css_proto_converter.TermPart.freq)
}

// optional .css_proto_converter.Function function = 9;
inline bool TermPart::has_function() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TermPart::set_has_function() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TermPart::clear_has_function() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TermPart::clear_function() {
  if (function_ != NULL) function_->Clear();
  clear_has_function();
}
inline const ::css_proto_converter::Function& TermPart::_internal_function() const {
  return *function_;
}
inline const ::css_proto_converter::Function& TermPart::function() const {
  const ::css_proto_converter::Function* p = function_;
  // @@protoc_insertion_point(field_get:css_proto_converter.TermPart.function)
  return p != NULL ? *p : *reinterpret_cast<const ::css_proto_converter::Function*>(
      &::css_proto_converter::_Function_default_instance_);
}
inline ::css_proto_converter::Function* TermPart::release_function() {
  // @@protoc_insertion_point(field_release:css_proto_converter.TermPart.function)
  clear_has_function();
  ::css_proto_converter::Function* temp = function_;
  function_ = NULL;
  return temp;
}
inline ::css_proto_converter::Function* TermPart::mutable_function() {
  set_has_function();
  if (function_ == NULL) {
    auto* p = CreateMaybeMessage<::css_proto_converter::Function>(GetArenaNoVirtual());
    function_ = p;
  }
  // @@protoc_insertion_point(field_mutable:css_proto_converter.TermPart.function)
  return function_;
}
inline void TermPart::set_allocated_function(::css_proto_converter::Function* function) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete function_;
  }
  if (function) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      function = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, function, submessage_arena);
    }
    set_has_function();
  } else {
    clear_has_function();
  }
  function_ = function;
  // @@protoc_insertion_point(field_set_allocated:css_proto_converter.TermPart.function)
}

// -------------------------------------------------------------------

// Function

// required .css_proto_converter.FunctionToken function_token = 1;
inline bool Function::has_function_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Function::set_has_function_token() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Function::clear_has_function_token() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Function::clear_function_token() {
  if (function_token_ != NULL) function_token_->Clear();
  clear_has_function_token();
}
inline const ::css_proto_converter::FunctionToken& Function::_internal_function_token() const {
  return *function_token_;
}
inline const ::css_proto_converter::FunctionToken& Function::function_token() const {
  const ::css_proto_converter::FunctionToken* p = function_token_;
  // @@protoc_insertion_point(field_get:css_proto_converter.Function.function_token)
  return p != NULL ? *p : *reinterpret_cast<const ::css_proto_converter::FunctionToken*>(
      &::css_proto_converter::_FunctionToken_default_instance_);
}
inline ::css_proto_converter::FunctionToken* Function::release_function_token() {
  // @@protoc_insertion_point(field_release:css_proto_converter.Function.function_token)
  clear_has_function_token();
  ::css_proto_converter::FunctionToken* temp = function_token_;
  function_token_ = NULL;
  return temp;
}
inline ::css_proto_converter::FunctionToken* Function::mutable_function_token() {
  set_has_function_token();
  if (function_token_ == NULL) {
    auto* p = CreateMaybeMessage<::css_proto_converter::FunctionToken>(GetArenaNoVirtual());
    function_token_ = p;
  }
  // @@protoc_insertion_point(field_mutable:css_proto_converter.Function.function_token)
  return function_token_;
}
inline void Function::set_allocated_function_token(::css_proto_converter::FunctionToken* function_token) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete function_token_;
  }
  if (function_token) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      function_token = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, function_token, submessage_arena);
    }
    set_has_function_token();
  } else {
    clear_has_function_token();
  }
  function_token_ = function_token;
  // @@protoc_insertion_point(field_set_allocated:css_proto_converter.Function.function_token)
}

// required .css_proto_converter.Expr expr = 2;
inline bool Function::has_expr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Function::set_has_expr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Function::clear_has_expr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Function::clear_expr() {
  if (expr_ != NULL) expr_->Clear();
  clear_has_expr();
}
inline const ::css_proto_converter::Expr& Function::_internal_expr() const {
  return *expr_;
}
inline const ::css_proto_converter::Expr& Function::expr() const {
  const ::css_proto_converter::Expr* p = expr_;
  // @@protoc_insertion_point(field_get:css_proto_converter.Function.expr)
  return p != NULL ? *p : *reinterpret_cast<const ::css_proto_converter::Expr*>(
      &::css_proto_converter::_Expr_default_instance_);
}
inline ::css_proto_converter::Expr* Function::release_expr() {
  // @@protoc_insertion_point(field_release:css_proto_converter.Function.expr)
  clear_has_expr();
  ::css_proto_converter::Expr* temp = expr_;
  expr_ = NULL;
  return temp;
}
inline ::css_proto_converter::Expr* Function::mutable_expr() {
  set_has_expr();
  if (expr_ == NULL) {
    auto* p = CreateMaybeMessage<::css_proto_converter::Expr>(GetArenaNoVirtual());
    expr_ = p;
  }
  // @@protoc_insertion_point(field_mutable:css_proto_converter.Function.expr)
  return expr_;
}
inline void Function::set_allocated_expr(::css_proto_converter::Expr* expr) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete expr_;
  }
  if (expr) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      expr = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, expr, submessage_arena);
    }
    set_has_expr();
  } else {
    clear_has_expr();
  }
  expr_ = expr;
  // @@protoc_insertion_point(field_set_allocated:css_proto_converter.Function.expr)
}

// -------------------------------------------------------------------

// Hexcolor

// required .css_proto_converter.HexcolorThree first_three = 1;
inline bool Hexcolor::has_first_three() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Hexcolor::set_has_first_three() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Hexcolor::clear_has_first_three() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Hexcolor::clear_first_three() {
  if (first_three_ != NULL) first_three_->Clear();
  clear_has_first_three();
}
inline const ::css_proto_converter::HexcolorThree& Hexcolor::_internal_first_three() const {
  return *first_three_;
}
inline const ::css_proto_converter::HexcolorThree& Hexcolor::first_three() const {
  const ::css_proto_converter::HexcolorThree* p = first_three_;
  // @@protoc_insertion_point(field_get:css_proto_converter.Hexcolor.first_three)
  return p != NULL ? *p : *reinterpret_cast<const ::css_proto_converter::HexcolorThree*>(
      &::css_proto_converter::_HexcolorThree_default_instance_);
}
inline ::css_proto_converter::HexcolorThree* Hexcolor::release_first_three() {
  // @@protoc_insertion_point(field_release:css_proto_converter.Hexcolor.first_three)
  clear_has_first_three();
  ::css_proto_converter::HexcolorThree* temp = first_three_;
  first_three_ = NULL;
  return temp;
}
inline ::css_proto_converter::HexcolorThree* Hexcolor::mutable_first_three() {
  set_has_first_three();
  if (first_three_ == NULL) {
    auto* p = CreateMaybeMessage<::css_proto_converter::HexcolorThree>(GetArenaNoVirtual());
    first_three_ = p;
  }
  // @@protoc_insertion_point(field_mutable:css_proto_converter.Hexcolor.first_three)
  return first_three_;
}
inline void Hexcolor::set_allocated_first_three(::css_proto_converter::HexcolorThree* first_three) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete first_three_;
  }
  if (first_three) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      first_three = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, first_three, submessage_arena);
    }
    set_has_first_three();
  } else {
    clear_has_first_three();
  }
  first_three_ = first_three;
  // @@protoc_insertion_point(field_set_allocated:css_proto_converter.Hexcolor.first_three)
}

// optional .css_proto_converter.HexcolorThree last_three = 2;
inline bool Hexcolor::has_last_three() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Hexcolor::set_has_last_three() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Hexcolor::clear_has_last_three() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Hexcolor::clear_last_three() {
  if (last_three_ != NULL) last_three_->Clear();
  clear_has_last_three();
}
inline const ::css_proto_converter::HexcolorThree& Hexcolor::_internal_last_three() const {
  return *last_three_;
}
inline const ::css_proto_converter::HexcolorThree& Hexcolor::last_three() const {
  const ::css_proto_converter::HexcolorThree* p = last_three_;
  // @@protoc_insertion_point(field_get:css_proto_converter.Hexcolor.last_three)
  return p != NULL ? *p : *reinterpret_cast<const ::css_proto_converter::HexcolorThree*>(
      &::css_proto_converter::_HexcolorThree_default_instance_);
}
inline ::css_proto_converter::HexcolorThree* Hexcolor::release_last_three() {
  // @@protoc_insertion_point(field_release:css_proto_converter.Hexcolor.last_three)
  clear_has_last_three();
  ::css_proto_converter::HexcolorThree* temp = last_three_;
  last_three_ = NULL;
  return temp;
}
inline ::css_proto_converter::HexcolorThree* Hexcolor::mutable_last_three() {
  set_has_last_three();
  if (last_three_ == NULL) {
    auto* p = CreateMaybeMessage<::css_proto_converter::HexcolorThree>(GetArenaNoVirtual());
    last_three_ = p;
  }
  // @@protoc_insertion_point(field_mutable:css_proto_converter.Hexcolor.last_three)
  return last_three_;
}
inline void Hexcolor::set_allocated_last_three(::css_proto_converter::HexcolorThree* last_three) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete last_three_;
  }
  if (last_three) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      last_three = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, last_three, submessage_arena);
    }
    set_has_last_three();
  } else {
    clear_has_last_three();
  }
  last_three_ = last_three;
  // @@protoc_insertion_point(field_set_allocated:css_proto_converter.Hexcolor.last_three)
}

// -------------------------------------------------------------------

// HexcolorThree

// required .css_proto_converter.H ascii_value_1 = 1;
inline bool HexcolorThree::has_ascii_value_1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HexcolorThree::set_has_ascii_value_1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HexcolorThree::clear_has_ascii_value_1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HexcolorThree::clear_ascii_value_1() {
  ascii_value_1_ = 48;
  clear_has_ascii_value_1();
}
inline ::css_proto_converter::H HexcolorThree::ascii_value_1() const {
  // @@protoc_insertion_point(field_get:css_proto_converter.HexcolorThree.ascii_value_1)
  return static_cast< ::css_proto_converter::H >(ascii_value_1_);
}
inline void HexcolorThree::set_ascii_value_1(::css_proto_converter::H value) {
  assert(::css_proto_converter::H_IsValid(value));
  set_has_ascii_value_1();
  ascii_value_1_ = value;
  // @@protoc_insertion_point(field_set:css_proto_converter.HexcolorThree.ascii_value_1)
}

// required .css_proto_converter.H ascii_value_2 = 2;
inline bool HexcolorThree::has_ascii_value_2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HexcolorThree::set_has_ascii_value_2() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HexcolorThree::clear_has_ascii_value_2() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HexcolorThree::clear_ascii_value_2() {
  ascii_value_2_ = 48;
  clear_has_ascii_value_2();
}
inline ::css_proto_converter::H HexcolorThree::ascii_value_2() const {
  // @@protoc_insertion_point(field_get:css_proto_converter.HexcolorThree.ascii_value_2)
  return static_cast< ::css_proto_converter::H >(ascii_value_2_);
}
inline void HexcolorThree::set_ascii_value_2(::css_proto_converter::H value) {
  assert(::css_proto_converter::H_IsValid(value));
  set_has_ascii_value_2();
  ascii_value_2_ = value;
  // @@protoc_insertion_point(field_set:css_proto_converter.HexcolorThree.ascii_value_2)
}

// required .css_proto_converter.H ascii_value_3 = 3;
inline bool HexcolorThree::has_ascii_value_3() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HexcolorThree::set_has_ascii_value_3() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HexcolorThree::clear_has_ascii_value_3() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HexcolorThree::clear_ascii_value_3() {
  ascii_value_3_ = 48;
  clear_has_ascii_value_3();
}
inline ::css_proto_converter::H HexcolorThree::ascii_value_3() const {
  // @@protoc_insertion_point(field_get:css_proto_converter.HexcolorThree.ascii_value_3)
  return static_cast< ::css_proto_converter::H >(ascii_value_3_);
}
inline void HexcolorThree::set_ascii_value_3(::css_proto_converter::H value) {
  assert(::css_proto_converter::H_IsValid(value));
  set_has_ascii_value_3();
  ascii_value_3_ = value;
  // @@protoc_insertion_point(field_set:css_proto_converter.HexcolorThree.ascii_value_3)
}

// -------------------------------------------------------------------

// Input

// required .css_proto_converter.Input.CSSParserMode css_parser_mode = 1;
inline bool Input::has_css_parser_mode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Input::set_has_css_parser_mode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Input::clear_has_css_parser_mode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Input::clear_css_parser_mode() {
  css_parser_mode_ = 0;
  clear_has_css_parser_mode();
}
inline ::css_proto_converter::Input_CSSParserMode Input::css_parser_mode() const {
  // @@protoc_insertion_point(field_get:css_proto_converter.Input.css_parser_mode)
  return static_cast< ::css_proto_converter::Input_CSSParserMode >(css_parser_mode_);
}
inline void Input::set_css_parser_mode(::css_proto_converter::Input_CSSParserMode value) {
  assert(::css_proto_converter::Input_CSSParserMode_IsValid(value));
  set_has_css_parser_mode();
  css_parser_mode_ = value;
  // @@protoc_insertion_point(field_set:css_proto_converter.Input.css_parser_mode)
}

// required bool defer_property_parsing = 2;
inline bool Input::has_defer_property_parsing() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Input::set_has_defer_property_parsing() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Input::clear_has_defer_property_parsing() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Input::clear_defer_property_parsing() {
  defer_property_parsing_ = false;
  clear_has_defer_property_parsing();
}
inline bool Input::defer_property_parsing() const {
  // @@protoc_insertion_point(field_get:css_proto_converter.Input.defer_property_parsing)
  return defer_property_parsing_;
}
inline void Input::set_defer_property_parsing(bool value) {
  set_has_defer_property_parsing();
  defer_property_parsing_ = value;
  // @@protoc_insertion_point(field_set:css_proto_converter.Input.defer_property_parsing)
}

// required .css_proto_converter.StyleSheet style_sheet = 3;
inline bool Input::has_style_sheet() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Input::set_has_style_sheet() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Input::clear_has_style_sheet() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Input::clear_style_sheet() {
  if (style_sheet_ != NULL) style_sheet_->Clear();
  clear_has_style_sheet();
}
inline const ::css_proto_converter::StyleSheet& Input::_internal_style_sheet() const {
  return *style_sheet_;
}
inline const ::css_proto_converter::StyleSheet& Input::style_sheet() const {
  const ::css_proto_converter::StyleSheet* p = style_sheet_;
  // @@protoc_insertion_point(field_get:css_proto_converter.Input.style_sheet)
  return p != NULL ? *p : *reinterpret_cast<const ::css_proto_converter::StyleSheet*>(
      &::css_proto_converter::_StyleSheet_default_instance_);
}
inline ::css_proto_converter::StyleSheet* Input::release_style_sheet() {
  // @@protoc_insertion_point(field_release:css_proto_converter.Input.style_sheet)
  clear_has_style_sheet();
  ::css_proto_converter::StyleSheet* temp = style_sheet_;
  style_sheet_ = NULL;
  return temp;
}
inline ::css_proto_converter::StyleSheet* Input::mutable_style_sheet() {
  set_has_style_sheet();
  if (style_sheet_ == NULL) {
    auto* p = CreateMaybeMessage<::css_proto_converter::StyleSheet>(GetArenaNoVirtual());
    style_sheet_ = p;
  }
  // @@protoc_insertion_point(field_mutable:css_proto_converter.Input.style_sheet)
  return style_sheet_;
}
inline void Input::set_allocated_style_sheet(::css_proto_converter::StyleSheet* style_sheet) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete style_sheet_;
  }
  if (style_sheet) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      style_sheet = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, style_sheet, submessage_arena);
    }
    set_has_style_sheet();
  } else {
    clear_has_style_sheet();
  }
  style_sheet_ = style_sheet;
  // @@protoc_insertion_point(field_set_allocated:css_proto_converter.Input.style_sheet)
}

// required bool is_live_profile = 4;
inline bool Input::has_is_live_profile() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Input::set_has_is_live_profile() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Input::clear_has_is_live_profile() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Input::clear_is_live_profile() {
  is_live_profile_ = false;
  clear_has_is_live_profile();
}
inline bool Input::is_live_profile() const {
  // @@protoc_insertion_point(field_get:css_proto_converter.Input.is_live_profile)
  return is_live_profile_;
}
inline void Input::set_is_live_profile(bool value) {
  set_has_is_live_profile();
  is_live_profile_ = value;
  // @@protoc_insertion_point(field_set:css_proto_converter.Input.is_live_profile)
}

// required .css_proto_converter.Input.SecureContextMode secure_context_mode = 5;
inline bool Input::has_secure_context_mode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Input::set_has_secure_context_mode() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Input::clear_has_secure_context_mode() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Input::clear_secure_context_mode() {
  secure_context_mode_ = 0;
  clear_has_secure_context_mode();
}
inline ::css_proto_converter::Input_SecureContextMode Input::secure_context_mode() const {
  // @@protoc_insertion_point(field_get:css_proto_converter.Input.secure_context_mode)
  return static_cast< ::css_proto_converter::Input_SecureContextMode >(secure_context_mode_);
}
inline void Input::set_secure_context_mode(::css_proto_converter::Input_SecureContextMode value) {
  assert(::css_proto_converter::Input_SecureContextMode_IsValid(value));
  set_has_secure_context_mode();
  secure_context_mode_ = value;
  // @@protoc_insertion_point(field_set:css_proto_converter.Input.secure_context_mode)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace css_proto_converter

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::css_proto_converter::Escape_AsciiValue> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::css_proto_converter::Escape_AsciiValue>() {
  return ::css_proto_converter::Escape_AsciiValue_descriptor();
}
template <> struct is_proto_enum< ::css_proto_converter::Nmstart_AsciiValue> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::css_proto_converter::Nmstart_AsciiValue>() {
  return ::css_proto_converter::Nmstart_AsciiValue_descriptor();
}
template <> struct is_proto_enum< ::css_proto_converter::Nmchar_AsciiValue> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::css_proto_converter::Nmchar_AsciiValue>() {
  return ::css_proto_converter::Nmchar_AsciiValue_descriptor();
}
template <> struct is_proto_enum< ::css_proto_converter::StringCharOrQuote_QuoteChar> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::css_proto_converter::StringCharOrQuote_QuoteChar>() {
  return ::css_proto_converter::StringCharOrQuote_QuoteChar_descriptor();
}
template <> struct is_proto_enum< ::css_proto_converter::StringChar_Space> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::css_proto_converter::StringChar_Space>() {
  return ::css_proto_converter::StringChar_Space_descriptor();
}
template <> struct is_proto_enum< ::css_proto_converter::UrlChar_AsciiValue> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::css_proto_converter::UrlChar_AsciiValue>() {
  return ::css_proto_converter::UrlChar_AsciiValue_descriptor();
}
template <> struct is_proto_enum< ::css_proto_converter::UnrepeatedW_AsciiValue> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::css_proto_converter::UnrepeatedW_AsciiValue>() {
  return ::css_proto_converter::UnrepeatedW_AsciiValue_descriptor();
}
template <> struct is_proto_enum< ::css_proto_converter::Nl_NewlineKind> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::css_proto_converter::Nl_NewlineKind>() {
  return ::css_proto_converter::Nl_NewlineKind_descriptor();
}
template <> struct is_proto_enum< ::css_proto_converter::Length_Unit> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::css_proto_converter::Length_Unit>() {
  return ::css_proto_converter::Length_Unit_descriptor();
}
template <> struct is_proto_enum< ::css_proto_converter::Angle_Unit> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::css_proto_converter::Angle_Unit>() {
  return ::css_proto_converter::Angle_Unit_descriptor();
}
template <> struct is_proto_enum< ::css_proto_converter::Time_Unit> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::css_proto_converter::Time_Unit>() {
  return ::css_proto_converter::Time_Unit_descriptor();
}
template <> struct is_proto_enum< ::css_proto_converter::Freq_Unit> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::css_proto_converter::Freq_Unit>() {
  return ::css_proto_converter::Freq_Unit_descriptor();
}
template <> struct is_proto_enum< ::css_proto_converter::CharsetDeclaration_EncodingId> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::css_proto_converter::CharsetDeclaration_EncodingId>() {
  return ::css_proto_converter::CharsetDeclaration_EncodingId_descriptor();
}
template <> struct is_proto_enum< ::css_proto_converter::ViewportProperty_PropertyId> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::css_proto_converter::ViewportProperty_PropertyId>() {
  return ::css_proto_converter::ViewportProperty_PropertyId_descriptor();
}
template <> struct is_proto_enum< ::css_proto_converter::ViewportValue_ValueId> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::css_proto_converter::ViewportValue_ValueId>() {
  return ::css_proto_converter::ViewportValue_ValueId_descriptor();
}
template <> struct is_proto_enum< ::css_proto_converter::Import_SrcId> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::css_proto_converter::Import_SrcId>() {
  return ::css_proto_converter::Import_SrcId_descriptor();
}
template <> struct is_proto_enum< ::css_proto_converter::MediaQueryPartTwo_NotOrOnly> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::css_proto_converter::MediaQueryPartTwo_NotOrOnly>() {
  return ::css_proto_converter::MediaQueryPartTwo_NotOrOnly_descriptor();
}
template <> struct is_proto_enum< ::css_proto_converter::MediaType_ValueId> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::css_proto_converter::MediaType_ValueId>() {
  return ::css_proto_converter::MediaType_ValueId_descriptor();
}
template <> struct is_proto_enum< ::css_proto_converter::MfName_ValueId> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::css_proto_converter::MfName_ValueId>() {
  return ::css_proto_converter::MfName_ValueId_descriptor();
}
template <> struct is_proto_enum< ::css_proto_converter::Operator_AsciiValue> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::css_proto_converter::Operator_AsciiValue>() {
  return ::css_proto_converter::Operator_AsciiValue_descriptor();
}
template <> struct is_proto_enum< ::css_proto_converter::UnaryOperator_AsciiValue> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::css_proto_converter::UnaryOperator_AsciiValue>() {
  return ::css_proto_converter::UnaryOperator_AsciiValue_descriptor();
}
template <> struct is_proto_enum< ::css_proto_converter::Property_NameId> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::css_proto_converter::Property_NameId>() {
  return ::css_proto_converter::Property_NameId_descriptor();
}
template <> struct is_proto_enum< ::css_proto_converter::Attr_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::css_proto_converter::Attr_Type>() {
  return ::css_proto_converter::Attr_Type_descriptor();
}
template <> struct is_proto_enum< ::css_proto_converter::Selector_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::css_proto_converter::Selector_Type>() {
  return ::css_proto_converter::Selector_Type_descriptor();
}
template <> struct is_proto_enum< ::css_proto_converter::Selector_PseudoValueId> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::css_proto_converter::Selector_PseudoValueId>() {
  return ::css_proto_converter::Selector_PseudoValueId_descriptor();
}
template <> struct is_proto_enum< ::css_proto_converter::PropertyAndValue_Prio> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::css_proto_converter::PropertyAndValue_Prio>() {
  return ::css_proto_converter::PropertyAndValue_Prio_descriptor();
}
template <> struct is_proto_enum< ::css_proto_converter::PropertyAndValue_ValueId> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::css_proto_converter::PropertyAndValue_ValueId>() {
  return ::css_proto_converter::PropertyAndValue_ValueId_descriptor();
}
template <> struct is_proto_enum< ::css_proto_converter::Input_CSSParserMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::css_proto_converter::Input_CSSParserMode>() {
  return ::css_proto_converter::Input_CSSParserMode_descriptor();
}
template <> struct is_proto_enum< ::css_proto_converter::Input_SecureContextMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::css_proto_converter::Input_SecureContextMode>() {
  return ::css_proto_converter::Input_SecureContextMode_descriptor();
}
template <> struct is_proto_enum< ::css_proto_converter::H> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::css_proto_converter::H>() {
  return ::css_proto_converter::H_descriptor();
}
template <> struct is_proto_enum< ::css_proto_converter::PseudoType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::css_proto_converter::PseudoType>() {
  return ::css_proto_converter::PseudoType_descriptor();
}
template <> struct is_proto_enum< ::css_proto_converter::Combinator> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::css_proto_converter::Combinator>() {
  return ::css_proto_converter::Combinator_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_css_2eproto
