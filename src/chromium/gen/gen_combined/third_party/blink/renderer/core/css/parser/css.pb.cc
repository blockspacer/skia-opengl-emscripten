// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: css.proto

#include "css.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_css_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_css_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Attr;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_css_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CharsetDeclaration;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_css_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_FontFace;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_css_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_HexcolorThree;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_css_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_MediaType;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_css_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_MfName;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_css_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Nl;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_css_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Num;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_css_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Operator;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_css_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Property;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_css_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_UnaryOperator;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_css_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_UnrepeatedW;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_css_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Uri;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_css_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ViewportProperty;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_css_2eproto ::google::protobuf::internal::SCCInfo<12> scc_info_Expr;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_css_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Angle;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_css_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_BinarySupportsCondition;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_css_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Declaration;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_css_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_DeclarationList;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_css_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Escape;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_css_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Freq;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_css_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_FunctionToken;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_css_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Hexcolor;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_css_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Import;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_css_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Length;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_css_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_MediaAnd;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_css_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_MediaConditionWithoutOr;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_css_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_MediaQueryList;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_css_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_MfBool;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_css_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_NamespacePrefix;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_css_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Nmchar;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_css_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Nmstart;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_css_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_PseudoPage;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_css_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Selector;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_css_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_SelectorList;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_css_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_String;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_css_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_StringCharOrQuote;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_css_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Time;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_css_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Unicode;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_css_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_UrlChar;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_css_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Viewport;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_css_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Ident;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_css_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Media;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_css_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_MediaFeature;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_css_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_MediaQuery;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_css_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_MediaQueryPartTwo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_css_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_MfPlain;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_css_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_PropertyAndValue;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_css_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Ruleset;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_css_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_StringChar;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_css_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_ViewportPropertyAndValue;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_css_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_ViewportValue;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_css_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_MfValue;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_css_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_Namespace;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_css_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_Page;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_css_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_StyleSheet;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_css_2eproto ::google::protobuf::internal::SCCInfo<6> scc_info_AtRuleOrRuleset;
}  // namespace protobuf_css_2eproto
namespace css_proto_converter {
class UnicodeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Unicode>
      _instance;
} _Unicode_default_instance_;
class EscapeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Escape>
      _instance;
  const ::css_proto_converter::Unicode* unicode_;
  int ascii_value_;
} _Escape_default_instance_;
class NmstartDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Nmstart>
      _instance;
  int ascii_value_;
  const ::css_proto_converter::Escape* escape_;
} _Nmstart_default_instance_;
class NmcharDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Nmchar>
      _instance;
  int ascii_value_;
  const ::css_proto_converter::Escape* escape_;
} _Nmchar_default_instance_;
class StringDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<String>
      _instance;
} _String_default_instance_;
class StringCharOrQuoteDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StringCharOrQuote>
      _instance;
  const ::css_proto_converter::StringChar* string_char_;
  int quote_char_;
} _StringCharOrQuote_default_instance_;
class StringCharDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StringChar>
      _instance;
  const ::css_proto_converter::UrlChar* url_char_;
  int space_;
  const ::css_proto_converter::Nl* nl_;
} _StringChar_default_instance_;
class IdentDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Ident>
      _instance;
} _Ident_default_instance_;
class NumDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Num>
      _instance;
} _Num_default_instance_;
class UrlCharDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UrlChar>
      _instance;
  int ascii_value_;
  const ::css_proto_converter::Escape* escape_;
} _UrlChar_default_instance_;
class WDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<W>
      _instance;
} _W_default_instance_;
class UnrepeatedWDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UnrepeatedW>
      _instance;
} _UnrepeatedW_default_instance_;
class NlDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Nl>
      _instance;
} _Nl_default_instance_;
class LengthDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Length>
      _instance;
} _Length_default_instance_;
class AngleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Angle>
      _instance;
} _Angle_default_instance_;
class TimeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Time>
      _instance;
} _Time_default_instance_;
class FreqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Freq>
      _instance;
} _Freq_default_instance_;
class UriDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Uri>
      _instance;
} _Uri_default_instance_;
class FunctionTokenDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FunctionToken>
      _instance;
} _FunctionToken_default_instance_;
class StyleSheetDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StyleSheet>
      _instance;
} _StyleSheet_default_instance_;
class CharsetDeclarationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CharsetDeclaration>
      _instance;
} _CharsetDeclaration_default_instance_;
class NestedAtRuleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NestedAtRule>
      _instance;
  const ::css_proto_converter::Ruleset* ruleset_;
  const ::css_proto_converter::Media* media_;
  const ::css_proto_converter::Page* page_;
  const ::css_proto_converter::FontFace* font_face_;
  const ::css_proto_converter::Viewport* viewport_;
  const ::css_proto_converter::SupportsRule* supports_rule_;
} _NestedAtRule_default_instance_;
class SupportsRuleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SupportsRule>
      _instance;
} _SupportsRule_default_instance_;
class AtRuleOrRulesetsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AtRuleOrRulesets>
      _instance;
} _AtRuleOrRulesets_default_instance_;
class AtRuleOrRulesetDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AtRuleOrRuleset>
      _instance;
} _AtRuleOrRuleset_default_instance_;
class SupportsConditionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SupportsCondition>
      _instance;
  const ::css_proto_converter::BinarySupportsCondition* and_supports_condition_;
  const ::css_proto_converter::BinarySupportsCondition* or_supports_condition_;
} _SupportsCondition_default_instance_;
class BinarySupportsConditionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BinarySupportsCondition>
      _instance;
} _BinarySupportsCondition_default_instance_;
class ViewportDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Viewport>
      _instance;
} _Viewport_default_instance_;
class ViewportPropertyAndValueDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ViewportPropertyAndValue>
      _instance;
} _ViewportPropertyAndValue_default_instance_;
class ViewportPropertyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ViewportProperty>
      _instance;
} _ViewportProperty_default_instance_;
class ViewportValueDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ViewportValue>
      _instance;
  const ::css_proto_converter::Length* length_;
  const ::css_proto_converter::Num* num_;
} _ViewportValue_default_instance_;
class ImportDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Import>
      _instance;
} _Import_default_instance_;
class MediaQueryListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MediaQueryList>
      _instance;
} _MediaQueryList_default_instance_;
class MediaQueryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MediaQuery>
      _instance;
} _MediaQuery_default_instance_;
class MediaQueryPartTwoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MediaQueryPartTwo>
      _instance;
} _MediaQueryPartTwo_default_instance_;
class MediaConditionWithoutOrDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MediaConditionWithoutOr>
      _instance;
  const ::css_proto_converter::MediaAnd* media_and_;
  const ::css_proto_converter::MediaInParens* media_in_parens_;
} _MediaConditionWithoutOr_default_instance_;
class MediaConditionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MediaCondition>
      _instance;
  const ::css_proto_converter::MediaNot* media_not_;
  const ::css_proto_converter::MediaOr* media_or_;
  const ::css_proto_converter::MediaInParens* media_in_parens_;
} _MediaCondition_default_instance_;
class MediaTypeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MediaType>
      _instance;
} _MediaType_default_instance_;
class MediaNotDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MediaNot>
      _instance;
} _MediaNot_default_instance_;
class MediaAndDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MediaAnd>
      _instance;
} _MediaAnd_default_instance_;
class MediaOrDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MediaOr>
      _instance;
} _MediaOr_default_instance_;
class MediaInParensDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MediaInParens>
      _instance;
} _MediaInParens_default_instance_;
class MediaFeatureDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MediaFeature>
      _instance;
} _MediaFeature_default_instance_;
class MfPlainDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MfPlain>
      _instance;
} _MfPlain_default_instance_;
class MfBoolDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MfBool>
      _instance;
} _MfBool_default_instance_;
class MfNameDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MfName>
      _instance;
} _MfName_default_instance_;
class MfValueDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MfValue>
      _instance;
  const ::css_proto_converter::Length* length_;
  const ::css_proto_converter::Ident* ident_;
} _MfValue_default_instance_;
class NamespaceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Namespace>
      _instance;
  const ::css_proto_converter::String* string_;
  const ::css_proto_converter::Uri* uri_;
} _Namespace_default_instance_;
class NamespacePrefixDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NamespacePrefix>
      _instance;
} _NamespacePrefix_default_instance_;
class MediaDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Media>
      _instance;
} _Media_default_instance_;
class PageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Page>
      _instance;
} _Page_default_instance_;
class DeclarationListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeclarationList>
      _instance;
} _DeclarationList_default_instance_;
class PseudoPageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PseudoPage>
      _instance;
} _PseudoPage_default_instance_;
class FontFaceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FontFace>
      _instance;
} _FontFace_default_instance_;
class OperatorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Operator>
      _instance;
} _Operator_default_instance_;
class UnaryOperatorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UnaryOperator>
      _instance;
} _UnaryOperator_default_instance_;
class PropertyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Property>
      _instance;
} _Property_default_instance_;
class RulesetDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Ruleset>
      _instance;
} _Ruleset_default_instance_;
class SelectorListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SelectorList>
      _instance;
} _SelectorList_default_instance_;
class AttrDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Attr>
      _instance;
} _Attr_default_instance_;
class SelectorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Selector>
      _instance;
} _Selector_default_instance_;
class PseudoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Pseudo>
      _instance;
  const ::css_proto_converter::Ident* ident_1_;
  const ::css_proto_converter::FunctionToken* function_token_;
} _Pseudo_default_instance_;
class DeclarationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Declaration>
      _instance;
} _Declaration_default_instance_;
class PropertyAndValueDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PropertyAndValue>
      _instance;
} _PropertyAndValue_default_instance_;
class ExprDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Expr>
      _instance;
} _Expr_default_instance_;
class OperatorTermDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OperatorTerm>
      _instance;
} _OperatorTerm_default_instance_;
class TermDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Term>
      _instance;
  const ::css_proto_converter::TermPart* term_part_;
  const ::css_proto_converter::String* string_;
} _Term_default_instance_;
class TermPartDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TermPart>
      _instance;
} _TermPart_default_instance_;
class FunctionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Function>
      _instance;
} _Function_default_instance_;
class HexcolorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Hexcolor>
      _instance;
} _Hexcolor_default_instance_;
class HexcolorThreeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HexcolorThree>
      _instance;
} _HexcolorThree_default_instance_;
class InputDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Input>
      _instance;
} _Input_default_instance_;
}  // namespace css_proto_converter
namespace protobuf_css_2eproto {
static void InitDefaultsUnicode() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::css_proto_converter::_Unicode_default_instance_;
    new (ptr) ::css_proto_converter::Unicode();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::css_proto_converter::Unicode::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Unicode =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsUnicode}, {
      &protobuf_css_2eproto::scc_info_UnrepeatedW.base,}};

static void InitDefaultsEscape() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::css_proto_converter::_Escape_default_instance_;
    new (ptr) ::css_proto_converter::Escape();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::css_proto_converter::Escape::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Escape =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsEscape}, {
      &protobuf_css_2eproto::scc_info_Unicode.base,}};

static void InitDefaultsNmstart() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::css_proto_converter::_Nmstart_default_instance_;
    new (ptr) ::css_proto_converter::Nmstart();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::css_proto_converter::Nmstart::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Nmstart =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsNmstart}, {
      &protobuf_css_2eproto::scc_info_Escape.base,}};

static void InitDefaultsNmchar() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::css_proto_converter::_Nmchar_default_instance_;
    new (ptr) ::css_proto_converter::Nmchar();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::css_proto_converter::Nmchar::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Nmchar =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsNmchar}, {
      &protobuf_css_2eproto::scc_info_Escape.base,}};

static void InitDefaultsString() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::css_proto_converter::_String_default_instance_;
    new (ptr) ::css_proto_converter::String();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::css_proto_converter::String::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_String =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsString}, {
      &protobuf_css_2eproto::scc_info_StringCharOrQuote.base,}};

static void InitDefaultsStringCharOrQuote() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::css_proto_converter::_StringCharOrQuote_default_instance_;
    new (ptr) ::css_proto_converter::StringCharOrQuote();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::css_proto_converter::StringCharOrQuote::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_StringCharOrQuote =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsStringCharOrQuote}, {
      &protobuf_css_2eproto::scc_info_StringChar.base,}};

static void InitDefaultsStringChar() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::css_proto_converter::_StringChar_default_instance_;
    new (ptr) ::css_proto_converter::StringChar();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::css_proto_converter::StringChar::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_StringChar =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsStringChar}, {
      &protobuf_css_2eproto::scc_info_UrlChar.base,
      &protobuf_css_2eproto::scc_info_Nl.base,}};

static void InitDefaultsIdent() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::css_proto_converter::_Ident_default_instance_;
    new (ptr) ::css_proto_converter::Ident();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::css_proto_converter::Ident::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Ident =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsIdent}, {
      &protobuf_css_2eproto::scc_info_Nmstart.base,
      &protobuf_css_2eproto::scc_info_Nmchar.base,}};

static void InitDefaultsNum() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::css_proto_converter::_Num_default_instance_;
    new (ptr) ::css_proto_converter::Num();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::css_proto_converter::Num::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Num =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsNum}, {}};

static void InitDefaultsUrlChar() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::css_proto_converter::_UrlChar_default_instance_;
    new (ptr) ::css_proto_converter::UrlChar();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::css_proto_converter::UrlChar::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_UrlChar =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsUrlChar}, {
      &protobuf_css_2eproto::scc_info_Escape.base,}};

static void InitDefaultsW() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::css_proto_converter::_W_default_instance_;
    new (ptr) ::css_proto_converter::W();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::css_proto_converter::W::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_W =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsW}, {
      &protobuf_css_2eproto::scc_info_UnrepeatedW.base,}};

static void InitDefaultsUnrepeatedW() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::css_proto_converter::_UnrepeatedW_default_instance_;
    new (ptr) ::css_proto_converter::UnrepeatedW();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::css_proto_converter::UnrepeatedW::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UnrepeatedW =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUnrepeatedW}, {}};

static void InitDefaultsNl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::css_proto_converter::_Nl_default_instance_;
    new (ptr) ::css_proto_converter::Nl();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::css_proto_converter::Nl::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Nl =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsNl}, {}};

static void InitDefaultsLength() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::css_proto_converter::_Length_default_instance_;
    new (ptr) ::css_proto_converter::Length();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::css_proto_converter::Length::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Length =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsLength}, {
      &protobuf_css_2eproto::scc_info_Num.base,}};

static void InitDefaultsAngle() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::css_proto_converter::_Angle_default_instance_;
    new (ptr) ::css_proto_converter::Angle();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::css_proto_converter::Angle::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Angle =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAngle}, {
      &protobuf_css_2eproto::scc_info_Num.base,}};

static void InitDefaultsTime() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::css_proto_converter::_Time_default_instance_;
    new (ptr) ::css_proto_converter::Time();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::css_proto_converter::Time::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Time =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTime}, {
      &protobuf_css_2eproto::scc_info_Num.base,}};

static void InitDefaultsFreq() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::css_proto_converter::_Freq_default_instance_;
    new (ptr) ::css_proto_converter::Freq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::css_proto_converter::Freq::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Freq =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsFreq}, {
      &protobuf_css_2eproto::scc_info_Num.base,}};

static void InitDefaultsUri() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::css_proto_converter::_Uri_default_instance_;
    new (ptr) ::css_proto_converter::Uri();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::css_proto_converter::Uri::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Uri =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUri}, {}};

static void InitDefaultsFunctionToken() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::css_proto_converter::_FunctionToken_default_instance_;
    new (ptr) ::css_proto_converter::FunctionToken();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::css_proto_converter::FunctionToken::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_FunctionToken =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsFunctionToken}, {
      &protobuf_css_2eproto::scc_info_Ident.base,}};

static void InitDefaultsStyleSheet() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::css_proto_converter::_StyleSheet_default_instance_;
    new (ptr) ::css_proto_converter::StyleSheet();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::css_proto_converter::StyleSheet::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_StyleSheet =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsStyleSheet}, {
      &protobuf_css_2eproto::scc_info_CharsetDeclaration.base,
      &protobuf_css_2eproto::scc_info_Import.base,
      &protobuf_css_2eproto::scc_info_Namespace.base,
      &protobuf_css_2eproto::scc_info_AtRuleOrRuleset.base,}};

static void InitDefaultsCharsetDeclaration() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::css_proto_converter::_CharsetDeclaration_default_instance_;
    new (ptr) ::css_proto_converter::CharsetDeclaration();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::css_proto_converter::CharsetDeclaration::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CharsetDeclaration =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCharsetDeclaration}, {}};

static void InitDefaultsAtRuleOrRuleset() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::css_proto_converter::_NestedAtRule_default_instance_;
    new (ptr) ::css_proto_converter::NestedAtRule();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::css_proto_converter::_SupportsRule_default_instance_;
    new (ptr) ::css_proto_converter::SupportsRule();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::css_proto_converter::_AtRuleOrRulesets_default_instance_;
    new (ptr) ::css_proto_converter::AtRuleOrRulesets();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::css_proto_converter::_AtRuleOrRuleset_default_instance_;
    new (ptr) ::css_proto_converter::AtRuleOrRuleset();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::css_proto_converter::NestedAtRule::InitAsDefaultInstance();
  ::css_proto_converter::SupportsRule::InitAsDefaultInstance();
  ::css_proto_converter::AtRuleOrRulesets::InitAsDefaultInstance();
  ::css_proto_converter::AtRuleOrRuleset::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<6> scc_info_AtRuleOrRuleset =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 6, InitDefaultsAtRuleOrRuleset}, {
      &protobuf_css_2eproto::scc_info_Ruleset.base,
      &protobuf_css_2eproto::scc_info_Media.base,
      &protobuf_css_2eproto::scc_info_Page.base,
      &protobuf_css_2eproto::scc_info_FontFace.base,
      &protobuf_css_2eproto::scc_info_Viewport.base,
      &protobuf_css_2eproto::scc_info_BinarySupportsCondition.base,}};

static void InitDefaultsBinarySupportsCondition() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::css_proto_converter::_SupportsCondition_default_instance_;
    new (ptr) ::css_proto_converter::SupportsCondition();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::css_proto_converter::_BinarySupportsCondition_default_instance_;
    new (ptr) ::css_proto_converter::BinarySupportsCondition();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::css_proto_converter::SupportsCondition::InitAsDefaultInstance();
  ::css_proto_converter::BinarySupportsCondition::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_BinarySupportsCondition =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsBinarySupportsCondition}, {
      &protobuf_css_2eproto::scc_info_PropertyAndValue.base,}};

static void InitDefaultsViewport() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::css_proto_converter::_Viewport_default_instance_;
    new (ptr) ::css_proto_converter::Viewport();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::css_proto_converter::Viewport::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Viewport =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsViewport}, {
      &protobuf_css_2eproto::scc_info_ViewportPropertyAndValue.base,}};

static void InitDefaultsViewportPropertyAndValue() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::css_proto_converter::_ViewportPropertyAndValue_default_instance_;
    new (ptr) ::css_proto_converter::ViewportPropertyAndValue();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::css_proto_converter::ViewportPropertyAndValue::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_ViewportPropertyAndValue =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsViewportPropertyAndValue}, {
      &protobuf_css_2eproto::scc_info_ViewportProperty.base,
      &protobuf_css_2eproto::scc_info_ViewportValue.base,}};

static void InitDefaultsViewportProperty() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::css_proto_converter::_ViewportProperty_default_instance_;
    new (ptr) ::css_proto_converter::ViewportProperty();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::css_proto_converter::ViewportProperty::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ViewportProperty =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsViewportProperty}, {}};

static void InitDefaultsViewportValue() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::css_proto_converter::_ViewportValue_default_instance_;
    new (ptr) ::css_proto_converter::ViewportValue();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::css_proto_converter::ViewportValue::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_ViewportValue =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsViewportValue}, {
      &protobuf_css_2eproto::scc_info_Length.base,
      &protobuf_css_2eproto::scc_info_Num.base,}};

static void InitDefaultsImport() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::css_proto_converter::_Import_default_instance_;
    new (ptr) ::css_proto_converter::Import();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::css_proto_converter::Import::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Import =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsImport}, {
      &protobuf_css_2eproto::scc_info_MediaQueryList.base,}};

static void InitDefaultsMediaQueryList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::css_proto_converter::_MediaQueryList_default_instance_;
    new (ptr) ::css_proto_converter::MediaQueryList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::css_proto_converter::MediaQueryList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_MediaQueryList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsMediaQueryList}, {
      &protobuf_css_2eproto::scc_info_MediaQuery.base,}};

static void InitDefaultsMediaQuery() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::css_proto_converter::_MediaQuery_default_instance_;
    new (ptr) ::css_proto_converter::MediaQuery();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::css_proto_converter::MediaQuery::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_MediaQuery =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsMediaQuery}, {
      &protobuf_css_2eproto::scc_info_MediaAnd.base,
      &protobuf_css_2eproto::scc_info_MediaQueryPartTwo.base,}};

static void InitDefaultsMediaQueryPartTwo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::css_proto_converter::_MediaQueryPartTwo_default_instance_;
    new (ptr) ::css_proto_converter::MediaQueryPartTwo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::css_proto_converter::MediaQueryPartTwo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_MediaQueryPartTwo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsMediaQueryPartTwo}, {
      &protobuf_css_2eproto::scc_info_MediaType.base,
      &protobuf_css_2eproto::scc_info_MediaConditionWithoutOr.base,}};

static void InitDefaultsMediaConditionWithoutOr() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::css_proto_converter::_MediaConditionWithoutOr_default_instance_;
    new (ptr) ::css_proto_converter::MediaConditionWithoutOr();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::css_proto_converter::MediaConditionWithoutOr::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_MediaConditionWithoutOr =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsMediaConditionWithoutOr}, {
      &protobuf_css_2eproto::scc_info_MediaAnd.base,}};

static void InitDefaultsMediaType() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::css_proto_converter::_MediaType_default_instance_;
    new (ptr) ::css_proto_converter::MediaType();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::css_proto_converter::MediaType::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MediaType =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMediaType}, {}};

static void InitDefaultsMediaAnd() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::css_proto_converter::_MediaCondition_default_instance_;
    new (ptr) ::css_proto_converter::MediaCondition();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::css_proto_converter::_MediaNot_default_instance_;
    new (ptr) ::css_proto_converter::MediaNot();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::css_proto_converter::_MediaAnd_default_instance_;
    new (ptr) ::css_proto_converter::MediaAnd();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::css_proto_converter::_MediaOr_default_instance_;
    new (ptr) ::css_proto_converter::MediaOr();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::css_proto_converter::_MediaInParens_default_instance_;
    new (ptr) ::css_proto_converter::MediaInParens();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::css_proto_converter::MediaCondition::InitAsDefaultInstance();
  ::css_proto_converter::MediaNot::InitAsDefaultInstance();
  ::css_proto_converter::MediaAnd::InitAsDefaultInstance();
  ::css_proto_converter::MediaOr::InitAsDefaultInstance();
  ::css_proto_converter::MediaInParens::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_MediaAnd =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsMediaAnd}, {
      &protobuf_css_2eproto::scc_info_MediaFeature.base,}};

static void InitDefaultsMediaFeature() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::css_proto_converter::_MediaFeature_default_instance_;
    new (ptr) ::css_proto_converter::MediaFeature();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::css_proto_converter::MediaFeature::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_MediaFeature =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsMediaFeature}, {
      &protobuf_css_2eproto::scc_info_MfPlain.base,
      &protobuf_css_2eproto::scc_info_MfBool.base,}};

static void InitDefaultsMfPlain() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::css_proto_converter::_MfPlain_default_instance_;
    new (ptr) ::css_proto_converter::MfPlain();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::css_proto_converter::MfPlain::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_MfPlain =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsMfPlain}, {
      &protobuf_css_2eproto::scc_info_MfName.base,
      &protobuf_css_2eproto::scc_info_MfValue.base,}};

static void InitDefaultsMfBool() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::css_proto_converter::_MfBool_default_instance_;
    new (ptr) ::css_proto_converter::MfBool();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::css_proto_converter::MfBool::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_MfBool =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsMfBool}, {
      &protobuf_css_2eproto::scc_info_MfName.base,}};

static void InitDefaultsMfName() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::css_proto_converter::_MfName_default_instance_;
    new (ptr) ::css_proto_converter::MfName();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::css_proto_converter::MfName::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MfName =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMfName}, {}};

static void InitDefaultsMfValue() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::css_proto_converter::_MfValue_default_instance_;
    new (ptr) ::css_proto_converter::MfValue();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::css_proto_converter::MfValue::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_MfValue =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsMfValue}, {
      &protobuf_css_2eproto::scc_info_Num.base,
      &protobuf_css_2eproto::scc_info_Length.base,
      &protobuf_css_2eproto::scc_info_Ident.base,}};

static void InitDefaultsNamespace() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::css_proto_converter::_Namespace_default_instance_;
    new (ptr) ::css_proto_converter::Namespace();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::css_proto_converter::Namespace::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_Namespace =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsNamespace}, {
      &protobuf_css_2eproto::scc_info_NamespacePrefix.base,
      &protobuf_css_2eproto::scc_info_String.base,
      &protobuf_css_2eproto::scc_info_Uri.base,}};

static void InitDefaultsNamespacePrefix() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::css_proto_converter::_NamespacePrefix_default_instance_;
    new (ptr) ::css_proto_converter::NamespacePrefix();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::css_proto_converter::NamespacePrefix::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_NamespacePrefix =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsNamespacePrefix}, {
      &protobuf_css_2eproto::scc_info_Ident.base,}};

static void InitDefaultsMedia() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::css_proto_converter::_Media_default_instance_;
    new (ptr) ::css_proto_converter::Media();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::css_proto_converter::Media::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Media =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsMedia}, {
      &protobuf_css_2eproto::scc_info_MediaQueryList.base,
      &protobuf_css_2eproto::scc_info_Ruleset.base,}};

static void InitDefaultsPage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::css_proto_converter::_Page_default_instance_;
    new (ptr) ::css_proto_converter::Page();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::css_proto_converter::Page::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_Page =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsPage}, {
      &protobuf_css_2eproto::scc_info_Ident.base,
      &protobuf_css_2eproto::scc_info_PseudoPage.base,
      &protobuf_css_2eproto::scc_info_DeclarationList.base,}};

static void InitDefaultsDeclarationList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::css_proto_converter::_DeclarationList_default_instance_;
    new (ptr) ::css_proto_converter::DeclarationList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::css_proto_converter::DeclarationList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_DeclarationList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsDeclarationList}, {
      &protobuf_css_2eproto::scc_info_Declaration.base,}};

static void InitDefaultsPseudoPage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::css_proto_converter::_PseudoPage_default_instance_;
    new (ptr) ::css_proto_converter::PseudoPage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::css_proto_converter::PseudoPage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PseudoPage =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPseudoPage}, {
      &protobuf_css_2eproto::scc_info_Ident.base,}};

static void InitDefaultsFontFace() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::css_proto_converter::_FontFace_default_instance_;
    new (ptr) ::css_proto_converter::FontFace();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::css_proto_converter::FontFace::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FontFace =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFontFace}, {}};

static void InitDefaultsOperator() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::css_proto_converter::_Operator_default_instance_;
    new (ptr) ::css_proto_converter::Operator();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::css_proto_converter::Operator::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Operator =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOperator}, {}};

static void InitDefaultsUnaryOperator() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::css_proto_converter::_UnaryOperator_default_instance_;
    new (ptr) ::css_proto_converter::UnaryOperator();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::css_proto_converter::UnaryOperator::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UnaryOperator =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUnaryOperator}, {}};

static void InitDefaultsProperty() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::css_proto_converter::_Property_default_instance_;
    new (ptr) ::css_proto_converter::Property();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::css_proto_converter::Property::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Property =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsProperty}, {}};

static void InitDefaultsRuleset() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::css_proto_converter::_Ruleset_default_instance_;
    new (ptr) ::css_proto_converter::Ruleset();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::css_proto_converter::Ruleset::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Ruleset =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsRuleset}, {
      &protobuf_css_2eproto::scc_info_SelectorList.base,
      &protobuf_css_2eproto::scc_info_DeclarationList.base,}};

static void InitDefaultsSelectorList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::css_proto_converter::_SelectorList_default_instance_;
    new (ptr) ::css_proto_converter::SelectorList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::css_proto_converter::SelectorList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SelectorList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSelectorList}, {
      &protobuf_css_2eproto::scc_info_Selector.base,}};

static void InitDefaultsAttr() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::css_proto_converter::_Attr_default_instance_;
    new (ptr) ::css_proto_converter::Attr();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::css_proto_converter::Attr::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Attr =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAttr}, {}};

static void InitDefaultsSelector() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::css_proto_converter::_Selector_default_instance_;
    new (ptr) ::css_proto_converter::Selector();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::css_proto_converter::Selector::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Selector =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSelector}, {
      &protobuf_css_2eproto::scc_info_Attr.base,}};

static void InitDefaultsPseudo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::css_proto_converter::_Pseudo_default_instance_;
    new (ptr) ::css_proto_converter::Pseudo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::css_proto_converter::Pseudo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Pseudo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsPseudo}, {
      &protobuf_css_2eproto::scc_info_Ident.base,
      &protobuf_css_2eproto::scc_info_FunctionToken.base,}};

static void InitDefaultsDeclaration() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::css_proto_converter::_Declaration_default_instance_;
    new (ptr) ::css_proto_converter::Declaration();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::css_proto_converter::Declaration::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Declaration =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsDeclaration}, {
      &protobuf_css_2eproto::scc_info_PropertyAndValue.base,}};

static void InitDefaultsPropertyAndValue() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::css_proto_converter::_PropertyAndValue_default_instance_;
    new (ptr) ::css_proto_converter::PropertyAndValue();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::css_proto_converter::PropertyAndValue::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_PropertyAndValue =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsPropertyAndValue}, {
      &protobuf_css_2eproto::scc_info_Property.base,
      &protobuf_css_2eproto::scc_info_Expr.base,}};

static void InitDefaultsExpr() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::css_proto_converter::_Expr_default_instance_;
    new (ptr) ::css_proto_converter::Expr();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::css_proto_converter::_OperatorTerm_default_instance_;
    new (ptr) ::css_proto_converter::OperatorTerm();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::css_proto_converter::_Term_default_instance_;
    new (ptr) ::css_proto_converter::Term();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::css_proto_converter::_TermPart_default_instance_;
    new (ptr) ::css_proto_converter::TermPart();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::css_proto_converter::_Function_default_instance_;
    new (ptr) ::css_proto_converter::Function();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::css_proto_converter::Expr::InitAsDefaultInstance();
  ::css_proto_converter::OperatorTerm::InitAsDefaultInstance();
  ::css_proto_converter::Term::InitAsDefaultInstance();
  ::css_proto_converter::TermPart::InitAsDefaultInstance();
  ::css_proto_converter::Function::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<12> scc_info_Expr =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 12, InitDefaultsExpr}, {
      &protobuf_css_2eproto::scc_info_FunctionToken.base,
      &protobuf_css_2eproto::scc_info_Operator.base,
      &protobuf_css_2eproto::scc_info_UnaryOperator.base,
      &protobuf_css_2eproto::scc_info_String.base,
      &protobuf_css_2eproto::scc_info_Ident.base,
      &protobuf_css_2eproto::scc_info_Uri.base,
      &protobuf_css_2eproto::scc_info_Hexcolor.base,
      &protobuf_css_2eproto::scc_info_Num.base,
      &protobuf_css_2eproto::scc_info_Length.base,
      &protobuf_css_2eproto::scc_info_Angle.base,
      &protobuf_css_2eproto::scc_info_Time.base,
      &protobuf_css_2eproto::scc_info_Freq.base,}};

static void InitDefaultsHexcolor() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::css_proto_converter::_Hexcolor_default_instance_;
    new (ptr) ::css_proto_converter::Hexcolor();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::css_proto_converter::Hexcolor::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Hexcolor =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsHexcolor}, {
      &protobuf_css_2eproto::scc_info_HexcolorThree.base,}};

static void InitDefaultsHexcolorThree() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::css_proto_converter::_HexcolorThree_default_instance_;
    new (ptr) ::css_proto_converter::HexcolorThree();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::css_proto_converter::HexcolorThree::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_HexcolorThree =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHexcolorThree}, {}};

static void InitDefaultsInput() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::css_proto_converter::_Input_default_instance_;
    new (ptr) ::css_proto_converter::Input();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::css_proto_converter::Input::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Input =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsInput}, {
      &protobuf_css_2eproto::scc_info_StyleSheet.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Unicode.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Escape.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Nmstart.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Nmchar.base);
  ::google::protobuf::internal::InitSCC(&scc_info_String.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StringCharOrQuote.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StringChar.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Ident.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Num.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UrlChar.base);
  ::google::protobuf::internal::InitSCC(&scc_info_W.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UnrepeatedW.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Nl.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Length.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Angle.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Time.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Freq.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Uri.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FunctionToken.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StyleSheet.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CharsetDeclaration.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AtRuleOrRuleset.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BinarySupportsCondition.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Viewport.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ViewportPropertyAndValue.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ViewportProperty.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ViewportValue.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Import.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MediaQueryList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MediaQuery.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MediaQueryPartTwo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MediaConditionWithoutOr.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MediaType.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MediaAnd.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MediaFeature.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MfPlain.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MfBool.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MfName.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MfValue.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Namespace.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NamespacePrefix.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Media.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Page.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DeclarationList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PseudoPage.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FontFace.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Operator.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UnaryOperator.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Property.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Ruleset.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SelectorList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Attr.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Selector.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Pseudo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Declaration.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PropertyAndValue.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Expr.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Hexcolor.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HexcolorThree.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Input.base);
}

::google::protobuf::Metadata file_level_metadata[72];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[32];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Unicode, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Unicode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Unicode, ascii_value_1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Unicode, ascii_value_2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Unicode, ascii_value_3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Unicode, ascii_value_4_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Unicode, ascii_value_5_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Unicode, ascii_value_6_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Unicode, unrepeated_w_),
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Escape, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Escape, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Escape, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::css_proto_converter::EscapeDefaultTypeInternal, unicode_),
  offsetof(::css_proto_converter::EscapeDefaultTypeInternal, ascii_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Escape, rhs_),
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Nmstart, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Nmstart, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Nmstart, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::css_proto_converter::NmstartDefaultTypeInternal, ascii_value_),
  offsetof(::css_proto_converter::NmstartDefaultTypeInternal, escape_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Nmstart, rhs_),
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Nmchar, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Nmchar, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Nmchar, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::css_proto_converter::NmcharDefaultTypeInternal, ascii_value_),
  offsetof(::css_proto_converter::NmcharDefaultTypeInternal, escape_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Nmchar, rhs_),
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::String, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::String, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::String, use_single_quotes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::String, string_char_quotes_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::StringCharOrQuote, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::StringCharOrQuote, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::StringCharOrQuote, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::css_proto_converter::StringCharOrQuoteDefaultTypeInternal, string_char_),
  offsetof(::css_proto_converter::StringCharOrQuoteDefaultTypeInternal, quote_char_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::StringCharOrQuote, rhs_),
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::StringChar, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::StringChar, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::StringChar, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::css_proto_converter::StringCharDefaultTypeInternal, url_char_),
  offsetof(::css_proto_converter::StringCharDefaultTypeInternal, space_),
  offsetof(::css_proto_converter::StringCharDefaultTypeInternal, nl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::StringChar, rhs_),
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Ident, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Ident, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Ident, starting_minus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Ident, nmstart_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Ident, nmchars_),
  1,
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Num, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Num, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Num, signed_int_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Num, float_value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::UrlChar, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::UrlChar, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::UrlChar, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::css_proto_converter::UrlCharDefaultTypeInternal, ascii_value_),
  offsetof(::css_proto_converter::UrlCharDefaultTypeInternal, escape_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::UrlChar, rhs_),
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::W, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::W, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::W, unrepeated_w_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::UnrepeatedW, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::UnrepeatedW, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::UnrepeatedW, ascii_value_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Nl, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Nl, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Nl, newline_kind_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Length, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Length, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Length, num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Length, unit_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Angle, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Angle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Angle, num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Angle, unit_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Time, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Time, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Time, num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Time, unit_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Freq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Freq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Freq, num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Freq, unit_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Uri, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Uri, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::FunctionToken, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::FunctionToken, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::FunctionToken, ident_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::StyleSheet, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::StyleSheet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::StyleSheet, charset_declaration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::StyleSheet, imports_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::StyleSheet, namespaces_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::StyleSheet, nested_at_rules_),
  0,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::CharsetDeclaration, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::CharsetDeclaration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::CharsetDeclaration, encoding_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::NestedAtRule, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::NestedAtRule, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::NestedAtRule, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::css_proto_converter::NestedAtRuleDefaultTypeInternal, ruleset_),
  offsetof(::css_proto_converter::NestedAtRuleDefaultTypeInternal, media_),
  offsetof(::css_proto_converter::NestedAtRuleDefaultTypeInternal, page_),
  offsetof(::css_proto_converter::NestedAtRuleDefaultTypeInternal, font_face_),
  offsetof(::css_proto_converter::NestedAtRuleDefaultTypeInternal, viewport_),
  offsetof(::css_proto_converter::NestedAtRuleDefaultTypeInternal, supports_rule_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::NestedAtRule, rhs_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::SupportsRule, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::SupportsRule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::SupportsRule, supports_condition_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::SupportsRule, at_rule_or_rulesets_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::AtRuleOrRulesets, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::AtRuleOrRulesets, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::AtRuleOrRulesets, first_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::AtRuleOrRulesets, laters_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::AtRuleOrRuleset, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::AtRuleOrRuleset, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::AtRuleOrRuleset, ruleset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::AtRuleOrRuleset, at_rule_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::SupportsCondition, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::SupportsCondition, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::SupportsCondition, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::SupportsCondition, property_and_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::SupportsCondition, not_condition_),
  offsetof(::css_proto_converter::SupportsConditionDefaultTypeInternal, and_supports_condition_),
  offsetof(::css_proto_converter::SupportsConditionDefaultTypeInternal, or_supports_condition_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::SupportsCondition, rhs_),
  0,
  1,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::BinarySupportsCondition, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::BinarySupportsCondition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::BinarySupportsCondition, condition_1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::BinarySupportsCondition, condition_2_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Viewport, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Viewport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Viewport, properties_and_values_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::ViewportPropertyAndValue, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::ViewportPropertyAndValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::ViewportPropertyAndValue, property_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::ViewportPropertyAndValue, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::ViewportProperty, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::ViewportProperty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::ViewportProperty, id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::ViewportValue, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::ViewportValue, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::ViewportValue, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::ViewportValue, value_id_),
  offsetof(::css_proto_converter::ViewportValueDefaultTypeInternal, length_),
  offsetof(::css_proto_converter::ViewportValueDefaultTypeInternal, num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::ViewportValue, rhs_),
  0,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Import, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Import, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Import, src_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Import, media_query_list_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::MediaQueryList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::MediaQueryList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::MediaQueryList, media_queries_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::MediaQuery, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::MediaQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::MediaQuery, media_condition_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::MediaQuery, media_query_part_two_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::MediaQueryPartTwo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::MediaQueryPartTwo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::MediaQueryPartTwo, not_or_only_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::MediaQueryPartTwo, media_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::MediaQueryPartTwo, media_condition_without_or_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::MediaConditionWithoutOr, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::MediaConditionWithoutOr, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::MediaConditionWithoutOr, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::MediaConditionWithoutOr, media_not_),
  offsetof(::css_proto_converter::MediaConditionWithoutOrDefaultTypeInternal, media_and_),
  offsetof(::css_proto_converter::MediaConditionWithoutOrDefaultTypeInternal, media_in_parens_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::MediaConditionWithoutOr, rhs_),
  0,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::MediaCondition, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::MediaCondition, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::MediaCondition, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::MediaCondition, media_and_),
  offsetof(::css_proto_converter::MediaConditionDefaultTypeInternal, media_not_),
  offsetof(::css_proto_converter::MediaConditionDefaultTypeInternal, media_or_),
  offsetof(::css_proto_converter::MediaConditionDefaultTypeInternal, media_in_parens_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::MediaCondition, rhs_),
  0,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::MediaType, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::MediaType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::MediaType, value_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::MediaNot, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::MediaNot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::MediaNot, media_in_parens_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::MediaAnd, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::MediaAnd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::MediaAnd, first_media_in_parens_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::MediaAnd, second_media_in_parens_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::MediaAnd, media_in_parens_list_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::MediaOr, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::MediaOr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::MediaOr, first_media_in_parens_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::MediaOr, second_media_in_parens_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::MediaOr, media_in_parens_list_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::MediaInParens, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::MediaInParens, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::MediaInParens, media_feature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::MediaInParens, media_condition_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::MediaFeature, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::MediaFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::MediaFeature, mf_plain_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::MediaFeature, mf_bool_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::MfPlain, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::MfPlain, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::MfPlain, property_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::MfPlain, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::MfBool, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::MfBool, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::MfBool, mf_name_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::MfName, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::MfName, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::MfName, id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::MfValue, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::MfValue, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::MfValue, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::MfValue, num_),
  offsetof(::css_proto_converter::MfValueDefaultTypeInternal, length_),
  offsetof(::css_proto_converter::MfValueDefaultTypeInternal, ident_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::MfValue, rhs_),
  0,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Namespace, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Namespace, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Namespace, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Namespace, namespace_prefix_),
  offsetof(::css_proto_converter::NamespaceDefaultTypeInternal, string_),
  offsetof(::css_proto_converter::NamespaceDefaultTypeInternal, uri_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Namespace, rhs_),
  0,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::NamespacePrefix, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::NamespacePrefix, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::NamespacePrefix, ident_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Media, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Media, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Media, media_query_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Media, rulesets_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Page, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Page, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Page, ident_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Page, pseudo_page_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Page, declaration_list_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::DeclarationList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::DeclarationList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::DeclarationList, first_declaration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::DeclarationList, later_declarations_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::PseudoPage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::PseudoPage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::PseudoPage, ident_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::FontFace, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::FontFace, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Operator, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Operator, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Operator, ascii_value_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::UnaryOperator, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::UnaryOperator, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::UnaryOperator, ascii_value_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Property, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Property, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Property, name_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Ruleset, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Ruleset, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Ruleset, selector_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Ruleset, declaration_list_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::SelectorList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::SelectorList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::SelectorList, first_selector_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::SelectorList, later_selectors_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Attr, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Attr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Attr, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Attr, attr_i_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Selector, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Selector, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Selector, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Selector, attr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Selector, pseudo_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Selector, pseudo_value_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Selector, combinator_),
  1,
  0,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Pseudo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Pseudo, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Pseudo, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::css_proto_converter::PseudoDefaultTypeInternal, ident_1_),
  offsetof(::css_proto_converter::PseudoDefaultTypeInternal, function_token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Pseudo, ident_2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Pseudo, rhs_),
  ~0u,
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Declaration, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Declaration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Declaration, property_and_value_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::PropertyAndValue, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::PropertyAndValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::PropertyAndValue, property_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::PropertyAndValue, expr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::PropertyAndValue, prio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::PropertyAndValue, value_id_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Expr, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Expr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Expr, term_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Expr, operator_terms_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::OperatorTerm, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::OperatorTerm, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::OperatorTerm, _operator_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::OperatorTerm, term_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Term, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Term, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Term, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Term, unary_operator_),
  offsetof(::css_proto_converter::TermDefaultTypeInternal, term_part_),
  offsetof(::css_proto_converter::TermDefaultTypeInternal, string_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Term, ident_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Term, uri_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Term, hexcolor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Term, rhs_),
  0,
  ~0u,
  ~0u,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::TermPart, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::TermPart, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::TermPart, number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::TermPart, percentage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::TermPart, length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::TermPart, ems_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::TermPart, exs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::TermPart, angle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::TermPart, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::TermPart, freq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::TermPart, function_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Function, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Function, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Function, function_token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Function, expr_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Hexcolor, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Hexcolor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Hexcolor, first_three_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Hexcolor, last_three_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::HexcolorThree, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::HexcolorThree, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::HexcolorThree, ascii_value_1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::HexcolorThree, ascii_value_2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::HexcolorThree, ascii_value_3_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Input, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Input, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Input, css_parser_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Input, defer_property_parsing_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Input, style_sheet_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Input, is_live_profile_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::css_proto_converter::Input, secure_context_mode_),
  1,
  2,
  0,
  3,
  4,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 12, sizeof(::css_proto_converter::Unicode)},
  { 19, 27, sizeof(::css_proto_converter::Escape)},
  { 29, 37, sizeof(::css_proto_converter::Nmstart)},
  { 39, 47, sizeof(::css_proto_converter::Nmchar)},
  { 49, 56, sizeof(::css_proto_converter::String)},
  { 58, 66, sizeof(::css_proto_converter::StringCharOrQuote)},
  { 68, 77, sizeof(::css_proto_converter::StringChar)},
  { 80, 88, sizeof(::css_proto_converter::Ident)},
  { 91, 98, sizeof(::css_proto_converter::Num)},
  { 100, 108, sizeof(::css_proto_converter::UrlChar)},
  { 110, 116, sizeof(::css_proto_converter::W)},
  { 117, 123, sizeof(::css_proto_converter::UnrepeatedW)},
  { 124, 130, sizeof(::css_proto_converter::Nl)},
  { 131, 138, sizeof(::css_proto_converter::Length)},
  { 140, 147, sizeof(::css_proto_converter::Angle)},
  { 149, 156, sizeof(::css_proto_converter::Time)},
  { 158, 165, sizeof(::css_proto_converter::Freq)},
  { 167, 172, sizeof(::css_proto_converter::Uri)},
  { 172, 178, sizeof(::css_proto_converter::FunctionToken)},
  { 179, 188, sizeof(::css_proto_converter::StyleSheet)},
  { 192, 198, sizeof(::css_proto_converter::CharsetDeclaration)},
  { 199, 211, sizeof(::css_proto_converter::NestedAtRule)},
  { 217, 224, sizeof(::css_proto_converter::SupportsRule)},
  { 226, 233, sizeof(::css_proto_converter::AtRuleOrRulesets)},
  { 235, 242, sizeof(::css_proto_converter::AtRuleOrRuleset)},
  { 244, 254, sizeof(::css_proto_converter::SupportsCondition)},
  { 258, 265, sizeof(::css_proto_converter::BinarySupportsCondition)},
  { 267, 273, sizeof(::css_proto_converter::Viewport)},
  { 274, 281, sizeof(::css_proto_converter::ViewportPropertyAndValue)},
  { 283, 289, sizeof(::css_proto_converter::ViewportProperty)},
  { 290, 299, sizeof(::css_proto_converter::ViewportValue)},
  { 302, 309, sizeof(::css_proto_converter::Import)},
  { 311, 317, sizeof(::css_proto_converter::MediaQueryList)},
  { 318, 325, sizeof(::css_proto_converter::MediaQuery)},
  { 327, 335, sizeof(::css_proto_converter::MediaQueryPartTwo)},
  { 338, 347, sizeof(::css_proto_converter::MediaConditionWithoutOr)},
  { 350, 360, sizeof(::css_proto_converter::MediaCondition)},
  { 364, 370, sizeof(::css_proto_converter::MediaType)},
  { 371, 377, sizeof(::css_proto_converter::MediaNot)},
  { 378, 386, sizeof(::css_proto_converter::MediaAnd)},
  { 389, 397, sizeof(::css_proto_converter::MediaOr)},
  { 400, 407, sizeof(::css_proto_converter::MediaInParens)},
  { 409, 416, sizeof(::css_proto_converter::MediaFeature)},
  { 418, 425, sizeof(::css_proto_converter::MfPlain)},
  { 427, 433, sizeof(::css_proto_converter::MfBool)},
  { 434, 440, sizeof(::css_proto_converter::MfName)},
  { 441, 450, sizeof(::css_proto_converter::MfValue)},
  { 453, 462, sizeof(::css_proto_converter::Namespace)},
  { 465, 471, sizeof(::css_proto_converter::NamespacePrefix)},
  { 472, 479, sizeof(::css_proto_converter::Media)},
  { 481, 489, sizeof(::css_proto_converter::Page)},
  { 492, 499, sizeof(::css_proto_converter::DeclarationList)},
  { 501, 507, sizeof(::css_proto_converter::PseudoPage)},
  { 508, 513, sizeof(::css_proto_converter::FontFace)},
  { 513, 519, sizeof(::css_proto_converter::Operator)},
  { 520, 526, sizeof(::css_proto_converter::UnaryOperator)},
  { 527, 533, sizeof(::css_proto_converter::Property)},
  { 534, 541, sizeof(::css_proto_converter::Ruleset)},
  { 543, 550, sizeof(::css_proto_converter::SelectorList)},
  { 552, 559, sizeof(::css_proto_converter::Attr)},
  { 561, 571, sizeof(::css_proto_converter::Selector)},
  { 576, 585, sizeof(::css_proto_converter::Pseudo)},
  { 588, 594, sizeof(::css_proto_converter::Declaration)},
  { 595, 604, sizeof(::css_proto_converter::PropertyAndValue)},
  { 608, 615, sizeof(::css_proto_converter::Expr)},
  { 617, 624, sizeof(::css_proto_converter::OperatorTerm)},
  { 626, 638, sizeof(::css_proto_converter::Term)},
  { 644, 658, sizeof(::css_proto_converter::TermPart)},
  { 667, 674, sizeof(::css_proto_converter::Function)},
  { 676, 683, sizeof(::css_proto_converter::Hexcolor)},
  { 685, 693, sizeof(::css_proto_converter::HexcolorThree)},
  { 696, 706, sizeof(::css_proto_converter::Input)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::css_proto_converter::_Unicode_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::css_proto_converter::_Escape_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::css_proto_converter::_Nmstart_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::css_proto_converter::_Nmchar_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::css_proto_converter::_String_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::css_proto_converter::_StringCharOrQuote_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::css_proto_converter::_StringChar_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::css_proto_converter::_Ident_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::css_proto_converter::_Num_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::css_proto_converter::_UrlChar_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::css_proto_converter::_W_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::css_proto_converter::_UnrepeatedW_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::css_proto_converter::_Nl_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::css_proto_converter::_Length_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::css_proto_converter::_Angle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::css_proto_converter::_Time_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::css_proto_converter::_Freq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::css_proto_converter::_Uri_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::css_proto_converter::_FunctionToken_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::css_proto_converter::_StyleSheet_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::css_proto_converter::_CharsetDeclaration_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::css_proto_converter::_NestedAtRule_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::css_proto_converter::_SupportsRule_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::css_proto_converter::_AtRuleOrRulesets_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::css_proto_converter::_AtRuleOrRuleset_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::css_proto_converter::_SupportsCondition_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::css_proto_converter::_BinarySupportsCondition_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::css_proto_converter::_Viewport_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::css_proto_converter::_ViewportPropertyAndValue_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::css_proto_converter::_ViewportProperty_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::css_proto_converter::_ViewportValue_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::css_proto_converter::_Import_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::css_proto_converter::_MediaQueryList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::css_proto_converter::_MediaQuery_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::css_proto_converter::_MediaQueryPartTwo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::css_proto_converter::_MediaConditionWithoutOr_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::css_proto_converter::_MediaCondition_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::css_proto_converter::_MediaType_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::css_proto_converter::_MediaNot_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::css_proto_converter::_MediaAnd_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::css_proto_converter::_MediaOr_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::css_proto_converter::_MediaInParens_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::css_proto_converter::_MediaFeature_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::css_proto_converter::_MfPlain_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::css_proto_converter::_MfBool_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::css_proto_converter::_MfName_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::css_proto_converter::_MfValue_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::css_proto_converter::_Namespace_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::css_proto_converter::_NamespacePrefix_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::css_proto_converter::_Media_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::css_proto_converter::_Page_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::css_proto_converter::_DeclarationList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::css_proto_converter::_PseudoPage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::css_proto_converter::_FontFace_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::css_proto_converter::_Operator_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::css_proto_converter::_UnaryOperator_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::css_proto_converter::_Property_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::css_proto_converter::_Ruleset_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::css_proto_converter::_SelectorList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::css_proto_converter::_Attr_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::css_proto_converter::_Selector_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::css_proto_converter::_Pseudo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::css_proto_converter::_Declaration_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::css_proto_converter::_PropertyAndValue_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::css_proto_converter::_Expr_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::css_proto_converter::_OperatorTerm_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::css_proto_converter::_Term_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::css_proto_converter::_TermPart_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::css_proto_converter::_Function_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::css_proto_converter::_Hexcolor_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::css_proto_converter::_HexcolorThree_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::css_proto_converter::_Input_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "css.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 72);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\tcss.proto\022\023css_proto_converter\"\333\002\n\007Uni"
      "code\022-\n\rascii_value_1\030\001 \002(\0162\026.css_proto_"
      "converter.H\022-\n\rascii_value_2\030\002 \001(\0162\026.css"
      "_proto_converter.H\022-\n\rascii_value_3\030\003 \001("
      "\0162\026.css_proto_converter.H\022-\n\rascii_value"
      "_4\030\004 \001(\0162\026.css_proto_converter.H\022-\n\rasci"
      "i_value_5\030\005 \001(\0162\026.css_proto_converter.H\022"
      "-\n\rascii_value_6\030\006 \001(\0162\026.css_proto_conve"
      "rter.H\0226\n\014unrepeated_w\030\007 \001(\0132 .css_proto"
      "_converter.UnrepeatedW\"\355\n\n\006Escape\022/\n\007uni"
      "code\030\001 \001(\0132\034.css_proto_converter.Unicode"
      "H\000\022=\n\013ascii_value\030\002 \001(\0162&.css_proto_conv"
      "erter.Escape.AsciiValueH\000\"\353\t\n\nAsciiValue"
      "\022\t\n\005SPACE\020 \022\025\n\021EXCLAMATION_POINT\020!\022\020\n\014DO"
      "UBLE_QUOTE\020\"\022\010\n\004HASH\020#\022\n\n\006DOLLAR\020$\022\013\n\007PE"
      "RCENT\020%\022\r\n\tAMPERSAND\020&\022\016\n\nAPOSTROPHE\020\'\022\016"
      "\n\nOPEN_PAREN\020(\022\017\n\013CLOSE_PAREN\020)\022\010\n\004STAR\020"
      "*\022\010\n\004PLUS\020+\022\t\n\005COMMA\020,\022\t\n\005MINUS\020-\022\007\n\003DOT"
      "\020.\022\t\n\005SLASH\020/\022\010\n\004ZERO\0200\022\007\n\003ONE\0201\022\007\n\003TWO\020"
      "2\022\t\n\005THREE\0203\022\010\n\004FOUR\0204\022\010\n\004FIVE\0205\022\007\n\003SIX\020"
      "6\022\t\n\005SEVEN\0207\022\t\n\005EIGHT\0208\022\010\n\004NINE\0209\022\t\n\005COL"
      "ON\020:\022\016\n\nSEMI_COLON\020;\022\r\n\tLESS_THAN\020<\022\t\n\005E"
      "QUAL\020=\022\020\n\014GREATER_THAN\020>\022\014\n\010QUESTION\020\?\022\013"
      "\n\007AT_SIGN\020@\022\013\n\007A_UPPER\020A\022\013\n\007B_UPPER\020B\022\013\n"
      "\007C_UPPER\020C\022\013\n\007D_UPPER\020D\022\013\n\007E_UPPER\020E\022\013\n\007"
      "F_UPPER\020F\022\013\n\007G_UPPER\020G\022\013\n\007H_UPPER\020H\022\013\n\007I"
      "_UPPER\020I\022\013\n\007J_UPPER\020J\022\013\n\007K_UPPER\020K\022\013\n\007L_"
      "UPPER\020L\022\013\n\007M_UPPER\020M\022\013\n\007N_UPPER\020N\022\013\n\007O_U"
      "PPER\020O\022\013\n\007P_UPPER\020P\022\013\n\007Q_UPPER\020Q\022\013\n\007R_UP"
      "PER\020R\022\013\n\007S_UPPER\020S\022\013\n\007T_UPPER\020T\022\013\n\007U_UPP"
      "ER\020U\022\013\n\007V_UPPER\020V\022\013\n\007W_UPPER\020W\022\013\n\007X_UPPE"
      "R\020X\022\013\n\007Y_UPPER\020Y\022\013\n\007Z_UPPER\020Z\022\020\n\014OPEN_BR"
      "ACKET\020[\022\r\n\tBACKSLASH\020\\\022\021\n\rCLOSE_BRACKET\020"
      "]\022\t\n\005CARET\020^\022\016\n\nUNDERSCORE\020_\022\014\n\010BACKTICK"
      "\020`\022\013\n\007A_LOWER\020a\022\013\n\007B_LOWER\020b\022\013\n\007C_LOWER\020"
      "c\022\013\n\007D_LOWER\020d\022\013\n\007E_LOWER\020e\022\013\n\007F_LOWER\020f"
      "\022\013\n\007G_LOWER\020g\022\013\n\007H_LOWER\020h\022\013\n\007I_LOWER\020i\022"
      "\013\n\007J_LOWER\020j\022\013\n\007K_LOWER\020k\022\013\n\007L_LOWER\020l\022\013"
      "\n\007M_LOWER\020m\022\013\n\007N_LOWER\020n\022\013\n\007O_LOWER\020o\022\013\n"
      "\007P_LOWER\020p\022\013\n\007Q_LOWER\020q\022\013\n\007R_LOWER\020r\022\013\n\007"
      "S_LOWER\020s\022\013\n\007T_LOWER\020t\022\013\n\007U_LOWER\020u\022\013\n\007V"
      "_LOWER\020v\022\013\n\007W_LOWER\020w\022\013\n\007X_LOWER\020x\022\013\n\007Y_"
      "LOWER\020y\022\013\n\007Z_LOWER\020z\022\024\n\020OPEN_CURLY_BRACE"
      "\020{\022\010\n\004PIPE\020|\022\026\n\022CLOSE_CURLY_BRACE_\020}\022\t\n\005"
      "TILDE\020~B\005\n\003rhs\"\262\006\n\007Nmstart\022>\n\013ascii_valu"
      "e\030\001 \001(\0162\'.css_proto_converter.Nmstart.As"
      "ciiValueH\000\022-\n\006escape\030\002 \001(\0132\033.css_proto_c"
      "onverter.EscapeH\000\"\260\005\n\nAsciiValue\022\013\n\007A_UP"
      "PER\020A\022\013\n\007B_UPPER\020B\022\013\n\007C_UPPER\020C\022\013\n\007D_UPP"
      "ER\020D\022\013\n\007E_UPPER\020E\022\013\n\007F_UPPER\020F\022\013\n\007G_UPPE"
      "R\020G\022\013\n\007H_UPPER\020H\022\013\n\007I_UPPER\020I\022\013\n\007J_UPPER"
      "\020J\022\013\n\007K_UPPER\020K\022\013\n\007L_UPPER\020L\022\013\n\007M_UPPER\020"
      "M\022\013\n\007N_UPPER\020N\022\013\n\007O_UPPER\020O\022\013\n\007P_UPPER\020P"
      "\022\013\n\007Q_UPPER\020Q\022\013\n\007R_UPPER\020R\022\013\n\007S_UPPER\020S\022"
      "\013\n\007T_UPPER\020T\022\013\n\007U_UPPER\020U\022\013\n\007V_UPPER\020V\022\013"
      "\n\007W_UPPER\020W\022\013\n\007X_UPPER\020X\022\013\n\007Y_UPPER\020Y\022\013\n"
      "\007Z_UPPER\020Z\022\013\n\007A_LOWER\020a\022\013\n\007B_LOWER\020b\022\013\n\007"
      "C_LOWER\020c\022\013\n\007D_LOWER\020d\022\013\n\007E_LOWER\020e\022\013\n\007F"
      "_LOWER\020f\022\013\n\007G_LOWER\020g\022\013\n\007H_LOWER\020h\022\013\n\007I_"
      "LOWER\020i\022\013\n\007J_LOWER\020j\022\013\n\007K_LOWER\020k\022\013\n\007L_L"
      "OWER\020l\022\013\n\007M_LOWER\020m\022\013\n\007N_LOWER\020n\022\013\n\007O_LO"
      "WER\020o\022\013\n\007P_LOWER\020p\022\013\n\007Q_LOWER\020q\022\013\n\007R_LOW"
      "ER\020r\022\013\n\007S_LOWER\020s\022\013\n\007T_LOWER\020t\022\013\n\007U_LOWE"
      "R\020u\022\013\n\007V_LOWER\020v\022\013\n\007W_LOWER\020w\022\013\n\007X_LOWER"
      "\020x\022\013\n\007Y_LOWER\020y\022\013\n\007Z_LOWER\020zB\005\n\003rhs\"\237\007\n\006"
      "Nmchar\022=\n\013ascii_value\030\001 \001(\0162&.css_proto_"
      "converter.Nmchar.AsciiValueH\000\022-\n\006escape\030"
      "\002 \001(\0132\033.css_proto_converter.EscapeH\000\"\237\006\n"
      "\nAsciiValue\022\t\n\005MINUS\020-\022\010\n\004ZERO\0200\022\007\n\003ONE\020"
      "1\022\007\n\003TWO\0202\022\t\n\005THREE\0203\022\010\n\004FOUR\0204\022\010\n\004FIVE\020"
      "5\022\007\n\003SIX\0206\022\t\n\005SEVEN\0207\022\t\n\005EIGHT\0208\022\010\n\004NINE"
      "\0209\022\013\n\007A_UPPER\020A\022\013\n\007B_UPPER\020B\022\013\n\007C_UPPER\020"
      "C\022\013\n\007D_UPPER\020D\022\013\n\007E_UPPER\020E\022\013\n\007F_UPPER\020F"
      "\022\013\n\007G_UPPER\020G\022\013\n\007H_UPPER\020H\022\013\n\007I_UPPER\020I\022"
      "\013\n\007J_UPPER\020J\022\013\n\007K_UPPER\020K\022\013\n\007L_UPPER\020L\022\013"
      "\n\007M_UPPER\020M\022\013\n\007N_UPPER\020N\022\013\n\007O_UPPER\020O\022\013\n"
      "\007P_UPPER\020P\022\013\n\007Q_UPPER\020Q\022\013\n\007R_UPPER\020R\022\013\n\007"
      "S_UPPER\020S\022\013\n\007T_UPPER\020T\022\013\n\007U_UPPER\020U\022\013\n\007V"
      "_UPPER\020V\022\013\n\007W_UPPER\020W\022\013\n\007X_UPPER\020X\022\013\n\007Y_"
      "UPPER\020Y\022\013\n\007Z_UPPER\020Z\022\013\n\007A_LOWER\020a\022\013\n\007B_L"
      "OWER\020b\022\013\n\007C_LOWER\020c\022\013\n\007D_LOWER\020d\022\013\n\007E_LO"
      "WER\020e\022\013\n\007F_LOWER\020f\022\013\n\007G_LOWER\020g\022\013\n\007H_LOW"
      "ER\020h\022\013\n\007I_LOWER\020i\022\013\n\007J_LOWER\020j\022\013\n\007K_LOWE"
      "R\020k\022\013\n\007L_LOWER\020l\022\013\n\007M_LOWER\020m\022\013\n\007N_LOWER"
      "\020n\022\013\n\007O_LOWER\020o\022\013\n\007P_LOWER\020p\022\013\n\007Q_LOWER\020"
      "q\022\013\n\007R_LOWER\020r\022\013\n\007S_LOWER\020s\022\013\n\007T_LOWER\020t"
      "\022\013\n\007U_LOWER\020u\022\013\n\007V_LOWER\020v\022\013\n\007W_LOWER\020w\022"
      "\013\n\007X_LOWER\020x\022\013\n\007Y_LOWER\020y\022\013\n\007Z_LOWER\020zB\005"
      "\n\003rhs\"g\n\006String\022\031\n\021use_single_quotes\030\001 \002"
      "(\010\022B\n\022string_char_quotes\030\002 \003(\0132&.css_pro"
      "to_converter.StringCharOrQuote\"\276\001\n\021Strin"
      "gCharOrQuote\0226\n\013string_char\030\002 \001(\0132\037.css_"
      "proto_converter.StringCharH\000\022F\n\nquote_ch"
      "ar\030\001 \001(\01620.css_proto_converter.StringCha"
      "rOrQuote.QuoteCharH\000\"\"\n\tQuoteChar\022\t\n\005UNS"
      "ET\020\000\022\n\n\006IS_SET\020\001B\005\n\003rhs\"\304\001\n\nStringChar\0220"
      "\n\010url_char\030\001 \001(\0132\034.css_proto_converter.U"
      "rlCharH\000\0226\n\005space\030\002 \001(\0162%.css_proto_conv"
      "erter.StringChar.SpaceH\000\022%\n\002nl\030\003 \001(\0132\027.c"
      "ss_proto_converter.NlH\000\"\036\n\005Space\022\t\n\005UNSE"
      "T\020\000\022\n\n\006IS_SET\020\001B\005\n\003rhs\"\203\001\n\005Ident\022\035\n\016star"
      "ting_minus\030\001 \001(\010:\005false\022-\n\007nmstart\030\002 \002(\013"
      "2\034.css_proto_converter.Nmstart\022,\n\007nmchar"
      "s\030\003 \003(\0132\033.css_proto_converter.Nmchar\"4\n\003"
      "Num\022\030\n\020signed_int_value\030\001 \002(\022\022\023\n\013float_v"
      "alue\030\002 \001(\002\"\341\n\n\007UrlChar\022>\n\013ascii_value\030\001 "
      "\001(\0162\'.css_proto_converter.UrlChar.AsciiV"
      "alueH\000\022-\n\006escape\030\002 \001(\0132\033.css_proto_conve"
      "rter.EscapeH\000\"\337\t\n\nAsciiValue\022\007\n\003NUL\020\000\022\006\n"
      "\002HT\020\t\022\025\n\021EXCLAMATION_POINT\020!\022\010\n\004HASH\020#\022\n"
      "\n\006DOLLAR\020$\022\013\n\007PERCENT\020%\022\r\n\tAMPERSAND\020&\022\016"
      "\n\nAPOSTROPHE\020\'\022\016\n\nOPEN_PAREN\020(\022\017\n\013CLOSE_"
      "PAREN\020)\022\010\n\004STAR\020*\022\010\n\004PLUS\020+\022\t\n\005COMMA\020,\022\t"
      "\n\005MINUS\020-\022\007\n\003DOT\020.\022\t\n\005SLASH\020/\022\010\n\004ZERO\0200\022"
      "\007\n\003ONE\0201\022\007\n\003TWO\0202\022\t\n\005THREE\0203\022\010\n\004FOUR\0204\022\010"
      "\n\004FIVE\0205\022\007\n\003SIX\0206\022\t\n\005SEVEN\0207\022\t\n\005EIGHT\0208\022"
      "\010\n\004NINE\0209\022\t\n\005COLON\020:\022\016\n\nSEMI_COLON\020;\022\r\n\t"
      "LESS_THAN\020<\022\t\n\005EQUAL\020=\022\020\n\014GREATER_THAN\020>"
      "\022\014\n\010QUESTION\020\?\022\013\n\007AT_SIGN\020@\022\013\n\007A_UPPER\020A"
      "\022\013\n\007B_UPPER\020B\022\013\n\007C_UPPER\020C\022\013\n\007D_UPPER\020D\022"
      "\013\n\007E_UPPER\020E\022\013\n\007F_UPPER\020F\022\013\n\007G_UPPER\020G\022\013"
      "\n\007H_UPPER\020H\022\013\n\007I_UPPER\020I\022\013\n\007J_UPPER\020J\022\013\n"
      "\007K_UPPER\020K\022\013\n\007L_UPPER\020L\022\013\n\007M_UPPER\020M\022\013\n\007"
      "N_UPPER\020N\022\013\n\007O_UPPER\020O\022\013\n\007P_UPPER\020P\022\013\n\007Q"
      "_UPPER\020Q\022\013\n\007R_UPPER\020R\022\013\n\007S_UPPER\020S\022\013\n\007T_"
      "UPPER\020T\022\013\n\007U_UPPER\020U\022\013\n\007V_UPPER\020V\022\013\n\007W_U"
      "PPER\020W\022\013\n\007X_UPPER\020X\022\013\n\007Y_UPPER\020Y\022\013\n\007Z_UP"
      "PER\020Z\022\020\n\014OPEN_BRACKET\020[\022\r\n\tBACKSLASH\020\\\022\021"
      "\n\rCLOSE_BRACKET\020]\022\t\n\005CARET\020^\022\016\n\nUNDERSCO"
      "RE\020_\022\014\n\010BACKTICK\020`\022\013\n\007A_LOWER\020a\022\013\n\007B_LOW"
      "ER\020b\022\013\n\007C_LOWER\020c\022\013\n\007D_LOWER\020d\022\013\n\007E_LOWE"
      "R\020e\022\013\n\007F_LOWER\020f\022\013\n\007G_LOWER\020g\022\013\n\007H_LOWER"
      "\020h\022\013\n\007I_LOWER\020i\022\013\n\007J_LOWER\020j\022\013\n\007K_LOWER\020"
      "k\022\013\n\007L_LOWER\020l\022\013\n\007M_LOWER\020m\022\013\n\007N_LOWER\020n"
      "\022\013\n\007O_LOWER\020o\022\013\n\007P_LOWER\020p\022\013\n\007Q_LOWER\020q\022"
      "\013\n\007R_LOWER\020r\022\013\n\007S_LOWER\020s\022\013\n\007T_LOWER\020t\022\013"
      "\n\007U_LOWER\020u\022\013\n\007V_LOWER\020v\022\013\n\007W_LOWER\020w\022\013\n"
      "\007X_LOWER\020x\022\013\n\007Y_LOWER\020y\022\013\n\007Z_LOWER\020z\022\024\n\020"
      "OPEN_CURLY_BRACE\020{\022\010\n\004PIPE\020|\022\026\n\022CLOSE_CU"
      "RLY_BRACE_\020}\022\t\n\005TILDE\020~B\005\n\003rhs\";\n\001W\0226\n\014u"
      "nrepeated_w\030\001 \003(\0132 .css_proto_converter."
      "UnrepeatedW\"\210\001\n\013UnrepeatedW\022@\n\013ascii_val"
      "ue\030\001 \002(\0162+.css_proto_converter.Unrepeate"
      "dW.AsciiValue\"7\n\nAsciiValue\022\006\n\002HT\020\t\022\006\n\002L"
      "F\020\n\022\006\n\002FF\020\014\022\006\n\002CR\020\r\022\t\n\005SPACE\020 \"q\n\002Nl\0229\n\014"
      "newline_kind\030\001 \002(\0162#.css_proto_converter"
      ".Nl.NewlineKind\"0\n\013NewlineKind\022\006\n\002LF\020\n\022\t"
      "\n\005CR_LF\020\001\022\006\n\002CR\020\r\022\006\n\002FF\020\014\"\227\001\n\006Length\022%\n\003"
      "num\030\001 \002(\0132\030.css_proto_converter.Num\022.\n\004u"
      "nit\030\002 \002(\0162 .css_proto_converter.Length.U"
      "nit\"6\n\004Unit\022\006\n\002PX\020\001\022\006\n\002CM\020\002\022\006\n\002MM\020\003\022\006\n\002I"
      "N\020\004\022\006\n\002PT\020\005\022\006\n\002PC\020\006\"\201\001\n\005Angle\022%\n\003num\030\001 \002"
      "(\0132\030.css_proto_converter.Num\022-\n\004unit\030\002 \002"
      "(\0162\037.css_proto_converter.Angle.Unit\"\"\n\004U"
      "nit\022\007\n\003DEG\020\001\022\007\n\003RAD\020\002\022\010\n\004GRAD\020\003\"r\n\004Time\022"
      "%\n\003num\030\001 \002(\0132\030.css_proto_converter.Num\022,"
      "\n\004unit\030\002 \002(\0162\036.css_proto_converter.Time."
      "Unit\"\025\n\004Unit\022\006\n\002MS\020\001\022\005\n\001S\020\002\"u\n\004Freq\022%\n\003n"
      "um\030\001 \002(\0132\030.css_proto_converter.Num\022,\n\004un"
      "it\030\002 \002(\0162\036.css_proto_converter.Freq.Unit"
      "\"\030\n\004Unit\022\007\n\003_HZ\020\001\022\007\n\003KHZ\020\002\"\005\n\003Uri\":\n\rFun"
      "ctionToken\022)\n\005ident\030\001 \002(\0132\032.css_proto_co"
      "nverter.Ident\"\360\001\n\nStyleSheet\022D\n\023charset_"
      "declaration\030\001 \001(\0132\'.css_proto_converter."
      "CharsetDeclaration\022,\n\007imports\030\002 \003(\0132\033.cs"
      "s_proto_converter.Import\0222\n\nnamespaces\030\003"
      " \003(\0132\036.css_proto_converter.Namespace\022:\n\017"
      "nested_at_rules\030\004 \003(\0132!.css_proto_conver"
      "ter.NestedAtRule\"\216\001\n\022CharsetDeclaration\022"
      "G\n\013encoding_id\030\001 \002(\01622.css_proto_convert"
      "er.CharsetDeclaration.EncodingId\"/\n\nEnco"
      "dingId\022\t\n\005UTF_8\020\001\022\n\n\006UTF_16\020\002\022\n\n\006UTF_32\020"
      "\003\"\301\002\n\014NestedAtRule\022/\n\007ruleset\030\001 \001(\0132\034.cs"
      "s_proto_converter.RulesetH\000\022+\n\005media\030\002 \001"
      "(\0132\032.css_proto_converter.MediaH\000\022)\n\004page"
      "\030\003 \001(\0132\031.css_proto_converter.PageH\000\0222\n\tf"
      "ont_face\030\004 \001(\0132\035.css_proto_converter.Fon"
      "tFaceH\000\0221\n\010viewport\030\005 \001(\0132\035.css_proto_co"
      "nverter.ViewportH\000\022:\n\rsupports_rule\030\006 \001("
      "\0132!.css_proto_converter.SupportsRuleH\000B\005"
      "\n\003rhs\"\226\001\n\014SupportsRule\022B\n\022supports_condi"
      "tion\030\001 \002(\0132&.css_proto_converter.Support"
      "sCondition\022B\n\023at_rule_or_rulesets\030\002 \003(\0132"
      "%.css_proto_converter.AtRuleOrRulesets\"}"
      "\n\020AtRuleOrRulesets\0223\n\005first\030\001 \002(\0132$.css_"
      "proto_converter.AtRuleOrRuleset\0224\n\006later"
      "s\030\002 \003(\0132$.css_proto_converter.AtRuleOrRu"
      "leset\"t\n\017AtRuleOrRuleset\022-\n\007ruleset\030\001 \002("
      "\0132\034.css_proto_converter.Ruleset\0222\n\007at_ru"
      "le\030\002 \001(\0132!.css_proto_converter.NestedAtR"
      "ule\"\223\002\n\021SupportsCondition\022A\n\022property_an"
      "d_value\030\001 \002(\0132%.css_proto_converter.Prop"
      "ertyAndValue\022\025\n\rnot_condition\030\002 \002(\010\022N\n\026a"
      "nd_supports_condition\030\003 \001(\0132,.css_proto_"
      "converter.BinarySupportsConditionH\000\022M\n\025o"
      "r_supports_condition\030\004 \001(\0132,.css_proto_c"
      "onverter.BinarySupportsConditionH\000B\005\n\003rh"
      "s\"\223\001\n\027BinarySupportsCondition\022;\n\013conditi"
      "on_1\030\001 \002(\0132&.css_proto_converter.Support"
      "sCondition\022;\n\013condition_2\030\002 \002(\0132&.css_pr"
      "oto_converter.SupportsCondition\"X\n\010Viewp"
      "ort\022L\n\025properties_and_values\030\001 \003(\0132-.css"
      "_proto_converter.ViewportPropertyAndValu"
      "e\"\206\001\n\030ViewportPropertyAndValue\0227\n\010proper"
      "ty\030\001 \002(\0132%.css_proto_converter.ViewportP"
      "roperty\0221\n\005value\030\002 \002(\0132\".css_proto_conve"
      "rter.ViewportValue\"\372\001\n\020ViewportProperty\022"
      "<\n\002id\030\001 \002(\01620.css_proto_converter.Viewpo"
      "rtProperty.PropertyId\"\247\001\n\nPropertyId\022\r\n\t"
      "MIN_WIDTH\020\001\022\r\n\tMAX_WIDTH\020\002\022\t\n\005WIDTH\020\003\022\016\n"
      "\nMIN_HEIGHT\020\004\022\016\n\nMAX_HEIGHT\020\005\022\n\n\006HEIGHT\020"
      "\006\022\010\n\004ZOOM\020\007\022\014\n\010MIN_ZOOM\020\010\022\r\n\tUSER_ZOOM\020\t"
      "\022\014\n\010MAX_ZOOM\020\n\022\017\n\013ORIENTATION\020\013\"\375\001\n\rView"
      "portValue\022<\n\010value_id\030\001 \002(\0162*.css_proto_"
      "converter.ViewportValue.ValueId\022-\n\006lengt"
      "h\030\002 \001(\0132\033.css_proto_converter.LengthH\000\022\'"
      "\n\003num\030\003 \001(\0132\030.css_proto_converter.NumH\000\""
      "O\n\007ValueId\022\r\n\tLANDSCAPE\020\001\022\014\n\010PORTRAIT\020\002\022"
      "\010\n\004AUTO\020\003\022\010\n\004ZOOM\020\004\022\t\n\005FIXED\020\005\022\010\n\004NONE\020\006"
      "B\005\n\003rhs\"\246\001\n\006Import\0221\n\006src_id\030\001 \001(\0162!.css"
      "_proto_converter.Import.SrcId\022=\n\020media_q"
      "uery_list\030\002 \001(\0132#.css_proto_converter.Me"
      "diaQueryList\"*\n\005SrcId\022\023\n\017RELATIVE_STRING"
      "\020\001\022\014\n\010FULL_URL\020\002\"H\n\016MediaQueryList\0226\n\rme"
      "dia_queries\030\001 \003(\0132\037.css_proto_converter."
      "MediaQuery\"\220\001\n\nMediaQuery\022<\n\017media_condi"
      "tion\030\001 \002(\0132#.css_proto_converter.MediaCo"
      "ndition\022D\n\024media_query_part_two\030\002 \001(\0132&."
      "css_proto_converter.MediaQueryPartTwo\"\200\002"
      "\n\021MediaQueryPartTwo\022E\n\013not_or_only\030\001 \001(\016"
      "20.css_proto_converter.MediaQueryPartTwo"
      ".NotOrOnly\0222\n\nmedia_type\030\002 \002(\0132\036.css_pro"
      "to_converter.MediaType\022P\n\032media_conditio"
      "n_without_or\030\003 \001(\0132,.css_proto_converter"
      ".MediaConditionWithoutOr\"\036\n\tNotOrOnly\022\007\n"
      "\003NOT\020\001\022\010\n\004ONLY\020\002\"\305\001\n\027MediaConditionWitho"
      "utOr\0220\n\tmedia_not\030\001 \002(\0132\035.css_proto_conv"
      "erter.MediaNot\0222\n\tmedia_and\030\002 \001(\0132\035.css_"
      "proto_converter.MediaAndH\000\022=\n\017media_in_p"
      "arens\030\003 \001(\0132\".css_proto_converter.MediaI"
      "nParensH\000B\005\n\003rhs\"\356\001\n\016MediaCondition\0220\n\tm"
      "edia_and\030\001 \002(\0132\035.css_proto_converter.Med"
      "iaAnd\0222\n\tmedia_not\030\002 \001(\0132\035.css_proto_con"
      "verter.MediaNotH\000\0220\n\010media_or\030\003 \001(\0132\034.cs"
      "s_proto_converter.MediaOrH\000\022=\n\017media_in_"
      "parens\030\004 \001(\0132\".css_proto_converter.Media"
      "InParensH\000B\005\n\003rhs\"\337\001\n\tMediaType\0228\n\010value"
      "_id\030\001 \002(\0162&.css_proto_converter.MediaTyp"
      "e.ValueId\"\227\001\n\007ValueId\022\007\n\003ALL\020\001\022\013\n\007BRAILL"
      "E\020\002\022\014\n\010EMBOSSED\020\003\022\014\n\010HANDHELD\020\004\022\t\n\005PRINT"
      "\020\005\022\016\n\nPROJECTION\020\006\022\n\n\006SCREEN\020\007\022\n\n\006SPEECH"
      "\020\010\022\007\n\003TTY\020\t\022\006\n\002TV\020\n\022\026\n\022INVALID_MEDIA_TYP"
      "E\020\013\"G\n\010MediaNot\022;\n\017media_in_parens\030\001 \002(\013"
      "2\".css_proto_converter.MediaInParens\"\323\001\n"
      "\010MediaAnd\022A\n\025first_media_in_parens\030\001 \002(\013"
      "2\".css_proto_converter.MediaInParens\022B\n\026"
      "second_media_in_parens\030\002 \002(\0132\".css_proto"
      "_converter.MediaInParens\022@\n\024media_in_par"
      "ens_list\030\003 \003(\0132\".css_proto_converter.Med"
      "iaInParens\"\322\001\n\007MediaOr\022A\n\025first_media_in"
      "_parens\030\001 \002(\0132\".css_proto_converter.Medi"
      "aInParens\022B\n\026second_media_in_parens\030\002 \002("
      "\0132\".css_proto_converter.MediaInParens\022@\n"
      "\024media_in_parens_list\030\003 \003(\0132\".css_proto_"
      "converter.MediaInParens\"\207\001\n\rMediaInParen"
      "s\0228\n\rmedia_feature\030\001 \002(\0132!.css_proto_con"
      "verter.MediaFeature\022<\n\017media_condition\030\002"
      " \001(\0132#.css_proto_converter.MediaConditio"
      "n\"l\n\014MediaFeature\022.\n\010mf_plain\030\001 \002(\0132\034.cs"
      "s_proto_converter.MfPlain\022,\n\007mf_bool\030\002 \001"
      "(\0132\033.css_proto_converter.MfBool\"e\n\007MfPla"
      "in\022-\n\010property\030\001 \002(\0132\033.css_proto_convert"
      "er.MfName\022+\n\005value\030\002 \002(\0132\034.css_proto_con"
      "verter.MfValue\"6\n\006MfBool\022,\n\007mf_name\030\001 \002("
      "\0132\033.css_proto_converter.MfName\"\254\007\n\006MfNam"
      "e\022/\n\002id\030\001 \002(\0162#.css_proto_converter.MfNa"
      "me.ValueId\"\360\006\n\007ValueId\022\r\n\tANY_HOVER\020\001\022\017\n"
      "\013ANY_POINTER\020\002\022\t\n\005COLOR\020\003\022\017\n\013COLOR_INDEX"
      "\020\004\022\017\n\013COLOR_GAMUT\020\005\022\010\n\004GRID\020\006\022\016\n\nMONOCHR"
      "OME\020\007\022\n\n\006HEIGHT\020\010\022\t\n\005HOVER\020\t\022\t\n\005WIDTH\020\n\022"
      "\017\n\013ORIENTATION\020\013\022\020\n\014ASPECT_RATIO\020\014\022\027\n\023DE"
      "VICE_ASPECT_RATIO\020\r\022\036\n\032_WEBKIT_DEVICE_PI"
      "XEL_RATIO\020\016\022\021\n\rDEVICE_HEIGHT\020\017\022\020\n\014DEVICE"
      "_WIDTH\020\020\022\020\n\014DISPLAY_MODE\020\021\022\r\n\tMAX_COLOR\020"
      "\022\022\023\n\017MAX_COLOR_INDEX\020\023\022\024\n\020MAX_ASPECT_RAT"
      "IO\020\024\022\033\n\027MAX_DEVICE_ASPECT_RATIO\020\025\022\"\n\036_WE"
      "BKIT_MAX_DEVICE_PIXEL_RATIO\020\026\022\025\n\021MAX_DEV"
      "ICE_HEIGHT\020\027\022\024\n\020MAX_DEVICE_WIDTH\020\030\022\016\n\nMA"
      "X_HEIGHT\020\031\022\022\n\016MAX_MONOCHROME\020\032\022\r\n\tMAX_WI"
      "DTH\020\033\022\022\n\016MAX_RESOLUTION\020\034\022\r\n\tMIN_COLOR\020\035"
      "\022\023\n\017MIN_COLOR_INDEX\020\036\022\024\n\020MIN_ASPECT_RATI"
      "O\020\037\022\033\n\027MIN_DEVICE_ASPECT_RATIO\020 \022\"\n\036_WEB"
      "KIT_MIN_DEVICE_PIXEL_RATIO\020!\022\025\n\021MIN_DEVI"
      "CE_HEIGHT\020\"\022\024\n\020MIN_DEVICE_WIDTH\020#\022\016\n\nMIN"
      "_HEIGHT\020$\022\022\n\016MIN_MONOCHROME\020%\022\r\n\tMIN_WID"
      "TH\020&\022\022\n\016MIN_RESOLUTION\020\'\022\013\n\007POINTER\020(\022\016\n"
      "\nRESOLUTION\020)\022\030\n\024_WEBKIT_TRANSFORM_3D\020*\022"
      "\010\n\004SCAN\020+\022\t\n\005SHAPE\020,\022\r\n\tIMMERSIVE\020-\022\020\n\014I"
      "NVALID_NAME\020.\"\223\001\n\007MfValue\022%\n\003num\030\001 \002(\0132\030"
      ".css_proto_converter.Num\022-\n\006length\030\002 \001(\013"
      "2\033.css_proto_converter.LengthH\000\022+\n\005ident"
      "\030\003 \001(\0132\032.css_proto_converter.IdentH\000B\005\n\003"
      "rhs\"\252\001\n\tNamespace\022>\n\020namespace_prefix\030\001 "
      "\001(\0132$.css_proto_converter.NamespacePrefi"
      "x\022-\n\006string\030\002 \001(\0132\033.css_proto_converter."
      "StringH\000\022\'\n\003uri\030\003 \001(\0132\030.css_proto_conver"
      "ter.UriH\000B\005\n\003rhs\"<\n\017NamespacePrefix\022)\n\005i"
      "dent\030\001 \002(\0132\032.css_proto_converter.Ident\"v"
      "\n\005Media\022=\n\020media_query_list\030\001 \002(\0132#.css_"
      "proto_converter.MediaQueryList\022.\n\010rulese"
      "ts\030\002 \003(\0132\034.css_proto_converter.Ruleset\"\247"
      "\001\n\004Page\022)\n\005ident\030\001 \001(\0132\032.css_proto_conve"
      "rter.Ident\0224\n\013pseudo_page\030\002 \001(\0132\037.css_pr"
      "oto_converter.PseudoPage\022>\n\020declaration_"
      "list\030\003 \002(\0132$.css_proto_converter.Declara"
      "tionList\"\214\001\n\017DeclarationList\022;\n\021first_de"
      "claration\030\001 \002(\0132 .css_proto_converter.De"
      "claration\022<\n\022later_declarations\030\002 \003(\0132 ."
      "css_proto_converter.Declaration\"7\n\nPseud"
      "oPage\022)\n\005ident\030\001 \002(\0132\032.css_proto_convert"
      "er.Ident\"\n\n\010FontFace\"m\n\010Operator\022=\n\013asci"
      "i_value\030\001 \001(\0162(.css_proto_converter.Oper"
      "ator.AsciiValue\"\"\n\nAsciiValue\022\t\n\005COMMA\020,"
      "\022\t\n\005SLASH\020/\"v\n\rUnaryOperator\022B\n\013ascii_va"
      "lue\030\001 \002(\0162-.css_proto_converter.UnaryOpe"
      "rator.AsciiValue\"!\n\nAsciiValue\022\010\n\004PLUS\020+"
      "\022\t\n\005MINUS\020-\"\367\\\n\010Property\0225\n\007name_id\030\001 \002("
      "\0162$.css_proto_converter.Property.NameId\""
      "\263\\\n\006NameId\022\007\n\003ALL\020\001\022%\n!_WEBKIT_ANIMATION"
      "_ITERATION_COUNT\020\002\022\031\n\025FONT_FEATURE_SETTI"
      "NGS\020\003\022\"\n\036_WEBKIT_TEXT_EMPHASIS_POSITION\020"
      "\004\022\037\n\033_WEBKIT_TEXT_EMPHASIS_STYLE\020\005\022\026\n\022GR"
      "ID_TEMPLATE_ROWS\020\006\022\033\n\027TEXT_UNDERLINE_POS"
      "ITION\020\007\022\025\n\021_WEBKIT_FLEX_GROW\020\010\022\027\n\023SCROLL"
      "_MARGIN_RIGHT\020\t\022\027\n\023_WEBKIT_COLUMN_RULE\020\n"
      "\022\021\n\r_WEBKIT_ORDER\020\013\022\020\n\014GRID_ROW_GAP\020\014\022\023\n"
      "\017BACKDROP_FILTER\020\r\022\033\n\027FONT_VARIANT_EAST_"
      "ASIAN\020\016\022\026\n\022BUFFERED_RENDERING\020\017\022\026\n\022_WEBK"
      "IT_APPEARANCE\020\020\022\021\n\rOUTLINE_WIDTH\020\021\022\026\n\022AL"
      "IGNMENT_BASELINE\020\022\022\025\n\021_WEBKIT_FLEX_FLOW\020"
      "\023\022\017\n\013COLUMN_RULE\020\024\022\023\n\017GRID_COLUMN_GAP\020\025\022"
      "\030\n\024_WEBKIT_BORDER_AFTER\020\026\022\037\n\033_WEBKIT_COL"
      "UMN_BREAK_INSIDE\020\027\022\031\n\025_WEBKIT_SHAPE_OUTS"
      "IDE\020\030\022\036\n\032_WEBKIT_PRINT_COLOR_ADJUST\020\031\022\023\n"
      "\017LIST_STYLE_TYPE\020\032\022\025\n\021PAGE_BREAK_BEFORE\020"
      "\033\022\017\n\013FLOOD_COLOR\020\034\022\017\n\013TEXT_ANCHOR\020\035\022\031\n\025_"
      "WEBKIT_PADDING_START\020\036\022\027\n\023_WEBKIT_USER_S"
      "ELECT\020\037\022\035\n\031_WEBKIT_COLUMN_RULE_COLOR\020 \022\020"
      "\n\014PADDING_LEFT\020!\022\037\n\033_WEBKIT_BACKFACE_VIS"
      "IBILITY\020\"\022\031\n\025_WEBKIT_MARGIN_BEFORE\020#\022\020\n\014"
      "BREAK_INSIDE\020$\022\020\n\014COLUMN_COUNT\020%\022\032\n\026_WEB"
      "KIT_LOGICAL_HEIGHT\020&\022\017\n\013PERSPECTIVE\020\'\022\022\n"
      "\016MAX_BLOCK_SIZE\020(\022 \n\034_WEBKIT_ANIMATION_P"
      "LAY_STATE\020)\022\027\n\023BORDER_IMAGE_REPEAT\020*\022\033\n\027"
      "_WEBKIT_FONT_SIZE_DELTA\020+\022\031\n\025SCROLL_PADD"
      "ING_BOTTOM\020,\022\026\n\022BORDER_RIGHT_STYLE\020-\022\025\n\021"
      "BORDER_LEFT_STYLE\020.\022\027\n\023SCROLL_MARGIN_BLO"
      "CK\020/\022\r\n\tFLEX_FLOW\0200\022\021\n\rOUTLINE_COLOR\0201\022\r"
      "\n\tFLEX_GROW\0202\022\r\n\tMAX_WIDTH\0203\022\017\n\013GRID_COL"
      "UMN\0204\022\025\n\021IMAGE_ORIENTATION\0205\022\026\n\022ANIMATIO"
      "N_DURATION\0206\022\023\n\017_WEBKIT_COLUMNS\0207\022\032\n\026_WE"
      "BKIT_BOX_FLEX_GROUP\0208\022\033\n\027_WEBKIT_ANIMATI"
      "ON_DELAY\0209\022\027\n\023_EPUB_TEXT_EMPHASIS\020:\022\017\n\013F"
      "LEX_SHRINK\020;\022\022\n\016TEXT_RENDERING\020<\022\017\n\013ALIG"
      "N_ITEMS\020=\022\023\n\017BORDER_COLLAPSE\020>\022\n\n\006OFFSET"
      "\020\?\022\030\n\024TEXT_COMBINE_UPRIGHT\020@\022\033\n\027_WEBKIT_"
      "MASK_POSITION_X\020A\022\033\n\027_WEBKIT_MASK_POSITI"
      "ON_Y\020B\022\021\n\rOUTLINE_STYLE\020C\022\"\n\036_WEBKIT_MAR"
      "GIN_BOTTOM_COLLAPSE\020D\022\037\n\033COLOR_INTERPOLA"
      "TION_FILTERS\020E\022\020\n\014FONT_VARIANT\020F\022\037\n\033_WEB"
      "KIT_ANIMATION_FILL_MODE\020G\022\020\n\014BORDER_RIGH"
      "T\020H\022\016\n\nVISIBILITY\020I\022\021\n\rTRANSFORM_BOX\020J\022\025"
      "\n\021FONT_VARIANT_CAPS\020K\022\035\n\031_EPUB_TEXT_EMPH"
      "ASIS_COLOR\020L\022\037\n\033_WEBKIT_BORDER_BEFORE_ST"
      "YLE\020M\022\n\n\006RESIZE\020N\022\030\n\024_WEBKIT_RTL_ORDERIN"
      "G\020O\022\035\n\031_WEBKIT_BOX_ORDINAL_GROUP\020P\022\017\n\013PA"
      "INT_ORDER\020Q\022\022\n\016STROKE_LINECAP\020R\022\027\n\023ANIMA"
      "TION_DIRECTION\020S\022!\n\035_WEBKIT_FONT_FEATURE"
      "_SETTINGS\020T\022\032\n\026BORDER_TOP_LEFT_RADIUS\020U\022"
      "\030\n\024_WEBKIT_COLUMN_WIDTH\020V\022\025\n\021_WEBKIT_BOX"
      "_ALIGN\020W\022\031\n\025_WEBKIT_PADDING_AFTER\020X\022\020\n\014C"
      "OLUMN_WIDTH\020Y\022\016\n\nLIST_STYLE\020Z\022\031\n\025_WEBKIT"
      "_MASK_REPEAT_Y\020[\022\"\n\036_WEBKIT_MARGIN_BEFOR"
      "E_COLLAPSE\020\\\022\n\n\006STROKE\020]\022\030\n\024TEXT_DECORAT"
      "ION_LINE\020^\022\033\n\027_WEBKIT_BACKGROUND_SIZE\020_\022"
      "\031\n\025_WEBKIT_MASK_REPEAT_X\020`\022\022\n\016PADDING_BO"
      "TTOM\020a\022\016\n\nFONT_STYLE\020b\022\034\n\030_WEBKIT_TRANSI"
      "TION_DELAY\020c\022\025\n\021BACKGROUND_REPEAT\020d\022\016\n\nF"
      "LEX_BASIS\020e\022\026\n\022BORDER_IMAGE_SLICE\020f\022\034\n\030_"
      "WEBKIT_TRANSFORM_ORIGIN\020g\022\031\n\025OVERSCROLL_"
      "BEHAVIOR_X\020h\022\031\n\025OVERSCROLL_BEHAVIOR_Y\020i\022"
      "\021\n\rVECTOR_EFFECT\020j\022%\n!_WEBKIT_ANIMATION_"
      "TIMING_FUNCTION\020k\022\036\n\032_WEBKIT_BORDER_AFTE"
      "R_STYLE\020l\022 \n\034_WEBKIT_PERSPECTIVE_ORIGIN_"
      "X\020m\022 \n\034_WEBKIT_PERSPECTIVE_ORIGIN_Y\020n\022\017\n"
      "\013INLINE_SIZE\020o\022\013\n\007OUTLINE\020p\022\020\n\014FONT_DISP"
      "LAY\020q\022\031\n\025_WEBKIT_BORDER_BEFORE\020r\022\027\n\023BORD"
      "ER_IMAGE_SOURCE\020s\022\027\n\023TRANSITION_DURATION"
      "\020t\022\026\n\022SCROLL_PADDING_TOP\020u\022\t\n\005ORDER\020v\022\026\n"
      "\022_WEBKIT_BOX_ORIENT\020w\022\021\n\rCOUNTER_RESET\020x"
      "\022\023\n\017COLOR_RENDERING\020y\022\022\n\016FLEX_DIRECTION\020"
      "z\022\035\n\031_WEBKIT_TEXT_STROKE_WIDTH\020{\022\030\n\024FONT"
      "_VARIANT_NUMERIC\020|\022\033\n\027SCROLL_MARGIN_BLOC"
      "K_END\020}\022\016\n\nMIN_HEIGHT\020~\022\037\n\033SCROLL_PADDIN"
      "G_INLINE_START\020\177\022\033\n\026_WEBKIT_MASK_BOX_IMA"
      "GE\020\200\001\022\t\n\004LEFT\020\201\001\022\021\n\014_WEBKIT_MASK\020\202\001\022\037\n\032_"
      "WEBKIT_BORDER_AFTER_WIDTH\020\203\001\022\021\n\014STROKE_W"
      "IDTH\020\204\001\022!\n\034_WEBKIT_BOX_DECORATION_BREAK\020"
      "\205\001\022\032\n\025_WEBKIT_MASK_POSITION\020\206\001\022\026\n\021BACKGR"
      "OUND_ORIGIN\020\207\001\022\037\n\032_WEBKIT_BORDER_START_C"
      "OLOR\020\210\001\022\021\n\014FONT_STRETCH\020\211\001\022\034\n\027_WEBKIT_BA"
      "CKGROUND_CLIP\020\212\001\022\026\n\021SCROLL_MARGIN_TOP\020\213\001"
      "\022&\n!_WEBKIT_BORDER_HORIZONTAL_SPACING\020\214\001"
      "\022\022\n\rBORDER_RADIUS\020\215\001\022\t\n\004FLEX\020\216\001\022\020\n\013TEXT_"
      "INDENT\020\217\001\022\014\n\007HYPHENS\020\220\001\022\026\n\021COLUMN_RULE_W"
      "IDTH\020\221\001\022\031\n\024_WEBKIT_MARGIN_AFTER\020\222\001\022\027\n\022_E"
      "PUB_CAPTION_SIDE\020\223\001\022\020\n\013BREAK_AFTER\020\224\001\022\023\n"
      "\016TEXT_TRANSFORM\020\225\001\022\021\n\014TOUCH_ACTION\020\226\001\022\016\n"
      "\tFONT_SIZE\020\227\001\022\033\n\026_WEBKIT_ANIMATION_NAME\020"
      "\230\001\022\032\n\025SCROLL_PADDING_INLINE\020\231\001\022\020\n\013OFFSET"
      "_PATH\020\232\001\022\022\n\rSCROLL_MARGIN\020\233\001\022\020\n\013PADDING_"
      "TOP\020\234\001\022\026\n\021SCROLL_SNAP_ALIGN\020\235\001\022\031\n\024_WEBKI"
      "T_TEXT_COMBINE\020\236\001\022\030\n\023_WEBKIT_FLEX_SHRINK"
      "\020\237\001\022\007\n\002RX\020\240\001\022\007\n\002RY\020\241\001\022\014\n\007CONTENT\020\242\001\022\022\n\rP"
      "ADDING_RIGHT\020\243\001\022\026\n\021_WEBKIT_TRANSFORM\020\244\001\022"
      "\017\n\nMARKER_MID\020\245\001\022\036\n\031_WEBKIT_MIN_LOGICAL_"
      "WIDTH\020\246\001\022\016\n\tCLIP_RULE\020\247\001\022\020\n\013FONT_FAMILY\020"
      "\250\001\022\025\n\020SCROLL_SNAP_TYPE\020\251\001\022\031\n\024TEXT_DECORA"
      "TION_SKIP\020\252\001\022\017\n\nTRANSITION\020\253\001\022\013\n\006FILTER\020"
      "\254\001\022\027\n\022BORDER_RIGHT_WIDTH\020\255\001\022\033\n\026_WEBKIT_F"
      "LEX_DIRECTION\020\256\001\022\033\n\026_WEBKIT_MASK_COMPOSI"
      "TE\020\257\001\022\023\n\016MIX_BLEND_MODE\020\260\001\022\030\n\023COLOR_INTE"
      "RPOLATION\020\261\001\022\025\n\020BORDER_TOP_STYLE\020\262\001\022\021\n\014F"
      "ILL_OPACITY\020\263\001\022\021\n\014MARKER_START\020\264\001\022\030\n\023BOR"
      "DER_BOTTOM_WIDTH\020\265\001\022\032\n\025_WEBKIT_TEXT_EMPH"
      "ASIS\020\266\001\022\016\n\tGRID_AREA\020\267\001\022\t\n\004SIZE\020\270\001\022\024\n\017BA"
      "CKGROUND_CLIP\020\271\001\022\034\n\027_WEBKIT_TEXT_FILL_CO"
      "LOR\020\272\001\022\010\n\003TOP\020\273\001\022\030\n\023_WEBKIT_BOX_REFLECT\020"
      "\274\001\022\021\n\014BORDER_WIDTH\020\275\001\022\022\n\rOFFSET_ANCHOR\020\276"
      "\001\022\024\n\017MAX_INLINE_SIZE\020\277\001\022\036\n\031_WEBKIT_COLUM"
      "N_RULE_STYLE\020\300\001\022\031\n\024_WEBKIT_COLUMN_COUNT\020"
      "\301\001\022\031\n\024ANIMATION_PLAY_STATE\020\302\001\022\014\n\007PADDING"
      "\020\303\001\022\026\n\021DOMINANT_BASELINE\020\304\001\022\032\n\025BACKGROUN"
      "D_ATTACHMENT\020\305\001\022\027\n\022_WEBKIT_BOX_SIZING\020\306\001"
      "\022\025\n\020_WEBKIT_BOX_FLEX\020\307\001\022\025\n\020TEXT_ORIENTAT"
      "ION\020\310\001\022\030\n\023BACKGROUND_POSITION\020\311\001\022\037\n\032_WEB"
      "KIT_BORDER_START_WIDTH\020\312\001\022\036\n\031_EPUB_TEXT_"
      "EMPHASIS_STYLE\020\313\001\022\016\n\tISOLATION\020\314\001\022\033\n\026_EP"
      "UB_TEXT_ORIENTATION\020\315\001\022\'\n\"_WEBKIT_BORDER"
      "_BOTTOM_RIGHT_RADIUS\020\316\001\022\006\n\001R\020\317\001\022\026\n\021BORDE"
      "R_LEFT_WIDTH\020\320\001\022\024\n\017GRID_COLUMN_END\020\321\001\022\032\n"
      "\025BACKGROUND_BLEND_MODE\020\322\001\022\023\n\016VERTICAL_AL"
      "IGN\020\323\001\022\t\n\004CLIP\020\324\001\022\023\n\016GRID_AUTO_ROWS\020\325\001\022\022"
      "\n\rOFFSET_ROTATE\020\326\001\022\020\n\013MARGIN_LEFT\020\327\001\022\023\n\016"
      "ANIMATION_NAME\020\330\001\022\024\n\017TEXT_DECORATION\020\331\001\022"
      "\013\n\006BORDER\020\332\001\022\'\n\"_WEBKIT_TRANSITION_TIMIN"
      "G_FUNCTION\020\333\001\022\022\n\rMARGIN_BOTTOM\020\334\001\022\022\n\rUNI"
      "CODE_RANGE\020\335\001\022\016\n\tANIMATION\020\336\001\022\031\n\024_WEBKIT"
      "_SHAPE_MARGIN\020\337\001\022\020\n\013FONT_WEIGHT\020\340\001\022\021\n\014SH"
      "APE_MARGIN\020\341\001\022\016\n\tMASK_TYPE\020\342\001\022\023\n\016SCROLL_"
      "PADDING\020\343\001\022\024\n\017MIN_INLINE_SIZE\020\344\001\022\024\n\017OBJE"
      "CT_POSITION\020\345\001\022\025\n\020PAGE_BREAK_AFTER\020\346\001\022\026\n"
      "\021_WEBKIT_MASK_CLIP\020\347\001\022\020\n\013WHITE_SPACE\020\350\001\022"
      "\037\n\032_WEBKIT_BORDER_AFTER_COLOR\020\351\001\022\036\n\031_WEB"
      "KIT_MAX_LOGICAL_WIDTH\020\352\001\022 \n\033_WEBKIT_BORD"
      "ER_BEFORE_COLOR\020\353\001\022\021\n\014FONT_KERNING\020\354\001\022\025\n"
      "\020_EPUB_WORD_BREAK\020\355\001\022\n\n\005CLEAR\020\356\001\022\036\n\031ANIM"
      "ATION_TIMING_FUNCTION\020\357\001\022\032\n\025_WEBKIT_BORD"
      "ER_RADIUS\020\360\001\022\031\n\024SCROLL_PADDING_RIGHT\020\361\001\022"
      "\'\n\"_WEBKIT_TEXT_DECORATIONS_IN_EFFECT\020\362\001"
      "\022 \n\033_WEBKIT_ANIMATION_DIRECTION\020\363\001\022\021\n\014JU"
      "STIFY_SELF\020\364\001\022\037\n\032TRANSITION_TIMING_FUNCT"
      "ION\020\365\001\022\025\n\020SCROLL_SNAP_STOP\020\366\001\022\026\n\021COUNTER"
      "_INCREMENT\020\367\001\022\034\n\027_WEBKIT_TRANSFORM_STYLE"
      "\020\370\001\022\026\n\021GRID_AUTO_COLUMNS\020\371\001\022\032\n\025_WEBKIT_A"
      "LIGN_CONTENT\020\372\001\022\t\n\004FONT\020\373\001\022\016\n\tFLEX_WRAP\020"
      "\374\001\022\023\n\016GRID_ROW_START\020\375\001\022\025\n\020LIST_STYLE_IM"
      "AGE\020\376\001\022 \n\033_WEBKIT_TAP_HIGHLIGHT_COLOR\020\377\001"
      "\022 \n\033_WEBKIT_TEXT_EMPHASIS_COLOR\020\200\002\022\020\n\013BO"
      "RDER_LEFT\020\201\002\022\035\n\030_WEBKIT_BORDER_END_COLOR"
      "\020\202\002\022\014\n\007COLUMNS\020\203\002\022\017\n\nBOX_SHADOW\020\204\002\022\026\n\021_W"
      "EBKIT_FLEX_WRAP\020\205\002\022\017\n\nALIGN_SELF\020\206\002\022\022\n\rB"
      "ORDER_BOTTOM\020\207\002\022\023\n\016BORDER_SPACING\020\210\002\022\030\n\023"
      "_WEBKIT_COLUMN_SPAN\020\211\002\022\021\n\014GRID_ROW_END\020\212"
      "\002\022\027\n\022_WEBKIT_BORDER_END\020\213\002\022\027\n\022PERSPECTIV"
      "E_ORIGIN\020\214\002\022\026\n\021PAGE_BREAK_INSIDE\020\215\002\022\014\n\007O"
      "RPHANS\020\216\002\022\037\n\032_WEBKIT_BORDER_START_STYLE\020"
      "\217\002\022\024\n\017SCROLL_BEHAVIOR\020\220\002\022\020\n\013COLUMN_SPAN\020"
      "\221\002\022 \n\033_WEBKIT_HYPHENATE_CHARACTER\020\222\002\022\020\n\013"
      "COLUMN_FILL\020\223\002\022\r\n\010TAB_SIZE\020\224\002\022\014\n\007CONTAIN"
      "\020\225\002\022\006\n\001X\020\226\002\022\r\n\010GRID_ROW\020\227\002\022\037\n\032BORDER_BOT"
      "TOM_RIGHT_RADIUS\020\230\002\022\020\n\013LINE_HEIGHT\020\231\002\022\024\n"
      "\017STROKE_LINEJOIN\020\232\002\022\024\n\017TEXT_ALIGN_LAST\020\233"
      "\002\022\024\n\017OFFSET_POSITION\020\234\002\022\021\n\014WORD_SPACING\020"
      "\235\002\022\024\n\017TRANSFORM_STYLE\020\236\002\022\027\n\022_WEBKIT_APP_"
      "REGION\020\237\002\022\035\n\030_WEBKIT_BORDER_END_STYLE\020\240\002"
      "\022\037\n\032_WEBKIT_TRANSFORM_ORIGIN_Z\020\241\002\022\037\n\032_WE"
      "BKIT_TRANSFORM_ORIGIN_X\020\242\002\022\037\n\032_WEBKIT_TR"
      "ANSFORM_ORIGIN_Y\020\243\002\022\030\n\023BACKGROUND_REPEAT"
      "_X\020\244\002\022\030\n\023BACKGROUND_REPEAT_Y\020\245\002\022\030\n\023BORDE"
      "R_BOTTOM_COLOR\020\246\002\022\032\n\025_WEBKIT_RUBY_POSITI"
      "ON\020\247\002\022\032\n\025_WEBKIT_LOGICAL_WIDTH\020\250\002\022\021\n\014TEX"
      "T_JUSTIFY\020\251\002\022\037\n\032SCROLL_MARGIN_INLINE_STA"
      "RT\020\252\002\022\021\n\014CAPTION_SIDE\020\253\002\022\025\n\020MASK_SOURCE_"
      "TYPE\020\254\002\022!\n\034_WEBKIT_MASK_BOX_IMAGE_SLICE\020"
      "\255\002\022\031\n\024_WEBKIT_BORDER_IMAGE\020\256\002\022\025\n\020TEXT_SI"
      "ZE_ADJUST\020\257\002\022\032\n\025_WEBKIT_TEXT_SECURITY\020\260\002"
      "\022\027\n\022_EPUB_WRITING_MODE\020\261\002\022\022\n\rGRID_TEMPLA"
      "TE\020\262\002\022\"\n\035_WEBKIT_MASK_BOX_IMAGE_REPEAT\020\263"
      "\002\022\030\n\023_WEBKIT_MASK_REPEAT\020\264\002\022\034\n\027_WEBKIT_J"
      "USTIFY_CONTENT\020\265\002\022\023\n\016BASELINE_SHIFT\020\266\002\022\021"
      "\n\014BORDER_IMAGE\020\267\002\022\032\n\025TEXT_DECORATION_COL"
      "OR\020\270\002\022\n\n\005COLOR\020\271\002\022\032\n\025SHAPE_IMAGE_THRESHO"
      "LD\020\272\002\022\024\n\017SHAPE_RENDERING\020\273\002\022\007\n\002CY\020\274\002\022\007\n\002"
      "CX\020\275\002\022\030\n\023_WEBKIT_USER_MODIFY\020\276\002\022\024\n\017OFFSE"
      "T_DISTANCE\020\277\002\022&\n!_WEBKIT_BORDER_BOTTOM_L"
      "EFT_RADIUS\020\300\002\022\n\n\005SPEAK\020\301\002\022\036\n\031BORDER_BOTT"
      "OM_LEFT_RADIUS\020\302\002\022\037\n\032_WEBKIT_COLUMN_BREA"
      "K_AFTER\020\303\002\022\033\n\026_WEBKIT_FONT_SMOOTHING\020\304\002\022"
      "\037\n\032_WEBKIT_MAX_LOGICAL_HEIGHT\020\305\002\022\027\n\022_WEB"
      "KIT_LINE_BREAK\020\306\002\022\016\n\tFILL_RULE\020\307\002\022\031\n\024_WE"
      "BKIT_MARGIN_START\020\310\002\022\016\n\tMIN_WIDTH\020\311\002\022\027\n\022"
      "_EPUB_TEXT_COMBINE\020\312\002\022\021\n\014BREAK_BEFORE\020\313\002"
      "\022\020\n\013CARET_COLOR\020\314\002\022\020\n\013EMPTY_CELLS\020\315\002\022\016\n\t"
      "DIRECTION\020\316\002\022\016\n\tCLIP_PATH\020\317\002\022\024\n\017JUSTIFY_"
      "CONTENT\020\320\002\022\035\n\030SCROLL_PADDING_BLOCK_END\020\321"
      "\002\022\014\n\007Z_INDEX\020\322\002\022\032\n\025BACKGROUND_POSITION_Y"
      "\020\323\002\022\032\n\025TEXT_DECORATION_STYLE\020\324\002\022\030\n\023GRID_"
      "TEMPLATE_AREAS\020\325\002\022\037\n\032_WEBKIT_MIN_LOGICAL"
      "_HEIGHT\020\326\002\022\025\n\020FONT_SIZE_ADJUST\020\327\002\022\031\n\024SCR"
      "OLL_PADDING_BLOCK\020\330\002\022\024\n\017OVERFLOW_ANCHOR\020"
      "\331\002\022\013\n\006CURSOR\020\332\002\022\036\n\031SCROLL_MARGIN_BLOCK_S"
      "TART\020\333\002\022\"\n\035_WEBKIT_MASK_BOX_IMAGE_SOURCE"
      "\020\334\002\022\013\n\006MARGIN\020\335\002\022\026\n\021_WEBKIT_ANIMATION\020\336\002"
      "\022\023\n\016LETTER_SPACING\020\337\002\022\020\n\013ORIENTATION\020\340\002\022"
      "\020\n\013WILL_CHANGE\020\341\002\022\026\n\021_WEBKIT_HIGHLIGHT\020\342"
      "\002\022\025\n\020TRANSFORM_ORIGIN\020\343\002\022\033\n\026FONT_VARIANT"
      "_LIGATURES\020\344\002\022\037\n\032_WEBKIT_ANIMATION_DURAT"
      "ION\020\345\002\022\030\n\023_WEBKIT_MASK_ORIGIN\020\346\002\022\026\n\021_WEB"
      "KIT_CLIP_PATH\020\347\002\022\017\n\nWORD_BREAK\020\350\002\022\021\n\014TAB"
      "LE_LAYOUT\020\351\002\022\022\n\rTEXT_OVERFLOW\020\352\002\022\023\n\016_WEB"
      "KIT_LOCALE\020\353\002\022\021\n\014_WEBKIT_FLEX\020\354\002\022\023\n\016GRID"
      "_AUTO_FLOW\020\355\002\022\034\n\027BORDER_TOP_RIGHT_RADIUS"
      "\020\356\002\022\030\n\023BORDER_IMAGE_OUTSET\020\357\002\022\020\n\013PLACE_I"
      "TEMS\020\360\002\022\026\n\021BORDER_LEFT_COLOR\020\361\002\022\034\n\027FONT_"
      "VARIATION_SETTINGS\020\362\002\022\027\n\022BORDER_RIGHT_CO"
      "LOR\020\363\002\022\r\n\010MIN_ZOOM\020\364\002\022\031\n\024SCROLL_MARGIN_I"
      "NLINE\020\365\002\022 \n\033_WEBKIT_BORDER_BEFORE_WIDTH\020"
      "\366\002\022\030\n\023BACKFACE_VISIBILITY\020\367\002\022\025\n\020BACKGROU"
      "ND_IMAGE\020\370\002\022 \n\033_WEBKIT_TRANSITION_PROPER"
      "TY\020\371\002\022\021\n\014WRITING_MODE\020\372\002\022\023\n\016STROKE_OPACI"
      "TY\020\373\002\022\034\n\027_WEBKIT_MARGIN_COLLAPSE\020\374\002\022\017\n\nB"
      "OX_SIZING\020\375\002\022\017\n\nMARGIN_TOP\020\376\002\022\026\n\021COLUMN_"
      "RULE_COLOR\020\377\002\022\006\n\001Y\020\200\003\022\r\n\010POSITION\020\201\003\022\031\n\024"
      "SCROLL_MARGIN_BOTTOM\020\202\003\022\030\n\023LIST_STYLE_PO"
      "SITION\020\203\003\022\025\n\020_WEBKIT_BOX_PACK\020\204\003\022\036\n\031SCRO"
      "LL_PADDING_INLINE_END\020\205\003\022\013\n\006QUOTES\020\206\003\022\017\n"
      "\nBORDER_TOP\020\207\003\022\030\n\023SCROLL_PADDING_LEFT\020\210\003"
      "\022\027\n\022_WEBKIT_TRANSITION\020\211\003\022 \n\033_WEBKIT_COL"
      "UMN_BREAK_BEFORE\020\212\003\022\023\n\016LIGHTING_COLOR\020\213\003"
      "\022\024\n\017BACKGROUND_SIZE\020\214\003\022\033\n\026_WEBKIT_PADDIN"
      "G_BEFORE\020\215\003\022#\n\036_WEBKIT_BORDER_TOP_LEFT_R"
      "ADIUS\020\216\003\022\022\n\rFLOOD_OPACITY\020\217\003\022\025\n\020LINE_HEI"
      "GHT_STEP\020\220\003\022\026\n\021_WEBKIT_MASK_SIZE\020\221\003\022\017\n\nT"
      "EXT_ALIGN\020\222\003\022\023\n\016_WEBKIT_FILTER\020\223\003\022\016\n\tWOR"
      "D_WRAP\020\224\003\022\r\n\010MAX_ZOOM\020\225\003\022\t\n\004GRID\020\226\003\022\017\n\nB"
      "ACKGROUND\020\227\003\022\013\n\006HEIGHT\020\230\003\022\026\n\021GRID_COLUMN"
      "_START\020\231\003\022\030\n\023ANIMATION_FILL_MODE\020\232\003\022\013\n\006R"
      "OTATE\020\233\003\022\017\n\nMARKER_END\020\234\003\022\006\n\001D\020\235\003\022\022\n\rJUS"
      "TIFY_ITEMS\020\236\003\022\t\n\004ZOOM\020\237\003\022\037\n\032SCROLL_PADDI"
      "NG_BLOCK_START\020\240\003\022 \n\033_WEBKIT_MARGIN_TOP_"
      "COLLAPSE\020\241\003\022\t\n\004PAGE\020\242\003\022\n\n\005RIGHT\020\243\003\022\020\n\013US"
      "ER_SELECT\020\244\003\022\021\n\014MARGIN_RIGHT\020\245\003\022\013\n\006MARKE"
      "R\020\246\003\022\017\n\nLINE_BREAK\020\247\003\022\027\n\022_WEBKIT_MARGIN_"
      "END\020\250\003\022 \n\033_WEBKIT_TRANSITION_DURATION\020\251\003"
      "\022\031\n\024_WEBKIT_WRITING_MODE\020\252\003\022\025\n\020BORDER_TO"
      "P_WIDTH\020\253\003\022\013\n\006BOTTOM\020\254\003\022\022\n\rPLACE_CONTENT"
      "\020\255\003\022\"\n\035_WEBKIT_SHAPE_IMAGE_THRESHOLD\020\256\003\022"
      "\026\n\021_WEBKIT_USER_DRAG\020\257\003\022$\n\037_WEBKIT_BORDE"
      "R_VERTICAL_SPACING\020\260\003\022\027\n\022_WEBKIT_COLUMN_"
      "GAP\020\261\003\022\024\n\017_WEBKIT_OPACITY\020\262\003\022\025\n\020BACKGROU"
      "ND_COLOR\020\263\003\022\017\n\nCOLUMN_GAP\020\264\003\022\022\n\rSHAPE_OU"
      "TSIDE\020\265\003\022\030\n\023_WEBKIT_PADDING_END\020\266\003\022\031\n\024_W"
      "EBKIT_BORDER_START\020\267\003\022\024\n\017ANIMATION_DELAY"
      "\020\270\003\022\021\n\014UNICODE_BIDI\020\271\003\022\020\n\013TEXT_SHADOW\020\272\003"
      "\022\032\n\025_WEBKIT_BOX_DIRECTION\020\273\003\022\024\n\017IMAGE_RE"
      "NDERING\020\274\003\022\010\n\003SRC\020\275\003\022\r\n\010GRID_GAP\020\276\003\022\023\n\016P"
      "OINTER_EVENTS\020\277\003\022\027\n\022BORDER_IMAGE_WIDTH\020\300"
      "\003\022\023\n\016MIN_BLOCK_SIZE\020\301\003\022\030\n\023TRANSITION_PRO"
      "PERTY\020\302\003\022\027\n\022_WEBKIT_MASK_IMAGE\020\303\003\022\n\n\005FLO"
      "AT\020\304\003\022\017\n\nMAX_HEIGHT\020\305\003\022\023\n\016OUTLINE_OFFSET"
      "\020\306\003\022\027\n\022_WEBKIT_BOX_SHADOW\020\307\003\022\022\n\rOVERFLOW"
      "_WRAP\020\310\003\022\017\n\nBLOCK_SIZE\020\311\003\022\016\n\tTRANSFORM\020\312"
      "\003\022\017\n\nPLACE_SELF\020\313\003\022\n\n\005WIDTH\020\314\003\022\026\n\021STROKE"
      "_MITERLIMIT\020\315\003\022\021\n\014STOP_OPACITY\020\316\003\022\025\n\020BOR"
      "DER_TOP_COLOR\020\317\003\022\016\n\tTRANSLATE\020\320\003\022\017\n\nOBJE"
      "CT_FIT\020\321\003\022!\n\034_WEBKIT_MASK_BOX_IMAGE_WIDT"
      "H\020\322\003\022\036\n\031_WEBKIT_BACKGROUND_ORIGIN\020\323\003\022\030\n\023"
      "_WEBKIT_ALIGN_ITEMS\020\324\003\022\025\n\020TRANSITION_DEL"
      "AY\020\325\003\022\027\n\022SCROLL_MARGIN_LEFT\020\326\003\022\021\n\014BORDER"
      "_STYLE\020\327\003\022\036\n\031ANIMATION_ITERATION_COUNT\020\330"
      "\003\022\"\n\035_WEBKIT_MARGIN_AFTER_COLLAPSE\020\331\003\022\016\n"
      "\t_OVERFLOW\020\332\003\022\016\n\tUSER_ZOOM\020\333\003\022$\n\037_WEBKIT"
      "_BORDER_TOP_RIGHT_RADIUS\020\334\003\022\032\n\025GRID_TEMP"
      "LATE_COLUMNS\020\335\003\022\027\n\022_WEBKIT_ALIGN_SELF\020\336\003"
      "\022\037\n\032_WEBKIT_PERSPECTIVE_ORIGIN\020\337\003\022\026\n\021COL"
      "UMN_RULE_STYLE\020\340\003\022\014\n\007DISPLAY\020\341\003\022\036\n\031_WEBK"
      "IT_COLUMN_RULE_WIDTH\020\342\003\022\026\n\021_WEBKIT_BOX_L"
      "INES\020\343\003\022\021\n\014BORDER_COLOR\020\344\003\022\027\n\022_WEBKIT_FL"
      "EX_BASIS\020\345\003\022\026\n\021STROKE_DASHOFFSET\020\346\003\022\035\n\030_"
      "WEBKIT_TEXT_SIZE_ADJUST\020\347\003\022\030\n\023OVERSCROLL"
      "_BEHAVIOR\020\350\003\022\030\n\023_WEBKIT_TEXT_STROKE\020\351\003\022\013"
      "\n\006WIDOWS\020\352\003\022\t\n\004FILL\020\353\003\022\017\n\nOVERFLOW_Y\020\354\003\022"
      "\017\n\nOVERFLOW_X\020\355\003\022\014\n\007OPACITY\020\356\003\022\030\n\023_WEBKI"
      "T_PERSPECTIVE\020\357\003\022\036\n\031_WEBKIT_TEXT_STROKE_"
      "COLOR\020\360\003\022\035\n\030SCROLL_MARGIN_INLINE_END\020\361\003\022"
      "\n\n\005SCALE\020\362\003\022\035\n\030_WEBKIT_TEXT_ORIENTATION\020"
      "\363\003\022\"\n\035_WEBKIT_MASK_BOX_IMAGE_OUTSET\020\364\003\022\022"
      "\n\rALIGN_CONTENT\020\365\003\022\035\n\030_WEBKIT_BORDER_END"
      "_WIDTH\020\366\003\022\030\n\023BORDER_BOTTOM_STYLE\020\367\003\022\t\n\004M"
      "ASK\020\370\003\022\032\n\025BACKGROUND_POSITION_X\020\371\003\022\031\n\024_E"
      "PUB_TEXT_TRANSFORM\020\372\003\022\017\n\nSTOP_COLOR\020\373\003\022\025"
      "\n\020STROKE_DASHARRAY\020\374\003\022\027\n\022_WEBKIT_LINE_CL"
      "AMP\020\375\003\022\025\n\020INVALID_PROPERTY\020\376\003\"\203\001\n\007Rulese"
      "t\0228\n\rselector_list\030\001 \002(\0132!.css_proto_con"
      "verter.SelectorList\022>\n\020declaration_list\030"
      "\002 \002(\0132$.css_proto_converter.DeclarationL"
      "ist\"}\n\014SelectorList\0225\n\016first_selector\030\001 "
      "\002(\0132\035.css_proto_converter.Selector\0226\n\017la"
      "ter_selectors\030\002 \003(\0132\035.css_proto_converte"
      "r.Selector\"\214\001\n\004Attr\022,\n\004type\030\001 \002(\0162\036.css_"
      "proto_converter.Attr.Type\022\016\n\006attr_i\030\002 \001("
      "\010\"F\n\004Type\022\010\n\004NONE\020\001\022\t\n\005EQUAL\020\006\022\t\n\005TILDE\020"
      "~\022\010\n\004PIPE\020|\022\n\n\006DOLLAR\020$\022\010\n\004STAR\020*\"\350\017\n\010Se"
      "lector\0220\n\004type\030\001 \002(\0162\".css_proto_convert"
      "er.Selector.Type\022\'\n\004attr\030\002 \002(\0132\031.css_pro"
      "to_converter.Attr\0224\n\013pseudo_type\030\003 \002(\0162\037"
      ".css_proto_converter.PseudoType\022D\n\017pseud"
      "o_value_id\030\004 \001(\0162+.css_proto_converter.S"
      "elector.PseudoValueId\0223\n\ncombinator\030\005 \002("
      "\0162\037.css_proto_converter.Combinator\"\?\n\004Ty"
      "pe\022\013\n\007ELEMENT\020\001\022\t\n\005CLASS\020\002\022\006\n\002ID\020\003\022\r\n\tUN"
      "IVERSAL\020\004\022\010\n\004ATTR\020\005\"\216\r\n\rPseudoValueId\022 \n"
      "\034_INTERNAL_AUTOFILL_PREVIEWED\020\001\022\037\n\033_INTE"
      "RNAL_AUTOFILL_SELECTED\020\002\022\026\n\022_INTERNAL_LI"
      "ST_BOX\020\003\0220\n,_INTERNAL_MEDIA_CONTROLS_OVE"
      "RLAY_CAST_BUTTON\020\004\022(\n$_INTERNAL_SHADOW_H"
      "OST_HAS_APPEARANCE\020\005\022&\n\"_INTERNAL_SPATIA"
      "L_NAVIGATION_FOCUS\020\006\022\036\n\032_INTERNAL_VIDEO_"
      "PERSISTENT\020\007\022\'\n#_INTERNAL_VIDEO_PERSISTE"
      "NT_ANCESTOR\020\010\022\024\n\020_WEBKIT_ANY_LINK\020\t\022\024\n\020_"
      "WEBKIT_AUTOFILL\020\n\022\020\n\014_WEBKIT_DRAG\020\013\022\033\n\027_"
      "WEBKIT_FULL_PAGE_MEDIA\020\014\022\027\n\023_WEBKIT_FULL"
      "_SCREEN\020\r\022 \n\034_WEBKIT_FULL_SCREEN_ANCESTO"
      "R\020\016\022\023\n\017_WEBKIT_RESIZER\020\017\022\025\n\021_WEBKIT_SCRO"
      "LLBAR\020\020\022\034\n\030_WEBKIT_SCROLLBAR_BUTTON\020\021\022\034\n"
      "\030_WEBKIT_SCROLLBAR_CORNER\020\022\022\033\n\027_WEBKIT_S"
      "CROLLBAR_THUMB\020\023\022\033\n\027_WEBKIT_SCROLLBAR_TR"
      "ACK\020\024\022!\n\035_WEBKIT_SCROLLBAR_TRACK_PIECE\020\025"
      "\022\n\n\006ACTIVE\020\026\022\t\n\005AFTER\020\027\022\014\n\010BACKDROP\020\030\022\n\n"
      "\006BEFORE\020\031\022\013\n\007CHECKED\020\032\022\013\n\007CONTENT\020\033\022\022\n\016C"
      "ORNER_PRESENT\020\034\022\007\n\003CUE\020\035\022\r\n\tDECREMENT\020\036\022"
      "\013\n\007DEFAULT\020\037\022\013\n\007DEFINED\020 \022\014\n\010DISABLED\020!\022"
      "\021\n\rDOUBLE_BUTTON\020\"\022\t\n\005EMPTY\020#\022\013\n\007ENABLED"
      "\020$\022\007\n\003END\020%\022\t\n\005FIRST\020&\022\017\n\013FIRST_CHILD\020\'\022"
      "\020\n\014FIRST_LETTER\020(\022\016\n\nFIRST_LINE\020)\022\021\n\rFIR"
      "ST_OF_TYPE\020*\022\t\n\005FOCUS\020+\022\020\n\014FOCUS_WITHIN\020"
      ",\022\016\n\nFULLSCREEN\020-\022\n\n\006FUTURE\020.\022\016\n\nHORIZON"
      "TAL\020/\022\010\n\004HOST\0200\022\t\n\005HOVER\0201\022\014\n\010IN_RANGE\0202"
      "\022\r\n\tINCREMENT\0203\022\021\n\rINDETERMINATE\0204\022\013\n\007IN"
      "VALID\0205\022\016\n\nLAST_CHILD\0206\022\020\n\014LAST_OF_TYPE\020"
      "7\022\010\n\004LEFT\0208\022\010\n\004LINK\0209\022\r\n\tNO_BUTTON\020:\022\016\n\n"
      "ONLY_CHILD\020;\022\020\n\014ONLY_OF_TYPE\020<\022\014\n\010OPTION"
      "AL\020=\022\020\n\014OUT_OF_RANGE\020>\022\010\n\004PAST\020\?\022\017\n\013PLAC"
      "EHOLDER\020@\022\025\n\021PLACEHOLDER_SHOWN\020A\022\r\n\tREAD"
      "_ONLY\020B\022\016\n\nREAD_WRITE\020C\022\014\n\010REQUIRED\020D\022\t\n"
      "\005RIGHT\020E\022\010\n\004ROOT\020F\022\t\n\005SCOPE\020G\022\r\n\tSELECTI"
      "ON\020H\022\n\n\006SHADOW\020I\022\021\n\rSINGLE_BUTTON\020J\022\t\n\005S"
      "TART\020K\022\n\n\006TARGET\020L\022\016\n\nUNRESOLVED\020M\022\t\n\005VA"
      "LID\020N\022\014\n\010VERTICAL\020O\022\013\n\007VISITED\020P\022\023\n\017WIND"
      "OW_INACTIVE\020Q\022\017\n\013_WEBKIT_ANY\020R\022\020\n\014HOST_C"
      "ONTEXT\020U\022\010\n\004LANG\020V\022\007\n\003NOT\020W\022\r\n\tNTH_CHILD"
      "\020X\022\022\n\016NTH_LAST_CHILD\020Y\022\024\n\020NTH_LAST_OF_TY"
      "PE\020Z\022\017\n\013NTH_OF_TYPE\020[\022\013\n\007SLOTTED\020\\\022\030\n\024IN"
      "VALID_PSEUDO_VALUE\020]\"\251\001\n\006Pseudo\022-\n\007ident"
      "_1\030\001 \001(\0132\032.css_proto_converter.IdentH\000\022<"
      "\n\016function_token\030\002 \001(\0132\".css_proto_conve"
      "rter.FunctionTokenH\000\022+\n\007ident_2\030\003 \002(\0132\032."
      "css_proto_converter.IdentB\005\n\003rhs\"P\n\013Decl"
      "aration\022A\n\022property_and_value\030\001 \001(\0132%.cs"
      "s_proto_converter.PropertyAndValue\"\220c\n\020P"
      "ropertyAndValue\022/\n\010property\030\001 \002(\0132\035.css_"
      "proto_converter.Property\022\'\n\004expr\030\002 \002(\0132\031"
      ".css_proto_converter.Expr\0228\n\004prio\030\003 \001(\0162"
      "*.css_proto_converter.PropertyAndValue.P"
      "rio\022\?\n\010value_id\030\004 \001(\0162-.css_proto_conver"
      "ter.PropertyAndValue.ValueId\"\035\n\004Prio\022\t\n\005"
      "UNSET\020\000\022\n\n\006IS_SET\020\001\"\207a\n\007ValueId\022\007\n\003ALL\020\001"
      "\022\013\n\007DYNAMIC\020\002\022\n\n\006YELLOW\020\003\022\014\n\010GRAYTEXT\020\004\022"
      "\017\n\013COLOR_DODGE\020\005\022\020\n\014DARKSEAGREEN\020\006\022\010\n\004DI"
      "SC\020\007\022\023\n\017EXTRA_CONDENSED\020\010\022\013\n\007HANGING\020\t\022\017"
      "\n\013STEP_MIDDLE\020\n\022\014\n\010MENULIST\020\013\022\007\n\003ROW\020\014\022\014"
      "\n\010PRE_WRAP\020\r\022\020\n\014INLINE_BLOCK\020\016\022\016\n\nSTEP_S"
      "TART\020\017\022\024\n\020ISOLATE_OVERRIDE\020\020\022\010\n\004SWAP\020\021\022\007"
      "\n\003RTL\020\022\022\013\n\007CRIMSON\020\023\022\006\n\002TB\020\024\022\024\n\020COMMON_L"
      "IGATURES\020\025\022\027\n\023_WEBKIT_MIN_CONTENT\020\026\022\t\n\005B"
      "ROWN\020\027\022\t\n\005KHMER\020\030\022\014\n\010INFINITE\020\031\022\026\n\022TABLE"
      "_HEADER_GROUP\020\032\022\017\n\013BEFORE_EDGE\020\033\022\016\n\nREAD"
      "_WRITE\020\034\022\006\n\002RL\020\035\022\010\n\004WAVY\020\036\022\026\n\022PROPORTION"
      "AL_WIDTH\020\037\022\013\n\007NO_DROP\020 \022\010\n\004CYAN\020!\022\016\n\nDIF"
      "FERENCE\020\"\022\t\n\005EXACT\020#\022\021\n\rSQUARE_BUTTON\020$\022"
      "\013\n\007SKYBLUE\020%\022\034\n\030_WEBKIT_ISOLATE_OVERRIDE"
      "\020&\022\023\n\017TABLE_ROW_GROUP\020\'\022\014\n\010DARKGRAY\020(\022\n\n"
      "\006BUTTON\020)\022\030\n\024ETHIOPIC_HALEHAME_AM\020*\022\t\n\005L"
      "ARGE\020+\022\r\n\tLIGHTPINK\020,\022\r\n\tCROSSHAIR\020-\022\010\n\004"
      "TEAL\020.\022\014\n\010FILL_BOX\020/\022\t\n\005SMALL\0200\022\025\n\021MEDIA"
      "_SLIDERTHUMB\0201\022\t\n\005ROUND\0202\022\"\n\036_INTERNAL_M"
      "EDIA_SUBTITLES_ICON\0203\022\025\n\021MEDIA_PLAY_BUTT"
      "ON\0204\022\013\n\007SMALLER\0205\022\t\n\005JIS04\0206\022\t\n\005LR_TB\0207\022"
      "\030\n\024LIGHTGOLDENRODYELLOW\0208\022\014\n\010LAVENDER\0209\022"
      "\022\n\016ULTRA_EXPANDED\020:\022\013\n\007DIMGREY\020;\022\026\n\022DIAG"
      "ONAL_FRACTIONS\020<\022\010\n\004BLUE\020=\022\007\n\003XOR\020>\022\007\n\003S"
      "UB\020\?\022\n\n\006TELUGU\020@\022\016\n\nCRISPEDGES\020A\022\030\n\024_WEB"
      "KIT_MINI_CONTROL\020B\022\014\n\010ZOOM_OUT\020C\022\017\n\013SEAR"
      "CHFIELD\020D\022\010\n\004CELL\020E\022\014\n\010GUJARATI\020F\022\t\n\005ABO"
      "VE\020G\022\022\n\016NO_PUNCTUATION\020H\022\007\n\003NEW\020I\022\n\n\006FIL"
      "LED\020J\022\016\n\nUSE_SCRIPT\020K\022\r\n\tCONDENSED\020L\022\t\n\005"
      "LOOSE\020M\022\016\n\nSOURCE_OUT\020N\022\013\n\007OBJECTS\020O\022\025\n\021"
      "SLIDER_HORIZONTAL\020P\022\016\n\nROW_RESIZE\020Q\022\r\n\tB"
      "REAK_ALL\020R\022\010\n\004WAIT\020S\022 \n\034MEDIA_EXIT_FULLS"
      "CREEN_BUTTON\020T\022\030\n\024KOREAN_HANGUL_FORMAL\020U"
      "\022\017\n\013FLORALWHITE\020V\022\016\n\nRESET_SIZE\020W\022\013\n\007ZOO"
      "M_IN\020X\022\024\n\020_WEBKIT_GRABBING\020Y\022\n\n\006LARGER\020Z"
      "\022\017\n\013MAX_CONTENT\020[\022\010\n\004SRGB\020\\\022\027\n\023LITERAL_P"
      "UNCTUATION\020]\022\017\n\013WINDOWFRAME\020^\022\030\n\024SUBPIXE"
      "L_ANTIALIASED\020_\022\023\n\017BUTTONHIGHLIGHT\020`\022\007\n\003"
      "HUE\020a\022\r\n\tPIXELATED\020b\022\n\n\006STICKY\020c\022\017\n\013GREE"
      "NYELLOW\020d\022\r\n\tLINEARRGB\020e\022\021\n\rLIGHTSEAGREE"
      "N\020f\022\013\n\007LOGICAL\020g\022\021\n\r_WEBKIT_RIGHT\020h\022\n\n\006S"
      "IENNA\020i\022\r\n\tFLOW_ROOT\020j\022\021\n\rOPTIMIZESPEED\020"
      "k\022\027\n\023KOREAN_HANJA_FORMAL\020l\022\n\n\006NOWRAP\020m\022\013"
      "\n\007X_SMALL\020n\022\r\n\tLANDSCAPE\020o\022\010\n\004LIME\020p\022\013\n\007"
      "X_LARGE\020q\022\r\n\tNS_RESIZE\020r\022\020\n\014APPWORKSPACE"
      "\020s\022\010\n\004PERU\020t\022\023\n\017ALL_PETITE_CAPS\020u\022\t\n\005BLA"
      "CK\020v\022\014\n\010XX_SMALL\020w\022\016\n\nALL_SCROLL\020x\022\021\n\rDA"
      "RKSLATEGRAY\020y\022\010\n\004FLAT\020z\022\014\n\010GEORGIAN\020{\022\t\n"
      "\005UNDER\020|\022\020\n\014LEMONCHIFFON\020}\022\r\n\tCHOCOLATE\020"
      "~\022\014\n\010PRE_LINE\020\177\022\021\n\014CONTEXT_MENU\020\200\001\022\r\n\010DA"
      "RKGREY\020\201\001\022\r\n\010VIEW_BOX\020\202\001\022\n\n\005OLIVE\020\203\001\022\026\n\021"
      "_WEBKIT_PLAINTEXT\020\204\001\022\023\n\016EXTRA_EXPANDED\020\205"
      "\001\022\021\n\014ANTIQUEWHITE\020\206\001\022\t\n\004NONE\020\207\001\022\r\n\010MOCCA"
      "SIN\020\210\001\022\n\n\005LOCAL\020\211\001\022\013\n\006STROKE\020\212\001\022\022\n\rDARKS"
      "LATEBLUE\020\213\001\022\021\n\014LIGHTSKYBLUE\020\214\001\022\020\n\013CONTEN"
      "T_BOX\020\215\001\022\t\n\004THIN\020\216\001\022\r\n\010DEEPPINK\020\217\001\022\016\n\tSP"
      "ELL_OUT\020\220\001\022\027\n\022NON_SCALING_STROKE\020\221\001\022\024\n\017S"
      "LIDER_VERTICAL\020\222\001\022\020\n\013_WEBKIT_BOX\020\223\001\022\t\n\004P"
      "LUM\020\224\001\022,\n\'_INTERNAL_MEDIA_OVERLAY_CAST_O"
      "FF_BUTTON\020\225\001\022\030\n\023INACTIVECAPTIONTEXT\020\226\001\022\017"
      "\n\nDODGERBLUE\020\227\001\022\021\n\014THREEDSHADOW\020\230\001\022\020\n\013PE"
      "TITE_CAPS\020\231\001\022\013\n\006PAUSED\020\232\001\022\021\n\014_WEBKIT_LIN"
      "K\020\233\001\022\020\n\013MESSAGE_BOX\020\234\001\022\025\n\020_INTERNAL_CENT"
      "ER\020\235\001\022\r\n\010TRIANGLE\020\236\001\022\014\n\007MAGENTA\020\237\001\022\010\n\003TA"
      "N\020\240\001\022\r\n\010ABSOLUTE\020\241\001\022\t\n\004PINK\020\242\001\022\023\n\016HIRAGA"
      "NA_IROHA\020\243\001\022\022\n\rFARTHEST_SIDE\020\244\001\022\022\n\rPALEV"
      "IOLETRED\020\245\001\022\020\n\013CLOSE_QUOTE\020\246\001\022\026\n\021THREEDL"
      "IGHTSHADOW\020\247\001\022\014\n\007CAPTION\020\250\001\022\017\n\nPOWDERBLU"
      "E\020\251\001\022\021\n\014TABLE_COLUMN\020\252\001\022\020\n\013SOURCE_ATOP\020\253"
      "\001\022\r\n\010HIRAGANA\020\254\001\022\023\n\016UPPER_ARMENIAN\020\255\001\022\017\n"
      "\nWINDOWTEXT\020\256\001\022\017\n\nFULL_WIDTH\020\257\001\022\027\n\022PROGR"
      "ESS_BAR_VALUE\020\260\001\022\021\n\014MIDNIGHTBLUE\020\261\001\022\020\n\013I"
      "NLINE_FLEX\020\262\001\022\014\n\007ECONOMY\020\263\001\022\010\n\003LAO\020\264\001\022\n\n"
      "\005CLONE\020\265\001\022\n\n\005AFTER\020\266\001\022\017\n\nSTATUS_BAR\020\267\001\022\016"
      "\n\tLOWERCASE\020\270\001\022\n\n\005MIXED\020\271\001\022\021\n\014LINE_THROU"
      "GH\020\272\001\022\023\n\016LIGHTSLATEGRAY\020\273\001\022\022\n\rSMALL_CAPT"
      "ION\020\274\001\022\023\n\016INFOBACKGROUND\020\275\001\022\014\n\007DISCARD\020\276"
      "\001\022\020\n\013CAPTIONTEXT\020\277\001\022\010\n\003END\020\300\001\022/\n*_INTERN"
      "AL_INACTIVE_LIST_BOX_SELECTION_TEXT\020\301\001\022\017"
      "\n\nCAPITALIZE\020\302\001\022\023\n\016MEDIUMSEAGREEN\020\303\001\022\013\n\006"
      "TOMATO\020\304\001\022\016\n\tCADETBLUE\020\305\001\022\031\n\024DECIMAL_LEA"
      "DING_ZERO\020\306\001\022\017\n\nSANS_SERIF\020\307\001\022\n\n\005LINEN\020\310"
      "\001\022\n\n\005GREEN\020\311\001\022\023\n\016INACTIVEBORDER\020\312\001\022\013\n\006IN"
      "LINE\020\313\001\022\r\n\010FALLBACK\020\314\001\022\016\n\tPEACHPUFF\020\315\001\022\030"
      "\n\023_WEBKIT_MAX_CONTENT\020\316\001\022\021\n\014PLUS_LIGHTER"
      "\020\317\001\022\r\n\010CHECKBOX\020\320\001\022\t\n\004HELP\020\321\001\022\014\n\007OBLIQUE"
      "\020\322\001\022\t\n\004MOVE\020\323\001\022\n\n\005METER\020\324\001\022\013\n\006LEDGER\020\325\001\022"
      "\016\n\tSLATEGREY\020\326\001\022!\n\034MEDIA_TIME_REMAINING_"
      "DISPLAY\020\327\001\022\t\n\004URDU\020\330\001\022\014\n\007POINTER\020\331\001\022\013\n\006B"
      "EFORE\020\332\001\022\022\n\rDARKSLATEGREY\020\333\001\022\024\n\017_WEBKIT_"
      "CONTROL\020\334\001\022\027\n\022_WEBKIT_INLINE_BOX\020\335\001\022\017\n\nH"
      "ARD_LIGHT\020\336\001\022\n\n\005MITER\020\337\001\022\n\n\005ORIYA\020\340\001\022\020\n\013"
      "UPPER_LATIN\020\341\001\022\013\n\006WINDOW\020\342\001\022\017\n\nMEDIUMBLU"
      "E\020\343\001\022\007\n\002LR\020\344\001\022\013\n\006ORANGE\020\345\001\022\013\n\006HIDDEN\020\346\001\022"
      "(\n#_INTERNAL_ACTIVE_LIST_BOX_SELECTION\020\347"
      "\001\022\013\n\006BOLDER\020\350\001\022\023\n\016_WEBKIT_CENTER\020\351\001\022\t\n\004S"
      "AFE\020\352\001\022\022\n\rHIGHLIGHTTEXT\020\353\001\022\017\n\nACCUMULATE"
      "\020\354\001\022\r\n\010FLEX_END\020\355\001\022\020\n\013TRANSPARENT\020\356\001\022\'\n\""
      "_INTERNAL_MEDIA_REMOTING_CAST_ICON\020\357\001\022\016\n"
      "\tGOLDENROD\020\360\001\022\031\n\024HISTORICAL_LIGATURES\020\361\001"
      "\022\017\n\nDARKVIOLET\020\362\001\022\013\n\006ALWAYS\020\363\001\022\014\n\007DECIMA"
      "L\020\364\001\022\017\n\nBLOCK_AXIS\020\365\001\022\016\n\tSCROLLBAR\020\366\001\022\016\n"
      "\tEW_RESIZE\020\367\001\022\020\n\013DARKMAGENTA\020\370\001\022\020\n\013NOT_A"
      "LLOWED\020\371\001\022\014\n\007EASE_IN\020\372\001\022\027\n\022TABLE_COLUMN_"
      "GROUP\020\373\001\022\013\n\006SQUARE\020\374\001\022\022\n\rNO_CONTEXTUAL\020\375"
      "\001\022\033\n\026_WEBKIT_FILL_AVAILABLE\020\376\001\022\013\n\006FRAMES"
      "\020\377\001\022\014\n\007PERSIAN\020\200\002\022\013\n\006STATIC\020\201\002\022\t\n\004NAVY\020\202"
      "\002\022\023\n\016VISIBLEPAINTED\020\203\002\022\n\n\005THICK\020\204\002\022\030\n\023SI"
      "MP_CHINESE_FORMAL\020\205\002\022\017\n\nGHOSTWHITE\020\206\002\022\n\n"
      "\005SPACE\020\207\002\022\016\n\tDARKKHAKI\020\210\002\022\r\n\010KEEP_ALL\020\211\002"
      "\022\014\n\007CONTENT\020\212\002\022$\n\037_INTERNAL_MEDIA_DOWNLO"
      "AD_BUTTON\020\213\002\022\020\n\013UPPER_ROMAN\020\214\002\022\r\n\010CORNSI"
      "LK\020\215\002\022\010\n\003RED\020\216\002\022\016\n\tNO_CHANGE\020\217\002\022\013\n\006LINEA"
      "R\020\220\002\022\034\n\027_INTERNAL_MEDIA_CONTROL\020\221\002\022\r\n\010SI"
      "DEWAYS\020\222\002\022\014\n\007CONTAIN\020\223\002\022\023\n\016KATAKANA_IROH"
      "A\020\224\002\022\016\n\tSTEELBLUE\020\225\002\022\022\n\rDOUBLE_CIRCLE\020\226\002"
      "\022\020\n\013ANTIALIASED\020\227\002\022\016\n\tALICEBLUE\020\230\002\022\023\n\016LI"
      "GHTSLATEGREY\020\231\002\022\027\n\022GEOMETRICPRECISION\020\232\002"
      "\022\016\n\tGAINSBORO\020\233\002\022\021\n\014INLINE_TABLE\020\234\002\022\010\n\003L"
      "TR\020\235\002\022\016\n\tBACKWARDS\020\236\002\022\r\n\010S_RESIZE\020\237\002\022\016\n\t"
      "LIGHTGREY\020\240\002\022\026\n\021MEDIA_MUTE_BUTTON\020\241\002\022\r\n\010"
      "LISTITEM\020\242\002\022\016\n\tMISTYROSE\020\243\002\022\017\n\nDARKSALMO"
      "N\020\244\002\022\023\n\016SIDEWAYS_RIGHT\020\245\002\022\n\n\005JIS83\020\246\002\022\026\n"
      "\021MEDIUMSPRINGGREEN\020\247\002\022\030\n\023CAPS_LOCK_INDIC"
      "ATOR\020\250\002\022\033\n\026SLIDERTHUMB_HORIZONTAL\020\251\002\022\r\n\010"
      "FORWARDS\020\252\002\022\020\n\013UPPER_ALPHA\020\253\002\022\n\n\005BLINK\020\254"
      "\002\022\014\n\007FANTASY\020\255\002\022\017\n\nSIMPLIFIED\020\256\002\022\016\n\tORAN"
      "GERED\020\257\002\022\020\n\013NAVAJOWHITE\020\260\002\022\t\n\004OPEN\020\261\002\022\017\n"
      "\nHORIZONTAL\020\262\002\022\016\n\tSLATEGRAY\020\263\002\022\022\n\rACTIVE"
      "CAPTION\020\264\002\022\032\n\025KOREAN_HANJA_INFORMAL\020\265\002\022\013"
      "\n\006STRICT\020\266\002\022\016\n\tLIGHTCYAN\020\267\002\022\010\n\003TOP\020\270\002\022\027\n"
      "\022_WEBKIT_PICTOGRAPH\020\271\002\022\n\n\005WHITE\020\272\002\022\024\n\017TE"
      "XT_AFTER_EDGE\020\273\002\022\016\n\tLIGHTGRAY\020\274\002\022\r\n\010COLL"
      "APSE\020\275\002\022\n\n\005HOVER\020\276\002\022\036\n\031_WEBKIT_OPTIMIZE_"
      "CONTRAST\020\277\002\022\014\n\007PADDING\020\300\002\022\t\n\004BUTT\020\301\002\022\010\n\003"
      "OFF\020\302\002\022\t\n\004THAI\020\303\002\022\t\n\004COPY\020\304\002\022\014\n\007HOTPINK\020"
      "\305\002\022\013\n\006DOUBLE\020\306\002\022\020\n\013LOWER_GREEK\020\307\002\022\t\n\004GRE"
      "Y\020\310\002\022\"\n\035MEDIA_VOLUME_SLIDER_CONTAINER\020\311\002"
      "\022\030\n\023_WEBKIT_INLINE_FLEX\020\312\002\022\021\n\014SPACE_EVEN"
      "LY\020\313\002\022\021\n\014ACTIVEBORDER\020\314\002\022\014\n\007BROWSER\020\315\002\022\010"
      "\n\003PRE\020\316\002\022\014\n\007UNICASE\020\317\002\022\032\n\025SIMP_CHINESE_I"
      "NFORMAL\020\320\002\022\t\n\004CLIP\020\321\002\022\023\n\016CLOSEST_CORNER\020"
      "\322\002\022\016\n\tPLAINTEXT\020\323\002\022\016\n\tNO_REPEAT\020\324\002\022\r\n\010TE"
      "XT_TOP\020\325\002\022\n\n\005JIS78\020\326\002\022\r\n\010XX_LARGE\020\327\002\022\n\n\005"
      "RL_TB\020\330\002\022\016\n\tTABLE_ROW\020\331\002\022\013\n\006MEDIUM\020\332\002\022\016\n"
      "\tMONGOLIAN\020\333\002\022\r\n\010KATAKANA\020\334\002\022\014\n\007ELEMENT\020"
      "\335\002\022\013\n\006BORDER\020\336\002\022\016\n\tROSYBROWN\020\337\002\022\021\n\014PROGR"
      "ESS_BAR\020\340\002\022\017\n\nWHITESMOKE\020\341\002\022\016\n\tLIGHTBLUE"
      "\020\342\002\022\021\n\014_WEBKIT_LEFT\020\343\002\022\030\n\023NO_COMMON_LIGA"
      "TURES\020\344\002\022\014\n\007LISTBOX\020\345\002\022\014\n\007ISOLATE\020\346\002\022\t\n\004"
      "SNOW\020\347\002\022\r\n\010STEP_END\020\350\002\022\034\n\027ETHIOPIC_HALEH"
      "AME_TI_ER\020\351\002\022\034\n\027ETHIOPIC_HALEHAME_TI_ET\020"
      "\352\002\022\r\n\010MULTIPLE\020\353\002\022*\n%_INTERNAL_INACTIVE_"
      "LIST_BOX_SELECTION\020\354\002\022\013\n\006NORMAL\020\355\002\022\017\n\nBL"
      "UEVIOLET\020\356\002\022\013\n\006SALMON\020\357\002\022\020\n\013LOWER_ALPHA\020"
      "\360\002\022\014\n\007OLDLACE\020\361\002\022\013\n\006LETTER\020\362\002\022\017\n\nBORDER_"
      "BOX\020\363\002\022\n\n\005ALPHA\020\364\002\022\014\n\007TIBETAN\020\365\002\022\t\n\004ICON"
      "\020\366\002\022\017\n\nFLEX_START\020\367\002\022\r\n\010TEXTAREA\020\370\002\022\r\n\010W"
      "_RESIZE\020\371\002\022\n\n\005CLEAR\020\372\002\022\n\n\005COVER\020\373\002\022\024\n\017FA"
      "RTHEST_CORNER\020\374\002\022\027\n\022MENULIST_TEXTFIELD\020\375"
      "\002\022\020\n\013TRADITIONAL\020\376\002\022\t\n\004LEFT\020\377\002\022\010\n\003DOT\020\200\003"
      "\022\016\n\tLUMINANCE\020\201\003\022\t\n\004GOLD\020\202\003\022\t\n\004SHOW\020\203\003\022\t"
      "\n\004TEXT\020\204\003\022\031\n\024_WEBKIT_MATCH_PARENT\020\205\003\022\n\n\005"
      "RADIO\020\206\003\022\016\n\tCAMBODIAN\020\207\003\022\r\n\010REPEAT_X\020\210\003\022"
      "\r\n\010REPEAT_Y\020\211\003\022\t\n\004FINE\020\212\003\022\016\n\tTEXTFIELD\020\213"
      "\003\022\017\n\nFROM_IMAGE\020\214\003\022\020\n\013LINING_NUMS\020\215\003\022\t\n\004"
      "MENU\020\216\003\022\026\n\021PROPORTIONAL_NUMS\020\217\003\022\020\n\013SOURC"
      "E_OVER\020\220\003\022\016\n\tNE_RESIZE\020\221\003\022\017\n\nPAPAYAWHIP\020"
      "\222\003\022\016\n\tSOURCE_IN\020\223\003\022\016\n\tSE_RESIZE\020\224\003\022\013\n\006CI"
      "RCLE\020\225\003\022\024\n\017DESTINATION_OUT\020\226\003\022\017\n\nTHREEDF"
      "ACE\020\227\003\022\t\n\004OVER\020\230\003\022\017\n\nDISTRIBUTE\020\231\003\022\024\n\017IN"
      "ACTIVECAPTION\020\232\003\022\014\n\007LIGHTEN\020\233\003\022\030\n\023_WEBKI"
      "T_FIT_CONTENT\020\234\003\022\014\n\007LIGHTER\020\235\003\022\017\n\nCONTEX"
      "TUAL\020\236\003\022\t\n\004GRAY\020\237\003\022\022\n\rDARKTURQUOISE\020\240\003\022\r"
      "\n\010E_RESIZE\020\241\003\022\017\n\nLUMINOSITY\020\242\003\022\016\n\tLIST_I"
      "TEM\020\243\003\022\016\n\tLIMEGREEN\020\244\003\022\n\n\005FIXED\020\245\003\022\020\n\013MI"
      "N_CONTENT\020\246\003\022\021\n\014MEDIA_SLIDER\020\247\003\022\022\n\rVISIB"
      "LESTROKE\020\250\003\022\021\n\014CUBIC_BEZIER\020\251\003\022\021\n\014CLOSES"
      "T_SIDE\020\252\003\022\r\n\010RELATIVE\020\253\003\022\022\n\rNO_OPEN_QUOT"
      "E\020\254\003\022\014\n\007THISTLE\020\255\003\022\013\n\006VIOLET\020\256\003\022\r\n\010PORTR"
      "AIT\020\257\003\022\017\n\nFULLSCREEN\020\260\003\022\r\n\010HONEYDEW\020\261\003\022\016"
      "\n\tON_DEMAND\020\262\003\022\023\n\016CORNFLOWERBLUE\020\263\003\022\r\n\010D"
      "ARKBLUE\020\264\003\022\014\n\007OUTSIDE\020\265\003\022\r\n\010PROGRESS\020\266\003\022"
      "\021\n\014MEDIUMPURPLE\020\267\003\022\r\n\010DARKCYAN\020\270\003\022\r\n\010VER"
      "TICAL\020\271\003\022\016\n\tMONOSPACE\020\272\003\022\017\n\nBREAK_WORD\020\273"
      "\003\022\013\n\006SCREEN\020\274\003\022\022\n\rREBECCAPURPLE\020\275\003\022\014\n\007DA"
      "RKRED\020\276\003\022\020\n\013VERTICAL_LR\020\277\003\022\024\n\017OPTIMIZEQU"
      "ALITY\020\300\003\022\r\n\010ARMENIAN\020\301\003\022\020\n\013NWSE_RESIZE\020\302"
      "\003\022\025\n\020TEXT_BEFORE_EDGE\020\303\003\022\r\n\010OPTIONAL\020\304\003\022"
      "\016\n\tEXCLUSION\020\305\003\022\t\n\004BOTH\020\306\003\022\024\n\017MEDIUMTURQ"
      "UOISE\020\307\003\022\020\n\013LOWER_ROMAN\020\310\003\022\014\n\007REVERSE\020\311\003"
      "\022\025\n\020HANGUL_CONSONANT\020\312\003\022\017\n\nSOFT_LIGHT\020\313\003"
      "\022\t\n\004AQUA\020\314\003\022\021\n\014BUTTON_BEVEL\020\315\003\022\r\n\010GURMUK"
      "HI\020\316\003\022\023\n\016LIGHTSTEELBLUE\020\317\003\022\017\n\nSMALL_CAPS"
      "\020\320\003\022\r\n\010N_RESIZE\020\321\003\022\027\n\022TABLE_FOOTER_GROUP"
      "\020\322\003\022\023\n\016DESTINATION_IN\020\323\003\022\016\n\tOLIVEDRAB\020\324\003"
      "\022\036\n\031READ_WRITE_PLAINTEXT_ONLY\020\325\003\022\020\n\013PADD"
      "ING_BOX\020\326\003\022\017\n\nCOL_RESIZE\020\327\003\022.\n)_INTERNAL"
      "_MEDIA_TRACK_SELECTION_CHECKMARK\020\330\003\022\020\n\013L"
      "OWER_LATIN\020\331\003\022\023\n\016_WEBKIT_NOWRAP\020\332\003\022\n\n\005TA"
      "BLE\020\333\003\022\021\n\014BUTTONSHADOW\020\334\003\022\016\n\tPALEGREEN\020\335"
      "\003\022\n\n\005JIS90\020\336\003\022\020\n\013FIT_CONTENT\020\337\003\022\014\n\007STRET"
      "CH\020\340\003\022\r\n\010SEASHELL\020\341\003\022\024\n\017THREEDHIGHLIGHT\020"
      "\342\003\022\020\n\013VISIBLEFILL\020\343\003\022\021\n\014SPACE_AROUND\020\344\003\022"
      "\013\n\006COARSE\020\345\003\022\017\n\nAQUAMARINE\020\346\003\022\013\n\006DIGITS\020"
      "\347\003\022\021\n\014CURRENTCOLOR\020\350\003\022\014\n\007PAINTED\020\351\003\022\n\n\005T"
      "B_RL\020\352\003\022\017\n\nBUTTONFACE\020\353\003\022\016\n\tLAWNGREEN\020\354\003"
      "\022\016\n\tBURLYWOOD\020\355\003\022\032\n\025_WEBKIT_SMALL_CONTRO"
      "L\020\356\003\022\016\n\tSLATEBLUE\020\357\003\022\016\n\tMINTCREAM\020\360\003\022\t\n\004"
      "RUBY\020\361\003\022\n\n\005SOLID\020\362\003\022\024\n\017ULTRA_CONDENSED\020\363"
      "\003\022\r\n\010EXPANDED\020\364\003\022\020\n\013SADDLEBROWN\020\365\003\022\020\n\013VE"
      "RTICAL_RL\020\366\003\022\013\n\006SESAME\020\367\003\022\021\n\014_WEBKIT_BOD"
      "Y\020\370\003\022\025\n\020DESTINATION_ATOP\020\371\003\022\016\n\tMALAYALAM"
      "\020\372\003\022\021\n\014WRAP_REVERSE\020\373\003\022\014\n\007BALANCE\020\374\003\022\023\n\016"
      "VERTICAL_RIGHT\020\375\003\022\023\n\016NO_CLOSE_QUOTE\020\376\003\022\t"
      "\n\004FLEX\020\377\003\022\020\n\013PUSH_BUTTON\020\200\004\022\022\n\rDARKGOLDE"
      "NROD\020\201\004\022\017\n\nSATURATION\020\202\004\022\013\n\006MIDDLE\020\203\004\022\017\n"
      "\nSANDYBROWN\020\204\004\022\013\n\006HEBREW\020\205\004\022\r\n\010MENUTEXT\020"
      "\206\004\022\020\n\013INLINE_AXIS\020\207\004\022\r\n\010BASELINE\020\210\004\022\021\n\014_"
      "WEBKIT_GRAB\020\211\004\022\017\n\nDARKORANGE\020\212\004\022\021\n\014_WEBK"
      "IT_FLEX\020\213\004\022\016\n\tNW_RESIZE\020\214\004\022\r\n\010CONTENTS\020\215"
      "\004\022\t\n\004AUTO\020\216\004\022\017\n\nMARGIN_BOX\020\217\004\022\r\n\010DOCUMEN"
      "T\020\220\004\022\022\n\rPALEGOLDENROD\020\221\004\022\014\n\007ORDINAL\020\222\004\022\t"
      "\n\004HAND\020\223\004\022\014\n\007RUNNING\020\224\004\022\027\n\022CJK_EARTHLY_B"
      "RANCH\020\225\004\022\022\n\rTABLE_CAPTION\020\226\004\022(\n#MEDIA_TO"
      "GGLE_CLOSED_CAPTIONS_BUTTON\020\227\004\022\017\n\nAFTER_"
      "EDGE\020\230\004\022\031\n\024SLIDERTHUMB_VERTICAL\020\231\004\022\013\n\006CE"
      "NTER\020\232\004\022\020\n\013LIGHTYELLOW\020\233\004\022\022\n\rLAVENDERBLU"
      "SH\020\234\004\022)\n$_INTERNAL_MEDIA_CLOSED_CAPTIONS"
      "_ICON\020\235\004\022\014\n\007INHERIT\020\236\004\022\036\n\031MEDIA_CONTROLS"
      "_BACKGROUND\020\237\004\022\014\n\007JUSTIFY\020\240\004\022\027\n\022OPTIMIZE"
      "LEGIBILITY\020\241\004\022\034\n\027_WEBKIT_BASELINE_MIDDLE"
      "\020\242\004\022\013\n\006INDIGO\020\243\004\022\017\n\nMINIMAL_UI\020\244\004\022\016\n\tFIR"
      "EBRICK\020\245\004\022\016\n\tINDIANRED\020\246\004\022\023\n\016DARKOLIVEGR"
      "EEN\020\247\004\022\022\n\rSEMI_EXPANDED\020\250\004\022\016\n\tUNDERLINE\020"
      "\251\004\022\014\n\007MYANMAR\020\252\004\022\022\n\rSPACE_BETWEEN\020\253\004\022\t\n\004"
      "EASE\020\254\004\022\016\n\tALTERNATE\020\255\004\022\021\n\014MEDIUMORCHID\020"
      "\256\004\022\013\n\006SILVER\020\257\004\022\n\n\005COLOR\020\260\004\022\017\n\nCHARTREUS"
      "E\020\261\004\022\020\n\013EASE_IN_OUT\020\262\004\022\020\n\013SPRINGGREEN\020\263\004"
      "\022\020\n\013LIGHTSALMON\020\264\004\022\016\n\tTURQUOISE\020\265\004\022\t\n\004HI"
      "DE\020\266\004\022\022\n\rHORIZONTAL_TB\020\267\004\022\022\n\rVERTICAL_TE"
      "XT\020\270\004\022\n\n\005ALIAS\020\271\004\022\t\n\004GRID\020\272\004\022\037\n\032NO_DISCR"
      "ETIONARY_LIGATURES\020\273\004\022\017\n\nBACKGROUND\020\274\004\022\017"
      "\n\nDEVANAGARI\020\275\004\022\020\n\013TEXT_BOTTOM\020\276\004\022\016\n\tDAR"
      "KGREEN\020\277\004\022\014\n\007VISIBLE\020\300\004\022\021\n\014TABULAR_NUMS\020"
      "\301\004\022\013\n\006MANUAL\020\302\004\022\t\n\004ZOOM\020\303\004\022\026\n\021CJK_HEAVEN"
      "LY_STEM\020\304\004\022\n\n\005STEPS\020\305\004\022\021\n\014BOUNDING_BOX\020\306"
      "\004\022\017\n\nALPHABETIC\020\307\004\022\026\n\021AFTER_WHITE_SPACE\020"
      "\310\004\022\020\n\013ROW_REVERSE\020\311\004\022\037\n\032MEDIA_CURRENT_TI"
      "ME_DISPLAY\020\312\004\022\021\n\014MATHEMATICAL\020\313\004\022\026\n\021ETHI"
      "OPIC_HALEHAME\020\314\004\022\n\n\005RIGHT\020\315\004\022\016\n\tUPPERCAS"
      "E\020\316\004\022\026\n\021_WEBKIT_XXX_LARGE\020\317\004\022\007\n\002B4\020\320\004\022\007\n"
      "\002B5\020\321\004\022\020\n\013YELLOWGREEN\020\322\004\022)\n$MEDIA_CONTRO"
      "LS_FULLSCREEN_BACKGROUND\020\323\004\022\023\n\016LOWER_ARM"
      "ENIAN\020\324\004\022\013\n\006ORCHID\020\325\004\022\014\n\007NONZERO\020\326\004\022\n\n\005S"
      "LICE\020\327\004\022\n\n\005DENSE\020\330\004\022\017\n\nINTER_WORD\020\331\004\022\013\n\006"
      "BOTTOM\020\332\004\022\013\n\006PURPLE\020\333\004\022\n\n\005AVOID\020\334\004\022\r\n\010SE"
      "PARATE\020\335\004\022\013\n\006HANGUL\020\336\004\022\n\n\005LEGAL\020\337\004\022\026\n\021AL"
      "TERNATE_REVERSE\020\340\004\022\020\n\013PRESERVE_3D\020\341\004\022\016\n\t"
      "READ_ONLY\020\342\004\022\r\n\010ELLIPSIS\020\343\004\022\036\n\031MEDIA_OVE"
      "RLAY_PLAY_BUTTON\020\344\004\022\013\n\006BISQUE\020\345\004\022\r\n\010INFO"
      "TEXT\020\346\004\022\n\n\005KHAKI\020\347\004\022\n\n\005WHEAT\020\350\004\022\t\n\004BOLD\020"
      "\351\004\022\034\n\027NO_HISTORICAL_LIGATURES\020\352\004\022\022\n\rBIDI"
      "_OVERRIDE\020\353\004\022\020\n\013DEEPSKYBLUE\020\354\004\022\r\n\010EASE_O"
      "UT\020\355\004\022\024\n\017CJK_IDEOGRAPHIC\020\356\004\022\022\n\rOLDSTYLE_"
      "NUMS\020\357\004\022\"\n\035MEDIA_ENTER_FULLSCREEN_BUTTON"
      "\020\360\004\022\n\n\005SUPER\020\361\004\022\014\n\007CURSIVE\020\362\004\022\007\n\002ON\020\363\004\022\014"
      "\n\007CENTRAL\020\364\004\022$\n\037_INTERNAL_MEDIA_OVERFLOW"
      "_BUTTON\020\365\004\022\017\n\nSTANDALONE\020\366\004\022\013\n\006COLUMN\020\367\004"
      "\022\n\n\005CORAL\020\370\004\022\025\n\020DESTINATION_OVER\020\371\004\022\034\n\027D"
      "ISCRETIONARY_LIGATURES\020\372\004\022\n\n\005BEIGE\020\373\004\022\017\n"
      "\nTABLE_CELL\020\374\004\022\n\n\005AZURE\020\375\004\022\032\n\025TRAD_CHINE"
      "SE_INFORMAL\020\376\004\022\021\n\014TITLING_CAPS\020\377\004\022\024\n\017_WE"
      "BKIT_ZOOM_IN\020\200\005\022\n\n\005BLOCK\020\201\005\022\013\n\006OUTSET\020\202\005"
      "\022\024\n\017MEDIUMVIOLETRED\020\203\005\022\016\n\tROYALBLUE\020\204\005\022\022"
      "\n\rMENULIST_TEXT\020\205\005\022\016\n\tSW_RESIZE\020\206\005\022\r\n\010MU"
      "LTIPLY\020\207\005\022\025\n\020THREEDDARKSHADOW\020\210\005\022\t\n\004WRAP"
      "\020\211\005\022\017\n\nLIGHTCORAL\020\212\005\022\014\n\007ELLIPSE\020\213\005\022-\n(_I"
      "NTERNAL_ACTIVE_LIST_BOX_SELECTION_TEXT\020\214"
      "\005\022\n\n\005RIDGE\020\215\005\022\021\n\014_WEBKIT_AUTO\020\216\005\022\034\n\027_INT"
      "ERNAL_QUIRK_INHERIT\020\217\005\022\014\n\007INITIAL\020\220\005\022\014\n\007"
      "FUCHSIA\020\221\005\022\024\n\017MENULIST_BUTTON\020\222\005\022\023\n\016BLAN"
      "CHEDALMOND\020\223\005\022\n\n\005CARET\020\224\005\022\n\n\005START\020\225\005\022$\n"
      "\037_INTERNAL_MEDIA_CAST_OFF_BUTTON\020\226\005\022\013\n\006I"
      "TALIC\020\227\005\022\n\n\005IVORY\020\230\005\022\017\n\nBUTTONTEXT\020\231\005\022\023\n"
      "\016SEMI_CONDENSED\020\232\005\022\020\n\013INLINE_GRID\020\233\005\022\027\n\022"
      "_WEBKIT_ACTIVELINK\020\234\005\022\n\n\005SERIF\020\235\005\022\020\n\013FOR"
      "ESTGREEN\020\236\005\022\014\n\007BENGALI\020\237\005\022\014\n\007UPRIGHT\020\240\005\022"
      "\n\n\005RESET\020\241\005\022\n\n\005BEVEL\020\242\005\022\020\n\013IDEOGRAPHIC\020\243"
      "\005\022\013\n\006DARKEN\020\244\005\022\035\n\030MEDIA_VOLUME_SLIDERTHU"
      "MB\020\245\005\022\014\n\007DEFAULT\020\246\005\022\013\n\006INSIDE\020\247\005\022\n\n\005BELO"
      "W\020\250\005\022\016\n\tHIGHLIGHT\020\251\005\022\n\n\005EMBED\020\252\005\022\013\n\006GROO"
      "VE\020\253\005\022\020\n\013NESW_RESIZE\020\254\005\022\026\n\021STACKED_FRACT"
      "IONS\020\255\005\022\013\n\006UNSAFE\020\256\005\022\013\n\006MAROON\020\257\005\022\014\n\007KAN"
      "NADA\020\260\005\022\013\n\006SINGLE\020\261\005\022\007\n\002AT\020\262\005\022\010\n\003INK\020\263\005\022"
      "\021\n\014ARABIC_INDIC\020\264\005\022\030\n\023MEDIA_VOLUME_SLIDE"
      "R\020\265\005\022\023\n\016COLUMN_REVERSE\020\266\005\022\025\n\020_WEBKIT_ZOO"
      "M_OUT\020\267\005\022\t\n\004FILL\020\270\005\022\014\n\007EVENODD\020\271\005\022\013\n\006DOT"
      "TED\020\272\005\022\014\n\007DIMGRAY\020\273\005\022\013\n\006DASHED\020\274\005\022\r\n\010SEA"
      "GREEN\020\275\005\022\030\n\023TRAD_CHINESE_FORMAL\020\276\005\022\024\n\017ME"
      "DIUMSLATEBLUE\020\277\005\022\022\n\rPALETURQUOISE\020\300\005\022\026\n\021"
      "INNER_SPIN_BUTTON\020\301\005\022\013\n\006REPEAT\020\302\005\022\017\n\nDAR"
      "KORCHID\020\303\005\022\024\n\017_WEBKIT_ISOLATE\020\304\005\022\036\n\031SEAR"
      "CHFIELD_CANCEL_BUTTON\020\305\005\022\023\n\016ALL_SMALL_CA"
      "PS\020\306\005\022\007\n\002A3\020\307\005\022\007\n\002A5\020\310\005\022\007\n\002A4\020\311\005\022\017\n\nOPEN"
      "_QUOTE\020\312\005\022\017\n\nLIGHTGREEN\020\313\005\022\021\n\014SLASHED_ZE"
      "RO\020\314\005\022\017\n\nCOLOR_BURN\020\315\005\022\016\n\tAUTO_FLOW\020\316\005\022\014"
      "\n\007OVERLAY\020\317\005\022\013\n\006VISUAL\020\320\005\022\017\n\nSCALE_DOWN\020"
      "\321\005\022\r\n\010OVERLINE\020\322\005\022\n\n\005INSET\020\323\005\022\025\n\020MEDIUMA"
      "QUAMARINE\020\324\005\022\013\n\006SCROLL\020\325\005\022\022\n\rINVALID_VAL"
      "UE\020\326\005\"j\n\004Expr\022\'\n\004term\030\001 \002(\0132\031.css_proto_"
      "converter.Term\0229\n\016operator_terms\030\002 \003(\0132!"
      ".css_proto_converter.OperatorTerm\"i\n\014Ope"
      "ratorTerm\0220\n\t_operator\030\001 \002(\0132\035.css_proto"
      "_converter.Operator\022\'\n\004term\030\002 \002(\0132\031.css_"
      "proto_converter.Term\"\257\002\n\004Term\022:\n\016unary_o"
      "perator\030\001 \001(\0132\".css_proto_converter.Unar"
      "yOperator\0222\n\tterm_part\030\002 \001(\0132\035.css_proto"
      "_converter.TermPartH\000\022-\n\006string\030\003 \001(\0132\033."
      "css_proto_converter.StringH\000\022)\n\005ident\030\004 "
      "\001(\0132\032.css_proto_converter.Ident\022%\n\003uri\030\005"
      " \001(\0132\030.css_proto_converter.Uri\022/\n\010hexcol"
      "or\030\006 \001(\0132\035.css_proto_converter.HexcolorB"
      "\005\n\003rhs\"\213\003\n\010TermPart\022(\n\006number\030\001 \002(\0132\030.cs"
      "s_proto_converter.Num\022,\n\npercentage\030\002 \001("
      "\0132\030.css_proto_converter.Num\022+\n\006length\030\003 "
      "\001(\0132\033.css_proto_converter.Length\022%\n\003ems\030"
      "\004 \001(\0132\030.css_proto_converter.Num\022%\n\003exs\030\005"
      " \001(\0132\030.css_proto_converter.Num\022)\n\005angle\030"
      "\006 \001(\0132\032.css_proto_converter.Angle\022\'\n\004tim"
      "e\030\007 \001(\0132\031.css_proto_converter.Time\022\'\n\004fr"
      "eq\030\010 \001(\0132\031.css_proto_converter.Freq\022/\n\010f"
      "unction\030\t \001(\0132\035.css_proto_converter.Func"
      "tion\"o\n\010Function\022:\n\016function_token\030\001 \002(\013"
      "2\".css_proto_converter.FunctionToken\022\'\n\004"
      "expr\030\002 \002(\0132\031.css_proto_converter.Expr\"{\n"
      "\010Hexcolor\0227\n\013first_three\030\001 \002(\0132\".css_pro"
      "to_converter.HexcolorThree\0226\n\nlast_three"
      "\030\002 \001(\0132\".css_proto_converter.HexcolorThr"
      "ee\"\234\001\n\rHexcolorThree\022-\n\rascii_value_1\030\001 "
      "\002(\0162\026.css_proto_converter.H\022-\n\rascii_val"
      "ue_2\030\002 \002(\0162\026.css_proto_converter.H\022-\n\ras"
      "cii_value_3\030\003 \002(\0162\026.css_proto_converter."
      "H\"\336\003\n\005Input\022A\n\017css_parser_mode\030\001 \002(\0162(.c"
      "ss_proto_converter.Input.CSSParserMode\022\036"
      "\n\026defer_property_parsing\030\002 \002(\010\0224\n\013style_"
      "sheet\030\003 \002(\0132\037.css_proto_converter.StyleS"
      "heet\022\027\n\017is_live_profile\030\004 \002(\010\022I\n\023secure_"
      "context_mode\030\005 \002(\0162,.css_proto_converter"
      ".Input.SecureContextMode\"\230\001\n\rCSSParserMo"
      "de\022\025\n\021kHTMLStandardMode\020\000\022\023\n\017kHTMLQuirks"
      "Mode\020\001\022\025\n\021kSVGAttributeMode\020\002\022\030\n\024kCSSVie"
      "wportRuleMode\020\003\022\030\n\024kCSSFontFaceRuleMode\020"
      "\004\022\020\n\014kUASheetMode\020\005\"=\n\021SecureContextMode"
      "\022\024\n\020kInsecureContext\020\000\022\022\n\016kSecureContext"
      "\020\001*\203\002\n\001H\022\010\n\004ZERO\0200\022\007\n\003ONE\0201\022\007\n\003TWO\0202\022\t\n\005"
      "THREE\0203\022\010\n\004FOUR\0204\022\010\n\004FIVE\0205\022\007\n\003SIX\0206\022\t\n\005"
      "SEVEN\0207\022\t\n\005EIGHT\0208\022\010\n\004NINE\0209\022\013\n\007A_UPPER\020"
      "A\022\013\n\007B_UPPER\020B\022\013\n\007C_UPPER\020C\022\013\n\007D_UPPER\020D"
      "\022\013\n\007E_UPPER\020E\022\013\n\007F_UPPER\020F\022\013\n\007A_LOWER\020a\022"
      "\013\n\007B_LOWER\020b\022\013\n\007C_LOWER\020c\022\013\n\007D_LOWER\020d\022\013"
      "\n\007E_LOWER\020e\022\013\n\007F_LOWER\020f*$\n\nPseudoType\022\t"
      "\n\005CLASS\020\001\022\013\n\007ELEMENT\020\002*T\n\nCombinator\022\010\n\004"
      "NONE\020\001\022\n\n\006DOLLAR\020$\022\t\n\005COMMA\020,\022\020\n\014GREATER"
      "_THAN\020>\022\010\n\004PLUS\020+\022\t\n\005TILDE\020~"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 42508);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "css.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_css_2eproto
namespace css_proto_converter {
const ::google::protobuf::EnumDescriptor* Escape_AsciiValue_descriptor() {
  protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_css_2eproto::file_level_enum_descriptors[0];
}
bool Escape_AsciiValue_IsValid(int value) {
  switch (value) {
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Escape_AsciiValue Escape::SPACE;
const Escape_AsciiValue Escape::EXCLAMATION_POINT;
const Escape_AsciiValue Escape::DOUBLE_QUOTE;
const Escape_AsciiValue Escape::HASH;
const Escape_AsciiValue Escape::DOLLAR;
const Escape_AsciiValue Escape::PERCENT;
const Escape_AsciiValue Escape::AMPERSAND;
const Escape_AsciiValue Escape::APOSTROPHE;
const Escape_AsciiValue Escape::OPEN_PAREN;
const Escape_AsciiValue Escape::CLOSE_PAREN;
const Escape_AsciiValue Escape::STAR;
const Escape_AsciiValue Escape::PLUS;
const Escape_AsciiValue Escape::COMMA;
const Escape_AsciiValue Escape::MINUS;
const Escape_AsciiValue Escape::DOT;
const Escape_AsciiValue Escape::SLASH;
const Escape_AsciiValue Escape::ZERO;
const Escape_AsciiValue Escape::ONE;
const Escape_AsciiValue Escape::TWO;
const Escape_AsciiValue Escape::THREE;
const Escape_AsciiValue Escape::FOUR;
const Escape_AsciiValue Escape::FIVE;
const Escape_AsciiValue Escape::SIX;
const Escape_AsciiValue Escape::SEVEN;
const Escape_AsciiValue Escape::EIGHT;
const Escape_AsciiValue Escape::NINE;
const Escape_AsciiValue Escape::COLON;
const Escape_AsciiValue Escape::SEMI_COLON;
const Escape_AsciiValue Escape::LESS_THAN;
const Escape_AsciiValue Escape::EQUAL;
const Escape_AsciiValue Escape::GREATER_THAN;
const Escape_AsciiValue Escape::QUESTION;
const Escape_AsciiValue Escape::AT_SIGN;
const Escape_AsciiValue Escape::A_UPPER;
const Escape_AsciiValue Escape::B_UPPER;
const Escape_AsciiValue Escape::C_UPPER;
const Escape_AsciiValue Escape::D_UPPER;
const Escape_AsciiValue Escape::E_UPPER;
const Escape_AsciiValue Escape::F_UPPER;
const Escape_AsciiValue Escape::G_UPPER;
const Escape_AsciiValue Escape::H_UPPER;
const Escape_AsciiValue Escape::I_UPPER;
const Escape_AsciiValue Escape::J_UPPER;
const Escape_AsciiValue Escape::K_UPPER;
const Escape_AsciiValue Escape::L_UPPER;
const Escape_AsciiValue Escape::M_UPPER;
const Escape_AsciiValue Escape::N_UPPER;
const Escape_AsciiValue Escape::O_UPPER;
const Escape_AsciiValue Escape::P_UPPER;
const Escape_AsciiValue Escape::Q_UPPER;
const Escape_AsciiValue Escape::R_UPPER;
const Escape_AsciiValue Escape::S_UPPER;
const Escape_AsciiValue Escape::T_UPPER;
const Escape_AsciiValue Escape::U_UPPER;
const Escape_AsciiValue Escape::V_UPPER;
const Escape_AsciiValue Escape::W_UPPER;
const Escape_AsciiValue Escape::X_UPPER;
const Escape_AsciiValue Escape::Y_UPPER;
const Escape_AsciiValue Escape::Z_UPPER;
const Escape_AsciiValue Escape::OPEN_BRACKET;
const Escape_AsciiValue Escape::BACKSLASH;
const Escape_AsciiValue Escape::CLOSE_BRACKET;
const Escape_AsciiValue Escape::CARET;
const Escape_AsciiValue Escape::UNDERSCORE;
const Escape_AsciiValue Escape::BACKTICK;
const Escape_AsciiValue Escape::A_LOWER;
const Escape_AsciiValue Escape::B_LOWER;
const Escape_AsciiValue Escape::C_LOWER;
const Escape_AsciiValue Escape::D_LOWER;
const Escape_AsciiValue Escape::E_LOWER;
const Escape_AsciiValue Escape::F_LOWER;
const Escape_AsciiValue Escape::G_LOWER;
const Escape_AsciiValue Escape::H_LOWER;
const Escape_AsciiValue Escape::I_LOWER;
const Escape_AsciiValue Escape::J_LOWER;
const Escape_AsciiValue Escape::K_LOWER;
const Escape_AsciiValue Escape::L_LOWER;
const Escape_AsciiValue Escape::M_LOWER;
const Escape_AsciiValue Escape::N_LOWER;
const Escape_AsciiValue Escape::O_LOWER;
const Escape_AsciiValue Escape::P_LOWER;
const Escape_AsciiValue Escape::Q_LOWER;
const Escape_AsciiValue Escape::R_LOWER;
const Escape_AsciiValue Escape::S_LOWER;
const Escape_AsciiValue Escape::T_LOWER;
const Escape_AsciiValue Escape::U_LOWER;
const Escape_AsciiValue Escape::V_LOWER;
const Escape_AsciiValue Escape::W_LOWER;
const Escape_AsciiValue Escape::X_LOWER;
const Escape_AsciiValue Escape::Y_LOWER;
const Escape_AsciiValue Escape::Z_LOWER;
const Escape_AsciiValue Escape::OPEN_CURLY_BRACE;
const Escape_AsciiValue Escape::PIPE;
const Escape_AsciiValue Escape::CLOSE_CURLY_BRACE_;
const Escape_AsciiValue Escape::TILDE;
const Escape_AsciiValue Escape::AsciiValue_MIN;
const Escape_AsciiValue Escape::AsciiValue_MAX;
const int Escape::AsciiValue_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Nmstart_AsciiValue_descriptor() {
  protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_css_2eproto::file_level_enum_descriptors[1];
}
bool Nmstart_AsciiValue_IsValid(int value) {
  switch (value) {
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Nmstart_AsciiValue Nmstart::A_UPPER;
const Nmstart_AsciiValue Nmstart::B_UPPER;
const Nmstart_AsciiValue Nmstart::C_UPPER;
const Nmstart_AsciiValue Nmstart::D_UPPER;
const Nmstart_AsciiValue Nmstart::E_UPPER;
const Nmstart_AsciiValue Nmstart::F_UPPER;
const Nmstart_AsciiValue Nmstart::G_UPPER;
const Nmstart_AsciiValue Nmstart::H_UPPER;
const Nmstart_AsciiValue Nmstart::I_UPPER;
const Nmstart_AsciiValue Nmstart::J_UPPER;
const Nmstart_AsciiValue Nmstart::K_UPPER;
const Nmstart_AsciiValue Nmstart::L_UPPER;
const Nmstart_AsciiValue Nmstart::M_UPPER;
const Nmstart_AsciiValue Nmstart::N_UPPER;
const Nmstart_AsciiValue Nmstart::O_UPPER;
const Nmstart_AsciiValue Nmstart::P_UPPER;
const Nmstart_AsciiValue Nmstart::Q_UPPER;
const Nmstart_AsciiValue Nmstart::R_UPPER;
const Nmstart_AsciiValue Nmstart::S_UPPER;
const Nmstart_AsciiValue Nmstart::T_UPPER;
const Nmstart_AsciiValue Nmstart::U_UPPER;
const Nmstart_AsciiValue Nmstart::V_UPPER;
const Nmstart_AsciiValue Nmstart::W_UPPER;
const Nmstart_AsciiValue Nmstart::X_UPPER;
const Nmstart_AsciiValue Nmstart::Y_UPPER;
const Nmstart_AsciiValue Nmstart::Z_UPPER;
const Nmstart_AsciiValue Nmstart::A_LOWER;
const Nmstart_AsciiValue Nmstart::B_LOWER;
const Nmstart_AsciiValue Nmstart::C_LOWER;
const Nmstart_AsciiValue Nmstart::D_LOWER;
const Nmstart_AsciiValue Nmstart::E_LOWER;
const Nmstart_AsciiValue Nmstart::F_LOWER;
const Nmstart_AsciiValue Nmstart::G_LOWER;
const Nmstart_AsciiValue Nmstart::H_LOWER;
const Nmstart_AsciiValue Nmstart::I_LOWER;
const Nmstart_AsciiValue Nmstart::J_LOWER;
const Nmstart_AsciiValue Nmstart::K_LOWER;
const Nmstart_AsciiValue Nmstart::L_LOWER;
const Nmstart_AsciiValue Nmstart::M_LOWER;
const Nmstart_AsciiValue Nmstart::N_LOWER;
const Nmstart_AsciiValue Nmstart::O_LOWER;
const Nmstart_AsciiValue Nmstart::P_LOWER;
const Nmstart_AsciiValue Nmstart::Q_LOWER;
const Nmstart_AsciiValue Nmstart::R_LOWER;
const Nmstart_AsciiValue Nmstart::S_LOWER;
const Nmstart_AsciiValue Nmstart::T_LOWER;
const Nmstart_AsciiValue Nmstart::U_LOWER;
const Nmstart_AsciiValue Nmstart::V_LOWER;
const Nmstart_AsciiValue Nmstart::W_LOWER;
const Nmstart_AsciiValue Nmstart::X_LOWER;
const Nmstart_AsciiValue Nmstart::Y_LOWER;
const Nmstart_AsciiValue Nmstart::Z_LOWER;
const Nmstart_AsciiValue Nmstart::AsciiValue_MIN;
const Nmstart_AsciiValue Nmstart::AsciiValue_MAX;
const int Nmstart::AsciiValue_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Nmchar_AsciiValue_descriptor() {
  protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_css_2eproto::file_level_enum_descriptors[2];
}
bool Nmchar_AsciiValue_IsValid(int value) {
  switch (value) {
    case 45:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Nmchar_AsciiValue Nmchar::MINUS;
const Nmchar_AsciiValue Nmchar::ZERO;
const Nmchar_AsciiValue Nmchar::ONE;
const Nmchar_AsciiValue Nmchar::TWO;
const Nmchar_AsciiValue Nmchar::THREE;
const Nmchar_AsciiValue Nmchar::FOUR;
const Nmchar_AsciiValue Nmchar::FIVE;
const Nmchar_AsciiValue Nmchar::SIX;
const Nmchar_AsciiValue Nmchar::SEVEN;
const Nmchar_AsciiValue Nmchar::EIGHT;
const Nmchar_AsciiValue Nmchar::NINE;
const Nmchar_AsciiValue Nmchar::A_UPPER;
const Nmchar_AsciiValue Nmchar::B_UPPER;
const Nmchar_AsciiValue Nmchar::C_UPPER;
const Nmchar_AsciiValue Nmchar::D_UPPER;
const Nmchar_AsciiValue Nmchar::E_UPPER;
const Nmchar_AsciiValue Nmchar::F_UPPER;
const Nmchar_AsciiValue Nmchar::G_UPPER;
const Nmchar_AsciiValue Nmchar::H_UPPER;
const Nmchar_AsciiValue Nmchar::I_UPPER;
const Nmchar_AsciiValue Nmchar::J_UPPER;
const Nmchar_AsciiValue Nmchar::K_UPPER;
const Nmchar_AsciiValue Nmchar::L_UPPER;
const Nmchar_AsciiValue Nmchar::M_UPPER;
const Nmchar_AsciiValue Nmchar::N_UPPER;
const Nmchar_AsciiValue Nmchar::O_UPPER;
const Nmchar_AsciiValue Nmchar::P_UPPER;
const Nmchar_AsciiValue Nmchar::Q_UPPER;
const Nmchar_AsciiValue Nmchar::R_UPPER;
const Nmchar_AsciiValue Nmchar::S_UPPER;
const Nmchar_AsciiValue Nmchar::T_UPPER;
const Nmchar_AsciiValue Nmchar::U_UPPER;
const Nmchar_AsciiValue Nmchar::V_UPPER;
const Nmchar_AsciiValue Nmchar::W_UPPER;
const Nmchar_AsciiValue Nmchar::X_UPPER;
const Nmchar_AsciiValue Nmchar::Y_UPPER;
const Nmchar_AsciiValue Nmchar::Z_UPPER;
const Nmchar_AsciiValue Nmchar::A_LOWER;
const Nmchar_AsciiValue Nmchar::B_LOWER;
const Nmchar_AsciiValue Nmchar::C_LOWER;
const Nmchar_AsciiValue Nmchar::D_LOWER;
const Nmchar_AsciiValue Nmchar::E_LOWER;
const Nmchar_AsciiValue Nmchar::F_LOWER;
const Nmchar_AsciiValue Nmchar::G_LOWER;
const Nmchar_AsciiValue Nmchar::H_LOWER;
const Nmchar_AsciiValue Nmchar::I_LOWER;
const Nmchar_AsciiValue Nmchar::J_LOWER;
const Nmchar_AsciiValue Nmchar::K_LOWER;
const Nmchar_AsciiValue Nmchar::L_LOWER;
const Nmchar_AsciiValue Nmchar::M_LOWER;
const Nmchar_AsciiValue Nmchar::N_LOWER;
const Nmchar_AsciiValue Nmchar::O_LOWER;
const Nmchar_AsciiValue Nmchar::P_LOWER;
const Nmchar_AsciiValue Nmchar::Q_LOWER;
const Nmchar_AsciiValue Nmchar::R_LOWER;
const Nmchar_AsciiValue Nmchar::S_LOWER;
const Nmchar_AsciiValue Nmchar::T_LOWER;
const Nmchar_AsciiValue Nmchar::U_LOWER;
const Nmchar_AsciiValue Nmchar::V_LOWER;
const Nmchar_AsciiValue Nmchar::W_LOWER;
const Nmchar_AsciiValue Nmchar::X_LOWER;
const Nmchar_AsciiValue Nmchar::Y_LOWER;
const Nmchar_AsciiValue Nmchar::Z_LOWER;
const Nmchar_AsciiValue Nmchar::AsciiValue_MIN;
const Nmchar_AsciiValue Nmchar::AsciiValue_MAX;
const int Nmchar::AsciiValue_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* StringCharOrQuote_QuoteChar_descriptor() {
  protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_css_2eproto::file_level_enum_descriptors[3];
}
bool StringCharOrQuote_QuoteChar_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const StringCharOrQuote_QuoteChar StringCharOrQuote::UNSET;
const StringCharOrQuote_QuoteChar StringCharOrQuote::IS_SET;
const StringCharOrQuote_QuoteChar StringCharOrQuote::QuoteChar_MIN;
const StringCharOrQuote_QuoteChar StringCharOrQuote::QuoteChar_MAX;
const int StringCharOrQuote::QuoteChar_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* StringChar_Space_descriptor() {
  protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_css_2eproto::file_level_enum_descriptors[4];
}
bool StringChar_Space_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const StringChar_Space StringChar::UNSET;
const StringChar_Space StringChar::IS_SET;
const StringChar_Space StringChar::Space_MIN;
const StringChar_Space StringChar::Space_MAX;
const int StringChar::Space_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* UrlChar_AsciiValue_descriptor() {
  protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_css_2eproto::file_level_enum_descriptors[5];
}
bool UrlChar_AsciiValue_IsValid(int value) {
  switch (value) {
    case 0:
    case 9:
    case 33:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const UrlChar_AsciiValue UrlChar::NUL;
const UrlChar_AsciiValue UrlChar::HT;
const UrlChar_AsciiValue UrlChar::EXCLAMATION_POINT;
const UrlChar_AsciiValue UrlChar::HASH;
const UrlChar_AsciiValue UrlChar::DOLLAR;
const UrlChar_AsciiValue UrlChar::PERCENT;
const UrlChar_AsciiValue UrlChar::AMPERSAND;
const UrlChar_AsciiValue UrlChar::APOSTROPHE;
const UrlChar_AsciiValue UrlChar::OPEN_PAREN;
const UrlChar_AsciiValue UrlChar::CLOSE_PAREN;
const UrlChar_AsciiValue UrlChar::STAR;
const UrlChar_AsciiValue UrlChar::PLUS;
const UrlChar_AsciiValue UrlChar::COMMA;
const UrlChar_AsciiValue UrlChar::MINUS;
const UrlChar_AsciiValue UrlChar::DOT;
const UrlChar_AsciiValue UrlChar::SLASH;
const UrlChar_AsciiValue UrlChar::ZERO;
const UrlChar_AsciiValue UrlChar::ONE;
const UrlChar_AsciiValue UrlChar::TWO;
const UrlChar_AsciiValue UrlChar::THREE;
const UrlChar_AsciiValue UrlChar::FOUR;
const UrlChar_AsciiValue UrlChar::FIVE;
const UrlChar_AsciiValue UrlChar::SIX;
const UrlChar_AsciiValue UrlChar::SEVEN;
const UrlChar_AsciiValue UrlChar::EIGHT;
const UrlChar_AsciiValue UrlChar::NINE;
const UrlChar_AsciiValue UrlChar::COLON;
const UrlChar_AsciiValue UrlChar::SEMI_COLON;
const UrlChar_AsciiValue UrlChar::LESS_THAN;
const UrlChar_AsciiValue UrlChar::EQUAL;
const UrlChar_AsciiValue UrlChar::GREATER_THAN;
const UrlChar_AsciiValue UrlChar::QUESTION;
const UrlChar_AsciiValue UrlChar::AT_SIGN;
const UrlChar_AsciiValue UrlChar::A_UPPER;
const UrlChar_AsciiValue UrlChar::B_UPPER;
const UrlChar_AsciiValue UrlChar::C_UPPER;
const UrlChar_AsciiValue UrlChar::D_UPPER;
const UrlChar_AsciiValue UrlChar::E_UPPER;
const UrlChar_AsciiValue UrlChar::F_UPPER;
const UrlChar_AsciiValue UrlChar::G_UPPER;
const UrlChar_AsciiValue UrlChar::H_UPPER;
const UrlChar_AsciiValue UrlChar::I_UPPER;
const UrlChar_AsciiValue UrlChar::J_UPPER;
const UrlChar_AsciiValue UrlChar::K_UPPER;
const UrlChar_AsciiValue UrlChar::L_UPPER;
const UrlChar_AsciiValue UrlChar::M_UPPER;
const UrlChar_AsciiValue UrlChar::N_UPPER;
const UrlChar_AsciiValue UrlChar::O_UPPER;
const UrlChar_AsciiValue UrlChar::P_UPPER;
const UrlChar_AsciiValue UrlChar::Q_UPPER;
const UrlChar_AsciiValue UrlChar::R_UPPER;
const UrlChar_AsciiValue UrlChar::S_UPPER;
const UrlChar_AsciiValue UrlChar::T_UPPER;
const UrlChar_AsciiValue UrlChar::U_UPPER;
const UrlChar_AsciiValue UrlChar::V_UPPER;
const UrlChar_AsciiValue UrlChar::W_UPPER;
const UrlChar_AsciiValue UrlChar::X_UPPER;
const UrlChar_AsciiValue UrlChar::Y_UPPER;
const UrlChar_AsciiValue UrlChar::Z_UPPER;
const UrlChar_AsciiValue UrlChar::OPEN_BRACKET;
const UrlChar_AsciiValue UrlChar::BACKSLASH;
const UrlChar_AsciiValue UrlChar::CLOSE_BRACKET;
const UrlChar_AsciiValue UrlChar::CARET;
const UrlChar_AsciiValue UrlChar::UNDERSCORE;
const UrlChar_AsciiValue UrlChar::BACKTICK;
const UrlChar_AsciiValue UrlChar::A_LOWER;
const UrlChar_AsciiValue UrlChar::B_LOWER;
const UrlChar_AsciiValue UrlChar::C_LOWER;
const UrlChar_AsciiValue UrlChar::D_LOWER;
const UrlChar_AsciiValue UrlChar::E_LOWER;
const UrlChar_AsciiValue UrlChar::F_LOWER;
const UrlChar_AsciiValue UrlChar::G_LOWER;
const UrlChar_AsciiValue UrlChar::H_LOWER;
const UrlChar_AsciiValue UrlChar::I_LOWER;
const UrlChar_AsciiValue UrlChar::J_LOWER;
const UrlChar_AsciiValue UrlChar::K_LOWER;
const UrlChar_AsciiValue UrlChar::L_LOWER;
const UrlChar_AsciiValue UrlChar::M_LOWER;
const UrlChar_AsciiValue UrlChar::N_LOWER;
const UrlChar_AsciiValue UrlChar::O_LOWER;
const UrlChar_AsciiValue UrlChar::P_LOWER;
const UrlChar_AsciiValue UrlChar::Q_LOWER;
const UrlChar_AsciiValue UrlChar::R_LOWER;
const UrlChar_AsciiValue UrlChar::S_LOWER;
const UrlChar_AsciiValue UrlChar::T_LOWER;
const UrlChar_AsciiValue UrlChar::U_LOWER;
const UrlChar_AsciiValue UrlChar::V_LOWER;
const UrlChar_AsciiValue UrlChar::W_LOWER;
const UrlChar_AsciiValue UrlChar::X_LOWER;
const UrlChar_AsciiValue UrlChar::Y_LOWER;
const UrlChar_AsciiValue UrlChar::Z_LOWER;
const UrlChar_AsciiValue UrlChar::OPEN_CURLY_BRACE;
const UrlChar_AsciiValue UrlChar::PIPE;
const UrlChar_AsciiValue UrlChar::CLOSE_CURLY_BRACE_;
const UrlChar_AsciiValue UrlChar::TILDE;
const UrlChar_AsciiValue UrlChar::AsciiValue_MIN;
const UrlChar_AsciiValue UrlChar::AsciiValue_MAX;
const int UrlChar::AsciiValue_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* UnrepeatedW_AsciiValue_descriptor() {
  protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_css_2eproto::file_level_enum_descriptors[6];
}
bool UnrepeatedW_AsciiValue_IsValid(int value) {
  switch (value) {
    case 9:
    case 10:
    case 12:
    case 13:
    case 32:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const UnrepeatedW_AsciiValue UnrepeatedW::HT;
const UnrepeatedW_AsciiValue UnrepeatedW::LF;
const UnrepeatedW_AsciiValue UnrepeatedW::FF;
const UnrepeatedW_AsciiValue UnrepeatedW::CR;
const UnrepeatedW_AsciiValue UnrepeatedW::SPACE;
const UnrepeatedW_AsciiValue UnrepeatedW::AsciiValue_MIN;
const UnrepeatedW_AsciiValue UnrepeatedW::AsciiValue_MAX;
const int UnrepeatedW::AsciiValue_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Nl_NewlineKind_descriptor() {
  protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_css_2eproto::file_level_enum_descriptors[7];
}
bool Nl_NewlineKind_IsValid(int value) {
  switch (value) {
    case 1:
    case 10:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Nl_NewlineKind Nl::LF;
const Nl_NewlineKind Nl::CR_LF;
const Nl_NewlineKind Nl::CR;
const Nl_NewlineKind Nl::FF;
const Nl_NewlineKind Nl::NewlineKind_MIN;
const Nl_NewlineKind Nl::NewlineKind_MAX;
const int Nl::NewlineKind_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Length_Unit_descriptor() {
  protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_css_2eproto::file_level_enum_descriptors[8];
}
bool Length_Unit_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Length_Unit Length::PX;
const Length_Unit Length::CM;
const Length_Unit Length::MM;
const Length_Unit Length::IN;
const Length_Unit Length::PT;
const Length_Unit Length::PC;
const Length_Unit Length::Unit_MIN;
const Length_Unit Length::Unit_MAX;
const int Length::Unit_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Angle_Unit_descriptor() {
  protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_css_2eproto::file_level_enum_descriptors[9];
}
bool Angle_Unit_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Angle_Unit Angle::DEG;
const Angle_Unit Angle::RAD;
const Angle_Unit Angle::GRAD;
const Angle_Unit Angle::Unit_MIN;
const Angle_Unit Angle::Unit_MAX;
const int Angle::Unit_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Time_Unit_descriptor() {
  protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_css_2eproto::file_level_enum_descriptors[10];
}
bool Time_Unit_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Time_Unit Time::MS;
const Time_Unit Time::S;
const Time_Unit Time::Unit_MIN;
const Time_Unit Time::Unit_MAX;
const int Time::Unit_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Freq_Unit_descriptor() {
  protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_css_2eproto::file_level_enum_descriptors[11];
}
bool Freq_Unit_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Freq_Unit Freq::_HZ;
const Freq_Unit Freq::KHZ;
const Freq_Unit Freq::Unit_MIN;
const Freq_Unit Freq::Unit_MAX;
const int Freq::Unit_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CharsetDeclaration_EncodingId_descriptor() {
  protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_css_2eproto::file_level_enum_descriptors[12];
}
bool CharsetDeclaration_EncodingId_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CharsetDeclaration_EncodingId CharsetDeclaration::UTF_8;
const CharsetDeclaration_EncodingId CharsetDeclaration::UTF_16;
const CharsetDeclaration_EncodingId CharsetDeclaration::UTF_32;
const CharsetDeclaration_EncodingId CharsetDeclaration::EncodingId_MIN;
const CharsetDeclaration_EncodingId CharsetDeclaration::EncodingId_MAX;
const int CharsetDeclaration::EncodingId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ViewportProperty_PropertyId_descriptor() {
  protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_css_2eproto::file_level_enum_descriptors[13];
}
bool ViewportProperty_PropertyId_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ViewportProperty_PropertyId ViewportProperty::MIN_WIDTH;
const ViewportProperty_PropertyId ViewportProperty::MAX_WIDTH;
const ViewportProperty_PropertyId ViewportProperty::WIDTH;
const ViewportProperty_PropertyId ViewportProperty::MIN_HEIGHT;
const ViewportProperty_PropertyId ViewportProperty::MAX_HEIGHT;
const ViewportProperty_PropertyId ViewportProperty::HEIGHT;
const ViewportProperty_PropertyId ViewportProperty::ZOOM;
const ViewportProperty_PropertyId ViewportProperty::MIN_ZOOM;
const ViewportProperty_PropertyId ViewportProperty::USER_ZOOM;
const ViewportProperty_PropertyId ViewportProperty::MAX_ZOOM;
const ViewportProperty_PropertyId ViewportProperty::ORIENTATION;
const ViewportProperty_PropertyId ViewportProperty::PropertyId_MIN;
const ViewportProperty_PropertyId ViewportProperty::PropertyId_MAX;
const int ViewportProperty::PropertyId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ViewportValue_ValueId_descriptor() {
  protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_css_2eproto::file_level_enum_descriptors[14];
}
bool ViewportValue_ValueId_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ViewportValue_ValueId ViewportValue::LANDSCAPE;
const ViewportValue_ValueId ViewportValue::PORTRAIT;
const ViewportValue_ValueId ViewportValue::AUTO;
const ViewportValue_ValueId ViewportValue::ZOOM;
const ViewportValue_ValueId ViewportValue::FIXED;
const ViewportValue_ValueId ViewportValue::NONE;
const ViewportValue_ValueId ViewportValue::ValueId_MIN;
const ViewportValue_ValueId ViewportValue::ValueId_MAX;
const int ViewportValue::ValueId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Import_SrcId_descriptor() {
  protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_css_2eproto::file_level_enum_descriptors[15];
}
bool Import_SrcId_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Import_SrcId Import::RELATIVE_STRING;
const Import_SrcId Import::FULL_URL;
const Import_SrcId Import::SrcId_MIN;
const Import_SrcId Import::SrcId_MAX;
const int Import::SrcId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* MediaQueryPartTwo_NotOrOnly_descriptor() {
  protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_css_2eproto::file_level_enum_descriptors[16];
}
bool MediaQueryPartTwo_NotOrOnly_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const MediaQueryPartTwo_NotOrOnly MediaQueryPartTwo::NOT;
const MediaQueryPartTwo_NotOrOnly MediaQueryPartTwo::ONLY;
const MediaQueryPartTwo_NotOrOnly MediaQueryPartTwo::NotOrOnly_MIN;
const MediaQueryPartTwo_NotOrOnly MediaQueryPartTwo::NotOrOnly_MAX;
const int MediaQueryPartTwo::NotOrOnly_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* MediaType_ValueId_descriptor() {
  protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_css_2eproto::file_level_enum_descriptors[17];
}
bool MediaType_ValueId_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const MediaType_ValueId MediaType::ALL;
const MediaType_ValueId MediaType::BRAILLE;
const MediaType_ValueId MediaType::EMBOSSED;
const MediaType_ValueId MediaType::HANDHELD;
const MediaType_ValueId MediaType::PRINT;
const MediaType_ValueId MediaType::PROJECTION;
const MediaType_ValueId MediaType::SCREEN;
const MediaType_ValueId MediaType::SPEECH;
const MediaType_ValueId MediaType::TTY;
const MediaType_ValueId MediaType::TV;
const MediaType_ValueId MediaType::INVALID_MEDIA_TYPE;
const MediaType_ValueId MediaType::ValueId_MIN;
const MediaType_ValueId MediaType::ValueId_MAX;
const int MediaType::ValueId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* MfName_ValueId_descriptor() {
  protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_css_2eproto::file_level_enum_descriptors[18];
}
bool MfName_ValueId_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const MfName_ValueId MfName::ANY_HOVER;
const MfName_ValueId MfName::ANY_POINTER;
const MfName_ValueId MfName::COLOR;
const MfName_ValueId MfName::COLOR_INDEX;
const MfName_ValueId MfName::COLOR_GAMUT;
const MfName_ValueId MfName::GRID;
const MfName_ValueId MfName::MONOCHROME;
const MfName_ValueId MfName::HEIGHT;
const MfName_ValueId MfName::HOVER;
const MfName_ValueId MfName::WIDTH;
const MfName_ValueId MfName::ORIENTATION;
const MfName_ValueId MfName::ASPECT_RATIO;
const MfName_ValueId MfName::DEVICE_ASPECT_RATIO;
const MfName_ValueId MfName::_WEBKIT_DEVICE_PIXEL_RATIO;
const MfName_ValueId MfName::DEVICE_HEIGHT;
const MfName_ValueId MfName::DEVICE_WIDTH;
const MfName_ValueId MfName::DISPLAY_MODE;
const MfName_ValueId MfName::MAX_COLOR;
const MfName_ValueId MfName::MAX_COLOR_INDEX;
const MfName_ValueId MfName::MAX_ASPECT_RATIO;
const MfName_ValueId MfName::MAX_DEVICE_ASPECT_RATIO;
const MfName_ValueId MfName::_WEBKIT_MAX_DEVICE_PIXEL_RATIO;
const MfName_ValueId MfName::MAX_DEVICE_HEIGHT;
const MfName_ValueId MfName::MAX_DEVICE_WIDTH;
const MfName_ValueId MfName::MAX_HEIGHT;
const MfName_ValueId MfName::MAX_MONOCHROME;
const MfName_ValueId MfName::MAX_WIDTH;
const MfName_ValueId MfName::MAX_RESOLUTION;
const MfName_ValueId MfName::MIN_COLOR;
const MfName_ValueId MfName::MIN_COLOR_INDEX;
const MfName_ValueId MfName::MIN_ASPECT_RATIO;
const MfName_ValueId MfName::MIN_DEVICE_ASPECT_RATIO;
const MfName_ValueId MfName::_WEBKIT_MIN_DEVICE_PIXEL_RATIO;
const MfName_ValueId MfName::MIN_DEVICE_HEIGHT;
const MfName_ValueId MfName::MIN_DEVICE_WIDTH;
const MfName_ValueId MfName::MIN_HEIGHT;
const MfName_ValueId MfName::MIN_MONOCHROME;
const MfName_ValueId MfName::MIN_WIDTH;
const MfName_ValueId MfName::MIN_RESOLUTION;
const MfName_ValueId MfName::POINTER;
const MfName_ValueId MfName::RESOLUTION;
const MfName_ValueId MfName::_WEBKIT_TRANSFORM_3D;
const MfName_ValueId MfName::SCAN;
const MfName_ValueId MfName::SHAPE;
const MfName_ValueId MfName::IMMERSIVE;
const MfName_ValueId MfName::INVALID_NAME;
const MfName_ValueId MfName::ValueId_MIN;
const MfName_ValueId MfName::ValueId_MAX;
const int MfName::ValueId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Operator_AsciiValue_descriptor() {
  protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_css_2eproto::file_level_enum_descriptors[19];
}
bool Operator_AsciiValue_IsValid(int value) {
  switch (value) {
    case 44:
    case 47:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Operator_AsciiValue Operator::COMMA;
const Operator_AsciiValue Operator::SLASH;
const Operator_AsciiValue Operator::AsciiValue_MIN;
const Operator_AsciiValue Operator::AsciiValue_MAX;
const int Operator::AsciiValue_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* UnaryOperator_AsciiValue_descriptor() {
  protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_css_2eproto::file_level_enum_descriptors[20];
}
bool UnaryOperator_AsciiValue_IsValid(int value) {
  switch (value) {
    case 43:
    case 45:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const UnaryOperator_AsciiValue UnaryOperator::PLUS;
const UnaryOperator_AsciiValue UnaryOperator::MINUS;
const UnaryOperator_AsciiValue UnaryOperator::AsciiValue_MIN;
const UnaryOperator_AsciiValue UnaryOperator::AsciiValue_MAX;
const int UnaryOperator::AsciiValue_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Property_NameId_descriptor() {
  protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_css_2eproto::file_level_enum_descriptors[21];
}
bool Property_NameId_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
    case 137:
    case 138:
    case 139:
    case 140:
    case 141:
    case 142:
    case 143:
    case 144:
    case 145:
    case 146:
    case 147:
    case 148:
    case 149:
    case 150:
    case 151:
    case 152:
    case 153:
    case 154:
    case 155:
    case 156:
    case 157:
    case 158:
    case 159:
    case 160:
    case 161:
    case 162:
    case 163:
    case 164:
    case 165:
    case 166:
    case 167:
    case 168:
    case 169:
    case 170:
    case 171:
    case 172:
    case 173:
    case 174:
    case 175:
    case 176:
    case 177:
    case 178:
    case 179:
    case 180:
    case 181:
    case 182:
    case 183:
    case 184:
    case 185:
    case 186:
    case 187:
    case 188:
    case 189:
    case 190:
    case 191:
    case 192:
    case 193:
    case 194:
    case 195:
    case 196:
    case 197:
    case 198:
    case 199:
    case 200:
    case 201:
    case 202:
    case 203:
    case 204:
    case 205:
    case 206:
    case 207:
    case 208:
    case 209:
    case 210:
    case 211:
    case 212:
    case 213:
    case 214:
    case 215:
    case 216:
    case 217:
    case 218:
    case 219:
    case 220:
    case 221:
    case 222:
    case 223:
    case 224:
    case 225:
    case 226:
    case 227:
    case 228:
    case 229:
    case 230:
    case 231:
    case 232:
    case 233:
    case 234:
    case 235:
    case 236:
    case 237:
    case 238:
    case 239:
    case 240:
    case 241:
    case 242:
    case 243:
    case 244:
    case 245:
    case 246:
    case 247:
    case 248:
    case 249:
    case 250:
    case 251:
    case 252:
    case 253:
    case 254:
    case 255:
    case 256:
    case 257:
    case 258:
    case 259:
    case 260:
    case 261:
    case 262:
    case 263:
    case 264:
    case 265:
    case 266:
    case 267:
    case 268:
    case 269:
    case 270:
    case 271:
    case 272:
    case 273:
    case 274:
    case 275:
    case 276:
    case 277:
    case 278:
    case 279:
    case 280:
    case 281:
    case 282:
    case 283:
    case 284:
    case 285:
    case 286:
    case 287:
    case 288:
    case 289:
    case 290:
    case 291:
    case 292:
    case 293:
    case 294:
    case 295:
    case 296:
    case 297:
    case 298:
    case 299:
    case 300:
    case 301:
    case 302:
    case 303:
    case 304:
    case 305:
    case 306:
    case 307:
    case 308:
    case 309:
    case 310:
    case 311:
    case 312:
    case 313:
    case 314:
    case 315:
    case 316:
    case 317:
    case 318:
    case 319:
    case 320:
    case 321:
    case 322:
    case 323:
    case 324:
    case 325:
    case 326:
    case 327:
    case 328:
    case 329:
    case 330:
    case 331:
    case 332:
    case 333:
    case 334:
    case 335:
    case 336:
    case 337:
    case 338:
    case 339:
    case 340:
    case 341:
    case 342:
    case 343:
    case 344:
    case 345:
    case 346:
    case 347:
    case 348:
    case 349:
    case 350:
    case 351:
    case 352:
    case 353:
    case 354:
    case 355:
    case 356:
    case 357:
    case 358:
    case 359:
    case 360:
    case 361:
    case 362:
    case 363:
    case 364:
    case 365:
    case 366:
    case 367:
    case 368:
    case 369:
    case 370:
    case 371:
    case 372:
    case 373:
    case 374:
    case 375:
    case 376:
    case 377:
    case 378:
    case 379:
    case 380:
    case 381:
    case 382:
    case 383:
    case 384:
    case 385:
    case 386:
    case 387:
    case 388:
    case 389:
    case 390:
    case 391:
    case 392:
    case 393:
    case 394:
    case 395:
    case 396:
    case 397:
    case 398:
    case 399:
    case 400:
    case 401:
    case 402:
    case 403:
    case 404:
    case 405:
    case 406:
    case 407:
    case 408:
    case 409:
    case 410:
    case 411:
    case 412:
    case 413:
    case 414:
    case 415:
    case 416:
    case 417:
    case 418:
    case 419:
    case 420:
    case 421:
    case 422:
    case 423:
    case 424:
    case 425:
    case 426:
    case 427:
    case 428:
    case 429:
    case 430:
    case 431:
    case 432:
    case 433:
    case 434:
    case 435:
    case 436:
    case 437:
    case 438:
    case 439:
    case 440:
    case 441:
    case 442:
    case 443:
    case 444:
    case 445:
    case 446:
    case 447:
    case 448:
    case 449:
    case 450:
    case 451:
    case 452:
    case 453:
    case 454:
    case 455:
    case 456:
    case 457:
    case 458:
    case 459:
    case 460:
    case 461:
    case 462:
    case 463:
    case 464:
    case 465:
    case 466:
    case 467:
    case 468:
    case 469:
    case 470:
    case 471:
    case 472:
    case 473:
    case 474:
    case 475:
    case 476:
    case 477:
    case 478:
    case 479:
    case 480:
    case 481:
    case 482:
    case 483:
    case 484:
    case 485:
    case 486:
    case 487:
    case 488:
    case 489:
    case 490:
    case 491:
    case 492:
    case 493:
    case 494:
    case 495:
    case 496:
    case 497:
    case 498:
    case 499:
    case 500:
    case 501:
    case 502:
    case 503:
    case 504:
    case 505:
    case 506:
    case 507:
    case 508:
    case 509:
    case 510:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Property_NameId Property::ALL;
const Property_NameId Property::_WEBKIT_ANIMATION_ITERATION_COUNT;
const Property_NameId Property::FONT_FEATURE_SETTINGS;
const Property_NameId Property::_WEBKIT_TEXT_EMPHASIS_POSITION;
const Property_NameId Property::_WEBKIT_TEXT_EMPHASIS_STYLE;
const Property_NameId Property::GRID_TEMPLATE_ROWS;
const Property_NameId Property::TEXT_UNDERLINE_POSITION;
const Property_NameId Property::_WEBKIT_FLEX_GROW;
const Property_NameId Property::SCROLL_MARGIN_RIGHT;
const Property_NameId Property::_WEBKIT_COLUMN_RULE;
const Property_NameId Property::_WEBKIT_ORDER;
const Property_NameId Property::GRID_ROW_GAP;
const Property_NameId Property::BACKDROP_FILTER;
const Property_NameId Property::FONT_VARIANT_EAST_ASIAN;
const Property_NameId Property::BUFFERED_RENDERING;
const Property_NameId Property::_WEBKIT_APPEARANCE;
const Property_NameId Property::OUTLINE_WIDTH;
const Property_NameId Property::ALIGNMENT_BASELINE;
const Property_NameId Property::_WEBKIT_FLEX_FLOW;
const Property_NameId Property::COLUMN_RULE;
const Property_NameId Property::GRID_COLUMN_GAP;
const Property_NameId Property::_WEBKIT_BORDER_AFTER;
const Property_NameId Property::_WEBKIT_COLUMN_BREAK_INSIDE;
const Property_NameId Property::_WEBKIT_SHAPE_OUTSIDE;
const Property_NameId Property::_WEBKIT_PRINT_COLOR_ADJUST;
const Property_NameId Property::LIST_STYLE_TYPE;
const Property_NameId Property::PAGE_BREAK_BEFORE;
const Property_NameId Property::FLOOD_COLOR;
const Property_NameId Property::TEXT_ANCHOR;
const Property_NameId Property::_WEBKIT_PADDING_START;
const Property_NameId Property::_WEBKIT_USER_SELECT;
const Property_NameId Property::_WEBKIT_COLUMN_RULE_COLOR;
const Property_NameId Property::PADDING_LEFT;
const Property_NameId Property::_WEBKIT_BACKFACE_VISIBILITY;
const Property_NameId Property::_WEBKIT_MARGIN_BEFORE;
const Property_NameId Property::BREAK_INSIDE;
const Property_NameId Property::COLUMN_COUNT;
const Property_NameId Property::_WEBKIT_LOGICAL_HEIGHT;
const Property_NameId Property::PERSPECTIVE;
const Property_NameId Property::MAX_BLOCK_SIZE;
const Property_NameId Property::_WEBKIT_ANIMATION_PLAY_STATE;
const Property_NameId Property::BORDER_IMAGE_REPEAT;
const Property_NameId Property::_WEBKIT_FONT_SIZE_DELTA;
const Property_NameId Property::SCROLL_PADDING_BOTTOM;
const Property_NameId Property::BORDER_RIGHT_STYLE;
const Property_NameId Property::BORDER_LEFT_STYLE;
const Property_NameId Property::SCROLL_MARGIN_BLOCK;
const Property_NameId Property::FLEX_FLOW;
const Property_NameId Property::OUTLINE_COLOR;
const Property_NameId Property::FLEX_GROW;
const Property_NameId Property::MAX_WIDTH;
const Property_NameId Property::GRID_COLUMN;
const Property_NameId Property::IMAGE_ORIENTATION;
const Property_NameId Property::ANIMATION_DURATION;
const Property_NameId Property::_WEBKIT_COLUMNS;
const Property_NameId Property::_WEBKIT_BOX_FLEX_GROUP;
const Property_NameId Property::_WEBKIT_ANIMATION_DELAY;
const Property_NameId Property::_EPUB_TEXT_EMPHASIS;
const Property_NameId Property::FLEX_SHRINK;
const Property_NameId Property::TEXT_RENDERING;
const Property_NameId Property::ALIGN_ITEMS;
const Property_NameId Property::BORDER_COLLAPSE;
const Property_NameId Property::OFFSET;
const Property_NameId Property::TEXT_COMBINE_UPRIGHT;
const Property_NameId Property::_WEBKIT_MASK_POSITION_X;
const Property_NameId Property::_WEBKIT_MASK_POSITION_Y;
const Property_NameId Property::OUTLINE_STYLE;
const Property_NameId Property::_WEBKIT_MARGIN_BOTTOM_COLLAPSE;
const Property_NameId Property::COLOR_INTERPOLATION_FILTERS;
const Property_NameId Property::FONT_VARIANT;
const Property_NameId Property::_WEBKIT_ANIMATION_FILL_MODE;
const Property_NameId Property::BORDER_RIGHT;
const Property_NameId Property::VISIBILITY;
const Property_NameId Property::TRANSFORM_BOX;
const Property_NameId Property::FONT_VARIANT_CAPS;
const Property_NameId Property::_EPUB_TEXT_EMPHASIS_COLOR;
const Property_NameId Property::_WEBKIT_BORDER_BEFORE_STYLE;
const Property_NameId Property::RESIZE;
const Property_NameId Property::_WEBKIT_RTL_ORDERING;
const Property_NameId Property::_WEBKIT_BOX_ORDINAL_GROUP;
const Property_NameId Property::PAINT_ORDER;
const Property_NameId Property::STROKE_LINECAP;
const Property_NameId Property::ANIMATION_DIRECTION;
const Property_NameId Property::_WEBKIT_FONT_FEATURE_SETTINGS;
const Property_NameId Property::BORDER_TOP_LEFT_RADIUS;
const Property_NameId Property::_WEBKIT_COLUMN_WIDTH;
const Property_NameId Property::_WEBKIT_BOX_ALIGN;
const Property_NameId Property::_WEBKIT_PADDING_AFTER;
const Property_NameId Property::COLUMN_WIDTH;
const Property_NameId Property::LIST_STYLE;
const Property_NameId Property::_WEBKIT_MASK_REPEAT_Y;
const Property_NameId Property::_WEBKIT_MARGIN_BEFORE_COLLAPSE;
const Property_NameId Property::STROKE;
const Property_NameId Property::TEXT_DECORATION_LINE;
const Property_NameId Property::_WEBKIT_BACKGROUND_SIZE;
const Property_NameId Property::_WEBKIT_MASK_REPEAT_X;
const Property_NameId Property::PADDING_BOTTOM;
const Property_NameId Property::FONT_STYLE;
const Property_NameId Property::_WEBKIT_TRANSITION_DELAY;
const Property_NameId Property::BACKGROUND_REPEAT;
const Property_NameId Property::FLEX_BASIS;
const Property_NameId Property::BORDER_IMAGE_SLICE;
const Property_NameId Property::_WEBKIT_TRANSFORM_ORIGIN;
const Property_NameId Property::OVERSCROLL_BEHAVIOR_X;
const Property_NameId Property::OVERSCROLL_BEHAVIOR_Y;
const Property_NameId Property::VECTOR_EFFECT;
const Property_NameId Property::_WEBKIT_ANIMATION_TIMING_FUNCTION;
const Property_NameId Property::_WEBKIT_BORDER_AFTER_STYLE;
const Property_NameId Property::_WEBKIT_PERSPECTIVE_ORIGIN_X;
const Property_NameId Property::_WEBKIT_PERSPECTIVE_ORIGIN_Y;
const Property_NameId Property::INLINE_SIZE;
const Property_NameId Property::OUTLINE;
const Property_NameId Property::FONT_DISPLAY;
const Property_NameId Property::_WEBKIT_BORDER_BEFORE;
const Property_NameId Property::BORDER_IMAGE_SOURCE;
const Property_NameId Property::TRANSITION_DURATION;
const Property_NameId Property::SCROLL_PADDING_TOP;
const Property_NameId Property::ORDER;
const Property_NameId Property::_WEBKIT_BOX_ORIENT;
const Property_NameId Property::COUNTER_RESET;
const Property_NameId Property::COLOR_RENDERING;
const Property_NameId Property::FLEX_DIRECTION;
const Property_NameId Property::_WEBKIT_TEXT_STROKE_WIDTH;
const Property_NameId Property::FONT_VARIANT_NUMERIC;
const Property_NameId Property::SCROLL_MARGIN_BLOCK_END;
const Property_NameId Property::MIN_HEIGHT;
const Property_NameId Property::SCROLL_PADDING_INLINE_START;
const Property_NameId Property::_WEBKIT_MASK_BOX_IMAGE;
const Property_NameId Property::LEFT;
const Property_NameId Property::_WEBKIT_MASK;
const Property_NameId Property::_WEBKIT_BORDER_AFTER_WIDTH;
const Property_NameId Property::STROKE_WIDTH;
const Property_NameId Property::_WEBKIT_BOX_DECORATION_BREAK;
const Property_NameId Property::_WEBKIT_MASK_POSITION;
const Property_NameId Property::BACKGROUND_ORIGIN;
const Property_NameId Property::_WEBKIT_BORDER_START_COLOR;
const Property_NameId Property::FONT_STRETCH;
const Property_NameId Property::_WEBKIT_BACKGROUND_CLIP;
const Property_NameId Property::SCROLL_MARGIN_TOP;
const Property_NameId Property::_WEBKIT_BORDER_HORIZONTAL_SPACING;
const Property_NameId Property::BORDER_RADIUS;
const Property_NameId Property::FLEX;
const Property_NameId Property::TEXT_INDENT;
const Property_NameId Property::HYPHENS;
const Property_NameId Property::COLUMN_RULE_WIDTH;
const Property_NameId Property::_WEBKIT_MARGIN_AFTER;
const Property_NameId Property::_EPUB_CAPTION_SIDE;
const Property_NameId Property::BREAK_AFTER;
const Property_NameId Property::TEXT_TRANSFORM;
const Property_NameId Property::TOUCH_ACTION;
const Property_NameId Property::FONT_SIZE;
const Property_NameId Property::_WEBKIT_ANIMATION_NAME;
const Property_NameId Property::SCROLL_PADDING_INLINE;
const Property_NameId Property::OFFSET_PATH;
const Property_NameId Property::SCROLL_MARGIN;
const Property_NameId Property::PADDING_TOP;
const Property_NameId Property::SCROLL_SNAP_ALIGN;
const Property_NameId Property::_WEBKIT_TEXT_COMBINE;
const Property_NameId Property::_WEBKIT_FLEX_SHRINK;
const Property_NameId Property::RX;
const Property_NameId Property::RY;
const Property_NameId Property::CONTENT;
const Property_NameId Property::PADDING_RIGHT;
const Property_NameId Property::_WEBKIT_TRANSFORM;
const Property_NameId Property::MARKER_MID;
const Property_NameId Property::_WEBKIT_MIN_LOGICAL_WIDTH;
const Property_NameId Property::CLIP_RULE;
const Property_NameId Property::FONT_FAMILY;
const Property_NameId Property::SCROLL_SNAP_TYPE;
const Property_NameId Property::TEXT_DECORATION_SKIP;
const Property_NameId Property::TRANSITION;
const Property_NameId Property::FILTER;
const Property_NameId Property::BORDER_RIGHT_WIDTH;
const Property_NameId Property::_WEBKIT_FLEX_DIRECTION;
const Property_NameId Property::_WEBKIT_MASK_COMPOSITE;
const Property_NameId Property::MIX_BLEND_MODE;
const Property_NameId Property::COLOR_INTERPOLATION;
const Property_NameId Property::BORDER_TOP_STYLE;
const Property_NameId Property::FILL_OPACITY;
const Property_NameId Property::MARKER_START;
const Property_NameId Property::BORDER_BOTTOM_WIDTH;
const Property_NameId Property::_WEBKIT_TEXT_EMPHASIS;
const Property_NameId Property::GRID_AREA;
const Property_NameId Property::SIZE;
const Property_NameId Property::BACKGROUND_CLIP;
const Property_NameId Property::_WEBKIT_TEXT_FILL_COLOR;
const Property_NameId Property::TOP;
const Property_NameId Property::_WEBKIT_BOX_REFLECT;
const Property_NameId Property::BORDER_WIDTH;
const Property_NameId Property::OFFSET_ANCHOR;
const Property_NameId Property::MAX_INLINE_SIZE;
const Property_NameId Property::_WEBKIT_COLUMN_RULE_STYLE;
const Property_NameId Property::_WEBKIT_COLUMN_COUNT;
const Property_NameId Property::ANIMATION_PLAY_STATE;
const Property_NameId Property::PADDING;
const Property_NameId Property::DOMINANT_BASELINE;
const Property_NameId Property::BACKGROUND_ATTACHMENT;
const Property_NameId Property::_WEBKIT_BOX_SIZING;
const Property_NameId Property::_WEBKIT_BOX_FLEX;
const Property_NameId Property::TEXT_ORIENTATION;
const Property_NameId Property::BACKGROUND_POSITION;
const Property_NameId Property::_WEBKIT_BORDER_START_WIDTH;
const Property_NameId Property::_EPUB_TEXT_EMPHASIS_STYLE;
const Property_NameId Property::ISOLATION;
const Property_NameId Property::_EPUB_TEXT_ORIENTATION;
const Property_NameId Property::_WEBKIT_BORDER_BOTTOM_RIGHT_RADIUS;
const Property_NameId Property::R;
const Property_NameId Property::BORDER_LEFT_WIDTH;
const Property_NameId Property::GRID_COLUMN_END;
const Property_NameId Property::BACKGROUND_BLEND_MODE;
const Property_NameId Property::VERTICAL_ALIGN;
const Property_NameId Property::CLIP;
const Property_NameId Property::GRID_AUTO_ROWS;
const Property_NameId Property::OFFSET_ROTATE;
const Property_NameId Property::MARGIN_LEFT;
const Property_NameId Property::ANIMATION_NAME;
const Property_NameId Property::TEXT_DECORATION;
const Property_NameId Property::BORDER;
const Property_NameId Property::_WEBKIT_TRANSITION_TIMING_FUNCTION;
const Property_NameId Property::MARGIN_BOTTOM;
const Property_NameId Property::UNICODE_RANGE;
const Property_NameId Property::ANIMATION;
const Property_NameId Property::_WEBKIT_SHAPE_MARGIN;
const Property_NameId Property::FONT_WEIGHT;
const Property_NameId Property::SHAPE_MARGIN;
const Property_NameId Property::MASK_TYPE;
const Property_NameId Property::SCROLL_PADDING;
const Property_NameId Property::MIN_INLINE_SIZE;
const Property_NameId Property::OBJECT_POSITION;
const Property_NameId Property::PAGE_BREAK_AFTER;
const Property_NameId Property::_WEBKIT_MASK_CLIP;
const Property_NameId Property::WHITE_SPACE;
const Property_NameId Property::_WEBKIT_BORDER_AFTER_COLOR;
const Property_NameId Property::_WEBKIT_MAX_LOGICAL_WIDTH;
const Property_NameId Property::_WEBKIT_BORDER_BEFORE_COLOR;
const Property_NameId Property::FONT_KERNING;
const Property_NameId Property::_EPUB_WORD_BREAK;
const Property_NameId Property::CLEAR;
const Property_NameId Property::ANIMATION_TIMING_FUNCTION;
const Property_NameId Property::_WEBKIT_BORDER_RADIUS;
const Property_NameId Property::SCROLL_PADDING_RIGHT;
const Property_NameId Property::_WEBKIT_TEXT_DECORATIONS_IN_EFFECT;
const Property_NameId Property::_WEBKIT_ANIMATION_DIRECTION;
const Property_NameId Property::JUSTIFY_SELF;
const Property_NameId Property::TRANSITION_TIMING_FUNCTION;
const Property_NameId Property::SCROLL_SNAP_STOP;
const Property_NameId Property::COUNTER_INCREMENT;
const Property_NameId Property::_WEBKIT_TRANSFORM_STYLE;
const Property_NameId Property::GRID_AUTO_COLUMNS;
const Property_NameId Property::_WEBKIT_ALIGN_CONTENT;
const Property_NameId Property::FONT;
const Property_NameId Property::FLEX_WRAP;
const Property_NameId Property::GRID_ROW_START;
const Property_NameId Property::LIST_STYLE_IMAGE;
const Property_NameId Property::_WEBKIT_TAP_HIGHLIGHT_COLOR;
const Property_NameId Property::_WEBKIT_TEXT_EMPHASIS_COLOR;
const Property_NameId Property::BORDER_LEFT;
const Property_NameId Property::_WEBKIT_BORDER_END_COLOR;
const Property_NameId Property::COLUMNS;
const Property_NameId Property::BOX_SHADOW;
const Property_NameId Property::_WEBKIT_FLEX_WRAP;
const Property_NameId Property::ALIGN_SELF;
const Property_NameId Property::BORDER_BOTTOM;
const Property_NameId Property::BORDER_SPACING;
const Property_NameId Property::_WEBKIT_COLUMN_SPAN;
const Property_NameId Property::GRID_ROW_END;
const Property_NameId Property::_WEBKIT_BORDER_END;
const Property_NameId Property::PERSPECTIVE_ORIGIN;
const Property_NameId Property::PAGE_BREAK_INSIDE;
const Property_NameId Property::ORPHANS;
const Property_NameId Property::_WEBKIT_BORDER_START_STYLE;
const Property_NameId Property::SCROLL_BEHAVIOR;
const Property_NameId Property::COLUMN_SPAN;
const Property_NameId Property::_WEBKIT_HYPHENATE_CHARACTER;
const Property_NameId Property::COLUMN_FILL;
const Property_NameId Property::TAB_SIZE;
const Property_NameId Property::CONTAIN;
const Property_NameId Property::X;
const Property_NameId Property::GRID_ROW;
const Property_NameId Property::BORDER_BOTTOM_RIGHT_RADIUS;
const Property_NameId Property::LINE_HEIGHT;
const Property_NameId Property::STROKE_LINEJOIN;
const Property_NameId Property::TEXT_ALIGN_LAST;
const Property_NameId Property::OFFSET_POSITION;
const Property_NameId Property::WORD_SPACING;
const Property_NameId Property::TRANSFORM_STYLE;
const Property_NameId Property::_WEBKIT_APP_REGION;
const Property_NameId Property::_WEBKIT_BORDER_END_STYLE;
const Property_NameId Property::_WEBKIT_TRANSFORM_ORIGIN_Z;
const Property_NameId Property::_WEBKIT_TRANSFORM_ORIGIN_X;
const Property_NameId Property::_WEBKIT_TRANSFORM_ORIGIN_Y;
const Property_NameId Property::BACKGROUND_REPEAT_X;
const Property_NameId Property::BACKGROUND_REPEAT_Y;
const Property_NameId Property::BORDER_BOTTOM_COLOR;
const Property_NameId Property::_WEBKIT_RUBY_POSITION;
const Property_NameId Property::_WEBKIT_LOGICAL_WIDTH;
const Property_NameId Property::TEXT_JUSTIFY;
const Property_NameId Property::SCROLL_MARGIN_INLINE_START;
const Property_NameId Property::CAPTION_SIDE;
const Property_NameId Property::MASK_SOURCE_TYPE;
const Property_NameId Property::_WEBKIT_MASK_BOX_IMAGE_SLICE;
const Property_NameId Property::_WEBKIT_BORDER_IMAGE;
const Property_NameId Property::TEXT_SIZE_ADJUST;
const Property_NameId Property::_WEBKIT_TEXT_SECURITY;
const Property_NameId Property::_EPUB_WRITING_MODE;
const Property_NameId Property::GRID_TEMPLATE;
const Property_NameId Property::_WEBKIT_MASK_BOX_IMAGE_REPEAT;
const Property_NameId Property::_WEBKIT_MASK_REPEAT;
const Property_NameId Property::_WEBKIT_JUSTIFY_CONTENT;
const Property_NameId Property::BASELINE_SHIFT;
const Property_NameId Property::BORDER_IMAGE;
const Property_NameId Property::TEXT_DECORATION_COLOR;
const Property_NameId Property::COLOR;
const Property_NameId Property::SHAPE_IMAGE_THRESHOLD;
const Property_NameId Property::SHAPE_RENDERING;
const Property_NameId Property::CY;
const Property_NameId Property::CX;
const Property_NameId Property::_WEBKIT_USER_MODIFY;
const Property_NameId Property::OFFSET_DISTANCE;
const Property_NameId Property::_WEBKIT_BORDER_BOTTOM_LEFT_RADIUS;
const Property_NameId Property::SPEAK;
const Property_NameId Property::BORDER_BOTTOM_LEFT_RADIUS;
const Property_NameId Property::_WEBKIT_COLUMN_BREAK_AFTER;
const Property_NameId Property::_WEBKIT_FONT_SMOOTHING;
const Property_NameId Property::_WEBKIT_MAX_LOGICAL_HEIGHT;
const Property_NameId Property::_WEBKIT_LINE_BREAK;
const Property_NameId Property::FILL_RULE;
const Property_NameId Property::_WEBKIT_MARGIN_START;
const Property_NameId Property::MIN_WIDTH;
const Property_NameId Property::_EPUB_TEXT_COMBINE;
const Property_NameId Property::BREAK_BEFORE;
const Property_NameId Property::CARET_COLOR;
const Property_NameId Property::EMPTY_CELLS;
const Property_NameId Property::DIRECTION;
const Property_NameId Property::CLIP_PATH;
const Property_NameId Property::JUSTIFY_CONTENT;
const Property_NameId Property::SCROLL_PADDING_BLOCK_END;
const Property_NameId Property::Z_INDEX;
const Property_NameId Property::BACKGROUND_POSITION_Y;
const Property_NameId Property::TEXT_DECORATION_STYLE;
const Property_NameId Property::GRID_TEMPLATE_AREAS;
const Property_NameId Property::_WEBKIT_MIN_LOGICAL_HEIGHT;
const Property_NameId Property::FONT_SIZE_ADJUST;
const Property_NameId Property::SCROLL_PADDING_BLOCK;
const Property_NameId Property::OVERFLOW_ANCHOR;
const Property_NameId Property::CURSOR;
const Property_NameId Property::SCROLL_MARGIN_BLOCK_START;
const Property_NameId Property::_WEBKIT_MASK_BOX_IMAGE_SOURCE;
const Property_NameId Property::MARGIN;
const Property_NameId Property::_WEBKIT_ANIMATION;
const Property_NameId Property::LETTER_SPACING;
const Property_NameId Property::ORIENTATION;
const Property_NameId Property::WILL_CHANGE;
const Property_NameId Property::_WEBKIT_HIGHLIGHT;
const Property_NameId Property::TRANSFORM_ORIGIN;
const Property_NameId Property::FONT_VARIANT_LIGATURES;
const Property_NameId Property::_WEBKIT_ANIMATION_DURATION;
const Property_NameId Property::_WEBKIT_MASK_ORIGIN;
const Property_NameId Property::_WEBKIT_CLIP_PATH;
const Property_NameId Property::WORD_BREAK;
const Property_NameId Property::TABLE_LAYOUT;
const Property_NameId Property::TEXT_OVERFLOW;
const Property_NameId Property::_WEBKIT_LOCALE;
const Property_NameId Property::_WEBKIT_FLEX;
const Property_NameId Property::GRID_AUTO_FLOW;
const Property_NameId Property::BORDER_TOP_RIGHT_RADIUS;
const Property_NameId Property::BORDER_IMAGE_OUTSET;
const Property_NameId Property::PLACE_ITEMS;
const Property_NameId Property::BORDER_LEFT_COLOR;
const Property_NameId Property::FONT_VARIATION_SETTINGS;
const Property_NameId Property::BORDER_RIGHT_COLOR;
const Property_NameId Property::MIN_ZOOM;
const Property_NameId Property::SCROLL_MARGIN_INLINE;
const Property_NameId Property::_WEBKIT_BORDER_BEFORE_WIDTH;
const Property_NameId Property::BACKFACE_VISIBILITY;
const Property_NameId Property::BACKGROUND_IMAGE;
const Property_NameId Property::_WEBKIT_TRANSITION_PROPERTY;
const Property_NameId Property::WRITING_MODE;
const Property_NameId Property::STROKE_OPACITY;
const Property_NameId Property::_WEBKIT_MARGIN_COLLAPSE;
const Property_NameId Property::BOX_SIZING;
const Property_NameId Property::MARGIN_TOP;
const Property_NameId Property::COLUMN_RULE_COLOR;
const Property_NameId Property::Y;
const Property_NameId Property::POSITION;
const Property_NameId Property::SCROLL_MARGIN_BOTTOM;
const Property_NameId Property::LIST_STYLE_POSITION;
const Property_NameId Property::_WEBKIT_BOX_PACK;
const Property_NameId Property::SCROLL_PADDING_INLINE_END;
const Property_NameId Property::QUOTES;
const Property_NameId Property::BORDER_TOP;
const Property_NameId Property::SCROLL_PADDING_LEFT;
const Property_NameId Property::_WEBKIT_TRANSITION;
const Property_NameId Property::_WEBKIT_COLUMN_BREAK_BEFORE;
const Property_NameId Property::LIGHTING_COLOR;
const Property_NameId Property::BACKGROUND_SIZE;
const Property_NameId Property::_WEBKIT_PADDING_BEFORE;
const Property_NameId Property::_WEBKIT_BORDER_TOP_LEFT_RADIUS;
const Property_NameId Property::FLOOD_OPACITY;
const Property_NameId Property::LINE_HEIGHT_STEP;
const Property_NameId Property::_WEBKIT_MASK_SIZE;
const Property_NameId Property::TEXT_ALIGN;
const Property_NameId Property::_WEBKIT_FILTER;
const Property_NameId Property::WORD_WRAP;
const Property_NameId Property::MAX_ZOOM;
const Property_NameId Property::GRID;
const Property_NameId Property::BACKGROUND;
const Property_NameId Property::HEIGHT;
const Property_NameId Property::GRID_COLUMN_START;
const Property_NameId Property::ANIMATION_FILL_MODE;
const Property_NameId Property::ROTATE;
const Property_NameId Property::MARKER_END;
const Property_NameId Property::D;
const Property_NameId Property::JUSTIFY_ITEMS;
const Property_NameId Property::ZOOM;
const Property_NameId Property::SCROLL_PADDING_BLOCK_START;
const Property_NameId Property::_WEBKIT_MARGIN_TOP_COLLAPSE;
const Property_NameId Property::PAGE;
const Property_NameId Property::RIGHT;
const Property_NameId Property::USER_SELECT;
const Property_NameId Property::MARGIN_RIGHT;
const Property_NameId Property::MARKER;
const Property_NameId Property::LINE_BREAK;
const Property_NameId Property::_WEBKIT_MARGIN_END;
const Property_NameId Property::_WEBKIT_TRANSITION_DURATION;
const Property_NameId Property::_WEBKIT_WRITING_MODE;
const Property_NameId Property::BORDER_TOP_WIDTH;
const Property_NameId Property::BOTTOM;
const Property_NameId Property::PLACE_CONTENT;
const Property_NameId Property::_WEBKIT_SHAPE_IMAGE_THRESHOLD;
const Property_NameId Property::_WEBKIT_USER_DRAG;
const Property_NameId Property::_WEBKIT_BORDER_VERTICAL_SPACING;
const Property_NameId Property::_WEBKIT_COLUMN_GAP;
const Property_NameId Property::_WEBKIT_OPACITY;
const Property_NameId Property::BACKGROUND_COLOR;
const Property_NameId Property::COLUMN_GAP;
const Property_NameId Property::SHAPE_OUTSIDE;
const Property_NameId Property::_WEBKIT_PADDING_END;
const Property_NameId Property::_WEBKIT_BORDER_START;
const Property_NameId Property::ANIMATION_DELAY;
const Property_NameId Property::UNICODE_BIDI;
const Property_NameId Property::TEXT_SHADOW;
const Property_NameId Property::_WEBKIT_BOX_DIRECTION;
const Property_NameId Property::IMAGE_RENDERING;
const Property_NameId Property::SRC;
const Property_NameId Property::GRID_GAP;
const Property_NameId Property::POINTER_EVENTS;
const Property_NameId Property::BORDER_IMAGE_WIDTH;
const Property_NameId Property::MIN_BLOCK_SIZE;
const Property_NameId Property::TRANSITION_PROPERTY;
const Property_NameId Property::_WEBKIT_MASK_IMAGE;
const Property_NameId Property::FLOAT;
const Property_NameId Property::MAX_HEIGHT;
const Property_NameId Property::OUTLINE_OFFSET;
const Property_NameId Property::_WEBKIT_BOX_SHADOW;
const Property_NameId Property::OVERFLOW_WRAP;
const Property_NameId Property::BLOCK_SIZE;
const Property_NameId Property::TRANSFORM;
const Property_NameId Property::PLACE_SELF;
const Property_NameId Property::WIDTH;
const Property_NameId Property::STROKE_MITERLIMIT;
const Property_NameId Property::STOP_OPACITY;
const Property_NameId Property::BORDER_TOP_COLOR;
const Property_NameId Property::TRANSLATE;
const Property_NameId Property::OBJECT_FIT;
const Property_NameId Property::_WEBKIT_MASK_BOX_IMAGE_WIDTH;
const Property_NameId Property::_WEBKIT_BACKGROUND_ORIGIN;
const Property_NameId Property::_WEBKIT_ALIGN_ITEMS;
const Property_NameId Property::TRANSITION_DELAY;
const Property_NameId Property::SCROLL_MARGIN_LEFT;
const Property_NameId Property::BORDER_STYLE;
const Property_NameId Property::ANIMATION_ITERATION_COUNT;
const Property_NameId Property::_WEBKIT_MARGIN_AFTER_COLLAPSE;
const Property_NameId Property::_OVERFLOW;
const Property_NameId Property::USER_ZOOM;
const Property_NameId Property::_WEBKIT_BORDER_TOP_RIGHT_RADIUS;
const Property_NameId Property::GRID_TEMPLATE_COLUMNS;
const Property_NameId Property::_WEBKIT_ALIGN_SELF;
const Property_NameId Property::_WEBKIT_PERSPECTIVE_ORIGIN;
const Property_NameId Property::COLUMN_RULE_STYLE;
const Property_NameId Property::DISPLAY;
const Property_NameId Property::_WEBKIT_COLUMN_RULE_WIDTH;
const Property_NameId Property::_WEBKIT_BOX_LINES;
const Property_NameId Property::BORDER_COLOR;
const Property_NameId Property::_WEBKIT_FLEX_BASIS;
const Property_NameId Property::STROKE_DASHOFFSET;
const Property_NameId Property::_WEBKIT_TEXT_SIZE_ADJUST;
const Property_NameId Property::OVERSCROLL_BEHAVIOR;
const Property_NameId Property::_WEBKIT_TEXT_STROKE;
const Property_NameId Property::WIDOWS;
const Property_NameId Property::FILL;
const Property_NameId Property::OVERFLOW_Y;
const Property_NameId Property::OVERFLOW_X;
const Property_NameId Property::OPACITY;
const Property_NameId Property::_WEBKIT_PERSPECTIVE;
const Property_NameId Property::_WEBKIT_TEXT_STROKE_COLOR;
const Property_NameId Property::SCROLL_MARGIN_INLINE_END;
const Property_NameId Property::SCALE;
const Property_NameId Property::_WEBKIT_TEXT_ORIENTATION;
const Property_NameId Property::_WEBKIT_MASK_BOX_IMAGE_OUTSET;
const Property_NameId Property::ALIGN_CONTENT;
const Property_NameId Property::_WEBKIT_BORDER_END_WIDTH;
const Property_NameId Property::BORDER_BOTTOM_STYLE;
const Property_NameId Property::MASK;
const Property_NameId Property::BACKGROUND_POSITION_X;
const Property_NameId Property::_EPUB_TEXT_TRANSFORM;
const Property_NameId Property::STOP_COLOR;
const Property_NameId Property::STROKE_DASHARRAY;
const Property_NameId Property::_WEBKIT_LINE_CLAMP;
const Property_NameId Property::INVALID_PROPERTY;
const Property_NameId Property::NameId_MIN;
const Property_NameId Property::NameId_MAX;
const int Property::NameId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Attr_Type_descriptor() {
  protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_css_2eproto::file_level_enum_descriptors[22];
}
bool Attr_Type_IsValid(int value) {
  switch (value) {
    case 1:
    case 6:
    case 36:
    case 42:
    case 124:
    case 126:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Attr_Type Attr::NONE;
const Attr_Type Attr::EQUAL;
const Attr_Type Attr::TILDE;
const Attr_Type Attr::PIPE;
const Attr_Type Attr::DOLLAR;
const Attr_Type Attr::STAR;
const Attr_Type Attr::Type_MIN;
const Attr_Type Attr::Type_MAX;
const int Attr::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Selector_Type_descriptor() {
  protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_css_2eproto::file_level_enum_descriptors[23];
}
bool Selector_Type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Selector_Type Selector::ELEMENT;
const Selector_Type Selector::CLASS;
const Selector_Type Selector::ID;
const Selector_Type Selector::UNIVERSAL;
const Selector_Type Selector::ATTR;
const Selector_Type Selector::Type_MIN;
const Selector_Type Selector::Type_MAX;
const int Selector::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Selector_PseudoValueId_descriptor() {
  protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_css_2eproto::file_level_enum_descriptors[24];
}
bool Selector_PseudoValueId_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Selector_PseudoValueId Selector::_INTERNAL_AUTOFILL_PREVIEWED;
const Selector_PseudoValueId Selector::_INTERNAL_AUTOFILL_SELECTED;
const Selector_PseudoValueId Selector::_INTERNAL_LIST_BOX;
const Selector_PseudoValueId Selector::_INTERNAL_MEDIA_CONTROLS_OVERLAY_CAST_BUTTON;
const Selector_PseudoValueId Selector::_INTERNAL_SHADOW_HOST_HAS_APPEARANCE;
const Selector_PseudoValueId Selector::_INTERNAL_SPATIAL_NAVIGATION_FOCUS;
const Selector_PseudoValueId Selector::_INTERNAL_VIDEO_PERSISTENT;
const Selector_PseudoValueId Selector::_INTERNAL_VIDEO_PERSISTENT_ANCESTOR;
const Selector_PseudoValueId Selector::_WEBKIT_ANY_LINK;
const Selector_PseudoValueId Selector::_WEBKIT_AUTOFILL;
const Selector_PseudoValueId Selector::_WEBKIT_DRAG;
const Selector_PseudoValueId Selector::_WEBKIT_FULL_PAGE_MEDIA;
const Selector_PseudoValueId Selector::_WEBKIT_FULL_SCREEN;
const Selector_PseudoValueId Selector::_WEBKIT_FULL_SCREEN_ANCESTOR;
const Selector_PseudoValueId Selector::_WEBKIT_RESIZER;
const Selector_PseudoValueId Selector::_WEBKIT_SCROLLBAR;
const Selector_PseudoValueId Selector::_WEBKIT_SCROLLBAR_BUTTON;
const Selector_PseudoValueId Selector::_WEBKIT_SCROLLBAR_CORNER;
const Selector_PseudoValueId Selector::_WEBKIT_SCROLLBAR_THUMB;
const Selector_PseudoValueId Selector::_WEBKIT_SCROLLBAR_TRACK;
const Selector_PseudoValueId Selector::_WEBKIT_SCROLLBAR_TRACK_PIECE;
const Selector_PseudoValueId Selector::ACTIVE;
const Selector_PseudoValueId Selector::AFTER;
const Selector_PseudoValueId Selector::BACKDROP;
const Selector_PseudoValueId Selector::BEFORE;
const Selector_PseudoValueId Selector::CHECKED;
const Selector_PseudoValueId Selector::CONTENT;
const Selector_PseudoValueId Selector::CORNER_PRESENT;
const Selector_PseudoValueId Selector::CUE;
const Selector_PseudoValueId Selector::DECREMENT;
const Selector_PseudoValueId Selector::DEFAULT;
const Selector_PseudoValueId Selector::DEFINED;
const Selector_PseudoValueId Selector::DISABLED;
const Selector_PseudoValueId Selector::DOUBLE_BUTTON;
const Selector_PseudoValueId Selector::EMPTY;
const Selector_PseudoValueId Selector::ENABLED;
const Selector_PseudoValueId Selector::END;
const Selector_PseudoValueId Selector::FIRST;
const Selector_PseudoValueId Selector::FIRST_CHILD;
const Selector_PseudoValueId Selector::FIRST_LETTER;
const Selector_PseudoValueId Selector::FIRST_LINE;
const Selector_PseudoValueId Selector::FIRST_OF_TYPE;
const Selector_PseudoValueId Selector::FOCUS;
const Selector_PseudoValueId Selector::FOCUS_WITHIN;
const Selector_PseudoValueId Selector::FULLSCREEN;
const Selector_PseudoValueId Selector::FUTURE;
const Selector_PseudoValueId Selector::HORIZONTAL;
const Selector_PseudoValueId Selector::HOST;
const Selector_PseudoValueId Selector::HOVER;
const Selector_PseudoValueId Selector::IN_RANGE;
const Selector_PseudoValueId Selector::INCREMENT;
const Selector_PseudoValueId Selector::INDETERMINATE;
const Selector_PseudoValueId Selector::INVALID;
const Selector_PseudoValueId Selector::LAST_CHILD;
const Selector_PseudoValueId Selector::LAST_OF_TYPE;
const Selector_PseudoValueId Selector::LEFT;
const Selector_PseudoValueId Selector::LINK;
const Selector_PseudoValueId Selector::NO_BUTTON;
const Selector_PseudoValueId Selector::ONLY_CHILD;
const Selector_PseudoValueId Selector::ONLY_OF_TYPE;
const Selector_PseudoValueId Selector::OPTIONAL;
const Selector_PseudoValueId Selector::OUT_OF_RANGE;
const Selector_PseudoValueId Selector::PAST;
const Selector_PseudoValueId Selector::PLACEHOLDER;
const Selector_PseudoValueId Selector::PLACEHOLDER_SHOWN;
const Selector_PseudoValueId Selector::READ_ONLY;
const Selector_PseudoValueId Selector::READ_WRITE;
const Selector_PseudoValueId Selector::REQUIRED;
const Selector_PseudoValueId Selector::RIGHT;
const Selector_PseudoValueId Selector::ROOT;
const Selector_PseudoValueId Selector::SCOPE;
const Selector_PseudoValueId Selector::SELECTION;
const Selector_PseudoValueId Selector::SHADOW;
const Selector_PseudoValueId Selector::SINGLE_BUTTON;
const Selector_PseudoValueId Selector::START;
const Selector_PseudoValueId Selector::TARGET;
const Selector_PseudoValueId Selector::UNRESOLVED;
const Selector_PseudoValueId Selector::VALID;
const Selector_PseudoValueId Selector::VERTICAL;
const Selector_PseudoValueId Selector::VISITED;
const Selector_PseudoValueId Selector::WINDOW_INACTIVE;
const Selector_PseudoValueId Selector::_WEBKIT_ANY;
const Selector_PseudoValueId Selector::HOST_CONTEXT;
const Selector_PseudoValueId Selector::LANG;
const Selector_PseudoValueId Selector::NOT;
const Selector_PseudoValueId Selector::NTH_CHILD;
const Selector_PseudoValueId Selector::NTH_LAST_CHILD;
const Selector_PseudoValueId Selector::NTH_LAST_OF_TYPE;
const Selector_PseudoValueId Selector::NTH_OF_TYPE;
const Selector_PseudoValueId Selector::SLOTTED;
const Selector_PseudoValueId Selector::INVALID_PSEUDO_VALUE;
const Selector_PseudoValueId Selector::PseudoValueId_MIN;
const Selector_PseudoValueId Selector::PseudoValueId_MAX;
const int Selector::PseudoValueId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* PropertyAndValue_Prio_descriptor() {
  protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_css_2eproto::file_level_enum_descriptors[25];
}
bool PropertyAndValue_Prio_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PropertyAndValue_Prio PropertyAndValue::UNSET;
const PropertyAndValue_Prio PropertyAndValue::IS_SET;
const PropertyAndValue_Prio PropertyAndValue::Prio_MIN;
const PropertyAndValue_Prio PropertyAndValue::Prio_MAX;
const int PropertyAndValue::Prio_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* PropertyAndValue_ValueId_descriptor() {
  protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_css_2eproto::file_level_enum_descriptors[26];
}
bool PropertyAndValue_ValueId_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
    case 137:
    case 138:
    case 139:
    case 140:
    case 141:
    case 142:
    case 143:
    case 144:
    case 145:
    case 146:
    case 147:
    case 148:
    case 149:
    case 150:
    case 151:
    case 152:
    case 153:
    case 154:
    case 155:
    case 156:
    case 157:
    case 158:
    case 159:
    case 160:
    case 161:
    case 162:
    case 163:
    case 164:
    case 165:
    case 166:
    case 167:
    case 168:
    case 169:
    case 170:
    case 171:
    case 172:
    case 173:
    case 174:
    case 175:
    case 176:
    case 177:
    case 178:
    case 179:
    case 180:
    case 181:
    case 182:
    case 183:
    case 184:
    case 185:
    case 186:
    case 187:
    case 188:
    case 189:
    case 190:
    case 191:
    case 192:
    case 193:
    case 194:
    case 195:
    case 196:
    case 197:
    case 198:
    case 199:
    case 200:
    case 201:
    case 202:
    case 203:
    case 204:
    case 205:
    case 206:
    case 207:
    case 208:
    case 209:
    case 210:
    case 211:
    case 212:
    case 213:
    case 214:
    case 215:
    case 216:
    case 217:
    case 218:
    case 219:
    case 220:
    case 221:
    case 222:
    case 223:
    case 224:
    case 225:
    case 226:
    case 227:
    case 228:
    case 229:
    case 230:
    case 231:
    case 232:
    case 233:
    case 234:
    case 235:
    case 236:
    case 237:
    case 238:
    case 239:
    case 240:
    case 241:
    case 242:
    case 243:
    case 244:
    case 245:
    case 246:
    case 247:
    case 248:
    case 249:
    case 250:
    case 251:
    case 252:
    case 253:
    case 254:
    case 255:
    case 256:
    case 257:
    case 258:
    case 259:
    case 260:
    case 261:
    case 262:
    case 263:
    case 264:
    case 265:
    case 266:
    case 267:
    case 268:
    case 269:
    case 270:
    case 271:
    case 272:
    case 273:
    case 274:
    case 275:
    case 276:
    case 277:
    case 278:
    case 279:
    case 280:
    case 281:
    case 282:
    case 283:
    case 284:
    case 285:
    case 286:
    case 287:
    case 288:
    case 289:
    case 290:
    case 291:
    case 292:
    case 293:
    case 294:
    case 295:
    case 296:
    case 297:
    case 298:
    case 299:
    case 300:
    case 301:
    case 302:
    case 303:
    case 304:
    case 305:
    case 306:
    case 307:
    case 308:
    case 309:
    case 310:
    case 311:
    case 312:
    case 313:
    case 314:
    case 315:
    case 316:
    case 317:
    case 318:
    case 319:
    case 320:
    case 321:
    case 322:
    case 323:
    case 324:
    case 325:
    case 326:
    case 327:
    case 328:
    case 329:
    case 330:
    case 331:
    case 332:
    case 333:
    case 334:
    case 335:
    case 336:
    case 337:
    case 338:
    case 339:
    case 340:
    case 341:
    case 342:
    case 343:
    case 344:
    case 345:
    case 346:
    case 347:
    case 348:
    case 349:
    case 350:
    case 351:
    case 352:
    case 353:
    case 354:
    case 355:
    case 356:
    case 357:
    case 358:
    case 359:
    case 360:
    case 361:
    case 362:
    case 363:
    case 364:
    case 365:
    case 366:
    case 367:
    case 368:
    case 369:
    case 370:
    case 371:
    case 372:
    case 373:
    case 374:
    case 375:
    case 376:
    case 377:
    case 378:
    case 379:
    case 380:
    case 381:
    case 382:
    case 383:
    case 384:
    case 385:
    case 386:
    case 387:
    case 388:
    case 389:
    case 390:
    case 391:
    case 392:
    case 393:
    case 394:
    case 395:
    case 396:
    case 397:
    case 398:
    case 399:
    case 400:
    case 401:
    case 402:
    case 403:
    case 404:
    case 405:
    case 406:
    case 407:
    case 408:
    case 409:
    case 410:
    case 411:
    case 412:
    case 413:
    case 414:
    case 415:
    case 416:
    case 417:
    case 418:
    case 419:
    case 420:
    case 421:
    case 422:
    case 423:
    case 424:
    case 425:
    case 426:
    case 427:
    case 428:
    case 429:
    case 430:
    case 431:
    case 432:
    case 433:
    case 434:
    case 435:
    case 436:
    case 437:
    case 438:
    case 439:
    case 440:
    case 441:
    case 442:
    case 443:
    case 444:
    case 445:
    case 446:
    case 447:
    case 448:
    case 449:
    case 450:
    case 451:
    case 452:
    case 453:
    case 454:
    case 455:
    case 456:
    case 457:
    case 458:
    case 459:
    case 460:
    case 461:
    case 462:
    case 463:
    case 464:
    case 465:
    case 466:
    case 467:
    case 468:
    case 469:
    case 470:
    case 471:
    case 472:
    case 473:
    case 474:
    case 475:
    case 476:
    case 477:
    case 478:
    case 479:
    case 480:
    case 481:
    case 482:
    case 483:
    case 484:
    case 485:
    case 486:
    case 487:
    case 488:
    case 489:
    case 490:
    case 491:
    case 492:
    case 493:
    case 494:
    case 495:
    case 496:
    case 497:
    case 498:
    case 499:
    case 500:
    case 501:
    case 502:
    case 503:
    case 504:
    case 505:
    case 506:
    case 507:
    case 508:
    case 509:
    case 510:
    case 511:
    case 512:
    case 513:
    case 514:
    case 515:
    case 516:
    case 517:
    case 518:
    case 519:
    case 520:
    case 521:
    case 522:
    case 523:
    case 524:
    case 525:
    case 526:
    case 527:
    case 528:
    case 529:
    case 530:
    case 531:
    case 532:
    case 533:
    case 534:
    case 535:
    case 536:
    case 537:
    case 538:
    case 539:
    case 540:
    case 541:
    case 542:
    case 543:
    case 544:
    case 545:
    case 546:
    case 547:
    case 548:
    case 549:
    case 550:
    case 551:
    case 552:
    case 553:
    case 554:
    case 555:
    case 556:
    case 557:
    case 558:
    case 559:
    case 560:
    case 561:
    case 562:
    case 563:
    case 564:
    case 565:
    case 566:
    case 567:
    case 568:
    case 569:
    case 570:
    case 571:
    case 572:
    case 573:
    case 574:
    case 575:
    case 576:
    case 577:
    case 578:
    case 579:
    case 580:
    case 581:
    case 582:
    case 583:
    case 584:
    case 585:
    case 586:
    case 587:
    case 588:
    case 589:
    case 590:
    case 591:
    case 592:
    case 593:
    case 594:
    case 595:
    case 596:
    case 597:
    case 598:
    case 599:
    case 600:
    case 601:
    case 602:
    case 603:
    case 604:
    case 605:
    case 606:
    case 607:
    case 608:
    case 609:
    case 610:
    case 611:
    case 612:
    case 613:
    case 614:
    case 615:
    case 616:
    case 617:
    case 618:
    case 619:
    case 620:
    case 621:
    case 622:
    case 623:
    case 624:
    case 625:
    case 626:
    case 627:
    case 628:
    case 629:
    case 630:
    case 631:
    case 632:
    case 633:
    case 634:
    case 635:
    case 636:
    case 637:
    case 638:
    case 639:
    case 640:
    case 641:
    case 642:
    case 643:
    case 644:
    case 645:
    case 646:
    case 647:
    case 648:
    case 649:
    case 650:
    case 651:
    case 652:
    case 653:
    case 654:
    case 655:
    case 656:
    case 657:
    case 658:
    case 659:
    case 660:
    case 661:
    case 662:
    case 663:
    case 664:
    case 665:
    case 666:
    case 667:
    case 668:
    case 669:
    case 670:
    case 671:
    case 672:
    case 673:
    case 674:
    case 675:
    case 676:
    case 677:
    case 678:
    case 679:
    case 680:
    case 681:
    case 682:
    case 683:
    case 684:
    case 685:
    case 686:
    case 687:
    case 688:
    case 689:
    case 690:
    case 691:
    case 692:
    case 693:
    case 694:
    case 695:
    case 696:
    case 697:
    case 698:
    case 699:
    case 700:
    case 701:
    case 702:
    case 703:
    case 704:
    case 705:
    case 706:
    case 707:
    case 708:
    case 709:
    case 710:
    case 711:
    case 712:
    case 713:
    case 714:
    case 715:
    case 716:
    case 717:
    case 718:
    case 719:
    case 720:
    case 721:
    case 722:
    case 723:
    case 724:
    case 725:
    case 726:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PropertyAndValue_ValueId PropertyAndValue::ALL;
const PropertyAndValue_ValueId PropertyAndValue::DYNAMIC;
const PropertyAndValue_ValueId PropertyAndValue::YELLOW;
const PropertyAndValue_ValueId PropertyAndValue::GRAYTEXT;
const PropertyAndValue_ValueId PropertyAndValue::COLOR_DODGE;
const PropertyAndValue_ValueId PropertyAndValue::DARKSEAGREEN;
const PropertyAndValue_ValueId PropertyAndValue::DISC;
const PropertyAndValue_ValueId PropertyAndValue::EXTRA_CONDENSED;
const PropertyAndValue_ValueId PropertyAndValue::HANGING;
const PropertyAndValue_ValueId PropertyAndValue::STEP_MIDDLE;
const PropertyAndValue_ValueId PropertyAndValue::MENULIST;
const PropertyAndValue_ValueId PropertyAndValue::ROW;
const PropertyAndValue_ValueId PropertyAndValue::PRE_WRAP;
const PropertyAndValue_ValueId PropertyAndValue::INLINE_BLOCK;
const PropertyAndValue_ValueId PropertyAndValue::STEP_START;
const PropertyAndValue_ValueId PropertyAndValue::ISOLATE_OVERRIDE;
const PropertyAndValue_ValueId PropertyAndValue::SWAP;
const PropertyAndValue_ValueId PropertyAndValue::RTL;
const PropertyAndValue_ValueId PropertyAndValue::CRIMSON;
const PropertyAndValue_ValueId PropertyAndValue::TB;
const PropertyAndValue_ValueId PropertyAndValue::COMMON_LIGATURES;
const PropertyAndValue_ValueId PropertyAndValue::_WEBKIT_MIN_CONTENT;
const PropertyAndValue_ValueId PropertyAndValue::BROWN;
const PropertyAndValue_ValueId PropertyAndValue::KHMER;
const PropertyAndValue_ValueId PropertyAndValue::INFINITE;
const PropertyAndValue_ValueId PropertyAndValue::TABLE_HEADER_GROUP;
const PropertyAndValue_ValueId PropertyAndValue::BEFORE_EDGE;
const PropertyAndValue_ValueId PropertyAndValue::READ_WRITE;
const PropertyAndValue_ValueId PropertyAndValue::RL;
const PropertyAndValue_ValueId PropertyAndValue::WAVY;
const PropertyAndValue_ValueId PropertyAndValue::PROPORTIONAL_WIDTH;
const PropertyAndValue_ValueId PropertyAndValue::NO_DROP;
const PropertyAndValue_ValueId PropertyAndValue::CYAN;
const PropertyAndValue_ValueId PropertyAndValue::DIFFERENCE;
const PropertyAndValue_ValueId PropertyAndValue::EXACT;
const PropertyAndValue_ValueId PropertyAndValue::SQUARE_BUTTON;
const PropertyAndValue_ValueId PropertyAndValue::SKYBLUE;
const PropertyAndValue_ValueId PropertyAndValue::_WEBKIT_ISOLATE_OVERRIDE;
const PropertyAndValue_ValueId PropertyAndValue::TABLE_ROW_GROUP;
const PropertyAndValue_ValueId PropertyAndValue::DARKGRAY;
const PropertyAndValue_ValueId PropertyAndValue::BUTTON;
const PropertyAndValue_ValueId PropertyAndValue::ETHIOPIC_HALEHAME_AM;
const PropertyAndValue_ValueId PropertyAndValue::LARGE;
const PropertyAndValue_ValueId PropertyAndValue::LIGHTPINK;
const PropertyAndValue_ValueId PropertyAndValue::CROSSHAIR;
const PropertyAndValue_ValueId PropertyAndValue::TEAL;
const PropertyAndValue_ValueId PropertyAndValue::FILL_BOX;
const PropertyAndValue_ValueId PropertyAndValue::SMALL;
const PropertyAndValue_ValueId PropertyAndValue::MEDIA_SLIDERTHUMB;
const PropertyAndValue_ValueId PropertyAndValue::ROUND;
const PropertyAndValue_ValueId PropertyAndValue::_INTERNAL_MEDIA_SUBTITLES_ICON;
const PropertyAndValue_ValueId PropertyAndValue::MEDIA_PLAY_BUTTON;
const PropertyAndValue_ValueId PropertyAndValue::SMALLER;
const PropertyAndValue_ValueId PropertyAndValue::JIS04;
const PropertyAndValue_ValueId PropertyAndValue::LR_TB;
const PropertyAndValue_ValueId PropertyAndValue::LIGHTGOLDENRODYELLOW;
const PropertyAndValue_ValueId PropertyAndValue::LAVENDER;
const PropertyAndValue_ValueId PropertyAndValue::ULTRA_EXPANDED;
const PropertyAndValue_ValueId PropertyAndValue::DIMGREY;
const PropertyAndValue_ValueId PropertyAndValue::DIAGONAL_FRACTIONS;
const PropertyAndValue_ValueId PropertyAndValue::BLUE;
const PropertyAndValue_ValueId PropertyAndValue::XOR;
const PropertyAndValue_ValueId PropertyAndValue::SUB;
const PropertyAndValue_ValueId PropertyAndValue::TELUGU;
const PropertyAndValue_ValueId PropertyAndValue::CRISPEDGES;
const PropertyAndValue_ValueId PropertyAndValue::_WEBKIT_MINI_CONTROL;
const PropertyAndValue_ValueId PropertyAndValue::ZOOM_OUT;
const PropertyAndValue_ValueId PropertyAndValue::SEARCHFIELD;
const PropertyAndValue_ValueId PropertyAndValue::CELL;
const PropertyAndValue_ValueId PropertyAndValue::GUJARATI;
const PropertyAndValue_ValueId PropertyAndValue::ABOVE;
const PropertyAndValue_ValueId PropertyAndValue::NO_PUNCTUATION;
const PropertyAndValue_ValueId PropertyAndValue::NEW;
const PropertyAndValue_ValueId PropertyAndValue::FILLED;
const PropertyAndValue_ValueId PropertyAndValue::USE_SCRIPT;
const PropertyAndValue_ValueId PropertyAndValue::CONDENSED;
const PropertyAndValue_ValueId PropertyAndValue::LOOSE;
const PropertyAndValue_ValueId PropertyAndValue::SOURCE_OUT;
const PropertyAndValue_ValueId PropertyAndValue::OBJECTS;
const PropertyAndValue_ValueId PropertyAndValue::SLIDER_HORIZONTAL;
const PropertyAndValue_ValueId PropertyAndValue::ROW_RESIZE;
const PropertyAndValue_ValueId PropertyAndValue::BREAK_ALL;
const PropertyAndValue_ValueId PropertyAndValue::WAIT;
const PropertyAndValue_ValueId PropertyAndValue::MEDIA_EXIT_FULLSCREEN_BUTTON;
const PropertyAndValue_ValueId PropertyAndValue::KOREAN_HANGUL_FORMAL;
const PropertyAndValue_ValueId PropertyAndValue::FLORALWHITE;
const PropertyAndValue_ValueId PropertyAndValue::RESET_SIZE;
const PropertyAndValue_ValueId PropertyAndValue::ZOOM_IN;
const PropertyAndValue_ValueId PropertyAndValue::_WEBKIT_GRABBING;
const PropertyAndValue_ValueId PropertyAndValue::LARGER;
const PropertyAndValue_ValueId PropertyAndValue::MAX_CONTENT;
const PropertyAndValue_ValueId PropertyAndValue::SRGB;
const PropertyAndValue_ValueId PropertyAndValue::LITERAL_PUNCTUATION;
const PropertyAndValue_ValueId PropertyAndValue::WINDOWFRAME;
const PropertyAndValue_ValueId PropertyAndValue::SUBPIXEL_ANTIALIASED;
const PropertyAndValue_ValueId PropertyAndValue::BUTTONHIGHLIGHT;
const PropertyAndValue_ValueId PropertyAndValue::HUE;
const PropertyAndValue_ValueId PropertyAndValue::PIXELATED;
const PropertyAndValue_ValueId PropertyAndValue::STICKY;
const PropertyAndValue_ValueId PropertyAndValue::GREENYELLOW;
const PropertyAndValue_ValueId PropertyAndValue::LINEARRGB;
const PropertyAndValue_ValueId PropertyAndValue::LIGHTSEAGREEN;
const PropertyAndValue_ValueId PropertyAndValue::LOGICAL;
const PropertyAndValue_ValueId PropertyAndValue::_WEBKIT_RIGHT;
const PropertyAndValue_ValueId PropertyAndValue::SIENNA;
const PropertyAndValue_ValueId PropertyAndValue::FLOW_ROOT;
const PropertyAndValue_ValueId PropertyAndValue::OPTIMIZESPEED;
const PropertyAndValue_ValueId PropertyAndValue::KOREAN_HANJA_FORMAL;
const PropertyAndValue_ValueId PropertyAndValue::NOWRAP;
const PropertyAndValue_ValueId PropertyAndValue::X_SMALL;
const PropertyAndValue_ValueId PropertyAndValue::LANDSCAPE;
const PropertyAndValue_ValueId PropertyAndValue::LIME;
const PropertyAndValue_ValueId PropertyAndValue::X_LARGE;
const PropertyAndValue_ValueId PropertyAndValue::NS_RESIZE;
const PropertyAndValue_ValueId PropertyAndValue::APPWORKSPACE;
const PropertyAndValue_ValueId PropertyAndValue::PERU;
const PropertyAndValue_ValueId PropertyAndValue::ALL_PETITE_CAPS;
const PropertyAndValue_ValueId PropertyAndValue::BLACK;
const PropertyAndValue_ValueId PropertyAndValue::XX_SMALL;
const PropertyAndValue_ValueId PropertyAndValue::ALL_SCROLL;
const PropertyAndValue_ValueId PropertyAndValue::DARKSLATEGRAY;
const PropertyAndValue_ValueId PropertyAndValue::FLAT;
const PropertyAndValue_ValueId PropertyAndValue::GEORGIAN;
const PropertyAndValue_ValueId PropertyAndValue::UNDER;
const PropertyAndValue_ValueId PropertyAndValue::LEMONCHIFFON;
const PropertyAndValue_ValueId PropertyAndValue::CHOCOLATE;
const PropertyAndValue_ValueId PropertyAndValue::PRE_LINE;
const PropertyAndValue_ValueId PropertyAndValue::CONTEXT_MENU;
const PropertyAndValue_ValueId PropertyAndValue::DARKGREY;
const PropertyAndValue_ValueId PropertyAndValue::VIEW_BOX;
const PropertyAndValue_ValueId PropertyAndValue::OLIVE;
const PropertyAndValue_ValueId PropertyAndValue::_WEBKIT_PLAINTEXT;
const PropertyAndValue_ValueId PropertyAndValue::EXTRA_EXPANDED;
const PropertyAndValue_ValueId PropertyAndValue::ANTIQUEWHITE;
const PropertyAndValue_ValueId PropertyAndValue::NONE;
const PropertyAndValue_ValueId PropertyAndValue::MOCCASIN;
const PropertyAndValue_ValueId PropertyAndValue::LOCAL;
const PropertyAndValue_ValueId PropertyAndValue::STROKE;
const PropertyAndValue_ValueId PropertyAndValue::DARKSLATEBLUE;
const PropertyAndValue_ValueId PropertyAndValue::LIGHTSKYBLUE;
const PropertyAndValue_ValueId PropertyAndValue::CONTENT_BOX;
const PropertyAndValue_ValueId PropertyAndValue::THIN;
const PropertyAndValue_ValueId PropertyAndValue::DEEPPINK;
const PropertyAndValue_ValueId PropertyAndValue::SPELL_OUT;
const PropertyAndValue_ValueId PropertyAndValue::NON_SCALING_STROKE;
const PropertyAndValue_ValueId PropertyAndValue::SLIDER_VERTICAL;
const PropertyAndValue_ValueId PropertyAndValue::_WEBKIT_BOX;
const PropertyAndValue_ValueId PropertyAndValue::PLUM;
const PropertyAndValue_ValueId PropertyAndValue::_INTERNAL_MEDIA_OVERLAY_CAST_OFF_BUTTON;
const PropertyAndValue_ValueId PropertyAndValue::INACTIVECAPTIONTEXT;
const PropertyAndValue_ValueId PropertyAndValue::DODGERBLUE;
const PropertyAndValue_ValueId PropertyAndValue::THREEDSHADOW;
const PropertyAndValue_ValueId PropertyAndValue::PETITE_CAPS;
const PropertyAndValue_ValueId PropertyAndValue::PAUSED;
const PropertyAndValue_ValueId PropertyAndValue::_WEBKIT_LINK;
const PropertyAndValue_ValueId PropertyAndValue::MESSAGE_BOX;
const PropertyAndValue_ValueId PropertyAndValue::_INTERNAL_CENTER;
const PropertyAndValue_ValueId PropertyAndValue::TRIANGLE;
const PropertyAndValue_ValueId PropertyAndValue::MAGENTA;
const PropertyAndValue_ValueId PropertyAndValue::TAN;
const PropertyAndValue_ValueId PropertyAndValue::ABSOLUTE;
const PropertyAndValue_ValueId PropertyAndValue::PINK;
const PropertyAndValue_ValueId PropertyAndValue::HIRAGANA_IROHA;
const PropertyAndValue_ValueId PropertyAndValue::FARTHEST_SIDE;
const PropertyAndValue_ValueId PropertyAndValue::PALEVIOLETRED;
const PropertyAndValue_ValueId PropertyAndValue::CLOSE_QUOTE;
const PropertyAndValue_ValueId PropertyAndValue::THREEDLIGHTSHADOW;
const PropertyAndValue_ValueId PropertyAndValue::CAPTION;
const PropertyAndValue_ValueId PropertyAndValue::POWDERBLUE;
const PropertyAndValue_ValueId PropertyAndValue::TABLE_COLUMN;
const PropertyAndValue_ValueId PropertyAndValue::SOURCE_ATOP;
const PropertyAndValue_ValueId PropertyAndValue::HIRAGANA;
const PropertyAndValue_ValueId PropertyAndValue::UPPER_ARMENIAN;
const PropertyAndValue_ValueId PropertyAndValue::WINDOWTEXT;
const PropertyAndValue_ValueId PropertyAndValue::FULL_WIDTH;
const PropertyAndValue_ValueId PropertyAndValue::PROGRESS_BAR_VALUE;
const PropertyAndValue_ValueId PropertyAndValue::MIDNIGHTBLUE;
const PropertyAndValue_ValueId PropertyAndValue::INLINE_FLEX;
const PropertyAndValue_ValueId PropertyAndValue::ECONOMY;
const PropertyAndValue_ValueId PropertyAndValue::LAO;
const PropertyAndValue_ValueId PropertyAndValue::CLONE;
const PropertyAndValue_ValueId PropertyAndValue::AFTER;
const PropertyAndValue_ValueId PropertyAndValue::STATUS_BAR;
const PropertyAndValue_ValueId PropertyAndValue::LOWERCASE;
const PropertyAndValue_ValueId PropertyAndValue::MIXED;
const PropertyAndValue_ValueId PropertyAndValue::LINE_THROUGH;
const PropertyAndValue_ValueId PropertyAndValue::LIGHTSLATEGRAY;
const PropertyAndValue_ValueId PropertyAndValue::SMALL_CAPTION;
const PropertyAndValue_ValueId PropertyAndValue::INFOBACKGROUND;
const PropertyAndValue_ValueId PropertyAndValue::DISCARD;
const PropertyAndValue_ValueId PropertyAndValue::CAPTIONTEXT;
const PropertyAndValue_ValueId PropertyAndValue::END;
const PropertyAndValue_ValueId PropertyAndValue::_INTERNAL_INACTIVE_LIST_BOX_SELECTION_TEXT;
const PropertyAndValue_ValueId PropertyAndValue::CAPITALIZE;
const PropertyAndValue_ValueId PropertyAndValue::MEDIUMSEAGREEN;
const PropertyAndValue_ValueId PropertyAndValue::TOMATO;
const PropertyAndValue_ValueId PropertyAndValue::CADETBLUE;
const PropertyAndValue_ValueId PropertyAndValue::DECIMAL_LEADING_ZERO;
const PropertyAndValue_ValueId PropertyAndValue::SANS_SERIF;
const PropertyAndValue_ValueId PropertyAndValue::LINEN;
const PropertyAndValue_ValueId PropertyAndValue::GREEN;
const PropertyAndValue_ValueId PropertyAndValue::INACTIVEBORDER;
const PropertyAndValue_ValueId PropertyAndValue::INLINE;
const PropertyAndValue_ValueId PropertyAndValue::FALLBACK;
const PropertyAndValue_ValueId PropertyAndValue::PEACHPUFF;
const PropertyAndValue_ValueId PropertyAndValue::_WEBKIT_MAX_CONTENT;
const PropertyAndValue_ValueId PropertyAndValue::PLUS_LIGHTER;
const PropertyAndValue_ValueId PropertyAndValue::CHECKBOX;
const PropertyAndValue_ValueId PropertyAndValue::HELP;
const PropertyAndValue_ValueId PropertyAndValue::OBLIQUE;
const PropertyAndValue_ValueId PropertyAndValue::MOVE;
const PropertyAndValue_ValueId PropertyAndValue::METER;
const PropertyAndValue_ValueId PropertyAndValue::LEDGER;
const PropertyAndValue_ValueId PropertyAndValue::SLATEGREY;
const PropertyAndValue_ValueId PropertyAndValue::MEDIA_TIME_REMAINING_DISPLAY;
const PropertyAndValue_ValueId PropertyAndValue::URDU;
const PropertyAndValue_ValueId PropertyAndValue::POINTER;
const PropertyAndValue_ValueId PropertyAndValue::BEFORE;
const PropertyAndValue_ValueId PropertyAndValue::DARKSLATEGREY;
const PropertyAndValue_ValueId PropertyAndValue::_WEBKIT_CONTROL;
const PropertyAndValue_ValueId PropertyAndValue::_WEBKIT_INLINE_BOX;
const PropertyAndValue_ValueId PropertyAndValue::HARD_LIGHT;
const PropertyAndValue_ValueId PropertyAndValue::MITER;
const PropertyAndValue_ValueId PropertyAndValue::ORIYA;
const PropertyAndValue_ValueId PropertyAndValue::UPPER_LATIN;
const PropertyAndValue_ValueId PropertyAndValue::WINDOW;
const PropertyAndValue_ValueId PropertyAndValue::MEDIUMBLUE;
const PropertyAndValue_ValueId PropertyAndValue::LR;
const PropertyAndValue_ValueId PropertyAndValue::ORANGE;
const PropertyAndValue_ValueId PropertyAndValue::HIDDEN;
const PropertyAndValue_ValueId PropertyAndValue::_INTERNAL_ACTIVE_LIST_BOX_SELECTION;
const PropertyAndValue_ValueId PropertyAndValue::BOLDER;
const PropertyAndValue_ValueId PropertyAndValue::_WEBKIT_CENTER;
const PropertyAndValue_ValueId PropertyAndValue::SAFE;
const PropertyAndValue_ValueId PropertyAndValue::HIGHLIGHTTEXT;
const PropertyAndValue_ValueId PropertyAndValue::ACCUMULATE;
const PropertyAndValue_ValueId PropertyAndValue::FLEX_END;
const PropertyAndValue_ValueId PropertyAndValue::TRANSPARENT;
const PropertyAndValue_ValueId PropertyAndValue::_INTERNAL_MEDIA_REMOTING_CAST_ICON;
const PropertyAndValue_ValueId PropertyAndValue::GOLDENROD;
const PropertyAndValue_ValueId PropertyAndValue::HISTORICAL_LIGATURES;
const PropertyAndValue_ValueId PropertyAndValue::DARKVIOLET;
const PropertyAndValue_ValueId PropertyAndValue::ALWAYS;
const PropertyAndValue_ValueId PropertyAndValue::DECIMAL;
const PropertyAndValue_ValueId PropertyAndValue::BLOCK_AXIS;
const PropertyAndValue_ValueId PropertyAndValue::SCROLLBAR;
const PropertyAndValue_ValueId PropertyAndValue::EW_RESIZE;
const PropertyAndValue_ValueId PropertyAndValue::DARKMAGENTA;
const PropertyAndValue_ValueId PropertyAndValue::NOT_ALLOWED;
const PropertyAndValue_ValueId PropertyAndValue::EASE_IN;
const PropertyAndValue_ValueId PropertyAndValue::TABLE_COLUMN_GROUP;
const PropertyAndValue_ValueId PropertyAndValue::SQUARE;
const PropertyAndValue_ValueId PropertyAndValue::NO_CONTEXTUAL;
const PropertyAndValue_ValueId PropertyAndValue::_WEBKIT_FILL_AVAILABLE;
const PropertyAndValue_ValueId PropertyAndValue::FRAMES;
const PropertyAndValue_ValueId PropertyAndValue::PERSIAN;
const PropertyAndValue_ValueId PropertyAndValue::STATIC;
const PropertyAndValue_ValueId PropertyAndValue::NAVY;
const PropertyAndValue_ValueId PropertyAndValue::VISIBLEPAINTED;
const PropertyAndValue_ValueId PropertyAndValue::THICK;
const PropertyAndValue_ValueId PropertyAndValue::SIMP_CHINESE_FORMAL;
const PropertyAndValue_ValueId PropertyAndValue::GHOSTWHITE;
const PropertyAndValue_ValueId PropertyAndValue::SPACE;
const PropertyAndValue_ValueId PropertyAndValue::DARKKHAKI;
const PropertyAndValue_ValueId PropertyAndValue::KEEP_ALL;
const PropertyAndValue_ValueId PropertyAndValue::CONTENT;
const PropertyAndValue_ValueId PropertyAndValue::_INTERNAL_MEDIA_DOWNLOAD_BUTTON;
const PropertyAndValue_ValueId PropertyAndValue::UPPER_ROMAN;
const PropertyAndValue_ValueId PropertyAndValue::CORNSILK;
const PropertyAndValue_ValueId PropertyAndValue::RED;
const PropertyAndValue_ValueId PropertyAndValue::NO_CHANGE;
const PropertyAndValue_ValueId PropertyAndValue::LINEAR;
const PropertyAndValue_ValueId PropertyAndValue::_INTERNAL_MEDIA_CONTROL;
const PropertyAndValue_ValueId PropertyAndValue::SIDEWAYS;
const PropertyAndValue_ValueId PropertyAndValue::CONTAIN;
const PropertyAndValue_ValueId PropertyAndValue::KATAKANA_IROHA;
const PropertyAndValue_ValueId PropertyAndValue::STEELBLUE;
const PropertyAndValue_ValueId PropertyAndValue::DOUBLE_CIRCLE;
const PropertyAndValue_ValueId PropertyAndValue::ANTIALIASED;
const PropertyAndValue_ValueId PropertyAndValue::ALICEBLUE;
const PropertyAndValue_ValueId PropertyAndValue::LIGHTSLATEGREY;
const PropertyAndValue_ValueId PropertyAndValue::GEOMETRICPRECISION;
const PropertyAndValue_ValueId PropertyAndValue::GAINSBORO;
const PropertyAndValue_ValueId PropertyAndValue::INLINE_TABLE;
const PropertyAndValue_ValueId PropertyAndValue::LTR;
const PropertyAndValue_ValueId PropertyAndValue::BACKWARDS;
const PropertyAndValue_ValueId PropertyAndValue::S_RESIZE;
const PropertyAndValue_ValueId PropertyAndValue::LIGHTGREY;
const PropertyAndValue_ValueId PropertyAndValue::MEDIA_MUTE_BUTTON;
const PropertyAndValue_ValueId PropertyAndValue::LISTITEM;
const PropertyAndValue_ValueId PropertyAndValue::MISTYROSE;
const PropertyAndValue_ValueId PropertyAndValue::DARKSALMON;
const PropertyAndValue_ValueId PropertyAndValue::SIDEWAYS_RIGHT;
const PropertyAndValue_ValueId PropertyAndValue::JIS83;
const PropertyAndValue_ValueId PropertyAndValue::MEDIUMSPRINGGREEN;
const PropertyAndValue_ValueId PropertyAndValue::CAPS_LOCK_INDICATOR;
const PropertyAndValue_ValueId PropertyAndValue::SLIDERTHUMB_HORIZONTAL;
const PropertyAndValue_ValueId PropertyAndValue::FORWARDS;
const PropertyAndValue_ValueId PropertyAndValue::UPPER_ALPHA;
const PropertyAndValue_ValueId PropertyAndValue::BLINK;
const PropertyAndValue_ValueId PropertyAndValue::FANTASY;
const PropertyAndValue_ValueId PropertyAndValue::SIMPLIFIED;
const PropertyAndValue_ValueId PropertyAndValue::ORANGERED;
const PropertyAndValue_ValueId PropertyAndValue::NAVAJOWHITE;
const PropertyAndValue_ValueId PropertyAndValue::OPEN;
const PropertyAndValue_ValueId PropertyAndValue::HORIZONTAL;
const PropertyAndValue_ValueId PropertyAndValue::SLATEGRAY;
const PropertyAndValue_ValueId PropertyAndValue::ACTIVECAPTION;
const PropertyAndValue_ValueId PropertyAndValue::KOREAN_HANJA_INFORMAL;
const PropertyAndValue_ValueId PropertyAndValue::STRICT;
const PropertyAndValue_ValueId PropertyAndValue::LIGHTCYAN;
const PropertyAndValue_ValueId PropertyAndValue::TOP;
const PropertyAndValue_ValueId PropertyAndValue::_WEBKIT_PICTOGRAPH;
const PropertyAndValue_ValueId PropertyAndValue::WHITE;
const PropertyAndValue_ValueId PropertyAndValue::TEXT_AFTER_EDGE;
const PropertyAndValue_ValueId PropertyAndValue::LIGHTGRAY;
const PropertyAndValue_ValueId PropertyAndValue::COLLAPSE;
const PropertyAndValue_ValueId PropertyAndValue::HOVER;
const PropertyAndValue_ValueId PropertyAndValue::_WEBKIT_OPTIMIZE_CONTRAST;
const PropertyAndValue_ValueId PropertyAndValue::PADDING;
const PropertyAndValue_ValueId PropertyAndValue::BUTT;
const PropertyAndValue_ValueId PropertyAndValue::OFF;
const PropertyAndValue_ValueId PropertyAndValue::THAI;
const PropertyAndValue_ValueId PropertyAndValue::COPY;
const PropertyAndValue_ValueId PropertyAndValue::HOTPINK;
const PropertyAndValue_ValueId PropertyAndValue::DOUBLE;
const PropertyAndValue_ValueId PropertyAndValue::LOWER_GREEK;
const PropertyAndValue_ValueId PropertyAndValue::GREY;
const PropertyAndValue_ValueId PropertyAndValue::MEDIA_VOLUME_SLIDER_CONTAINER;
const PropertyAndValue_ValueId PropertyAndValue::_WEBKIT_INLINE_FLEX;
const PropertyAndValue_ValueId PropertyAndValue::SPACE_EVENLY;
const PropertyAndValue_ValueId PropertyAndValue::ACTIVEBORDER;
const PropertyAndValue_ValueId PropertyAndValue::BROWSER;
const PropertyAndValue_ValueId PropertyAndValue::PRE;
const PropertyAndValue_ValueId PropertyAndValue::UNICASE;
const PropertyAndValue_ValueId PropertyAndValue::SIMP_CHINESE_INFORMAL;
const PropertyAndValue_ValueId PropertyAndValue::CLIP;
const PropertyAndValue_ValueId PropertyAndValue::CLOSEST_CORNER;
const PropertyAndValue_ValueId PropertyAndValue::PLAINTEXT;
const PropertyAndValue_ValueId PropertyAndValue::NO_REPEAT;
const PropertyAndValue_ValueId PropertyAndValue::TEXT_TOP;
const PropertyAndValue_ValueId PropertyAndValue::JIS78;
const PropertyAndValue_ValueId PropertyAndValue::XX_LARGE;
const PropertyAndValue_ValueId PropertyAndValue::RL_TB;
const PropertyAndValue_ValueId PropertyAndValue::TABLE_ROW;
const PropertyAndValue_ValueId PropertyAndValue::MEDIUM;
const PropertyAndValue_ValueId PropertyAndValue::MONGOLIAN;
const PropertyAndValue_ValueId PropertyAndValue::KATAKANA;
const PropertyAndValue_ValueId PropertyAndValue::ELEMENT;
const PropertyAndValue_ValueId PropertyAndValue::BORDER;
const PropertyAndValue_ValueId PropertyAndValue::ROSYBROWN;
const PropertyAndValue_ValueId PropertyAndValue::PROGRESS_BAR;
const PropertyAndValue_ValueId PropertyAndValue::WHITESMOKE;
const PropertyAndValue_ValueId PropertyAndValue::LIGHTBLUE;
const PropertyAndValue_ValueId PropertyAndValue::_WEBKIT_LEFT;
const PropertyAndValue_ValueId PropertyAndValue::NO_COMMON_LIGATURES;
const PropertyAndValue_ValueId PropertyAndValue::LISTBOX;
const PropertyAndValue_ValueId PropertyAndValue::ISOLATE;
const PropertyAndValue_ValueId PropertyAndValue::SNOW;
const PropertyAndValue_ValueId PropertyAndValue::STEP_END;
const PropertyAndValue_ValueId PropertyAndValue::ETHIOPIC_HALEHAME_TI_ER;
const PropertyAndValue_ValueId PropertyAndValue::ETHIOPIC_HALEHAME_TI_ET;
const PropertyAndValue_ValueId PropertyAndValue::MULTIPLE;
const PropertyAndValue_ValueId PropertyAndValue::_INTERNAL_INACTIVE_LIST_BOX_SELECTION;
const PropertyAndValue_ValueId PropertyAndValue::NORMAL;
const PropertyAndValue_ValueId PropertyAndValue::BLUEVIOLET;
const PropertyAndValue_ValueId PropertyAndValue::SALMON;
const PropertyAndValue_ValueId PropertyAndValue::LOWER_ALPHA;
const PropertyAndValue_ValueId PropertyAndValue::OLDLACE;
const PropertyAndValue_ValueId PropertyAndValue::LETTER;
const PropertyAndValue_ValueId PropertyAndValue::BORDER_BOX;
const PropertyAndValue_ValueId PropertyAndValue::ALPHA;
const PropertyAndValue_ValueId PropertyAndValue::TIBETAN;
const PropertyAndValue_ValueId PropertyAndValue::ICON;
const PropertyAndValue_ValueId PropertyAndValue::FLEX_START;
const PropertyAndValue_ValueId PropertyAndValue::TEXTAREA;
const PropertyAndValue_ValueId PropertyAndValue::W_RESIZE;
const PropertyAndValue_ValueId PropertyAndValue::CLEAR;
const PropertyAndValue_ValueId PropertyAndValue::COVER;
const PropertyAndValue_ValueId PropertyAndValue::FARTHEST_CORNER;
const PropertyAndValue_ValueId PropertyAndValue::MENULIST_TEXTFIELD;
const PropertyAndValue_ValueId PropertyAndValue::TRADITIONAL;
const PropertyAndValue_ValueId PropertyAndValue::LEFT;
const PropertyAndValue_ValueId PropertyAndValue::DOT;
const PropertyAndValue_ValueId PropertyAndValue::LUMINANCE;
const PropertyAndValue_ValueId PropertyAndValue::GOLD;
const PropertyAndValue_ValueId PropertyAndValue::SHOW;
const PropertyAndValue_ValueId PropertyAndValue::TEXT;
const PropertyAndValue_ValueId PropertyAndValue::_WEBKIT_MATCH_PARENT;
const PropertyAndValue_ValueId PropertyAndValue::RADIO;
const PropertyAndValue_ValueId PropertyAndValue::CAMBODIAN;
const PropertyAndValue_ValueId PropertyAndValue::REPEAT_X;
const PropertyAndValue_ValueId PropertyAndValue::REPEAT_Y;
const PropertyAndValue_ValueId PropertyAndValue::FINE;
const PropertyAndValue_ValueId PropertyAndValue::TEXTFIELD;
const PropertyAndValue_ValueId PropertyAndValue::FROM_IMAGE;
const PropertyAndValue_ValueId PropertyAndValue::LINING_NUMS;
const PropertyAndValue_ValueId PropertyAndValue::MENU;
const PropertyAndValue_ValueId PropertyAndValue::PROPORTIONAL_NUMS;
const PropertyAndValue_ValueId PropertyAndValue::SOURCE_OVER;
const PropertyAndValue_ValueId PropertyAndValue::NE_RESIZE;
const PropertyAndValue_ValueId PropertyAndValue::PAPAYAWHIP;
const PropertyAndValue_ValueId PropertyAndValue::SOURCE_IN;
const PropertyAndValue_ValueId PropertyAndValue::SE_RESIZE;
const PropertyAndValue_ValueId PropertyAndValue::CIRCLE;
const PropertyAndValue_ValueId PropertyAndValue::DESTINATION_OUT;
const PropertyAndValue_ValueId PropertyAndValue::THREEDFACE;
const PropertyAndValue_ValueId PropertyAndValue::OVER;
const PropertyAndValue_ValueId PropertyAndValue::DISTRIBUTE;
const PropertyAndValue_ValueId PropertyAndValue::INACTIVECAPTION;
const PropertyAndValue_ValueId PropertyAndValue::LIGHTEN;
const PropertyAndValue_ValueId PropertyAndValue::_WEBKIT_FIT_CONTENT;
const PropertyAndValue_ValueId PropertyAndValue::LIGHTER;
const PropertyAndValue_ValueId PropertyAndValue::CONTEXTUAL;
const PropertyAndValue_ValueId PropertyAndValue::GRAY;
const PropertyAndValue_ValueId PropertyAndValue::DARKTURQUOISE;
const PropertyAndValue_ValueId PropertyAndValue::E_RESIZE;
const PropertyAndValue_ValueId PropertyAndValue::LUMINOSITY;
const PropertyAndValue_ValueId PropertyAndValue::LIST_ITEM;
const PropertyAndValue_ValueId PropertyAndValue::LIMEGREEN;
const PropertyAndValue_ValueId PropertyAndValue::FIXED;
const PropertyAndValue_ValueId PropertyAndValue::MIN_CONTENT;
const PropertyAndValue_ValueId PropertyAndValue::MEDIA_SLIDER;
const PropertyAndValue_ValueId PropertyAndValue::VISIBLESTROKE;
const PropertyAndValue_ValueId PropertyAndValue::CUBIC_BEZIER;
const PropertyAndValue_ValueId PropertyAndValue::CLOSEST_SIDE;
const PropertyAndValue_ValueId PropertyAndValue::RELATIVE;
const PropertyAndValue_ValueId PropertyAndValue::NO_OPEN_QUOTE;
const PropertyAndValue_ValueId PropertyAndValue::THISTLE;
const PropertyAndValue_ValueId PropertyAndValue::VIOLET;
const PropertyAndValue_ValueId PropertyAndValue::PORTRAIT;
const PropertyAndValue_ValueId PropertyAndValue::FULLSCREEN;
const PropertyAndValue_ValueId PropertyAndValue::HONEYDEW;
const PropertyAndValue_ValueId PropertyAndValue::ON_DEMAND;
const PropertyAndValue_ValueId PropertyAndValue::CORNFLOWERBLUE;
const PropertyAndValue_ValueId PropertyAndValue::DARKBLUE;
const PropertyAndValue_ValueId PropertyAndValue::OUTSIDE;
const PropertyAndValue_ValueId PropertyAndValue::PROGRESS;
const PropertyAndValue_ValueId PropertyAndValue::MEDIUMPURPLE;
const PropertyAndValue_ValueId PropertyAndValue::DARKCYAN;
const PropertyAndValue_ValueId PropertyAndValue::VERTICAL;
const PropertyAndValue_ValueId PropertyAndValue::MONOSPACE;
const PropertyAndValue_ValueId PropertyAndValue::BREAK_WORD;
const PropertyAndValue_ValueId PropertyAndValue::SCREEN;
const PropertyAndValue_ValueId PropertyAndValue::REBECCAPURPLE;
const PropertyAndValue_ValueId PropertyAndValue::DARKRED;
const PropertyAndValue_ValueId PropertyAndValue::VERTICAL_LR;
const PropertyAndValue_ValueId PropertyAndValue::OPTIMIZEQUALITY;
const PropertyAndValue_ValueId PropertyAndValue::ARMENIAN;
const PropertyAndValue_ValueId PropertyAndValue::NWSE_RESIZE;
const PropertyAndValue_ValueId PropertyAndValue::TEXT_BEFORE_EDGE;
const PropertyAndValue_ValueId PropertyAndValue::OPTIONAL;
const PropertyAndValue_ValueId PropertyAndValue::EXCLUSION;
const PropertyAndValue_ValueId PropertyAndValue::BOTH;
const PropertyAndValue_ValueId PropertyAndValue::MEDIUMTURQUOISE;
const PropertyAndValue_ValueId PropertyAndValue::LOWER_ROMAN;
const PropertyAndValue_ValueId PropertyAndValue::REVERSE;
const PropertyAndValue_ValueId PropertyAndValue::HANGUL_CONSONANT;
const PropertyAndValue_ValueId PropertyAndValue::SOFT_LIGHT;
const PropertyAndValue_ValueId PropertyAndValue::AQUA;
const PropertyAndValue_ValueId PropertyAndValue::BUTTON_BEVEL;
const PropertyAndValue_ValueId PropertyAndValue::GURMUKHI;
const PropertyAndValue_ValueId PropertyAndValue::LIGHTSTEELBLUE;
const PropertyAndValue_ValueId PropertyAndValue::SMALL_CAPS;
const PropertyAndValue_ValueId PropertyAndValue::N_RESIZE;
const PropertyAndValue_ValueId PropertyAndValue::TABLE_FOOTER_GROUP;
const PropertyAndValue_ValueId PropertyAndValue::DESTINATION_IN;
const PropertyAndValue_ValueId PropertyAndValue::OLIVEDRAB;
const PropertyAndValue_ValueId PropertyAndValue::READ_WRITE_PLAINTEXT_ONLY;
const PropertyAndValue_ValueId PropertyAndValue::PADDING_BOX;
const PropertyAndValue_ValueId PropertyAndValue::COL_RESIZE;
const PropertyAndValue_ValueId PropertyAndValue::_INTERNAL_MEDIA_TRACK_SELECTION_CHECKMARK;
const PropertyAndValue_ValueId PropertyAndValue::LOWER_LATIN;
const PropertyAndValue_ValueId PropertyAndValue::_WEBKIT_NOWRAP;
const PropertyAndValue_ValueId PropertyAndValue::TABLE;
const PropertyAndValue_ValueId PropertyAndValue::BUTTONSHADOW;
const PropertyAndValue_ValueId PropertyAndValue::PALEGREEN;
const PropertyAndValue_ValueId PropertyAndValue::JIS90;
const PropertyAndValue_ValueId PropertyAndValue::FIT_CONTENT;
const PropertyAndValue_ValueId PropertyAndValue::STRETCH;
const PropertyAndValue_ValueId PropertyAndValue::SEASHELL;
const PropertyAndValue_ValueId PropertyAndValue::THREEDHIGHLIGHT;
const PropertyAndValue_ValueId PropertyAndValue::VISIBLEFILL;
const PropertyAndValue_ValueId PropertyAndValue::SPACE_AROUND;
const PropertyAndValue_ValueId PropertyAndValue::COARSE;
const PropertyAndValue_ValueId PropertyAndValue::AQUAMARINE;
const PropertyAndValue_ValueId PropertyAndValue::DIGITS;
const PropertyAndValue_ValueId PropertyAndValue::CURRENTCOLOR;
const PropertyAndValue_ValueId PropertyAndValue::PAINTED;
const PropertyAndValue_ValueId PropertyAndValue::TB_RL;
const PropertyAndValue_ValueId PropertyAndValue::BUTTONFACE;
const PropertyAndValue_ValueId PropertyAndValue::LAWNGREEN;
const PropertyAndValue_ValueId PropertyAndValue::BURLYWOOD;
const PropertyAndValue_ValueId PropertyAndValue::_WEBKIT_SMALL_CONTROL;
const PropertyAndValue_ValueId PropertyAndValue::SLATEBLUE;
const PropertyAndValue_ValueId PropertyAndValue::MINTCREAM;
const PropertyAndValue_ValueId PropertyAndValue::RUBY;
const PropertyAndValue_ValueId PropertyAndValue::SOLID;
const PropertyAndValue_ValueId PropertyAndValue::ULTRA_CONDENSED;
const PropertyAndValue_ValueId PropertyAndValue::EXPANDED;
const PropertyAndValue_ValueId PropertyAndValue::SADDLEBROWN;
const PropertyAndValue_ValueId PropertyAndValue::VERTICAL_RL;
const PropertyAndValue_ValueId PropertyAndValue::SESAME;
const PropertyAndValue_ValueId PropertyAndValue::_WEBKIT_BODY;
const PropertyAndValue_ValueId PropertyAndValue::DESTINATION_ATOP;
const PropertyAndValue_ValueId PropertyAndValue::MALAYALAM;
const PropertyAndValue_ValueId PropertyAndValue::WRAP_REVERSE;
const PropertyAndValue_ValueId PropertyAndValue::BALANCE;
const PropertyAndValue_ValueId PropertyAndValue::VERTICAL_RIGHT;
const PropertyAndValue_ValueId PropertyAndValue::NO_CLOSE_QUOTE;
const PropertyAndValue_ValueId PropertyAndValue::FLEX;
const PropertyAndValue_ValueId PropertyAndValue::PUSH_BUTTON;
const PropertyAndValue_ValueId PropertyAndValue::DARKGOLDENROD;
const PropertyAndValue_ValueId PropertyAndValue::SATURATION;
const PropertyAndValue_ValueId PropertyAndValue::MIDDLE;
const PropertyAndValue_ValueId PropertyAndValue::SANDYBROWN;
const PropertyAndValue_ValueId PropertyAndValue::HEBREW;
const PropertyAndValue_ValueId PropertyAndValue::MENUTEXT;
const PropertyAndValue_ValueId PropertyAndValue::INLINE_AXIS;
const PropertyAndValue_ValueId PropertyAndValue::BASELINE;
const PropertyAndValue_ValueId PropertyAndValue::_WEBKIT_GRAB;
const PropertyAndValue_ValueId PropertyAndValue::DARKORANGE;
const PropertyAndValue_ValueId PropertyAndValue::_WEBKIT_FLEX;
const PropertyAndValue_ValueId PropertyAndValue::NW_RESIZE;
const PropertyAndValue_ValueId PropertyAndValue::CONTENTS;
const PropertyAndValue_ValueId PropertyAndValue::AUTO;
const PropertyAndValue_ValueId PropertyAndValue::MARGIN_BOX;
const PropertyAndValue_ValueId PropertyAndValue::DOCUMENT;
const PropertyAndValue_ValueId PropertyAndValue::PALEGOLDENROD;
const PropertyAndValue_ValueId PropertyAndValue::ORDINAL;
const PropertyAndValue_ValueId PropertyAndValue::HAND;
const PropertyAndValue_ValueId PropertyAndValue::RUNNING;
const PropertyAndValue_ValueId PropertyAndValue::CJK_EARTHLY_BRANCH;
const PropertyAndValue_ValueId PropertyAndValue::TABLE_CAPTION;
const PropertyAndValue_ValueId PropertyAndValue::MEDIA_TOGGLE_CLOSED_CAPTIONS_BUTTON;
const PropertyAndValue_ValueId PropertyAndValue::AFTER_EDGE;
const PropertyAndValue_ValueId PropertyAndValue::SLIDERTHUMB_VERTICAL;
const PropertyAndValue_ValueId PropertyAndValue::CENTER;
const PropertyAndValue_ValueId PropertyAndValue::LIGHTYELLOW;
const PropertyAndValue_ValueId PropertyAndValue::LAVENDERBLUSH;
const PropertyAndValue_ValueId PropertyAndValue::_INTERNAL_MEDIA_CLOSED_CAPTIONS_ICON;
const PropertyAndValue_ValueId PropertyAndValue::INHERIT;
const PropertyAndValue_ValueId PropertyAndValue::MEDIA_CONTROLS_BACKGROUND;
const PropertyAndValue_ValueId PropertyAndValue::JUSTIFY;
const PropertyAndValue_ValueId PropertyAndValue::OPTIMIZELEGIBILITY;
const PropertyAndValue_ValueId PropertyAndValue::_WEBKIT_BASELINE_MIDDLE;
const PropertyAndValue_ValueId PropertyAndValue::INDIGO;
const PropertyAndValue_ValueId PropertyAndValue::MINIMAL_UI;
const PropertyAndValue_ValueId PropertyAndValue::FIREBRICK;
const PropertyAndValue_ValueId PropertyAndValue::INDIANRED;
const PropertyAndValue_ValueId PropertyAndValue::DARKOLIVEGREEN;
const PropertyAndValue_ValueId PropertyAndValue::SEMI_EXPANDED;
const PropertyAndValue_ValueId PropertyAndValue::UNDERLINE;
const PropertyAndValue_ValueId PropertyAndValue::MYANMAR;
const PropertyAndValue_ValueId PropertyAndValue::SPACE_BETWEEN;
const PropertyAndValue_ValueId PropertyAndValue::EASE;
const PropertyAndValue_ValueId PropertyAndValue::ALTERNATE;
const PropertyAndValue_ValueId PropertyAndValue::MEDIUMORCHID;
const PropertyAndValue_ValueId PropertyAndValue::SILVER;
const PropertyAndValue_ValueId PropertyAndValue::COLOR;
const PropertyAndValue_ValueId PropertyAndValue::CHARTREUSE;
const PropertyAndValue_ValueId PropertyAndValue::EASE_IN_OUT;
const PropertyAndValue_ValueId PropertyAndValue::SPRINGGREEN;
const PropertyAndValue_ValueId PropertyAndValue::LIGHTSALMON;
const PropertyAndValue_ValueId PropertyAndValue::TURQUOISE;
const PropertyAndValue_ValueId PropertyAndValue::HIDE;
const PropertyAndValue_ValueId PropertyAndValue::HORIZONTAL_TB;
const PropertyAndValue_ValueId PropertyAndValue::VERTICAL_TEXT;
const PropertyAndValue_ValueId PropertyAndValue::ALIAS;
const PropertyAndValue_ValueId PropertyAndValue::GRID;
const PropertyAndValue_ValueId PropertyAndValue::NO_DISCRETIONARY_LIGATURES;
const PropertyAndValue_ValueId PropertyAndValue::BACKGROUND;
const PropertyAndValue_ValueId PropertyAndValue::DEVANAGARI;
const PropertyAndValue_ValueId PropertyAndValue::TEXT_BOTTOM;
const PropertyAndValue_ValueId PropertyAndValue::DARKGREEN;
const PropertyAndValue_ValueId PropertyAndValue::VISIBLE;
const PropertyAndValue_ValueId PropertyAndValue::TABULAR_NUMS;
const PropertyAndValue_ValueId PropertyAndValue::MANUAL;
const PropertyAndValue_ValueId PropertyAndValue::ZOOM;
const PropertyAndValue_ValueId PropertyAndValue::CJK_HEAVENLY_STEM;
const PropertyAndValue_ValueId PropertyAndValue::STEPS;
const PropertyAndValue_ValueId PropertyAndValue::BOUNDING_BOX;
const PropertyAndValue_ValueId PropertyAndValue::ALPHABETIC;
const PropertyAndValue_ValueId PropertyAndValue::AFTER_WHITE_SPACE;
const PropertyAndValue_ValueId PropertyAndValue::ROW_REVERSE;
const PropertyAndValue_ValueId PropertyAndValue::MEDIA_CURRENT_TIME_DISPLAY;
const PropertyAndValue_ValueId PropertyAndValue::MATHEMATICAL;
const PropertyAndValue_ValueId PropertyAndValue::ETHIOPIC_HALEHAME;
const PropertyAndValue_ValueId PropertyAndValue::RIGHT;
const PropertyAndValue_ValueId PropertyAndValue::UPPERCASE;
const PropertyAndValue_ValueId PropertyAndValue::_WEBKIT_XXX_LARGE;
const PropertyAndValue_ValueId PropertyAndValue::B4;
const PropertyAndValue_ValueId PropertyAndValue::B5;
const PropertyAndValue_ValueId PropertyAndValue::YELLOWGREEN;
const PropertyAndValue_ValueId PropertyAndValue::MEDIA_CONTROLS_FULLSCREEN_BACKGROUND;
const PropertyAndValue_ValueId PropertyAndValue::LOWER_ARMENIAN;
const PropertyAndValue_ValueId PropertyAndValue::ORCHID;
const PropertyAndValue_ValueId PropertyAndValue::NONZERO;
const PropertyAndValue_ValueId PropertyAndValue::SLICE;
const PropertyAndValue_ValueId PropertyAndValue::DENSE;
const PropertyAndValue_ValueId PropertyAndValue::INTER_WORD;
const PropertyAndValue_ValueId PropertyAndValue::BOTTOM;
const PropertyAndValue_ValueId PropertyAndValue::PURPLE;
const PropertyAndValue_ValueId PropertyAndValue::AVOID;
const PropertyAndValue_ValueId PropertyAndValue::SEPARATE;
const PropertyAndValue_ValueId PropertyAndValue::HANGUL;
const PropertyAndValue_ValueId PropertyAndValue::LEGAL;
const PropertyAndValue_ValueId PropertyAndValue::ALTERNATE_REVERSE;
const PropertyAndValue_ValueId PropertyAndValue::PRESERVE_3D;
const PropertyAndValue_ValueId PropertyAndValue::READ_ONLY;
const PropertyAndValue_ValueId PropertyAndValue::ELLIPSIS;
const PropertyAndValue_ValueId PropertyAndValue::MEDIA_OVERLAY_PLAY_BUTTON;
const PropertyAndValue_ValueId PropertyAndValue::BISQUE;
const PropertyAndValue_ValueId PropertyAndValue::INFOTEXT;
const PropertyAndValue_ValueId PropertyAndValue::KHAKI;
const PropertyAndValue_ValueId PropertyAndValue::WHEAT;
const PropertyAndValue_ValueId PropertyAndValue::BOLD;
const PropertyAndValue_ValueId PropertyAndValue::NO_HISTORICAL_LIGATURES;
const PropertyAndValue_ValueId PropertyAndValue::BIDI_OVERRIDE;
const PropertyAndValue_ValueId PropertyAndValue::DEEPSKYBLUE;
const PropertyAndValue_ValueId PropertyAndValue::EASE_OUT;
const PropertyAndValue_ValueId PropertyAndValue::CJK_IDEOGRAPHIC;
const PropertyAndValue_ValueId PropertyAndValue::OLDSTYLE_NUMS;
const PropertyAndValue_ValueId PropertyAndValue::MEDIA_ENTER_FULLSCREEN_BUTTON;
const PropertyAndValue_ValueId PropertyAndValue::SUPER;
const PropertyAndValue_ValueId PropertyAndValue::CURSIVE;
const PropertyAndValue_ValueId PropertyAndValue::ON;
const PropertyAndValue_ValueId PropertyAndValue::CENTRAL;
const PropertyAndValue_ValueId PropertyAndValue::_INTERNAL_MEDIA_OVERFLOW_BUTTON;
const PropertyAndValue_ValueId PropertyAndValue::STANDALONE;
const PropertyAndValue_ValueId PropertyAndValue::COLUMN;
const PropertyAndValue_ValueId PropertyAndValue::CORAL;
const PropertyAndValue_ValueId PropertyAndValue::DESTINATION_OVER;
const PropertyAndValue_ValueId PropertyAndValue::DISCRETIONARY_LIGATURES;
const PropertyAndValue_ValueId PropertyAndValue::BEIGE;
const PropertyAndValue_ValueId PropertyAndValue::TABLE_CELL;
const PropertyAndValue_ValueId PropertyAndValue::AZURE;
const PropertyAndValue_ValueId PropertyAndValue::TRAD_CHINESE_INFORMAL;
const PropertyAndValue_ValueId PropertyAndValue::TITLING_CAPS;
const PropertyAndValue_ValueId PropertyAndValue::_WEBKIT_ZOOM_IN;
const PropertyAndValue_ValueId PropertyAndValue::BLOCK;
const PropertyAndValue_ValueId PropertyAndValue::OUTSET;
const PropertyAndValue_ValueId PropertyAndValue::MEDIUMVIOLETRED;
const PropertyAndValue_ValueId PropertyAndValue::ROYALBLUE;
const PropertyAndValue_ValueId PropertyAndValue::MENULIST_TEXT;
const PropertyAndValue_ValueId PropertyAndValue::SW_RESIZE;
const PropertyAndValue_ValueId PropertyAndValue::MULTIPLY;
const PropertyAndValue_ValueId PropertyAndValue::THREEDDARKSHADOW;
const PropertyAndValue_ValueId PropertyAndValue::WRAP;
const PropertyAndValue_ValueId PropertyAndValue::LIGHTCORAL;
const PropertyAndValue_ValueId PropertyAndValue::ELLIPSE;
const PropertyAndValue_ValueId PropertyAndValue::_INTERNAL_ACTIVE_LIST_BOX_SELECTION_TEXT;
const PropertyAndValue_ValueId PropertyAndValue::RIDGE;
const PropertyAndValue_ValueId PropertyAndValue::_WEBKIT_AUTO;
const PropertyAndValue_ValueId PropertyAndValue::_INTERNAL_QUIRK_INHERIT;
const PropertyAndValue_ValueId PropertyAndValue::INITIAL;
const PropertyAndValue_ValueId PropertyAndValue::FUCHSIA;
const PropertyAndValue_ValueId PropertyAndValue::MENULIST_BUTTON;
const PropertyAndValue_ValueId PropertyAndValue::BLANCHEDALMOND;
const PropertyAndValue_ValueId PropertyAndValue::CARET;
const PropertyAndValue_ValueId PropertyAndValue::START;
const PropertyAndValue_ValueId PropertyAndValue::_INTERNAL_MEDIA_CAST_OFF_BUTTON;
const PropertyAndValue_ValueId PropertyAndValue::ITALIC;
const PropertyAndValue_ValueId PropertyAndValue::IVORY;
const PropertyAndValue_ValueId PropertyAndValue::BUTTONTEXT;
const PropertyAndValue_ValueId PropertyAndValue::SEMI_CONDENSED;
const PropertyAndValue_ValueId PropertyAndValue::INLINE_GRID;
const PropertyAndValue_ValueId PropertyAndValue::_WEBKIT_ACTIVELINK;
const PropertyAndValue_ValueId PropertyAndValue::SERIF;
const PropertyAndValue_ValueId PropertyAndValue::FORESTGREEN;
const PropertyAndValue_ValueId PropertyAndValue::BENGALI;
const PropertyAndValue_ValueId PropertyAndValue::UPRIGHT;
const PropertyAndValue_ValueId PropertyAndValue::RESET;
const PropertyAndValue_ValueId PropertyAndValue::BEVEL;
const PropertyAndValue_ValueId PropertyAndValue::IDEOGRAPHIC;
const PropertyAndValue_ValueId PropertyAndValue::DARKEN;
const PropertyAndValue_ValueId PropertyAndValue::MEDIA_VOLUME_SLIDERTHUMB;
const PropertyAndValue_ValueId PropertyAndValue::DEFAULT;
const PropertyAndValue_ValueId PropertyAndValue::INSIDE;
const PropertyAndValue_ValueId PropertyAndValue::BELOW;
const PropertyAndValue_ValueId PropertyAndValue::HIGHLIGHT;
const PropertyAndValue_ValueId PropertyAndValue::EMBED;
const PropertyAndValue_ValueId PropertyAndValue::GROOVE;
const PropertyAndValue_ValueId PropertyAndValue::NESW_RESIZE;
const PropertyAndValue_ValueId PropertyAndValue::STACKED_FRACTIONS;
const PropertyAndValue_ValueId PropertyAndValue::UNSAFE;
const PropertyAndValue_ValueId PropertyAndValue::MAROON;
const PropertyAndValue_ValueId PropertyAndValue::KANNADA;
const PropertyAndValue_ValueId PropertyAndValue::SINGLE;
const PropertyAndValue_ValueId PropertyAndValue::AT;
const PropertyAndValue_ValueId PropertyAndValue::INK;
const PropertyAndValue_ValueId PropertyAndValue::ARABIC_INDIC;
const PropertyAndValue_ValueId PropertyAndValue::MEDIA_VOLUME_SLIDER;
const PropertyAndValue_ValueId PropertyAndValue::COLUMN_REVERSE;
const PropertyAndValue_ValueId PropertyAndValue::_WEBKIT_ZOOM_OUT;
const PropertyAndValue_ValueId PropertyAndValue::FILL;
const PropertyAndValue_ValueId PropertyAndValue::EVENODD;
const PropertyAndValue_ValueId PropertyAndValue::DOTTED;
const PropertyAndValue_ValueId PropertyAndValue::DIMGRAY;
const PropertyAndValue_ValueId PropertyAndValue::DASHED;
const PropertyAndValue_ValueId PropertyAndValue::SEAGREEN;
const PropertyAndValue_ValueId PropertyAndValue::TRAD_CHINESE_FORMAL;
const PropertyAndValue_ValueId PropertyAndValue::MEDIUMSLATEBLUE;
const PropertyAndValue_ValueId PropertyAndValue::PALETURQUOISE;
const PropertyAndValue_ValueId PropertyAndValue::INNER_SPIN_BUTTON;
const PropertyAndValue_ValueId PropertyAndValue::REPEAT;
const PropertyAndValue_ValueId PropertyAndValue::DARKORCHID;
const PropertyAndValue_ValueId PropertyAndValue::_WEBKIT_ISOLATE;
const PropertyAndValue_ValueId PropertyAndValue::SEARCHFIELD_CANCEL_BUTTON;
const PropertyAndValue_ValueId PropertyAndValue::ALL_SMALL_CAPS;
const PropertyAndValue_ValueId PropertyAndValue::A3;
const PropertyAndValue_ValueId PropertyAndValue::A5;
const PropertyAndValue_ValueId PropertyAndValue::A4;
const PropertyAndValue_ValueId PropertyAndValue::OPEN_QUOTE;
const PropertyAndValue_ValueId PropertyAndValue::LIGHTGREEN;
const PropertyAndValue_ValueId PropertyAndValue::SLASHED_ZERO;
const PropertyAndValue_ValueId PropertyAndValue::COLOR_BURN;
const PropertyAndValue_ValueId PropertyAndValue::AUTO_FLOW;
const PropertyAndValue_ValueId PropertyAndValue::OVERLAY;
const PropertyAndValue_ValueId PropertyAndValue::VISUAL;
const PropertyAndValue_ValueId PropertyAndValue::SCALE_DOWN;
const PropertyAndValue_ValueId PropertyAndValue::OVERLINE;
const PropertyAndValue_ValueId PropertyAndValue::INSET;
const PropertyAndValue_ValueId PropertyAndValue::MEDIUMAQUAMARINE;
const PropertyAndValue_ValueId PropertyAndValue::SCROLL;
const PropertyAndValue_ValueId PropertyAndValue::INVALID_VALUE;
const PropertyAndValue_ValueId PropertyAndValue::ValueId_MIN;
const PropertyAndValue_ValueId PropertyAndValue::ValueId_MAX;
const int PropertyAndValue::ValueId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Input_CSSParserMode_descriptor() {
  protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_css_2eproto::file_level_enum_descriptors[27];
}
bool Input_CSSParserMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Input_CSSParserMode Input::kHTMLStandardMode;
const Input_CSSParserMode Input::kHTMLQuirksMode;
const Input_CSSParserMode Input::kSVGAttributeMode;
const Input_CSSParserMode Input::kCSSViewportRuleMode;
const Input_CSSParserMode Input::kCSSFontFaceRuleMode;
const Input_CSSParserMode Input::kUASheetMode;
const Input_CSSParserMode Input::CSSParserMode_MIN;
const Input_CSSParserMode Input::CSSParserMode_MAX;
const int Input::CSSParserMode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Input_SecureContextMode_descriptor() {
  protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_css_2eproto::file_level_enum_descriptors[28];
}
bool Input_SecureContextMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Input_SecureContextMode Input::kInsecureContext;
const Input_SecureContextMode Input::kSecureContext;
const Input_SecureContextMode Input::SecureContextMode_MIN;
const Input_SecureContextMode Input::SecureContextMode_MAX;
const int Input::SecureContextMode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* H_descriptor() {
  protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_css_2eproto::file_level_enum_descriptors[29];
}
bool H_IsValid(int value) {
  switch (value) {
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PseudoType_descriptor() {
  protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_css_2eproto::file_level_enum_descriptors[30];
}
bool PseudoType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Combinator_descriptor() {
  protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_css_2eproto::file_level_enum_descriptors[31];
}
bool Combinator_IsValid(int value) {
  switch (value) {
    case 1:
    case 36:
    case 43:
    case 44:
    case 62:
    case 126:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Unicode::InitAsDefaultInstance() {
  ::css_proto_converter::_Unicode_default_instance_._instance.get_mutable()->unrepeated_w_ = const_cast< ::css_proto_converter::UnrepeatedW*>(
      ::css_proto_converter::UnrepeatedW::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Unicode::kAsciiValue1FieldNumber;
const int Unicode::kAsciiValue2FieldNumber;
const int Unicode::kAsciiValue3FieldNumber;
const int Unicode::kAsciiValue4FieldNumber;
const int Unicode::kAsciiValue5FieldNumber;
const int Unicode::kAsciiValue6FieldNumber;
const int Unicode::kUnrepeatedWFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Unicode::Unicode()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_css_2eproto::scc_info_Unicode.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:css_proto_converter.Unicode)
}
Unicode::Unicode(const Unicode& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_unrepeated_w()) {
    unrepeated_w_ = new ::css_proto_converter::UnrepeatedW(*from.unrepeated_w_);
  } else {
    unrepeated_w_ = NULL;
  }
  ::memcpy(&ascii_value_1_, &from.ascii_value_1_,
    static_cast<size_t>(reinterpret_cast<char*>(&ascii_value_6_) -
    reinterpret_cast<char*>(&ascii_value_1_)) + sizeof(ascii_value_6_));
  // @@protoc_insertion_point(copy_constructor:css_proto_converter.Unicode)
}

void Unicode::SharedCtor() {
  unrepeated_w_ = NULL;
  ascii_value_1_ = 48;
  ascii_value_2_ = 48;
  ascii_value_3_ = 48;
  ascii_value_4_ = 48;
  ascii_value_5_ = 48;
  ascii_value_6_ = 48;
}

Unicode::~Unicode() {
  // @@protoc_insertion_point(destructor:css_proto_converter.Unicode)
  SharedDtor();
}

void Unicode::SharedDtor() {
  if (this != internal_default_instance()) delete unrepeated_w_;
}

void Unicode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Unicode::descriptor() {
  ::protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Unicode& Unicode::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_css_2eproto::scc_info_Unicode.base);
  return *internal_default_instance();
}


void Unicode::Clear() {
// @@protoc_insertion_point(message_clear_start:css_proto_converter.Unicode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(unrepeated_w_ != NULL);
      unrepeated_w_->Clear();
    }
    ascii_value_1_ = 48;
    ascii_value_2_ = 48;
    ascii_value_3_ = 48;
    ascii_value_4_ = 48;
    ascii_value_5_ = 48;
    ascii_value_6_ = 48;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Unicode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:css_proto_converter.Unicode)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .css_proto_converter.H ascii_value_1 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::css_proto_converter::H_IsValid(value)) {
            set_ascii_value_1(static_cast< ::css_proto_converter::H >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .css_proto_converter.H ascii_value_2 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::css_proto_converter::H_IsValid(value)) {
            set_ascii_value_2(static_cast< ::css_proto_converter::H >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .css_proto_converter.H ascii_value_3 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::css_proto_converter::H_IsValid(value)) {
            set_ascii_value_3(static_cast< ::css_proto_converter::H >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .css_proto_converter.H ascii_value_4 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::css_proto_converter::H_IsValid(value)) {
            set_ascii_value_4(static_cast< ::css_proto_converter::H >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .css_proto_converter.H ascii_value_5 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::css_proto_converter::H_IsValid(value)) {
            set_ascii_value_5(static_cast< ::css_proto_converter::H >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .css_proto_converter.H ascii_value_6 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::css_proto_converter::H_IsValid(value)) {
            set_ascii_value_6(static_cast< ::css_proto_converter::H >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                6, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .css_proto_converter.UnrepeatedW unrepeated_w = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_unrepeated_w()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:css_proto_converter.Unicode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:css_proto_converter.Unicode)
  return false;
#undef DO_
}

void Unicode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:css_proto_converter.Unicode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .css_proto_converter.H ascii_value_1 = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ascii_value_1(), output);
  }

  // optional .css_proto_converter.H ascii_value_2 = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->ascii_value_2(), output);
  }

  // optional .css_proto_converter.H ascii_value_3 = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->ascii_value_3(), output);
  }

  // optional .css_proto_converter.H ascii_value_4 = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->ascii_value_4(), output);
  }

  // optional .css_proto_converter.H ascii_value_5 = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->ascii_value_5(), output);
  }

  // optional .css_proto_converter.H ascii_value_6 = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->ascii_value_6(), output);
  }

  // optional .css_proto_converter.UnrepeatedW unrepeated_w = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_unrepeated_w(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:css_proto_converter.Unicode)
}

::google::protobuf::uint8* Unicode::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:css_proto_converter.Unicode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .css_proto_converter.H ascii_value_1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ascii_value_1(), target);
  }

  // optional .css_proto_converter.H ascii_value_2 = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->ascii_value_2(), target);
  }

  // optional .css_proto_converter.H ascii_value_3 = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->ascii_value_3(), target);
  }

  // optional .css_proto_converter.H ascii_value_4 = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->ascii_value_4(), target);
  }

  // optional .css_proto_converter.H ascii_value_5 = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->ascii_value_5(), target);
  }

  // optional .css_proto_converter.H ascii_value_6 = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->ascii_value_6(), target);
  }

  // optional .css_proto_converter.UnrepeatedW unrepeated_w = 7;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_unrepeated_w(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:css_proto_converter.Unicode)
  return target;
}

size_t Unicode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:css_proto_converter.Unicode)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .css_proto_converter.H ascii_value_1 = 1;
  if (has_ascii_value_1()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ascii_value_1());
  }
  // optional .css_proto_converter.UnrepeatedW unrepeated_w = 7;
  if (has_unrepeated_w()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *unrepeated_w_);
  }

  if (_has_bits_[0 / 32] & 124u) {
    // optional .css_proto_converter.H ascii_value_2 = 2;
    if (has_ascii_value_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ascii_value_2());
    }

    // optional .css_proto_converter.H ascii_value_3 = 3;
    if (has_ascii_value_3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ascii_value_3());
    }

    // optional .css_proto_converter.H ascii_value_4 = 4;
    if (has_ascii_value_4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ascii_value_4());
    }

    // optional .css_proto_converter.H ascii_value_5 = 5;
    if (has_ascii_value_5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ascii_value_5());
    }

    // optional .css_proto_converter.H ascii_value_6 = 6;
    if (has_ascii_value_6()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ascii_value_6());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Unicode::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:css_proto_converter.Unicode)
  GOOGLE_DCHECK_NE(&from, this);
  const Unicode* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Unicode>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:css_proto_converter.Unicode)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:css_proto_converter.Unicode)
    MergeFrom(*source);
  }
}

void Unicode::MergeFrom(const Unicode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:css_proto_converter.Unicode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_unrepeated_w()->::css_proto_converter::UnrepeatedW::MergeFrom(from.unrepeated_w());
    }
    if (cached_has_bits & 0x00000002u) {
      ascii_value_1_ = from.ascii_value_1_;
    }
    if (cached_has_bits & 0x00000004u) {
      ascii_value_2_ = from.ascii_value_2_;
    }
    if (cached_has_bits & 0x00000008u) {
      ascii_value_3_ = from.ascii_value_3_;
    }
    if (cached_has_bits & 0x00000010u) {
      ascii_value_4_ = from.ascii_value_4_;
    }
    if (cached_has_bits & 0x00000020u) {
      ascii_value_5_ = from.ascii_value_5_;
    }
    if (cached_has_bits & 0x00000040u) {
      ascii_value_6_ = from.ascii_value_6_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Unicode::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:css_proto_converter.Unicode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Unicode::CopyFrom(const Unicode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:css_proto_converter.Unicode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Unicode::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_unrepeated_w()) {
    if (!this->unrepeated_w_->IsInitialized()) return false;
  }
  return true;
}

void Unicode::Swap(Unicode* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Unicode::InternalSwap(Unicode* other) {
  using std::swap;
  swap(unrepeated_w_, other->unrepeated_w_);
  swap(ascii_value_1_, other->ascii_value_1_);
  swap(ascii_value_2_, other->ascii_value_2_);
  swap(ascii_value_3_, other->ascii_value_3_);
  swap(ascii_value_4_, other->ascii_value_4_);
  swap(ascii_value_5_, other->ascii_value_5_);
  swap(ascii_value_6_, other->ascii_value_6_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Unicode::GetMetadata() const {
  protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Escape::InitAsDefaultInstance() {
  ::css_proto_converter::_Escape_default_instance_.unicode_ = const_cast< ::css_proto_converter::Unicode*>(
      ::css_proto_converter::Unicode::internal_default_instance());
  ::css_proto_converter::_Escape_default_instance_.ascii_value_ = 32;
}
void Escape::set_allocated_unicode(::css_proto_converter::Unicode* unicode) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_rhs();
  if (unicode) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      unicode = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, unicode, submessage_arena);
    }
    set_has_unicode();
    rhs_.unicode_ = unicode;
  }
  // @@protoc_insertion_point(field_set_allocated:css_proto_converter.Escape.unicode)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Escape::kUnicodeFieldNumber;
const int Escape::kAsciiValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Escape::Escape()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_css_2eproto::scc_info_Escape.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:css_proto_converter.Escape)
}
Escape::Escape(const Escape& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_rhs();
  switch (from.rhs_case()) {
    case kUnicode: {
      mutable_unicode()->::css_proto_converter::Unicode::MergeFrom(from.unicode());
      break;
    }
    case kAsciiValue: {
      set_ascii_value(from.ascii_value());
      break;
    }
    case RHS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:css_proto_converter.Escape)
}

void Escape::SharedCtor() {
  clear_has_rhs();
}

Escape::~Escape() {
  // @@protoc_insertion_point(destructor:css_proto_converter.Escape)
  SharedDtor();
}

void Escape::SharedDtor() {
  if (has_rhs()) {
    clear_rhs();
  }
}

void Escape::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Escape::descriptor() {
  ::protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Escape& Escape::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_css_2eproto::scc_info_Escape.base);
  return *internal_default_instance();
}


void Escape::clear_rhs() {
// @@protoc_insertion_point(one_of_clear_start:css_proto_converter.Escape)
  switch (rhs_case()) {
    case kUnicode: {
      delete rhs_.unicode_;
      break;
    }
    case kAsciiValue: {
      // No need to clear
      break;
    }
    case RHS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RHS_NOT_SET;
}


void Escape::Clear() {
// @@protoc_insertion_point(message_clear_start:css_proto_converter.Escape)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_rhs();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Escape::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:css_proto_converter.Escape)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .css_proto_converter.Unicode unicode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_unicode()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .css_proto_converter.Escape.AsciiValue ascii_value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::css_proto_converter::Escape_AsciiValue_IsValid(value)) {
            set_ascii_value(static_cast< ::css_proto_converter::Escape_AsciiValue >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:css_proto_converter.Escape)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:css_proto_converter.Escape)
  return false;
#undef DO_
}

void Escape::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:css_proto_converter.Escape)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (rhs_case()) {
    case kUnicode:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        1, this->_internal_unicode(), output);
      break;
    case kAsciiValue:
      ::google::protobuf::internal::WireFormatLite::WriteEnum(
        2, this->ascii_value(), output);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:css_proto_converter.Escape)
}

::google::protobuf::uint8* Escape::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:css_proto_converter.Escape)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (rhs_case()) {
    case kUnicode:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          1, this->_internal_unicode(), deterministic, target);
      break;
    case kAsciiValue:
      target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
        2, this->ascii_value(), target);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:css_proto_converter.Escape)
  return target;
}

size_t Escape::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:css_proto_converter.Escape)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  switch (rhs_case()) {
    // optional .css_proto_converter.Unicode unicode = 1;
    case kUnicode: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *rhs_.unicode_);
      break;
    }
    // optional .css_proto_converter.Escape.AsciiValue ascii_value = 2;
    case kAsciiValue: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ascii_value());
      break;
    }
    case RHS_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Escape::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:css_proto_converter.Escape)
  GOOGLE_DCHECK_NE(&from, this);
  const Escape* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Escape>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:css_proto_converter.Escape)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:css_proto_converter.Escape)
    MergeFrom(*source);
  }
}

void Escape::MergeFrom(const Escape& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:css_proto_converter.Escape)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.rhs_case()) {
    case kUnicode: {
      mutable_unicode()->::css_proto_converter::Unicode::MergeFrom(from.unicode());
      break;
    }
    case kAsciiValue: {
      set_ascii_value(from.ascii_value());
      break;
    }
    case RHS_NOT_SET: {
      break;
    }
  }
}

void Escape::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:css_proto_converter.Escape)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Escape::CopyFrom(const Escape& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:css_proto_converter.Escape)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Escape::IsInitialized() const {
  switch (rhs_case()) {
    case kUnicode: {
      if (has_unicode()) {
        if (!this->unicode().IsInitialized()) return false;
      }
      break;
    }
    case kAsciiValue: {
      break;
    }
    case RHS_NOT_SET: {
      break;
    }
  }
  return true;
}

void Escape::Swap(Escape* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Escape::InternalSwap(Escape* other) {
  using std::swap;
  swap(rhs_, other->rhs_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Escape::GetMetadata() const {
  protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Nmstart::InitAsDefaultInstance() {
  ::css_proto_converter::_Nmstart_default_instance_.ascii_value_ = 65;
  ::css_proto_converter::_Nmstart_default_instance_.escape_ = const_cast< ::css_proto_converter::Escape*>(
      ::css_proto_converter::Escape::internal_default_instance());
}
void Nmstart::set_allocated_escape(::css_proto_converter::Escape* escape) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_rhs();
  if (escape) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      escape = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, escape, submessage_arena);
    }
    set_has_escape();
    rhs_.escape_ = escape;
  }
  // @@protoc_insertion_point(field_set_allocated:css_proto_converter.Nmstart.escape)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Nmstart::kAsciiValueFieldNumber;
const int Nmstart::kEscapeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Nmstart::Nmstart()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_css_2eproto::scc_info_Nmstart.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:css_proto_converter.Nmstart)
}
Nmstart::Nmstart(const Nmstart& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_rhs();
  switch (from.rhs_case()) {
    case kAsciiValue: {
      set_ascii_value(from.ascii_value());
      break;
    }
    case kEscape: {
      mutable_escape()->::css_proto_converter::Escape::MergeFrom(from.escape());
      break;
    }
    case RHS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:css_proto_converter.Nmstart)
}

void Nmstart::SharedCtor() {
  clear_has_rhs();
}

Nmstart::~Nmstart() {
  // @@protoc_insertion_point(destructor:css_proto_converter.Nmstart)
  SharedDtor();
}

void Nmstart::SharedDtor() {
  if (has_rhs()) {
    clear_rhs();
  }
}

void Nmstart::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Nmstart::descriptor() {
  ::protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Nmstart& Nmstart::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_css_2eproto::scc_info_Nmstart.base);
  return *internal_default_instance();
}


void Nmstart::clear_rhs() {
// @@protoc_insertion_point(one_of_clear_start:css_proto_converter.Nmstart)
  switch (rhs_case()) {
    case kAsciiValue: {
      // No need to clear
      break;
    }
    case kEscape: {
      delete rhs_.escape_;
      break;
    }
    case RHS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RHS_NOT_SET;
}


void Nmstart::Clear() {
// @@protoc_insertion_point(message_clear_start:css_proto_converter.Nmstart)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_rhs();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Nmstart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:css_proto_converter.Nmstart)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .css_proto_converter.Nmstart.AsciiValue ascii_value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::css_proto_converter::Nmstart_AsciiValue_IsValid(value)) {
            set_ascii_value(static_cast< ::css_proto_converter::Nmstart_AsciiValue >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .css_proto_converter.Escape escape = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_escape()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:css_proto_converter.Nmstart)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:css_proto_converter.Nmstart)
  return false;
#undef DO_
}

void Nmstart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:css_proto_converter.Nmstart)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (rhs_case()) {
    case kAsciiValue:
      ::google::protobuf::internal::WireFormatLite::WriteEnum(
        1, this->ascii_value(), output);
      break;
    case kEscape:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, this->_internal_escape(), output);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:css_proto_converter.Nmstart)
}

::google::protobuf::uint8* Nmstart::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:css_proto_converter.Nmstart)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (rhs_case()) {
    case kAsciiValue:
      target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
        1, this->ascii_value(), target);
      break;
    case kEscape:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          2, this->_internal_escape(), deterministic, target);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:css_proto_converter.Nmstart)
  return target;
}

size_t Nmstart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:css_proto_converter.Nmstart)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  switch (rhs_case()) {
    // optional .css_proto_converter.Nmstart.AsciiValue ascii_value = 1;
    case kAsciiValue: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ascii_value());
      break;
    }
    // optional .css_proto_converter.Escape escape = 2;
    case kEscape: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *rhs_.escape_);
      break;
    }
    case RHS_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Nmstart::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:css_proto_converter.Nmstart)
  GOOGLE_DCHECK_NE(&from, this);
  const Nmstart* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Nmstart>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:css_proto_converter.Nmstart)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:css_proto_converter.Nmstart)
    MergeFrom(*source);
  }
}

void Nmstart::MergeFrom(const Nmstart& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:css_proto_converter.Nmstart)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.rhs_case()) {
    case kAsciiValue: {
      set_ascii_value(from.ascii_value());
      break;
    }
    case kEscape: {
      mutable_escape()->::css_proto_converter::Escape::MergeFrom(from.escape());
      break;
    }
    case RHS_NOT_SET: {
      break;
    }
  }
}

void Nmstart::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:css_proto_converter.Nmstart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Nmstart::CopyFrom(const Nmstart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:css_proto_converter.Nmstart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Nmstart::IsInitialized() const {
  switch (rhs_case()) {
    case kAsciiValue: {
      break;
    }
    case kEscape: {
      if (has_escape()) {
        if (!this->escape().IsInitialized()) return false;
      }
      break;
    }
    case RHS_NOT_SET: {
      break;
    }
  }
  return true;
}

void Nmstart::Swap(Nmstart* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Nmstart::InternalSwap(Nmstart* other) {
  using std::swap;
  swap(rhs_, other->rhs_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Nmstart::GetMetadata() const {
  protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Nmchar::InitAsDefaultInstance() {
  ::css_proto_converter::_Nmchar_default_instance_.ascii_value_ = 45;
  ::css_proto_converter::_Nmchar_default_instance_.escape_ = const_cast< ::css_proto_converter::Escape*>(
      ::css_proto_converter::Escape::internal_default_instance());
}
void Nmchar::set_allocated_escape(::css_proto_converter::Escape* escape) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_rhs();
  if (escape) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      escape = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, escape, submessage_arena);
    }
    set_has_escape();
    rhs_.escape_ = escape;
  }
  // @@protoc_insertion_point(field_set_allocated:css_proto_converter.Nmchar.escape)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Nmchar::kAsciiValueFieldNumber;
const int Nmchar::kEscapeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Nmchar::Nmchar()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_css_2eproto::scc_info_Nmchar.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:css_proto_converter.Nmchar)
}
Nmchar::Nmchar(const Nmchar& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_rhs();
  switch (from.rhs_case()) {
    case kAsciiValue: {
      set_ascii_value(from.ascii_value());
      break;
    }
    case kEscape: {
      mutable_escape()->::css_proto_converter::Escape::MergeFrom(from.escape());
      break;
    }
    case RHS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:css_proto_converter.Nmchar)
}

void Nmchar::SharedCtor() {
  clear_has_rhs();
}

Nmchar::~Nmchar() {
  // @@protoc_insertion_point(destructor:css_proto_converter.Nmchar)
  SharedDtor();
}

void Nmchar::SharedDtor() {
  if (has_rhs()) {
    clear_rhs();
  }
}

void Nmchar::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Nmchar::descriptor() {
  ::protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Nmchar& Nmchar::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_css_2eproto::scc_info_Nmchar.base);
  return *internal_default_instance();
}


void Nmchar::clear_rhs() {
// @@protoc_insertion_point(one_of_clear_start:css_proto_converter.Nmchar)
  switch (rhs_case()) {
    case kAsciiValue: {
      // No need to clear
      break;
    }
    case kEscape: {
      delete rhs_.escape_;
      break;
    }
    case RHS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RHS_NOT_SET;
}


void Nmchar::Clear() {
// @@protoc_insertion_point(message_clear_start:css_proto_converter.Nmchar)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_rhs();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Nmchar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:css_proto_converter.Nmchar)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .css_proto_converter.Nmchar.AsciiValue ascii_value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::css_proto_converter::Nmchar_AsciiValue_IsValid(value)) {
            set_ascii_value(static_cast< ::css_proto_converter::Nmchar_AsciiValue >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .css_proto_converter.Escape escape = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_escape()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:css_proto_converter.Nmchar)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:css_proto_converter.Nmchar)
  return false;
#undef DO_
}

void Nmchar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:css_proto_converter.Nmchar)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (rhs_case()) {
    case kAsciiValue:
      ::google::protobuf::internal::WireFormatLite::WriteEnum(
        1, this->ascii_value(), output);
      break;
    case kEscape:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, this->_internal_escape(), output);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:css_proto_converter.Nmchar)
}

::google::protobuf::uint8* Nmchar::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:css_proto_converter.Nmchar)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (rhs_case()) {
    case kAsciiValue:
      target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
        1, this->ascii_value(), target);
      break;
    case kEscape:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          2, this->_internal_escape(), deterministic, target);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:css_proto_converter.Nmchar)
  return target;
}

size_t Nmchar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:css_proto_converter.Nmchar)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  switch (rhs_case()) {
    // optional .css_proto_converter.Nmchar.AsciiValue ascii_value = 1;
    case kAsciiValue: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ascii_value());
      break;
    }
    // optional .css_proto_converter.Escape escape = 2;
    case kEscape: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *rhs_.escape_);
      break;
    }
    case RHS_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Nmchar::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:css_proto_converter.Nmchar)
  GOOGLE_DCHECK_NE(&from, this);
  const Nmchar* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Nmchar>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:css_proto_converter.Nmchar)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:css_proto_converter.Nmchar)
    MergeFrom(*source);
  }
}

void Nmchar::MergeFrom(const Nmchar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:css_proto_converter.Nmchar)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.rhs_case()) {
    case kAsciiValue: {
      set_ascii_value(from.ascii_value());
      break;
    }
    case kEscape: {
      mutable_escape()->::css_proto_converter::Escape::MergeFrom(from.escape());
      break;
    }
    case RHS_NOT_SET: {
      break;
    }
  }
}

void Nmchar::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:css_proto_converter.Nmchar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Nmchar::CopyFrom(const Nmchar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:css_proto_converter.Nmchar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Nmchar::IsInitialized() const {
  switch (rhs_case()) {
    case kAsciiValue: {
      break;
    }
    case kEscape: {
      if (has_escape()) {
        if (!this->escape().IsInitialized()) return false;
      }
      break;
    }
    case RHS_NOT_SET: {
      break;
    }
  }
  return true;
}

void Nmchar::Swap(Nmchar* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Nmchar::InternalSwap(Nmchar* other) {
  using std::swap;
  swap(rhs_, other->rhs_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Nmchar::GetMetadata() const {
  protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void String::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int String::kUseSingleQuotesFieldNumber;
const int String::kStringCharQuotesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

String::String()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_css_2eproto::scc_info_String.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:css_proto_converter.String)
}
String::String(const String& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      string_char_quotes_(from.string_char_quotes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  use_single_quotes_ = from.use_single_quotes_;
  // @@protoc_insertion_point(copy_constructor:css_proto_converter.String)
}

void String::SharedCtor() {
  use_single_quotes_ = false;
}

String::~String() {
  // @@protoc_insertion_point(destructor:css_proto_converter.String)
  SharedDtor();
}

void String::SharedDtor() {
}

void String::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* String::descriptor() {
  ::protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const String& String::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_css_2eproto::scc_info_String.base);
  return *internal_default_instance();
}


void String::Clear() {
// @@protoc_insertion_point(message_clear_start:css_proto_converter.String)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  string_char_quotes_.Clear();
  use_single_quotes_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool String::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:css_proto_converter.String)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool use_single_quotes = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_use_single_quotes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_single_quotes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .css_proto_converter.StringCharOrQuote string_char_quotes = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_string_char_quotes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:css_proto_converter.String)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:css_proto_converter.String)
  return false;
#undef DO_
}

void String::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:css_proto_converter.String)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool use_single_quotes = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->use_single_quotes(), output);
  }

  // repeated .css_proto_converter.StringCharOrQuote string_char_quotes = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->string_char_quotes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->string_char_quotes(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:css_proto_converter.String)
}

::google::protobuf::uint8* String::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:css_proto_converter.String)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool use_single_quotes = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->use_single_quotes(), target);
  }

  // repeated .css_proto_converter.StringCharOrQuote string_char_quotes = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->string_char_quotes_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->string_char_quotes(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:css_proto_converter.String)
  return target;
}

size_t String::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:css_proto_converter.String)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required bool use_single_quotes = 1;
  if (has_use_single_quotes()) {
    total_size += 1 + 1;
  }
  // repeated .css_proto_converter.StringCharOrQuote string_char_quotes = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->string_char_quotes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->string_char_quotes(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void String::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:css_proto_converter.String)
  GOOGLE_DCHECK_NE(&from, this);
  const String* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const String>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:css_proto_converter.String)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:css_proto_converter.String)
    MergeFrom(*source);
  }
}

void String::MergeFrom(const String& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:css_proto_converter.String)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  string_char_quotes_.MergeFrom(from.string_char_quotes_);
  if (from.has_use_single_quotes()) {
    set_use_single_quotes(from.use_single_quotes());
  }
}

void String::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:css_proto_converter.String)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void String::CopyFrom(const String& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:css_proto_converter.String)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool String::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->string_char_quotes())) return false;
  return true;
}

void String::Swap(String* other) {
  if (other == this) return;
  InternalSwap(other);
}
void String::InternalSwap(String* other) {
  using std::swap;
  CastToBase(&string_char_quotes_)->InternalSwap(CastToBase(&other->string_char_quotes_));
  swap(use_single_quotes_, other->use_single_quotes_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata String::GetMetadata() const {
  protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StringCharOrQuote::InitAsDefaultInstance() {
  ::css_proto_converter::_StringCharOrQuote_default_instance_.string_char_ = const_cast< ::css_proto_converter::StringChar*>(
      ::css_proto_converter::StringChar::internal_default_instance());
  ::css_proto_converter::_StringCharOrQuote_default_instance_.quote_char_ = 0;
}
void StringCharOrQuote::set_allocated_string_char(::css_proto_converter::StringChar* string_char) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_rhs();
  if (string_char) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      string_char = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, string_char, submessage_arena);
    }
    set_has_string_char();
    rhs_.string_char_ = string_char;
  }
  // @@protoc_insertion_point(field_set_allocated:css_proto_converter.StringCharOrQuote.string_char)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StringCharOrQuote::kStringCharFieldNumber;
const int StringCharOrQuote::kQuoteCharFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StringCharOrQuote::StringCharOrQuote()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_css_2eproto::scc_info_StringCharOrQuote.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:css_proto_converter.StringCharOrQuote)
}
StringCharOrQuote::StringCharOrQuote(const StringCharOrQuote& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_rhs();
  switch (from.rhs_case()) {
    case kStringChar: {
      mutable_string_char()->::css_proto_converter::StringChar::MergeFrom(from.string_char());
      break;
    }
    case kQuoteChar: {
      set_quote_char(from.quote_char());
      break;
    }
    case RHS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:css_proto_converter.StringCharOrQuote)
}

void StringCharOrQuote::SharedCtor() {
  clear_has_rhs();
}

StringCharOrQuote::~StringCharOrQuote() {
  // @@protoc_insertion_point(destructor:css_proto_converter.StringCharOrQuote)
  SharedDtor();
}

void StringCharOrQuote::SharedDtor() {
  if (has_rhs()) {
    clear_rhs();
  }
}

void StringCharOrQuote::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* StringCharOrQuote::descriptor() {
  ::protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StringCharOrQuote& StringCharOrQuote::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_css_2eproto::scc_info_StringCharOrQuote.base);
  return *internal_default_instance();
}


void StringCharOrQuote::clear_rhs() {
// @@protoc_insertion_point(one_of_clear_start:css_proto_converter.StringCharOrQuote)
  switch (rhs_case()) {
    case kStringChar: {
      delete rhs_.string_char_;
      break;
    }
    case kQuoteChar: {
      // No need to clear
      break;
    }
    case RHS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RHS_NOT_SET;
}


void StringCharOrQuote::Clear() {
// @@protoc_insertion_point(message_clear_start:css_proto_converter.StringCharOrQuote)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_rhs();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StringCharOrQuote::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:css_proto_converter.StringCharOrQuote)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .css_proto_converter.StringCharOrQuote.QuoteChar quote_char = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::css_proto_converter::StringCharOrQuote_QuoteChar_IsValid(value)) {
            set_quote_char(static_cast< ::css_proto_converter::StringCharOrQuote_QuoteChar >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .css_proto_converter.StringChar string_char = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_string_char()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:css_proto_converter.StringCharOrQuote)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:css_proto_converter.StringCharOrQuote)
  return false;
#undef DO_
}

void StringCharOrQuote::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:css_proto_converter.StringCharOrQuote)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (rhs_case()) {
    case kQuoteChar:
      ::google::protobuf::internal::WireFormatLite::WriteEnum(
        1, this->quote_char(), output);
      break;
    case kStringChar:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, this->_internal_string_char(), output);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:css_proto_converter.StringCharOrQuote)
}

::google::protobuf::uint8* StringCharOrQuote::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:css_proto_converter.StringCharOrQuote)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (rhs_case()) {
    case kQuoteChar:
      target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
        1, this->quote_char(), target);
      break;
    case kStringChar:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          2, this->_internal_string_char(), deterministic, target);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:css_proto_converter.StringCharOrQuote)
  return target;
}

size_t StringCharOrQuote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:css_proto_converter.StringCharOrQuote)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  switch (rhs_case()) {
    // optional .css_proto_converter.StringChar string_char = 2;
    case kStringChar: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *rhs_.string_char_);
      break;
    }
    // optional .css_proto_converter.StringCharOrQuote.QuoteChar quote_char = 1;
    case kQuoteChar: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->quote_char());
      break;
    }
    case RHS_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StringCharOrQuote::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:css_proto_converter.StringCharOrQuote)
  GOOGLE_DCHECK_NE(&from, this);
  const StringCharOrQuote* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StringCharOrQuote>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:css_proto_converter.StringCharOrQuote)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:css_proto_converter.StringCharOrQuote)
    MergeFrom(*source);
  }
}

void StringCharOrQuote::MergeFrom(const StringCharOrQuote& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:css_proto_converter.StringCharOrQuote)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.rhs_case()) {
    case kStringChar: {
      mutable_string_char()->::css_proto_converter::StringChar::MergeFrom(from.string_char());
      break;
    }
    case kQuoteChar: {
      set_quote_char(from.quote_char());
      break;
    }
    case RHS_NOT_SET: {
      break;
    }
  }
}

void StringCharOrQuote::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:css_proto_converter.StringCharOrQuote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StringCharOrQuote::CopyFrom(const StringCharOrQuote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:css_proto_converter.StringCharOrQuote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringCharOrQuote::IsInitialized() const {
  switch (rhs_case()) {
    case kStringChar: {
      if (has_string_char()) {
        if (!this->string_char().IsInitialized()) return false;
      }
      break;
    }
    case kQuoteChar: {
      break;
    }
    case RHS_NOT_SET: {
      break;
    }
  }
  return true;
}

void StringCharOrQuote::Swap(StringCharOrQuote* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StringCharOrQuote::InternalSwap(StringCharOrQuote* other) {
  using std::swap;
  swap(rhs_, other->rhs_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata StringCharOrQuote::GetMetadata() const {
  protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StringChar::InitAsDefaultInstance() {
  ::css_proto_converter::_StringChar_default_instance_.url_char_ = const_cast< ::css_proto_converter::UrlChar*>(
      ::css_proto_converter::UrlChar::internal_default_instance());
  ::css_proto_converter::_StringChar_default_instance_.space_ = 0;
  ::css_proto_converter::_StringChar_default_instance_.nl_ = const_cast< ::css_proto_converter::Nl*>(
      ::css_proto_converter::Nl::internal_default_instance());
}
void StringChar::set_allocated_url_char(::css_proto_converter::UrlChar* url_char) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_rhs();
  if (url_char) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      url_char = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, url_char, submessage_arena);
    }
    set_has_url_char();
    rhs_.url_char_ = url_char;
  }
  // @@protoc_insertion_point(field_set_allocated:css_proto_converter.StringChar.url_char)
}
void StringChar::set_allocated_nl(::css_proto_converter::Nl* nl) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_rhs();
  if (nl) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      nl = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, nl, submessage_arena);
    }
    set_has_nl();
    rhs_.nl_ = nl;
  }
  // @@protoc_insertion_point(field_set_allocated:css_proto_converter.StringChar.nl)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StringChar::kUrlCharFieldNumber;
const int StringChar::kSpaceFieldNumber;
const int StringChar::kNlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StringChar::StringChar()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_css_2eproto::scc_info_StringChar.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:css_proto_converter.StringChar)
}
StringChar::StringChar(const StringChar& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_rhs();
  switch (from.rhs_case()) {
    case kUrlChar: {
      mutable_url_char()->::css_proto_converter::UrlChar::MergeFrom(from.url_char());
      break;
    }
    case kSpace: {
      set_space(from.space());
      break;
    }
    case kNl: {
      mutable_nl()->::css_proto_converter::Nl::MergeFrom(from.nl());
      break;
    }
    case RHS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:css_proto_converter.StringChar)
}

void StringChar::SharedCtor() {
  clear_has_rhs();
}

StringChar::~StringChar() {
  // @@protoc_insertion_point(destructor:css_proto_converter.StringChar)
  SharedDtor();
}

void StringChar::SharedDtor() {
  if (has_rhs()) {
    clear_rhs();
  }
}

void StringChar::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* StringChar::descriptor() {
  ::protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StringChar& StringChar::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_css_2eproto::scc_info_StringChar.base);
  return *internal_default_instance();
}


void StringChar::clear_rhs() {
// @@protoc_insertion_point(one_of_clear_start:css_proto_converter.StringChar)
  switch (rhs_case()) {
    case kUrlChar: {
      delete rhs_.url_char_;
      break;
    }
    case kSpace: {
      // No need to clear
      break;
    }
    case kNl: {
      delete rhs_.nl_;
      break;
    }
    case RHS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RHS_NOT_SET;
}


void StringChar::Clear() {
// @@protoc_insertion_point(message_clear_start:css_proto_converter.StringChar)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_rhs();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StringChar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:css_proto_converter.StringChar)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .css_proto_converter.UrlChar url_char = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_url_char()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .css_proto_converter.StringChar.Space space = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::css_proto_converter::StringChar_Space_IsValid(value)) {
            set_space(static_cast< ::css_proto_converter::StringChar_Space >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .css_proto_converter.Nl nl = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_nl()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:css_proto_converter.StringChar)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:css_proto_converter.StringChar)
  return false;
#undef DO_
}

void StringChar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:css_proto_converter.StringChar)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (rhs_case()) {
    case kUrlChar:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        1, this->_internal_url_char(), output);
      break;
    case kSpace:
      ::google::protobuf::internal::WireFormatLite::WriteEnum(
        2, this->space(), output);
      break;
    case kNl:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        3, this->_internal_nl(), output);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:css_proto_converter.StringChar)
}

::google::protobuf::uint8* StringChar::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:css_proto_converter.StringChar)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (rhs_case()) {
    case kUrlChar:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          1, this->_internal_url_char(), deterministic, target);
      break;
    case kSpace:
      target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
        2, this->space(), target);
      break;
    case kNl:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          3, this->_internal_nl(), deterministic, target);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:css_proto_converter.StringChar)
  return target;
}

size_t StringChar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:css_proto_converter.StringChar)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  switch (rhs_case()) {
    // optional .css_proto_converter.UrlChar url_char = 1;
    case kUrlChar: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *rhs_.url_char_);
      break;
    }
    // optional .css_proto_converter.StringChar.Space space = 2;
    case kSpace: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->space());
      break;
    }
    // optional .css_proto_converter.Nl nl = 3;
    case kNl: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *rhs_.nl_);
      break;
    }
    case RHS_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StringChar::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:css_proto_converter.StringChar)
  GOOGLE_DCHECK_NE(&from, this);
  const StringChar* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StringChar>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:css_proto_converter.StringChar)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:css_proto_converter.StringChar)
    MergeFrom(*source);
  }
}

void StringChar::MergeFrom(const StringChar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:css_proto_converter.StringChar)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.rhs_case()) {
    case kUrlChar: {
      mutable_url_char()->::css_proto_converter::UrlChar::MergeFrom(from.url_char());
      break;
    }
    case kSpace: {
      set_space(from.space());
      break;
    }
    case kNl: {
      mutable_nl()->::css_proto_converter::Nl::MergeFrom(from.nl());
      break;
    }
    case RHS_NOT_SET: {
      break;
    }
  }
}

void StringChar::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:css_proto_converter.StringChar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StringChar::CopyFrom(const StringChar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:css_proto_converter.StringChar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringChar::IsInitialized() const {
  switch (rhs_case()) {
    case kUrlChar: {
      if (has_url_char()) {
        if (!this->url_char().IsInitialized()) return false;
      }
      break;
    }
    case kSpace: {
      break;
    }
    case kNl: {
      if (has_nl()) {
        if (!this->nl().IsInitialized()) return false;
      }
      break;
    }
    case RHS_NOT_SET: {
      break;
    }
  }
  return true;
}

void StringChar::Swap(StringChar* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StringChar::InternalSwap(StringChar* other) {
  using std::swap;
  swap(rhs_, other->rhs_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata StringChar::GetMetadata() const {
  protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Ident::InitAsDefaultInstance() {
  ::css_proto_converter::_Ident_default_instance_._instance.get_mutable()->nmstart_ = const_cast< ::css_proto_converter::Nmstart*>(
      ::css_proto_converter::Nmstart::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ident::kStartingMinusFieldNumber;
const int Ident::kNmstartFieldNumber;
const int Ident::kNmcharsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ident::Ident()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_css_2eproto::scc_info_Ident.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:css_proto_converter.Ident)
}
Ident::Ident(const Ident& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      nmchars_(from.nmchars_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_nmstart()) {
    nmstart_ = new ::css_proto_converter::Nmstart(*from.nmstart_);
  } else {
    nmstart_ = NULL;
  }
  starting_minus_ = from.starting_minus_;
  // @@protoc_insertion_point(copy_constructor:css_proto_converter.Ident)
}

void Ident::SharedCtor() {
  ::memset(&nmstart_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&starting_minus_) -
      reinterpret_cast<char*>(&nmstart_)) + sizeof(starting_minus_));
}

Ident::~Ident() {
  // @@protoc_insertion_point(destructor:css_proto_converter.Ident)
  SharedDtor();
}

void Ident::SharedDtor() {
  if (this != internal_default_instance()) delete nmstart_;
}

void Ident::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Ident::descriptor() {
  ::protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Ident& Ident::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_css_2eproto::scc_info_Ident.base);
  return *internal_default_instance();
}


void Ident::Clear() {
// @@protoc_insertion_point(message_clear_start:css_proto_converter.Ident)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nmchars_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(nmstart_ != NULL);
    nmstart_->Clear();
  }
  starting_minus_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Ident::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:css_proto_converter.Ident)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool starting_minus = 1 [default = false];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_starting_minus();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &starting_minus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .css_proto_converter.Nmstart nmstart = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_nmstart()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .css_proto_converter.Nmchar nmchars = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_nmchars()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:css_proto_converter.Ident)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:css_proto_converter.Ident)
  return false;
#undef DO_
}

void Ident::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:css_proto_converter.Ident)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool starting_minus = 1 [default = false];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->starting_minus(), output);
  }

  // required .css_proto_converter.Nmstart nmstart = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_nmstart(), output);
  }

  // repeated .css_proto_converter.Nmchar nmchars = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->nmchars_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->nmchars(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:css_proto_converter.Ident)
}

::google::protobuf::uint8* Ident::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:css_proto_converter.Ident)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool starting_minus = 1 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->starting_minus(), target);
  }

  // required .css_proto_converter.Nmstart nmstart = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_nmstart(), deterministic, target);
  }

  // repeated .css_proto_converter.Nmchar nmchars = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->nmchars_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->nmchars(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:css_proto_converter.Ident)
  return target;
}

size_t Ident::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:css_proto_converter.Ident)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .css_proto_converter.Nmstart nmstart = 2;
  if (has_nmstart()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *nmstart_);
  }
  // repeated .css_proto_converter.Nmchar nmchars = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->nmchars_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->nmchars(static_cast<int>(i)));
    }
  }

  // optional bool starting_minus = 1 [default = false];
  if (has_starting_minus()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Ident::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:css_proto_converter.Ident)
  GOOGLE_DCHECK_NE(&from, this);
  const Ident* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Ident>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:css_proto_converter.Ident)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:css_proto_converter.Ident)
    MergeFrom(*source);
  }
}

void Ident::MergeFrom(const Ident& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:css_proto_converter.Ident)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  nmchars_.MergeFrom(from.nmchars_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_nmstart()->::css_proto_converter::Nmstart::MergeFrom(from.nmstart());
    }
    if (cached_has_bits & 0x00000002u) {
      starting_minus_ = from.starting_minus_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Ident::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:css_proto_converter.Ident)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ident::CopyFrom(const Ident& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:css_proto_converter.Ident)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ident::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->nmchars())) return false;
  if (has_nmstart()) {
    if (!this->nmstart_->IsInitialized()) return false;
  }
  return true;
}

void Ident::Swap(Ident* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ident::InternalSwap(Ident* other) {
  using std::swap;
  CastToBase(&nmchars_)->InternalSwap(CastToBase(&other->nmchars_));
  swap(nmstart_, other->nmstart_);
  swap(starting_minus_, other->starting_minus_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Ident::GetMetadata() const {
  protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Num::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Num::kSignedIntValueFieldNumber;
const int Num::kFloatValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Num::Num()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_css_2eproto::scc_info_Num.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:css_proto_converter.Num)
}
Num::Num(const Num& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&signed_int_value_, &from.signed_int_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&float_value_) -
    reinterpret_cast<char*>(&signed_int_value_)) + sizeof(float_value_));
  // @@protoc_insertion_point(copy_constructor:css_proto_converter.Num)
}

void Num::SharedCtor() {
  ::memset(&signed_int_value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&float_value_) -
      reinterpret_cast<char*>(&signed_int_value_)) + sizeof(float_value_));
}

Num::~Num() {
  // @@protoc_insertion_point(destructor:css_proto_converter.Num)
  SharedDtor();
}

void Num::SharedDtor() {
}

void Num::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Num::descriptor() {
  ::protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Num& Num::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_css_2eproto::scc_info_Num.base);
  return *internal_default_instance();
}


void Num::Clear() {
// @@protoc_insertion_point(message_clear_start:css_proto_converter.Num)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&signed_int_value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&float_value_) -
        reinterpret_cast<char*>(&signed_int_value_)) + sizeof(float_value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Num::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:css_proto_converter.Num)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint64 signed_int_value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_signed_int_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &signed_int_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float float_value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_float_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &float_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:css_proto_converter.Num)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:css_proto_converter.Num)
  return false;
#undef DO_
}

void Num::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:css_proto_converter.Num)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required sint64 signed_int_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->signed_int_value(), output);
  }

  // optional float float_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->float_value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:css_proto_converter.Num)
}

::google::protobuf::uint8* Num::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:css_proto_converter.Num)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required sint64 signed_int_value = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->signed_int_value(), target);
  }

  // optional float float_value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->float_value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:css_proto_converter.Num)
  return target;
}

size_t Num::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:css_proto_converter.Num)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required sint64 signed_int_value = 1;
  if (has_signed_int_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->signed_int_value());
  }
  // optional float float_value = 2;
  if (has_float_value()) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Num::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:css_proto_converter.Num)
  GOOGLE_DCHECK_NE(&from, this);
  const Num* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Num>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:css_proto_converter.Num)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:css_proto_converter.Num)
    MergeFrom(*source);
  }
}

void Num::MergeFrom(const Num& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:css_proto_converter.Num)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      signed_int_value_ = from.signed_int_value_;
    }
    if (cached_has_bits & 0x00000002u) {
      float_value_ = from.float_value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Num::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:css_proto_converter.Num)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Num::CopyFrom(const Num& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:css_proto_converter.Num)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Num::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void Num::Swap(Num* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Num::InternalSwap(Num* other) {
  using std::swap;
  swap(signed_int_value_, other->signed_int_value_);
  swap(float_value_, other->float_value_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Num::GetMetadata() const {
  protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UrlChar::InitAsDefaultInstance() {
  ::css_proto_converter::_UrlChar_default_instance_.ascii_value_ = 0;
  ::css_proto_converter::_UrlChar_default_instance_.escape_ = const_cast< ::css_proto_converter::Escape*>(
      ::css_proto_converter::Escape::internal_default_instance());
}
void UrlChar::set_allocated_escape(::css_proto_converter::Escape* escape) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_rhs();
  if (escape) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      escape = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, escape, submessage_arena);
    }
    set_has_escape();
    rhs_.escape_ = escape;
  }
  // @@protoc_insertion_point(field_set_allocated:css_proto_converter.UrlChar.escape)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UrlChar::kAsciiValueFieldNumber;
const int UrlChar::kEscapeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UrlChar::UrlChar()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_css_2eproto::scc_info_UrlChar.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:css_proto_converter.UrlChar)
}
UrlChar::UrlChar(const UrlChar& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_rhs();
  switch (from.rhs_case()) {
    case kAsciiValue: {
      set_ascii_value(from.ascii_value());
      break;
    }
    case kEscape: {
      mutable_escape()->::css_proto_converter::Escape::MergeFrom(from.escape());
      break;
    }
    case RHS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:css_proto_converter.UrlChar)
}

void UrlChar::SharedCtor() {
  clear_has_rhs();
}

UrlChar::~UrlChar() {
  // @@protoc_insertion_point(destructor:css_proto_converter.UrlChar)
  SharedDtor();
}

void UrlChar::SharedDtor() {
  if (has_rhs()) {
    clear_rhs();
  }
}

void UrlChar::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UrlChar::descriptor() {
  ::protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UrlChar& UrlChar::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_css_2eproto::scc_info_UrlChar.base);
  return *internal_default_instance();
}


void UrlChar::clear_rhs() {
// @@protoc_insertion_point(one_of_clear_start:css_proto_converter.UrlChar)
  switch (rhs_case()) {
    case kAsciiValue: {
      // No need to clear
      break;
    }
    case kEscape: {
      delete rhs_.escape_;
      break;
    }
    case RHS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RHS_NOT_SET;
}


void UrlChar::Clear() {
// @@protoc_insertion_point(message_clear_start:css_proto_converter.UrlChar)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_rhs();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UrlChar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:css_proto_converter.UrlChar)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .css_proto_converter.UrlChar.AsciiValue ascii_value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::css_proto_converter::UrlChar_AsciiValue_IsValid(value)) {
            set_ascii_value(static_cast< ::css_proto_converter::UrlChar_AsciiValue >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .css_proto_converter.Escape escape = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_escape()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:css_proto_converter.UrlChar)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:css_proto_converter.UrlChar)
  return false;
#undef DO_
}

void UrlChar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:css_proto_converter.UrlChar)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (rhs_case()) {
    case kAsciiValue:
      ::google::protobuf::internal::WireFormatLite::WriteEnum(
        1, this->ascii_value(), output);
      break;
    case kEscape:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, this->_internal_escape(), output);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:css_proto_converter.UrlChar)
}

::google::protobuf::uint8* UrlChar::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:css_proto_converter.UrlChar)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (rhs_case()) {
    case kAsciiValue:
      target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
        1, this->ascii_value(), target);
      break;
    case kEscape:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          2, this->_internal_escape(), deterministic, target);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:css_proto_converter.UrlChar)
  return target;
}

size_t UrlChar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:css_proto_converter.UrlChar)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  switch (rhs_case()) {
    // optional .css_proto_converter.UrlChar.AsciiValue ascii_value = 1;
    case kAsciiValue: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ascii_value());
      break;
    }
    // optional .css_proto_converter.Escape escape = 2;
    case kEscape: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *rhs_.escape_);
      break;
    }
    case RHS_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UrlChar::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:css_proto_converter.UrlChar)
  GOOGLE_DCHECK_NE(&from, this);
  const UrlChar* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UrlChar>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:css_proto_converter.UrlChar)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:css_proto_converter.UrlChar)
    MergeFrom(*source);
  }
}

void UrlChar::MergeFrom(const UrlChar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:css_proto_converter.UrlChar)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.rhs_case()) {
    case kAsciiValue: {
      set_ascii_value(from.ascii_value());
      break;
    }
    case kEscape: {
      mutable_escape()->::css_proto_converter::Escape::MergeFrom(from.escape());
      break;
    }
    case RHS_NOT_SET: {
      break;
    }
  }
}

void UrlChar::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:css_proto_converter.UrlChar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UrlChar::CopyFrom(const UrlChar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:css_proto_converter.UrlChar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UrlChar::IsInitialized() const {
  switch (rhs_case()) {
    case kAsciiValue: {
      break;
    }
    case kEscape: {
      if (has_escape()) {
        if (!this->escape().IsInitialized()) return false;
      }
      break;
    }
    case RHS_NOT_SET: {
      break;
    }
  }
  return true;
}

void UrlChar::Swap(UrlChar* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UrlChar::InternalSwap(UrlChar* other) {
  using std::swap;
  swap(rhs_, other->rhs_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UrlChar::GetMetadata() const {
  protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void W::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int W::kUnrepeatedWFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

W::W()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_css_2eproto::scc_info_W.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:css_proto_converter.W)
}
W::W(const W& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      unrepeated_w_(from.unrepeated_w_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:css_proto_converter.W)
}

void W::SharedCtor() {
}

W::~W() {
  // @@protoc_insertion_point(destructor:css_proto_converter.W)
  SharedDtor();
}

void W::SharedDtor() {
}

void W::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* W::descriptor() {
  ::protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const W& W::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_css_2eproto::scc_info_W.base);
  return *internal_default_instance();
}


void W::Clear() {
// @@protoc_insertion_point(message_clear_start:css_proto_converter.W)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  unrepeated_w_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool W::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:css_proto_converter.W)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .css_proto_converter.UnrepeatedW unrepeated_w = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_unrepeated_w()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:css_proto_converter.W)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:css_proto_converter.W)
  return false;
#undef DO_
}

void W::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:css_proto_converter.W)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .css_proto_converter.UnrepeatedW unrepeated_w = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->unrepeated_w_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->unrepeated_w(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:css_proto_converter.W)
}

::google::protobuf::uint8* W::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:css_proto_converter.W)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .css_proto_converter.UnrepeatedW unrepeated_w = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->unrepeated_w_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->unrepeated_w(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:css_proto_converter.W)
  return target;
}

size_t W::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:css_proto_converter.W)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .css_proto_converter.UnrepeatedW unrepeated_w = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->unrepeated_w_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->unrepeated_w(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void W::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:css_proto_converter.W)
  GOOGLE_DCHECK_NE(&from, this);
  const W* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const W>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:css_proto_converter.W)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:css_proto_converter.W)
    MergeFrom(*source);
  }
}

void W::MergeFrom(const W& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:css_proto_converter.W)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  unrepeated_w_.MergeFrom(from.unrepeated_w_);
}

void W::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:css_proto_converter.W)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void W::CopyFrom(const W& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:css_proto_converter.W)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool W::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->unrepeated_w())) return false;
  return true;
}

void W::Swap(W* other) {
  if (other == this) return;
  InternalSwap(other);
}
void W::InternalSwap(W* other) {
  using std::swap;
  CastToBase(&unrepeated_w_)->InternalSwap(CastToBase(&other->unrepeated_w_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata W::GetMetadata() const {
  protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UnrepeatedW::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UnrepeatedW::kAsciiValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UnrepeatedW::UnrepeatedW()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_css_2eproto::scc_info_UnrepeatedW.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:css_proto_converter.UnrepeatedW)
}
UnrepeatedW::UnrepeatedW(const UnrepeatedW& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ascii_value_ = from.ascii_value_;
  // @@protoc_insertion_point(copy_constructor:css_proto_converter.UnrepeatedW)
}

void UnrepeatedW::SharedCtor() {
  ascii_value_ = 9;
}

UnrepeatedW::~UnrepeatedW() {
  // @@protoc_insertion_point(destructor:css_proto_converter.UnrepeatedW)
  SharedDtor();
}

void UnrepeatedW::SharedDtor() {
}

void UnrepeatedW::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UnrepeatedW::descriptor() {
  ::protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UnrepeatedW& UnrepeatedW::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_css_2eproto::scc_info_UnrepeatedW.base);
  return *internal_default_instance();
}


void UnrepeatedW::Clear() {
// @@protoc_insertion_point(message_clear_start:css_proto_converter.UnrepeatedW)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ascii_value_ = 9;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UnrepeatedW::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:css_proto_converter.UnrepeatedW)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .css_proto_converter.UnrepeatedW.AsciiValue ascii_value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::css_proto_converter::UnrepeatedW_AsciiValue_IsValid(value)) {
            set_ascii_value(static_cast< ::css_proto_converter::UnrepeatedW_AsciiValue >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:css_proto_converter.UnrepeatedW)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:css_proto_converter.UnrepeatedW)
  return false;
#undef DO_
}

void UnrepeatedW::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:css_proto_converter.UnrepeatedW)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .css_proto_converter.UnrepeatedW.AsciiValue ascii_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ascii_value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:css_proto_converter.UnrepeatedW)
}

::google::protobuf::uint8* UnrepeatedW::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:css_proto_converter.UnrepeatedW)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .css_proto_converter.UnrepeatedW.AsciiValue ascii_value = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ascii_value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:css_proto_converter.UnrepeatedW)
  return target;
}

size_t UnrepeatedW::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:css_proto_converter.UnrepeatedW)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .css_proto_converter.UnrepeatedW.AsciiValue ascii_value = 1;
  if (has_ascii_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ascii_value());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnrepeatedW::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:css_proto_converter.UnrepeatedW)
  GOOGLE_DCHECK_NE(&from, this);
  const UnrepeatedW* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UnrepeatedW>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:css_proto_converter.UnrepeatedW)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:css_proto_converter.UnrepeatedW)
    MergeFrom(*source);
  }
}

void UnrepeatedW::MergeFrom(const UnrepeatedW& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:css_proto_converter.UnrepeatedW)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ascii_value()) {
    set_ascii_value(from.ascii_value());
  }
}

void UnrepeatedW::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:css_proto_converter.UnrepeatedW)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnrepeatedW::CopyFrom(const UnrepeatedW& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:css_proto_converter.UnrepeatedW)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnrepeatedW::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void UnrepeatedW::Swap(UnrepeatedW* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UnrepeatedW::InternalSwap(UnrepeatedW* other) {
  using std::swap;
  swap(ascii_value_, other->ascii_value_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UnrepeatedW::GetMetadata() const {
  protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Nl::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Nl::kNewlineKindFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Nl::Nl()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_css_2eproto::scc_info_Nl.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:css_proto_converter.Nl)
}
Nl::Nl(const Nl& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  newline_kind_ = from.newline_kind_;
  // @@protoc_insertion_point(copy_constructor:css_proto_converter.Nl)
}

void Nl::SharedCtor() {
  newline_kind_ = 10;
}

Nl::~Nl() {
  // @@protoc_insertion_point(destructor:css_proto_converter.Nl)
  SharedDtor();
}

void Nl::SharedDtor() {
}

void Nl::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Nl::descriptor() {
  ::protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Nl& Nl::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_css_2eproto::scc_info_Nl.base);
  return *internal_default_instance();
}


void Nl::Clear() {
// @@protoc_insertion_point(message_clear_start:css_proto_converter.Nl)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  newline_kind_ = 10;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Nl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:css_proto_converter.Nl)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .css_proto_converter.Nl.NewlineKind newline_kind = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::css_proto_converter::Nl_NewlineKind_IsValid(value)) {
            set_newline_kind(static_cast< ::css_proto_converter::Nl_NewlineKind >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:css_proto_converter.Nl)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:css_proto_converter.Nl)
  return false;
#undef DO_
}

void Nl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:css_proto_converter.Nl)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .css_proto_converter.Nl.NewlineKind newline_kind = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->newline_kind(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:css_proto_converter.Nl)
}

::google::protobuf::uint8* Nl::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:css_proto_converter.Nl)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .css_proto_converter.Nl.NewlineKind newline_kind = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->newline_kind(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:css_proto_converter.Nl)
  return target;
}

size_t Nl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:css_proto_converter.Nl)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .css_proto_converter.Nl.NewlineKind newline_kind = 1;
  if (has_newline_kind()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->newline_kind());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Nl::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:css_proto_converter.Nl)
  GOOGLE_DCHECK_NE(&from, this);
  const Nl* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Nl>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:css_proto_converter.Nl)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:css_proto_converter.Nl)
    MergeFrom(*source);
  }
}

void Nl::MergeFrom(const Nl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:css_proto_converter.Nl)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_newline_kind()) {
    set_newline_kind(from.newline_kind());
  }
}

void Nl::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:css_proto_converter.Nl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Nl::CopyFrom(const Nl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:css_proto_converter.Nl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Nl::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void Nl::Swap(Nl* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Nl::InternalSwap(Nl* other) {
  using std::swap;
  swap(newline_kind_, other->newline_kind_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Nl::GetMetadata() const {
  protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Length::InitAsDefaultInstance() {
  ::css_proto_converter::_Length_default_instance_._instance.get_mutable()->num_ = const_cast< ::css_proto_converter::Num*>(
      ::css_proto_converter::Num::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Length::kNumFieldNumber;
const int Length::kUnitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Length::Length()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_css_2eproto::scc_info_Length.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:css_proto_converter.Length)
}
Length::Length(const Length& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_num()) {
    num_ = new ::css_proto_converter::Num(*from.num_);
  } else {
    num_ = NULL;
  }
  unit_ = from.unit_;
  // @@protoc_insertion_point(copy_constructor:css_proto_converter.Length)
}

void Length::SharedCtor() {
  num_ = NULL;
  unit_ = 1;
}

Length::~Length() {
  // @@protoc_insertion_point(destructor:css_proto_converter.Length)
  SharedDtor();
}

void Length::SharedDtor() {
  if (this != internal_default_instance()) delete num_;
}

void Length::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Length::descriptor() {
  ::protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Length& Length::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_css_2eproto::scc_info_Length.base);
  return *internal_default_instance();
}


void Length::Clear() {
// @@protoc_insertion_point(message_clear_start:css_proto_converter.Length)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(num_ != NULL);
      num_->Clear();
    }
    unit_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Length::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:css_proto_converter.Length)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .css_proto_converter.Num num = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_num()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .css_proto_converter.Length.Unit unit = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::css_proto_converter::Length_Unit_IsValid(value)) {
            set_unit(static_cast< ::css_proto_converter::Length_Unit >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:css_proto_converter.Length)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:css_proto_converter.Length)
  return false;
#undef DO_
}

void Length::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:css_proto_converter.Length)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .css_proto_converter.Num num = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_num(), output);
  }

  // required .css_proto_converter.Length.Unit unit = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->unit(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:css_proto_converter.Length)
}

::google::protobuf::uint8* Length::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:css_proto_converter.Length)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .css_proto_converter.Num num = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_num(), deterministic, target);
  }

  // required .css_proto_converter.Length.Unit unit = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->unit(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:css_proto_converter.Length)
  return target;
}

size_t Length::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:css_proto_converter.Length)
  size_t total_size = 0;

  if (has_num()) {
    // required .css_proto_converter.Num num = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *num_);
  }

  if (has_unit()) {
    // required .css_proto_converter.Length.Unit unit = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->unit());
  }

  return total_size;
}
size_t Length::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:css_proto_converter.Length)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .css_proto_converter.Num num = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *num_);

    // required .css_proto_converter.Length.Unit unit = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->unit());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Length::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:css_proto_converter.Length)
  GOOGLE_DCHECK_NE(&from, this);
  const Length* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Length>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:css_proto_converter.Length)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:css_proto_converter.Length)
    MergeFrom(*source);
  }
}

void Length::MergeFrom(const Length& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:css_proto_converter.Length)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_num()->::css_proto_converter::Num::MergeFrom(from.num());
    }
    if (cached_has_bits & 0x00000002u) {
      unit_ = from.unit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Length::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:css_proto_converter.Length)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Length::CopyFrom(const Length& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:css_proto_converter.Length)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Length::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_num()) {
    if (!this->num_->IsInitialized()) return false;
  }
  return true;
}

void Length::Swap(Length* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Length::InternalSwap(Length* other) {
  using std::swap;
  swap(num_, other->num_);
  swap(unit_, other->unit_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Length::GetMetadata() const {
  protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Angle::InitAsDefaultInstance() {
  ::css_proto_converter::_Angle_default_instance_._instance.get_mutable()->num_ = const_cast< ::css_proto_converter::Num*>(
      ::css_proto_converter::Num::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Angle::kNumFieldNumber;
const int Angle::kUnitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Angle::Angle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_css_2eproto::scc_info_Angle.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:css_proto_converter.Angle)
}
Angle::Angle(const Angle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_num()) {
    num_ = new ::css_proto_converter::Num(*from.num_);
  } else {
    num_ = NULL;
  }
  unit_ = from.unit_;
  // @@protoc_insertion_point(copy_constructor:css_proto_converter.Angle)
}

void Angle::SharedCtor() {
  num_ = NULL;
  unit_ = 1;
}

Angle::~Angle() {
  // @@protoc_insertion_point(destructor:css_proto_converter.Angle)
  SharedDtor();
}

void Angle::SharedDtor() {
  if (this != internal_default_instance()) delete num_;
}

void Angle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Angle::descriptor() {
  ::protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Angle& Angle::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_css_2eproto::scc_info_Angle.base);
  return *internal_default_instance();
}


void Angle::Clear() {
// @@protoc_insertion_point(message_clear_start:css_proto_converter.Angle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(num_ != NULL);
      num_->Clear();
    }
    unit_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Angle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:css_proto_converter.Angle)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .css_proto_converter.Num num = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_num()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .css_proto_converter.Angle.Unit unit = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::css_proto_converter::Angle_Unit_IsValid(value)) {
            set_unit(static_cast< ::css_proto_converter::Angle_Unit >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:css_proto_converter.Angle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:css_proto_converter.Angle)
  return false;
#undef DO_
}

void Angle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:css_proto_converter.Angle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .css_proto_converter.Num num = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_num(), output);
  }

  // required .css_proto_converter.Angle.Unit unit = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->unit(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:css_proto_converter.Angle)
}

::google::protobuf::uint8* Angle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:css_proto_converter.Angle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .css_proto_converter.Num num = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_num(), deterministic, target);
  }

  // required .css_proto_converter.Angle.Unit unit = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->unit(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:css_proto_converter.Angle)
  return target;
}

size_t Angle::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:css_proto_converter.Angle)
  size_t total_size = 0;

  if (has_num()) {
    // required .css_proto_converter.Num num = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *num_);
  }

  if (has_unit()) {
    // required .css_proto_converter.Angle.Unit unit = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->unit());
  }

  return total_size;
}
size_t Angle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:css_proto_converter.Angle)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .css_proto_converter.Num num = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *num_);

    // required .css_proto_converter.Angle.Unit unit = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->unit());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Angle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:css_proto_converter.Angle)
  GOOGLE_DCHECK_NE(&from, this);
  const Angle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Angle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:css_proto_converter.Angle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:css_proto_converter.Angle)
    MergeFrom(*source);
  }
}

void Angle::MergeFrom(const Angle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:css_proto_converter.Angle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_num()->::css_proto_converter::Num::MergeFrom(from.num());
    }
    if (cached_has_bits & 0x00000002u) {
      unit_ = from.unit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Angle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:css_proto_converter.Angle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Angle::CopyFrom(const Angle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:css_proto_converter.Angle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Angle::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_num()) {
    if (!this->num_->IsInitialized()) return false;
  }
  return true;
}

void Angle::Swap(Angle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Angle::InternalSwap(Angle* other) {
  using std::swap;
  swap(num_, other->num_);
  swap(unit_, other->unit_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Angle::GetMetadata() const {
  protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Time::InitAsDefaultInstance() {
  ::css_proto_converter::_Time_default_instance_._instance.get_mutable()->num_ = const_cast< ::css_proto_converter::Num*>(
      ::css_proto_converter::Num::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Time::kNumFieldNumber;
const int Time::kUnitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Time::Time()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_css_2eproto::scc_info_Time.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:css_proto_converter.Time)
}
Time::Time(const Time& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_num()) {
    num_ = new ::css_proto_converter::Num(*from.num_);
  } else {
    num_ = NULL;
  }
  unit_ = from.unit_;
  // @@protoc_insertion_point(copy_constructor:css_proto_converter.Time)
}

void Time::SharedCtor() {
  num_ = NULL;
  unit_ = 1;
}

Time::~Time() {
  // @@protoc_insertion_point(destructor:css_proto_converter.Time)
  SharedDtor();
}

void Time::SharedDtor() {
  if (this != internal_default_instance()) delete num_;
}

void Time::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Time::descriptor() {
  ::protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Time& Time::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_css_2eproto::scc_info_Time.base);
  return *internal_default_instance();
}


void Time::Clear() {
// @@protoc_insertion_point(message_clear_start:css_proto_converter.Time)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(num_ != NULL);
      num_->Clear();
    }
    unit_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Time::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:css_proto_converter.Time)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .css_proto_converter.Num num = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_num()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .css_proto_converter.Time.Unit unit = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::css_proto_converter::Time_Unit_IsValid(value)) {
            set_unit(static_cast< ::css_proto_converter::Time_Unit >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:css_proto_converter.Time)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:css_proto_converter.Time)
  return false;
#undef DO_
}

void Time::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:css_proto_converter.Time)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .css_proto_converter.Num num = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_num(), output);
  }

  // required .css_proto_converter.Time.Unit unit = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->unit(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:css_proto_converter.Time)
}

::google::protobuf::uint8* Time::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:css_proto_converter.Time)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .css_proto_converter.Num num = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_num(), deterministic, target);
  }

  // required .css_proto_converter.Time.Unit unit = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->unit(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:css_proto_converter.Time)
  return target;
}

size_t Time::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:css_proto_converter.Time)
  size_t total_size = 0;

  if (has_num()) {
    // required .css_proto_converter.Num num = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *num_);
  }

  if (has_unit()) {
    // required .css_proto_converter.Time.Unit unit = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->unit());
  }

  return total_size;
}
size_t Time::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:css_proto_converter.Time)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .css_proto_converter.Num num = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *num_);

    // required .css_proto_converter.Time.Unit unit = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->unit());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Time::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:css_proto_converter.Time)
  GOOGLE_DCHECK_NE(&from, this);
  const Time* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Time>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:css_proto_converter.Time)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:css_proto_converter.Time)
    MergeFrom(*source);
  }
}

void Time::MergeFrom(const Time& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:css_proto_converter.Time)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_num()->::css_proto_converter::Num::MergeFrom(from.num());
    }
    if (cached_has_bits & 0x00000002u) {
      unit_ = from.unit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Time::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:css_proto_converter.Time)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Time::CopyFrom(const Time& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:css_proto_converter.Time)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Time::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_num()) {
    if (!this->num_->IsInitialized()) return false;
  }
  return true;
}

void Time::Swap(Time* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Time::InternalSwap(Time* other) {
  using std::swap;
  swap(num_, other->num_);
  swap(unit_, other->unit_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Time::GetMetadata() const {
  protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Freq::InitAsDefaultInstance() {
  ::css_proto_converter::_Freq_default_instance_._instance.get_mutable()->num_ = const_cast< ::css_proto_converter::Num*>(
      ::css_proto_converter::Num::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Freq::kNumFieldNumber;
const int Freq::kUnitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Freq::Freq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_css_2eproto::scc_info_Freq.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:css_proto_converter.Freq)
}
Freq::Freq(const Freq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_num()) {
    num_ = new ::css_proto_converter::Num(*from.num_);
  } else {
    num_ = NULL;
  }
  unit_ = from.unit_;
  // @@protoc_insertion_point(copy_constructor:css_proto_converter.Freq)
}

void Freq::SharedCtor() {
  num_ = NULL;
  unit_ = 1;
}

Freq::~Freq() {
  // @@protoc_insertion_point(destructor:css_proto_converter.Freq)
  SharedDtor();
}

void Freq::SharedDtor() {
  if (this != internal_default_instance()) delete num_;
}

void Freq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Freq::descriptor() {
  ::protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Freq& Freq::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_css_2eproto::scc_info_Freq.base);
  return *internal_default_instance();
}


void Freq::Clear() {
// @@protoc_insertion_point(message_clear_start:css_proto_converter.Freq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(num_ != NULL);
      num_->Clear();
    }
    unit_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Freq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:css_proto_converter.Freq)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .css_proto_converter.Num num = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_num()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .css_proto_converter.Freq.Unit unit = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::css_proto_converter::Freq_Unit_IsValid(value)) {
            set_unit(static_cast< ::css_proto_converter::Freq_Unit >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:css_proto_converter.Freq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:css_proto_converter.Freq)
  return false;
#undef DO_
}

void Freq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:css_proto_converter.Freq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .css_proto_converter.Num num = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_num(), output);
  }

  // required .css_proto_converter.Freq.Unit unit = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->unit(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:css_proto_converter.Freq)
}

::google::protobuf::uint8* Freq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:css_proto_converter.Freq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .css_proto_converter.Num num = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_num(), deterministic, target);
  }

  // required .css_proto_converter.Freq.Unit unit = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->unit(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:css_proto_converter.Freq)
  return target;
}

size_t Freq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:css_proto_converter.Freq)
  size_t total_size = 0;

  if (has_num()) {
    // required .css_proto_converter.Num num = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *num_);
  }

  if (has_unit()) {
    // required .css_proto_converter.Freq.Unit unit = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->unit());
  }

  return total_size;
}
size_t Freq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:css_proto_converter.Freq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .css_proto_converter.Num num = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *num_);

    // required .css_proto_converter.Freq.Unit unit = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->unit());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Freq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:css_proto_converter.Freq)
  GOOGLE_DCHECK_NE(&from, this);
  const Freq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Freq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:css_proto_converter.Freq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:css_proto_converter.Freq)
    MergeFrom(*source);
  }
}

void Freq::MergeFrom(const Freq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:css_proto_converter.Freq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_num()->::css_proto_converter::Num::MergeFrom(from.num());
    }
    if (cached_has_bits & 0x00000002u) {
      unit_ = from.unit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Freq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:css_proto_converter.Freq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Freq::CopyFrom(const Freq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:css_proto_converter.Freq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Freq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_num()) {
    if (!this->num_->IsInitialized()) return false;
  }
  return true;
}

void Freq::Swap(Freq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Freq::InternalSwap(Freq* other) {
  using std::swap;
  swap(num_, other->num_);
  swap(unit_, other->unit_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Freq::GetMetadata() const {
  protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Uri::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Uri::Uri()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_css_2eproto::scc_info_Uri.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:css_proto_converter.Uri)
}
Uri::Uri(const Uri& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:css_proto_converter.Uri)
}

void Uri::SharedCtor() {
}

Uri::~Uri() {
  // @@protoc_insertion_point(destructor:css_proto_converter.Uri)
  SharedDtor();
}

void Uri::SharedDtor() {
}

void Uri::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Uri::descriptor() {
  ::protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Uri& Uri::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_css_2eproto::scc_info_Uri.base);
  return *internal_default_instance();
}


void Uri::Clear() {
// @@protoc_insertion_point(message_clear_start:css_proto_converter.Uri)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Uri::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:css_proto_converter.Uri)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:css_proto_converter.Uri)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:css_proto_converter.Uri)
  return false;
#undef DO_
}

void Uri::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:css_proto_converter.Uri)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:css_proto_converter.Uri)
}

::google::protobuf::uint8* Uri::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:css_proto_converter.Uri)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:css_proto_converter.Uri)
  return target;
}

size_t Uri::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:css_proto_converter.Uri)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Uri::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:css_proto_converter.Uri)
  GOOGLE_DCHECK_NE(&from, this);
  const Uri* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Uri>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:css_proto_converter.Uri)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:css_proto_converter.Uri)
    MergeFrom(*source);
  }
}

void Uri::MergeFrom(const Uri& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:css_proto_converter.Uri)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Uri::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:css_proto_converter.Uri)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Uri::CopyFrom(const Uri& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:css_proto_converter.Uri)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Uri::IsInitialized() const {
  return true;
}

void Uri::Swap(Uri* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Uri::InternalSwap(Uri* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Uri::GetMetadata() const {
  protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FunctionToken::InitAsDefaultInstance() {
  ::css_proto_converter::_FunctionToken_default_instance_._instance.get_mutable()->ident_ = const_cast< ::css_proto_converter::Ident*>(
      ::css_proto_converter::Ident::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FunctionToken::kIdentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FunctionToken::FunctionToken()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_css_2eproto::scc_info_FunctionToken.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:css_proto_converter.FunctionToken)
}
FunctionToken::FunctionToken(const FunctionToken& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ident()) {
    ident_ = new ::css_proto_converter::Ident(*from.ident_);
  } else {
    ident_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:css_proto_converter.FunctionToken)
}

void FunctionToken::SharedCtor() {
  ident_ = NULL;
}

FunctionToken::~FunctionToken() {
  // @@protoc_insertion_point(destructor:css_proto_converter.FunctionToken)
  SharedDtor();
}

void FunctionToken::SharedDtor() {
  if (this != internal_default_instance()) delete ident_;
}

void FunctionToken::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FunctionToken::descriptor() {
  ::protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FunctionToken& FunctionToken::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_css_2eproto::scc_info_FunctionToken.base);
  return *internal_default_instance();
}


void FunctionToken::Clear() {
// @@protoc_insertion_point(message_clear_start:css_proto_converter.FunctionToken)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(ident_ != NULL);
    ident_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FunctionToken::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:css_proto_converter.FunctionToken)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .css_proto_converter.Ident ident = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ident()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:css_proto_converter.FunctionToken)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:css_proto_converter.FunctionToken)
  return false;
#undef DO_
}

void FunctionToken::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:css_proto_converter.FunctionToken)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .css_proto_converter.Ident ident = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_ident(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:css_proto_converter.FunctionToken)
}

::google::protobuf::uint8* FunctionToken::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:css_proto_converter.FunctionToken)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .css_proto_converter.Ident ident = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_ident(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:css_proto_converter.FunctionToken)
  return target;
}

size_t FunctionToken::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:css_proto_converter.FunctionToken)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .css_proto_converter.Ident ident = 1;
  if (has_ident()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ident_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FunctionToken::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:css_proto_converter.FunctionToken)
  GOOGLE_DCHECK_NE(&from, this);
  const FunctionToken* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FunctionToken>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:css_proto_converter.FunctionToken)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:css_proto_converter.FunctionToken)
    MergeFrom(*source);
  }
}

void FunctionToken::MergeFrom(const FunctionToken& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:css_proto_converter.FunctionToken)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ident()) {
    mutable_ident()->::css_proto_converter::Ident::MergeFrom(from.ident());
  }
}

void FunctionToken::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:css_proto_converter.FunctionToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FunctionToken::CopyFrom(const FunctionToken& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:css_proto_converter.FunctionToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FunctionToken::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_ident()) {
    if (!this->ident_->IsInitialized()) return false;
  }
  return true;
}

void FunctionToken::Swap(FunctionToken* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FunctionToken::InternalSwap(FunctionToken* other) {
  using std::swap;
  swap(ident_, other->ident_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FunctionToken::GetMetadata() const {
  protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StyleSheet::InitAsDefaultInstance() {
  ::css_proto_converter::_StyleSheet_default_instance_._instance.get_mutable()->charset_declaration_ = const_cast< ::css_proto_converter::CharsetDeclaration*>(
      ::css_proto_converter::CharsetDeclaration::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StyleSheet::kCharsetDeclarationFieldNumber;
const int StyleSheet::kImportsFieldNumber;
const int StyleSheet::kNamespacesFieldNumber;
const int StyleSheet::kNestedAtRulesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StyleSheet::StyleSheet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_css_2eproto::scc_info_StyleSheet.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:css_proto_converter.StyleSheet)
}
StyleSheet::StyleSheet(const StyleSheet& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      imports_(from.imports_),
      namespaces_(from.namespaces_),
      nested_at_rules_(from.nested_at_rules_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_charset_declaration()) {
    charset_declaration_ = new ::css_proto_converter::CharsetDeclaration(*from.charset_declaration_);
  } else {
    charset_declaration_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:css_proto_converter.StyleSheet)
}

void StyleSheet::SharedCtor() {
  charset_declaration_ = NULL;
}

StyleSheet::~StyleSheet() {
  // @@protoc_insertion_point(destructor:css_proto_converter.StyleSheet)
  SharedDtor();
}

void StyleSheet::SharedDtor() {
  if (this != internal_default_instance()) delete charset_declaration_;
}

void StyleSheet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* StyleSheet::descriptor() {
  ::protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StyleSheet& StyleSheet::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_css_2eproto::scc_info_StyleSheet.base);
  return *internal_default_instance();
}


void StyleSheet::Clear() {
// @@protoc_insertion_point(message_clear_start:css_proto_converter.StyleSheet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  imports_.Clear();
  namespaces_.Clear();
  nested_at_rules_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(charset_declaration_ != NULL);
    charset_declaration_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StyleSheet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:css_proto_converter.StyleSheet)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .css_proto_converter.CharsetDeclaration charset_declaration = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_charset_declaration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .css_proto_converter.Import imports = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_imports()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .css_proto_converter.Namespace namespaces = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_namespaces()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .css_proto_converter.NestedAtRule nested_at_rules = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_nested_at_rules()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:css_proto_converter.StyleSheet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:css_proto_converter.StyleSheet)
  return false;
#undef DO_
}

void StyleSheet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:css_proto_converter.StyleSheet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .css_proto_converter.CharsetDeclaration charset_declaration = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_charset_declaration(), output);
  }

  // repeated .css_proto_converter.Import imports = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->imports_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->imports(static_cast<int>(i)),
      output);
  }

  // repeated .css_proto_converter.Namespace namespaces = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->namespaces_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->namespaces(static_cast<int>(i)),
      output);
  }

  // repeated .css_proto_converter.NestedAtRule nested_at_rules = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->nested_at_rules_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->nested_at_rules(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:css_proto_converter.StyleSheet)
}

::google::protobuf::uint8* StyleSheet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:css_proto_converter.StyleSheet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .css_proto_converter.CharsetDeclaration charset_declaration = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_charset_declaration(), deterministic, target);
  }

  // repeated .css_proto_converter.Import imports = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->imports_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->imports(static_cast<int>(i)), deterministic, target);
  }

  // repeated .css_proto_converter.Namespace namespaces = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->namespaces_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->namespaces(static_cast<int>(i)), deterministic, target);
  }

  // repeated .css_proto_converter.NestedAtRule nested_at_rules = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->nested_at_rules_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->nested_at_rules(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:css_proto_converter.StyleSheet)
  return target;
}

size_t StyleSheet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:css_proto_converter.StyleSheet)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .css_proto_converter.Import imports = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->imports_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->imports(static_cast<int>(i)));
    }
  }

  // repeated .css_proto_converter.Namespace namespaces = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->namespaces_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->namespaces(static_cast<int>(i)));
    }
  }

  // repeated .css_proto_converter.NestedAtRule nested_at_rules = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->nested_at_rules_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->nested_at_rules(static_cast<int>(i)));
    }
  }

  // optional .css_proto_converter.CharsetDeclaration charset_declaration = 1;
  if (has_charset_declaration()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *charset_declaration_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StyleSheet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:css_proto_converter.StyleSheet)
  GOOGLE_DCHECK_NE(&from, this);
  const StyleSheet* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StyleSheet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:css_proto_converter.StyleSheet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:css_proto_converter.StyleSheet)
    MergeFrom(*source);
  }
}

void StyleSheet::MergeFrom(const StyleSheet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:css_proto_converter.StyleSheet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  imports_.MergeFrom(from.imports_);
  namespaces_.MergeFrom(from.namespaces_);
  nested_at_rules_.MergeFrom(from.nested_at_rules_);
  if (from.has_charset_declaration()) {
    mutable_charset_declaration()->::css_proto_converter::CharsetDeclaration::MergeFrom(from.charset_declaration());
  }
}

void StyleSheet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:css_proto_converter.StyleSheet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StyleSheet::CopyFrom(const StyleSheet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:css_proto_converter.StyleSheet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StyleSheet::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->imports())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->namespaces())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->nested_at_rules())) return false;
  if (has_charset_declaration()) {
    if (!this->charset_declaration_->IsInitialized()) return false;
  }
  return true;
}

void StyleSheet::Swap(StyleSheet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StyleSheet::InternalSwap(StyleSheet* other) {
  using std::swap;
  CastToBase(&imports_)->InternalSwap(CastToBase(&other->imports_));
  CastToBase(&namespaces_)->InternalSwap(CastToBase(&other->namespaces_));
  CastToBase(&nested_at_rules_)->InternalSwap(CastToBase(&other->nested_at_rules_));
  swap(charset_declaration_, other->charset_declaration_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata StyleSheet::GetMetadata() const {
  protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CharsetDeclaration::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CharsetDeclaration::kEncodingIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CharsetDeclaration::CharsetDeclaration()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_css_2eproto::scc_info_CharsetDeclaration.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:css_proto_converter.CharsetDeclaration)
}
CharsetDeclaration::CharsetDeclaration(const CharsetDeclaration& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  encoding_id_ = from.encoding_id_;
  // @@protoc_insertion_point(copy_constructor:css_proto_converter.CharsetDeclaration)
}

void CharsetDeclaration::SharedCtor() {
  encoding_id_ = 1;
}

CharsetDeclaration::~CharsetDeclaration() {
  // @@protoc_insertion_point(destructor:css_proto_converter.CharsetDeclaration)
  SharedDtor();
}

void CharsetDeclaration::SharedDtor() {
}

void CharsetDeclaration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CharsetDeclaration::descriptor() {
  ::protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CharsetDeclaration& CharsetDeclaration::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_css_2eproto::scc_info_CharsetDeclaration.base);
  return *internal_default_instance();
}


void CharsetDeclaration::Clear() {
// @@protoc_insertion_point(message_clear_start:css_proto_converter.CharsetDeclaration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  encoding_id_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CharsetDeclaration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:css_proto_converter.CharsetDeclaration)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .css_proto_converter.CharsetDeclaration.EncodingId encoding_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::css_proto_converter::CharsetDeclaration_EncodingId_IsValid(value)) {
            set_encoding_id(static_cast< ::css_proto_converter::CharsetDeclaration_EncodingId >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:css_proto_converter.CharsetDeclaration)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:css_proto_converter.CharsetDeclaration)
  return false;
#undef DO_
}

void CharsetDeclaration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:css_proto_converter.CharsetDeclaration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .css_proto_converter.CharsetDeclaration.EncodingId encoding_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->encoding_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:css_proto_converter.CharsetDeclaration)
}

::google::protobuf::uint8* CharsetDeclaration::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:css_proto_converter.CharsetDeclaration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .css_proto_converter.CharsetDeclaration.EncodingId encoding_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->encoding_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:css_proto_converter.CharsetDeclaration)
  return target;
}

size_t CharsetDeclaration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:css_proto_converter.CharsetDeclaration)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .css_proto_converter.CharsetDeclaration.EncodingId encoding_id = 1;
  if (has_encoding_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->encoding_id());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CharsetDeclaration::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:css_proto_converter.CharsetDeclaration)
  GOOGLE_DCHECK_NE(&from, this);
  const CharsetDeclaration* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CharsetDeclaration>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:css_proto_converter.CharsetDeclaration)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:css_proto_converter.CharsetDeclaration)
    MergeFrom(*source);
  }
}

void CharsetDeclaration::MergeFrom(const CharsetDeclaration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:css_proto_converter.CharsetDeclaration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_encoding_id()) {
    set_encoding_id(from.encoding_id());
  }
}

void CharsetDeclaration::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:css_proto_converter.CharsetDeclaration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharsetDeclaration::CopyFrom(const CharsetDeclaration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:css_proto_converter.CharsetDeclaration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharsetDeclaration::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void CharsetDeclaration::Swap(CharsetDeclaration* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CharsetDeclaration::InternalSwap(CharsetDeclaration* other) {
  using std::swap;
  swap(encoding_id_, other->encoding_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CharsetDeclaration::GetMetadata() const {
  protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void NestedAtRule::InitAsDefaultInstance() {
  ::css_proto_converter::_NestedAtRule_default_instance_.ruleset_ = const_cast< ::css_proto_converter::Ruleset*>(
      ::css_proto_converter::Ruleset::internal_default_instance());
  ::css_proto_converter::_NestedAtRule_default_instance_.media_ = const_cast< ::css_proto_converter::Media*>(
      ::css_proto_converter::Media::internal_default_instance());
  ::css_proto_converter::_NestedAtRule_default_instance_.page_ = const_cast< ::css_proto_converter::Page*>(
      ::css_proto_converter::Page::internal_default_instance());
  ::css_proto_converter::_NestedAtRule_default_instance_.font_face_ = const_cast< ::css_proto_converter::FontFace*>(
      ::css_proto_converter::FontFace::internal_default_instance());
  ::css_proto_converter::_NestedAtRule_default_instance_.viewport_ = const_cast< ::css_proto_converter::Viewport*>(
      ::css_proto_converter::Viewport::internal_default_instance());
  ::css_proto_converter::_NestedAtRule_default_instance_.supports_rule_ = const_cast< ::css_proto_converter::SupportsRule*>(
      ::css_proto_converter::SupportsRule::internal_default_instance());
}
void NestedAtRule::set_allocated_ruleset(::css_proto_converter::Ruleset* ruleset) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_rhs();
  if (ruleset) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ruleset = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ruleset, submessage_arena);
    }
    set_has_ruleset();
    rhs_.ruleset_ = ruleset;
  }
  // @@protoc_insertion_point(field_set_allocated:css_proto_converter.NestedAtRule.ruleset)
}
void NestedAtRule::set_allocated_media(::css_proto_converter::Media* media) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_rhs();
  if (media) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      media = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, media, submessage_arena);
    }
    set_has_media();
    rhs_.media_ = media;
  }
  // @@protoc_insertion_point(field_set_allocated:css_proto_converter.NestedAtRule.media)
}
void NestedAtRule::set_allocated_page(::css_proto_converter::Page* page) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_rhs();
  if (page) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      page = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, page, submessage_arena);
    }
    set_has_page();
    rhs_.page_ = page;
  }
  // @@protoc_insertion_point(field_set_allocated:css_proto_converter.NestedAtRule.page)
}
void NestedAtRule::set_allocated_font_face(::css_proto_converter::FontFace* font_face) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_rhs();
  if (font_face) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      font_face = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, font_face, submessage_arena);
    }
    set_has_font_face();
    rhs_.font_face_ = font_face;
  }
  // @@protoc_insertion_point(field_set_allocated:css_proto_converter.NestedAtRule.font_face)
}
void NestedAtRule::set_allocated_viewport(::css_proto_converter::Viewport* viewport) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_rhs();
  if (viewport) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      viewport = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, viewport, submessage_arena);
    }
    set_has_viewport();
    rhs_.viewport_ = viewport;
  }
  // @@protoc_insertion_point(field_set_allocated:css_proto_converter.NestedAtRule.viewport)
}
void NestedAtRule::set_allocated_supports_rule(::css_proto_converter::SupportsRule* supports_rule) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_rhs();
  if (supports_rule) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      supports_rule = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, supports_rule, submessage_arena);
    }
    set_has_supports_rule();
    rhs_.supports_rule_ = supports_rule;
  }
  // @@protoc_insertion_point(field_set_allocated:css_proto_converter.NestedAtRule.supports_rule)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NestedAtRule::kRulesetFieldNumber;
const int NestedAtRule::kMediaFieldNumber;
const int NestedAtRule::kPageFieldNumber;
const int NestedAtRule::kFontFaceFieldNumber;
const int NestedAtRule::kViewportFieldNumber;
const int NestedAtRule::kSupportsRuleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NestedAtRule::NestedAtRule()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_css_2eproto::scc_info_AtRuleOrRuleset.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:css_proto_converter.NestedAtRule)
}
NestedAtRule::NestedAtRule(const NestedAtRule& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_rhs();
  switch (from.rhs_case()) {
    case kRuleset: {
      mutable_ruleset()->::css_proto_converter::Ruleset::MergeFrom(from.ruleset());
      break;
    }
    case kMedia: {
      mutable_media()->::css_proto_converter::Media::MergeFrom(from.media());
      break;
    }
    case kPage: {
      mutable_page()->::css_proto_converter::Page::MergeFrom(from.page());
      break;
    }
    case kFontFace: {
      mutable_font_face()->::css_proto_converter::FontFace::MergeFrom(from.font_face());
      break;
    }
    case kViewport: {
      mutable_viewport()->::css_proto_converter::Viewport::MergeFrom(from.viewport());
      break;
    }
    case kSupportsRule: {
      mutable_supports_rule()->::css_proto_converter::SupportsRule::MergeFrom(from.supports_rule());
      break;
    }
    case RHS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:css_proto_converter.NestedAtRule)
}

void NestedAtRule::SharedCtor() {
  clear_has_rhs();
}

NestedAtRule::~NestedAtRule() {
  // @@protoc_insertion_point(destructor:css_proto_converter.NestedAtRule)
  SharedDtor();
}

void NestedAtRule::SharedDtor() {
  if (has_rhs()) {
    clear_rhs();
  }
}

void NestedAtRule::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* NestedAtRule::descriptor() {
  ::protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NestedAtRule& NestedAtRule::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_css_2eproto::scc_info_AtRuleOrRuleset.base);
  return *internal_default_instance();
}


void NestedAtRule::clear_rhs() {
// @@protoc_insertion_point(one_of_clear_start:css_proto_converter.NestedAtRule)
  switch (rhs_case()) {
    case kRuleset: {
      delete rhs_.ruleset_;
      break;
    }
    case kMedia: {
      delete rhs_.media_;
      break;
    }
    case kPage: {
      delete rhs_.page_;
      break;
    }
    case kFontFace: {
      delete rhs_.font_face_;
      break;
    }
    case kViewport: {
      delete rhs_.viewport_;
      break;
    }
    case kSupportsRule: {
      delete rhs_.supports_rule_;
      break;
    }
    case RHS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RHS_NOT_SET;
}


void NestedAtRule::Clear() {
// @@protoc_insertion_point(message_clear_start:css_proto_converter.NestedAtRule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_rhs();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NestedAtRule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:css_proto_converter.NestedAtRule)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .css_proto_converter.Ruleset ruleset = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ruleset()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .css_proto_converter.Media media = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_media()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .css_proto_converter.Page page = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_page()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .css_proto_converter.FontFace font_face = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_font_face()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .css_proto_converter.Viewport viewport = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_viewport()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .css_proto_converter.SupportsRule supports_rule = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_supports_rule()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:css_proto_converter.NestedAtRule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:css_proto_converter.NestedAtRule)
  return false;
#undef DO_
}

void NestedAtRule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:css_proto_converter.NestedAtRule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (rhs_case()) {
    case kRuleset:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        1, this->_internal_ruleset(), output);
      break;
    case kMedia:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, this->_internal_media(), output);
      break;
    case kPage:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        3, this->_internal_page(), output);
      break;
    case kFontFace:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        4, this->_internal_font_face(), output);
      break;
    case kViewport:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        5, this->_internal_viewport(), output);
      break;
    case kSupportsRule:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        6, this->_internal_supports_rule(), output);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:css_proto_converter.NestedAtRule)
}

::google::protobuf::uint8* NestedAtRule::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:css_proto_converter.NestedAtRule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (rhs_case()) {
    case kRuleset:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          1, this->_internal_ruleset(), deterministic, target);
      break;
    case kMedia:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          2, this->_internal_media(), deterministic, target);
      break;
    case kPage:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          3, this->_internal_page(), deterministic, target);
      break;
    case kFontFace:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          4, this->_internal_font_face(), deterministic, target);
      break;
    case kViewport:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          5, this->_internal_viewport(), deterministic, target);
      break;
    case kSupportsRule:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          6, this->_internal_supports_rule(), deterministic, target);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:css_proto_converter.NestedAtRule)
  return target;
}

size_t NestedAtRule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:css_proto_converter.NestedAtRule)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  switch (rhs_case()) {
    // optional .css_proto_converter.Ruleset ruleset = 1;
    case kRuleset: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *rhs_.ruleset_);
      break;
    }
    // optional .css_proto_converter.Media media = 2;
    case kMedia: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *rhs_.media_);
      break;
    }
    // optional .css_proto_converter.Page page = 3;
    case kPage: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *rhs_.page_);
      break;
    }
    // optional .css_proto_converter.FontFace font_face = 4;
    case kFontFace: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *rhs_.font_face_);
      break;
    }
    // optional .css_proto_converter.Viewport viewport = 5;
    case kViewport: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *rhs_.viewport_);
      break;
    }
    // optional .css_proto_converter.SupportsRule supports_rule = 6;
    case kSupportsRule: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *rhs_.supports_rule_);
      break;
    }
    case RHS_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NestedAtRule::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:css_proto_converter.NestedAtRule)
  GOOGLE_DCHECK_NE(&from, this);
  const NestedAtRule* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NestedAtRule>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:css_proto_converter.NestedAtRule)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:css_proto_converter.NestedAtRule)
    MergeFrom(*source);
  }
}

void NestedAtRule::MergeFrom(const NestedAtRule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:css_proto_converter.NestedAtRule)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.rhs_case()) {
    case kRuleset: {
      mutable_ruleset()->::css_proto_converter::Ruleset::MergeFrom(from.ruleset());
      break;
    }
    case kMedia: {
      mutable_media()->::css_proto_converter::Media::MergeFrom(from.media());
      break;
    }
    case kPage: {
      mutable_page()->::css_proto_converter::Page::MergeFrom(from.page());
      break;
    }
    case kFontFace: {
      mutable_font_face()->::css_proto_converter::FontFace::MergeFrom(from.font_face());
      break;
    }
    case kViewport: {
      mutable_viewport()->::css_proto_converter::Viewport::MergeFrom(from.viewport());
      break;
    }
    case kSupportsRule: {
      mutable_supports_rule()->::css_proto_converter::SupportsRule::MergeFrom(from.supports_rule());
      break;
    }
    case RHS_NOT_SET: {
      break;
    }
  }
}

void NestedAtRule::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:css_proto_converter.NestedAtRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NestedAtRule::CopyFrom(const NestedAtRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:css_proto_converter.NestedAtRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NestedAtRule::IsInitialized() const {
  switch (rhs_case()) {
    case kRuleset: {
      if (has_ruleset()) {
        if (!this->ruleset().IsInitialized()) return false;
      }
      break;
    }
    case kMedia: {
      if (has_media()) {
        if (!this->media().IsInitialized()) return false;
      }
      break;
    }
    case kPage: {
      if (has_page()) {
        if (!this->page().IsInitialized()) return false;
      }
      break;
    }
    case kFontFace: {
      break;
    }
    case kViewport: {
      if (has_viewport()) {
        if (!this->viewport().IsInitialized()) return false;
      }
      break;
    }
    case kSupportsRule: {
      if (has_supports_rule()) {
        if (!this->supports_rule().IsInitialized()) return false;
      }
      break;
    }
    case RHS_NOT_SET: {
      break;
    }
  }
  return true;
}

void NestedAtRule::Swap(NestedAtRule* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NestedAtRule::InternalSwap(NestedAtRule* other) {
  using std::swap;
  swap(rhs_, other->rhs_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata NestedAtRule::GetMetadata() const {
  protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SupportsRule::InitAsDefaultInstance() {
  ::css_proto_converter::_SupportsRule_default_instance_._instance.get_mutable()->supports_condition_ = const_cast< ::css_proto_converter::SupportsCondition*>(
      ::css_proto_converter::SupportsCondition::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SupportsRule::kSupportsConditionFieldNumber;
const int SupportsRule::kAtRuleOrRulesetsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SupportsRule::SupportsRule()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_css_2eproto::scc_info_AtRuleOrRuleset.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:css_proto_converter.SupportsRule)
}
SupportsRule::SupportsRule(const SupportsRule& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      at_rule_or_rulesets_(from.at_rule_or_rulesets_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_supports_condition()) {
    supports_condition_ = new ::css_proto_converter::SupportsCondition(*from.supports_condition_);
  } else {
    supports_condition_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:css_proto_converter.SupportsRule)
}

void SupportsRule::SharedCtor() {
  supports_condition_ = NULL;
}

SupportsRule::~SupportsRule() {
  // @@protoc_insertion_point(destructor:css_proto_converter.SupportsRule)
  SharedDtor();
}

void SupportsRule::SharedDtor() {
  if (this != internal_default_instance()) delete supports_condition_;
}

void SupportsRule::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SupportsRule::descriptor() {
  ::protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SupportsRule& SupportsRule::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_css_2eproto::scc_info_AtRuleOrRuleset.base);
  return *internal_default_instance();
}


void SupportsRule::Clear() {
// @@protoc_insertion_point(message_clear_start:css_proto_converter.SupportsRule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  at_rule_or_rulesets_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(supports_condition_ != NULL);
    supports_condition_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SupportsRule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:css_proto_converter.SupportsRule)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .css_proto_converter.SupportsCondition supports_condition = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_supports_condition()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .css_proto_converter.AtRuleOrRulesets at_rule_or_rulesets = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_at_rule_or_rulesets()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:css_proto_converter.SupportsRule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:css_proto_converter.SupportsRule)
  return false;
#undef DO_
}

void SupportsRule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:css_proto_converter.SupportsRule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .css_proto_converter.SupportsCondition supports_condition = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_supports_condition(), output);
  }

  // repeated .css_proto_converter.AtRuleOrRulesets at_rule_or_rulesets = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->at_rule_or_rulesets_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->at_rule_or_rulesets(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:css_proto_converter.SupportsRule)
}

::google::protobuf::uint8* SupportsRule::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:css_proto_converter.SupportsRule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .css_proto_converter.SupportsCondition supports_condition = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_supports_condition(), deterministic, target);
  }

  // repeated .css_proto_converter.AtRuleOrRulesets at_rule_or_rulesets = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->at_rule_or_rulesets_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->at_rule_or_rulesets(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:css_proto_converter.SupportsRule)
  return target;
}

size_t SupportsRule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:css_proto_converter.SupportsRule)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .css_proto_converter.SupportsCondition supports_condition = 1;
  if (has_supports_condition()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *supports_condition_);
  }
  // repeated .css_proto_converter.AtRuleOrRulesets at_rule_or_rulesets = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->at_rule_or_rulesets_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->at_rule_or_rulesets(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SupportsRule::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:css_proto_converter.SupportsRule)
  GOOGLE_DCHECK_NE(&from, this);
  const SupportsRule* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SupportsRule>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:css_proto_converter.SupportsRule)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:css_proto_converter.SupportsRule)
    MergeFrom(*source);
  }
}

void SupportsRule::MergeFrom(const SupportsRule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:css_proto_converter.SupportsRule)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  at_rule_or_rulesets_.MergeFrom(from.at_rule_or_rulesets_);
  if (from.has_supports_condition()) {
    mutable_supports_condition()->::css_proto_converter::SupportsCondition::MergeFrom(from.supports_condition());
  }
}

void SupportsRule::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:css_proto_converter.SupportsRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SupportsRule::CopyFrom(const SupportsRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:css_proto_converter.SupportsRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SupportsRule::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->at_rule_or_rulesets())) return false;
  if (has_supports_condition()) {
    if (!this->supports_condition_->IsInitialized()) return false;
  }
  return true;
}

void SupportsRule::Swap(SupportsRule* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SupportsRule::InternalSwap(SupportsRule* other) {
  using std::swap;
  CastToBase(&at_rule_or_rulesets_)->InternalSwap(CastToBase(&other->at_rule_or_rulesets_));
  swap(supports_condition_, other->supports_condition_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SupportsRule::GetMetadata() const {
  protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AtRuleOrRulesets::InitAsDefaultInstance() {
  ::css_proto_converter::_AtRuleOrRulesets_default_instance_._instance.get_mutable()->first_ = const_cast< ::css_proto_converter::AtRuleOrRuleset*>(
      ::css_proto_converter::AtRuleOrRuleset::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AtRuleOrRulesets::kFirstFieldNumber;
const int AtRuleOrRulesets::kLatersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AtRuleOrRulesets::AtRuleOrRulesets()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_css_2eproto::scc_info_AtRuleOrRuleset.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:css_proto_converter.AtRuleOrRulesets)
}
AtRuleOrRulesets::AtRuleOrRulesets(const AtRuleOrRulesets& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      laters_(from.laters_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_first()) {
    first_ = new ::css_proto_converter::AtRuleOrRuleset(*from.first_);
  } else {
    first_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:css_proto_converter.AtRuleOrRulesets)
}

void AtRuleOrRulesets::SharedCtor() {
  first_ = NULL;
}

AtRuleOrRulesets::~AtRuleOrRulesets() {
  // @@protoc_insertion_point(destructor:css_proto_converter.AtRuleOrRulesets)
  SharedDtor();
}

void AtRuleOrRulesets::SharedDtor() {
  if (this != internal_default_instance()) delete first_;
}

void AtRuleOrRulesets::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AtRuleOrRulesets::descriptor() {
  ::protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AtRuleOrRulesets& AtRuleOrRulesets::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_css_2eproto::scc_info_AtRuleOrRuleset.base);
  return *internal_default_instance();
}


void AtRuleOrRulesets::Clear() {
// @@protoc_insertion_point(message_clear_start:css_proto_converter.AtRuleOrRulesets)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  laters_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(first_ != NULL);
    first_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AtRuleOrRulesets::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:css_proto_converter.AtRuleOrRulesets)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .css_proto_converter.AtRuleOrRuleset first = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_first()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .css_proto_converter.AtRuleOrRuleset laters = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_laters()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:css_proto_converter.AtRuleOrRulesets)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:css_proto_converter.AtRuleOrRulesets)
  return false;
#undef DO_
}

void AtRuleOrRulesets::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:css_proto_converter.AtRuleOrRulesets)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .css_proto_converter.AtRuleOrRuleset first = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_first(), output);
  }

  // repeated .css_proto_converter.AtRuleOrRuleset laters = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->laters_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->laters(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:css_proto_converter.AtRuleOrRulesets)
}

::google::protobuf::uint8* AtRuleOrRulesets::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:css_proto_converter.AtRuleOrRulesets)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .css_proto_converter.AtRuleOrRuleset first = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_first(), deterministic, target);
  }

  // repeated .css_proto_converter.AtRuleOrRuleset laters = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->laters_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->laters(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:css_proto_converter.AtRuleOrRulesets)
  return target;
}

size_t AtRuleOrRulesets::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:css_proto_converter.AtRuleOrRulesets)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .css_proto_converter.AtRuleOrRuleset first = 1;
  if (has_first()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *first_);
  }
  // repeated .css_proto_converter.AtRuleOrRuleset laters = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->laters_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->laters(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AtRuleOrRulesets::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:css_proto_converter.AtRuleOrRulesets)
  GOOGLE_DCHECK_NE(&from, this);
  const AtRuleOrRulesets* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AtRuleOrRulesets>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:css_proto_converter.AtRuleOrRulesets)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:css_proto_converter.AtRuleOrRulesets)
    MergeFrom(*source);
  }
}

void AtRuleOrRulesets::MergeFrom(const AtRuleOrRulesets& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:css_proto_converter.AtRuleOrRulesets)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  laters_.MergeFrom(from.laters_);
  if (from.has_first()) {
    mutable_first()->::css_proto_converter::AtRuleOrRuleset::MergeFrom(from.first());
  }
}

void AtRuleOrRulesets::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:css_proto_converter.AtRuleOrRulesets)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AtRuleOrRulesets::CopyFrom(const AtRuleOrRulesets& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:css_proto_converter.AtRuleOrRulesets)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AtRuleOrRulesets::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->laters())) return false;
  if (has_first()) {
    if (!this->first_->IsInitialized()) return false;
  }
  return true;
}

void AtRuleOrRulesets::Swap(AtRuleOrRulesets* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AtRuleOrRulesets::InternalSwap(AtRuleOrRulesets* other) {
  using std::swap;
  CastToBase(&laters_)->InternalSwap(CastToBase(&other->laters_));
  swap(first_, other->first_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AtRuleOrRulesets::GetMetadata() const {
  protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AtRuleOrRuleset::InitAsDefaultInstance() {
  ::css_proto_converter::_AtRuleOrRuleset_default_instance_._instance.get_mutable()->ruleset_ = const_cast< ::css_proto_converter::Ruleset*>(
      ::css_proto_converter::Ruleset::internal_default_instance());
  ::css_proto_converter::_AtRuleOrRuleset_default_instance_._instance.get_mutable()->at_rule_ = const_cast< ::css_proto_converter::NestedAtRule*>(
      ::css_proto_converter::NestedAtRule::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AtRuleOrRuleset::kRulesetFieldNumber;
const int AtRuleOrRuleset::kAtRuleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AtRuleOrRuleset::AtRuleOrRuleset()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_css_2eproto::scc_info_AtRuleOrRuleset.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:css_proto_converter.AtRuleOrRuleset)
}
AtRuleOrRuleset::AtRuleOrRuleset(const AtRuleOrRuleset& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ruleset()) {
    ruleset_ = new ::css_proto_converter::Ruleset(*from.ruleset_);
  } else {
    ruleset_ = NULL;
  }
  if (from.has_at_rule()) {
    at_rule_ = new ::css_proto_converter::NestedAtRule(*from.at_rule_);
  } else {
    at_rule_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:css_proto_converter.AtRuleOrRuleset)
}

void AtRuleOrRuleset::SharedCtor() {
  ::memset(&ruleset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&at_rule_) -
      reinterpret_cast<char*>(&ruleset_)) + sizeof(at_rule_));
}

AtRuleOrRuleset::~AtRuleOrRuleset() {
  // @@protoc_insertion_point(destructor:css_proto_converter.AtRuleOrRuleset)
  SharedDtor();
}

void AtRuleOrRuleset::SharedDtor() {
  if (this != internal_default_instance()) delete ruleset_;
  if (this != internal_default_instance()) delete at_rule_;
}

void AtRuleOrRuleset::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AtRuleOrRuleset::descriptor() {
  ::protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AtRuleOrRuleset& AtRuleOrRuleset::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_css_2eproto::scc_info_AtRuleOrRuleset.base);
  return *internal_default_instance();
}


void AtRuleOrRuleset::Clear() {
// @@protoc_insertion_point(message_clear_start:css_proto_converter.AtRuleOrRuleset)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(ruleset_ != NULL);
      ruleset_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(at_rule_ != NULL);
      at_rule_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AtRuleOrRuleset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:css_proto_converter.AtRuleOrRuleset)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .css_proto_converter.Ruleset ruleset = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ruleset()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .css_proto_converter.NestedAtRule at_rule = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_at_rule()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:css_proto_converter.AtRuleOrRuleset)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:css_proto_converter.AtRuleOrRuleset)
  return false;
#undef DO_
}

void AtRuleOrRuleset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:css_proto_converter.AtRuleOrRuleset)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .css_proto_converter.Ruleset ruleset = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_ruleset(), output);
  }

  // optional .css_proto_converter.NestedAtRule at_rule = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_at_rule(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:css_proto_converter.AtRuleOrRuleset)
}

::google::protobuf::uint8* AtRuleOrRuleset::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:css_proto_converter.AtRuleOrRuleset)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .css_proto_converter.Ruleset ruleset = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_ruleset(), deterministic, target);
  }

  // optional .css_proto_converter.NestedAtRule at_rule = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_at_rule(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:css_proto_converter.AtRuleOrRuleset)
  return target;
}

size_t AtRuleOrRuleset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:css_proto_converter.AtRuleOrRuleset)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .css_proto_converter.Ruleset ruleset = 1;
  if (has_ruleset()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ruleset_);
  }
  // optional .css_proto_converter.NestedAtRule at_rule = 2;
  if (has_at_rule()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *at_rule_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AtRuleOrRuleset::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:css_proto_converter.AtRuleOrRuleset)
  GOOGLE_DCHECK_NE(&from, this);
  const AtRuleOrRuleset* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AtRuleOrRuleset>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:css_proto_converter.AtRuleOrRuleset)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:css_proto_converter.AtRuleOrRuleset)
    MergeFrom(*source);
  }
}

void AtRuleOrRuleset::MergeFrom(const AtRuleOrRuleset& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:css_proto_converter.AtRuleOrRuleset)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_ruleset()->::css_proto_converter::Ruleset::MergeFrom(from.ruleset());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_at_rule()->::css_proto_converter::NestedAtRule::MergeFrom(from.at_rule());
    }
  }
}

void AtRuleOrRuleset::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:css_proto_converter.AtRuleOrRuleset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AtRuleOrRuleset::CopyFrom(const AtRuleOrRuleset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:css_proto_converter.AtRuleOrRuleset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AtRuleOrRuleset::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_ruleset()) {
    if (!this->ruleset_->IsInitialized()) return false;
  }
  if (has_at_rule()) {
    if (!this->at_rule_->IsInitialized()) return false;
  }
  return true;
}

void AtRuleOrRuleset::Swap(AtRuleOrRuleset* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AtRuleOrRuleset::InternalSwap(AtRuleOrRuleset* other) {
  using std::swap;
  swap(ruleset_, other->ruleset_);
  swap(at_rule_, other->at_rule_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AtRuleOrRuleset::GetMetadata() const {
  protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SupportsCondition::InitAsDefaultInstance() {
  ::css_proto_converter::_SupportsCondition_default_instance_._instance.get_mutable()->property_and_value_ = const_cast< ::css_proto_converter::PropertyAndValue*>(
      ::css_proto_converter::PropertyAndValue::internal_default_instance());
  ::css_proto_converter::_SupportsCondition_default_instance_.and_supports_condition_ = const_cast< ::css_proto_converter::BinarySupportsCondition*>(
      ::css_proto_converter::BinarySupportsCondition::internal_default_instance());
  ::css_proto_converter::_SupportsCondition_default_instance_.or_supports_condition_ = const_cast< ::css_proto_converter::BinarySupportsCondition*>(
      ::css_proto_converter::BinarySupportsCondition::internal_default_instance());
}
void SupportsCondition::set_allocated_and_supports_condition(::css_proto_converter::BinarySupportsCondition* and_supports_condition) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_rhs();
  if (and_supports_condition) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      and_supports_condition = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, and_supports_condition, submessage_arena);
    }
    set_has_and_supports_condition();
    rhs_.and_supports_condition_ = and_supports_condition;
  }
  // @@protoc_insertion_point(field_set_allocated:css_proto_converter.SupportsCondition.and_supports_condition)
}
void SupportsCondition::set_allocated_or_supports_condition(::css_proto_converter::BinarySupportsCondition* or_supports_condition) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_rhs();
  if (or_supports_condition) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      or_supports_condition = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, or_supports_condition, submessage_arena);
    }
    set_has_or_supports_condition();
    rhs_.or_supports_condition_ = or_supports_condition;
  }
  // @@protoc_insertion_point(field_set_allocated:css_proto_converter.SupportsCondition.or_supports_condition)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SupportsCondition::kPropertyAndValueFieldNumber;
const int SupportsCondition::kNotConditionFieldNumber;
const int SupportsCondition::kAndSupportsConditionFieldNumber;
const int SupportsCondition::kOrSupportsConditionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SupportsCondition::SupportsCondition()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_css_2eproto::scc_info_BinarySupportsCondition.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:css_proto_converter.SupportsCondition)
}
SupportsCondition::SupportsCondition(const SupportsCondition& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_property_and_value()) {
    property_and_value_ = new ::css_proto_converter::PropertyAndValue(*from.property_and_value_);
  } else {
    property_and_value_ = NULL;
  }
  not_condition_ = from.not_condition_;
  clear_has_rhs();
  switch (from.rhs_case()) {
    case kAndSupportsCondition: {
      mutable_and_supports_condition()->::css_proto_converter::BinarySupportsCondition::MergeFrom(from.and_supports_condition());
      break;
    }
    case kOrSupportsCondition: {
      mutable_or_supports_condition()->::css_proto_converter::BinarySupportsCondition::MergeFrom(from.or_supports_condition());
      break;
    }
    case RHS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:css_proto_converter.SupportsCondition)
}

void SupportsCondition::SharedCtor() {
  ::memset(&property_and_value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&not_condition_) -
      reinterpret_cast<char*>(&property_and_value_)) + sizeof(not_condition_));
  clear_has_rhs();
}

SupportsCondition::~SupportsCondition() {
  // @@protoc_insertion_point(destructor:css_proto_converter.SupportsCondition)
  SharedDtor();
}

void SupportsCondition::SharedDtor() {
  if (this != internal_default_instance()) delete property_and_value_;
  if (has_rhs()) {
    clear_rhs();
  }
}

void SupportsCondition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SupportsCondition::descriptor() {
  ::protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SupportsCondition& SupportsCondition::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_css_2eproto::scc_info_BinarySupportsCondition.base);
  return *internal_default_instance();
}


void SupportsCondition::clear_rhs() {
// @@protoc_insertion_point(one_of_clear_start:css_proto_converter.SupportsCondition)
  switch (rhs_case()) {
    case kAndSupportsCondition: {
      delete rhs_.and_supports_condition_;
      break;
    }
    case kOrSupportsCondition: {
      delete rhs_.or_supports_condition_;
      break;
    }
    case RHS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RHS_NOT_SET;
}


void SupportsCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:css_proto_converter.SupportsCondition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(property_and_value_ != NULL);
    property_and_value_->Clear();
  }
  not_condition_ = false;
  clear_rhs();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SupportsCondition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:css_proto_converter.SupportsCondition)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .css_proto_converter.PropertyAndValue property_and_value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_property_and_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool not_condition = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_not_condition();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &not_condition_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .css_proto_converter.BinarySupportsCondition and_supports_condition = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_and_supports_condition()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .css_proto_converter.BinarySupportsCondition or_supports_condition = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_or_supports_condition()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:css_proto_converter.SupportsCondition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:css_proto_converter.SupportsCondition)
  return false;
#undef DO_
}

void SupportsCondition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:css_proto_converter.SupportsCondition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .css_proto_converter.PropertyAndValue property_and_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_property_and_value(), output);
  }

  // required bool not_condition = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->not_condition(), output);
  }

  switch (rhs_case()) {
    case kAndSupportsCondition:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        3, this->_internal_and_supports_condition(), output);
      break;
    case kOrSupportsCondition:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        4, this->_internal_or_supports_condition(), output);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:css_proto_converter.SupportsCondition)
}

::google::protobuf::uint8* SupportsCondition::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:css_proto_converter.SupportsCondition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .css_proto_converter.PropertyAndValue property_and_value = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_property_and_value(), deterministic, target);
  }

  // required bool not_condition = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->not_condition(), target);
  }

  switch (rhs_case()) {
    case kAndSupportsCondition:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          3, this->_internal_and_supports_condition(), deterministic, target);
      break;
    case kOrSupportsCondition:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          4, this->_internal_or_supports_condition(), deterministic, target);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:css_proto_converter.SupportsCondition)
  return target;
}

size_t SupportsCondition::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:css_proto_converter.SupportsCondition)
  size_t total_size = 0;

  if (has_property_and_value()) {
    // required .css_proto_converter.PropertyAndValue property_and_value = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *property_and_value_);
  }

  if (has_not_condition()) {
    // required bool not_condition = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t SupportsCondition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:css_proto_converter.SupportsCondition)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .css_proto_converter.PropertyAndValue property_and_value = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *property_and_value_);

    // required bool not_condition = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  switch (rhs_case()) {
    // optional .css_proto_converter.BinarySupportsCondition and_supports_condition = 3;
    case kAndSupportsCondition: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *rhs_.and_supports_condition_);
      break;
    }
    // optional .css_proto_converter.BinarySupportsCondition or_supports_condition = 4;
    case kOrSupportsCondition: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *rhs_.or_supports_condition_);
      break;
    }
    case RHS_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SupportsCondition::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:css_proto_converter.SupportsCondition)
  GOOGLE_DCHECK_NE(&from, this);
  const SupportsCondition* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SupportsCondition>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:css_proto_converter.SupportsCondition)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:css_proto_converter.SupportsCondition)
    MergeFrom(*source);
  }
}

void SupportsCondition::MergeFrom(const SupportsCondition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:css_proto_converter.SupportsCondition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_property_and_value()->::css_proto_converter::PropertyAndValue::MergeFrom(from.property_and_value());
    }
    if (cached_has_bits & 0x00000002u) {
      not_condition_ = from.not_condition_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  switch (from.rhs_case()) {
    case kAndSupportsCondition: {
      mutable_and_supports_condition()->::css_proto_converter::BinarySupportsCondition::MergeFrom(from.and_supports_condition());
      break;
    }
    case kOrSupportsCondition: {
      mutable_or_supports_condition()->::css_proto_converter::BinarySupportsCondition::MergeFrom(from.or_supports_condition());
      break;
    }
    case RHS_NOT_SET: {
      break;
    }
  }
}

void SupportsCondition::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:css_proto_converter.SupportsCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SupportsCondition::CopyFrom(const SupportsCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:css_proto_converter.SupportsCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SupportsCondition::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_property_and_value()) {
    if (!this->property_and_value_->IsInitialized()) return false;
  }
  switch (rhs_case()) {
    case kAndSupportsCondition: {
      if (has_and_supports_condition()) {
        if (!this->and_supports_condition().IsInitialized()) return false;
      }
      break;
    }
    case kOrSupportsCondition: {
      if (has_or_supports_condition()) {
        if (!this->or_supports_condition().IsInitialized()) return false;
      }
      break;
    }
    case RHS_NOT_SET: {
      break;
    }
  }
  return true;
}

void SupportsCondition::Swap(SupportsCondition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SupportsCondition::InternalSwap(SupportsCondition* other) {
  using std::swap;
  swap(property_and_value_, other->property_and_value_);
  swap(not_condition_, other->not_condition_);
  swap(rhs_, other->rhs_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SupportsCondition::GetMetadata() const {
  protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BinarySupportsCondition::InitAsDefaultInstance() {
  ::css_proto_converter::_BinarySupportsCondition_default_instance_._instance.get_mutable()->condition_1_ = const_cast< ::css_proto_converter::SupportsCondition*>(
      ::css_proto_converter::SupportsCondition::internal_default_instance());
  ::css_proto_converter::_BinarySupportsCondition_default_instance_._instance.get_mutable()->condition_2_ = const_cast< ::css_proto_converter::SupportsCondition*>(
      ::css_proto_converter::SupportsCondition::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BinarySupportsCondition::kCondition1FieldNumber;
const int BinarySupportsCondition::kCondition2FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BinarySupportsCondition::BinarySupportsCondition()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_css_2eproto::scc_info_BinarySupportsCondition.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:css_proto_converter.BinarySupportsCondition)
}
BinarySupportsCondition::BinarySupportsCondition(const BinarySupportsCondition& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_condition_1()) {
    condition_1_ = new ::css_proto_converter::SupportsCondition(*from.condition_1_);
  } else {
    condition_1_ = NULL;
  }
  if (from.has_condition_2()) {
    condition_2_ = new ::css_proto_converter::SupportsCondition(*from.condition_2_);
  } else {
    condition_2_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:css_proto_converter.BinarySupportsCondition)
}

void BinarySupportsCondition::SharedCtor() {
  ::memset(&condition_1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&condition_2_) -
      reinterpret_cast<char*>(&condition_1_)) + sizeof(condition_2_));
}

BinarySupportsCondition::~BinarySupportsCondition() {
  // @@protoc_insertion_point(destructor:css_proto_converter.BinarySupportsCondition)
  SharedDtor();
}

void BinarySupportsCondition::SharedDtor() {
  if (this != internal_default_instance()) delete condition_1_;
  if (this != internal_default_instance()) delete condition_2_;
}

void BinarySupportsCondition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* BinarySupportsCondition::descriptor() {
  ::protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BinarySupportsCondition& BinarySupportsCondition::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_css_2eproto::scc_info_BinarySupportsCondition.base);
  return *internal_default_instance();
}


void BinarySupportsCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:css_proto_converter.BinarySupportsCondition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(condition_1_ != NULL);
      condition_1_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(condition_2_ != NULL);
      condition_2_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BinarySupportsCondition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:css_proto_converter.BinarySupportsCondition)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .css_proto_converter.SupportsCondition condition_1 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_condition_1()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .css_proto_converter.SupportsCondition condition_2 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_condition_2()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:css_proto_converter.BinarySupportsCondition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:css_proto_converter.BinarySupportsCondition)
  return false;
#undef DO_
}

void BinarySupportsCondition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:css_proto_converter.BinarySupportsCondition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .css_proto_converter.SupportsCondition condition_1 = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_condition_1(), output);
  }

  // required .css_proto_converter.SupportsCondition condition_2 = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_condition_2(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:css_proto_converter.BinarySupportsCondition)
}

::google::protobuf::uint8* BinarySupportsCondition::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:css_proto_converter.BinarySupportsCondition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .css_proto_converter.SupportsCondition condition_1 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_condition_1(), deterministic, target);
  }

  // required .css_proto_converter.SupportsCondition condition_2 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_condition_2(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:css_proto_converter.BinarySupportsCondition)
  return target;
}

size_t BinarySupportsCondition::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:css_proto_converter.BinarySupportsCondition)
  size_t total_size = 0;

  if (has_condition_1()) {
    // required .css_proto_converter.SupportsCondition condition_1 = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *condition_1_);
  }

  if (has_condition_2()) {
    // required .css_proto_converter.SupportsCondition condition_2 = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *condition_2_);
  }

  return total_size;
}
size_t BinarySupportsCondition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:css_proto_converter.BinarySupportsCondition)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .css_proto_converter.SupportsCondition condition_1 = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *condition_1_);

    // required .css_proto_converter.SupportsCondition condition_2 = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *condition_2_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BinarySupportsCondition::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:css_proto_converter.BinarySupportsCondition)
  GOOGLE_DCHECK_NE(&from, this);
  const BinarySupportsCondition* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BinarySupportsCondition>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:css_proto_converter.BinarySupportsCondition)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:css_proto_converter.BinarySupportsCondition)
    MergeFrom(*source);
  }
}

void BinarySupportsCondition::MergeFrom(const BinarySupportsCondition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:css_proto_converter.BinarySupportsCondition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_condition_1()->::css_proto_converter::SupportsCondition::MergeFrom(from.condition_1());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_condition_2()->::css_proto_converter::SupportsCondition::MergeFrom(from.condition_2());
    }
  }
}

void BinarySupportsCondition::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:css_proto_converter.BinarySupportsCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BinarySupportsCondition::CopyFrom(const BinarySupportsCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:css_proto_converter.BinarySupportsCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinarySupportsCondition::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_condition_1()) {
    if (!this->condition_1_->IsInitialized()) return false;
  }
  if (has_condition_2()) {
    if (!this->condition_2_->IsInitialized()) return false;
  }
  return true;
}

void BinarySupportsCondition::Swap(BinarySupportsCondition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BinarySupportsCondition::InternalSwap(BinarySupportsCondition* other) {
  using std::swap;
  swap(condition_1_, other->condition_1_);
  swap(condition_2_, other->condition_2_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata BinarySupportsCondition::GetMetadata() const {
  protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Viewport::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Viewport::kPropertiesAndValuesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Viewport::Viewport()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_css_2eproto::scc_info_Viewport.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:css_proto_converter.Viewport)
}
Viewport::Viewport(const Viewport& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      properties_and_values_(from.properties_and_values_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:css_proto_converter.Viewport)
}

void Viewport::SharedCtor() {
}

Viewport::~Viewport() {
  // @@protoc_insertion_point(destructor:css_proto_converter.Viewport)
  SharedDtor();
}

void Viewport::SharedDtor() {
}

void Viewport::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Viewport::descriptor() {
  ::protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Viewport& Viewport::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_css_2eproto::scc_info_Viewport.base);
  return *internal_default_instance();
}


void Viewport::Clear() {
// @@protoc_insertion_point(message_clear_start:css_proto_converter.Viewport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  properties_and_values_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Viewport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:css_proto_converter.Viewport)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .css_proto_converter.ViewportPropertyAndValue properties_and_values = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_properties_and_values()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:css_proto_converter.Viewport)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:css_proto_converter.Viewport)
  return false;
#undef DO_
}

void Viewport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:css_proto_converter.Viewport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .css_proto_converter.ViewportPropertyAndValue properties_and_values = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->properties_and_values_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->properties_and_values(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:css_proto_converter.Viewport)
}

::google::protobuf::uint8* Viewport::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:css_proto_converter.Viewport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .css_proto_converter.ViewportPropertyAndValue properties_and_values = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->properties_and_values_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->properties_and_values(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:css_proto_converter.Viewport)
  return target;
}

size_t Viewport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:css_proto_converter.Viewport)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .css_proto_converter.ViewportPropertyAndValue properties_and_values = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->properties_and_values_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->properties_and_values(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Viewport::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:css_proto_converter.Viewport)
  GOOGLE_DCHECK_NE(&from, this);
  const Viewport* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Viewport>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:css_proto_converter.Viewport)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:css_proto_converter.Viewport)
    MergeFrom(*source);
  }
}

void Viewport::MergeFrom(const Viewport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:css_proto_converter.Viewport)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  properties_and_values_.MergeFrom(from.properties_and_values_);
}

void Viewport::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:css_proto_converter.Viewport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Viewport::CopyFrom(const Viewport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:css_proto_converter.Viewport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Viewport::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->properties_and_values())) return false;
  return true;
}

void Viewport::Swap(Viewport* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Viewport::InternalSwap(Viewport* other) {
  using std::swap;
  CastToBase(&properties_and_values_)->InternalSwap(CastToBase(&other->properties_and_values_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Viewport::GetMetadata() const {
  protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ViewportPropertyAndValue::InitAsDefaultInstance() {
  ::css_proto_converter::_ViewportPropertyAndValue_default_instance_._instance.get_mutable()->property_ = const_cast< ::css_proto_converter::ViewportProperty*>(
      ::css_proto_converter::ViewportProperty::internal_default_instance());
  ::css_proto_converter::_ViewportPropertyAndValue_default_instance_._instance.get_mutable()->value_ = const_cast< ::css_proto_converter::ViewportValue*>(
      ::css_proto_converter::ViewportValue::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ViewportPropertyAndValue::kPropertyFieldNumber;
const int ViewportPropertyAndValue::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ViewportPropertyAndValue::ViewportPropertyAndValue()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_css_2eproto::scc_info_ViewportPropertyAndValue.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:css_proto_converter.ViewportPropertyAndValue)
}
ViewportPropertyAndValue::ViewportPropertyAndValue(const ViewportPropertyAndValue& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_property()) {
    property_ = new ::css_proto_converter::ViewportProperty(*from.property_);
  } else {
    property_ = NULL;
  }
  if (from.has_value()) {
    value_ = new ::css_proto_converter::ViewportValue(*from.value_);
  } else {
    value_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:css_proto_converter.ViewportPropertyAndValue)
}

void ViewportPropertyAndValue::SharedCtor() {
  ::memset(&property_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&property_)) + sizeof(value_));
}

ViewportPropertyAndValue::~ViewportPropertyAndValue() {
  // @@protoc_insertion_point(destructor:css_proto_converter.ViewportPropertyAndValue)
  SharedDtor();
}

void ViewportPropertyAndValue::SharedDtor() {
  if (this != internal_default_instance()) delete property_;
  if (this != internal_default_instance()) delete value_;
}

void ViewportPropertyAndValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ViewportPropertyAndValue::descriptor() {
  ::protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ViewportPropertyAndValue& ViewportPropertyAndValue::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_css_2eproto::scc_info_ViewportPropertyAndValue.base);
  return *internal_default_instance();
}


void ViewportPropertyAndValue::Clear() {
// @@protoc_insertion_point(message_clear_start:css_proto_converter.ViewportPropertyAndValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(property_ != NULL);
      property_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(value_ != NULL);
      value_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ViewportPropertyAndValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:css_proto_converter.ViewportPropertyAndValue)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .css_proto_converter.ViewportProperty property = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_property()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .css_proto_converter.ViewportValue value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:css_proto_converter.ViewportPropertyAndValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:css_proto_converter.ViewportPropertyAndValue)
  return false;
#undef DO_
}

void ViewportPropertyAndValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:css_proto_converter.ViewportPropertyAndValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .css_proto_converter.ViewportProperty property = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_property(), output);
  }

  // required .css_proto_converter.ViewportValue value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:css_proto_converter.ViewportPropertyAndValue)
}

::google::protobuf::uint8* ViewportPropertyAndValue::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:css_proto_converter.ViewportPropertyAndValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .css_proto_converter.ViewportProperty property = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_property(), deterministic, target);
  }

  // required .css_proto_converter.ViewportValue value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_value(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:css_proto_converter.ViewportPropertyAndValue)
  return target;
}

size_t ViewportPropertyAndValue::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:css_proto_converter.ViewportPropertyAndValue)
  size_t total_size = 0;

  if (has_property()) {
    // required .css_proto_converter.ViewportProperty property = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *property_);
  }

  if (has_value()) {
    // required .css_proto_converter.ViewportValue value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *value_);
  }

  return total_size;
}
size_t ViewportPropertyAndValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:css_proto_converter.ViewportPropertyAndValue)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .css_proto_converter.ViewportProperty property = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *property_);

    // required .css_proto_converter.ViewportValue value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *value_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ViewportPropertyAndValue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:css_proto_converter.ViewportPropertyAndValue)
  GOOGLE_DCHECK_NE(&from, this);
  const ViewportPropertyAndValue* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ViewportPropertyAndValue>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:css_proto_converter.ViewportPropertyAndValue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:css_proto_converter.ViewportPropertyAndValue)
    MergeFrom(*source);
  }
}

void ViewportPropertyAndValue::MergeFrom(const ViewportPropertyAndValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:css_proto_converter.ViewportPropertyAndValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_property()->::css_proto_converter::ViewportProperty::MergeFrom(from.property());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_value()->::css_proto_converter::ViewportValue::MergeFrom(from.value());
    }
  }
}

void ViewportPropertyAndValue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:css_proto_converter.ViewportPropertyAndValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ViewportPropertyAndValue::CopyFrom(const ViewportPropertyAndValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:css_proto_converter.ViewportPropertyAndValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ViewportPropertyAndValue::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_property()) {
    if (!this->property_->IsInitialized()) return false;
  }
  if (has_value()) {
    if (!this->value_->IsInitialized()) return false;
  }
  return true;
}

void ViewportPropertyAndValue::Swap(ViewportPropertyAndValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ViewportPropertyAndValue::InternalSwap(ViewportPropertyAndValue* other) {
  using std::swap;
  swap(property_, other->property_);
  swap(value_, other->value_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ViewportPropertyAndValue::GetMetadata() const {
  protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ViewportProperty::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ViewportProperty::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ViewportProperty::ViewportProperty()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_css_2eproto::scc_info_ViewportProperty.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:css_proto_converter.ViewportProperty)
}
ViewportProperty::ViewportProperty(const ViewportProperty& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:css_proto_converter.ViewportProperty)
}

void ViewportProperty::SharedCtor() {
  id_ = 1;
}

ViewportProperty::~ViewportProperty() {
  // @@protoc_insertion_point(destructor:css_proto_converter.ViewportProperty)
  SharedDtor();
}

void ViewportProperty::SharedDtor() {
}

void ViewportProperty::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ViewportProperty::descriptor() {
  ::protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ViewportProperty& ViewportProperty::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_css_2eproto::scc_info_ViewportProperty.base);
  return *internal_default_instance();
}


void ViewportProperty::Clear() {
// @@protoc_insertion_point(message_clear_start:css_proto_converter.ViewportProperty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ViewportProperty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:css_proto_converter.ViewportProperty)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .css_proto_converter.ViewportProperty.PropertyId id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::css_proto_converter::ViewportProperty_PropertyId_IsValid(value)) {
            set_id(static_cast< ::css_proto_converter::ViewportProperty_PropertyId >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:css_proto_converter.ViewportProperty)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:css_proto_converter.ViewportProperty)
  return false;
#undef DO_
}

void ViewportProperty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:css_proto_converter.ViewportProperty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .css_proto_converter.ViewportProperty.PropertyId id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:css_proto_converter.ViewportProperty)
}

::google::protobuf::uint8* ViewportProperty::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:css_proto_converter.ViewportProperty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .css_proto_converter.ViewportProperty.PropertyId id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:css_proto_converter.ViewportProperty)
  return target;
}

size_t ViewportProperty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:css_proto_converter.ViewportProperty)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .css_proto_converter.ViewportProperty.PropertyId id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->id());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ViewportProperty::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:css_proto_converter.ViewportProperty)
  GOOGLE_DCHECK_NE(&from, this);
  const ViewportProperty* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ViewportProperty>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:css_proto_converter.ViewportProperty)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:css_proto_converter.ViewportProperty)
    MergeFrom(*source);
  }
}

void ViewportProperty::MergeFrom(const ViewportProperty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:css_proto_converter.ViewportProperty)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_id()) {
    set_id(from.id());
  }
}

void ViewportProperty::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:css_proto_converter.ViewportProperty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ViewportProperty::CopyFrom(const ViewportProperty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:css_proto_converter.ViewportProperty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ViewportProperty::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void ViewportProperty::Swap(ViewportProperty* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ViewportProperty::InternalSwap(ViewportProperty* other) {
  using std::swap;
  swap(id_, other->id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ViewportProperty::GetMetadata() const {
  protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ViewportValue::InitAsDefaultInstance() {
  ::css_proto_converter::_ViewportValue_default_instance_.length_ = const_cast< ::css_proto_converter::Length*>(
      ::css_proto_converter::Length::internal_default_instance());
  ::css_proto_converter::_ViewportValue_default_instance_.num_ = const_cast< ::css_proto_converter::Num*>(
      ::css_proto_converter::Num::internal_default_instance());
}
void ViewportValue::set_allocated_length(::css_proto_converter::Length* length) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_rhs();
  if (length) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      length = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, length, submessage_arena);
    }
    set_has_length();
    rhs_.length_ = length;
  }
  // @@protoc_insertion_point(field_set_allocated:css_proto_converter.ViewportValue.length)
}
void ViewportValue::set_allocated_num(::css_proto_converter::Num* num) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_rhs();
  if (num) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      num = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, num, submessage_arena);
    }
    set_has_num();
    rhs_.num_ = num;
  }
  // @@protoc_insertion_point(field_set_allocated:css_proto_converter.ViewportValue.num)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ViewportValue::kValueIdFieldNumber;
const int ViewportValue::kLengthFieldNumber;
const int ViewportValue::kNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ViewportValue::ViewportValue()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_css_2eproto::scc_info_ViewportValue.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:css_proto_converter.ViewportValue)
}
ViewportValue::ViewportValue(const ViewportValue& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_id_ = from.value_id_;
  clear_has_rhs();
  switch (from.rhs_case()) {
    case kLength: {
      mutable_length()->::css_proto_converter::Length::MergeFrom(from.length());
      break;
    }
    case kNum: {
      mutable_num()->::css_proto_converter::Num::MergeFrom(from.num());
      break;
    }
    case RHS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:css_proto_converter.ViewportValue)
}

void ViewportValue::SharedCtor() {
  value_id_ = 1;
  clear_has_rhs();
}

ViewportValue::~ViewportValue() {
  // @@protoc_insertion_point(destructor:css_proto_converter.ViewportValue)
  SharedDtor();
}

void ViewportValue::SharedDtor() {
  if (has_rhs()) {
    clear_rhs();
  }
}

void ViewportValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ViewportValue::descriptor() {
  ::protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ViewportValue& ViewportValue::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_css_2eproto::scc_info_ViewportValue.base);
  return *internal_default_instance();
}


void ViewportValue::clear_rhs() {
// @@protoc_insertion_point(one_of_clear_start:css_proto_converter.ViewportValue)
  switch (rhs_case()) {
    case kLength: {
      delete rhs_.length_;
      break;
    }
    case kNum: {
      delete rhs_.num_;
      break;
    }
    case RHS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RHS_NOT_SET;
}


void ViewportValue::Clear() {
// @@protoc_insertion_point(message_clear_start:css_proto_converter.ViewportValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_id_ = 1;
  clear_rhs();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ViewportValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:css_proto_converter.ViewportValue)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .css_proto_converter.ViewportValue.ValueId value_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::css_proto_converter::ViewportValue_ValueId_IsValid(value)) {
            set_value_id(static_cast< ::css_proto_converter::ViewportValue_ValueId >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .css_proto_converter.Length length = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_length()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .css_proto_converter.Num num = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_num()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:css_proto_converter.ViewportValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:css_proto_converter.ViewportValue)
  return false;
#undef DO_
}

void ViewportValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:css_proto_converter.ViewportValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .css_proto_converter.ViewportValue.ValueId value_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->value_id(), output);
  }

  switch (rhs_case()) {
    case kLength:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, this->_internal_length(), output);
      break;
    case kNum:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        3, this->_internal_num(), output);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:css_proto_converter.ViewportValue)
}

::google::protobuf::uint8* ViewportValue::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:css_proto_converter.ViewportValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .css_proto_converter.ViewportValue.ValueId value_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->value_id(), target);
  }

  switch (rhs_case()) {
    case kLength:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          2, this->_internal_length(), deterministic, target);
      break;
    case kNum:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          3, this->_internal_num(), deterministic, target);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:css_proto_converter.ViewportValue)
  return target;
}

size_t ViewportValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:css_proto_converter.ViewportValue)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .css_proto_converter.ViewportValue.ValueId value_id = 1;
  if (has_value_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->value_id());
  }
  switch (rhs_case()) {
    // optional .css_proto_converter.Length length = 2;
    case kLength: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *rhs_.length_);
      break;
    }
    // optional .css_proto_converter.Num num = 3;
    case kNum: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *rhs_.num_);
      break;
    }
    case RHS_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ViewportValue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:css_proto_converter.ViewportValue)
  GOOGLE_DCHECK_NE(&from, this);
  const ViewportValue* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ViewportValue>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:css_proto_converter.ViewportValue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:css_proto_converter.ViewportValue)
    MergeFrom(*source);
  }
}

void ViewportValue::MergeFrom(const ViewportValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:css_proto_converter.ViewportValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_value_id()) {
    set_value_id(from.value_id());
  }
  switch (from.rhs_case()) {
    case kLength: {
      mutable_length()->::css_proto_converter::Length::MergeFrom(from.length());
      break;
    }
    case kNum: {
      mutable_num()->::css_proto_converter::Num::MergeFrom(from.num());
      break;
    }
    case RHS_NOT_SET: {
      break;
    }
  }
}

void ViewportValue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:css_proto_converter.ViewportValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ViewportValue::CopyFrom(const ViewportValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:css_proto_converter.ViewportValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ViewportValue::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  switch (rhs_case()) {
    case kLength: {
      if (has_length()) {
        if (!this->length().IsInitialized()) return false;
      }
      break;
    }
    case kNum: {
      if (has_num()) {
        if (!this->num().IsInitialized()) return false;
      }
      break;
    }
    case RHS_NOT_SET: {
      break;
    }
  }
  return true;
}

void ViewportValue::Swap(ViewportValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ViewportValue::InternalSwap(ViewportValue* other) {
  using std::swap;
  swap(value_id_, other->value_id_);
  swap(rhs_, other->rhs_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ViewportValue::GetMetadata() const {
  protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Import::InitAsDefaultInstance() {
  ::css_proto_converter::_Import_default_instance_._instance.get_mutable()->media_query_list_ = const_cast< ::css_proto_converter::MediaQueryList*>(
      ::css_proto_converter::MediaQueryList::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Import::kSrcIdFieldNumber;
const int Import::kMediaQueryListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Import::Import()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_css_2eproto::scc_info_Import.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:css_proto_converter.Import)
}
Import::Import(const Import& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_media_query_list()) {
    media_query_list_ = new ::css_proto_converter::MediaQueryList(*from.media_query_list_);
  } else {
    media_query_list_ = NULL;
  }
  src_id_ = from.src_id_;
  // @@protoc_insertion_point(copy_constructor:css_proto_converter.Import)
}

void Import::SharedCtor() {
  media_query_list_ = NULL;
  src_id_ = 1;
}

Import::~Import() {
  // @@protoc_insertion_point(destructor:css_proto_converter.Import)
  SharedDtor();
}

void Import::SharedDtor() {
  if (this != internal_default_instance()) delete media_query_list_;
}

void Import::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Import::descriptor() {
  ::protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Import& Import::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_css_2eproto::scc_info_Import.base);
  return *internal_default_instance();
}


void Import::Clear() {
// @@protoc_insertion_point(message_clear_start:css_proto_converter.Import)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(media_query_list_ != NULL);
      media_query_list_->Clear();
    }
    src_id_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Import::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:css_proto_converter.Import)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .css_proto_converter.Import.SrcId src_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::css_proto_converter::Import_SrcId_IsValid(value)) {
            set_src_id(static_cast< ::css_proto_converter::Import_SrcId >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .css_proto_converter.MediaQueryList media_query_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_media_query_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:css_proto_converter.Import)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:css_proto_converter.Import)
  return false;
#undef DO_
}

void Import::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:css_proto_converter.Import)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .css_proto_converter.Import.SrcId src_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->src_id(), output);
  }

  // optional .css_proto_converter.MediaQueryList media_query_list = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_media_query_list(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:css_proto_converter.Import)
}

::google::protobuf::uint8* Import::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:css_proto_converter.Import)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .css_proto_converter.Import.SrcId src_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->src_id(), target);
  }

  // optional .css_proto_converter.MediaQueryList media_query_list = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_media_query_list(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:css_proto_converter.Import)
  return target;
}

size_t Import::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:css_proto_converter.Import)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .css_proto_converter.MediaQueryList media_query_list = 2;
    if (has_media_query_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *media_query_list_);
    }

    // optional .css_proto_converter.Import.SrcId src_id = 1;
    if (has_src_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->src_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Import::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:css_proto_converter.Import)
  GOOGLE_DCHECK_NE(&from, this);
  const Import* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Import>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:css_proto_converter.Import)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:css_proto_converter.Import)
    MergeFrom(*source);
  }
}

void Import::MergeFrom(const Import& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:css_proto_converter.Import)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_media_query_list()->::css_proto_converter::MediaQueryList::MergeFrom(from.media_query_list());
    }
    if (cached_has_bits & 0x00000002u) {
      src_id_ = from.src_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Import::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:css_proto_converter.Import)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Import::CopyFrom(const Import& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:css_proto_converter.Import)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Import::IsInitialized() const {
  if (has_media_query_list()) {
    if (!this->media_query_list_->IsInitialized()) return false;
  }
  return true;
}

void Import::Swap(Import* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Import::InternalSwap(Import* other) {
  using std::swap;
  swap(media_query_list_, other->media_query_list_);
  swap(src_id_, other->src_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Import::GetMetadata() const {
  protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MediaQueryList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MediaQueryList::kMediaQueriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MediaQueryList::MediaQueryList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_css_2eproto::scc_info_MediaQueryList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:css_proto_converter.MediaQueryList)
}
MediaQueryList::MediaQueryList(const MediaQueryList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      media_queries_(from.media_queries_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:css_proto_converter.MediaQueryList)
}

void MediaQueryList::SharedCtor() {
}

MediaQueryList::~MediaQueryList() {
  // @@protoc_insertion_point(destructor:css_proto_converter.MediaQueryList)
  SharedDtor();
}

void MediaQueryList::SharedDtor() {
}

void MediaQueryList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MediaQueryList::descriptor() {
  ::protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MediaQueryList& MediaQueryList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_css_2eproto::scc_info_MediaQueryList.base);
  return *internal_default_instance();
}


void MediaQueryList::Clear() {
// @@protoc_insertion_point(message_clear_start:css_proto_converter.MediaQueryList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  media_queries_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MediaQueryList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:css_proto_converter.MediaQueryList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .css_proto_converter.MediaQuery media_queries = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_media_queries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:css_proto_converter.MediaQueryList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:css_proto_converter.MediaQueryList)
  return false;
#undef DO_
}

void MediaQueryList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:css_proto_converter.MediaQueryList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .css_proto_converter.MediaQuery media_queries = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->media_queries_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->media_queries(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:css_proto_converter.MediaQueryList)
}

::google::protobuf::uint8* MediaQueryList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:css_proto_converter.MediaQueryList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .css_proto_converter.MediaQuery media_queries = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->media_queries_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->media_queries(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:css_proto_converter.MediaQueryList)
  return target;
}

size_t MediaQueryList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:css_proto_converter.MediaQueryList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .css_proto_converter.MediaQuery media_queries = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->media_queries_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->media_queries(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MediaQueryList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:css_proto_converter.MediaQueryList)
  GOOGLE_DCHECK_NE(&from, this);
  const MediaQueryList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MediaQueryList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:css_proto_converter.MediaQueryList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:css_proto_converter.MediaQueryList)
    MergeFrom(*source);
  }
}

void MediaQueryList::MergeFrom(const MediaQueryList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:css_proto_converter.MediaQueryList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  media_queries_.MergeFrom(from.media_queries_);
}

void MediaQueryList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:css_proto_converter.MediaQueryList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MediaQueryList::CopyFrom(const MediaQueryList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:css_proto_converter.MediaQueryList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MediaQueryList::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->media_queries())) return false;
  return true;
}

void MediaQueryList::Swap(MediaQueryList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MediaQueryList::InternalSwap(MediaQueryList* other) {
  using std::swap;
  CastToBase(&media_queries_)->InternalSwap(CastToBase(&other->media_queries_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MediaQueryList::GetMetadata() const {
  protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MediaQuery::InitAsDefaultInstance() {
  ::css_proto_converter::_MediaQuery_default_instance_._instance.get_mutable()->media_condition_ = const_cast< ::css_proto_converter::MediaCondition*>(
      ::css_proto_converter::MediaCondition::internal_default_instance());
  ::css_proto_converter::_MediaQuery_default_instance_._instance.get_mutable()->media_query_part_two_ = const_cast< ::css_proto_converter::MediaQueryPartTwo*>(
      ::css_proto_converter::MediaQueryPartTwo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MediaQuery::kMediaConditionFieldNumber;
const int MediaQuery::kMediaQueryPartTwoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MediaQuery::MediaQuery()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_css_2eproto::scc_info_MediaQuery.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:css_proto_converter.MediaQuery)
}
MediaQuery::MediaQuery(const MediaQuery& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_media_condition()) {
    media_condition_ = new ::css_proto_converter::MediaCondition(*from.media_condition_);
  } else {
    media_condition_ = NULL;
  }
  if (from.has_media_query_part_two()) {
    media_query_part_two_ = new ::css_proto_converter::MediaQueryPartTwo(*from.media_query_part_two_);
  } else {
    media_query_part_two_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:css_proto_converter.MediaQuery)
}

void MediaQuery::SharedCtor() {
  ::memset(&media_condition_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&media_query_part_two_) -
      reinterpret_cast<char*>(&media_condition_)) + sizeof(media_query_part_two_));
}

MediaQuery::~MediaQuery() {
  // @@protoc_insertion_point(destructor:css_proto_converter.MediaQuery)
  SharedDtor();
}

void MediaQuery::SharedDtor() {
  if (this != internal_default_instance()) delete media_condition_;
  if (this != internal_default_instance()) delete media_query_part_two_;
}

void MediaQuery::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MediaQuery::descriptor() {
  ::protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MediaQuery& MediaQuery::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_css_2eproto::scc_info_MediaQuery.base);
  return *internal_default_instance();
}


void MediaQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:css_proto_converter.MediaQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(media_condition_ != NULL);
      media_condition_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(media_query_part_two_ != NULL);
      media_query_part_two_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MediaQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:css_proto_converter.MediaQuery)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .css_proto_converter.MediaCondition media_condition = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_media_condition()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .css_proto_converter.MediaQueryPartTwo media_query_part_two = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_media_query_part_two()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:css_proto_converter.MediaQuery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:css_proto_converter.MediaQuery)
  return false;
#undef DO_
}

void MediaQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:css_proto_converter.MediaQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .css_proto_converter.MediaCondition media_condition = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_media_condition(), output);
  }

  // optional .css_proto_converter.MediaQueryPartTwo media_query_part_two = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_media_query_part_two(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:css_proto_converter.MediaQuery)
}

::google::protobuf::uint8* MediaQuery::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:css_proto_converter.MediaQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .css_proto_converter.MediaCondition media_condition = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_media_condition(), deterministic, target);
  }

  // optional .css_proto_converter.MediaQueryPartTwo media_query_part_two = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_media_query_part_two(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:css_proto_converter.MediaQuery)
  return target;
}

size_t MediaQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:css_proto_converter.MediaQuery)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .css_proto_converter.MediaCondition media_condition = 1;
  if (has_media_condition()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *media_condition_);
  }
  // optional .css_proto_converter.MediaQueryPartTwo media_query_part_two = 2;
  if (has_media_query_part_two()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *media_query_part_two_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MediaQuery::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:css_proto_converter.MediaQuery)
  GOOGLE_DCHECK_NE(&from, this);
  const MediaQuery* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MediaQuery>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:css_proto_converter.MediaQuery)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:css_proto_converter.MediaQuery)
    MergeFrom(*source);
  }
}

void MediaQuery::MergeFrom(const MediaQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:css_proto_converter.MediaQuery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_media_condition()->::css_proto_converter::MediaCondition::MergeFrom(from.media_condition());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_media_query_part_two()->::css_proto_converter::MediaQueryPartTwo::MergeFrom(from.media_query_part_two());
    }
  }
}

void MediaQuery::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:css_proto_converter.MediaQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MediaQuery::CopyFrom(const MediaQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:css_proto_converter.MediaQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MediaQuery::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_media_condition()) {
    if (!this->media_condition_->IsInitialized()) return false;
  }
  if (has_media_query_part_two()) {
    if (!this->media_query_part_two_->IsInitialized()) return false;
  }
  return true;
}

void MediaQuery::Swap(MediaQuery* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MediaQuery::InternalSwap(MediaQuery* other) {
  using std::swap;
  swap(media_condition_, other->media_condition_);
  swap(media_query_part_two_, other->media_query_part_two_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MediaQuery::GetMetadata() const {
  protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MediaQueryPartTwo::InitAsDefaultInstance() {
  ::css_proto_converter::_MediaQueryPartTwo_default_instance_._instance.get_mutable()->media_type_ = const_cast< ::css_proto_converter::MediaType*>(
      ::css_proto_converter::MediaType::internal_default_instance());
  ::css_proto_converter::_MediaQueryPartTwo_default_instance_._instance.get_mutable()->media_condition_without_or_ = const_cast< ::css_proto_converter::MediaConditionWithoutOr*>(
      ::css_proto_converter::MediaConditionWithoutOr::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MediaQueryPartTwo::kNotOrOnlyFieldNumber;
const int MediaQueryPartTwo::kMediaTypeFieldNumber;
const int MediaQueryPartTwo::kMediaConditionWithoutOrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MediaQueryPartTwo::MediaQueryPartTwo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_css_2eproto::scc_info_MediaQueryPartTwo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:css_proto_converter.MediaQueryPartTwo)
}
MediaQueryPartTwo::MediaQueryPartTwo(const MediaQueryPartTwo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_media_type()) {
    media_type_ = new ::css_proto_converter::MediaType(*from.media_type_);
  } else {
    media_type_ = NULL;
  }
  if (from.has_media_condition_without_or()) {
    media_condition_without_or_ = new ::css_proto_converter::MediaConditionWithoutOr(*from.media_condition_without_or_);
  } else {
    media_condition_without_or_ = NULL;
  }
  not_or_only_ = from.not_or_only_;
  // @@protoc_insertion_point(copy_constructor:css_proto_converter.MediaQueryPartTwo)
}

void MediaQueryPartTwo::SharedCtor() {
  ::memset(&media_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&media_condition_without_or_) -
      reinterpret_cast<char*>(&media_type_)) + sizeof(media_condition_without_or_));
  not_or_only_ = 1;
}

MediaQueryPartTwo::~MediaQueryPartTwo() {
  // @@protoc_insertion_point(destructor:css_proto_converter.MediaQueryPartTwo)
  SharedDtor();
}

void MediaQueryPartTwo::SharedDtor() {
  if (this != internal_default_instance()) delete media_type_;
  if (this != internal_default_instance()) delete media_condition_without_or_;
}

void MediaQueryPartTwo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MediaQueryPartTwo::descriptor() {
  ::protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MediaQueryPartTwo& MediaQueryPartTwo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_css_2eproto::scc_info_MediaQueryPartTwo.base);
  return *internal_default_instance();
}


void MediaQueryPartTwo::Clear() {
// @@protoc_insertion_point(message_clear_start:css_proto_converter.MediaQueryPartTwo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(media_type_ != NULL);
      media_type_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(media_condition_without_or_ != NULL);
      media_condition_without_or_->Clear();
    }
    not_or_only_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MediaQueryPartTwo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:css_proto_converter.MediaQueryPartTwo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .css_proto_converter.MediaQueryPartTwo.NotOrOnly not_or_only = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::css_proto_converter::MediaQueryPartTwo_NotOrOnly_IsValid(value)) {
            set_not_or_only(static_cast< ::css_proto_converter::MediaQueryPartTwo_NotOrOnly >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .css_proto_converter.MediaType media_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_media_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .css_proto_converter.MediaConditionWithoutOr media_condition_without_or = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_media_condition_without_or()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:css_proto_converter.MediaQueryPartTwo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:css_proto_converter.MediaQueryPartTwo)
  return false;
#undef DO_
}

void MediaQueryPartTwo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:css_proto_converter.MediaQueryPartTwo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .css_proto_converter.MediaQueryPartTwo.NotOrOnly not_or_only = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->not_or_only(), output);
  }

  // required .css_proto_converter.MediaType media_type = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_media_type(), output);
  }

  // optional .css_proto_converter.MediaConditionWithoutOr media_condition_without_or = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_media_condition_without_or(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:css_proto_converter.MediaQueryPartTwo)
}

::google::protobuf::uint8* MediaQueryPartTwo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:css_proto_converter.MediaQueryPartTwo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .css_proto_converter.MediaQueryPartTwo.NotOrOnly not_or_only = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->not_or_only(), target);
  }

  // required .css_proto_converter.MediaType media_type = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_media_type(), deterministic, target);
  }

  // optional .css_proto_converter.MediaConditionWithoutOr media_condition_without_or = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_media_condition_without_or(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:css_proto_converter.MediaQueryPartTwo)
  return target;
}

size_t MediaQueryPartTwo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:css_proto_converter.MediaQueryPartTwo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .css_proto_converter.MediaType media_type = 2;
  if (has_media_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *media_type_);
  }
  if (_has_bits_[0 / 32] & 6u) {
    // optional .css_proto_converter.MediaConditionWithoutOr media_condition_without_or = 3;
    if (has_media_condition_without_or()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *media_condition_without_or_);
    }

    // optional .css_proto_converter.MediaQueryPartTwo.NotOrOnly not_or_only = 1;
    if (has_not_or_only()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->not_or_only());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MediaQueryPartTwo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:css_proto_converter.MediaQueryPartTwo)
  GOOGLE_DCHECK_NE(&from, this);
  const MediaQueryPartTwo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MediaQueryPartTwo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:css_proto_converter.MediaQueryPartTwo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:css_proto_converter.MediaQueryPartTwo)
    MergeFrom(*source);
  }
}

void MediaQueryPartTwo::MergeFrom(const MediaQueryPartTwo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:css_proto_converter.MediaQueryPartTwo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_media_type()->::css_proto_converter::MediaType::MergeFrom(from.media_type());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_media_condition_without_or()->::css_proto_converter::MediaConditionWithoutOr::MergeFrom(from.media_condition_without_or());
    }
    if (cached_has_bits & 0x00000004u) {
      not_or_only_ = from.not_or_only_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MediaQueryPartTwo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:css_proto_converter.MediaQueryPartTwo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MediaQueryPartTwo::CopyFrom(const MediaQueryPartTwo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:css_proto_converter.MediaQueryPartTwo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MediaQueryPartTwo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_media_type()) {
    if (!this->media_type_->IsInitialized()) return false;
  }
  if (has_media_condition_without_or()) {
    if (!this->media_condition_without_or_->IsInitialized()) return false;
  }
  return true;
}

void MediaQueryPartTwo::Swap(MediaQueryPartTwo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MediaQueryPartTwo::InternalSwap(MediaQueryPartTwo* other) {
  using std::swap;
  swap(media_type_, other->media_type_);
  swap(media_condition_without_or_, other->media_condition_without_or_);
  swap(not_or_only_, other->not_or_only_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MediaQueryPartTwo::GetMetadata() const {
  protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MediaConditionWithoutOr::InitAsDefaultInstance() {
  ::css_proto_converter::_MediaConditionWithoutOr_default_instance_._instance.get_mutable()->media_not_ = const_cast< ::css_proto_converter::MediaNot*>(
      ::css_proto_converter::MediaNot::internal_default_instance());
  ::css_proto_converter::_MediaConditionWithoutOr_default_instance_.media_and_ = const_cast< ::css_proto_converter::MediaAnd*>(
      ::css_proto_converter::MediaAnd::internal_default_instance());
  ::css_proto_converter::_MediaConditionWithoutOr_default_instance_.media_in_parens_ = const_cast< ::css_proto_converter::MediaInParens*>(
      ::css_proto_converter::MediaInParens::internal_default_instance());
}
void MediaConditionWithoutOr::set_allocated_media_and(::css_proto_converter::MediaAnd* media_and) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_rhs();
  if (media_and) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      media_and = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, media_and, submessage_arena);
    }
    set_has_media_and();
    rhs_.media_and_ = media_and;
  }
  // @@protoc_insertion_point(field_set_allocated:css_proto_converter.MediaConditionWithoutOr.media_and)
}
void MediaConditionWithoutOr::set_allocated_media_in_parens(::css_proto_converter::MediaInParens* media_in_parens) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_rhs();
  if (media_in_parens) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      media_in_parens = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, media_in_parens, submessage_arena);
    }
    set_has_media_in_parens();
    rhs_.media_in_parens_ = media_in_parens;
  }
  // @@protoc_insertion_point(field_set_allocated:css_proto_converter.MediaConditionWithoutOr.media_in_parens)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MediaConditionWithoutOr::kMediaNotFieldNumber;
const int MediaConditionWithoutOr::kMediaAndFieldNumber;
const int MediaConditionWithoutOr::kMediaInParensFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MediaConditionWithoutOr::MediaConditionWithoutOr()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_css_2eproto::scc_info_MediaConditionWithoutOr.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:css_proto_converter.MediaConditionWithoutOr)
}
MediaConditionWithoutOr::MediaConditionWithoutOr(const MediaConditionWithoutOr& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_media_not()) {
    media_not_ = new ::css_proto_converter::MediaNot(*from.media_not_);
  } else {
    media_not_ = NULL;
  }
  clear_has_rhs();
  switch (from.rhs_case()) {
    case kMediaAnd: {
      mutable_media_and()->::css_proto_converter::MediaAnd::MergeFrom(from.media_and());
      break;
    }
    case kMediaInParens: {
      mutable_media_in_parens()->::css_proto_converter::MediaInParens::MergeFrom(from.media_in_parens());
      break;
    }
    case RHS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:css_proto_converter.MediaConditionWithoutOr)
}

void MediaConditionWithoutOr::SharedCtor() {
  media_not_ = NULL;
  clear_has_rhs();
}

MediaConditionWithoutOr::~MediaConditionWithoutOr() {
  // @@protoc_insertion_point(destructor:css_proto_converter.MediaConditionWithoutOr)
  SharedDtor();
}

void MediaConditionWithoutOr::SharedDtor() {
  if (this != internal_default_instance()) delete media_not_;
  if (has_rhs()) {
    clear_rhs();
  }
}

void MediaConditionWithoutOr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MediaConditionWithoutOr::descriptor() {
  ::protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MediaConditionWithoutOr& MediaConditionWithoutOr::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_css_2eproto::scc_info_MediaConditionWithoutOr.base);
  return *internal_default_instance();
}


void MediaConditionWithoutOr::clear_rhs() {
// @@protoc_insertion_point(one_of_clear_start:css_proto_converter.MediaConditionWithoutOr)
  switch (rhs_case()) {
    case kMediaAnd: {
      delete rhs_.media_and_;
      break;
    }
    case kMediaInParens: {
      delete rhs_.media_in_parens_;
      break;
    }
    case RHS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RHS_NOT_SET;
}


void MediaConditionWithoutOr::Clear() {
// @@protoc_insertion_point(message_clear_start:css_proto_converter.MediaConditionWithoutOr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(media_not_ != NULL);
    media_not_->Clear();
  }
  clear_rhs();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MediaConditionWithoutOr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:css_proto_converter.MediaConditionWithoutOr)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .css_proto_converter.MediaNot media_not = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_media_not()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .css_proto_converter.MediaAnd media_and = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_media_and()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .css_proto_converter.MediaInParens media_in_parens = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_media_in_parens()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:css_proto_converter.MediaConditionWithoutOr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:css_proto_converter.MediaConditionWithoutOr)
  return false;
#undef DO_
}

void MediaConditionWithoutOr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:css_proto_converter.MediaConditionWithoutOr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .css_proto_converter.MediaNot media_not = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_media_not(), output);
  }

  switch (rhs_case()) {
    case kMediaAnd:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, this->_internal_media_and(), output);
      break;
    case kMediaInParens:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        3, this->_internal_media_in_parens(), output);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:css_proto_converter.MediaConditionWithoutOr)
}

::google::protobuf::uint8* MediaConditionWithoutOr::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:css_proto_converter.MediaConditionWithoutOr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .css_proto_converter.MediaNot media_not = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_media_not(), deterministic, target);
  }

  switch (rhs_case()) {
    case kMediaAnd:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          2, this->_internal_media_and(), deterministic, target);
      break;
    case kMediaInParens:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          3, this->_internal_media_in_parens(), deterministic, target);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:css_proto_converter.MediaConditionWithoutOr)
  return target;
}

size_t MediaConditionWithoutOr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:css_proto_converter.MediaConditionWithoutOr)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .css_proto_converter.MediaNot media_not = 1;
  if (has_media_not()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *media_not_);
  }
  switch (rhs_case()) {
    // optional .css_proto_converter.MediaAnd media_and = 2;
    case kMediaAnd: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *rhs_.media_and_);
      break;
    }
    // optional .css_proto_converter.MediaInParens media_in_parens = 3;
    case kMediaInParens: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *rhs_.media_in_parens_);
      break;
    }
    case RHS_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MediaConditionWithoutOr::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:css_proto_converter.MediaConditionWithoutOr)
  GOOGLE_DCHECK_NE(&from, this);
  const MediaConditionWithoutOr* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MediaConditionWithoutOr>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:css_proto_converter.MediaConditionWithoutOr)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:css_proto_converter.MediaConditionWithoutOr)
    MergeFrom(*source);
  }
}

void MediaConditionWithoutOr::MergeFrom(const MediaConditionWithoutOr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:css_proto_converter.MediaConditionWithoutOr)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_media_not()) {
    mutable_media_not()->::css_proto_converter::MediaNot::MergeFrom(from.media_not());
  }
  switch (from.rhs_case()) {
    case kMediaAnd: {
      mutable_media_and()->::css_proto_converter::MediaAnd::MergeFrom(from.media_and());
      break;
    }
    case kMediaInParens: {
      mutable_media_in_parens()->::css_proto_converter::MediaInParens::MergeFrom(from.media_in_parens());
      break;
    }
    case RHS_NOT_SET: {
      break;
    }
  }
}

void MediaConditionWithoutOr::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:css_proto_converter.MediaConditionWithoutOr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MediaConditionWithoutOr::CopyFrom(const MediaConditionWithoutOr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:css_proto_converter.MediaConditionWithoutOr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MediaConditionWithoutOr::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_media_not()) {
    if (!this->media_not_->IsInitialized()) return false;
  }
  switch (rhs_case()) {
    case kMediaAnd: {
      if (has_media_and()) {
        if (!this->media_and().IsInitialized()) return false;
      }
      break;
    }
    case kMediaInParens: {
      if (has_media_in_parens()) {
        if (!this->media_in_parens().IsInitialized()) return false;
      }
      break;
    }
    case RHS_NOT_SET: {
      break;
    }
  }
  return true;
}

void MediaConditionWithoutOr::Swap(MediaConditionWithoutOr* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MediaConditionWithoutOr::InternalSwap(MediaConditionWithoutOr* other) {
  using std::swap;
  swap(media_not_, other->media_not_);
  swap(rhs_, other->rhs_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MediaConditionWithoutOr::GetMetadata() const {
  protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MediaCondition::InitAsDefaultInstance() {
  ::css_proto_converter::_MediaCondition_default_instance_._instance.get_mutable()->media_and_ = const_cast< ::css_proto_converter::MediaAnd*>(
      ::css_proto_converter::MediaAnd::internal_default_instance());
  ::css_proto_converter::_MediaCondition_default_instance_.media_not_ = const_cast< ::css_proto_converter::MediaNot*>(
      ::css_proto_converter::MediaNot::internal_default_instance());
  ::css_proto_converter::_MediaCondition_default_instance_.media_or_ = const_cast< ::css_proto_converter::MediaOr*>(
      ::css_proto_converter::MediaOr::internal_default_instance());
  ::css_proto_converter::_MediaCondition_default_instance_.media_in_parens_ = const_cast< ::css_proto_converter::MediaInParens*>(
      ::css_proto_converter::MediaInParens::internal_default_instance());
}
void MediaCondition::set_allocated_media_not(::css_proto_converter::MediaNot* media_not) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_rhs();
  if (media_not) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      media_not = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, media_not, submessage_arena);
    }
    set_has_media_not();
    rhs_.media_not_ = media_not;
  }
  // @@protoc_insertion_point(field_set_allocated:css_proto_converter.MediaCondition.media_not)
}
void MediaCondition::set_allocated_media_or(::css_proto_converter::MediaOr* media_or) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_rhs();
  if (media_or) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      media_or = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, media_or, submessage_arena);
    }
    set_has_media_or();
    rhs_.media_or_ = media_or;
  }
  // @@protoc_insertion_point(field_set_allocated:css_proto_converter.MediaCondition.media_or)
}
void MediaCondition::set_allocated_media_in_parens(::css_proto_converter::MediaInParens* media_in_parens) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_rhs();
  if (media_in_parens) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      media_in_parens = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, media_in_parens, submessage_arena);
    }
    set_has_media_in_parens();
    rhs_.media_in_parens_ = media_in_parens;
  }
  // @@protoc_insertion_point(field_set_allocated:css_proto_converter.MediaCondition.media_in_parens)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MediaCondition::kMediaAndFieldNumber;
const int MediaCondition::kMediaNotFieldNumber;
const int MediaCondition::kMediaOrFieldNumber;
const int MediaCondition::kMediaInParensFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MediaCondition::MediaCondition()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_css_2eproto::scc_info_MediaAnd.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:css_proto_converter.MediaCondition)
}
MediaCondition::MediaCondition(const MediaCondition& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_media_and()) {
    media_and_ = new ::css_proto_converter::MediaAnd(*from.media_and_);
  } else {
    media_and_ = NULL;
  }
  clear_has_rhs();
  switch (from.rhs_case()) {
    case kMediaNot: {
      mutable_media_not()->::css_proto_converter::MediaNot::MergeFrom(from.media_not());
      break;
    }
    case kMediaOr: {
      mutable_media_or()->::css_proto_converter::MediaOr::MergeFrom(from.media_or());
      break;
    }
    case kMediaInParens: {
      mutable_media_in_parens()->::css_proto_converter::MediaInParens::MergeFrom(from.media_in_parens());
      break;
    }
    case RHS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:css_proto_converter.MediaCondition)
}

void MediaCondition::SharedCtor() {
  media_and_ = NULL;
  clear_has_rhs();
}

MediaCondition::~MediaCondition() {
  // @@protoc_insertion_point(destructor:css_proto_converter.MediaCondition)
  SharedDtor();
}

void MediaCondition::SharedDtor() {
  if (this != internal_default_instance()) delete media_and_;
  if (has_rhs()) {
    clear_rhs();
  }
}

void MediaCondition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MediaCondition::descriptor() {
  ::protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MediaCondition& MediaCondition::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_css_2eproto::scc_info_MediaAnd.base);
  return *internal_default_instance();
}


void MediaCondition::clear_rhs() {
// @@protoc_insertion_point(one_of_clear_start:css_proto_converter.MediaCondition)
  switch (rhs_case()) {
    case kMediaNot: {
      delete rhs_.media_not_;
      break;
    }
    case kMediaOr: {
      delete rhs_.media_or_;
      break;
    }
    case kMediaInParens: {
      delete rhs_.media_in_parens_;
      break;
    }
    case RHS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RHS_NOT_SET;
}


void MediaCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:css_proto_converter.MediaCondition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(media_and_ != NULL);
    media_and_->Clear();
  }
  clear_rhs();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MediaCondition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:css_proto_converter.MediaCondition)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .css_proto_converter.MediaAnd media_and = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_media_and()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .css_proto_converter.MediaNot media_not = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_media_not()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .css_proto_converter.MediaOr media_or = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_media_or()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .css_proto_converter.MediaInParens media_in_parens = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_media_in_parens()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:css_proto_converter.MediaCondition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:css_proto_converter.MediaCondition)
  return false;
#undef DO_
}

void MediaCondition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:css_proto_converter.MediaCondition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .css_proto_converter.MediaAnd media_and = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_media_and(), output);
  }

  switch (rhs_case()) {
    case kMediaNot:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, this->_internal_media_not(), output);
      break;
    case kMediaOr:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        3, this->_internal_media_or(), output);
      break;
    case kMediaInParens:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        4, this->_internal_media_in_parens(), output);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:css_proto_converter.MediaCondition)
}

::google::protobuf::uint8* MediaCondition::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:css_proto_converter.MediaCondition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .css_proto_converter.MediaAnd media_and = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_media_and(), deterministic, target);
  }

  switch (rhs_case()) {
    case kMediaNot:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          2, this->_internal_media_not(), deterministic, target);
      break;
    case kMediaOr:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          3, this->_internal_media_or(), deterministic, target);
      break;
    case kMediaInParens:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          4, this->_internal_media_in_parens(), deterministic, target);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:css_proto_converter.MediaCondition)
  return target;
}

size_t MediaCondition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:css_proto_converter.MediaCondition)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .css_proto_converter.MediaAnd media_and = 1;
  if (has_media_and()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *media_and_);
  }
  switch (rhs_case()) {
    // optional .css_proto_converter.MediaNot media_not = 2;
    case kMediaNot: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *rhs_.media_not_);
      break;
    }
    // optional .css_proto_converter.MediaOr media_or = 3;
    case kMediaOr: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *rhs_.media_or_);
      break;
    }
    // optional .css_proto_converter.MediaInParens media_in_parens = 4;
    case kMediaInParens: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *rhs_.media_in_parens_);
      break;
    }
    case RHS_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MediaCondition::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:css_proto_converter.MediaCondition)
  GOOGLE_DCHECK_NE(&from, this);
  const MediaCondition* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MediaCondition>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:css_proto_converter.MediaCondition)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:css_proto_converter.MediaCondition)
    MergeFrom(*source);
  }
}

void MediaCondition::MergeFrom(const MediaCondition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:css_proto_converter.MediaCondition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_media_and()) {
    mutable_media_and()->::css_proto_converter::MediaAnd::MergeFrom(from.media_and());
  }
  switch (from.rhs_case()) {
    case kMediaNot: {
      mutable_media_not()->::css_proto_converter::MediaNot::MergeFrom(from.media_not());
      break;
    }
    case kMediaOr: {
      mutable_media_or()->::css_proto_converter::MediaOr::MergeFrom(from.media_or());
      break;
    }
    case kMediaInParens: {
      mutable_media_in_parens()->::css_proto_converter::MediaInParens::MergeFrom(from.media_in_parens());
      break;
    }
    case RHS_NOT_SET: {
      break;
    }
  }
}

void MediaCondition::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:css_proto_converter.MediaCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MediaCondition::CopyFrom(const MediaCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:css_proto_converter.MediaCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MediaCondition::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_media_and()) {
    if (!this->media_and_->IsInitialized()) return false;
  }
  switch (rhs_case()) {
    case kMediaNot: {
      if (has_media_not()) {
        if (!this->media_not().IsInitialized()) return false;
      }
      break;
    }
    case kMediaOr: {
      if (has_media_or()) {
        if (!this->media_or().IsInitialized()) return false;
      }
      break;
    }
    case kMediaInParens: {
      if (has_media_in_parens()) {
        if (!this->media_in_parens().IsInitialized()) return false;
      }
      break;
    }
    case RHS_NOT_SET: {
      break;
    }
  }
  return true;
}

void MediaCondition::Swap(MediaCondition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MediaCondition::InternalSwap(MediaCondition* other) {
  using std::swap;
  swap(media_and_, other->media_and_);
  swap(rhs_, other->rhs_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MediaCondition::GetMetadata() const {
  protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MediaType::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MediaType::kValueIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MediaType::MediaType()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_css_2eproto::scc_info_MediaType.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:css_proto_converter.MediaType)
}
MediaType::MediaType(const MediaType& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_id_ = from.value_id_;
  // @@protoc_insertion_point(copy_constructor:css_proto_converter.MediaType)
}

void MediaType::SharedCtor() {
  value_id_ = 1;
}

MediaType::~MediaType() {
  // @@protoc_insertion_point(destructor:css_proto_converter.MediaType)
  SharedDtor();
}

void MediaType::SharedDtor() {
}

void MediaType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MediaType::descriptor() {
  ::protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MediaType& MediaType::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_css_2eproto::scc_info_MediaType.base);
  return *internal_default_instance();
}


void MediaType::Clear() {
// @@protoc_insertion_point(message_clear_start:css_proto_converter.MediaType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_id_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MediaType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:css_proto_converter.MediaType)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .css_proto_converter.MediaType.ValueId value_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::css_proto_converter::MediaType_ValueId_IsValid(value)) {
            set_value_id(static_cast< ::css_proto_converter::MediaType_ValueId >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:css_proto_converter.MediaType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:css_proto_converter.MediaType)
  return false;
#undef DO_
}

void MediaType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:css_proto_converter.MediaType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .css_proto_converter.MediaType.ValueId value_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->value_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:css_proto_converter.MediaType)
}

::google::protobuf::uint8* MediaType::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:css_proto_converter.MediaType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .css_proto_converter.MediaType.ValueId value_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->value_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:css_proto_converter.MediaType)
  return target;
}

size_t MediaType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:css_proto_converter.MediaType)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .css_proto_converter.MediaType.ValueId value_id = 1;
  if (has_value_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->value_id());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MediaType::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:css_proto_converter.MediaType)
  GOOGLE_DCHECK_NE(&from, this);
  const MediaType* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MediaType>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:css_proto_converter.MediaType)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:css_proto_converter.MediaType)
    MergeFrom(*source);
  }
}

void MediaType::MergeFrom(const MediaType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:css_proto_converter.MediaType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_value_id()) {
    set_value_id(from.value_id());
  }
}

void MediaType::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:css_proto_converter.MediaType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MediaType::CopyFrom(const MediaType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:css_proto_converter.MediaType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MediaType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void MediaType::Swap(MediaType* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MediaType::InternalSwap(MediaType* other) {
  using std::swap;
  swap(value_id_, other->value_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MediaType::GetMetadata() const {
  protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MediaNot::InitAsDefaultInstance() {
  ::css_proto_converter::_MediaNot_default_instance_._instance.get_mutable()->media_in_parens_ = const_cast< ::css_proto_converter::MediaInParens*>(
      ::css_proto_converter::MediaInParens::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MediaNot::kMediaInParensFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MediaNot::MediaNot()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_css_2eproto::scc_info_MediaAnd.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:css_proto_converter.MediaNot)
}
MediaNot::MediaNot(const MediaNot& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_media_in_parens()) {
    media_in_parens_ = new ::css_proto_converter::MediaInParens(*from.media_in_parens_);
  } else {
    media_in_parens_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:css_proto_converter.MediaNot)
}

void MediaNot::SharedCtor() {
  media_in_parens_ = NULL;
}

MediaNot::~MediaNot() {
  // @@protoc_insertion_point(destructor:css_proto_converter.MediaNot)
  SharedDtor();
}

void MediaNot::SharedDtor() {
  if (this != internal_default_instance()) delete media_in_parens_;
}

void MediaNot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MediaNot::descriptor() {
  ::protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MediaNot& MediaNot::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_css_2eproto::scc_info_MediaAnd.base);
  return *internal_default_instance();
}


void MediaNot::Clear() {
// @@protoc_insertion_point(message_clear_start:css_proto_converter.MediaNot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(media_in_parens_ != NULL);
    media_in_parens_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MediaNot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:css_proto_converter.MediaNot)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .css_proto_converter.MediaInParens media_in_parens = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_media_in_parens()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:css_proto_converter.MediaNot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:css_proto_converter.MediaNot)
  return false;
#undef DO_
}

void MediaNot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:css_proto_converter.MediaNot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .css_proto_converter.MediaInParens media_in_parens = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_media_in_parens(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:css_proto_converter.MediaNot)
}

::google::protobuf::uint8* MediaNot::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:css_proto_converter.MediaNot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .css_proto_converter.MediaInParens media_in_parens = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_media_in_parens(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:css_proto_converter.MediaNot)
  return target;
}

size_t MediaNot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:css_proto_converter.MediaNot)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .css_proto_converter.MediaInParens media_in_parens = 1;
  if (has_media_in_parens()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *media_in_parens_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MediaNot::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:css_proto_converter.MediaNot)
  GOOGLE_DCHECK_NE(&from, this);
  const MediaNot* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MediaNot>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:css_proto_converter.MediaNot)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:css_proto_converter.MediaNot)
    MergeFrom(*source);
  }
}

void MediaNot::MergeFrom(const MediaNot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:css_proto_converter.MediaNot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_media_in_parens()) {
    mutable_media_in_parens()->::css_proto_converter::MediaInParens::MergeFrom(from.media_in_parens());
  }
}

void MediaNot::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:css_proto_converter.MediaNot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MediaNot::CopyFrom(const MediaNot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:css_proto_converter.MediaNot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MediaNot::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_media_in_parens()) {
    if (!this->media_in_parens_->IsInitialized()) return false;
  }
  return true;
}

void MediaNot::Swap(MediaNot* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MediaNot::InternalSwap(MediaNot* other) {
  using std::swap;
  swap(media_in_parens_, other->media_in_parens_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MediaNot::GetMetadata() const {
  protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MediaAnd::InitAsDefaultInstance() {
  ::css_proto_converter::_MediaAnd_default_instance_._instance.get_mutable()->first_media_in_parens_ = const_cast< ::css_proto_converter::MediaInParens*>(
      ::css_proto_converter::MediaInParens::internal_default_instance());
  ::css_proto_converter::_MediaAnd_default_instance_._instance.get_mutable()->second_media_in_parens_ = const_cast< ::css_proto_converter::MediaInParens*>(
      ::css_proto_converter::MediaInParens::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MediaAnd::kFirstMediaInParensFieldNumber;
const int MediaAnd::kSecondMediaInParensFieldNumber;
const int MediaAnd::kMediaInParensListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MediaAnd::MediaAnd()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_css_2eproto::scc_info_MediaAnd.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:css_proto_converter.MediaAnd)
}
MediaAnd::MediaAnd(const MediaAnd& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      media_in_parens_list_(from.media_in_parens_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_first_media_in_parens()) {
    first_media_in_parens_ = new ::css_proto_converter::MediaInParens(*from.first_media_in_parens_);
  } else {
    first_media_in_parens_ = NULL;
  }
  if (from.has_second_media_in_parens()) {
    second_media_in_parens_ = new ::css_proto_converter::MediaInParens(*from.second_media_in_parens_);
  } else {
    second_media_in_parens_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:css_proto_converter.MediaAnd)
}

void MediaAnd::SharedCtor() {
  ::memset(&first_media_in_parens_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&second_media_in_parens_) -
      reinterpret_cast<char*>(&first_media_in_parens_)) + sizeof(second_media_in_parens_));
}

MediaAnd::~MediaAnd() {
  // @@protoc_insertion_point(destructor:css_proto_converter.MediaAnd)
  SharedDtor();
}

void MediaAnd::SharedDtor() {
  if (this != internal_default_instance()) delete first_media_in_parens_;
  if (this != internal_default_instance()) delete second_media_in_parens_;
}

void MediaAnd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MediaAnd::descriptor() {
  ::protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MediaAnd& MediaAnd::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_css_2eproto::scc_info_MediaAnd.base);
  return *internal_default_instance();
}


void MediaAnd::Clear() {
// @@protoc_insertion_point(message_clear_start:css_proto_converter.MediaAnd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  media_in_parens_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(first_media_in_parens_ != NULL);
      first_media_in_parens_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(second_media_in_parens_ != NULL);
      second_media_in_parens_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MediaAnd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:css_proto_converter.MediaAnd)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .css_proto_converter.MediaInParens first_media_in_parens = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_first_media_in_parens()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .css_proto_converter.MediaInParens second_media_in_parens = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_second_media_in_parens()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .css_proto_converter.MediaInParens media_in_parens_list = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_media_in_parens_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:css_proto_converter.MediaAnd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:css_proto_converter.MediaAnd)
  return false;
#undef DO_
}

void MediaAnd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:css_proto_converter.MediaAnd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .css_proto_converter.MediaInParens first_media_in_parens = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_first_media_in_parens(), output);
  }

  // required .css_proto_converter.MediaInParens second_media_in_parens = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_second_media_in_parens(), output);
  }

  // repeated .css_proto_converter.MediaInParens media_in_parens_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->media_in_parens_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->media_in_parens_list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:css_proto_converter.MediaAnd)
}

::google::protobuf::uint8* MediaAnd::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:css_proto_converter.MediaAnd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .css_proto_converter.MediaInParens first_media_in_parens = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_first_media_in_parens(), deterministic, target);
  }

  // required .css_proto_converter.MediaInParens second_media_in_parens = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_second_media_in_parens(), deterministic, target);
  }

  // repeated .css_proto_converter.MediaInParens media_in_parens_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->media_in_parens_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->media_in_parens_list(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:css_proto_converter.MediaAnd)
  return target;
}

size_t MediaAnd::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:css_proto_converter.MediaAnd)
  size_t total_size = 0;

  if (has_first_media_in_parens()) {
    // required .css_proto_converter.MediaInParens first_media_in_parens = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *first_media_in_parens_);
  }

  if (has_second_media_in_parens()) {
    // required .css_proto_converter.MediaInParens second_media_in_parens = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *second_media_in_parens_);
  }

  return total_size;
}
size_t MediaAnd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:css_proto_converter.MediaAnd)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .css_proto_converter.MediaInParens first_media_in_parens = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *first_media_in_parens_);

    // required .css_proto_converter.MediaInParens second_media_in_parens = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *second_media_in_parens_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .css_proto_converter.MediaInParens media_in_parens_list = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->media_in_parens_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->media_in_parens_list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MediaAnd::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:css_proto_converter.MediaAnd)
  GOOGLE_DCHECK_NE(&from, this);
  const MediaAnd* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MediaAnd>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:css_proto_converter.MediaAnd)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:css_proto_converter.MediaAnd)
    MergeFrom(*source);
  }
}

void MediaAnd::MergeFrom(const MediaAnd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:css_proto_converter.MediaAnd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  media_in_parens_list_.MergeFrom(from.media_in_parens_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_first_media_in_parens()->::css_proto_converter::MediaInParens::MergeFrom(from.first_media_in_parens());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_second_media_in_parens()->::css_proto_converter::MediaInParens::MergeFrom(from.second_media_in_parens());
    }
  }
}

void MediaAnd::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:css_proto_converter.MediaAnd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MediaAnd::CopyFrom(const MediaAnd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:css_proto_converter.MediaAnd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MediaAnd::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->media_in_parens_list())) return false;
  if (has_first_media_in_parens()) {
    if (!this->first_media_in_parens_->IsInitialized()) return false;
  }
  if (has_second_media_in_parens()) {
    if (!this->second_media_in_parens_->IsInitialized()) return false;
  }
  return true;
}

void MediaAnd::Swap(MediaAnd* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MediaAnd::InternalSwap(MediaAnd* other) {
  using std::swap;
  CastToBase(&media_in_parens_list_)->InternalSwap(CastToBase(&other->media_in_parens_list_));
  swap(first_media_in_parens_, other->first_media_in_parens_);
  swap(second_media_in_parens_, other->second_media_in_parens_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MediaAnd::GetMetadata() const {
  protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MediaOr::InitAsDefaultInstance() {
  ::css_proto_converter::_MediaOr_default_instance_._instance.get_mutable()->first_media_in_parens_ = const_cast< ::css_proto_converter::MediaInParens*>(
      ::css_proto_converter::MediaInParens::internal_default_instance());
  ::css_proto_converter::_MediaOr_default_instance_._instance.get_mutable()->second_media_in_parens_ = const_cast< ::css_proto_converter::MediaInParens*>(
      ::css_proto_converter::MediaInParens::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MediaOr::kFirstMediaInParensFieldNumber;
const int MediaOr::kSecondMediaInParensFieldNumber;
const int MediaOr::kMediaInParensListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MediaOr::MediaOr()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_css_2eproto::scc_info_MediaAnd.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:css_proto_converter.MediaOr)
}
MediaOr::MediaOr(const MediaOr& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      media_in_parens_list_(from.media_in_parens_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_first_media_in_parens()) {
    first_media_in_parens_ = new ::css_proto_converter::MediaInParens(*from.first_media_in_parens_);
  } else {
    first_media_in_parens_ = NULL;
  }
  if (from.has_second_media_in_parens()) {
    second_media_in_parens_ = new ::css_proto_converter::MediaInParens(*from.second_media_in_parens_);
  } else {
    second_media_in_parens_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:css_proto_converter.MediaOr)
}

void MediaOr::SharedCtor() {
  ::memset(&first_media_in_parens_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&second_media_in_parens_) -
      reinterpret_cast<char*>(&first_media_in_parens_)) + sizeof(second_media_in_parens_));
}

MediaOr::~MediaOr() {
  // @@protoc_insertion_point(destructor:css_proto_converter.MediaOr)
  SharedDtor();
}

void MediaOr::SharedDtor() {
  if (this != internal_default_instance()) delete first_media_in_parens_;
  if (this != internal_default_instance()) delete second_media_in_parens_;
}

void MediaOr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MediaOr::descriptor() {
  ::protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MediaOr& MediaOr::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_css_2eproto::scc_info_MediaAnd.base);
  return *internal_default_instance();
}


void MediaOr::Clear() {
// @@protoc_insertion_point(message_clear_start:css_proto_converter.MediaOr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  media_in_parens_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(first_media_in_parens_ != NULL);
      first_media_in_parens_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(second_media_in_parens_ != NULL);
      second_media_in_parens_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MediaOr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:css_proto_converter.MediaOr)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .css_proto_converter.MediaInParens first_media_in_parens = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_first_media_in_parens()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .css_proto_converter.MediaInParens second_media_in_parens = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_second_media_in_parens()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .css_proto_converter.MediaInParens media_in_parens_list = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_media_in_parens_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:css_proto_converter.MediaOr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:css_proto_converter.MediaOr)
  return false;
#undef DO_
}

void MediaOr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:css_proto_converter.MediaOr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .css_proto_converter.MediaInParens first_media_in_parens = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_first_media_in_parens(), output);
  }

  // required .css_proto_converter.MediaInParens second_media_in_parens = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_second_media_in_parens(), output);
  }

  // repeated .css_proto_converter.MediaInParens media_in_parens_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->media_in_parens_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->media_in_parens_list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:css_proto_converter.MediaOr)
}

::google::protobuf::uint8* MediaOr::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:css_proto_converter.MediaOr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .css_proto_converter.MediaInParens first_media_in_parens = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_first_media_in_parens(), deterministic, target);
  }

  // required .css_proto_converter.MediaInParens second_media_in_parens = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_second_media_in_parens(), deterministic, target);
  }

  // repeated .css_proto_converter.MediaInParens media_in_parens_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->media_in_parens_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->media_in_parens_list(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:css_proto_converter.MediaOr)
  return target;
}

size_t MediaOr::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:css_proto_converter.MediaOr)
  size_t total_size = 0;

  if (has_first_media_in_parens()) {
    // required .css_proto_converter.MediaInParens first_media_in_parens = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *first_media_in_parens_);
  }

  if (has_second_media_in_parens()) {
    // required .css_proto_converter.MediaInParens second_media_in_parens = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *second_media_in_parens_);
  }

  return total_size;
}
size_t MediaOr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:css_proto_converter.MediaOr)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .css_proto_converter.MediaInParens first_media_in_parens = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *first_media_in_parens_);

    // required .css_proto_converter.MediaInParens second_media_in_parens = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *second_media_in_parens_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .css_proto_converter.MediaInParens media_in_parens_list = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->media_in_parens_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->media_in_parens_list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MediaOr::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:css_proto_converter.MediaOr)
  GOOGLE_DCHECK_NE(&from, this);
  const MediaOr* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MediaOr>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:css_proto_converter.MediaOr)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:css_proto_converter.MediaOr)
    MergeFrom(*source);
  }
}

void MediaOr::MergeFrom(const MediaOr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:css_proto_converter.MediaOr)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  media_in_parens_list_.MergeFrom(from.media_in_parens_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_first_media_in_parens()->::css_proto_converter::MediaInParens::MergeFrom(from.first_media_in_parens());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_second_media_in_parens()->::css_proto_converter::MediaInParens::MergeFrom(from.second_media_in_parens());
    }
  }
}

void MediaOr::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:css_proto_converter.MediaOr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MediaOr::CopyFrom(const MediaOr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:css_proto_converter.MediaOr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MediaOr::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->media_in_parens_list())) return false;
  if (has_first_media_in_parens()) {
    if (!this->first_media_in_parens_->IsInitialized()) return false;
  }
  if (has_second_media_in_parens()) {
    if (!this->second_media_in_parens_->IsInitialized()) return false;
  }
  return true;
}

void MediaOr::Swap(MediaOr* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MediaOr::InternalSwap(MediaOr* other) {
  using std::swap;
  CastToBase(&media_in_parens_list_)->InternalSwap(CastToBase(&other->media_in_parens_list_));
  swap(first_media_in_parens_, other->first_media_in_parens_);
  swap(second_media_in_parens_, other->second_media_in_parens_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MediaOr::GetMetadata() const {
  protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MediaInParens::InitAsDefaultInstance() {
  ::css_proto_converter::_MediaInParens_default_instance_._instance.get_mutable()->media_feature_ = const_cast< ::css_proto_converter::MediaFeature*>(
      ::css_proto_converter::MediaFeature::internal_default_instance());
  ::css_proto_converter::_MediaInParens_default_instance_._instance.get_mutable()->media_condition_ = const_cast< ::css_proto_converter::MediaCondition*>(
      ::css_proto_converter::MediaCondition::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MediaInParens::kMediaFeatureFieldNumber;
const int MediaInParens::kMediaConditionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MediaInParens::MediaInParens()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_css_2eproto::scc_info_MediaAnd.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:css_proto_converter.MediaInParens)
}
MediaInParens::MediaInParens(const MediaInParens& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_media_feature()) {
    media_feature_ = new ::css_proto_converter::MediaFeature(*from.media_feature_);
  } else {
    media_feature_ = NULL;
  }
  if (from.has_media_condition()) {
    media_condition_ = new ::css_proto_converter::MediaCondition(*from.media_condition_);
  } else {
    media_condition_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:css_proto_converter.MediaInParens)
}

void MediaInParens::SharedCtor() {
  ::memset(&media_feature_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&media_condition_) -
      reinterpret_cast<char*>(&media_feature_)) + sizeof(media_condition_));
}

MediaInParens::~MediaInParens() {
  // @@protoc_insertion_point(destructor:css_proto_converter.MediaInParens)
  SharedDtor();
}

void MediaInParens::SharedDtor() {
  if (this != internal_default_instance()) delete media_feature_;
  if (this != internal_default_instance()) delete media_condition_;
}

void MediaInParens::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MediaInParens::descriptor() {
  ::protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MediaInParens& MediaInParens::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_css_2eproto::scc_info_MediaAnd.base);
  return *internal_default_instance();
}


void MediaInParens::Clear() {
// @@protoc_insertion_point(message_clear_start:css_proto_converter.MediaInParens)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(media_feature_ != NULL);
      media_feature_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(media_condition_ != NULL);
      media_condition_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MediaInParens::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:css_proto_converter.MediaInParens)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .css_proto_converter.MediaFeature media_feature = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_media_feature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .css_proto_converter.MediaCondition media_condition = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_media_condition()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:css_proto_converter.MediaInParens)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:css_proto_converter.MediaInParens)
  return false;
#undef DO_
}

void MediaInParens::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:css_proto_converter.MediaInParens)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .css_proto_converter.MediaFeature media_feature = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_media_feature(), output);
  }

  // optional .css_proto_converter.MediaCondition media_condition = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_media_condition(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:css_proto_converter.MediaInParens)
}

::google::protobuf::uint8* MediaInParens::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:css_proto_converter.MediaInParens)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .css_proto_converter.MediaFeature media_feature = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_media_feature(), deterministic, target);
  }

  // optional .css_proto_converter.MediaCondition media_condition = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_media_condition(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:css_proto_converter.MediaInParens)
  return target;
}

size_t MediaInParens::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:css_proto_converter.MediaInParens)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .css_proto_converter.MediaFeature media_feature = 1;
  if (has_media_feature()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *media_feature_);
  }
  // optional .css_proto_converter.MediaCondition media_condition = 2;
  if (has_media_condition()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *media_condition_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MediaInParens::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:css_proto_converter.MediaInParens)
  GOOGLE_DCHECK_NE(&from, this);
  const MediaInParens* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MediaInParens>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:css_proto_converter.MediaInParens)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:css_proto_converter.MediaInParens)
    MergeFrom(*source);
  }
}

void MediaInParens::MergeFrom(const MediaInParens& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:css_proto_converter.MediaInParens)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_media_feature()->::css_proto_converter::MediaFeature::MergeFrom(from.media_feature());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_media_condition()->::css_proto_converter::MediaCondition::MergeFrom(from.media_condition());
    }
  }
}

void MediaInParens::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:css_proto_converter.MediaInParens)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MediaInParens::CopyFrom(const MediaInParens& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:css_proto_converter.MediaInParens)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MediaInParens::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_media_feature()) {
    if (!this->media_feature_->IsInitialized()) return false;
  }
  if (has_media_condition()) {
    if (!this->media_condition_->IsInitialized()) return false;
  }
  return true;
}

void MediaInParens::Swap(MediaInParens* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MediaInParens::InternalSwap(MediaInParens* other) {
  using std::swap;
  swap(media_feature_, other->media_feature_);
  swap(media_condition_, other->media_condition_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MediaInParens::GetMetadata() const {
  protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MediaFeature::InitAsDefaultInstance() {
  ::css_proto_converter::_MediaFeature_default_instance_._instance.get_mutable()->mf_plain_ = const_cast< ::css_proto_converter::MfPlain*>(
      ::css_proto_converter::MfPlain::internal_default_instance());
  ::css_proto_converter::_MediaFeature_default_instance_._instance.get_mutable()->mf_bool_ = const_cast< ::css_proto_converter::MfBool*>(
      ::css_proto_converter::MfBool::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MediaFeature::kMfPlainFieldNumber;
const int MediaFeature::kMfBoolFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MediaFeature::MediaFeature()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_css_2eproto::scc_info_MediaFeature.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:css_proto_converter.MediaFeature)
}
MediaFeature::MediaFeature(const MediaFeature& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_mf_plain()) {
    mf_plain_ = new ::css_proto_converter::MfPlain(*from.mf_plain_);
  } else {
    mf_plain_ = NULL;
  }
  if (from.has_mf_bool()) {
    mf_bool_ = new ::css_proto_converter::MfBool(*from.mf_bool_);
  } else {
    mf_bool_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:css_proto_converter.MediaFeature)
}

void MediaFeature::SharedCtor() {
  ::memset(&mf_plain_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mf_bool_) -
      reinterpret_cast<char*>(&mf_plain_)) + sizeof(mf_bool_));
}

MediaFeature::~MediaFeature() {
  // @@protoc_insertion_point(destructor:css_proto_converter.MediaFeature)
  SharedDtor();
}

void MediaFeature::SharedDtor() {
  if (this != internal_default_instance()) delete mf_plain_;
  if (this != internal_default_instance()) delete mf_bool_;
}

void MediaFeature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MediaFeature::descriptor() {
  ::protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MediaFeature& MediaFeature::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_css_2eproto::scc_info_MediaFeature.base);
  return *internal_default_instance();
}


void MediaFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:css_proto_converter.MediaFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(mf_plain_ != NULL);
      mf_plain_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(mf_bool_ != NULL);
      mf_bool_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MediaFeature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:css_proto_converter.MediaFeature)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .css_proto_converter.MfPlain mf_plain = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_mf_plain()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .css_proto_converter.MfBool mf_bool = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_mf_bool()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:css_proto_converter.MediaFeature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:css_proto_converter.MediaFeature)
  return false;
#undef DO_
}

void MediaFeature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:css_proto_converter.MediaFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .css_proto_converter.MfPlain mf_plain = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_mf_plain(), output);
  }

  // optional .css_proto_converter.MfBool mf_bool = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_mf_bool(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:css_proto_converter.MediaFeature)
}

::google::protobuf::uint8* MediaFeature::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:css_proto_converter.MediaFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .css_proto_converter.MfPlain mf_plain = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_mf_plain(), deterministic, target);
  }

  // optional .css_proto_converter.MfBool mf_bool = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_mf_bool(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:css_proto_converter.MediaFeature)
  return target;
}

size_t MediaFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:css_proto_converter.MediaFeature)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .css_proto_converter.MfPlain mf_plain = 1;
  if (has_mf_plain()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *mf_plain_);
  }
  // optional .css_proto_converter.MfBool mf_bool = 2;
  if (has_mf_bool()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *mf_bool_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MediaFeature::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:css_proto_converter.MediaFeature)
  GOOGLE_DCHECK_NE(&from, this);
  const MediaFeature* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MediaFeature>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:css_proto_converter.MediaFeature)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:css_proto_converter.MediaFeature)
    MergeFrom(*source);
  }
}

void MediaFeature::MergeFrom(const MediaFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:css_proto_converter.MediaFeature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_mf_plain()->::css_proto_converter::MfPlain::MergeFrom(from.mf_plain());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_mf_bool()->::css_proto_converter::MfBool::MergeFrom(from.mf_bool());
    }
  }
}

void MediaFeature::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:css_proto_converter.MediaFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MediaFeature::CopyFrom(const MediaFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:css_proto_converter.MediaFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MediaFeature::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_mf_plain()) {
    if (!this->mf_plain_->IsInitialized()) return false;
  }
  if (has_mf_bool()) {
    if (!this->mf_bool_->IsInitialized()) return false;
  }
  return true;
}

void MediaFeature::Swap(MediaFeature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MediaFeature::InternalSwap(MediaFeature* other) {
  using std::swap;
  swap(mf_plain_, other->mf_plain_);
  swap(mf_bool_, other->mf_bool_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MediaFeature::GetMetadata() const {
  protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MfPlain::InitAsDefaultInstance() {
  ::css_proto_converter::_MfPlain_default_instance_._instance.get_mutable()->property_ = const_cast< ::css_proto_converter::MfName*>(
      ::css_proto_converter::MfName::internal_default_instance());
  ::css_proto_converter::_MfPlain_default_instance_._instance.get_mutable()->value_ = const_cast< ::css_proto_converter::MfValue*>(
      ::css_proto_converter::MfValue::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MfPlain::kPropertyFieldNumber;
const int MfPlain::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MfPlain::MfPlain()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_css_2eproto::scc_info_MfPlain.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:css_proto_converter.MfPlain)
}
MfPlain::MfPlain(const MfPlain& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_property()) {
    property_ = new ::css_proto_converter::MfName(*from.property_);
  } else {
    property_ = NULL;
  }
  if (from.has_value()) {
    value_ = new ::css_proto_converter::MfValue(*from.value_);
  } else {
    value_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:css_proto_converter.MfPlain)
}

void MfPlain::SharedCtor() {
  ::memset(&property_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&property_)) + sizeof(value_));
}

MfPlain::~MfPlain() {
  // @@protoc_insertion_point(destructor:css_proto_converter.MfPlain)
  SharedDtor();
}

void MfPlain::SharedDtor() {
  if (this != internal_default_instance()) delete property_;
  if (this != internal_default_instance()) delete value_;
}

void MfPlain::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MfPlain::descriptor() {
  ::protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MfPlain& MfPlain::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_css_2eproto::scc_info_MfPlain.base);
  return *internal_default_instance();
}


void MfPlain::Clear() {
// @@protoc_insertion_point(message_clear_start:css_proto_converter.MfPlain)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(property_ != NULL);
      property_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(value_ != NULL);
      value_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MfPlain::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:css_proto_converter.MfPlain)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .css_proto_converter.MfName property = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_property()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .css_proto_converter.MfValue value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:css_proto_converter.MfPlain)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:css_proto_converter.MfPlain)
  return false;
#undef DO_
}

void MfPlain::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:css_proto_converter.MfPlain)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .css_proto_converter.MfName property = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_property(), output);
  }

  // required .css_proto_converter.MfValue value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:css_proto_converter.MfPlain)
}

::google::protobuf::uint8* MfPlain::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:css_proto_converter.MfPlain)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .css_proto_converter.MfName property = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_property(), deterministic, target);
  }

  // required .css_proto_converter.MfValue value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_value(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:css_proto_converter.MfPlain)
  return target;
}

size_t MfPlain::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:css_proto_converter.MfPlain)
  size_t total_size = 0;

  if (has_property()) {
    // required .css_proto_converter.MfName property = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *property_);
  }

  if (has_value()) {
    // required .css_proto_converter.MfValue value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *value_);
  }

  return total_size;
}
size_t MfPlain::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:css_proto_converter.MfPlain)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .css_proto_converter.MfName property = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *property_);

    // required .css_proto_converter.MfValue value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *value_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MfPlain::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:css_proto_converter.MfPlain)
  GOOGLE_DCHECK_NE(&from, this);
  const MfPlain* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MfPlain>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:css_proto_converter.MfPlain)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:css_proto_converter.MfPlain)
    MergeFrom(*source);
  }
}

void MfPlain::MergeFrom(const MfPlain& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:css_proto_converter.MfPlain)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_property()->::css_proto_converter::MfName::MergeFrom(from.property());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_value()->::css_proto_converter::MfValue::MergeFrom(from.value());
    }
  }
}

void MfPlain::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:css_proto_converter.MfPlain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MfPlain::CopyFrom(const MfPlain& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:css_proto_converter.MfPlain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MfPlain::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_property()) {
    if (!this->property_->IsInitialized()) return false;
  }
  if (has_value()) {
    if (!this->value_->IsInitialized()) return false;
  }
  return true;
}

void MfPlain::Swap(MfPlain* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MfPlain::InternalSwap(MfPlain* other) {
  using std::swap;
  swap(property_, other->property_);
  swap(value_, other->value_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MfPlain::GetMetadata() const {
  protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MfBool::InitAsDefaultInstance() {
  ::css_proto_converter::_MfBool_default_instance_._instance.get_mutable()->mf_name_ = const_cast< ::css_proto_converter::MfName*>(
      ::css_proto_converter::MfName::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MfBool::kMfNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MfBool::MfBool()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_css_2eproto::scc_info_MfBool.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:css_proto_converter.MfBool)
}
MfBool::MfBool(const MfBool& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_mf_name()) {
    mf_name_ = new ::css_proto_converter::MfName(*from.mf_name_);
  } else {
    mf_name_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:css_proto_converter.MfBool)
}

void MfBool::SharedCtor() {
  mf_name_ = NULL;
}

MfBool::~MfBool() {
  // @@protoc_insertion_point(destructor:css_proto_converter.MfBool)
  SharedDtor();
}

void MfBool::SharedDtor() {
  if (this != internal_default_instance()) delete mf_name_;
}

void MfBool::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MfBool::descriptor() {
  ::protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MfBool& MfBool::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_css_2eproto::scc_info_MfBool.base);
  return *internal_default_instance();
}


void MfBool::Clear() {
// @@protoc_insertion_point(message_clear_start:css_proto_converter.MfBool)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(mf_name_ != NULL);
    mf_name_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MfBool::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:css_proto_converter.MfBool)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .css_proto_converter.MfName mf_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_mf_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:css_proto_converter.MfBool)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:css_proto_converter.MfBool)
  return false;
#undef DO_
}

void MfBool::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:css_proto_converter.MfBool)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .css_proto_converter.MfName mf_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_mf_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:css_proto_converter.MfBool)
}

::google::protobuf::uint8* MfBool::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:css_proto_converter.MfBool)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .css_proto_converter.MfName mf_name = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_mf_name(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:css_proto_converter.MfBool)
  return target;
}

size_t MfBool::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:css_proto_converter.MfBool)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .css_proto_converter.MfName mf_name = 1;
  if (has_mf_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *mf_name_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MfBool::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:css_proto_converter.MfBool)
  GOOGLE_DCHECK_NE(&from, this);
  const MfBool* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MfBool>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:css_proto_converter.MfBool)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:css_proto_converter.MfBool)
    MergeFrom(*source);
  }
}

void MfBool::MergeFrom(const MfBool& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:css_proto_converter.MfBool)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_mf_name()) {
    mutable_mf_name()->::css_proto_converter::MfName::MergeFrom(from.mf_name());
  }
}

void MfBool::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:css_proto_converter.MfBool)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MfBool::CopyFrom(const MfBool& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:css_proto_converter.MfBool)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MfBool::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_mf_name()) {
    if (!this->mf_name_->IsInitialized()) return false;
  }
  return true;
}

void MfBool::Swap(MfBool* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MfBool::InternalSwap(MfBool* other) {
  using std::swap;
  swap(mf_name_, other->mf_name_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MfBool::GetMetadata() const {
  protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MfName::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MfName::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MfName::MfName()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_css_2eproto::scc_info_MfName.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:css_proto_converter.MfName)
}
MfName::MfName(const MfName& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:css_proto_converter.MfName)
}

void MfName::SharedCtor() {
  id_ = 1;
}

MfName::~MfName() {
  // @@protoc_insertion_point(destructor:css_proto_converter.MfName)
  SharedDtor();
}

void MfName::SharedDtor() {
}

void MfName::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MfName::descriptor() {
  ::protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MfName& MfName::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_css_2eproto::scc_info_MfName.base);
  return *internal_default_instance();
}


void MfName::Clear() {
// @@protoc_insertion_point(message_clear_start:css_proto_converter.MfName)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MfName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:css_proto_converter.MfName)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .css_proto_converter.MfName.ValueId id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::css_proto_converter::MfName_ValueId_IsValid(value)) {
            set_id(static_cast< ::css_proto_converter::MfName_ValueId >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:css_proto_converter.MfName)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:css_proto_converter.MfName)
  return false;
#undef DO_
}

void MfName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:css_proto_converter.MfName)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .css_proto_converter.MfName.ValueId id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:css_proto_converter.MfName)
}

::google::protobuf::uint8* MfName::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:css_proto_converter.MfName)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .css_proto_converter.MfName.ValueId id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:css_proto_converter.MfName)
  return target;
}

size_t MfName::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:css_proto_converter.MfName)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .css_proto_converter.MfName.ValueId id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->id());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MfName::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:css_proto_converter.MfName)
  GOOGLE_DCHECK_NE(&from, this);
  const MfName* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MfName>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:css_proto_converter.MfName)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:css_proto_converter.MfName)
    MergeFrom(*source);
  }
}

void MfName::MergeFrom(const MfName& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:css_proto_converter.MfName)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_id()) {
    set_id(from.id());
  }
}

void MfName::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:css_proto_converter.MfName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MfName::CopyFrom(const MfName& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:css_proto_converter.MfName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MfName::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void MfName::Swap(MfName* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MfName::InternalSwap(MfName* other) {
  using std::swap;
  swap(id_, other->id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MfName::GetMetadata() const {
  protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MfValue::InitAsDefaultInstance() {
  ::css_proto_converter::_MfValue_default_instance_._instance.get_mutable()->num_ = const_cast< ::css_proto_converter::Num*>(
      ::css_proto_converter::Num::internal_default_instance());
  ::css_proto_converter::_MfValue_default_instance_.length_ = const_cast< ::css_proto_converter::Length*>(
      ::css_proto_converter::Length::internal_default_instance());
  ::css_proto_converter::_MfValue_default_instance_.ident_ = const_cast< ::css_proto_converter::Ident*>(
      ::css_proto_converter::Ident::internal_default_instance());
}
void MfValue::set_allocated_length(::css_proto_converter::Length* length) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_rhs();
  if (length) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      length = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, length, submessage_arena);
    }
    set_has_length();
    rhs_.length_ = length;
  }
  // @@protoc_insertion_point(field_set_allocated:css_proto_converter.MfValue.length)
}
void MfValue::set_allocated_ident(::css_proto_converter::Ident* ident) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_rhs();
  if (ident) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ident = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ident, submessage_arena);
    }
    set_has_ident();
    rhs_.ident_ = ident;
  }
  // @@protoc_insertion_point(field_set_allocated:css_proto_converter.MfValue.ident)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MfValue::kNumFieldNumber;
const int MfValue::kLengthFieldNumber;
const int MfValue::kIdentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MfValue::MfValue()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_css_2eproto::scc_info_MfValue.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:css_proto_converter.MfValue)
}
MfValue::MfValue(const MfValue& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_num()) {
    num_ = new ::css_proto_converter::Num(*from.num_);
  } else {
    num_ = NULL;
  }
  clear_has_rhs();
  switch (from.rhs_case()) {
    case kLength: {
      mutable_length()->::css_proto_converter::Length::MergeFrom(from.length());
      break;
    }
    case kIdent: {
      mutable_ident()->::css_proto_converter::Ident::MergeFrom(from.ident());
      break;
    }
    case RHS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:css_proto_converter.MfValue)
}

void MfValue::SharedCtor() {
  num_ = NULL;
  clear_has_rhs();
}

MfValue::~MfValue() {
  // @@protoc_insertion_point(destructor:css_proto_converter.MfValue)
  SharedDtor();
}

void MfValue::SharedDtor() {
  if (this != internal_default_instance()) delete num_;
  if (has_rhs()) {
    clear_rhs();
  }
}

void MfValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MfValue::descriptor() {
  ::protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MfValue& MfValue::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_css_2eproto::scc_info_MfValue.base);
  return *internal_default_instance();
}


void MfValue::clear_rhs() {
// @@protoc_insertion_point(one_of_clear_start:css_proto_converter.MfValue)
  switch (rhs_case()) {
    case kLength: {
      delete rhs_.length_;
      break;
    }
    case kIdent: {
      delete rhs_.ident_;
      break;
    }
    case RHS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RHS_NOT_SET;
}


void MfValue::Clear() {
// @@protoc_insertion_point(message_clear_start:css_proto_converter.MfValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(num_ != NULL);
    num_->Clear();
  }
  clear_rhs();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MfValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:css_proto_converter.MfValue)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .css_proto_converter.Num num = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_num()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .css_proto_converter.Length length = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_length()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .css_proto_converter.Ident ident = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ident()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:css_proto_converter.MfValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:css_proto_converter.MfValue)
  return false;
#undef DO_
}

void MfValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:css_proto_converter.MfValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .css_proto_converter.Num num = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_num(), output);
  }

  switch (rhs_case()) {
    case kLength:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, this->_internal_length(), output);
      break;
    case kIdent:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        3, this->_internal_ident(), output);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:css_proto_converter.MfValue)
}

::google::protobuf::uint8* MfValue::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:css_proto_converter.MfValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .css_proto_converter.Num num = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_num(), deterministic, target);
  }

  switch (rhs_case()) {
    case kLength:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          2, this->_internal_length(), deterministic, target);
      break;
    case kIdent:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          3, this->_internal_ident(), deterministic, target);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:css_proto_converter.MfValue)
  return target;
}

size_t MfValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:css_proto_converter.MfValue)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .css_proto_converter.Num num = 1;
  if (has_num()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *num_);
  }
  switch (rhs_case()) {
    // optional .css_proto_converter.Length length = 2;
    case kLength: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *rhs_.length_);
      break;
    }
    // optional .css_proto_converter.Ident ident = 3;
    case kIdent: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *rhs_.ident_);
      break;
    }
    case RHS_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MfValue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:css_proto_converter.MfValue)
  GOOGLE_DCHECK_NE(&from, this);
  const MfValue* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MfValue>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:css_proto_converter.MfValue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:css_proto_converter.MfValue)
    MergeFrom(*source);
  }
}

void MfValue::MergeFrom(const MfValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:css_proto_converter.MfValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_num()) {
    mutable_num()->::css_proto_converter::Num::MergeFrom(from.num());
  }
  switch (from.rhs_case()) {
    case kLength: {
      mutable_length()->::css_proto_converter::Length::MergeFrom(from.length());
      break;
    }
    case kIdent: {
      mutable_ident()->::css_proto_converter::Ident::MergeFrom(from.ident());
      break;
    }
    case RHS_NOT_SET: {
      break;
    }
  }
}

void MfValue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:css_proto_converter.MfValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MfValue::CopyFrom(const MfValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:css_proto_converter.MfValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MfValue::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_num()) {
    if (!this->num_->IsInitialized()) return false;
  }
  switch (rhs_case()) {
    case kLength: {
      if (has_length()) {
        if (!this->length().IsInitialized()) return false;
      }
      break;
    }
    case kIdent: {
      if (has_ident()) {
        if (!this->ident().IsInitialized()) return false;
      }
      break;
    }
    case RHS_NOT_SET: {
      break;
    }
  }
  return true;
}

void MfValue::Swap(MfValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MfValue::InternalSwap(MfValue* other) {
  using std::swap;
  swap(num_, other->num_);
  swap(rhs_, other->rhs_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MfValue::GetMetadata() const {
  protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Namespace::InitAsDefaultInstance() {
  ::css_proto_converter::_Namespace_default_instance_._instance.get_mutable()->namespace_prefix_ = const_cast< ::css_proto_converter::NamespacePrefix*>(
      ::css_proto_converter::NamespacePrefix::internal_default_instance());
  ::css_proto_converter::_Namespace_default_instance_.string_ = const_cast< ::css_proto_converter::String*>(
      ::css_proto_converter::String::internal_default_instance());
  ::css_proto_converter::_Namespace_default_instance_.uri_ = const_cast< ::css_proto_converter::Uri*>(
      ::css_proto_converter::Uri::internal_default_instance());
}
void Namespace::set_allocated_string(::css_proto_converter::String* string) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_rhs();
  if (string) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      string = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, string, submessage_arena);
    }
    set_has_string();
    rhs_.string_ = string;
  }
  // @@protoc_insertion_point(field_set_allocated:css_proto_converter.Namespace.string)
}
void Namespace::set_allocated_uri(::css_proto_converter::Uri* uri) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_rhs();
  if (uri) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      uri = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, uri, submessage_arena);
    }
    set_has_uri();
    rhs_.uri_ = uri;
  }
  // @@protoc_insertion_point(field_set_allocated:css_proto_converter.Namespace.uri)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Namespace::kNamespacePrefixFieldNumber;
const int Namespace::kStringFieldNumber;
const int Namespace::kUriFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Namespace::Namespace()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_css_2eproto::scc_info_Namespace.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:css_proto_converter.Namespace)
}
Namespace::Namespace(const Namespace& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_namespace_prefix()) {
    namespace_prefix_ = new ::css_proto_converter::NamespacePrefix(*from.namespace_prefix_);
  } else {
    namespace_prefix_ = NULL;
  }
  clear_has_rhs();
  switch (from.rhs_case()) {
    case kString: {
      mutable_string()->::css_proto_converter::String::MergeFrom(from.string());
      break;
    }
    case kUri: {
      mutable_uri()->::css_proto_converter::Uri::MergeFrom(from.uri());
      break;
    }
    case RHS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:css_proto_converter.Namespace)
}

void Namespace::SharedCtor() {
  namespace_prefix_ = NULL;
  clear_has_rhs();
}

Namespace::~Namespace() {
  // @@protoc_insertion_point(destructor:css_proto_converter.Namespace)
  SharedDtor();
}

void Namespace::SharedDtor() {
  if (this != internal_default_instance()) delete namespace_prefix_;
  if (has_rhs()) {
    clear_rhs();
  }
}

void Namespace::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Namespace::descriptor() {
  ::protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Namespace& Namespace::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_css_2eproto::scc_info_Namespace.base);
  return *internal_default_instance();
}


void Namespace::clear_rhs() {
// @@protoc_insertion_point(one_of_clear_start:css_proto_converter.Namespace)
  switch (rhs_case()) {
    case kString: {
      delete rhs_.string_;
      break;
    }
    case kUri: {
      delete rhs_.uri_;
      break;
    }
    case RHS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RHS_NOT_SET;
}


void Namespace::Clear() {
// @@protoc_insertion_point(message_clear_start:css_proto_converter.Namespace)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(namespace_prefix_ != NULL);
    namespace_prefix_->Clear();
  }
  clear_rhs();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Namespace::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:css_proto_converter.Namespace)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .css_proto_converter.NamespacePrefix namespace_prefix = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_namespace_prefix()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .css_proto_converter.String string = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_string()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .css_proto_converter.Uri uri = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_uri()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:css_proto_converter.Namespace)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:css_proto_converter.Namespace)
  return false;
#undef DO_
}

void Namespace::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:css_proto_converter.Namespace)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .css_proto_converter.NamespacePrefix namespace_prefix = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_namespace_prefix(), output);
  }

  switch (rhs_case()) {
    case kString:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, this->_internal_string(), output);
      break;
    case kUri:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        3, this->_internal_uri(), output);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:css_proto_converter.Namespace)
}

::google::protobuf::uint8* Namespace::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:css_proto_converter.Namespace)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .css_proto_converter.NamespacePrefix namespace_prefix = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_namespace_prefix(), deterministic, target);
  }

  switch (rhs_case()) {
    case kString:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          2, this->_internal_string(), deterministic, target);
      break;
    case kUri:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          3, this->_internal_uri(), deterministic, target);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:css_proto_converter.Namespace)
  return target;
}

size_t Namespace::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:css_proto_converter.Namespace)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .css_proto_converter.NamespacePrefix namespace_prefix = 1;
  if (has_namespace_prefix()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *namespace_prefix_);
  }

  switch (rhs_case()) {
    // optional .css_proto_converter.String string = 2;
    case kString: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *rhs_.string_);
      break;
    }
    // optional .css_proto_converter.Uri uri = 3;
    case kUri: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *rhs_.uri_);
      break;
    }
    case RHS_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Namespace::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:css_proto_converter.Namespace)
  GOOGLE_DCHECK_NE(&from, this);
  const Namespace* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Namespace>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:css_proto_converter.Namespace)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:css_proto_converter.Namespace)
    MergeFrom(*source);
  }
}

void Namespace::MergeFrom(const Namespace& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:css_proto_converter.Namespace)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_namespace_prefix()) {
    mutable_namespace_prefix()->::css_proto_converter::NamespacePrefix::MergeFrom(from.namespace_prefix());
  }
  switch (from.rhs_case()) {
    case kString: {
      mutable_string()->::css_proto_converter::String::MergeFrom(from.string());
      break;
    }
    case kUri: {
      mutable_uri()->::css_proto_converter::Uri::MergeFrom(from.uri());
      break;
    }
    case RHS_NOT_SET: {
      break;
    }
  }
}

void Namespace::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:css_proto_converter.Namespace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Namespace::CopyFrom(const Namespace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:css_proto_converter.Namespace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Namespace::IsInitialized() const {
  if (has_namespace_prefix()) {
    if (!this->namespace_prefix_->IsInitialized()) return false;
  }
  switch (rhs_case()) {
    case kString: {
      if (has_string()) {
        if (!this->string().IsInitialized()) return false;
      }
      break;
    }
    case kUri: {
      break;
    }
    case RHS_NOT_SET: {
      break;
    }
  }
  return true;
}

void Namespace::Swap(Namespace* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Namespace::InternalSwap(Namespace* other) {
  using std::swap;
  swap(namespace_prefix_, other->namespace_prefix_);
  swap(rhs_, other->rhs_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Namespace::GetMetadata() const {
  protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void NamespacePrefix::InitAsDefaultInstance() {
  ::css_proto_converter::_NamespacePrefix_default_instance_._instance.get_mutable()->ident_ = const_cast< ::css_proto_converter::Ident*>(
      ::css_proto_converter::Ident::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NamespacePrefix::kIdentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NamespacePrefix::NamespacePrefix()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_css_2eproto::scc_info_NamespacePrefix.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:css_proto_converter.NamespacePrefix)
}
NamespacePrefix::NamespacePrefix(const NamespacePrefix& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ident()) {
    ident_ = new ::css_proto_converter::Ident(*from.ident_);
  } else {
    ident_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:css_proto_converter.NamespacePrefix)
}

void NamespacePrefix::SharedCtor() {
  ident_ = NULL;
}

NamespacePrefix::~NamespacePrefix() {
  // @@protoc_insertion_point(destructor:css_proto_converter.NamespacePrefix)
  SharedDtor();
}

void NamespacePrefix::SharedDtor() {
  if (this != internal_default_instance()) delete ident_;
}

void NamespacePrefix::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* NamespacePrefix::descriptor() {
  ::protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NamespacePrefix& NamespacePrefix::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_css_2eproto::scc_info_NamespacePrefix.base);
  return *internal_default_instance();
}


void NamespacePrefix::Clear() {
// @@protoc_insertion_point(message_clear_start:css_proto_converter.NamespacePrefix)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(ident_ != NULL);
    ident_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NamespacePrefix::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:css_proto_converter.NamespacePrefix)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .css_proto_converter.Ident ident = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ident()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:css_proto_converter.NamespacePrefix)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:css_proto_converter.NamespacePrefix)
  return false;
#undef DO_
}

void NamespacePrefix::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:css_proto_converter.NamespacePrefix)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .css_proto_converter.Ident ident = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_ident(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:css_proto_converter.NamespacePrefix)
}

::google::protobuf::uint8* NamespacePrefix::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:css_proto_converter.NamespacePrefix)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .css_proto_converter.Ident ident = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_ident(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:css_proto_converter.NamespacePrefix)
  return target;
}

size_t NamespacePrefix::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:css_proto_converter.NamespacePrefix)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .css_proto_converter.Ident ident = 1;
  if (has_ident()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ident_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NamespacePrefix::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:css_proto_converter.NamespacePrefix)
  GOOGLE_DCHECK_NE(&from, this);
  const NamespacePrefix* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NamespacePrefix>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:css_proto_converter.NamespacePrefix)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:css_proto_converter.NamespacePrefix)
    MergeFrom(*source);
  }
}

void NamespacePrefix::MergeFrom(const NamespacePrefix& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:css_proto_converter.NamespacePrefix)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ident()) {
    mutable_ident()->::css_proto_converter::Ident::MergeFrom(from.ident());
  }
}

void NamespacePrefix::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:css_proto_converter.NamespacePrefix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NamespacePrefix::CopyFrom(const NamespacePrefix& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:css_proto_converter.NamespacePrefix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NamespacePrefix::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_ident()) {
    if (!this->ident_->IsInitialized()) return false;
  }
  return true;
}

void NamespacePrefix::Swap(NamespacePrefix* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NamespacePrefix::InternalSwap(NamespacePrefix* other) {
  using std::swap;
  swap(ident_, other->ident_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata NamespacePrefix::GetMetadata() const {
  protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Media::InitAsDefaultInstance() {
  ::css_proto_converter::_Media_default_instance_._instance.get_mutable()->media_query_list_ = const_cast< ::css_proto_converter::MediaQueryList*>(
      ::css_proto_converter::MediaQueryList::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Media::kMediaQueryListFieldNumber;
const int Media::kRulesetsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Media::Media()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_css_2eproto::scc_info_Media.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:css_proto_converter.Media)
}
Media::Media(const Media& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      rulesets_(from.rulesets_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_media_query_list()) {
    media_query_list_ = new ::css_proto_converter::MediaQueryList(*from.media_query_list_);
  } else {
    media_query_list_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:css_proto_converter.Media)
}

void Media::SharedCtor() {
  media_query_list_ = NULL;
}

Media::~Media() {
  // @@protoc_insertion_point(destructor:css_proto_converter.Media)
  SharedDtor();
}

void Media::SharedDtor() {
  if (this != internal_default_instance()) delete media_query_list_;
}

void Media::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Media::descriptor() {
  ::protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Media& Media::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_css_2eproto::scc_info_Media.base);
  return *internal_default_instance();
}


void Media::Clear() {
// @@protoc_insertion_point(message_clear_start:css_proto_converter.Media)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rulesets_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(media_query_list_ != NULL);
    media_query_list_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Media::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:css_proto_converter.Media)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .css_proto_converter.MediaQueryList media_query_list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_media_query_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .css_proto_converter.Ruleset rulesets = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_rulesets()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:css_proto_converter.Media)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:css_proto_converter.Media)
  return false;
#undef DO_
}

void Media::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:css_proto_converter.Media)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .css_proto_converter.MediaQueryList media_query_list = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_media_query_list(), output);
  }

  // repeated .css_proto_converter.Ruleset rulesets = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rulesets_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->rulesets(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:css_proto_converter.Media)
}

::google::protobuf::uint8* Media::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:css_proto_converter.Media)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .css_proto_converter.MediaQueryList media_query_list = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_media_query_list(), deterministic, target);
  }

  // repeated .css_proto_converter.Ruleset rulesets = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rulesets_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->rulesets(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:css_proto_converter.Media)
  return target;
}

size_t Media::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:css_proto_converter.Media)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .css_proto_converter.MediaQueryList media_query_list = 1;
  if (has_media_query_list()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *media_query_list_);
  }
  // repeated .css_proto_converter.Ruleset rulesets = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->rulesets_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->rulesets(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Media::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:css_proto_converter.Media)
  GOOGLE_DCHECK_NE(&from, this);
  const Media* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Media>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:css_proto_converter.Media)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:css_proto_converter.Media)
    MergeFrom(*source);
  }
}

void Media::MergeFrom(const Media& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:css_proto_converter.Media)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rulesets_.MergeFrom(from.rulesets_);
  if (from.has_media_query_list()) {
    mutable_media_query_list()->::css_proto_converter::MediaQueryList::MergeFrom(from.media_query_list());
  }
}

void Media::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:css_proto_converter.Media)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Media::CopyFrom(const Media& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:css_proto_converter.Media)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Media::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->rulesets())) return false;
  if (has_media_query_list()) {
    if (!this->media_query_list_->IsInitialized()) return false;
  }
  return true;
}

void Media::Swap(Media* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Media::InternalSwap(Media* other) {
  using std::swap;
  CastToBase(&rulesets_)->InternalSwap(CastToBase(&other->rulesets_));
  swap(media_query_list_, other->media_query_list_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Media::GetMetadata() const {
  protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Page::InitAsDefaultInstance() {
  ::css_proto_converter::_Page_default_instance_._instance.get_mutable()->ident_ = const_cast< ::css_proto_converter::Ident*>(
      ::css_proto_converter::Ident::internal_default_instance());
  ::css_proto_converter::_Page_default_instance_._instance.get_mutable()->pseudo_page_ = const_cast< ::css_proto_converter::PseudoPage*>(
      ::css_proto_converter::PseudoPage::internal_default_instance());
  ::css_proto_converter::_Page_default_instance_._instance.get_mutable()->declaration_list_ = const_cast< ::css_proto_converter::DeclarationList*>(
      ::css_proto_converter::DeclarationList::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Page::kIdentFieldNumber;
const int Page::kPseudoPageFieldNumber;
const int Page::kDeclarationListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Page::Page()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_css_2eproto::scc_info_Page.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:css_proto_converter.Page)
}
Page::Page(const Page& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ident()) {
    ident_ = new ::css_proto_converter::Ident(*from.ident_);
  } else {
    ident_ = NULL;
  }
  if (from.has_pseudo_page()) {
    pseudo_page_ = new ::css_proto_converter::PseudoPage(*from.pseudo_page_);
  } else {
    pseudo_page_ = NULL;
  }
  if (from.has_declaration_list()) {
    declaration_list_ = new ::css_proto_converter::DeclarationList(*from.declaration_list_);
  } else {
    declaration_list_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:css_proto_converter.Page)
}

void Page::SharedCtor() {
  ::memset(&ident_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&declaration_list_) -
      reinterpret_cast<char*>(&ident_)) + sizeof(declaration_list_));
}

Page::~Page() {
  // @@protoc_insertion_point(destructor:css_proto_converter.Page)
  SharedDtor();
}

void Page::SharedDtor() {
  if (this != internal_default_instance()) delete ident_;
  if (this != internal_default_instance()) delete pseudo_page_;
  if (this != internal_default_instance()) delete declaration_list_;
}

void Page::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Page::descriptor() {
  ::protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Page& Page::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_css_2eproto::scc_info_Page.base);
  return *internal_default_instance();
}


void Page::Clear() {
// @@protoc_insertion_point(message_clear_start:css_proto_converter.Page)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(ident_ != NULL);
      ident_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(pseudo_page_ != NULL);
      pseudo_page_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(declaration_list_ != NULL);
      declaration_list_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Page::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:css_proto_converter.Page)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .css_proto_converter.Ident ident = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ident()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .css_proto_converter.PseudoPage pseudo_page = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pseudo_page()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .css_proto_converter.DeclarationList declaration_list = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_declaration_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:css_proto_converter.Page)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:css_proto_converter.Page)
  return false;
#undef DO_
}

void Page::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:css_proto_converter.Page)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .css_proto_converter.Ident ident = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_ident(), output);
  }

  // optional .css_proto_converter.PseudoPage pseudo_page = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_pseudo_page(), output);
  }

  // required .css_proto_converter.DeclarationList declaration_list = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_declaration_list(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:css_proto_converter.Page)
}

::google::protobuf::uint8* Page::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:css_proto_converter.Page)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .css_proto_converter.Ident ident = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_ident(), deterministic, target);
  }

  // optional .css_proto_converter.PseudoPage pseudo_page = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_pseudo_page(), deterministic, target);
  }

  // required .css_proto_converter.DeclarationList declaration_list = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_declaration_list(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:css_proto_converter.Page)
  return target;
}

size_t Page::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:css_proto_converter.Page)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .css_proto_converter.DeclarationList declaration_list = 3;
  if (has_declaration_list()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *declaration_list_);
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .css_proto_converter.Ident ident = 1;
    if (has_ident()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *ident_);
    }

    // optional .css_proto_converter.PseudoPage pseudo_page = 2;
    if (has_pseudo_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *pseudo_page_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Page::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:css_proto_converter.Page)
  GOOGLE_DCHECK_NE(&from, this);
  const Page* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Page>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:css_proto_converter.Page)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:css_proto_converter.Page)
    MergeFrom(*source);
  }
}

void Page::MergeFrom(const Page& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:css_proto_converter.Page)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_ident()->::css_proto_converter::Ident::MergeFrom(from.ident());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_pseudo_page()->::css_proto_converter::PseudoPage::MergeFrom(from.pseudo_page());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_declaration_list()->::css_proto_converter::DeclarationList::MergeFrom(from.declaration_list());
    }
  }
}

void Page::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:css_proto_converter.Page)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Page::CopyFrom(const Page& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:css_proto_converter.Page)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Page::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  if (has_ident()) {
    if (!this->ident_->IsInitialized()) return false;
  }
  if (has_pseudo_page()) {
    if (!this->pseudo_page_->IsInitialized()) return false;
  }
  if (has_declaration_list()) {
    if (!this->declaration_list_->IsInitialized()) return false;
  }
  return true;
}

void Page::Swap(Page* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Page::InternalSwap(Page* other) {
  using std::swap;
  swap(ident_, other->ident_);
  swap(pseudo_page_, other->pseudo_page_);
  swap(declaration_list_, other->declaration_list_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Page::GetMetadata() const {
  protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DeclarationList::InitAsDefaultInstance() {
  ::css_proto_converter::_DeclarationList_default_instance_._instance.get_mutable()->first_declaration_ = const_cast< ::css_proto_converter::Declaration*>(
      ::css_proto_converter::Declaration::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeclarationList::kFirstDeclarationFieldNumber;
const int DeclarationList::kLaterDeclarationsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeclarationList::DeclarationList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_css_2eproto::scc_info_DeclarationList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:css_proto_converter.DeclarationList)
}
DeclarationList::DeclarationList(const DeclarationList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      later_declarations_(from.later_declarations_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_first_declaration()) {
    first_declaration_ = new ::css_proto_converter::Declaration(*from.first_declaration_);
  } else {
    first_declaration_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:css_proto_converter.DeclarationList)
}

void DeclarationList::SharedCtor() {
  first_declaration_ = NULL;
}

DeclarationList::~DeclarationList() {
  // @@protoc_insertion_point(destructor:css_proto_converter.DeclarationList)
  SharedDtor();
}

void DeclarationList::SharedDtor() {
  if (this != internal_default_instance()) delete first_declaration_;
}

void DeclarationList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DeclarationList::descriptor() {
  ::protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DeclarationList& DeclarationList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_css_2eproto::scc_info_DeclarationList.base);
  return *internal_default_instance();
}


void DeclarationList::Clear() {
// @@protoc_insertion_point(message_clear_start:css_proto_converter.DeclarationList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  later_declarations_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(first_declaration_ != NULL);
    first_declaration_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DeclarationList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:css_proto_converter.DeclarationList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .css_proto_converter.Declaration first_declaration = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_first_declaration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .css_proto_converter.Declaration later_declarations = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_later_declarations()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:css_proto_converter.DeclarationList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:css_proto_converter.DeclarationList)
  return false;
#undef DO_
}

void DeclarationList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:css_proto_converter.DeclarationList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .css_proto_converter.Declaration first_declaration = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_first_declaration(), output);
  }

  // repeated .css_proto_converter.Declaration later_declarations = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->later_declarations_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->later_declarations(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:css_proto_converter.DeclarationList)
}

::google::protobuf::uint8* DeclarationList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:css_proto_converter.DeclarationList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .css_proto_converter.Declaration first_declaration = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_first_declaration(), deterministic, target);
  }

  // repeated .css_proto_converter.Declaration later_declarations = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->later_declarations_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->later_declarations(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:css_proto_converter.DeclarationList)
  return target;
}

size_t DeclarationList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:css_proto_converter.DeclarationList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .css_proto_converter.Declaration first_declaration = 1;
  if (has_first_declaration()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *first_declaration_);
  }
  // repeated .css_proto_converter.Declaration later_declarations = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->later_declarations_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->later_declarations(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeclarationList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:css_proto_converter.DeclarationList)
  GOOGLE_DCHECK_NE(&from, this);
  const DeclarationList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeclarationList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:css_proto_converter.DeclarationList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:css_proto_converter.DeclarationList)
    MergeFrom(*source);
  }
}

void DeclarationList::MergeFrom(const DeclarationList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:css_proto_converter.DeclarationList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  later_declarations_.MergeFrom(from.later_declarations_);
  if (from.has_first_declaration()) {
    mutable_first_declaration()->::css_proto_converter::Declaration::MergeFrom(from.first_declaration());
  }
}

void DeclarationList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:css_proto_converter.DeclarationList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeclarationList::CopyFrom(const DeclarationList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:css_proto_converter.DeclarationList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeclarationList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->later_declarations())) return false;
  if (has_first_declaration()) {
    if (!this->first_declaration_->IsInitialized()) return false;
  }
  return true;
}

void DeclarationList::Swap(DeclarationList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeclarationList::InternalSwap(DeclarationList* other) {
  using std::swap;
  CastToBase(&later_declarations_)->InternalSwap(CastToBase(&other->later_declarations_));
  swap(first_declaration_, other->first_declaration_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DeclarationList::GetMetadata() const {
  protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PseudoPage::InitAsDefaultInstance() {
  ::css_proto_converter::_PseudoPage_default_instance_._instance.get_mutable()->ident_ = const_cast< ::css_proto_converter::Ident*>(
      ::css_proto_converter::Ident::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PseudoPage::kIdentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PseudoPage::PseudoPage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_css_2eproto::scc_info_PseudoPage.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:css_proto_converter.PseudoPage)
}
PseudoPage::PseudoPage(const PseudoPage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ident()) {
    ident_ = new ::css_proto_converter::Ident(*from.ident_);
  } else {
    ident_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:css_proto_converter.PseudoPage)
}

void PseudoPage::SharedCtor() {
  ident_ = NULL;
}

PseudoPage::~PseudoPage() {
  // @@protoc_insertion_point(destructor:css_proto_converter.PseudoPage)
  SharedDtor();
}

void PseudoPage::SharedDtor() {
  if (this != internal_default_instance()) delete ident_;
}

void PseudoPage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PseudoPage::descriptor() {
  ::protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PseudoPage& PseudoPage::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_css_2eproto::scc_info_PseudoPage.base);
  return *internal_default_instance();
}


void PseudoPage::Clear() {
// @@protoc_insertion_point(message_clear_start:css_proto_converter.PseudoPage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(ident_ != NULL);
    ident_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PseudoPage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:css_proto_converter.PseudoPage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .css_proto_converter.Ident ident = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ident()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:css_proto_converter.PseudoPage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:css_proto_converter.PseudoPage)
  return false;
#undef DO_
}

void PseudoPage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:css_proto_converter.PseudoPage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .css_proto_converter.Ident ident = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_ident(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:css_proto_converter.PseudoPage)
}

::google::protobuf::uint8* PseudoPage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:css_proto_converter.PseudoPage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .css_proto_converter.Ident ident = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_ident(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:css_proto_converter.PseudoPage)
  return target;
}

size_t PseudoPage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:css_proto_converter.PseudoPage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .css_proto_converter.Ident ident = 1;
  if (has_ident()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ident_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PseudoPage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:css_proto_converter.PseudoPage)
  GOOGLE_DCHECK_NE(&from, this);
  const PseudoPage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PseudoPage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:css_proto_converter.PseudoPage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:css_proto_converter.PseudoPage)
    MergeFrom(*source);
  }
}

void PseudoPage::MergeFrom(const PseudoPage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:css_proto_converter.PseudoPage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ident()) {
    mutable_ident()->::css_proto_converter::Ident::MergeFrom(from.ident());
  }
}

void PseudoPage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:css_proto_converter.PseudoPage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PseudoPage::CopyFrom(const PseudoPage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:css_proto_converter.PseudoPage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PseudoPage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_ident()) {
    if (!this->ident_->IsInitialized()) return false;
  }
  return true;
}

void PseudoPage::Swap(PseudoPage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PseudoPage::InternalSwap(PseudoPage* other) {
  using std::swap;
  swap(ident_, other->ident_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PseudoPage::GetMetadata() const {
  protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FontFace::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FontFace::FontFace()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_css_2eproto::scc_info_FontFace.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:css_proto_converter.FontFace)
}
FontFace::FontFace(const FontFace& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:css_proto_converter.FontFace)
}

void FontFace::SharedCtor() {
}

FontFace::~FontFace() {
  // @@protoc_insertion_point(destructor:css_proto_converter.FontFace)
  SharedDtor();
}

void FontFace::SharedDtor() {
}

void FontFace::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FontFace::descriptor() {
  ::protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FontFace& FontFace::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_css_2eproto::scc_info_FontFace.base);
  return *internal_default_instance();
}


void FontFace::Clear() {
// @@protoc_insertion_point(message_clear_start:css_proto_converter.FontFace)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FontFace::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:css_proto_converter.FontFace)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:css_proto_converter.FontFace)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:css_proto_converter.FontFace)
  return false;
#undef DO_
}

void FontFace::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:css_proto_converter.FontFace)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:css_proto_converter.FontFace)
}

::google::protobuf::uint8* FontFace::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:css_proto_converter.FontFace)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:css_proto_converter.FontFace)
  return target;
}

size_t FontFace::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:css_proto_converter.FontFace)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FontFace::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:css_proto_converter.FontFace)
  GOOGLE_DCHECK_NE(&from, this);
  const FontFace* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FontFace>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:css_proto_converter.FontFace)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:css_proto_converter.FontFace)
    MergeFrom(*source);
  }
}

void FontFace::MergeFrom(const FontFace& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:css_proto_converter.FontFace)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void FontFace::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:css_proto_converter.FontFace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FontFace::CopyFrom(const FontFace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:css_proto_converter.FontFace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FontFace::IsInitialized() const {
  return true;
}

void FontFace::Swap(FontFace* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FontFace::InternalSwap(FontFace* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FontFace::GetMetadata() const {
  protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Operator::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Operator::kAsciiValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Operator::Operator()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_css_2eproto::scc_info_Operator.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:css_proto_converter.Operator)
}
Operator::Operator(const Operator& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ascii_value_ = from.ascii_value_;
  // @@protoc_insertion_point(copy_constructor:css_proto_converter.Operator)
}

void Operator::SharedCtor() {
  ascii_value_ = 44;
}

Operator::~Operator() {
  // @@protoc_insertion_point(destructor:css_proto_converter.Operator)
  SharedDtor();
}

void Operator::SharedDtor() {
}

void Operator::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Operator::descriptor() {
  ::protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Operator& Operator::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_css_2eproto::scc_info_Operator.base);
  return *internal_default_instance();
}


void Operator::Clear() {
// @@protoc_insertion_point(message_clear_start:css_proto_converter.Operator)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ascii_value_ = 44;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Operator::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:css_proto_converter.Operator)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .css_proto_converter.Operator.AsciiValue ascii_value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::css_proto_converter::Operator_AsciiValue_IsValid(value)) {
            set_ascii_value(static_cast< ::css_proto_converter::Operator_AsciiValue >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:css_proto_converter.Operator)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:css_proto_converter.Operator)
  return false;
#undef DO_
}

void Operator::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:css_proto_converter.Operator)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .css_proto_converter.Operator.AsciiValue ascii_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ascii_value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:css_proto_converter.Operator)
}

::google::protobuf::uint8* Operator::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:css_proto_converter.Operator)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .css_proto_converter.Operator.AsciiValue ascii_value = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ascii_value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:css_proto_converter.Operator)
  return target;
}

size_t Operator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:css_proto_converter.Operator)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .css_proto_converter.Operator.AsciiValue ascii_value = 1;
  if (has_ascii_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ascii_value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Operator::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:css_proto_converter.Operator)
  GOOGLE_DCHECK_NE(&from, this);
  const Operator* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Operator>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:css_proto_converter.Operator)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:css_proto_converter.Operator)
    MergeFrom(*source);
  }
}

void Operator::MergeFrom(const Operator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:css_proto_converter.Operator)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ascii_value()) {
    set_ascii_value(from.ascii_value());
  }
}

void Operator::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:css_proto_converter.Operator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Operator::CopyFrom(const Operator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:css_proto_converter.Operator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Operator::IsInitialized() const {
  return true;
}

void Operator::Swap(Operator* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Operator::InternalSwap(Operator* other) {
  using std::swap;
  swap(ascii_value_, other->ascii_value_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Operator::GetMetadata() const {
  protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UnaryOperator::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UnaryOperator::kAsciiValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UnaryOperator::UnaryOperator()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_css_2eproto::scc_info_UnaryOperator.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:css_proto_converter.UnaryOperator)
}
UnaryOperator::UnaryOperator(const UnaryOperator& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ascii_value_ = from.ascii_value_;
  // @@protoc_insertion_point(copy_constructor:css_proto_converter.UnaryOperator)
}

void UnaryOperator::SharedCtor() {
  ascii_value_ = 43;
}

UnaryOperator::~UnaryOperator() {
  // @@protoc_insertion_point(destructor:css_proto_converter.UnaryOperator)
  SharedDtor();
}

void UnaryOperator::SharedDtor() {
}

void UnaryOperator::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UnaryOperator::descriptor() {
  ::protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UnaryOperator& UnaryOperator::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_css_2eproto::scc_info_UnaryOperator.base);
  return *internal_default_instance();
}


void UnaryOperator::Clear() {
// @@protoc_insertion_point(message_clear_start:css_proto_converter.UnaryOperator)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ascii_value_ = 43;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UnaryOperator::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:css_proto_converter.UnaryOperator)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .css_proto_converter.UnaryOperator.AsciiValue ascii_value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::css_proto_converter::UnaryOperator_AsciiValue_IsValid(value)) {
            set_ascii_value(static_cast< ::css_proto_converter::UnaryOperator_AsciiValue >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:css_proto_converter.UnaryOperator)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:css_proto_converter.UnaryOperator)
  return false;
#undef DO_
}

void UnaryOperator::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:css_proto_converter.UnaryOperator)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .css_proto_converter.UnaryOperator.AsciiValue ascii_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ascii_value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:css_proto_converter.UnaryOperator)
}

::google::protobuf::uint8* UnaryOperator::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:css_proto_converter.UnaryOperator)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .css_proto_converter.UnaryOperator.AsciiValue ascii_value = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ascii_value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:css_proto_converter.UnaryOperator)
  return target;
}

size_t UnaryOperator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:css_proto_converter.UnaryOperator)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .css_proto_converter.UnaryOperator.AsciiValue ascii_value = 1;
  if (has_ascii_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ascii_value());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnaryOperator::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:css_proto_converter.UnaryOperator)
  GOOGLE_DCHECK_NE(&from, this);
  const UnaryOperator* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UnaryOperator>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:css_proto_converter.UnaryOperator)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:css_proto_converter.UnaryOperator)
    MergeFrom(*source);
  }
}

void UnaryOperator::MergeFrom(const UnaryOperator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:css_proto_converter.UnaryOperator)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ascii_value()) {
    set_ascii_value(from.ascii_value());
  }
}

void UnaryOperator::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:css_proto_converter.UnaryOperator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnaryOperator::CopyFrom(const UnaryOperator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:css_proto_converter.UnaryOperator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnaryOperator::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void UnaryOperator::Swap(UnaryOperator* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UnaryOperator::InternalSwap(UnaryOperator* other) {
  using std::swap;
  swap(ascii_value_, other->ascii_value_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UnaryOperator::GetMetadata() const {
  protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Property::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Property::kNameIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Property::Property()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_css_2eproto::scc_info_Property.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:css_proto_converter.Property)
}
Property::Property(const Property& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_id_ = from.name_id_;
  // @@protoc_insertion_point(copy_constructor:css_proto_converter.Property)
}

void Property::SharedCtor() {
  name_id_ = 1;
}

Property::~Property() {
  // @@protoc_insertion_point(destructor:css_proto_converter.Property)
  SharedDtor();
}

void Property::SharedDtor() {
}

void Property::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Property::descriptor() {
  ::protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Property& Property::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_css_2eproto::scc_info_Property.base);
  return *internal_default_instance();
}


void Property::Clear() {
// @@protoc_insertion_point(message_clear_start:css_proto_converter.Property)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_id_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Property::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:css_proto_converter.Property)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .css_proto_converter.Property.NameId name_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::css_proto_converter::Property_NameId_IsValid(value)) {
            set_name_id(static_cast< ::css_proto_converter::Property_NameId >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:css_proto_converter.Property)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:css_proto_converter.Property)
  return false;
#undef DO_
}

void Property::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:css_proto_converter.Property)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .css_proto_converter.Property.NameId name_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->name_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:css_proto_converter.Property)
}

::google::protobuf::uint8* Property::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:css_proto_converter.Property)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .css_proto_converter.Property.NameId name_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->name_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:css_proto_converter.Property)
  return target;
}

size_t Property::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:css_proto_converter.Property)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .css_proto_converter.Property.NameId name_id = 1;
  if (has_name_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->name_id());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Property::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:css_proto_converter.Property)
  GOOGLE_DCHECK_NE(&from, this);
  const Property* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Property>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:css_proto_converter.Property)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:css_proto_converter.Property)
    MergeFrom(*source);
  }
}

void Property::MergeFrom(const Property& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:css_proto_converter.Property)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_name_id()) {
    set_name_id(from.name_id());
  }
}

void Property::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:css_proto_converter.Property)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Property::CopyFrom(const Property& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:css_proto_converter.Property)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Property::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void Property::Swap(Property* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Property::InternalSwap(Property* other) {
  using std::swap;
  swap(name_id_, other->name_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Property::GetMetadata() const {
  protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Ruleset::InitAsDefaultInstance() {
  ::css_proto_converter::_Ruleset_default_instance_._instance.get_mutable()->selector_list_ = const_cast< ::css_proto_converter::SelectorList*>(
      ::css_proto_converter::SelectorList::internal_default_instance());
  ::css_proto_converter::_Ruleset_default_instance_._instance.get_mutable()->declaration_list_ = const_cast< ::css_proto_converter::DeclarationList*>(
      ::css_proto_converter::DeclarationList::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ruleset::kSelectorListFieldNumber;
const int Ruleset::kDeclarationListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ruleset::Ruleset()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_css_2eproto::scc_info_Ruleset.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:css_proto_converter.Ruleset)
}
Ruleset::Ruleset(const Ruleset& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_selector_list()) {
    selector_list_ = new ::css_proto_converter::SelectorList(*from.selector_list_);
  } else {
    selector_list_ = NULL;
  }
  if (from.has_declaration_list()) {
    declaration_list_ = new ::css_proto_converter::DeclarationList(*from.declaration_list_);
  } else {
    declaration_list_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:css_proto_converter.Ruleset)
}

void Ruleset::SharedCtor() {
  ::memset(&selector_list_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&declaration_list_) -
      reinterpret_cast<char*>(&selector_list_)) + sizeof(declaration_list_));
}

Ruleset::~Ruleset() {
  // @@protoc_insertion_point(destructor:css_proto_converter.Ruleset)
  SharedDtor();
}

void Ruleset::SharedDtor() {
  if (this != internal_default_instance()) delete selector_list_;
  if (this != internal_default_instance()) delete declaration_list_;
}

void Ruleset::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Ruleset::descriptor() {
  ::protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Ruleset& Ruleset::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_css_2eproto::scc_info_Ruleset.base);
  return *internal_default_instance();
}


void Ruleset::Clear() {
// @@protoc_insertion_point(message_clear_start:css_proto_converter.Ruleset)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(selector_list_ != NULL);
      selector_list_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(declaration_list_ != NULL);
      declaration_list_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Ruleset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:css_proto_converter.Ruleset)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .css_proto_converter.SelectorList selector_list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_selector_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .css_proto_converter.DeclarationList declaration_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_declaration_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:css_proto_converter.Ruleset)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:css_proto_converter.Ruleset)
  return false;
#undef DO_
}

void Ruleset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:css_proto_converter.Ruleset)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .css_proto_converter.SelectorList selector_list = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_selector_list(), output);
  }

  // required .css_proto_converter.DeclarationList declaration_list = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_declaration_list(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:css_proto_converter.Ruleset)
}

::google::protobuf::uint8* Ruleset::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:css_proto_converter.Ruleset)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .css_proto_converter.SelectorList selector_list = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_selector_list(), deterministic, target);
  }

  // required .css_proto_converter.DeclarationList declaration_list = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_declaration_list(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:css_proto_converter.Ruleset)
  return target;
}

size_t Ruleset::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:css_proto_converter.Ruleset)
  size_t total_size = 0;

  if (has_selector_list()) {
    // required .css_proto_converter.SelectorList selector_list = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *selector_list_);
  }

  if (has_declaration_list()) {
    // required .css_proto_converter.DeclarationList declaration_list = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *declaration_list_);
  }

  return total_size;
}
size_t Ruleset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:css_proto_converter.Ruleset)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .css_proto_converter.SelectorList selector_list = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *selector_list_);

    // required .css_proto_converter.DeclarationList declaration_list = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *declaration_list_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Ruleset::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:css_proto_converter.Ruleset)
  GOOGLE_DCHECK_NE(&from, this);
  const Ruleset* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Ruleset>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:css_proto_converter.Ruleset)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:css_proto_converter.Ruleset)
    MergeFrom(*source);
  }
}

void Ruleset::MergeFrom(const Ruleset& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:css_proto_converter.Ruleset)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_selector_list()->::css_proto_converter::SelectorList::MergeFrom(from.selector_list());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_declaration_list()->::css_proto_converter::DeclarationList::MergeFrom(from.declaration_list());
    }
  }
}

void Ruleset::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:css_proto_converter.Ruleset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ruleset::CopyFrom(const Ruleset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:css_proto_converter.Ruleset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ruleset::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_selector_list()) {
    if (!this->selector_list_->IsInitialized()) return false;
  }
  if (has_declaration_list()) {
    if (!this->declaration_list_->IsInitialized()) return false;
  }
  return true;
}

void Ruleset::Swap(Ruleset* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ruleset::InternalSwap(Ruleset* other) {
  using std::swap;
  swap(selector_list_, other->selector_list_);
  swap(declaration_list_, other->declaration_list_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Ruleset::GetMetadata() const {
  protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SelectorList::InitAsDefaultInstance() {
  ::css_proto_converter::_SelectorList_default_instance_._instance.get_mutable()->first_selector_ = const_cast< ::css_proto_converter::Selector*>(
      ::css_proto_converter::Selector::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SelectorList::kFirstSelectorFieldNumber;
const int SelectorList::kLaterSelectorsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SelectorList::SelectorList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_css_2eproto::scc_info_SelectorList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:css_proto_converter.SelectorList)
}
SelectorList::SelectorList(const SelectorList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      later_selectors_(from.later_selectors_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_first_selector()) {
    first_selector_ = new ::css_proto_converter::Selector(*from.first_selector_);
  } else {
    first_selector_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:css_proto_converter.SelectorList)
}

void SelectorList::SharedCtor() {
  first_selector_ = NULL;
}

SelectorList::~SelectorList() {
  // @@protoc_insertion_point(destructor:css_proto_converter.SelectorList)
  SharedDtor();
}

void SelectorList::SharedDtor() {
  if (this != internal_default_instance()) delete first_selector_;
}

void SelectorList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SelectorList::descriptor() {
  ::protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SelectorList& SelectorList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_css_2eproto::scc_info_SelectorList.base);
  return *internal_default_instance();
}


void SelectorList::Clear() {
// @@protoc_insertion_point(message_clear_start:css_proto_converter.SelectorList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  later_selectors_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(first_selector_ != NULL);
    first_selector_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SelectorList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:css_proto_converter.SelectorList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .css_proto_converter.Selector first_selector = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_first_selector()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .css_proto_converter.Selector later_selectors = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_later_selectors()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:css_proto_converter.SelectorList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:css_proto_converter.SelectorList)
  return false;
#undef DO_
}

void SelectorList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:css_proto_converter.SelectorList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .css_proto_converter.Selector first_selector = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_first_selector(), output);
  }

  // repeated .css_proto_converter.Selector later_selectors = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->later_selectors_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->later_selectors(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:css_proto_converter.SelectorList)
}

::google::protobuf::uint8* SelectorList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:css_proto_converter.SelectorList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .css_proto_converter.Selector first_selector = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_first_selector(), deterministic, target);
  }

  // repeated .css_proto_converter.Selector later_selectors = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->later_selectors_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->later_selectors(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:css_proto_converter.SelectorList)
  return target;
}

size_t SelectorList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:css_proto_converter.SelectorList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .css_proto_converter.Selector first_selector = 1;
  if (has_first_selector()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *first_selector_);
  }
  // repeated .css_proto_converter.Selector later_selectors = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->later_selectors_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->later_selectors(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SelectorList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:css_proto_converter.SelectorList)
  GOOGLE_DCHECK_NE(&from, this);
  const SelectorList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SelectorList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:css_proto_converter.SelectorList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:css_proto_converter.SelectorList)
    MergeFrom(*source);
  }
}

void SelectorList::MergeFrom(const SelectorList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:css_proto_converter.SelectorList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  later_selectors_.MergeFrom(from.later_selectors_);
  if (from.has_first_selector()) {
    mutable_first_selector()->::css_proto_converter::Selector::MergeFrom(from.first_selector());
  }
}

void SelectorList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:css_proto_converter.SelectorList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SelectorList::CopyFrom(const SelectorList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:css_proto_converter.SelectorList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectorList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->later_selectors())) return false;
  if (has_first_selector()) {
    if (!this->first_selector_->IsInitialized()) return false;
  }
  return true;
}

void SelectorList::Swap(SelectorList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SelectorList::InternalSwap(SelectorList* other) {
  using std::swap;
  CastToBase(&later_selectors_)->InternalSwap(CastToBase(&other->later_selectors_));
  swap(first_selector_, other->first_selector_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SelectorList::GetMetadata() const {
  protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Attr::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Attr::kTypeFieldNumber;
const int Attr::kAttrIFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Attr::Attr()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_css_2eproto::scc_info_Attr.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:css_proto_converter.Attr)
}
Attr::Attr(const Attr& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&attr_i_, &from.attr_i_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&attr_i_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:css_proto_converter.Attr)
}

void Attr::SharedCtor() {
  attr_i_ = false;
  type_ = 1;
}

Attr::~Attr() {
  // @@protoc_insertion_point(destructor:css_proto_converter.Attr)
  SharedDtor();
}

void Attr::SharedDtor() {
}

void Attr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Attr::descriptor() {
  ::protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Attr& Attr::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_css_2eproto::scc_info_Attr.base);
  return *internal_default_instance();
}


void Attr::Clear() {
// @@protoc_insertion_point(message_clear_start:css_proto_converter.Attr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    attr_i_ = false;
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Attr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:css_proto_converter.Attr)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .css_proto_converter.Attr.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::css_proto_converter::Attr_Type_IsValid(value)) {
            set_type(static_cast< ::css_proto_converter::Attr_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool attr_i = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_attr_i();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &attr_i_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:css_proto_converter.Attr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:css_proto_converter.Attr)
  return false;
#undef DO_
}

void Attr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:css_proto_converter.Attr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .css_proto_converter.Attr.Type type = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional bool attr_i = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->attr_i(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:css_proto_converter.Attr)
}

::google::protobuf::uint8* Attr::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:css_proto_converter.Attr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .css_proto_converter.Attr.Type type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional bool attr_i = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->attr_i(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:css_proto_converter.Attr)
  return target;
}

size_t Attr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:css_proto_converter.Attr)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .css_proto_converter.Attr.Type type = 1;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }
  // optional bool attr_i = 2;
  if (has_attr_i()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Attr::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:css_proto_converter.Attr)
  GOOGLE_DCHECK_NE(&from, this);
  const Attr* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Attr>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:css_proto_converter.Attr)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:css_proto_converter.Attr)
    MergeFrom(*source);
  }
}

void Attr::MergeFrom(const Attr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:css_proto_converter.Attr)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      attr_i_ = from.attr_i_;
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Attr::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:css_proto_converter.Attr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Attr::CopyFrom(const Attr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:css_proto_converter.Attr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Attr::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void Attr::Swap(Attr* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Attr::InternalSwap(Attr* other) {
  using std::swap;
  swap(attr_i_, other->attr_i_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Attr::GetMetadata() const {
  protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Selector::InitAsDefaultInstance() {
  ::css_proto_converter::_Selector_default_instance_._instance.get_mutable()->attr_ = const_cast< ::css_proto_converter::Attr*>(
      ::css_proto_converter::Attr::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Selector::kTypeFieldNumber;
const int Selector::kAttrFieldNumber;
const int Selector::kPseudoTypeFieldNumber;
const int Selector::kPseudoValueIdFieldNumber;
const int Selector::kCombinatorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Selector::Selector()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_css_2eproto::scc_info_Selector.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:css_proto_converter.Selector)
}
Selector::Selector(const Selector& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_attr()) {
    attr_ = new ::css_proto_converter::Attr(*from.attr_);
  } else {
    attr_ = NULL;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&combinator_) -
    reinterpret_cast<char*>(&type_)) + sizeof(combinator_));
  // @@protoc_insertion_point(copy_constructor:css_proto_converter.Selector)
}

void Selector::SharedCtor() {
  attr_ = NULL;
  type_ = 1;
  pseudo_type_ = 1;
  pseudo_value_id_ = 1;
  combinator_ = 1;
}

Selector::~Selector() {
  // @@protoc_insertion_point(destructor:css_proto_converter.Selector)
  SharedDtor();
}

void Selector::SharedDtor() {
  if (this != internal_default_instance()) delete attr_;
}

void Selector::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Selector::descriptor() {
  ::protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Selector& Selector::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_css_2eproto::scc_info_Selector.base);
  return *internal_default_instance();
}


void Selector::Clear() {
// @@protoc_insertion_point(message_clear_start:css_proto_converter.Selector)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(attr_ != NULL);
      attr_->Clear();
    }
    type_ = 1;
    pseudo_type_ = 1;
    pseudo_value_id_ = 1;
    combinator_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Selector::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:css_proto_converter.Selector)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .css_proto_converter.Selector.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::css_proto_converter::Selector_Type_IsValid(value)) {
            set_type(static_cast< ::css_proto_converter::Selector_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .css_proto_converter.Attr attr = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_attr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .css_proto_converter.PseudoType pseudo_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::css_proto_converter::PseudoType_IsValid(value)) {
            set_pseudo_type(static_cast< ::css_proto_converter::PseudoType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .css_proto_converter.Selector.PseudoValueId pseudo_value_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::css_proto_converter::Selector_PseudoValueId_IsValid(value)) {
            set_pseudo_value_id(static_cast< ::css_proto_converter::Selector_PseudoValueId >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .css_proto_converter.Combinator combinator = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::css_proto_converter::Combinator_IsValid(value)) {
            set_combinator(static_cast< ::css_proto_converter::Combinator >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:css_proto_converter.Selector)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:css_proto_converter.Selector)
  return false;
#undef DO_
}

void Selector::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:css_proto_converter.Selector)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .css_proto_converter.Selector.Type type = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required .css_proto_converter.Attr attr = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_attr(), output);
  }

  // required .css_proto_converter.PseudoType pseudo_type = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->pseudo_type(), output);
  }

  // optional .css_proto_converter.Selector.PseudoValueId pseudo_value_id = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->pseudo_value_id(), output);
  }

  // required .css_proto_converter.Combinator combinator = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->combinator(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:css_proto_converter.Selector)
}

::google::protobuf::uint8* Selector::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:css_proto_converter.Selector)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .css_proto_converter.Selector.Type type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required .css_proto_converter.Attr attr = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_attr(), deterministic, target);
  }

  // required .css_proto_converter.PseudoType pseudo_type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->pseudo_type(), target);
  }

  // optional .css_proto_converter.Selector.PseudoValueId pseudo_value_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->pseudo_value_id(), target);
  }

  // required .css_proto_converter.Combinator combinator = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->combinator(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:css_proto_converter.Selector)
  return target;
}

size_t Selector::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:css_proto_converter.Selector)
  size_t total_size = 0;

  if (has_attr()) {
    // required .css_proto_converter.Attr attr = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *attr_);
  }

  if (has_type()) {
    // required .css_proto_converter.Selector.Type type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  if (has_pseudo_type()) {
    // required .css_proto_converter.PseudoType pseudo_type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->pseudo_type());
  }

  if (has_combinator()) {
    // required .css_proto_converter.Combinator combinator = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->combinator());
  }

  return total_size;
}
size_t Selector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:css_proto_converter.Selector)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000017) ^ 0x00000017) == 0) {  // All required fields are present.
    // required .css_proto_converter.Attr attr = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *attr_);

    // required .css_proto_converter.Selector.Type type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());

    // required .css_proto_converter.PseudoType pseudo_type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->pseudo_type());

    // required .css_proto_converter.Combinator combinator = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->combinator());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional .css_proto_converter.Selector.PseudoValueId pseudo_value_id = 4;
  if (has_pseudo_value_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->pseudo_value_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Selector::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:css_proto_converter.Selector)
  GOOGLE_DCHECK_NE(&from, this);
  const Selector* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Selector>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:css_proto_converter.Selector)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:css_proto_converter.Selector)
    MergeFrom(*source);
  }
}

void Selector::MergeFrom(const Selector& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:css_proto_converter.Selector)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_attr()->::css_proto_converter::Attr::MergeFrom(from.attr());
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000004u) {
      pseudo_type_ = from.pseudo_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      pseudo_value_id_ = from.pseudo_value_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      combinator_ = from.combinator_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Selector::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:css_proto_converter.Selector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Selector::CopyFrom(const Selector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:css_proto_converter.Selector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Selector::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000017) != 0x00000017) return false;
  if (has_attr()) {
    if (!this->attr_->IsInitialized()) return false;
  }
  return true;
}

void Selector::Swap(Selector* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Selector::InternalSwap(Selector* other) {
  using std::swap;
  swap(attr_, other->attr_);
  swap(type_, other->type_);
  swap(pseudo_type_, other->pseudo_type_);
  swap(pseudo_value_id_, other->pseudo_value_id_);
  swap(combinator_, other->combinator_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Selector::GetMetadata() const {
  protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Pseudo::InitAsDefaultInstance() {
  ::css_proto_converter::_Pseudo_default_instance_.ident_1_ = const_cast< ::css_proto_converter::Ident*>(
      ::css_proto_converter::Ident::internal_default_instance());
  ::css_proto_converter::_Pseudo_default_instance_.function_token_ = const_cast< ::css_proto_converter::FunctionToken*>(
      ::css_proto_converter::FunctionToken::internal_default_instance());
  ::css_proto_converter::_Pseudo_default_instance_._instance.get_mutable()->ident_2_ = const_cast< ::css_proto_converter::Ident*>(
      ::css_proto_converter::Ident::internal_default_instance());
}
void Pseudo::set_allocated_ident_1(::css_proto_converter::Ident* ident_1) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_rhs();
  if (ident_1) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ident_1 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ident_1, submessage_arena);
    }
    set_has_ident_1();
    rhs_.ident_1_ = ident_1;
  }
  // @@protoc_insertion_point(field_set_allocated:css_proto_converter.Pseudo.ident_1)
}
void Pseudo::set_allocated_function_token(::css_proto_converter::FunctionToken* function_token) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_rhs();
  if (function_token) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      function_token = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, function_token, submessage_arena);
    }
    set_has_function_token();
    rhs_.function_token_ = function_token;
  }
  // @@protoc_insertion_point(field_set_allocated:css_proto_converter.Pseudo.function_token)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Pseudo::kIdent1FieldNumber;
const int Pseudo::kFunctionTokenFieldNumber;
const int Pseudo::kIdent2FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Pseudo::Pseudo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_css_2eproto::scc_info_Pseudo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:css_proto_converter.Pseudo)
}
Pseudo::Pseudo(const Pseudo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ident_2()) {
    ident_2_ = new ::css_proto_converter::Ident(*from.ident_2_);
  } else {
    ident_2_ = NULL;
  }
  clear_has_rhs();
  switch (from.rhs_case()) {
    case kIdent1: {
      mutable_ident_1()->::css_proto_converter::Ident::MergeFrom(from.ident_1());
      break;
    }
    case kFunctionToken: {
      mutable_function_token()->::css_proto_converter::FunctionToken::MergeFrom(from.function_token());
      break;
    }
    case RHS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:css_proto_converter.Pseudo)
}

void Pseudo::SharedCtor() {
  ident_2_ = NULL;
  clear_has_rhs();
}

Pseudo::~Pseudo() {
  // @@protoc_insertion_point(destructor:css_proto_converter.Pseudo)
  SharedDtor();
}

void Pseudo::SharedDtor() {
  if (this != internal_default_instance()) delete ident_2_;
  if (has_rhs()) {
    clear_rhs();
  }
}

void Pseudo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Pseudo::descriptor() {
  ::protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Pseudo& Pseudo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_css_2eproto::scc_info_Pseudo.base);
  return *internal_default_instance();
}


void Pseudo::clear_rhs() {
// @@protoc_insertion_point(one_of_clear_start:css_proto_converter.Pseudo)
  switch (rhs_case()) {
    case kIdent1: {
      delete rhs_.ident_1_;
      break;
    }
    case kFunctionToken: {
      delete rhs_.function_token_;
      break;
    }
    case RHS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RHS_NOT_SET;
}


void Pseudo::Clear() {
// @@protoc_insertion_point(message_clear_start:css_proto_converter.Pseudo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(ident_2_ != NULL);
    ident_2_->Clear();
  }
  clear_rhs();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Pseudo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:css_proto_converter.Pseudo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .css_proto_converter.Ident ident_1 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ident_1()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .css_proto_converter.FunctionToken function_token = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_function_token()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .css_proto_converter.Ident ident_2 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ident_2()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:css_proto_converter.Pseudo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:css_proto_converter.Pseudo)
  return false;
#undef DO_
}

void Pseudo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:css_proto_converter.Pseudo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (rhs_case()) {
    case kIdent1:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        1, this->_internal_ident_1(), output);
      break;
    case kFunctionToken:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, this->_internal_function_token(), output);
      break;
    default: ;
  }
  cached_has_bits = _has_bits_[0];
  // required .css_proto_converter.Ident ident_2 = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_ident_2(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:css_proto_converter.Pseudo)
}

::google::protobuf::uint8* Pseudo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:css_proto_converter.Pseudo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (rhs_case()) {
    case kIdent1:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          1, this->_internal_ident_1(), deterministic, target);
      break;
    case kFunctionToken:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          2, this->_internal_function_token(), deterministic, target);
      break;
    default: ;
  }
  cached_has_bits = _has_bits_[0];
  // required .css_proto_converter.Ident ident_2 = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_ident_2(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:css_proto_converter.Pseudo)
  return target;
}

size_t Pseudo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:css_proto_converter.Pseudo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .css_proto_converter.Ident ident_2 = 3;
  if (has_ident_2()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ident_2_);
  }
  switch (rhs_case()) {
    // optional .css_proto_converter.Ident ident_1 = 1;
    case kIdent1: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *rhs_.ident_1_);
      break;
    }
    // optional .css_proto_converter.FunctionToken function_token = 2;
    case kFunctionToken: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *rhs_.function_token_);
      break;
    }
    case RHS_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Pseudo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:css_proto_converter.Pseudo)
  GOOGLE_DCHECK_NE(&from, this);
  const Pseudo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Pseudo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:css_proto_converter.Pseudo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:css_proto_converter.Pseudo)
    MergeFrom(*source);
  }
}

void Pseudo::MergeFrom(const Pseudo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:css_proto_converter.Pseudo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ident_2()) {
    mutable_ident_2()->::css_proto_converter::Ident::MergeFrom(from.ident_2());
  }
  switch (from.rhs_case()) {
    case kIdent1: {
      mutable_ident_1()->::css_proto_converter::Ident::MergeFrom(from.ident_1());
      break;
    }
    case kFunctionToken: {
      mutable_function_token()->::css_proto_converter::FunctionToken::MergeFrom(from.function_token());
      break;
    }
    case RHS_NOT_SET: {
      break;
    }
  }
}

void Pseudo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:css_proto_converter.Pseudo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pseudo::CopyFrom(const Pseudo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:css_proto_converter.Pseudo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pseudo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_ident_2()) {
    if (!this->ident_2_->IsInitialized()) return false;
  }
  switch (rhs_case()) {
    case kIdent1: {
      if (has_ident_1()) {
        if (!this->ident_1().IsInitialized()) return false;
      }
      break;
    }
    case kFunctionToken: {
      if (has_function_token()) {
        if (!this->function_token().IsInitialized()) return false;
      }
      break;
    }
    case RHS_NOT_SET: {
      break;
    }
  }
  return true;
}

void Pseudo::Swap(Pseudo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Pseudo::InternalSwap(Pseudo* other) {
  using std::swap;
  swap(ident_2_, other->ident_2_);
  swap(rhs_, other->rhs_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Pseudo::GetMetadata() const {
  protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Declaration::InitAsDefaultInstance() {
  ::css_proto_converter::_Declaration_default_instance_._instance.get_mutable()->property_and_value_ = const_cast< ::css_proto_converter::PropertyAndValue*>(
      ::css_proto_converter::PropertyAndValue::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Declaration::kPropertyAndValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Declaration::Declaration()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_css_2eproto::scc_info_Declaration.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:css_proto_converter.Declaration)
}
Declaration::Declaration(const Declaration& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_property_and_value()) {
    property_and_value_ = new ::css_proto_converter::PropertyAndValue(*from.property_and_value_);
  } else {
    property_and_value_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:css_proto_converter.Declaration)
}

void Declaration::SharedCtor() {
  property_and_value_ = NULL;
}

Declaration::~Declaration() {
  // @@protoc_insertion_point(destructor:css_proto_converter.Declaration)
  SharedDtor();
}

void Declaration::SharedDtor() {
  if (this != internal_default_instance()) delete property_and_value_;
}

void Declaration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Declaration::descriptor() {
  ::protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Declaration& Declaration::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_css_2eproto::scc_info_Declaration.base);
  return *internal_default_instance();
}


void Declaration::Clear() {
// @@protoc_insertion_point(message_clear_start:css_proto_converter.Declaration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(property_and_value_ != NULL);
    property_and_value_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Declaration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:css_proto_converter.Declaration)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .css_proto_converter.PropertyAndValue property_and_value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_property_and_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:css_proto_converter.Declaration)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:css_proto_converter.Declaration)
  return false;
#undef DO_
}

void Declaration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:css_proto_converter.Declaration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .css_proto_converter.PropertyAndValue property_and_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_property_and_value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:css_proto_converter.Declaration)
}

::google::protobuf::uint8* Declaration::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:css_proto_converter.Declaration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .css_proto_converter.PropertyAndValue property_and_value = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_property_and_value(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:css_proto_converter.Declaration)
  return target;
}

size_t Declaration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:css_proto_converter.Declaration)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .css_proto_converter.PropertyAndValue property_and_value = 1;
  if (has_property_and_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *property_and_value_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Declaration::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:css_proto_converter.Declaration)
  GOOGLE_DCHECK_NE(&from, this);
  const Declaration* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Declaration>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:css_proto_converter.Declaration)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:css_proto_converter.Declaration)
    MergeFrom(*source);
  }
}

void Declaration::MergeFrom(const Declaration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:css_proto_converter.Declaration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_property_and_value()) {
    mutable_property_and_value()->::css_proto_converter::PropertyAndValue::MergeFrom(from.property_and_value());
  }
}

void Declaration::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:css_proto_converter.Declaration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Declaration::CopyFrom(const Declaration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:css_proto_converter.Declaration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Declaration::IsInitialized() const {
  if (has_property_and_value()) {
    if (!this->property_and_value_->IsInitialized()) return false;
  }
  return true;
}

void Declaration::Swap(Declaration* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Declaration::InternalSwap(Declaration* other) {
  using std::swap;
  swap(property_and_value_, other->property_and_value_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Declaration::GetMetadata() const {
  protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PropertyAndValue::InitAsDefaultInstance() {
  ::css_proto_converter::_PropertyAndValue_default_instance_._instance.get_mutable()->property_ = const_cast< ::css_proto_converter::Property*>(
      ::css_proto_converter::Property::internal_default_instance());
  ::css_proto_converter::_PropertyAndValue_default_instance_._instance.get_mutable()->expr_ = const_cast< ::css_proto_converter::Expr*>(
      ::css_proto_converter::Expr::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PropertyAndValue::kPropertyFieldNumber;
const int PropertyAndValue::kExprFieldNumber;
const int PropertyAndValue::kPrioFieldNumber;
const int PropertyAndValue::kValueIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PropertyAndValue::PropertyAndValue()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_css_2eproto::scc_info_PropertyAndValue.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:css_proto_converter.PropertyAndValue)
}
PropertyAndValue::PropertyAndValue(const PropertyAndValue& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_property()) {
    property_ = new ::css_proto_converter::Property(*from.property_);
  } else {
    property_ = NULL;
  }
  if (from.has_expr()) {
    expr_ = new ::css_proto_converter::Expr(*from.expr_);
  } else {
    expr_ = NULL;
  }
  ::memcpy(&prio_, &from.prio_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_id_) -
    reinterpret_cast<char*>(&prio_)) + sizeof(value_id_));
  // @@protoc_insertion_point(copy_constructor:css_proto_converter.PropertyAndValue)
}

void PropertyAndValue::SharedCtor() {
  ::memset(&property_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&prio_) -
      reinterpret_cast<char*>(&property_)) + sizeof(prio_));
  value_id_ = 1;
}

PropertyAndValue::~PropertyAndValue() {
  // @@protoc_insertion_point(destructor:css_proto_converter.PropertyAndValue)
  SharedDtor();
}

void PropertyAndValue::SharedDtor() {
  if (this != internal_default_instance()) delete property_;
  if (this != internal_default_instance()) delete expr_;
}

void PropertyAndValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PropertyAndValue::descriptor() {
  ::protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PropertyAndValue& PropertyAndValue::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_css_2eproto::scc_info_PropertyAndValue.base);
  return *internal_default_instance();
}


void PropertyAndValue::Clear() {
// @@protoc_insertion_point(message_clear_start:css_proto_converter.PropertyAndValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(property_ != NULL);
      property_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(expr_ != NULL);
      expr_->Clear();
    }
  }
  if (cached_has_bits & 12u) {
    prio_ = 0;
    value_id_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PropertyAndValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:css_proto_converter.PropertyAndValue)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .css_proto_converter.Property property = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_property()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .css_proto_converter.Expr expr = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_expr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .css_proto_converter.PropertyAndValue.Prio prio = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::css_proto_converter::PropertyAndValue_Prio_IsValid(value)) {
            set_prio(static_cast< ::css_proto_converter::PropertyAndValue_Prio >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .css_proto_converter.PropertyAndValue.ValueId value_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::css_proto_converter::PropertyAndValue_ValueId_IsValid(value)) {
            set_value_id(static_cast< ::css_proto_converter::PropertyAndValue_ValueId >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:css_proto_converter.PropertyAndValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:css_proto_converter.PropertyAndValue)
  return false;
#undef DO_
}

void PropertyAndValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:css_proto_converter.PropertyAndValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .css_proto_converter.Property property = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_property(), output);
  }

  // required .css_proto_converter.Expr expr = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_expr(), output);
  }

  // optional .css_proto_converter.PropertyAndValue.Prio prio = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->prio(), output);
  }

  // optional .css_proto_converter.PropertyAndValue.ValueId value_id = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->value_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:css_proto_converter.PropertyAndValue)
}

::google::protobuf::uint8* PropertyAndValue::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:css_proto_converter.PropertyAndValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .css_proto_converter.Property property = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_property(), deterministic, target);
  }

  // required .css_proto_converter.Expr expr = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_expr(), deterministic, target);
  }

  // optional .css_proto_converter.PropertyAndValue.Prio prio = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->prio(), target);
  }

  // optional .css_proto_converter.PropertyAndValue.ValueId value_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->value_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:css_proto_converter.PropertyAndValue)
  return target;
}

size_t PropertyAndValue::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:css_proto_converter.PropertyAndValue)
  size_t total_size = 0;

  if (has_property()) {
    // required .css_proto_converter.Property property = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *property_);
  }

  if (has_expr()) {
    // required .css_proto_converter.Expr expr = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *expr_);
  }

  return total_size;
}
size_t PropertyAndValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:css_proto_converter.PropertyAndValue)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .css_proto_converter.Property property = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *property_);

    // required .css_proto_converter.Expr expr = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *expr_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 12u) {
    // optional .css_proto_converter.PropertyAndValue.Prio prio = 3;
    if (has_prio()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->prio());
    }

    // optional .css_proto_converter.PropertyAndValue.ValueId value_id = 4;
    if (has_value_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->value_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PropertyAndValue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:css_proto_converter.PropertyAndValue)
  GOOGLE_DCHECK_NE(&from, this);
  const PropertyAndValue* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PropertyAndValue>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:css_proto_converter.PropertyAndValue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:css_proto_converter.PropertyAndValue)
    MergeFrom(*source);
  }
}

void PropertyAndValue::MergeFrom(const PropertyAndValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:css_proto_converter.PropertyAndValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_property()->::css_proto_converter::Property::MergeFrom(from.property());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_expr()->::css_proto_converter::Expr::MergeFrom(from.expr());
    }
    if (cached_has_bits & 0x00000004u) {
      prio_ = from.prio_;
    }
    if (cached_has_bits & 0x00000008u) {
      value_id_ = from.value_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PropertyAndValue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:css_proto_converter.PropertyAndValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PropertyAndValue::CopyFrom(const PropertyAndValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:css_proto_converter.PropertyAndValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropertyAndValue::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_property()) {
    if (!this->property_->IsInitialized()) return false;
  }
  if (has_expr()) {
    if (!this->expr_->IsInitialized()) return false;
  }
  return true;
}

void PropertyAndValue::Swap(PropertyAndValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PropertyAndValue::InternalSwap(PropertyAndValue* other) {
  using std::swap;
  swap(property_, other->property_);
  swap(expr_, other->expr_);
  swap(prio_, other->prio_);
  swap(value_id_, other->value_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PropertyAndValue::GetMetadata() const {
  protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Expr::InitAsDefaultInstance() {
  ::css_proto_converter::_Expr_default_instance_._instance.get_mutable()->term_ = const_cast< ::css_proto_converter::Term*>(
      ::css_proto_converter::Term::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Expr::kTermFieldNumber;
const int Expr::kOperatorTermsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Expr::Expr()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_css_2eproto::scc_info_Expr.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:css_proto_converter.Expr)
}
Expr::Expr(const Expr& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      operator_terms_(from.operator_terms_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_term()) {
    term_ = new ::css_proto_converter::Term(*from.term_);
  } else {
    term_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:css_proto_converter.Expr)
}

void Expr::SharedCtor() {
  term_ = NULL;
}

Expr::~Expr() {
  // @@protoc_insertion_point(destructor:css_proto_converter.Expr)
  SharedDtor();
}

void Expr::SharedDtor() {
  if (this != internal_default_instance()) delete term_;
}

void Expr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Expr::descriptor() {
  ::protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Expr& Expr::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_css_2eproto::scc_info_Expr.base);
  return *internal_default_instance();
}


void Expr::Clear() {
// @@protoc_insertion_point(message_clear_start:css_proto_converter.Expr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  operator_terms_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(term_ != NULL);
    term_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Expr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:css_proto_converter.Expr)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .css_proto_converter.Term term = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_term()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .css_proto_converter.OperatorTerm operator_terms = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_operator_terms()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:css_proto_converter.Expr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:css_proto_converter.Expr)
  return false;
#undef DO_
}

void Expr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:css_proto_converter.Expr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .css_proto_converter.Term term = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_term(), output);
  }

  // repeated .css_proto_converter.OperatorTerm operator_terms = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->operator_terms_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->operator_terms(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:css_proto_converter.Expr)
}

::google::protobuf::uint8* Expr::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:css_proto_converter.Expr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .css_proto_converter.Term term = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_term(), deterministic, target);
  }

  // repeated .css_proto_converter.OperatorTerm operator_terms = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->operator_terms_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->operator_terms(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:css_proto_converter.Expr)
  return target;
}

size_t Expr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:css_proto_converter.Expr)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .css_proto_converter.Term term = 1;
  if (has_term()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *term_);
  }
  // repeated .css_proto_converter.OperatorTerm operator_terms = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->operator_terms_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->operator_terms(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Expr::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:css_proto_converter.Expr)
  GOOGLE_DCHECK_NE(&from, this);
  const Expr* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Expr>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:css_proto_converter.Expr)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:css_proto_converter.Expr)
    MergeFrom(*source);
  }
}

void Expr::MergeFrom(const Expr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:css_proto_converter.Expr)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  operator_terms_.MergeFrom(from.operator_terms_);
  if (from.has_term()) {
    mutable_term()->::css_proto_converter::Term::MergeFrom(from.term());
  }
}

void Expr::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:css_proto_converter.Expr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Expr::CopyFrom(const Expr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:css_proto_converter.Expr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expr::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->operator_terms())) return false;
  if (has_term()) {
    if (!this->term_->IsInitialized()) return false;
  }
  return true;
}

void Expr::Swap(Expr* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Expr::InternalSwap(Expr* other) {
  using std::swap;
  CastToBase(&operator_terms_)->InternalSwap(CastToBase(&other->operator_terms_));
  swap(term_, other->term_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Expr::GetMetadata() const {
  protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OperatorTerm::InitAsDefaultInstance() {
  ::css_proto_converter::_OperatorTerm_default_instance_._instance.get_mutable()->_operator_ = const_cast< ::css_proto_converter::Operator*>(
      ::css_proto_converter::Operator::internal_default_instance());
  ::css_proto_converter::_OperatorTerm_default_instance_._instance.get_mutable()->term_ = const_cast< ::css_proto_converter::Term*>(
      ::css_proto_converter::Term::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OperatorTerm::kOperatorFieldNumber;
const int OperatorTerm::kTermFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OperatorTerm::OperatorTerm()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_css_2eproto::scc_info_Expr.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:css_proto_converter.OperatorTerm)
}
OperatorTerm::OperatorTerm(const OperatorTerm& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has__operator()) {
    _operator_ = new ::css_proto_converter::Operator(*from._operator_);
  } else {
    _operator_ = NULL;
  }
  if (from.has_term()) {
    term_ = new ::css_proto_converter::Term(*from.term_);
  } else {
    term_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:css_proto_converter.OperatorTerm)
}

void OperatorTerm::SharedCtor() {
  ::memset(&_operator_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&term_) -
      reinterpret_cast<char*>(&_operator_)) + sizeof(term_));
}

OperatorTerm::~OperatorTerm() {
  // @@protoc_insertion_point(destructor:css_proto_converter.OperatorTerm)
  SharedDtor();
}

void OperatorTerm::SharedDtor() {
  if (this != internal_default_instance()) delete _operator_;
  if (this != internal_default_instance()) delete term_;
}

void OperatorTerm::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* OperatorTerm::descriptor() {
  ::protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OperatorTerm& OperatorTerm::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_css_2eproto::scc_info_Expr.base);
  return *internal_default_instance();
}


void OperatorTerm::Clear() {
// @@protoc_insertion_point(message_clear_start:css_proto_converter.OperatorTerm)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_operator_ != NULL);
      _operator_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(term_ != NULL);
      term_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OperatorTerm::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:css_proto_converter.OperatorTerm)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .css_proto_converter.Operator _operator = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable__operator()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .css_proto_converter.Term term = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_term()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:css_proto_converter.OperatorTerm)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:css_proto_converter.OperatorTerm)
  return false;
#undef DO_
}

void OperatorTerm::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:css_proto_converter.OperatorTerm)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .css_proto_converter.Operator _operator = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal__operator(), output);
  }

  // required .css_proto_converter.Term term = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_term(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:css_proto_converter.OperatorTerm)
}

::google::protobuf::uint8* OperatorTerm::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:css_proto_converter.OperatorTerm)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .css_proto_converter.Operator _operator = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal__operator(), deterministic, target);
  }

  // required .css_proto_converter.Term term = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_term(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:css_proto_converter.OperatorTerm)
  return target;
}

size_t OperatorTerm::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:css_proto_converter.OperatorTerm)
  size_t total_size = 0;

  if (has__operator()) {
    // required .css_proto_converter.Operator _operator = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *_operator_);
  }

  if (has_term()) {
    // required .css_proto_converter.Term term = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *term_);
  }

  return total_size;
}
size_t OperatorTerm::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:css_proto_converter.OperatorTerm)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .css_proto_converter.Operator _operator = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *_operator_);

    // required .css_proto_converter.Term term = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *term_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OperatorTerm::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:css_proto_converter.OperatorTerm)
  GOOGLE_DCHECK_NE(&from, this);
  const OperatorTerm* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OperatorTerm>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:css_proto_converter.OperatorTerm)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:css_proto_converter.OperatorTerm)
    MergeFrom(*source);
  }
}

void OperatorTerm::MergeFrom(const OperatorTerm& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:css_proto_converter.OperatorTerm)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable__operator()->::css_proto_converter::Operator::MergeFrom(from._operator());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_term()->::css_proto_converter::Term::MergeFrom(from.term());
    }
  }
}

void OperatorTerm::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:css_proto_converter.OperatorTerm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OperatorTerm::CopyFrom(const OperatorTerm& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:css_proto_converter.OperatorTerm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperatorTerm::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_term()) {
    if (!this->term_->IsInitialized()) return false;
  }
  return true;
}

void OperatorTerm::Swap(OperatorTerm* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OperatorTerm::InternalSwap(OperatorTerm* other) {
  using std::swap;
  swap(_operator_, other->_operator_);
  swap(term_, other->term_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OperatorTerm::GetMetadata() const {
  protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Term::InitAsDefaultInstance() {
  ::css_proto_converter::_Term_default_instance_._instance.get_mutable()->unary_operator_ = const_cast< ::css_proto_converter::UnaryOperator*>(
      ::css_proto_converter::UnaryOperator::internal_default_instance());
  ::css_proto_converter::_Term_default_instance_.term_part_ = const_cast< ::css_proto_converter::TermPart*>(
      ::css_proto_converter::TermPart::internal_default_instance());
  ::css_proto_converter::_Term_default_instance_.string_ = const_cast< ::css_proto_converter::String*>(
      ::css_proto_converter::String::internal_default_instance());
  ::css_proto_converter::_Term_default_instance_._instance.get_mutable()->ident_ = const_cast< ::css_proto_converter::Ident*>(
      ::css_proto_converter::Ident::internal_default_instance());
  ::css_proto_converter::_Term_default_instance_._instance.get_mutable()->uri_ = const_cast< ::css_proto_converter::Uri*>(
      ::css_proto_converter::Uri::internal_default_instance());
  ::css_proto_converter::_Term_default_instance_._instance.get_mutable()->hexcolor_ = const_cast< ::css_proto_converter::Hexcolor*>(
      ::css_proto_converter::Hexcolor::internal_default_instance());
}
void Term::set_allocated_term_part(::css_proto_converter::TermPart* term_part) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_rhs();
  if (term_part) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      term_part = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, term_part, submessage_arena);
    }
    set_has_term_part();
    rhs_.term_part_ = term_part;
  }
  // @@protoc_insertion_point(field_set_allocated:css_proto_converter.Term.term_part)
}
void Term::set_allocated_string(::css_proto_converter::String* string) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_rhs();
  if (string) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      string = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, string, submessage_arena);
    }
    set_has_string();
    rhs_.string_ = string;
  }
  // @@protoc_insertion_point(field_set_allocated:css_proto_converter.Term.string)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Term::kUnaryOperatorFieldNumber;
const int Term::kTermPartFieldNumber;
const int Term::kStringFieldNumber;
const int Term::kIdentFieldNumber;
const int Term::kUriFieldNumber;
const int Term::kHexcolorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Term::Term()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_css_2eproto::scc_info_Expr.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:css_proto_converter.Term)
}
Term::Term(const Term& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_unary_operator()) {
    unary_operator_ = new ::css_proto_converter::UnaryOperator(*from.unary_operator_);
  } else {
    unary_operator_ = NULL;
  }
  if (from.has_ident()) {
    ident_ = new ::css_proto_converter::Ident(*from.ident_);
  } else {
    ident_ = NULL;
  }
  if (from.has_uri()) {
    uri_ = new ::css_proto_converter::Uri(*from.uri_);
  } else {
    uri_ = NULL;
  }
  if (from.has_hexcolor()) {
    hexcolor_ = new ::css_proto_converter::Hexcolor(*from.hexcolor_);
  } else {
    hexcolor_ = NULL;
  }
  clear_has_rhs();
  switch (from.rhs_case()) {
    case kTermPart: {
      mutable_term_part()->::css_proto_converter::TermPart::MergeFrom(from.term_part());
      break;
    }
    case kString: {
      mutable_string()->::css_proto_converter::String::MergeFrom(from.string());
      break;
    }
    case RHS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:css_proto_converter.Term)
}

void Term::SharedCtor() {
  ::memset(&unary_operator_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hexcolor_) -
      reinterpret_cast<char*>(&unary_operator_)) + sizeof(hexcolor_));
  clear_has_rhs();
}

Term::~Term() {
  // @@protoc_insertion_point(destructor:css_proto_converter.Term)
  SharedDtor();
}

void Term::SharedDtor() {
  if (this != internal_default_instance()) delete unary_operator_;
  if (this != internal_default_instance()) delete ident_;
  if (this != internal_default_instance()) delete uri_;
  if (this != internal_default_instance()) delete hexcolor_;
  if (has_rhs()) {
    clear_rhs();
  }
}

void Term::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Term::descriptor() {
  ::protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Term& Term::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_css_2eproto::scc_info_Expr.base);
  return *internal_default_instance();
}


void Term::clear_rhs() {
// @@protoc_insertion_point(one_of_clear_start:css_proto_converter.Term)
  switch (rhs_case()) {
    case kTermPart: {
      delete rhs_.term_part_;
      break;
    }
    case kString: {
      delete rhs_.string_;
      break;
    }
    case RHS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RHS_NOT_SET;
}


void Term::Clear() {
// @@protoc_insertion_point(message_clear_start:css_proto_converter.Term)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(unary_operator_ != NULL);
      unary_operator_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(ident_ != NULL);
      ident_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(uri_ != NULL);
      uri_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(hexcolor_ != NULL);
      hexcolor_->Clear();
    }
  }
  clear_rhs();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Term::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:css_proto_converter.Term)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .css_proto_converter.UnaryOperator unary_operator = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_unary_operator()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .css_proto_converter.TermPart term_part = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_term_part()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .css_proto_converter.String string = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_string()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .css_proto_converter.Ident ident = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ident()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .css_proto_converter.Uri uri = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_uri()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .css_proto_converter.Hexcolor hexcolor = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_hexcolor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:css_proto_converter.Term)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:css_proto_converter.Term)
  return false;
#undef DO_
}

void Term::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:css_proto_converter.Term)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .css_proto_converter.UnaryOperator unary_operator = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_unary_operator(), output);
  }

  switch (rhs_case()) {
    case kTermPart:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, this->_internal_term_part(), output);
      break;
    case kString:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        3, this->_internal_string(), output);
      break;
    default: ;
  }
  // optional .css_proto_converter.Ident ident = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_ident(), output);
  }

  // optional .css_proto_converter.Uri uri = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_uri(), output);
  }

  // optional .css_proto_converter.Hexcolor hexcolor = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_hexcolor(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:css_proto_converter.Term)
}

::google::protobuf::uint8* Term::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:css_proto_converter.Term)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .css_proto_converter.UnaryOperator unary_operator = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_unary_operator(), deterministic, target);
  }

  switch (rhs_case()) {
    case kTermPart:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          2, this->_internal_term_part(), deterministic, target);
      break;
    case kString:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          3, this->_internal_string(), deterministic, target);
      break;
    default: ;
  }
  // optional .css_proto_converter.Ident ident = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_ident(), deterministic, target);
  }

  // optional .css_proto_converter.Uri uri = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_uri(), deterministic, target);
  }

  // optional .css_proto_converter.Hexcolor hexcolor = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_hexcolor(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:css_proto_converter.Term)
  return target;
}

size_t Term::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:css_proto_converter.Term)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional .css_proto_converter.UnaryOperator unary_operator = 1;
    if (has_unary_operator()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *unary_operator_);
    }

    // optional .css_proto_converter.Ident ident = 4;
    if (has_ident()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *ident_);
    }

    // optional .css_proto_converter.Uri uri = 5;
    if (has_uri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *uri_);
    }

    // optional .css_proto_converter.Hexcolor hexcolor = 6;
    if (has_hexcolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *hexcolor_);
    }

  }
  switch (rhs_case()) {
    // optional .css_proto_converter.TermPart term_part = 2;
    case kTermPart: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *rhs_.term_part_);
      break;
    }
    // optional .css_proto_converter.String string = 3;
    case kString: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *rhs_.string_);
      break;
    }
    case RHS_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Term::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:css_proto_converter.Term)
  GOOGLE_DCHECK_NE(&from, this);
  const Term* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Term>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:css_proto_converter.Term)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:css_proto_converter.Term)
    MergeFrom(*source);
  }
}

void Term::MergeFrom(const Term& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:css_proto_converter.Term)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_unary_operator()->::css_proto_converter::UnaryOperator::MergeFrom(from.unary_operator());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_ident()->::css_proto_converter::Ident::MergeFrom(from.ident());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_uri()->::css_proto_converter::Uri::MergeFrom(from.uri());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_hexcolor()->::css_proto_converter::Hexcolor::MergeFrom(from.hexcolor());
    }
  }
  switch (from.rhs_case()) {
    case kTermPart: {
      mutable_term_part()->::css_proto_converter::TermPart::MergeFrom(from.term_part());
      break;
    }
    case kString: {
      mutable_string()->::css_proto_converter::String::MergeFrom(from.string());
      break;
    }
    case RHS_NOT_SET: {
      break;
    }
  }
}

void Term::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:css_proto_converter.Term)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Term::CopyFrom(const Term& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:css_proto_converter.Term)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Term::IsInitialized() const {
  if (has_unary_operator()) {
    if (!this->unary_operator_->IsInitialized()) return false;
  }
  if (has_ident()) {
    if (!this->ident_->IsInitialized()) return false;
  }
  if (has_hexcolor()) {
    if (!this->hexcolor_->IsInitialized()) return false;
  }
  switch (rhs_case()) {
    case kTermPart: {
      if (has_term_part()) {
        if (!this->term_part().IsInitialized()) return false;
      }
      break;
    }
    case kString: {
      if (has_string()) {
        if (!this->string().IsInitialized()) return false;
      }
      break;
    }
    case RHS_NOT_SET: {
      break;
    }
  }
  return true;
}

void Term::Swap(Term* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Term::InternalSwap(Term* other) {
  using std::swap;
  swap(unary_operator_, other->unary_operator_);
  swap(ident_, other->ident_);
  swap(uri_, other->uri_);
  swap(hexcolor_, other->hexcolor_);
  swap(rhs_, other->rhs_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Term::GetMetadata() const {
  protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TermPart::InitAsDefaultInstance() {
  ::css_proto_converter::_TermPart_default_instance_._instance.get_mutable()->number_ = const_cast< ::css_proto_converter::Num*>(
      ::css_proto_converter::Num::internal_default_instance());
  ::css_proto_converter::_TermPart_default_instance_._instance.get_mutable()->percentage_ = const_cast< ::css_proto_converter::Num*>(
      ::css_proto_converter::Num::internal_default_instance());
  ::css_proto_converter::_TermPart_default_instance_._instance.get_mutable()->length_ = const_cast< ::css_proto_converter::Length*>(
      ::css_proto_converter::Length::internal_default_instance());
  ::css_proto_converter::_TermPart_default_instance_._instance.get_mutable()->ems_ = const_cast< ::css_proto_converter::Num*>(
      ::css_proto_converter::Num::internal_default_instance());
  ::css_proto_converter::_TermPart_default_instance_._instance.get_mutable()->exs_ = const_cast< ::css_proto_converter::Num*>(
      ::css_proto_converter::Num::internal_default_instance());
  ::css_proto_converter::_TermPart_default_instance_._instance.get_mutable()->angle_ = const_cast< ::css_proto_converter::Angle*>(
      ::css_proto_converter::Angle::internal_default_instance());
  ::css_proto_converter::_TermPart_default_instance_._instance.get_mutable()->time_ = const_cast< ::css_proto_converter::Time*>(
      ::css_proto_converter::Time::internal_default_instance());
  ::css_proto_converter::_TermPart_default_instance_._instance.get_mutable()->freq_ = const_cast< ::css_proto_converter::Freq*>(
      ::css_proto_converter::Freq::internal_default_instance());
  ::css_proto_converter::_TermPart_default_instance_._instance.get_mutable()->function_ = const_cast< ::css_proto_converter::Function*>(
      ::css_proto_converter::Function::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TermPart::kNumberFieldNumber;
const int TermPart::kPercentageFieldNumber;
const int TermPart::kLengthFieldNumber;
const int TermPart::kEmsFieldNumber;
const int TermPart::kExsFieldNumber;
const int TermPart::kAngleFieldNumber;
const int TermPart::kTimeFieldNumber;
const int TermPart::kFreqFieldNumber;
const int TermPart::kFunctionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TermPart::TermPart()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_css_2eproto::scc_info_Expr.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:css_proto_converter.TermPart)
}
TermPart::TermPart(const TermPart& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_number()) {
    number_ = new ::css_proto_converter::Num(*from.number_);
  } else {
    number_ = NULL;
  }
  if (from.has_percentage()) {
    percentage_ = new ::css_proto_converter::Num(*from.percentage_);
  } else {
    percentage_ = NULL;
  }
  if (from.has_length()) {
    length_ = new ::css_proto_converter::Length(*from.length_);
  } else {
    length_ = NULL;
  }
  if (from.has_ems()) {
    ems_ = new ::css_proto_converter::Num(*from.ems_);
  } else {
    ems_ = NULL;
  }
  if (from.has_exs()) {
    exs_ = new ::css_proto_converter::Num(*from.exs_);
  } else {
    exs_ = NULL;
  }
  if (from.has_angle()) {
    angle_ = new ::css_proto_converter::Angle(*from.angle_);
  } else {
    angle_ = NULL;
  }
  if (from.has_time()) {
    time_ = new ::css_proto_converter::Time(*from.time_);
  } else {
    time_ = NULL;
  }
  if (from.has_freq()) {
    freq_ = new ::css_proto_converter::Freq(*from.freq_);
  } else {
    freq_ = NULL;
  }
  if (from.has_function()) {
    function_ = new ::css_proto_converter::Function(*from.function_);
  } else {
    function_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:css_proto_converter.TermPart)
}

void TermPart::SharedCtor() {
  ::memset(&number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&function_) -
      reinterpret_cast<char*>(&number_)) + sizeof(function_));
}

TermPart::~TermPart() {
  // @@protoc_insertion_point(destructor:css_proto_converter.TermPart)
  SharedDtor();
}

void TermPart::SharedDtor() {
  if (this != internal_default_instance()) delete number_;
  if (this != internal_default_instance()) delete percentage_;
  if (this != internal_default_instance()) delete length_;
  if (this != internal_default_instance()) delete ems_;
  if (this != internal_default_instance()) delete exs_;
  if (this != internal_default_instance()) delete angle_;
  if (this != internal_default_instance()) delete time_;
  if (this != internal_default_instance()) delete freq_;
  if (this != internal_default_instance()) delete function_;
}

void TermPart::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TermPart::descriptor() {
  ::protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TermPart& TermPart::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_css_2eproto::scc_info_Expr.base);
  return *internal_default_instance();
}


void TermPart::Clear() {
// @@protoc_insertion_point(message_clear_start:css_proto_converter.TermPart)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(number_ != NULL);
      number_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(percentage_ != NULL);
      percentage_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(length_ != NULL);
      length_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(ems_ != NULL);
      ems_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(exs_ != NULL);
      exs_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(angle_ != NULL);
      angle_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(time_ != NULL);
      time_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(freq_ != NULL);
      freq_->Clear();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    GOOGLE_DCHECK(function_ != NULL);
    function_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TermPart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:css_proto_converter.TermPart)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .css_proto_converter.Num number = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_number()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .css_proto_converter.Num percentage = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_percentage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .css_proto_converter.Length length = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_length()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .css_proto_converter.Num ems = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ems()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .css_proto_converter.Num exs = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_exs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .css_proto_converter.Angle angle = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_angle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .css_proto_converter.Time time = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .css_proto_converter.Freq freq = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_freq()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .css_proto_converter.Function function = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_function()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:css_proto_converter.TermPart)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:css_proto_converter.TermPart)
  return false;
#undef DO_
}

void TermPart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:css_proto_converter.TermPart)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .css_proto_converter.Num number = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_number(), output);
  }

  // optional .css_proto_converter.Num percentage = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_percentage(), output);
  }

  // optional .css_proto_converter.Length length = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_length(), output);
  }

  // optional .css_proto_converter.Num ems = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_ems(), output);
  }

  // optional .css_proto_converter.Num exs = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_exs(), output);
  }

  // optional .css_proto_converter.Angle angle = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_angle(), output);
  }

  // optional .css_proto_converter.Time time = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_time(), output);
  }

  // optional .css_proto_converter.Freq freq = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_freq(), output);
  }

  // optional .css_proto_converter.Function function = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->_internal_function(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:css_proto_converter.TermPart)
}

::google::protobuf::uint8* TermPart::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:css_proto_converter.TermPart)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .css_proto_converter.Num number = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_number(), deterministic, target);
  }

  // optional .css_proto_converter.Num percentage = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_percentage(), deterministic, target);
  }

  // optional .css_proto_converter.Length length = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_length(), deterministic, target);
  }

  // optional .css_proto_converter.Num ems = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_ems(), deterministic, target);
  }

  // optional .css_proto_converter.Num exs = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_exs(), deterministic, target);
  }

  // optional .css_proto_converter.Angle angle = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_angle(), deterministic, target);
  }

  // optional .css_proto_converter.Time time = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_time(), deterministic, target);
  }

  // optional .css_proto_converter.Freq freq = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_freq(), deterministic, target);
  }

  // optional .css_proto_converter.Function function = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->_internal_function(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:css_proto_converter.TermPart)
  return target;
}

size_t TermPart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:css_proto_converter.TermPart)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .css_proto_converter.Num number = 1;
  if (has_number()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *number_);
  }
  if (_has_bits_[0 / 32] & 254u) {
    // optional .css_proto_converter.Num percentage = 2;
    if (has_percentage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *percentage_);
    }

    // optional .css_proto_converter.Length length = 3;
    if (has_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *length_);
    }

    // optional .css_proto_converter.Num ems = 4;
    if (has_ems()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *ems_);
    }

    // optional .css_proto_converter.Num exs = 5;
    if (has_exs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *exs_);
    }

    // optional .css_proto_converter.Angle angle = 6;
    if (has_angle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *angle_);
    }

    // optional .css_proto_converter.Time time = 7;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *time_);
    }

    // optional .css_proto_converter.Freq freq = 8;
    if (has_freq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *freq_);
    }

  }
  // optional .css_proto_converter.Function function = 9;
  if (has_function()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *function_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TermPart::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:css_proto_converter.TermPart)
  GOOGLE_DCHECK_NE(&from, this);
  const TermPart* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TermPart>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:css_proto_converter.TermPart)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:css_proto_converter.TermPart)
    MergeFrom(*source);
  }
}

void TermPart::MergeFrom(const TermPart& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:css_proto_converter.TermPart)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_number()->::css_proto_converter::Num::MergeFrom(from.number());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_percentage()->::css_proto_converter::Num::MergeFrom(from.percentage());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_length()->::css_proto_converter::Length::MergeFrom(from.length());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_ems()->::css_proto_converter::Num::MergeFrom(from.ems());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_exs()->::css_proto_converter::Num::MergeFrom(from.exs());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_angle()->::css_proto_converter::Angle::MergeFrom(from.angle());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_time()->::css_proto_converter::Time::MergeFrom(from.time());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_freq()->::css_proto_converter::Freq::MergeFrom(from.freq());
    }
  }
  if (cached_has_bits & 0x00000100u) {
    mutable_function()->::css_proto_converter::Function::MergeFrom(from.function());
  }
}

void TermPart::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:css_proto_converter.TermPart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TermPart::CopyFrom(const TermPart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:css_proto_converter.TermPart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TermPart::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_number()) {
    if (!this->number_->IsInitialized()) return false;
  }
  if (has_percentage()) {
    if (!this->percentage_->IsInitialized()) return false;
  }
  if (has_length()) {
    if (!this->length_->IsInitialized()) return false;
  }
  if (has_ems()) {
    if (!this->ems_->IsInitialized()) return false;
  }
  if (has_exs()) {
    if (!this->exs_->IsInitialized()) return false;
  }
  if (has_angle()) {
    if (!this->angle_->IsInitialized()) return false;
  }
  if (has_time()) {
    if (!this->time_->IsInitialized()) return false;
  }
  if (has_freq()) {
    if (!this->freq_->IsInitialized()) return false;
  }
  if (has_function()) {
    if (!this->function_->IsInitialized()) return false;
  }
  return true;
}

void TermPart::Swap(TermPart* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TermPart::InternalSwap(TermPart* other) {
  using std::swap;
  swap(number_, other->number_);
  swap(percentage_, other->percentage_);
  swap(length_, other->length_);
  swap(ems_, other->ems_);
  swap(exs_, other->exs_);
  swap(angle_, other->angle_);
  swap(time_, other->time_);
  swap(freq_, other->freq_);
  swap(function_, other->function_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TermPart::GetMetadata() const {
  protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Function::InitAsDefaultInstance() {
  ::css_proto_converter::_Function_default_instance_._instance.get_mutable()->function_token_ = const_cast< ::css_proto_converter::FunctionToken*>(
      ::css_proto_converter::FunctionToken::internal_default_instance());
  ::css_proto_converter::_Function_default_instance_._instance.get_mutable()->expr_ = const_cast< ::css_proto_converter::Expr*>(
      ::css_proto_converter::Expr::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Function::kFunctionTokenFieldNumber;
const int Function::kExprFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Function::Function()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_css_2eproto::scc_info_Expr.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:css_proto_converter.Function)
}
Function::Function(const Function& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_function_token()) {
    function_token_ = new ::css_proto_converter::FunctionToken(*from.function_token_);
  } else {
    function_token_ = NULL;
  }
  if (from.has_expr()) {
    expr_ = new ::css_proto_converter::Expr(*from.expr_);
  } else {
    expr_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:css_proto_converter.Function)
}

void Function::SharedCtor() {
  ::memset(&function_token_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&expr_) -
      reinterpret_cast<char*>(&function_token_)) + sizeof(expr_));
}

Function::~Function() {
  // @@protoc_insertion_point(destructor:css_proto_converter.Function)
  SharedDtor();
}

void Function::SharedDtor() {
  if (this != internal_default_instance()) delete function_token_;
  if (this != internal_default_instance()) delete expr_;
}

void Function::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Function::descriptor() {
  ::protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Function& Function::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_css_2eproto::scc_info_Expr.base);
  return *internal_default_instance();
}


void Function::Clear() {
// @@protoc_insertion_point(message_clear_start:css_proto_converter.Function)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(function_token_ != NULL);
      function_token_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(expr_ != NULL);
      expr_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Function::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:css_proto_converter.Function)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .css_proto_converter.FunctionToken function_token = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_function_token()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .css_proto_converter.Expr expr = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_expr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:css_proto_converter.Function)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:css_proto_converter.Function)
  return false;
#undef DO_
}

void Function::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:css_proto_converter.Function)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .css_proto_converter.FunctionToken function_token = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_function_token(), output);
  }

  // required .css_proto_converter.Expr expr = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_expr(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:css_proto_converter.Function)
}

::google::protobuf::uint8* Function::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:css_proto_converter.Function)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .css_proto_converter.FunctionToken function_token = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_function_token(), deterministic, target);
  }

  // required .css_proto_converter.Expr expr = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_expr(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:css_proto_converter.Function)
  return target;
}

size_t Function::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:css_proto_converter.Function)
  size_t total_size = 0;

  if (has_function_token()) {
    // required .css_proto_converter.FunctionToken function_token = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *function_token_);
  }

  if (has_expr()) {
    // required .css_proto_converter.Expr expr = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *expr_);
  }

  return total_size;
}
size_t Function::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:css_proto_converter.Function)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .css_proto_converter.FunctionToken function_token = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *function_token_);

    // required .css_proto_converter.Expr expr = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *expr_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Function::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:css_proto_converter.Function)
  GOOGLE_DCHECK_NE(&from, this);
  const Function* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Function>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:css_proto_converter.Function)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:css_proto_converter.Function)
    MergeFrom(*source);
  }
}

void Function::MergeFrom(const Function& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:css_proto_converter.Function)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_function_token()->::css_proto_converter::FunctionToken::MergeFrom(from.function_token());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_expr()->::css_proto_converter::Expr::MergeFrom(from.expr());
    }
  }
}

void Function::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:css_proto_converter.Function)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Function::CopyFrom(const Function& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:css_proto_converter.Function)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Function::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_function_token()) {
    if (!this->function_token_->IsInitialized()) return false;
  }
  if (has_expr()) {
    if (!this->expr_->IsInitialized()) return false;
  }
  return true;
}

void Function::Swap(Function* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Function::InternalSwap(Function* other) {
  using std::swap;
  swap(function_token_, other->function_token_);
  swap(expr_, other->expr_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Function::GetMetadata() const {
  protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Hexcolor::InitAsDefaultInstance() {
  ::css_proto_converter::_Hexcolor_default_instance_._instance.get_mutable()->first_three_ = const_cast< ::css_proto_converter::HexcolorThree*>(
      ::css_proto_converter::HexcolorThree::internal_default_instance());
  ::css_proto_converter::_Hexcolor_default_instance_._instance.get_mutable()->last_three_ = const_cast< ::css_proto_converter::HexcolorThree*>(
      ::css_proto_converter::HexcolorThree::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Hexcolor::kFirstThreeFieldNumber;
const int Hexcolor::kLastThreeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Hexcolor::Hexcolor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_css_2eproto::scc_info_Hexcolor.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:css_proto_converter.Hexcolor)
}
Hexcolor::Hexcolor(const Hexcolor& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_first_three()) {
    first_three_ = new ::css_proto_converter::HexcolorThree(*from.first_three_);
  } else {
    first_three_ = NULL;
  }
  if (from.has_last_three()) {
    last_three_ = new ::css_proto_converter::HexcolorThree(*from.last_three_);
  } else {
    last_three_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:css_proto_converter.Hexcolor)
}

void Hexcolor::SharedCtor() {
  ::memset(&first_three_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_three_) -
      reinterpret_cast<char*>(&first_three_)) + sizeof(last_three_));
}

Hexcolor::~Hexcolor() {
  // @@protoc_insertion_point(destructor:css_proto_converter.Hexcolor)
  SharedDtor();
}

void Hexcolor::SharedDtor() {
  if (this != internal_default_instance()) delete first_three_;
  if (this != internal_default_instance()) delete last_three_;
}

void Hexcolor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Hexcolor::descriptor() {
  ::protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Hexcolor& Hexcolor::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_css_2eproto::scc_info_Hexcolor.base);
  return *internal_default_instance();
}


void Hexcolor::Clear() {
// @@protoc_insertion_point(message_clear_start:css_proto_converter.Hexcolor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(first_three_ != NULL);
      first_three_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(last_three_ != NULL);
      last_three_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Hexcolor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:css_proto_converter.Hexcolor)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .css_proto_converter.HexcolorThree first_three = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_first_three()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .css_proto_converter.HexcolorThree last_three = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_last_three()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:css_proto_converter.Hexcolor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:css_proto_converter.Hexcolor)
  return false;
#undef DO_
}

void Hexcolor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:css_proto_converter.Hexcolor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .css_proto_converter.HexcolorThree first_three = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_first_three(), output);
  }

  // optional .css_proto_converter.HexcolorThree last_three = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_last_three(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:css_proto_converter.Hexcolor)
}

::google::protobuf::uint8* Hexcolor::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:css_proto_converter.Hexcolor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .css_proto_converter.HexcolorThree first_three = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_first_three(), deterministic, target);
  }

  // optional .css_proto_converter.HexcolorThree last_three = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_last_three(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:css_proto_converter.Hexcolor)
  return target;
}

size_t Hexcolor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:css_proto_converter.Hexcolor)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .css_proto_converter.HexcolorThree first_three = 1;
  if (has_first_three()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *first_three_);
  }
  // optional .css_proto_converter.HexcolorThree last_three = 2;
  if (has_last_three()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *last_three_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Hexcolor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:css_proto_converter.Hexcolor)
  GOOGLE_DCHECK_NE(&from, this);
  const Hexcolor* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Hexcolor>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:css_proto_converter.Hexcolor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:css_proto_converter.Hexcolor)
    MergeFrom(*source);
  }
}

void Hexcolor::MergeFrom(const Hexcolor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:css_proto_converter.Hexcolor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_first_three()->::css_proto_converter::HexcolorThree::MergeFrom(from.first_three());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_last_three()->::css_proto_converter::HexcolorThree::MergeFrom(from.last_three());
    }
  }
}

void Hexcolor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:css_proto_converter.Hexcolor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Hexcolor::CopyFrom(const Hexcolor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:css_proto_converter.Hexcolor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Hexcolor::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_first_three()) {
    if (!this->first_three_->IsInitialized()) return false;
  }
  if (has_last_three()) {
    if (!this->last_three_->IsInitialized()) return false;
  }
  return true;
}

void Hexcolor::Swap(Hexcolor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Hexcolor::InternalSwap(Hexcolor* other) {
  using std::swap;
  swap(first_three_, other->first_three_);
  swap(last_three_, other->last_three_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Hexcolor::GetMetadata() const {
  protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HexcolorThree::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HexcolorThree::kAsciiValue1FieldNumber;
const int HexcolorThree::kAsciiValue2FieldNumber;
const int HexcolorThree::kAsciiValue3FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HexcolorThree::HexcolorThree()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_css_2eproto::scc_info_HexcolorThree.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:css_proto_converter.HexcolorThree)
}
HexcolorThree::HexcolorThree(const HexcolorThree& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ascii_value_3_, &from.ascii_value_3_,
    static_cast<size_t>(reinterpret_cast<char*>(&ascii_value_2_) -
    reinterpret_cast<char*>(&ascii_value_3_)) + sizeof(ascii_value_2_));
  // @@protoc_insertion_point(copy_constructor:css_proto_converter.HexcolorThree)
}

void HexcolorThree::SharedCtor() {
  ascii_value_3_ = 48;
  ascii_value_1_ = 48;
  ascii_value_2_ = 48;
}

HexcolorThree::~HexcolorThree() {
  // @@protoc_insertion_point(destructor:css_proto_converter.HexcolorThree)
  SharedDtor();
}

void HexcolorThree::SharedDtor() {
}

void HexcolorThree::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* HexcolorThree::descriptor() {
  ::protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HexcolorThree& HexcolorThree::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_css_2eproto::scc_info_HexcolorThree.base);
  return *internal_default_instance();
}


void HexcolorThree::Clear() {
// @@protoc_insertion_point(message_clear_start:css_proto_converter.HexcolorThree)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ascii_value_3_ = 48;
    ascii_value_1_ = 48;
    ascii_value_2_ = 48;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool HexcolorThree::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:css_proto_converter.HexcolorThree)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .css_proto_converter.H ascii_value_1 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::css_proto_converter::H_IsValid(value)) {
            set_ascii_value_1(static_cast< ::css_proto_converter::H >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .css_proto_converter.H ascii_value_2 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::css_proto_converter::H_IsValid(value)) {
            set_ascii_value_2(static_cast< ::css_proto_converter::H >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .css_proto_converter.H ascii_value_3 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::css_proto_converter::H_IsValid(value)) {
            set_ascii_value_3(static_cast< ::css_proto_converter::H >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:css_proto_converter.HexcolorThree)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:css_proto_converter.HexcolorThree)
  return false;
#undef DO_
}

void HexcolorThree::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:css_proto_converter.HexcolorThree)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .css_proto_converter.H ascii_value_1 = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ascii_value_1(), output);
  }

  // required .css_proto_converter.H ascii_value_2 = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->ascii_value_2(), output);
  }

  // required .css_proto_converter.H ascii_value_3 = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->ascii_value_3(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:css_proto_converter.HexcolorThree)
}

::google::protobuf::uint8* HexcolorThree::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:css_proto_converter.HexcolorThree)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .css_proto_converter.H ascii_value_1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ascii_value_1(), target);
  }

  // required .css_proto_converter.H ascii_value_2 = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->ascii_value_2(), target);
  }

  // required .css_proto_converter.H ascii_value_3 = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->ascii_value_3(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:css_proto_converter.HexcolorThree)
  return target;
}

size_t HexcolorThree::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:css_proto_converter.HexcolorThree)
  size_t total_size = 0;

  if (has_ascii_value_3()) {
    // required .css_proto_converter.H ascii_value_3 = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ascii_value_3());
  }

  if (has_ascii_value_1()) {
    // required .css_proto_converter.H ascii_value_1 = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ascii_value_1());
  }

  if (has_ascii_value_2()) {
    // required .css_proto_converter.H ascii_value_2 = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ascii_value_2());
  }

  return total_size;
}
size_t HexcolorThree::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:css_proto_converter.HexcolorThree)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .css_proto_converter.H ascii_value_3 = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ascii_value_3());

    // required .css_proto_converter.H ascii_value_1 = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ascii_value_1());

    // required .css_proto_converter.H ascii_value_2 = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ascii_value_2());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HexcolorThree::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:css_proto_converter.HexcolorThree)
  GOOGLE_DCHECK_NE(&from, this);
  const HexcolorThree* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HexcolorThree>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:css_proto_converter.HexcolorThree)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:css_proto_converter.HexcolorThree)
    MergeFrom(*source);
  }
}

void HexcolorThree::MergeFrom(const HexcolorThree& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:css_proto_converter.HexcolorThree)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      ascii_value_3_ = from.ascii_value_3_;
    }
    if (cached_has_bits & 0x00000002u) {
      ascii_value_1_ = from.ascii_value_1_;
    }
    if (cached_has_bits & 0x00000004u) {
      ascii_value_2_ = from.ascii_value_2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HexcolorThree::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:css_proto_converter.HexcolorThree)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HexcolorThree::CopyFrom(const HexcolorThree& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:css_proto_converter.HexcolorThree)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HexcolorThree::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void HexcolorThree::Swap(HexcolorThree* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HexcolorThree::InternalSwap(HexcolorThree* other) {
  using std::swap;
  swap(ascii_value_3_, other->ascii_value_3_);
  swap(ascii_value_1_, other->ascii_value_1_);
  swap(ascii_value_2_, other->ascii_value_2_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata HexcolorThree::GetMetadata() const {
  protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Input::InitAsDefaultInstance() {
  ::css_proto_converter::_Input_default_instance_._instance.get_mutable()->style_sheet_ = const_cast< ::css_proto_converter::StyleSheet*>(
      ::css_proto_converter::StyleSheet::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Input::kCssParserModeFieldNumber;
const int Input::kDeferPropertyParsingFieldNumber;
const int Input::kStyleSheetFieldNumber;
const int Input::kIsLiveProfileFieldNumber;
const int Input::kSecureContextModeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Input::Input()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_css_2eproto::scc_info_Input.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:css_proto_converter.Input)
}
Input::Input(const Input& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_style_sheet()) {
    style_sheet_ = new ::css_proto_converter::StyleSheet(*from.style_sheet_);
  } else {
    style_sheet_ = NULL;
  }
  ::memcpy(&css_parser_mode_, &from.css_parser_mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&secure_context_mode_) -
    reinterpret_cast<char*>(&css_parser_mode_)) + sizeof(secure_context_mode_));
  // @@protoc_insertion_point(copy_constructor:css_proto_converter.Input)
}

void Input::SharedCtor() {
  ::memset(&style_sheet_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&secure_context_mode_) -
      reinterpret_cast<char*>(&style_sheet_)) + sizeof(secure_context_mode_));
}

Input::~Input() {
  // @@protoc_insertion_point(destructor:css_proto_converter.Input)
  SharedDtor();
}

void Input::SharedDtor() {
  if (this != internal_default_instance()) delete style_sheet_;
}

void Input::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Input::descriptor() {
  ::protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Input& Input::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_css_2eproto::scc_info_Input.base);
  return *internal_default_instance();
}


void Input::Clear() {
// @@protoc_insertion_point(message_clear_start:css_proto_converter.Input)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(style_sheet_ != NULL);
    style_sheet_->Clear();
  }
  if (cached_has_bits & 30u) {
    ::memset(&css_parser_mode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&secure_context_mode_) -
        reinterpret_cast<char*>(&css_parser_mode_)) + sizeof(secure_context_mode_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Input::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:css_proto_converter.Input)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .css_proto_converter.Input.CSSParserMode css_parser_mode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::css_proto_converter::Input_CSSParserMode_IsValid(value)) {
            set_css_parser_mode(static_cast< ::css_proto_converter::Input_CSSParserMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool defer_property_parsing = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_defer_property_parsing();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &defer_property_parsing_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .css_proto_converter.StyleSheet style_sheet = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_style_sheet()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool is_live_profile = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_is_live_profile();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_live_profile_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .css_proto_converter.Input.SecureContextMode secure_context_mode = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::css_proto_converter::Input_SecureContextMode_IsValid(value)) {
            set_secure_context_mode(static_cast< ::css_proto_converter::Input_SecureContextMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:css_proto_converter.Input)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:css_proto_converter.Input)
  return false;
#undef DO_
}

void Input::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:css_proto_converter.Input)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .css_proto_converter.Input.CSSParserMode css_parser_mode = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->css_parser_mode(), output);
  }

  // required bool defer_property_parsing = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->defer_property_parsing(), output);
  }

  // required .css_proto_converter.StyleSheet style_sheet = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_style_sheet(), output);
  }

  // required bool is_live_profile = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_live_profile(), output);
  }

  // required .css_proto_converter.Input.SecureContextMode secure_context_mode = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->secure_context_mode(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:css_proto_converter.Input)
}

::google::protobuf::uint8* Input::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:css_proto_converter.Input)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .css_proto_converter.Input.CSSParserMode css_parser_mode = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->css_parser_mode(), target);
  }

  // required bool defer_property_parsing = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->defer_property_parsing(), target);
  }

  // required .css_proto_converter.StyleSheet style_sheet = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_style_sheet(), deterministic, target);
  }

  // required bool is_live_profile = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_live_profile(), target);
  }

  // required .css_proto_converter.Input.SecureContextMode secure_context_mode = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->secure_context_mode(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:css_proto_converter.Input)
  return target;
}

size_t Input::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:css_proto_converter.Input)
  size_t total_size = 0;

  if (has_style_sheet()) {
    // required .css_proto_converter.StyleSheet style_sheet = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *style_sheet_);
  }

  if (has_css_parser_mode()) {
    // required .css_proto_converter.Input.CSSParserMode css_parser_mode = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->css_parser_mode());
  }

  if (has_defer_property_parsing()) {
    // required bool defer_property_parsing = 2;
    total_size += 1 + 1;
  }

  if (has_is_live_profile()) {
    // required bool is_live_profile = 4;
    total_size += 1 + 1;
  }

  if (has_secure_context_mode()) {
    // required .css_proto_converter.Input.SecureContextMode secure_context_mode = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->secure_context_mode());
  }

  return total_size;
}
size_t Input::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:css_proto_converter.Input)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required .css_proto_converter.StyleSheet style_sheet = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *style_sheet_);

    // required .css_proto_converter.Input.CSSParserMode css_parser_mode = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->css_parser_mode());

    // required bool defer_property_parsing = 2;
    total_size += 1 + 1;

    // required bool is_live_profile = 4;
    total_size += 1 + 1;

    // required .css_proto_converter.Input.SecureContextMode secure_context_mode = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->secure_context_mode());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Input::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:css_proto_converter.Input)
  GOOGLE_DCHECK_NE(&from, this);
  const Input* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Input>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:css_proto_converter.Input)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:css_proto_converter.Input)
    MergeFrom(*source);
  }
}

void Input::MergeFrom(const Input& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:css_proto_converter.Input)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_style_sheet()->::css_proto_converter::StyleSheet::MergeFrom(from.style_sheet());
    }
    if (cached_has_bits & 0x00000002u) {
      css_parser_mode_ = from.css_parser_mode_;
    }
    if (cached_has_bits & 0x00000004u) {
      defer_property_parsing_ = from.defer_property_parsing_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_live_profile_ = from.is_live_profile_;
    }
    if (cached_has_bits & 0x00000010u) {
      secure_context_mode_ = from.secure_context_mode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Input::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:css_proto_converter.Input)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Input::CopyFrom(const Input& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:css_proto_converter.Input)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Input::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  if (has_style_sheet()) {
    if (!this->style_sheet_->IsInitialized()) return false;
  }
  return true;
}

void Input::Swap(Input* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Input::InternalSwap(Input* other) {
  using std::swap;
  swap(style_sheet_, other->style_sheet_);
  swap(css_parser_mode_, other->css_parser_mode_);
  swap(defer_property_parsing_, other->defer_property_parsing_);
  swap(is_live_profile_, other->is_live_profile_);
  swap(secure_context_mode_, other->secure_context_mode_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Input::GetMetadata() const {
  protobuf_css_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_css_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace css_proto_converter
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::css_proto_converter::Unicode* Arena::CreateMaybeMessage< ::css_proto_converter::Unicode >(Arena* arena) {
  return Arena::CreateInternal< ::css_proto_converter::Unicode >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::css_proto_converter::Escape* Arena::CreateMaybeMessage< ::css_proto_converter::Escape >(Arena* arena) {
  return Arena::CreateInternal< ::css_proto_converter::Escape >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::css_proto_converter::Nmstart* Arena::CreateMaybeMessage< ::css_proto_converter::Nmstart >(Arena* arena) {
  return Arena::CreateInternal< ::css_proto_converter::Nmstart >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::css_proto_converter::Nmchar* Arena::CreateMaybeMessage< ::css_proto_converter::Nmchar >(Arena* arena) {
  return Arena::CreateInternal< ::css_proto_converter::Nmchar >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::css_proto_converter::String* Arena::CreateMaybeMessage< ::css_proto_converter::String >(Arena* arena) {
  return Arena::CreateInternal< ::css_proto_converter::String >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::css_proto_converter::StringCharOrQuote* Arena::CreateMaybeMessage< ::css_proto_converter::StringCharOrQuote >(Arena* arena) {
  return Arena::CreateInternal< ::css_proto_converter::StringCharOrQuote >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::css_proto_converter::StringChar* Arena::CreateMaybeMessage< ::css_proto_converter::StringChar >(Arena* arena) {
  return Arena::CreateInternal< ::css_proto_converter::StringChar >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::css_proto_converter::Ident* Arena::CreateMaybeMessage< ::css_proto_converter::Ident >(Arena* arena) {
  return Arena::CreateInternal< ::css_proto_converter::Ident >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::css_proto_converter::Num* Arena::CreateMaybeMessage< ::css_proto_converter::Num >(Arena* arena) {
  return Arena::CreateInternal< ::css_proto_converter::Num >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::css_proto_converter::UrlChar* Arena::CreateMaybeMessage< ::css_proto_converter::UrlChar >(Arena* arena) {
  return Arena::CreateInternal< ::css_proto_converter::UrlChar >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::css_proto_converter::W* Arena::CreateMaybeMessage< ::css_proto_converter::W >(Arena* arena) {
  return Arena::CreateInternal< ::css_proto_converter::W >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::css_proto_converter::UnrepeatedW* Arena::CreateMaybeMessage< ::css_proto_converter::UnrepeatedW >(Arena* arena) {
  return Arena::CreateInternal< ::css_proto_converter::UnrepeatedW >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::css_proto_converter::Nl* Arena::CreateMaybeMessage< ::css_proto_converter::Nl >(Arena* arena) {
  return Arena::CreateInternal< ::css_proto_converter::Nl >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::css_proto_converter::Length* Arena::CreateMaybeMessage< ::css_proto_converter::Length >(Arena* arena) {
  return Arena::CreateInternal< ::css_proto_converter::Length >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::css_proto_converter::Angle* Arena::CreateMaybeMessage< ::css_proto_converter::Angle >(Arena* arena) {
  return Arena::CreateInternal< ::css_proto_converter::Angle >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::css_proto_converter::Time* Arena::CreateMaybeMessage< ::css_proto_converter::Time >(Arena* arena) {
  return Arena::CreateInternal< ::css_proto_converter::Time >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::css_proto_converter::Freq* Arena::CreateMaybeMessage< ::css_proto_converter::Freq >(Arena* arena) {
  return Arena::CreateInternal< ::css_proto_converter::Freq >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::css_proto_converter::Uri* Arena::CreateMaybeMessage< ::css_proto_converter::Uri >(Arena* arena) {
  return Arena::CreateInternal< ::css_proto_converter::Uri >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::css_proto_converter::FunctionToken* Arena::CreateMaybeMessage< ::css_proto_converter::FunctionToken >(Arena* arena) {
  return Arena::CreateInternal< ::css_proto_converter::FunctionToken >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::css_proto_converter::StyleSheet* Arena::CreateMaybeMessage< ::css_proto_converter::StyleSheet >(Arena* arena) {
  return Arena::CreateInternal< ::css_proto_converter::StyleSheet >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::css_proto_converter::CharsetDeclaration* Arena::CreateMaybeMessage< ::css_proto_converter::CharsetDeclaration >(Arena* arena) {
  return Arena::CreateInternal< ::css_proto_converter::CharsetDeclaration >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::css_proto_converter::NestedAtRule* Arena::CreateMaybeMessage< ::css_proto_converter::NestedAtRule >(Arena* arena) {
  return Arena::CreateInternal< ::css_proto_converter::NestedAtRule >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::css_proto_converter::SupportsRule* Arena::CreateMaybeMessage< ::css_proto_converter::SupportsRule >(Arena* arena) {
  return Arena::CreateInternal< ::css_proto_converter::SupportsRule >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::css_proto_converter::AtRuleOrRulesets* Arena::CreateMaybeMessage< ::css_proto_converter::AtRuleOrRulesets >(Arena* arena) {
  return Arena::CreateInternal< ::css_proto_converter::AtRuleOrRulesets >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::css_proto_converter::AtRuleOrRuleset* Arena::CreateMaybeMessage< ::css_proto_converter::AtRuleOrRuleset >(Arena* arena) {
  return Arena::CreateInternal< ::css_proto_converter::AtRuleOrRuleset >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::css_proto_converter::SupportsCondition* Arena::CreateMaybeMessage< ::css_proto_converter::SupportsCondition >(Arena* arena) {
  return Arena::CreateInternal< ::css_proto_converter::SupportsCondition >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::css_proto_converter::BinarySupportsCondition* Arena::CreateMaybeMessage< ::css_proto_converter::BinarySupportsCondition >(Arena* arena) {
  return Arena::CreateInternal< ::css_proto_converter::BinarySupportsCondition >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::css_proto_converter::Viewport* Arena::CreateMaybeMessage< ::css_proto_converter::Viewport >(Arena* arena) {
  return Arena::CreateInternal< ::css_proto_converter::Viewport >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::css_proto_converter::ViewportPropertyAndValue* Arena::CreateMaybeMessage< ::css_proto_converter::ViewportPropertyAndValue >(Arena* arena) {
  return Arena::CreateInternal< ::css_proto_converter::ViewportPropertyAndValue >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::css_proto_converter::ViewportProperty* Arena::CreateMaybeMessage< ::css_proto_converter::ViewportProperty >(Arena* arena) {
  return Arena::CreateInternal< ::css_proto_converter::ViewportProperty >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::css_proto_converter::ViewportValue* Arena::CreateMaybeMessage< ::css_proto_converter::ViewportValue >(Arena* arena) {
  return Arena::CreateInternal< ::css_proto_converter::ViewportValue >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::css_proto_converter::Import* Arena::CreateMaybeMessage< ::css_proto_converter::Import >(Arena* arena) {
  return Arena::CreateInternal< ::css_proto_converter::Import >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::css_proto_converter::MediaQueryList* Arena::CreateMaybeMessage< ::css_proto_converter::MediaQueryList >(Arena* arena) {
  return Arena::CreateInternal< ::css_proto_converter::MediaQueryList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::css_proto_converter::MediaQuery* Arena::CreateMaybeMessage< ::css_proto_converter::MediaQuery >(Arena* arena) {
  return Arena::CreateInternal< ::css_proto_converter::MediaQuery >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::css_proto_converter::MediaQueryPartTwo* Arena::CreateMaybeMessage< ::css_proto_converter::MediaQueryPartTwo >(Arena* arena) {
  return Arena::CreateInternal< ::css_proto_converter::MediaQueryPartTwo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::css_proto_converter::MediaConditionWithoutOr* Arena::CreateMaybeMessage< ::css_proto_converter::MediaConditionWithoutOr >(Arena* arena) {
  return Arena::CreateInternal< ::css_proto_converter::MediaConditionWithoutOr >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::css_proto_converter::MediaCondition* Arena::CreateMaybeMessage< ::css_proto_converter::MediaCondition >(Arena* arena) {
  return Arena::CreateInternal< ::css_proto_converter::MediaCondition >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::css_proto_converter::MediaType* Arena::CreateMaybeMessage< ::css_proto_converter::MediaType >(Arena* arena) {
  return Arena::CreateInternal< ::css_proto_converter::MediaType >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::css_proto_converter::MediaNot* Arena::CreateMaybeMessage< ::css_proto_converter::MediaNot >(Arena* arena) {
  return Arena::CreateInternal< ::css_proto_converter::MediaNot >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::css_proto_converter::MediaAnd* Arena::CreateMaybeMessage< ::css_proto_converter::MediaAnd >(Arena* arena) {
  return Arena::CreateInternal< ::css_proto_converter::MediaAnd >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::css_proto_converter::MediaOr* Arena::CreateMaybeMessage< ::css_proto_converter::MediaOr >(Arena* arena) {
  return Arena::CreateInternal< ::css_proto_converter::MediaOr >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::css_proto_converter::MediaInParens* Arena::CreateMaybeMessage< ::css_proto_converter::MediaInParens >(Arena* arena) {
  return Arena::CreateInternal< ::css_proto_converter::MediaInParens >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::css_proto_converter::MediaFeature* Arena::CreateMaybeMessage< ::css_proto_converter::MediaFeature >(Arena* arena) {
  return Arena::CreateInternal< ::css_proto_converter::MediaFeature >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::css_proto_converter::MfPlain* Arena::CreateMaybeMessage< ::css_proto_converter::MfPlain >(Arena* arena) {
  return Arena::CreateInternal< ::css_proto_converter::MfPlain >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::css_proto_converter::MfBool* Arena::CreateMaybeMessage< ::css_proto_converter::MfBool >(Arena* arena) {
  return Arena::CreateInternal< ::css_proto_converter::MfBool >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::css_proto_converter::MfName* Arena::CreateMaybeMessage< ::css_proto_converter::MfName >(Arena* arena) {
  return Arena::CreateInternal< ::css_proto_converter::MfName >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::css_proto_converter::MfValue* Arena::CreateMaybeMessage< ::css_proto_converter::MfValue >(Arena* arena) {
  return Arena::CreateInternal< ::css_proto_converter::MfValue >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::css_proto_converter::Namespace* Arena::CreateMaybeMessage< ::css_proto_converter::Namespace >(Arena* arena) {
  return Arena::CreateInternal< ::css_proto_converter::Namespace >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::css_proto_converter::NamespacePrefix* Arena::CreateMaybeMessage< ::css_proto_converter::NamespacePrefix >(Arena* arena) {
  return Arena::CreateInternal< ::css_proto_converter::NamespacePrefix >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::css_proto_converter::Media* Arena::CreateMaybeMessage< ::css_proto_converter::Media >(Arena* arena) {
  return Arena::CreateInternal< ::css_proto_converter::Media >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::css_proto_converter::Page* Arena::CreateMaybeMessage< ::css_proto_converter::Page >(Arena* arena) {
  return Arena::CreateInternal< ::css_proto_converter::Page >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::css_proto_converter::DeclarationList* Arena::CreateMaybeMessage< ::css_proto_converter::DeclarationList >(Arena* arena) {
  return Arena::CreateInternal< ::css_proto_converter::DeclarationList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::css_proto_converter::PseudoPage* Arena::CreateMaybeMessage< ::css_proto_converter::PseudoPage >(Arena* arena) {
  return Arena::CreateInternal< ::css_proto_converter::PseudoPage >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::css_proto_converter::FontFace* Arena::CreateMaybeMessage< ::css_proto_converter::FontFace >(Arena* arena) {
  return Arena::CreateInternal< ::css_proto_converter::FontFace >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::css_proto_converter::Operator* Arena::CreateMaybeMessage< ::css_proto_converter::Operator >(Arena* arena) {
  return Arena::CreateInternal< ::css_proto_converter::Operator >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::css_proto_converter::UnaryOperator* Arena::CreateMaybeMessage< ::css_proto_converter::UnaryOperator >(Arena* arena) {
  return Arena::CreateInternal< ::css_proto_converter::UnaryOperator >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::css_proto_converter::Property* Arena::CreateMaybeMessage< ::css_proto_converter::Property >(Arena* arena) {
  return Arena::CreateInternal< ::css_proto_converter::Property >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::css_proto_converter::Ruleset* Arena::CreateMaybeMessage< ::css_proto_converter::Ruleset >(Arena* arena) {
  return Arena::CreateInternal< ::css_proto_converter::Ruleset >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::css_proto_converter::SelectorList* Arena::CreateMaybeMessage< ::css_proto_converter::SelectorList >(Arena* arena) {
  return Arena::CreateInternal< ::css_proto_converter::SelectorList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::css_proto_converter::Attr* Arena::CreateMaybeMessage< ::css_proto_converter::Attr >(Arena* arena) {
  return Arena::CreateInternal< ::css_proto_converter::Attr >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::css_proto_converter::Selector* Arena::CreateMaybeMessage< ::css_proto_converter::Selector >(Arena* arena) {
  return Arena::CreateInternal< ::css_proto_converter::Selector >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::css_proto_converter::Pseudo* Arena::CreateMaybeMessage< ::css_proto_converter::Pseudo >(Arena* arena) {
  return Arena::CreateInternal< ::css_proto_converter::Pseudo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::css_proto_converter::Declaration* Arena::CreateMaybeMessage< ::css_proto_converter::Declaration >(Arena* arena) {
  return Arena::CreateInternal< ::css_proto_converter::Declaration >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::css_proto_converter::PropertyAndValue* Arena::CreateMaybeMessage< ::css_proto_converter::PropertyAndValue >(Arena* arena) {
  return Arena::CreateInternal< ::css_proto_converter::PropertyAndValue >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::css_proto_converter::Expr* Arena::CreateMaybeMessage< ::css_proto_converter::Expr >(Arena* arena) {
  return Arena::CreateInternal< ::css_proto_converter::Expr >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::css_proto_converter::OperatorTerm* Arena::CreateMaybeMessage< ::css_proto_converter::OperatorTerm >(Arena* arena) {
  return Arena::CreateInternal< ::css_proto_converter::OperatorTerm >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::css_proto_converter::Term* Arena::CreateMaybeMessage< ::css_proto_converter::Term >(Arena* arena) {
  return Arena::CreateInternal< ::css_proto_converter::Term >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::css_proto_converter::TermPart* Arena::CreateMaybeMessage< ::css_proto_converter::TermPart >(Arena* arena) {
  return Arena::CreateInternal< ::css_proto_converter::TermPart >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::css_proto_converter::Function* Arena::CreateMaybeMessage< ::css_proto_converter::Function >(Arena* arena) {
  return Arena::CreateInternal< ::css_proto_converter::Function >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::css_proto_converter::Hexcolor* Arena::CreateMaybeMessage< ::css_proto_converter::Hexcolor >(Arena* arena) {
  return Arena::CreateInternal< ::css_proto_converter::Hexcolor >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::css_proto_converter::HexcolorThree* Arena::CreateMaybeMessage< ::css_proto_converter::HexcolorThree >(Arena* arena) {
  return Arena::CreateInternal< ::css_proto_converter::HexcolorThree >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::css_proto_converter::Input* Arena::CreateMaybeMessage< ::css_proto_converter::Input >(Arena* arena) {
  return Arena::CreateInternal< ::css_proto_converter::Input >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
