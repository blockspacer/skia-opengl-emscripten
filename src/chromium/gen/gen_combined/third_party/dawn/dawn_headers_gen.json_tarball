{"dawn/dawncpp.h": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n#ifndef DAWN_DAWNCPP_H_\n#define DAWN_DAWNCPP_H_\n\n#include \"dawn/dawn.h\"\n#include \"dawn/dawn_export.h\"\n#include \"dawn/EnumClassBitmasks.h\"\n\nnamespace dawn {\n\n    enum class AddressMode : uint32_t {\n        Repeat = 0x00000000,\n        MirroredRepeat = 0x00000001,\n        ClampToEdge = 0x00000002,\n    };\n\n    enum class BindingType : uint32_t {\n        UniformBuffer = 0x00000000,\n        Sampler = 0x00000001,\n        SampledTexture = 0x00000002,\n        StorageBuffer = 0x00000003,\n        DynamicUniformBuffer = 0x00000004,\n        DynamicStorageBuffer = 0x00000005,\n    };\n\n    enum class BlendFactor : uint32_t {\n        Zero = 0x00000000,\n        One = 0x00000001,\n        SrcColor = 0x00000002,\n        OneMinusSrcColor = 0x00000003,\n        SrcAlpha = 0x00000004,\n        OneMinusSrcAlpha = 0x00000005,\n        DstColor = 0x00000006,\n        OneMinusDstColor = 0x00000007,\n        DstAlpha = 0x00000008,\n        OneMinusDstAlpha = 0x00000009,\n        SrcAlphaSaturated = 0x0000000A,\n        BlendColor = 0x0000000B,\n        OneMinusBlendColor = 0x0000000C,\n    };\n\n    enum class BlendOperation : uint32_t {\n        Add = 0x00000000,\n        Subtract = 0x00000001,\n        ReverseSubtract = 0x00000002,\n        Min = 0x00000003,\n        Max = 0x00000004,\n    };\n\n    enum class BufferMapAsyncStatus : uint32_t {\n        Success = 0x00000000,\n        Error = 0x00000001,\n        Unknown = 0x00000002,\n        ContextLost = 0x00000003,\n    };\n\n    enum class CompareFunction : uint32_t {\n        Never = 0x00000000,\n        Less = 0x00000001,\n        LessEqual = 0x00000002,\n        Greater = 0x00000003,\n        GreaterEqual = 0x00000004,\n        Equal = 0x00000005,\n        NotEqual = 0x00000006,\n        Always = 0x00000007,\n    };\n\n    enum class CullMode : uint32_t {\n        None = 0x00000000,\n        Front = 0x00000001,\n        Back = 0x00000002,\n    };\n\n    enum class FenceCompletionStatus : uint32_t {\n        Success = 0x00000000,\n        Error = 0x00000001,\n        Unknown = 0x00000002,\n        ContextLost = 0x00000003,\n    };\n\n    enum class FilterMode : uint32_t {\n        Nearest = 0x00000000,\n        Linear = 0x00000001,\n    };\n\n    enum class FrontFace : uint32_t {\n        CCW = 0x00000000,\n        CW = 0x00000001,\n    };\n\n    enum class IndexFormat : uint32_t {\n        Uint16 = 0x00000000,\n        Uint32 = 0x00000001,\n    };\n\n    enum class InputStepMode : uint32_t {\n        Vertex = 0x00000000,\n        Instance = 0x00000001,\n    };\n\n    enum class LoadOp : uint32_t {\n        Clear = 0x00000000,\n        Load = 0x00000001,\n    };\n\n    enum class PrimitiveTopology : uint32_t {\n        PointList = 0x00000000,\n        LineList = 0x00000001,\n        LineStrip = 0x00000002,\n        TriangleList = 0x00000003,\n        TriangleStrip = 0x00000004,\n    };\n\n    enum class ShaderStage : uint32_t {\n        Vertex = 0x00000000,\n        Fragment = 0x00000001,\n        Compute = 0x00000002,\n    };\n\n    enum class StencilOperation : uint32_t {\n        Keep = 0x00000000,\n        Zero = 0x00000001,\n        Replace = 0x00000002,\n        Invert = 0x00000003,\n        IncrementClamp = 0x00000004,\n        DecrementClamp = 0x00000005,\n        IncrementWrap = 0x00000006,\n        DecrementWrap = 0x00000007,\n    };\n\n    enum class StoreOp : uint32_t {\n        Store = 0x00000000,\n    };\n\n    enum class TextureDimension : uint32_t {\n        e2D = 0x00000000,\n    };\n\n    enum class TextureFormat : uint32_t {\n        R8G8B8A8Unorm = 0x00000000,\n        R8G8Unorm = 0x00000001,\n        R8Unorm = 0x00000002,\n        R8G8B8A8Uint = 0x00000003,\n        R8G8Uint = 0x00000004,\n        R8Uint = 0x00000005,\n        B8G8R8A8Unorm = 0x00000006,\n        D32FloatS8Uint = 0x00000007,\n    };\n\n    enum class TextureViewDimension : uint32_t {\n        e2D = 0x00000000,\n        e2DArray = 0x00000001,\n        Cube = 0x00000002,\n        CubeArray = 0x00000003,\n    };\n\n    enum class VertexFormat : uint32_t {\n        UChar2 = 0x00000000,\n        UChar4 = 0x00000001,\n        Char2 = 0x00000002,\n        Char4 = 0x00000003,\n        UChar2Norm = 0x00000004,\n        UChar4Norm = 0x00000005,\n        Char2Norm = 0x00000006,\n        Char4Norm = 0x00000007,\n        UShort2 = 0x00000008,\n        UShort4 = 0x00000009,\n        Short2 = 0x0000000A,\n        Short4 = 0x0000000B,\n        UShort2Norm = 0x0000000C,\n        UShort4Norm = 0x0000000D,\n        Short2Norm = 0x0000000E,\n        Short4Norm = 0x0000000F,\n        Half2 = 0x00000010,\n        Half4 = 0x00000011,\n        Float = 0x00000012,\n        Float2 = 0x00000013,\n        Float3 = 0x00000014,\n        Float4 = 0x00000015,\n        UInt = 0x00000016,\n        UInt2 = 0x00000017,\n        UInt3 = 0x00000018,\n        UInt4 = 0x00000019,\n        Int = 0x0000001A,\n        Int2 = 0x0000001B,\n        Int3 = 0x0000001C,\n        Int4 = 0x0000001D,\n    };\n\n\n    enum class BufferUsageBit : uint32_t {\n        None = 0x00000000,\n        MapRead = 0x00000001,\n        MapWrite = 0x00000002,\n        TransferSrc = 0x00000004,\n        TransferDst = 0x00000008,\n        Index = 0x00000010,\n        Vertex = 0x00000020,\n        Uniform = 0x00000040,\n        Storage = 0x00000080,\n    };\n\n    enum class ColorWriteMask : uint32_t {\n        None = 0x00000000,\n        Red = 0x00000001,\n        Green = 0x00000002,\n        Blue = 0x00000004,\n        Alpha = 0x00000008,\n        All = 0x0000000F,\n    };\n\n    enum class Face : uint32_t {\n        None = 0x00000000,\n        Back = 0x00000001,\n        Front = 0x00000002,\n        Both = 0x00000003,\n    };\n\n    enum class ShaderStageBit : uint32_t {\n        None = 0x00000000,\n        Vertex = 0x00000001,\n        Fragment = 0x00000002,\n        Compute = 0x00000004,\n    };\n\n    enum class TextureAspect : uint32_t {\n        Color = 0x00000001,\n        Depth = 0x00000002,\n        Stencil = 0x00000004,\n    };\n\n    enum class TextureUsageBit : uint32_t {\n        None = 0x00000000,\n        TransferSrc = 0x00000001,\n        TransferDst = 0x00000002,\n        Sampled = 0x00000004,\n        Storage = 0x00000008,\n        OutputAttachment = 0x00000010,\n        Present = 0x00000020,\n    };\n\n\n    template<>\n    struct IsDawnBitmask<BufferUsageBit> {\n        static constexpr bool enable = true;\n    };\n\n    template<>\n    struct IsDawnBitmask<ColorWriteMask> {\n        static constexpr bool enable = true;\n    };\n\n    template<>\n    struct IsDawnBitmask<Face> {\n        static constexpr bool enable = true;\n    };\n\n    template<>\n    struct IsDawnBitmask<ShaderStageBit> {\n        static constexpr bool enable = true;\n    };\n\n    template<>\n    struct IsDawnBitmask<TextureAspect> {\n        static constexpr bool enable = true;\n    };\n\n    template<>\n    struct IsDawnBitmask<TextureUsageBit> {\n        static constexpr bool enable = true;\n    };\n\n\n    using BufferMapReadCallback = DawnBufferMapReadCallback;\n    using BufferMapWriteCallback = DawnBufferMapWriteCallback;\n    using CallbackUserdata = DawnCallbackUserdata;\n    using DeviceErrorCallback = DawnDeviceErrorCallback;\n    using FenceOnCompletionCallback = DawnFenceOnCompletionCallback;\n\n    class BindGroup;\n    class BindGroupLayout;\n    class Buffer;\n    class CommandBuffer;\n    class CommandEncoder;\n    class ComputePassEncoder;\n    class ComputePipeline;\n    class Device;\n    class Fence;\n    class PipelineLayout;\n    class Queue;\n    class RenderPassEncoder;\n    class RenderPipeline;\n    class Sampler;\n    class ShaderModule;\n    class SwapChain;\n    class Texture;\n    class TextureView;\n\n    struct BindGroupBinding;\n    struct BindGroupLayoutBinding;\n    struct BlendDescriptor;\n    struct BufferCopyView;\n    struct BufferDescriptor;\n    struct Color;\n    struct Extent3D;\n    struct FenceDescriptor;\n    struct Origin3D;\n    struct PipelineLayoutDescriptor;\n    struct PipelineStageDescriptor;\n    struct RasterizationStateDescriptor;\n    struct RenderPassDepthStencilAttachmentDescriptor;\n    struct SamplerDescriptor;\n    struct ShaderModuleDescriptor;\n    struct StencilStateFaceDescriptor;\n    struct SwapChainDescriptor;\n    struct TextureViewDescriptor;\n    struct VertexAttributeDescriptor;\n    struct VertexInputDescriptor;\n    struct BindGroupDescriptor;\n    struct BindGroupLayoutDescriptor;\n    struct ColorStateDescriptor;\n    struct ComputePipelineDescriptor;\n    struct DepthStencilStateDescriptor;\n    struct InputStateDescriptor;\n    struct RenderPassColorAttachmentDescriptor;\n    struct TextureCopyView;\n    struct TextureDescriptor;\n    struct RenderPassDescriptor;\n    struct RenderPipelineDescriptor;\n\n    template<typename Derived, typename CType>\n    class ObjectBase {\n        public:\n            ObjectBase() = default;\n            ObjectBase(CType handle): mHandle(handle) {\n                if (mHandle) Derived::DawnReference(mHandle);\n            }\n            ~ObjectBase() {\n                if (mHandle) Derived::DawnRelease(mHandle);\n            }\n\n            ObjectBase(ObjectBase const& other)\n                : ObjectBase(other.Get()) {\n            }\n            Derived& operator=(ObjectBase const& other) {\n                if (&other != this) {\n                    if (mHandle) Derived::DawnRelease(mHandle);\n                    mHandle = other.mHandle;\n                    if (mHandle) Derived::DawnReference(mHandle);\n                }\n\n                return static_cast<Derived&>(*this);\n            }\n\n            ObjectBase(ObjectBase&& other) {\n                mHandle = other.mHandle;\n                other.mHandle = 0;\n            }\n            Derived& operator=(ObjectBase&& other) {\n                if (&other != this) {\n                    if (mHandle) Derived::DawnRelease(mHandle);\n                    mHandle = other.mHandle;\n                    other.mHandle = 0;\n                }\n\n                return static_cast<Derived&>(*this);\n            }\n\n            ObjectBase(std::nullptr_t) {}\n            Derived& operator=(std::nullptr_t) {\n                if (mHandle != nullptr) {\n                    Derived::DawnRelease(mHandle);\n                    mHandle = nullptr;\n                }\n                return static_cast<Derived&>(*this);\n            }\n\n            explicit operator bool() const {\n                return mHandle != nullptr;\n            }\n            CType Get() const {\n                return mHandle;\n            }\n            CType Release() {\n                CType result = mHandle;\n                mHandle = 0;\n                return result;\n            }\n            static Derived Acquire(CType handle) {\n                Derived result;\n                result.mHandle = handle;\n                return result;\n            }\n\n        protected:\n            CType mHandle = nullptr;\n    };\n\n\n    class BindGroup : public ObjectBase<BindGroup, DawnBindGroup> {\n        public:\n            using ObjectBase::ObjectBase;\n            using ObjectBase::operator=;\n\n\n        private:\n            friend ObjectBase<BindGroup, DawnBindGroup>;\n            static DAWN_EXPORT void DawnReference(DawnBindGroup handle);\n            static DAWN_EXPORT void DawnRelease(DawnBindGroup handle);\n    };\n\n    class BindGroupLayout : public ObjectBase<BindGroupLayout, DawnBindGroupLayout> {\n        public:\n            using ObjectBase::ObjectBase;\n            using ObjectBase::operator=;\n\n\n        private:\n            friend ObjectBase<BindGroupLayout, DawnBindGroupLayout>;\n            static DAWN_EXPORT void DawnReference(DawnBindGroupLayout handle);\n            static DAWN_EXPORT void DawnRelease(DawnBindGroupLayout handle);\n    };\n\n    class Buffer : public ObjectBase<Buffer, DawnBuffer> {\n        public:\n            using ObjectBase::ObjectBase;\n            using ObjectBase::operator=;\n\n                    DAWN_EXPORT void SetSubData(uint64_t start, uint64_t count, uint8_t const * data) const;\n                    DAWN_EXPORT void Unmap() const;\n                    DAWN_EXPORT void Destroy() const;\n                    DAWN_EXPORT void MapReadAsync(BufferMapReadCallback callback, CallbackUserdata userdata) const;\n                    DAWN_EXPORT void MapWriteAsync(BufferMapWriteCallback callback, CallbackUserdata userdata) const;\n\n        private:\n            friend ObjectBase<Buffer, DawnBuffer>;\n            static DAWN_EXPORT void DawnReference(DawnBuffer handle);\n            static DAWN_EXPORT void DawnRelease(DawnBuffer handle);\n    };\n\n    class CommandBuffer : public ObjectBase<CommandBuffer, DawnCommandBuffer> {\n        public:\n            using ObjectBase::ObjectBase;\n            using ObjectBase::operator=;\n\n\n        private:\n            friend ObjectBase<CommandBuffer, DawnCommandBuffer>;\n            static DAWN_EXPORT void DawnReference(DawnCommandBuffer handle);\n            static DAWN_EXPORT void DawnRelease(DawnCommandBuffer handle);\n    };\n\n    class CommandEncoder : public ObjectBase<CommandEncoder, DawnCommandEncoder> {\n        public:\n            using ObjectBase::ObjectBase;\n            using ObjectBase::operator=;\n\n                    DAWN_EXPORT CommandBuffer Finish() const;\n                    DAWN_EXPORT ComputePassEncoder BeginComputePass() const;\n                    DAWN_EXPORT RenderPassEncoder BeginRenderPass(RenderPassDescriptor const * info) const;\n                    DAWN_EXPORT void CopyBufferToBuffer(Buffer const& source, uint64_t sourceOffset, Buffer const& destination, uint64_t destinationOffset, uint64_t size) const;\n                    DAWN_EXPORT void CopyBufferToTexture(BufferCopyView const * source, TextureCopyView const * destination, Extent3D const * copySize) const;\n                    DAWN_EXPORT void CopyTextureToBuffer(TextureCopyView const * source, BufferCopyView const * destination, Extent3D const * copySize) const;\n                    DAWN_EXPORT void CopyTextureToTexture(TextureCopyView const * source, TextureCopyView const * destination, Extent3D const * copySize) const;\n\n        private:\n            friend ObjectBase<CommandEncoder, DawnCommandEncoder>;\n            static DAWN_EXPORT void DawnReference(DawnCommandEncoder handle);\n            static DAWN_EXPORT void DawnRelease(DawnCommandEncoder handle);\n    };\n\n    class ComputePassEncoder : public ObjectBase<ComputePassEncoder, DawnComputePassEncoder> {\n        public:\n            using ObjectBase::ObjectBase;\n            using ObjectBase::operator=;\n\n                    DAWN_EXPORT void InsertDebugMarker(char const * groupLabel) const;\n                    DAWN_EXPORT void PopDebugGroup() const;\n                    DAWN_EXPORT void PushDebugGroup(char const * groupLabel) const;\n                    DAWN_EXPORT void SetPipeline(ComputePipeline const& pipeline) const;\n                    DAWN_EXPORT void SetPushConstants(ShaderStageBit stages, uint32_t offset, uint32_t count, uint32_t const * data) const;\n                    DAWN_EXPORT void SetBindGroup(uint32_t groupIndex, BindGroup const& group, uint32_t dynamicOffsetCount, uint64_t const * dynamicOffsets) const;\n                    DAWN_EXPORT void Dispatch(uint32_t x, uint32_t y, uint32_t z) const;\n                    DAWN_EXPORT void EndPass() const;\n\n        private:\n            friend ObjectBase<ComputePassEncoder, DawnComputePassEncoder>;\n            static DAWN_EXPORT void DawnReference(DawnComputePassEncoder handle);\n            static DAWN_EXPORT void DawnRelease(DawnComputePassEncoder handle);\n    };\n\n    class ComputePipeline : public ObjectBase<ComputePipeline, DawnComputePipeline> {\n        public:\n            using ObjectBase::ObjectBase;\n            using ObjectBase::operator=;\n\n\n        private:\n            friend ObjectBase<ComputePipeline, DawnComputePipeline>;\n            static DAWN_EXPORT void DawnReference(DawnComputePipeline handle);\n            static DAWN_EXPORT void DawnRelease(DawnComputePipeline handle);\n    };\n\n    class Device : public ObjectBase<Device, DawnDevice> {\n        public:\n            using ObjectBase::ObjectBase;\n            using ObjectBase::operator=;\n\n                    DAWN_EXPORT BindGroup CreateBindGroup(BindGroupDescriptor const * descriptor) const;\n                    DAWN_EXPORT BindGroupLayout CreateBindGroupLayout(BindGroupLayoutDescriptor const * descriptor) const;\n                    DAWN_EXPORT Buffer CreateBuffer(BufferDescriptor const * descriptor) const;\n                    DAWN_EXPORT CommandEncoder CreateCommandEncoder() const;\n                    DAWN_EXPORT ComputePipeline CreateComputePipeline(ComputePipelineDescriptor const * descriptor) const;\n                    DAWN_EXPORT RenderPipeline CreateRenderPipeline(RenderPipelineDescriptor const * descriptor) const;\n                    DAWN_EXPORT PipelineLayout CreatePipelineLayout(PipelineLayoutDescriptor const * descriptor) const;\n                    DAWN_EXPORT Queue CreateQueue() const;\n                    DAWN_EXPORT Sampler CreateSampler(SamplerDescriptor const * descriptor) const;\n                    DAWN_EXPORT ShaderModule CreateShaderModule(ShaderModuleDescriptor const * descriptor) const;\n                    DAWN_EXPORT SwapChain CreateSwapChain(SwapChainDescriptor const * descriptor) const;\n                    DAWN_EXPORT Texture CreateTexture(TextureDescriptor const * descriptor) const;\n                    DAWN_EXPORT void Tick() const;\n                    DAWN_EXPORT void SetErrorCallback(DeviceErrorCallback callback, CallbackUserdata userdata) const;\n\n        private:\n            friend ObjectBase<Device, DawnDevice>;\n            static DAWN_EXPORT void DawnReference(DawnDevice handle);\n            static DAWN_EXPORT void DawnRelease(DawnDevice handle);\n    };\n\n    class Fence : public ObjectBase<Fence, DawnFence> {\n        public:\n            using ObjectBase::ObjectBase;\n            using ObjectBase::operator=;\n\n                    DAWN_EXPORT uint64_t GetCompletedValue() const;\n                    DAWN_EXPORT void OnCompletion(uint64_t value, FenceOnCompletionCallback callback, CallbackUserdata userdata) const;\n\n        private:\n            friend ObjectBase<Fence, DawnFence>;\n            static DAWN_EXPORT void DawnReference(DawnFence handle);\n            static DAWN_EXPORT void DawnRelease(DawnFence handle);\n    };\n\n    class PipelineLayout : public ObjectBase<PipelineLayout, DawnPipelineLayout> {\n        public:\n            using ObjectBase::ObjectBase;\n            using ObjectBase::operator=;\n\n\n        private:\n            friend ObjectBase<PipelineLayout, DawnPipelineLayout>;\n            static DAWN_EXPORT void DawnReference(DawnPipelineLayout handle);\n            static DAWN_EXPORT void DawnRelease(DawnPipelineLayout handle);\n    };\n\n    class Queue : public ObjectBase<Queue, DawnQueue> {\n        public:\n            using ObjectBase::ObjectBase;\n            using ObjectBase::operator=;\n\n                    DAWN_EXPORT void Submit(uint32_t commandCount, CommandBuffer const * commands) const;\n                    DAWN_EXPORT void Signal(Fence const& fence, uint64_t signalValue) const;\n                    DAWN_EXPORT Fence CreateFence(FenceDescriptor const * descriptor) const;\n\n        private:\n            friend ObjectBase<Queue, DawnQueue>;\n            static DAWN_EXPORT void DawnReference(DawnQueue handle);\n            static DAWN_EXPORT void DawnRelease(DawnQueue handle);\n    };\n\n    class RenderPassEncoder : public ObjectBase<RenderPassEncoder, DawnRenderPassEncoder> {\n        public:\n            using ObjectBase::ObjectBase;\n            using ObjectBase::operator=;\n\n                    DAWN_EXPORT void SetPipeline(RenderPipeline const& pipeline) const;\n                    DAWN_EXPORT void SetPushConstants(ShaderStageBit stages, uint32_t offset, uint32_t count, uint32_t const * data) const;\n                    DAWN_EXPORT void SetBindGroup(uint32_t groupIndex, BindGroup const& group, uint32_t dynamicOffsetCount, uint64_t const * dynamicOffsets) const;\n                    DAWN_EXPORT void Draw(uint32_t vertexCount, uint32_t instanceCount, uint32_t firstVertex, uint32_t firstInstance) const;\n                    DAWN_EXPORT void DrawIndexed(uint32_t indexCount, uint32_t instanceCount, uint32_t firstIndex, int32_t baseVertex, uint32_t firstInstance) const;\n                    DAWN_EXPORT void InsertDebugMarker(char const * groupLabel) const;\n                    DAWN_EXPORT void PopDebugGroup() const;\n                    DAWN_EXPORT void PushDebugGroup(char const * groupLabel) const;\n                    DAWN_EXPORT void SetStencilReference(uint32_t reference) const;\n                    DAWN_EXPORT void SetBlendColor(Color const * color) const;\n                    DAWN_EXPORT void SetScissorRect(uint32_t x, uint32_t y, uint32_t width, uint32_t height) const;\n                    DAWN_EXPORT void SetVertexBuffers(uint32_t startSlot, uint32_t count, Buffer const * buffers, uint64_t const * offsets) const;\n                    DAWN_EXPORT void SetIndexBuffer(Buffer const& buffer, uint64_t offset) const;\n                    DAWN_EXPORT void EndPass() const;\n\n        private:\n            friend ObjectBase<RenderPassEncoder, DawnRenderPassEncoder>;\n            static DAWN_EXPORT void DawnReference(DawnRenderPassEncoder handle);\n            static DAWN_EXPORT void DawnRelease(DawnRenderPassEncoder handle);\n    };\n\n    class RenderPipeline : public ObjectBase<RenderPipeline, DawnRenderPipeline> {\n        public:\n            using ObjectBase::ObjectBase;\n            using ObjectBase::operator=;\n\n\n        private:\n            friend ObjectBase<RenderPipeline, DawnRenderPipeline>;\n            static DAWN_EXPORT void DawnReference(DawnRenderPipeline handle);\n            static DAWN_EXPORT void DawnRelease(DawnRenderPipeline handle);\n    };\n\n    class Sampler : public ObjectBase<Sampler, DawnSampler> {\n        public:\n            using ObjectBase::ObjectBase;\n            using ObjectBase::operator=;\n\n\n        private:\n            friend ObjectBase<Sampler, DawnSampler>;\n            static DAWN_EXPORT void DawnReference(DawnSampler handle);\n            static DAWN_EXPORT void DawnRelease(DawnSampler handle);\n    };\n\n    class ShaderModule : public ObjectBase<ShaderModule, DawnShaderModule> {\n        public:\n            using ObjectBase::ObjectBase;\n            using ObjectBase::operator=;\n\n\n        private:\n            friend ObjectBase<ShaderModule, DawnShaderModule>;\n            static DAWN_EXPORT void DawnReference(DawnShaderModule handle);\n            static DAWN_EXPORT void DawnRelease(DawnShaderModule handle);\n    };\n\n    class SwapChain : public ObjectBase<SwapChain, DawnSwapChain> {\n        public:\n            using ObjectBase::ObjectBase;\n            using ObjectBase::operator=;\n\n                    DAWN_EXPORT void Configure(TextureFormat format, TextureUsageBit allowedUsage, uint32_t width, uint32_t height) const;\n                    DAWN_EXPORT Texture GetNextTexture() const;\n                    DAWN_EXPORT void Present(Texture const& texture) const;\n\n        private:\n            friend ObjectBase<SwapChain, DawnSwapChain>;\n            static DAWN_EXPORT void DawnReference(DawnSwapChain handle);\n            static DAWN_EXPORT void DawnRelease(DawnSwapChain handle);\n    };\n\n    class Texture : public ObjectBase<Texture, DawnTexture> {\n        public:\n            using ObjectBase::ObjectBase;\n            using ObjectBase::operator=;\n\n                    DAWN_EXPORT TextureView CreateDefaultView() const;\n                    DAWN_EXPORT TextureView CreateView(TextureViewDescriptor const * descriptor) const;\n                    DAWN_EXPORT void Destroy() const;\n\n        private:\n            friend ObjectBase<Texture, DawnTexture>;\n            static DAWN_EXPORT void DawnReference(DawnTexture handle);\n            static DAWN_EXPORT void DawnRelease(DawnTexture handle);\n    };\n\n    class TextureView : public ObjectBase<TextureView, DawnTextureView> {\n        public:\n            using ObjectBase::ObjectBase;\n            using ObjectBase::operator=;\n\n\n        private:\n            friend ObjectBase<TextureView, DawnTextureView>;\n            static DAWN_EXPORT void DawnReference(DawnTextureView handle);\n            static DAWN_EXPORT void DawnRelease(DawnTextureView handle);\n    };\n\n\n    struct BindGroupBinding {\n        uint32_t binding;\n        Buffer buffer;\n        uint64_t offset;\n        uint64_t size;\n        Sampler sampler;\n        TextureView textureView;\n    };\n\n    struct BindGroupLayoutBinding {\n        uint32_t binding;\n        ShaderStageBit visibility;\n        BindingType type;\n    };\n\n    struct BlendDescriptor {\n        BlendOperation operation;\n        BlendFactor srcFactor;\n        BlendFactor dstFactor;\n    };\n\n    struct BufferCopyView {\n        const void* nextInChain = nullptr;\n        Buffer buffer;\n        uint64_t offset;\n        uint32_t rowPitch;\n        uint32_t imageHeight;\n    };\n\n    struct BufferDescriptor {\n        const void* nextInChain = nullptr;\n        BufferUsageBit usage;\n        uint64_t size;\n    };\n\n    struct Color {\n        float r;\n        float g;\n        float b;\n        float a;\n    };\n\n    struct Extent3D {\n        uint32_t width;\n        uint32_t height;\n        uint32_t depth;\n    };\n\n    struct FenceDescriptor {\n        const void* nextInChain = nullptr;\n        uint64_t initialValue;\n    };\n\n    struct Origin3D {\n        uint32_t x;\n        uint32_t y;\n        uint32_t z;\n    };\n\n    struct PipelineLayoutDescriptor {\n        const void* nextInChain = nullptr;\n        uint32_t bindGroupLayoutCount;\n        BindGroupLayout const * bindGroupLayouts;\n    };\n\n    struct PipelineStageDescriptor {\n        const void* nextInChain = nullptr;\n        ShaderModule module;\n        char const * entryPoint;\n    };\n\n    struct RasterizationStateDescriptor {\n        const void* nextInChain = nullptr;\n        FrontFace frontFace;\n        CullMode cullMode;\n        int32_t depthBias;\n        float depthBiasSlopeScale;\n        float depthBiasClamp;\n    };\n\n    struct RenderPassDepthStencilAttachmentDescriptor {\n        TextureView attachment;\n        LoadOp depthLoadOp;\n        StoreOp depthStoreOp;\n        float clearDepth;\n        LoadOp stencilLoadOp;\n        StoreOp stencilStoreOp;\n        uint32_t clearStencil;\n    };\n\n    struct SamplerDescriptor {\n        const void* nextInChain = nullptr;\n        AddressMode addressModeU;\n        AddressMode addressModeV;\n        AddressMode addressModeW;\n        FilterMode magFilter;\n        FilterMode minFilter;\n        FilterMode mipmapFilter;\n        float lodMinClamp;\n        float lodMaxClamp;\n        CompareFunction compareFunction;\n    };\n\n    struct ShaderModuleDescriptor {\n        const void* nextInChain = nullptr;\n        uint32_t codeSize;\n        uint32_t const * code;\n    };\n\n    struct StencilStateFaceDescriptor {\n        CompareFunction compare;\n        StencilOperation failOp;\n        StencilOperation depthFailOp;\n        StencilOperation passOp;\n    };\n\n    struct SwapChainDescriptor {\n        const void* nextInChain = nullptr;\n        uint64_t implementation;\n    };\n\n    struct TextureViewDescriptor {\n        const void* nextInChain = nullptr;\n        TextureFormat format;\n        TextureViewDimension dimension;\n        uint32_t baseMipLevel;\n        uint32_t mipLevelCount;\n        uint32_t baseArrayLayer;\n        uint32_t arrayLayerCount;\n    };\n\n    struct VertexAttributeDescriptor {\n        uint32_t shaderLocation;\n        uint32_t inputSlot;\n        uint64_t offset;\n        VertexFormat format;\n    };\n\n    struct VertexInputDescriptor {\n        uint32_t inputSlot;\n        uint64_t stride;\n        InputStepMode stepMode;\n    };\n\n    struct BindGroupDescriptor {\n        const void* nextInChain = nullptr;\n        BindGroupLayout layout;\n        uint32_t bindingCount;\n        BindGroupBinding const * bindings;\n    };\n\n    struct BindGroupLayoutDescriptor {\n        const void* nextInChain = nullptr;\n        uint32_t bindingCount;\n        BindGroupLayoutBinding const * bindings;\n    };\n\n    struct ColorStateDescriptor {\n        const void* nextInChain = nullptr;\n        TextureFormat format;\n        BlendDescriptor alphaBlend;\n        BlendDescriptor colorBlend;\n        ColorWriteMask writeMask;\n    };\n\n    struct ComputePipelineDescriptor {\n        const void* nextInChain = nullptr;\n        PipelineLayout layout;\n        PipelineStageDescriptor const * computeStage;\n    };\n\n    struct DepthStencilStateDescriptor {\n        const void* nextInChain = nullptr;\n        TextureFormat format;\n        bool depthWriteEnabled;\n        CompareFunction depthCompare;\n        StencilStateFaceDescriptor stencilFront;\n        StencilStateFaceDescriptor stencilBack;\n        uint32_t stencilReadMask;\n        uint32_t stencilWriteMask;\n    };\n\n    struct InputStateDescriptor {\n        const void* nextInChain = nullptr;\n        IndexFormat indexFormat;\n        uint32_t numAttributes;\n        VertexAttributeDescriptor const * attributes;\n        uint32_t numInputs;\n        VertexInputDescriptor const * inputs;\n    };\n\n    struct RenderPassColorAttachmentDescriptor {\n        TextureView attachment;\n        TextureView resolveTarget;\n        LoadOp loadOp;\n        StoreOp storeOp;\n        Color clearColor;\n    };\n\n    struct TextureCopyView {\n        const void* nextInChain = nullptr;\n        Texture texture;\n        uint32_t level;\n        uint32_t slice;\n        Origin3D origin;\n    };\n\n    struct TextureDescriptor {\n        const void* nextInChain = nullptr;\n        TextureUsageBit usage;\n        TextureDimension dimension;\n        Extent3D size;\n        uint32_t arrayLayerCount;\n        TextureFormat format;\n        uint32_t mipLevelCount;\n        uint32_t sampleCount;\n    };\n\n    struct RenderPassDescriptor {\n        uint32_t colorAttachmentCount;\n        const RenderPassColorAttachmentDescriptor* const * colorAttachments;\n        RenderPassDepthStencilAttachmentDescriptor const * depthStencilAttachment;\n    };\n\n    struct RenderPipelineDescriptor {\n        const void* nextInChain = nullptr;\n        PipelineLayout layout;\n        PipelineStageDescriptor const * vertexStage;\n        PipelineStageDescriptor const * fragmentStage;\n        InputStateDescriptor const * inputState;\n        PrimitiveTopology primitiveTopology;\n        RasterizationStateDescriptor const * rasterizationState;\n        uint32_t sampleCount;\n        DepthStencilStateDescriptor const * depthStencilState;\n        uint32_t colorStateCount;\n        const ColorStateDescriptor* const * colorStates;\n    };\n\n\n} // namespace dawn\n\n#endif // DAWN_DAWNCPP_H_\n", "dawn/dawn.h": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n#ifndef DAWN_DAWN_H_\n#define DAWN_DAWN_H_\n\n#include \"dawn/dawn_export.h\"\n\n#include <stdint.h>\n#include <stddef.h>\n#include <stdbool.h>\n\ntypedef struct DawnBindGroupImpl* DawnBindGroup;\ntypedef struct DawnBindGroupLayoutImpl* DawnBindGroupLayout;\ntypedef struct DawnBufferImpl* DawnBuffer;\ntypedef struct DawnCommandBufferImpl* DawnCommandBuffer;\ntypedef struct DawnCommandEncoderImpl* DawnCommandEncoder;\ntypedef struct DawnComputePassEncoderImpl* DawnComputePassEncoder;\ntypedef struct DawnComputePipelineImpl* DawnComputePipeline;\ntypedef struct DawnDeviceImpl* DawnDevice;\ntypedef struct DawnFenceImpl* DawnFence;\ntypedef struct DawnPipelineLayoutImpl* DawnPipelineLayout;\ntypedef struct DawnQueueImpl* DawnQueue;\ntypedef struct DawnRenderPassEncoderImpl* DawnRenderPassEncoder;\ntypedef struct DawnRenderPipelineImpl* DawnRenderPipeline;\ntypedef struct DawnSamplerImpl* DawnSampler;\ntypedef struct DawnShaderModuleImpl* DawnShaderModule;\ntypedef struct DawnSwapChainImpl* DawnSwapChain;\ntypedef struct DawnTextureImpl* DawnTexture;\ntypedef struct DawnTextureViewImpl* DawnTextureView;\n\ntypedef enum {\n    DAWN_ADDRESS_MODE_REPEAT = 0x00000000,\n    DAWN_ADDRESS_MODE_MIRRORED_REPEAT = 0x00000001,\n    DAWN_ADDRESS_MODE_CLAMP_TO_EDGE = 0x00000002,\n    DAWN_ADDRESS_MODE_FORCE32 = 0x7FFFFFFF\n} DawnAddressMode;\n\ntypedef enum {\n    DAWN_BINDING_TYPE_UNIFORM_BUFFER = 0x00000000,\n    DAWN_BINDING_TYPE_SAMPLER = 0x00000001,\n    DAWN_BINDING_TYPE_SAMPLED_TEXTURE = 0x00000002,\n    DAWN_BINDING_TYPE_STORAGE_BUFFER = 0x00000003,\n    DAWN_BINDING_TYPE_DYNAMIC_UNIFORM_BUFFER = 0x00000004,\n    DAWN_BINDING_TYPE_DYNAMIC_STORAGE_BUFFER = 0x00000005,\n    DAWN_BINDING_TYPE_FORCE32 = 0x7FFFFFFF\n} DawnBindingType;\n\ntypedef enum {\n    DAWN_BLEND_FACTOR_ZERO = 0x00000000,\n    DAWN_BLEND_FACTOR_ONE = 0x00000001,\n    DAWN_BLEND_FACTOR_SRC_COLOR = 0x00000002,\n    DAWN_BLEND_FACTOR_ONE_MINUS_SRC_COLOR = 0x00000003,\n    DAWN_BLEND_FACTOR_SRC_ALPHA = 0x00000004,\n    DAWN_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA = 0x00000005,\n    DAWN_BLEND_FACTOR_DST_COLOR = 0x00000006,\n    DAWN_BLEND_FACTOR_ONE_MINUS_DST_COLOR = 0x00000007,\n    DAWN_BLEND_FACTOR_DST_ALPHA = 0x00000008,\n    DAWN_BLEND_FACTOR_ONE_MINUS_DST_ALPHA = 0x00000009,\n    DAWN_BLEND_FACTOR_SRC_ALPHA_SATURATED = 0x0000000A,\n    DAWN_BLEND_FACTOR_BLEND_COLOR = 0x0000000B,\n    DAWN_BLEND_FACTOR_ONE_MINUS_BLEND_COLOR = 0x0000000C,\n    DAWN_BLEND_FACTOR_FORCE32 = 0x7FFFFFFF\n} DawnBlendFactor;\n\ntypedef enum {\n    DAWN_BLEND_OPERATION_ADD = 0x00000000,\n    DAWN_BLEND_OPERATION_SUBTRACT = 0x00000001,\n    DAWN_BLEND_OPERATION_REVERSE_SUBTRACT = 0x00000002,\n    DAWN_BLEND_OPERATION_MIN = 0x00000003,\n    DAWN_BLEND_OPERATION_MAX = 0x00000004,\n    DAWN_BLEND_OPERATION_FORCE32 = 0x7FFFFFFF\n} DawnBlendOperation;\n\ntypedef enum {\n    DAWN_BUFFER_MAP_ASYNC_STATUS_SUCCESS = 0x00000000,\n    DAWN_BUFFER_MAP_ASYNC_STATUS_ERROR = 0x00000001,\n    DAWN_BUFFER_MAP_ASYNC_STATUS_UNKNOWN = 0x00000002,\n    DAWN_BUFFER_MAP_ASYNC_STATUS_CONTEXT_LOST = 0x00000003,\n    DAWN_BUFFER_MAP_ASYNC_STATUS_FORCE32 = 0x7FFFFFFF\n} DawnBufferMapAsyncStatus;\n\ntypedef enum {\n    DAWN_COMPARE_FUNCTION_NEVER = 0x00000000,\n    DAWN_COMPARE_FUNCTION_LESS = 0x00000001,\n    DAWN_COMPARE_FUNCTION_LESS_EQUAL = 0x00000002,\n    DAWN_COMPARE_FUNCTION_GREATER = 0x00000003,\n    DAWN_COMPARE_FUNCTION_GREATER_EQUAL = 0x00000004,\n    DAWN_COMPARE_FUNCTION_EQUAL = 0x00000005,\n    DAWN_COMPARE_FUNCTION_NOT_EQUAL = 0x00000006,\n    DAWN_COMPARE_FUNCTION_ALWAYS = 0x00000007,\n    DAWN_COMPARE_FUNCTION_FORCE32 = 0x7FFFFFFF\n} DawnCompareFunction;\n\ntypedef enum {\n    DAWN_CULL_MODE_NONE = 0x00000000,\n    DAWN_CULL_MODE_FRONT = 0x00000001,\n    DAWN_CULL_MODE_BACK = 0x00000002,\n    DAWN_CULL_MODE_FORCE32 = 0x7FFFFFFF\n} DawnCullMode;\n\ntypedef enum {\n    DAWN_FENCE_COMPLETION_STATUS_SUCCESS = 0x00000000,\n    DAWN_FENCE_COMPLETION_STATUS_ERROR = 0x00000001,\n    DAWN_FENCE_COMPLETION_STATUS_UNKNOWN = 0x00000002,\n    DAWN_FENCE_COMPLETION_STATUS_CONTEXT_LOST = 0x00000003,\n    DAWN_FENCE_COMPLETION_STATUS_FORCE32 = 0x7FFFFFFF\n} DawnFenceCompletionStatus;\n\ntypedef enum {\n    DAWN_FILTER_MODE_NEAREST = 0x00000000,\n    DAWN_FILTER_MODE_LINEAR = 0x00000001,\n    DAWN_FILTER_MODE_FORCE32 = 0x7FFFFFFF\n} DawnFilterMode;\n\ntypedef enum {\n    DAWN_FRONT_FACE_CCW = 0x00000000,\n    DAWN_FRONT_FACE_CW = 0x00000001,\n    DAWN_FRONT_FACE_FORCE32 = 0x7FFFFFFF\n} DawnFrontFace;\n\ntypedef enum {\n    DAWN_INDEX_FORMAT_UINT16 = 0x00000000,\n    DAWN_INDEX_FORMAT_UINT32 = 0x00000001,\n    DAWN_INDEX_FORMAT_FORCE32 = 0x7FFFFFFF\n} DawnIndexFormat;\n\ntypedef enum {\n    DAWN_INPUT_STEP_MODE_VERTEX = 0x00000000,\n    DAWN_INPUT_STEP_MODE_INSTANCE = 0x00000001,\n    DAWN_INPUT_STEP_MODE_FORCE32 = 0x7FFFFFFF\n} DawnInputStepMode;\n\ntypedef enum {\n    DAWN_LOAD_OP_CLEAR = 0x00000000,\n    DAWN_LOAD_OP_LOAD = 0x00000001,\n    DAWN_LOAD_OP_FORCE32 = 0x7FFFFFFF\n} DawnLoadOp;\n\ntypedef enum {\n    DAWN_PRIMITIVE_TOPOLOGY_POINT_LIST = 0x00000000,\n    DAWN_PRIMITIVE_TOPOLOGY_LINE_LIST = 0x00000001,\n    DAWN_PRIMITIVE_TOPOLOGY_LINE_STRIP = 0x00000002,\n    DAWN_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST = 0x00000003,\n    DAWN_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP = 0x00000004,\n    DAWN_PRIMITIVE_TOPOLOGY_FORCE32 = 0x7FFFFFFF\n} DawnPrimitiveTopology;\n\ntypedef enum {\n    DAWN_SHADER_STAGE_VERTEX = 0x00000000,\n    DAWN_SHADER_STAGE_FRAGMENT = 0x00000001,\n    DAWN_SHADER_STAGE_COMPUTE = 0x00000002,\n    DAWN_SHADER_STAGE_FORCE32 = 0x7FFFFFFF\n} DawnShaderStage;\n\ntypedef enum {\n    DAWN_STENCIL_OPERATION_KEEP = 0x00000000,\n    DAWN_STENCIL_OPERATION_ZERO = 0x00000001,\n    DAWN_STENCIL_OPERATION_REPLACE = 0x00000002,\n    DAWN_STENCIL_OPERATION_INVERT = 0x00000003,\n    DAWN_STENCIL_OPERATION_INCREMENT_CLAMP = 0x00000004,\n    DAWN_STENCIL_OPERATION_DECREMENT_CLAMP = 0x00000005,\n    DAWN_STENCIL_OPERATION_INCREMENT_WRAP = 0x00000006,\n    DAWN_STENCIL_OPERATION_DECREMENT_WRAP = 0x00000007,\n    DAWN_STENCIL_OPERATION_FORCE32 = 0x7FFFFFFF\n} DawnStencilOperation;\n\ntypedef enum {\n    DAWN_STORE_OP_STORE = 0x00000000,\n    DAWN_STORE_OP_FORCE32 = 0x7FFFFFFF\n} DawnStoreOp;\n\ntypedef enum {\n    DAWN_TEXTURE_DIMENSION_2D = 0x00000000,\n    DAWN_TEXTURE_DIMENSION_FORCE32 = 0x7FFFFFFF\n} DawnTextureDimension;\n\ntypedef enum {\n    DAWN_TEXTURE_FORMAT_R8_G8_B8_A8_UNORM = 0x00000000,\n    DAWN_TEXTURE_FORMAT_R8_G8_UNORM = 0x00000001,\n    DAWN_TEXTURE_FORMAT_R8_UNORM = 0x00000002,\n    DAWN_TEXTURE_FORMAT_R8_G8_B8_A8_UINT = 0x00000003,\n    DAWN_TEXTURE_FORMAT_R8_G8_UINT = 0x00000004,\n    DAWN_TEXTURE_FORMAT_R8_UINT = 0x00000005,\n    DAWN_TEXTURE_FORMAT_B8_G8_R8_A8_UNORM = 0x00000006,\n    DAWN_TEXTURE_FORMAT_D32_FLOAT_S8_UINT = 0x00000007,\n    DAWN_TEXTURE_FORMAT_FORCE32 = 0x7FFFFFFF\n} DawnTextureFormat;\n\ntypedef enum {\n    DAWN_TEXTURE_VIEW_DIMENSION_2D = 0x00000000,\n    DAWN_TEXTURE_VIEW_DIMENSION_2D_ARRAY = 0x00000001,\n    DAWN_TEXTURE_VIEW_DIMENSION_CUBE = 0x00000002,\n    DAWN_TEXTURE_VIEW_DIMENSION_CUBE_ARRAY = 0x00000003,\n    DAWN_TEXTURE_VIEW_DIMENSION_FORCE32 = 0x7FFFFFFF\n} DawnTextureViewDimension;\n\ntypedef enum {\n    DAWN_VERTEX_FORMAT_UCHAR2 = 0x00000000,\n    DAWN_VERTEX_FORMAT_UCHAR4 = 0x00000001,\n    DAWN_VERTEX_FORMAT_CHAR2 = 0x00000002,\n    DAWN_VERTEX_FORMAT_CHAR4 = 0x00000003,\n    DAWN_VERTEX_FORMAT_UCHAR2_NORM = 0x00000004,\n    DAWN_VERTEX_FORMAT_UCHAR4_NORM = 0x00000005,\n    DAWN_VERTEX_FORMAT_CHAR2_NORM = 0x00000006,\n    DAWN_VERTEX_FORMAT_CHAR4_NORM = 0x00000007,\n    DAWN_VERTEX_FORMAT_USHORT2 = 0x00000008,\n    DAWN_VERTEX_FORMAT_USHORT4 = 0x00000009,\n    DAWN_VERTEX_FORMAT_SHORT2 = 0x0000000A,\n    DAWN_VERTEX_FORMAT_SHORT4 = 0x0000000B,\n    DAWN_VERTEX_FORMAT_USHORT2_NORM = 0x0000000C,\n    DAWN_VERTEX_FORMAT_USHORT4_NORM = 0x0000000D,\n    DAWN_VERTEX_FORMAT_SHORT2_NORM = 0x0000000E,\n    DAWN_VERTEX_FORMAT_SHORT4_NORM = 0x0000000F,\n    DAWN_VERTEX_FORMAT_HALF2 = 0x00000010,\n    DAWN_VERTEX_FORMAT_HALF4 = 0x00000011,\n    DAWN_VERTEX_FORMAT_FLOAT = 0x00000012,\n    DAWN_VERTEX_FORMAT_FLOAT2 = 0x00000013,\n    DAWN_VERTEX_FORMAT_FLOAT3 = 0x00000014,\n    DAWN_VERTEX_FORMAT_FLOAT4 = 0x00000015,\n    DAWN_VERTEX_FORMAT_UINT = 0x00000016,\n    DAWN_VERTEX_FORMAT_UINT2 = 0x00000017,\n    DAWN_VERTEX_FORMAT_UINT3 = 0x00000018,\n    DAWN_VERTEX_FORMAT_UINT4 = 0x00000019,\n    DAWN_VERTEX_FORMAT_INT = 0x0000001A,\n    DAWN_VERTEX_FORMAT_INT2 = 0x0000001B,\n    DAWN_VERTEX_FORMAT_INT3 = 0x0000001C,\n    DAWN_VERTEX_FORMAT_INT4 = 0x0000001D,\n    DAWN_VERTEX_FORMAT_FORCE32 = 0x7FFFFFFF\n} DawnVertexFormat;\n\ntypedef enum {\n    DAWN_BUFFER_USAGE_BIT_NONE = 0x00000000,\n    DAWN_BUFFER_USAGE_BIT_MAP_READ = 0x00000001,\n    DAWN_BUFFER_USAGE_BIT_MAP_WRITE = 0x00000002,\n    DAWN_BUFFER_USAGE_BIT_TRANSFER_SRC = 0x00000004,\n    DAWN_BUFFER_USAGE_BIT_TRANSFER_DST = 0x00000008,\n    DAWN_BUFFER_USAGE_BIT_INDEX = 0x00000010,\n    DAWN_BUFFER_USAGE_BIT_VERTEX = 0x00000020,\n    DAWN_BUFFER_USAGE_BIT_UNIFORM = 0x00000040,\n    DAWN_BUFFER_USAGE_BIT_STORAGE = 0x00000080,\n    DAWN_BUFFER_USAGE_BIT_FORCE32 = 0x7FFFFFFF\n} DawnBufferUsageBit;\n\ntypedef enum {\n    DAWN_COLOR_WRITE_MASK_NONE = 0x00000000,\n    DAWN_COLOR_WRITE_MASK_RED = 0x00000001,\n    DAWN_COLOR_WRITE_MASK_GREEN = 0x00000002,\n    DAWN_COLOR_WRITE_MASK_BLUE = 0x00000004,\n    DAWN_COLOR_WRITE_MASK_ALPHA = 0x00000008,\n    DAWN_COLOR_WRITE_MASK_ALL = 0x0000000F,\n    DAWN_COLOR_WRITE_MASK_FORCE32 = 0x7FFFFFFF\n} DawnColorWriteMask;\n\ntypedef enum {\n    DAWN_FACE_NONE = 0x00000000,\n    DAWN_FACE_BACK = 0x00000001,\n    DAWN_FACE_FRONT = 0x00000002,\n    DAWN_FACE_BOTH = 0x00000003,\n    DAWN_FACE_FORCE32 = 0x7FFFFFFF\n} DawnFace;\n\ntypedef enum {\n    DAWN_SHADER_STAGE_BIT_NONE = 0x00000000,\n    DAWN_SHADER_STAGE_BIT_VERTEX = 0x00000001,\n    DAWN_SHADER_STAGE_BIT_FRAGMENT = 0x00000002,\n    DAWN_SHADER_STAGE_BIT_COMPUTE = 0x00000004,\n    DAWN_SHADER_STAGE_BIT_FORCE32 = 0x7FFFFFFF\n} DawnShaderStageBit;\n\ntypedef enum {\n    DAWN_TEXTURE_ASPECT_COLOR = 0x00000001,\n    DAWN_TEXTURE_ASPECT_DEPTH = 0x00000002,\n    DAWN_TEXTURE_ASPECT_STENCIL = 0x00000004,\n    DAWN_TEXTURE_ASPECT_FORCE32 = 0x7FFFFFFF\n} DawnTextureAspect;\n\ntypedef enum {\n    DAWN_TEXTURE_USAGE_BIT_NONE = 0x00000000,\n    DAWN_TEXTURE_USAGE_BIT_TRANSFER_SRC = 0x00000001,\n    DAWN_TEXTURE_USAGE_BIT_TRANSFER_DST = 0x00000002,\n    DAWN_TEXTURE_USAGE_BIT_SAMPLED = 0x00000004,\n    DAWN_TEXTURE_USAGE_BIT_STORAGE = 0x00000008,\n    DAWN_TEXTURE_USAGE_BIT_OUTPUT_ATTACHMENT = 0x00000010,\n    DAWN_TEXTURE_USAGE_BIT_PRESENT = 0x00000020,\n    DAWN_TEXTURE_USAGE_BIT_FORCE32 = 0x7FFFFFFF\n} DawnTextureUsageBit;\n\n\ntypedef struct DawnBindGroupBinding {\n    uint32_t binding;\n    DawnBuffer buffer;\n    uint64_t offset;\n    uint64_t size;\n    DawnSampler sampler;\n    DawnTextureView textureView;\n} DawnBindGroupBinding;\n\ntypedef struct DawnBindGroupLayoutBinding {\n    uint32_t binding;\n    DawnShaderStageBit visibility;\n    DawnBindingType type;\n} DawnBindGroupLayoutBinding;\n\ntypedef struct DawnBlendDescriptor {\n    DawnBlendOperation operation;\n    DawnBlendFactor srcFactor;\n    DawnBlendFactor dstFactor;\n} DawnBlendDescriptor;\n\ntypedef struct DawnBufferCopyView {\n    const void* nextInChain;\n    DawnBuffer buffer;\n    uint64_t offset;\n    uint32_t rowPitch;\n    uint32_t imageHeight;\n} DawnBufferCopyView;\n\ntypedef struct DawnBufferDescriptor {\n    const void* nextInChain;\n    DawnBufferUsageBit usage;\n    uint64_t size;\n} DawnBufferDescriptor;\n\ntypedef struct DawnColor {\n    float r;\n    float g;\n    float b;\n    float a;\n} DawnColor;\n\ntypedef struct DawnExtent3D {\n    uint32_t width;\n    uint32_t height;\n    uint32_t depth;\n} DawnExtent3D;\n\ntypedef struct DawnFenceDescriptor {\n    const void* nextInChain;\n    uint64_t initialValue;\n} DawnFenceDescriptor;\n\ntypedef struct DawnOrigin3D {\n    uint32_t x;\n    uint32_t y;\n    uint32_t z;\n} DawnOrigin3D;\n\ntypedef struct DawnPipelineLayoutDescriptor {\n    const void* nextInChain;\n    uint32_t bindGroupLayoutCount;\n    DawnBindGroupLayout const * bindGroupLayouts;\n} DawnPipelineLayoutDescriptor;\n\ntypedef struct DawnPipelineStageDescriptor {\n    const void* nextInChain;\n    DawnShaderModule module;\n    char const * entryPoint;\n} DawnPipelineStageDescriptor;\n\ntypedef struct DawnRasterizationStateDescriptor {\n    const void* nextInChain;\n    DawnFrontFace frontFace;\n    DawnCullMode cullMode;\n    int32_t depthBias;\n    float depthBiasSlopeScale;\n    float depthBiasClamp;\n} DawnRasterizationStateDescriptor;\n\ntypedef struct DawnRenderPassDepthStencilAttachmentDescriptor {\n    DawnTextureView attachment;\n    DawnLoadOp depthLoadOp;\n    DawnStoreOp depthStoreOp;\n    float clearDepth;\n    DawnLoadOp stencilLoadOp;\n    DawnStoreOp stencilStoreOp;\n    uint32_t clearStencil;\n} DawnRenderPassDepthStencilAttachmentDescriptor;\n\ntypedef struct DawnSamplerDescriptor {\n    const void* nextInChain;\n    DawnAddressMode addressModeU;\n    DawnAddressMode addressModeV;\n    DawnAddressMode addressModeW;\n    DawnFilterMode magFilter;\n    DawnFilterMode minFilter;\n    DawnFilterMode mipmapFilter;\n    float lodMinClamp;\n    float lodMaxClamp;\n    DawnCompareFunction compareFunction;\n} DawnSamplerDescriptor;\n\ntypedef struct DawnShaderModuleDescriptor {\n    const void* nextInChain;\n    uint32_t codeSize;\n    uint32_t const * code;\n} DawnShaderModuleDescriptor;\n\ntypedef struct DawnStencilStateFaceDescriptor {\n    DawnCompareFunction compare;\n    DawnStencilOperation failOp;\n    DawnStencilOperation depthFailOp;\n    DawnStencilOperation passOp;\n} DawnStencilStateFaceDescriptor;\n\ntypedef struct DawnSwapChainDescriptor {\n    const void* nextInChain;\n    uint64_t implementation;\n} DawnSwapChainDescriptor;\n\ntypedef struct DawnTextureViewDescriptor {\n    const void* nextInChain;\n    DawnTextureFormat format;\n    DawnTextureViewDimension dimension;\n    uint32_t baseMipLevel;\n    uint32_t mipLevelCount;\n    uint32_t baseArrayLayer;\n    uint32_t arrayLayerCount;\n} DawnTextureViewDescriptor;\n\ntypedef struct DawnVertexAttributeDescriptor {\n    uint32_t shaderLocation;\n    uint32_t inputSlot;\n    uint64_t offset;\n    DawnVertexFormat format;\n} DawnVertexAttributeDescriptor;\n\ntypedef struct DawnVertexInputDescriptor {\n    uint32_t inputSlot;\n    uint64_t stride;\n    DawnInputStepMode stepMode;\n} DawnVertexInputDescriptor;\n\ntypedef struct DawnBindGroupDescriptor {\n    const void* nextInChain;\n    DawnBindGroupLayout layout;\n    uint32_t bindingCount;\n    DawnBindGroupBinding const * bindings;\n} DawnBindGroupDescriptor;\n\ntypedef struct DawnBindGroupLayoutDescriptor {\n    const void* nextInChain;\n    uint32_t bindingCount;\n    DawnBindGroupLayoutBinding const * bindings;\n} DawnBindGroupLayoutDescriptor;\n\ntypedef struct DawnColorStateDescriptor {\n    const void* nextInChain;\n    DawnTextureFormat format;\n    DawnBlendDescriptor alphaBlend;\n    DawnBlendDescriptor colorBlend;\n    DawnColorWriteMask writeMask;\n} DawnColorStateDescriptor;\n\ntypedef struct DawnComputePipelineDescriptor {\n    const void* nextInChain;\n    DawnPipelineLayout layout;\n    DawnPipelineStageDescriptor const * computeStage;\n} DawnComputePipelineDescriptor;\n\ntypedef struct DawnDepthStencilStateDescriptor {\n    const void* nextInChain;\n    DawnTextureFormat format;\n    bool depthWriteEnabled;\n    DawnCompareFunction depthCompare;\n    DawnStencilStateFaceDescriptor stencilFront;\n    DawnStencilStateFaceDescriptor stencilBack;\n    uint32_t stencilReadMask;\n    uint32_t stencilWriteMask;\n} DawnDepthStencilStateDescriptor;\n\ntypedef struct DawnInputStateDescriptor {\n    const void* nextInChain;\n    DawnIndexFormat indexFormat;\n    uint32_t numAttributes;\n    DawnVertexAttributeDescriptor const * attributes;\n    uint32_t numInputs;\n    DawnVertexInputDescriptor const * inputs;\n} DawnInputStateDescriptor;\n\ntypedef struct DawnRenderPassColorAttachmentDescriptor {\n    DawnTextureView attachment;\n    DawnTextureView resolveTarget;\n    DawnLoadOp loadOp;\n    DawnStoreOp storeOp;\n    DawnColor clearColor;\n} DawnRenderPassColorAttachmentDescriptor;\n\ntypedef struct DawnTextureCopyView {\n    const void* nextInChain;\n    DawnTexture texture;\n    uint32_t level;\n    uint32_t slice;\n    DawnOrigin3D origin;\n} DawnTextureCopyView;\n\ntypedef struct DawnTextureDescriptor {\n    const void* nextInChain;\n    DawnTextureUsageBit usage;\n    DawnTextureDimension dimension;\n    DawnExtent3D size;\n    uint32_t arrayLayerCount;\n    DawnTextureFormat format;\n    uint32_t mipLevelCount;\n    uint32_t sampleCount;\n} DawnTextureDescriptor;\n\ntypedef struct DawnRenderPassDescriptor {\n    uint32_t colorAttachmentCount;\n    const DawnRenderPassColorAttachmentDescriptor* const * colorAttachments;\n    DawnRenderPassDepthStencilAttachmentDescriptor const * depthStencilAttachment;\n} DawnRenderPassDescriptor;\n\ntypedef struct DawnRenderPipelineDescriptor {\n    const void* nextInChain;\n    DawnPipelineLayout layout;\n    DawnPipelineStageDescriptor const * vertexStage;\n    DawnPipelineStageDescriptor const * fragmentStage;\n    DawnInputStateDescriptor const * inputState;\n    DawnPrimitiveTopology primitiveTopology;\n    DawnRasterizationStateDescriptor const * rasterizationState;\n    uint32_t sampleCount;\n    DawnDepthStencilStateDescriptor const * depthStencilState;\n    uint32_t colorStateCount;\n    const DawnColorStateDescriptor* const * colorStates;\n} DawnRenderPipelineDescriptor;\n\n\n// Custom types depending on the target language\ntypedef uint64_t DawnCallbackUserdata;\ntypedef void (*DawnDeviceErrorCallback)(const char* message, DawnCallbackUserdata userdata);\ntypedef void (*DawnBufferMapReadCallback)(DawnBufferMapAsyncStatus status, const void* data, uint64_t dataLength, DawnCallbackUserdata userdata);\ntypedef void (*DawnBufferMapWriteCallback)(DawnBufferMapAsyncStatus status, void* data, uint64_t dataLength, DawnCallbackUserdata userdata);\ntypedef void (*DawnFenceOnCompletionCallback)(DawnFenceCompletionStatus status,\n                                              DawnCallbackUserdata userdata);\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n// Procs of BindGroup\ntypedef void (*DawnProcBindGroupReference)(DawnBindGroup bindGroup);\ntypedef void (*DawnProcBindGroupRelease)(DawnBindGroup bindGroup);\n\n// Procs of BindGroupLayout\ntypedef void (*DawnProcBindGroupLayoutReference)(DawnBindGroupLayout bindGroupLayout);\ntypedef void (*DawnProcBindGroupLayoutRelease)(DawnBindGroupLayout bindGroupLayout);\n\n// Procs of Buffer\ntypedef void (*DawnProcBufferSetSubData)(DawnBuffer buffer, uint64_t start, uint64_t count, uint8_t const * data);\ntypedef void (*DawnProcBufferUnmap)(DawnBuffer buffer);\ntypedef void (*DawnProcBufferDestroy)(DawnBuffer buffer);\ntypedef void (*DawnProcBufferMapReadAsync)(DawnBuffer buffer, DawnBufferMapReadCallback callback, DawnCallbackUserdata userdata);\ntypedef void (*DawnProcBufferMapWriteAsync)(DawnBuffer buffer, DawnBufferMapWriteCallback callback, DawnCallbackUserdata userdata);\ntypedef void (*DawnProcBufferReference)(DawnBuffer buffer);\ntypedef void (*DawnProcBufferRelease)(DawnBuffer buffer);\n\n// Procs of CommandBuffer\ntypedef void (*DawnProcCommandBufferReference)(DawnCommandBuffer commandBuffer);\ntypedef void (*DawnProcCommandBufferRelease)(DawnCommandBuffer commandBuffer);\n\n// Procs of CommandEncoder\ntypedef DawnCommandBuffer (*DawnProcCommandEncoderFinish)(DawnCommandEncoder commandEncoder);\ntypedef DawnComputePassEncoder (*DawnProcCommandEncoderBeginComputePass)(DawnCommandEncoder commandEncoder);\ntypedef DawnRenderPassEncoder (*DawnProcCommandEncoderBeginRenderPass)(DawnCommandEncoder commandEncoder, DawnRenderPassDescriptor const * info);\ntypedef void (*DawnProcCommandEncoderCopyBufferToBuffer)(DawnCommandEncoder commandEncoder, DawnBuffer source, uint64_t sourceOffset, DawnBuffer destination, uint64_t destinationOffset, uint64_t size);\ntypedef void (*DawnProcCommandEncoderCopyBufferToTexture)(DawnCommandEncoder commandEncoder, DawnBufferCopyView const * source, DawnTextureCopyView const * destination, DawnExtent3D const * copySize);\ntypedef void (*DawnProcCommandEncoderCopyTextureToBuffer)(DawnCommandEncoder commandEncoder, DawnTextureCopyView const * source, DawnBufferCopyView const * destination, DawnExtent3D const * copySize);\ntypedef void (*DawnProcCommandEncoderCopyTextureToTexture)(DawnCommandEncoder commandEncoder, DawnTextureCopyView const * source, DawnTextureCopyView const * destination, DawnExtent3D const * copySize);\ntypedef void (*DawnProcCommandEncoderReference)(DawnCommandEncoder commandEncoder);\ntypedef void (*DawnProcCommandEncoderRelease)(DawnCommandEncoder commandEncoder);\n\n// Procs of ComputePassEncoder\ntypedef void (*DawnProcComputePassEncoderInsertDebugMarker)(DawnComputePassEncoder computePassEncoder, char const * groupLabel);\ntypedef void (*DawnProcComputePassEncoderPopDebugGroup)(DawnComputePassEncoder computePassEncoder);\ntypedef void (*DawnProcComputePassEncoderPushDebugGroup)(DawnComputePassEncoder computePassEncoder, char const * groupLabel);\ntypedef void (*DawnProcComputePassEncoderSetPipeline)(DawnComputePassEncoder computePassEncoder, DawnComputePipeline pipeline);\ntypedef void (*DawnProcComputePassEncoderSetPushConstants)(DawnComputePassEncoder computePassEncoder, DawnShaderStageBit stages, uint32_t offset, uint32_t count, uint32_t const * data);\ntypedef void (*DawnProcComputePassEncoderSetBindGroup)(DawnComputePassEncoder computePassEncoder, uint32_t groupIndex, DawnBindGroup group, uint32_t dynamicOffsetCount, uint64_t const * dynamicOffsets);\ntypedef void (*DawnProcComputePassEncoderDispatch)(DawnComputePassEncoder computePassEncoder, uint32_t x, uint32_t y, uint32_t z);\ntypedef void (*DawnProcComputePassEncoderEndPass)(DawnComputePassEncoder computePassEncoder);\ntypedef void (*DawnProcComputePassEncoderReference)(DawnComputePassEncoder computePassEncoder);\ntypedef void (*DawnProcComputePassEncoderRelease)(DawnComputePassEncoder computePassEncoder);\n\n// Procs of ComputePipeline\ntypedef void (*DawnProcComputePipelineReference)(DawnComputePipeline computePipeline);\ntypedef void (*DawnProcComputePipelineRelease)(DawnComputePipeline computePipeline);\n\n// Procs of Device\ntypedef DawnBindGroup (*DawnProcDeviceCreateBindGroup)(DawnDevice device, DawnBindGroupDescriptor const * descriptor);\ntypedef DawnBindGroupLayout (*DawnProcDeviceCreateBindGroupLayout)(DawnDevice device, DawnBindGroupLayoutDescriptor const * descriptor);\ntypedef DawnBuffer (*DawnProcDeviceCreateBuffer)(DawnDevice device, DawnBufferDescriptor const * descriptor);\ntypedef DawnCommandEncoder (*DawnProcDeviceCreateCommandEncoder)(DawnDevice device);\ntypedef DawnComputePipeline (*DawnProcDeviceCreateComputePipeline)(DawnDevice device, DawnComputePipelineDescriptor const * descriptor);\ntypedef DawnRenderPipeline (*DawnProcDeviceCreateRenderPipeline)(DawnDevice device, DawnRenderPipelineDescriptor const * descriptor);\ntypedef DawnPipelineLayout (*DawnProcDeviceCreatePipelineLayout)(DawnDevice device, DawnPipelineLayoutDescriptor const * descriptor);\ntypedef DawnQueue (*DawnProcDeviceCreateQueue)(DawnDevice device);\ntypedef DawnSampler (*DawnProcDeviceCreateSampler)(DawnDevice device, DawnSamplerDescriptor const * descriptor);\ntypedef DawnShaderModule (*DawnProcDeviceCreateShaderModule)(DawnDevice device, DawnShaderModuleDescriptor const * descriptor);\ntypedef DawnSwapChain (*DawnProcDeviceCreateSwapChain)(DawnDevice device, DawnSwapChainDescriptor const * descriptor);\ntypedef DawnTexture (*DawnProcDeviceCreateTexture)(DawnDevice device, DawnTextureDescriptor const * descriptor);\ntypedef void (*DawnProcDeviceTick)(DawnDevice device);\ntypedef void (*DawnProcDeviceSetErrorCallback)(DawnDevice device, DawnDeviceErrorCallback callback, DawnCallbackUserdata userdata);\ntypedef void (*DawnProcDeviceReference)(DawnDevice device);\ntypedef void (*DawnProcDeviceRelease)(DawnDevice device);\n\n// Procs of Fence\ntypedef uint64_t (*DawnProcFenceGetCompletedValue)(DawnFence fence);\ntypedef void (*DawnProcFenceOnCompletion)(DawnFence fence, uint64_t value, DawnFenceOnCompletionCallback callback, DawnCallbackUserdata userdata);\ntypedef void (*DawnProcFenceReference)(DawnFence fence);\ntypedef void (*DawnProcFenceRelease)(DawnFence fence);\n\n// Procs of PipelineLayout\ntypedef void (*DawnProcPipelineLayoutReference)(DawnPipelineLayout pipelineLayout);\ntypedef void (*DawnProcPipelineLayoutRelease)(DawnPipelineLayout pipelineLayout);\n\n// Procs of Queue\ntypedef void (*DawnProcQueueSubmit)(DawnQueue queue, uint32_t commandCount, DawnCommandBuffer const * commands);\ntypedef void (*DawnProcQueueSignal)(DawnQueue queue, DawnFence fence, uint64_t signalValue);\ntypedef DawnFence (*DawnProcQueueCreateFence)(DawnQueue queue, DawnFenceDescriptor const * descriptor);\ntypedef void (*DawnProcQueueReference)(DawnQueue queue);\ntypedef void (*DawnProcQueueRelease)(DawnQueue queue);\n\n// Procs of RenderPassEncoder\ntypedef void (*DawnProcRenderPassEncoderSetPipeline)(DawnRenderPassEncoder renderPassEncoder, DawnRenderPipeline pipeline);\ntypedef void (*DawnProcRenderPassEncoderSetPushConstants)(DawnRenderPassEncoder renderPassEncoder, DawnShaderStageBit stages, uint32_t offset, uint32_t count, uint32_t const * data);\ntypedef void (*DawnProcRenderPassEncoderSetBindGroup)(DawnRenderPassEncoder renderPassEncoder, uint32_t groupIndex, DawnBindGroup group, uint32_t dynamicOffsetCount, uint64_t const * dynamicOffsets);\ntypedef void (*DawnProcRenderPassEncoderDraw)(DawnRenderPassEncoder renderPassEncoder, uint32_t vertexCount, uint32_t instanceCount, uint32_t firstVertex, uint32_t firstInstance);\ntypedef void (*DawnProcRenderPassEncoderDrawIndexed)(DawnRenderPassEncoder renderPassEncoder, uint32_t indexCount, uint32_t instanceCount, uint32_t firstIndex, int32_t baseVertex, uint32_t firstInstance);\ntypedef void (*DawnProcRenderPassEncoderInsertDebugMarker)(DawnRenderPassEncoder renderPassEncoder, char const * groupLabel);\ntypedef void (*DawnProcRenderPassEncoderPopDebugGroup)(DawnRenderPassEncoder renderPassEncoder);\ntypedef void (*DawnProcRenderPassEncoderPushDebugGroup)(DawnRenderPassEncoder renderPassEncoder, char const * groupLabel);\ntypedef void (*DawnProcRenderPassEncoderSetStencilReference)(DawnRenderPassEncoder renderPassEncoder, uint32_t reference);\ntypedef void (*DawnProcRenderPassEncoderSetBlendColor)(DawnRenderPassEncoder renderPassEncoder, DawnColor const * color);\ntypedef void (*DawnProcRenderPassEncoderSetScissorRect)(DawnRenderPassEncoder renderPassEncoder, uint32_t x, uint32_t y, uint32_t width, uint32_t height);\ntypedef void (*DawnProcRenderPassEncoderSetVertexBuffers)(DawnRenderPassEncoder renderPassEncoder, uint32_t startSlot, uint32_t count, DawnBuffer const * buffers, uint64_t const * offsets);\ntypedef void (*DawnProcRenderPassEncoderSetIndexBuffer)(DawnRenderPassEncoder renderPassEncoder, DawnBuffer buffer, uint64_t offset);\ntypedef void (*DawnProcRenderPassEncoderEndPass)(DawnRenderPassEncoder renderPassEncoder);\ntypedef void (*DawnProcRenderPassEncoderReference)(DawnRenderPassEncoder renderPassEncoder);\ntypedef void (*DawnProcRenderPassEncoderRelease)(DawnRenderPassEncoder renderPassEncoder);\n\n// Procs of RenderPipeline\ntypedef void (*DawnProcRenderPipelineReference)(DawnRenderPipeline renderPipeline);\ntypedef void (*DawnProcRenderPipelineRelease)(DawnRenderPipeline renderPipeline);\n\n// Procs of Sampler\ntypedef void (*DawnProcSamplerReference)(DawnSampler sampler);\ntypedef void (*DawnProcSamplerRelease)(DawnSampler sampler);\n\n// Procs of ShaderModule\ntypedef void (*DawnProcShaderModuleReference)(DawnShaderModule shaderModule);\ntypedef void (*DawnProcShaderModuleRelease)(DawnShaderModule shaderModule);\n\n// Procs of SwapChain\ntypedef void (*DawnProcSwapChainConfigure)(DawnSwapChain swapChain, DawnTextureFormat format, DawnTextureUsageBit allowedUsage, uint32_t width, uint32_t height);\ntypedef DawnTexture (*DawnProcSwapChainGetNextTexture)(DawnSwapChain swapChain);\ntypedef void (*DawnProcSwapChainPresent)(DawnSwapChain swapChain, DawnTexture texture);\ntypedef void (*DawnProcSwapChainReference)(DawnSwapChain swapChain);\ntypedef void (*DawnProcSwapChainRelease)(DawnSwapChain swapChain);\n\n// Procs of Texture\ntypedef DawnTextureView (*DawnProcTextureCreateDefaultView)(DawnTexture texture);\ntypedef DawnTextureView (*DawnProcTextureCreateView)(DawnTexture texture, DawnTextureViewDescriptor const * descriptor);\ntypedef void (*DawnProcTextureDestroy)(DawnTexture texture);\ntypedef void (*DawnProcTextureReference)(DawnTexture texture);\ntypedef void (*DawnProcTextureRelease)(DawnTexture texture);\n\n// Procs of TextureView\ntypedef void (*DawnProcTextureViewReference)(DawnTextureView textureView);\ntypedef void (*DawnProcTextureViewRelease)(DawnTextureView textureView);\n\n\nstruct DawnProcTable_s {\n    DawnProcBindGroupReference bindGroupReference;\n    DawnProcBindGroupRelease bindGroupRelease;\n\n    DawnProcBindGroupLayoutReference bindGroupLayoutReference;\n    DawnProcBindGroupLayoutRelease bindGroupLayoutRelease;\n\n    DawnProcBufferSetSubData bufferSetSubData;\n    DawnProcBufferUnmap bufferUnmap;\n    DawnProcBufferDestroy bufferDestroy;\n    DawnProcBufferMapReadAsync bufferMapReadAsync;\n    DawnProcBufferMapWriteAsync bufferMapWriteAsync;\n    DawnProcBufferReference bufferReference;\n    DawnProcBufferRelease bufferRelease;\n\n    DawnProcCommandBufferReference commandBufferReference;\n    DawnProcCommandBufferRelease commandBufferRelease;\n\n    DawnProcCommandEncoderFinish commandEncoderFinish;\n    DawnProcCommandEncoderBeginComputePass commandEncoderBeginComputePass;\n    DawnProcCommandEncoderBeginRenderPass commandEncoderBeginRenderPass;\n    DawnProcCommandEncoderCopyBufferToBuffer commandEncoderCopyBufferToBuffer;\n    DawnProcCommandEncoderCopyBufferToTexture commandEncoderCopyBufferToTexture;\n    DawnProcCommandEncoderCopyTextureToBuffer commandEncoderCopyTextureToBuffer;\n    DawnProcCommandEncoderCopyTextureToTexture commandEncoderCopyTextureToTexture;\n    DawnProcCommandEncoderReference commandEncoderReference;\n    DawnProcCommandEncoderRelease commandEncoderRelease;\n\n    DawnProcComputePassEncoderInsertDebugMarker computePassEncoderInsertDebugMarker;\n    DawnProcComputePassEncoderPopDebugGroup computePassEncoderPopDebugGroup;\n    DawnProcComputePassEncoderPushDebugGroup computePassEncoderPushDebugGroup;\n    DawnProcComputePassEncoderSetPipeline computePassEncoderSetPipeline;\n    DawnProcComputePassEncoderSetPushConstants computePassEncoderSetPushConstants;\n    DawnProcComputePassEncoderSetBindGroup computePassEncoderSetBindGroup;\n    DawnProcComputePassEncoderDispatch computePassEncoderDispatch;\n    DawnProcComputePassEncoderEndPass computePassEncoderEndPass;\n    DawnProcComputePassEncoderReference computePassEncoderReference;\n    DawnProcComputePassEncoderRelease computePassEncoderRelease;\n\n    DawnProcComputePipelineReference computePipelineReference;\n    DawnProcComputePipelineRelease computePipelineRelease;\n\n    DawnProcDeviceCreateBindGroup deviceCreateBindGroup;\n    DawnProcDeviceCreateBindGroupLayout deviceCreateBindGroupLayout;\n    DawnProcDeviceCreateBuffer deviceCreateBuffer;\n    DawnProcDeviceCreateCommandEncoder deviceCreateCommandEncoder;\n    DawnProcDeviceCreateComputePipeline deviceCreateComputePipeline;\n    DawnProcDeviceCreateRenderPipeline deviceCreateRenderPipeline;\n    DawnProcDeviceCreatePipelineLayout deviceCreatePipelineLayout;\n    DawnProcDeviceCreateQueue deviceCreateQueue;\n    DawnProcDeviceCreateSampler deviceCreateSampler;\n    DawnProcDeviceCreateShaderModule deviceCreateShaderModule;\n    DawnProcDeviceCreateSwapChain deviceCreateSwapChain;\n    DawnProcDeviceCreateTexture deviceCreateTexture;\n    DawnProcDeviceTick deviceTick;\n    DawnProcDeviceSetErrorCallback deviceSetErrorCallback;\n    DawnProcDeviceReference deviceReference;\n    DawnProcDeviceRelease deviceRelease;\n\n    DawnProcFenceGetCompletedValue fenceGetCompletedValue;\n    DawnProcFenceOnCompletion fenceOnCompletion;\n    DawnProcFenceReference fenceReference;\n    DawnProcFenceRelease fenceRelease;\n\n    DawnProcPipelineLayoutReference pipelineLayoutReference;\n    DawnProcPipelineLayoutRelease pipelineLayoutRelease;\n\n    DawnProcQueueSubmit queueSubmit;\n    DawnProcQueueSignal queueSignal;\n    DawnProcQueueCreateFence queueCreateFence;\n    DawnProcQueueReference queueReference;\n    DawnProcQueueRelease queueRelease;\n\n    DawnProcRenderPassEncoderSetPipeline renderPassEncoderSetPipeline;\n    DawnProcRenderPassEncoderSetPushConstants renderPassEncoderSetPushConstants;\n    DawnProcRenderPassEncoderSetBindGroup renderPassEncoderSetBindGroup;\n    DawnProcRenderPassEncoderDraw renderPassEncoderDraw;\n    DawnProcRenderPassEncoderDrawIndexed renderPassEncoderDrawIndexed;\n    DawnProcRenderPassEncoderInsertDebugMarker renderPassEncoderInsertDebugMarker;\n    DawnProcRenderPassEncoderPopDebugGroup renderPassEncoderPopDebugGroup;\n    DawnProcRenderPassEncoderPushDebugGroup renderPassEncoderPushDebugGroup;\n    DawnProcRenderPassEncoderSetStencilReference renderPassEncoderSetStencilReference;\n    DawnProcRenderPassEncoderSetBlendColor renderPassEncoderSetBlendColor;\n    DawnProcRenderPassEncoderSetScissorRect renderPassEncoderSetScissorRect;\n    DawnProcRenderPassEncoderSetVertexBuffers renderPassEncoderSetVertexBuffers;\n    DawnProcRenderPassEncoderSetIndexBuffer renderPassEncoderSetIndexBuffer;\n    DawnProcRenderPassEncoderEndPass renderPassEncoderEndPass;\n    DawnProcRenderPassEncoderReference renderPassEncoderReference;\n    DawnProcRenderPassEncoderRelease renderPassEncoderRelease;\n\n    DawnProcRenderPipelineReference renderPipelineReference;\n    DawnProcRenderPipelineRelease renderPipelineRelease;\n\n    DawnProcSamplerReference samplerReference;\n    DawnProcSamplerRelease samplerRelease;\n\n    DawnProcShaderModuleReference shaderModuleReference;\n    DawnProcShaderModuleRelease shaderModuleRelease;\n\n    DawnProcSwapChainConfigure swapChainConfigure;\n    DawnProcSwapChainGetNextTexture swapChainGetNextTexture;\n    DawnProcSwapChainPresent swapChainPresent;\n    DawnProcSwapChainReference swapChainReference;\n    DawnProcSwapChainRelease swapChainRelease;\n\n    DawnProcTextureCreateDefaultView textureCreateDefaultView;\n    DawnProcTextureCreateView textureCreateView;\n    DawnProcTextureDestroy textureDestroy;\n    DawnProcTextureReference textureReference;\n    DawnProcTextureRelease textureRelease;\n\n    DawnProcTextureViewReference textureViewReference;\n    DawnProcTextureViewRelease textureViewRelease;\n\n};\ntypedef struct DawnProcTable_s DawnProcTable;\n\n// Stuff below is for convenience and will forward calls to a static DawnProcTable.\n\n// Set which DawnProcTable will be used\nDAWN_EXPORT void dawnSetProcs(const DawnProcTable* procs);\n\n// Methods of BindGroup\nDAWN_EXPORT void dawnBindGroupReference(DawnBindGroup bindGroup);\nDAWN_EXPORT void dawnBindGroupRelease(DawnBindGroup bindGroup);\n\n// Methods of BindGroupLayout\nDAWN_EXPORT void dawnBindGroupLayoutReference(DawnBindGroupLayout bindGroupLayout);\nDAWN_EXPORT void dawnBindGroupLayoutRelease(DawnBindGroupLayout bindGroupLayout);\n\n// Methods of Buffer\nDAWN_EXPORT void dawnBufferSetSubData(DawnBuffer buffer, uint64_t start, uint64_t count, uint8_t const * data);\nDAWN_EXPORT void dawnBufferUnmap(DawnBuffer buffer);\nDAWN_EXPORT void dawnBufferDestroy(DawnBuffer buffer);\nDAWN_EXPORT void dawnBufferMapReadAsync(DawnBuffer buffer, DawnBufferMapReadCallback callback, DawnCallbackUserdata userdata);\nDAWN_EXPORT void dawnBufferMapWriteAsync(DawnBuffer buffer, DawnBufferMapWriteCallback callback, DawnCallbackUserdata userdata);\nDAWN_EXPORT void dawnBufferReference(DawnBuffer buffer);\nDAWN_EXPORT void dawnBufferRelease(DawnBuffer buffer);\n\n// Methods of CommandBuffer\nDAWN_EXPORT void dawnCommandBufferReference(DawnCommandBuffer commandBuffer);\nDAWN_EXPORT void dawnCommandBufferRelease(DawnCommandBuffer commandBuffer);\n\n// Methods of CommandEncoder\nDAWN_EXPORT DawnCommandBuffer dawnCommandEncoderFinish(DawnCommandEncoder commandEncoder);\nDAWN_EXPORT DawnComputePassEncoder dawnCommandEncoderBeginComputePass(DawnCommandEncoder commandEncoder);\nDAWN_EXPORT DawnRenderPassEncoder dawnCommandEncoderBeginRenderPass(DawnCommandEncoder commandEncoder, DawnRenderPassDescriptor const * info);\nDAWN_EXPORT void dawnCommandEncoderCopyBufferToBuffer(DawnCommandEncoder commandEncoder, DawnBuffer source, uint64_t sourceOffset, DawnBuffer destination, uint64_t destinationOffset, uint64_t size);\nDAWN_EXPORT void dawnCommandEncoderCopyBufferToTexture(DawnCommandEncoder commandEncoder, DawnBufferCopyView const * source, DawnTextureCopyView const * destination, DawnExtent3D const * copySize);\nDAWN_EXPORT void dawnCommandEncoderCopyTextureToBuffer(DawnCommandEncoder commandEncoder, DawnTextureCopyView const * source, DawnBufferCopyView const * destination, DawnExtent3D const * copySize);\nDAWN_EXPORT void dawnCommandEncoderCopyTextureToTexture(DawnCommandEncoder commandEncoder, DawnTextureCopyView const * source, DawnTextureCopyView const * destination, DawnExtent3D const * copySize);\nDAWN_EXPORT void dawnCommandEncoderReference(DawnCommandEncoder commandEncoder);\nDAWN_EXPORT void dawnCommandEncoderRelease(DawnCommandEncoder commandEncoder);\n\n// Methods of ComputePassEncoder\nDAWN_EXPORT void dawnComputePassEncoderInsertDebugMarker(DawnComputePassEncoder computePassEncoder, char const * groupLabel);\nDAWN_EXPORT void dawnComputePassEncoderPopDebugGroup(DawnComputePassEncoder computePassEncoder);\nDAWN_EXPORT void dawnComputePassEncoderPushDebugGroup(DawnComputePassEncoder computePassEncoder, char const * groupLabel);\nDAWN_EXPORT void dawnComputePassEncoderSetPipeline(DawnComputePassEncoder computePassEncoder, DawnComputePipeline pipeline);\nDAWN_EXPORT void dawnComputePassEncoderSetPushConstants(DawnComputePassEncoder computePassEncoder, DawnShaderStageBit stages, uint32_t offset, uint32_t count, uint32_t const * data);\nDAWN_EXPORT void dawnComputePassEncoderSetBindGroup(DawnComputePassEncoder computePassEncoder, uint32_t groupIndex, DawnBindGroup group, uint32_t dynamicOffsetCount, uint64_t const * dynamicOffsets);\nDAWN_EXPORT void dawnComputePassEncoderDispatch(DawnComputePassEncoder computePassEncoder, uint32_t x, uint32_t y, uint32_t z);\nDAWN_EXPORT void dawnComputePassEncoderEndPass(DawnComputePassEncoder computePassEncoder);\nDAWN_EXPORT void dawnComputePassEncoderReference(DawnComputePassEncoder computePassEncoder);\nDAWN_EXPORT void dawnComputePassEncoderRelease(DawnComputePassEncoder computePassEncoder);\n\n// Methods of ComputePipeline\nDAWN_EXPORT void dawnComputePipelineReference(DawnComputePipeline computePipeline);\nDAWN_EXPORT void dawnComputePipelineRelease(DawnComputePipeline computePipeline);\n\n// Methods of Device\nDAWN_EXPORT DawnBindGroup dawnDeviceCreateBindGroup(DawnDevice device, DawnBindGroupDescriptor const * descriptor);\nDAWN_EXPORT DawnBindGroupLayout dawnDeviceCreateBindGroupLayout(DawnDevice device, DawnBindGroupLayoutDescriptor const * descriptor);\nDAWN_EXPORT DawnBuffer dawnDeviceCreateBuffer(DawnDevice device, DawnBufferDescriptor const * descriptor);\nDAWN_EXPORT DawnCommandEncoder dawnDeviceCreateCommandEncoder(DawnDevice device);\nDAWN_EXPORT DawnComputePipeline dawnDeviceCreateComputePipeline(DawnDevice device, DawnComputePipelineDescriptor const * descriptor);\nDAWN_EXPORT DawnRenderPipeline dawnDeviceCreateRenderPipeline(DawnDevice device, DawnRenderPipelineDescriptor const * descriptor);\nDAWN_EXPORT DawnPipelineLayout dawnDeviceCreatePipelineLayout(DawnDevice device, DawnPipelineLayoutDescriptor const * descriptor);\nDAWN_EXPORT DawnQueue dawnDeviceCreateQueue(DawnDevice device);\nDAWN_EXPORT DawnSampler dawnDeviceCreateSampler(DawnDevice device, DawnSamplerDescriptor const * descriptor);\nDAWN_EXPORT DawnShaderModule dawnDeviceCreateShaderModule(DawnDevice device, DawnShaderModuleDescriptor const * descriptor);\nDAWN_EXPORT DawnSwapChain dawnDeviceCreateSwapChain(DawnDevice device, DawnSwapChainDescriptor const * descriptor);\nDAWN_EXPORT DawnTexture dawnDeviceCreateTexture(DawnDevice device, DawnTextureDescriptor const * descriptor);\nDAWN_EXPORT void dawnDeviceTick(DawnDevice device);\nDAWN_EXPORT void dawnDeviceSetErrorCallback(DawnDevice device, DawnDeviceErrorCallback callback, DawnCallbackUserdata userdata);\nDAWN_EXPORT void dawnDeviceReference(DawnDevice device);\nDAWN_EXPORT void dawnDeviceRelease(DawnDevice device);\n\n// Methods of Fence\nDAWN_EXPORT uint64_t dawnFenceGetCompletedValue(DawnFence fence);\nDAWN_EXPORT void dawnFenceOnCompletion(DawnFence fence, uint64_t value, DawnFenceOnCompletionCallback callback, DawnCallbackUserdata userdata);\nDAWN_EXPORT void dawnFenceReference(DawnFence fence);\nDAWN_EXPORT void dawnFenceRelease(DawnFence fence);\n\n// Methods of PipelineLayout\nDAWN_EXPORT void dawnPipelineLayoutReference(DawnPipelineLayout pipelineLayout);\nDAWN_EXPORT void dawnPipelineLayoutRelease(DawnPipelineLayout pipelineLayout);\n\n// Methods of Queue\nDAWN_EXPORT void dawnQueueSubmit(DawnQueue queue, uint32_t commandCount, DawnCommandBuffer const * commands);\nDAWN_EXPORT void dawnQueueSignal(DawnQueue queue, DawnFence fence, uint64_t signalValue);\nDAWN_EXPORT DawnFence dawnQueueCreateFence(DawnQueue queue, DawnFenceDescriptor const * descriptor);\nDAWN_EXPORT void dawnQueueReference(DawnQueue queue);\nDAWN_EXPORT void dawnQueueRelease(DawnQueue queue);\n\n// Methods of RenderPassEncoder\nDAWN_EXPORT void dawnRenderPassEncoderSetPipeline(DawnRenderPassEncoder renderPassEncoder, DawnRenderPipeline pipeline);\nDAWN_EXPORT void dawnRenderPassEncoderSetPushConstants(DawnRenderPassEncoder renderPassEncoder, DawnShaderStageBit stages, uint32_t offset, uint32_t count, uint32_t const * data);\nDAWN_EXPORT void dawnRenderPassEncoderSetBindGroup(DawnRenderPassEncoder renderPassEncoder, uint32_t groupIndex, DawnBindGroup group, uint32_t dynamicOffsetCount, uint64_t const * dynamicOffsets);\nDAWN_EXPORT void dawnRenderPassEncoderDraw(DawnRenderPassEncoder renderPassEncoder, uint32_t vertexCount, uint32_t instanceCount, uint32_t firstVertex, uint32_t firstInstance);\nDAWN_EXPORT void dawnRenderPassEncoderDrawIndexed(DawnRenderPassEncoder renderPassEncoder, uint32_t indexCount, uint32_t instanceCount, uint32_t firstIndex, int32_t baseVertex, uint32_t firstInstance);\nDAWN_EXPORT void dawnRenderPassEncoderInsertDebugMarker(DawnRenderPassEncoder renderPassEncoder, char const * groupLabel);\nDAWN_EXPORT void dawnRenderPassEncoderPopDebugGroup(DawnRenderPassEncoder renderPassEncoder);\nDAWN_EXPORT void dawnRenderPassEncoderPushDebugGroup(DawnRenderPassEncoder renderPassEncoder, char const * groupLabel);\nDAWN_EXPORT void dawnRenderPassEncoderSetStencilReference(DawnRenderPassEncoder renderPassEncoder, uint32_t reference);\nDAWN_EXPORT void dawnRenderPassEncoderSetBlendColor(DawnRenderPassEncoder renderPassEncoder, DawnColor const * color);\nDAWN_EXPORT void dawnRenderPassEncoderSetScissorRect(DawnRenderPassEncoder renderPassEncoder, uint32_t x, uint32_t y, uint32_t width, uint32_t height);\nDAWN_EXPORT void dawnRenderPassEncoderSetVertexBuffers(DawnRenderPassEncoder renderPassEncoder, uint32_t startSlot, uint32_t count, DawnBuffer const * buffers, uint64_t const * offsets);\nDAWN_EXPORT void dawnRenderPassEncoderSetIndexBuffer(DawnRenderPassEncoder renderPassEncoder, DawnBuffer buffer, uint64_t offset);\nDAWN_EXPORT void dawnRenderPassEncoderEndPass(DawnRenderPassEncoder renderPassEncoder);\nDAWN_EXPORT void dawnRenderPassEncoderReference(DawnRenderPassEncoder renderPassEncoder);\nDAWN_EXPORT void dawnRenderPassEncoderRelease(DawnRenderPassEncoder renderPassEncoder);\n\n// Methods of RenderPipeline\nDAWN_EXPORT void dawnRenderPipelineReference(DawnRenderPipeline renderPipeline);\nDAWN_EXPORT void dawnRenderPipelineRelease(DawnRenderPipeline renderPipeline);\n\n// Methods of Sampler\nDAWN_EXPORT void dawnSamplerReference(DawnSampler sampler);\nDAWN_EXPORT void dawnSamplerRelease(DawnSampler sampler);\n\n// Methods of ShaderModule\nDAWN_EXPORT void dawnShaderModuleReference(DawnShaderModule shaderModule);\nDAWN_EXPORT void dawnShaderModuleRelease(DawnShaderModule shaderModule);\n\n// Methods of SwapChain\nDAWN_EXPORT void dawnSwapChainConfigure(DawnSwapChain swapChain, DawnTextureFormat format, DawnTextureUsageBit allowedUsage, uint32_t width, uint32_t height);\nDAWN_EXPORT DawnTexture dawnSwapChainGetNextTexture(DawnSwapChain swapChain);\nDAWN_EXPORT void dawnSwapChainPresent(DawnSwapChain swapChain, DawnTexture texture);\nDAWN_EXPORT void dawnSwapChainReference(DawnSwapChain swapChain);\nDAWN_EXPORT void dawnSwapChainRelease(DawnSwapChain swapChain);\n\n// Methods of Texture\nDAWN_EXPORT DawnTextureView dawnTextureCreateDefaultView(DawnTexture texture);\nDAWN_EXPORT DawnTextureView dawnTextureCreateView(DawnTexture texture, DawnTextureViewDescriptor const * descriptor);\nDAWN_EXPORT void dawnTextureDestroy(DawnTexture texture);\nDAWN_EXPORT void dawnTextureReference(DawnTexture texture);\nDAWN_EXPORT void dawnTextureRelease(DawnTexture texture);\n\n// Methods of TextureView\nDAWN_EXPORT void dawnTextureViewReference(DawnTextureView textureView);\nDAWN_EXPORT void dawnTextureViewRelease(DawnTextureView textureView);\n\n\n#ifdef __cplusplus\n} // extern \"C\"\n#endif\n\n#endif // DAWN_DAWN_H_\n"}