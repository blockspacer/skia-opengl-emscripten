// This file is generated by TypeBuilder_cpp.template.

// Copyright (c) 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "content/browser/devtools/protocol/background_service.h"

#include "content/browser/devtools/protocol/protocol.h"

namespace content {
namespace protocol {
namespace BackgroundService {

// ------------- Enum values from types.

const char Metainfo::domainName[] = "BackgroundService";
const char Metainfo::commandPrefix[] = "BackgroundService.";
const char Metainfo::version[] = "1.3";

namespace ServiceNameEnum {
const char BackgroundFetch[] = "backgroundFetch";
const char BackgroundSync[] = "backgroundSync";
} // namespace ServiceNameEnum

std::unique_ptr<EventMetadata> EventMetadata::fromValue(protocol::Value* value, ErrorSupport* errors)
{
    if (!value || value->type() != protocol::Value::TypeObject) {
        errors->addError("object expected");
        return nullptr;
    }

    std::unique_ptr<EventMetadata> result(new EventMetadata());
    protocol::DictionaryValue* object = DictionaryValue::cast(value);
    errors->push();
    protocol::Value* keyValue = object->get("key");
    errors->setName("key");
    result->m_key = ValueConversions<String>::fromValue(keyValue, errors);
    protocol::Value* valueValue = object->get("value");
    errors->setName("value");
    result->m_value = ValueConversions<String>::fromValue(valueValue, errors);
    errors->pop();
    if (errors->hasErrors())
        return nullptr;
    return result;
}

std::unique_ptr<protocol::DictionaryValue> EventMetadata::toValue() const
{
    std::unique_ptr<protocol::DictionaryValue> result = DictionaryValue::create();
    result->setValue("key", ValueConversions<String>::toValue(m_key));
    result->setValue("value", ValueConversions<String>::toValue(m_value));
    return result;
}

std::unique_ptr<EventMetadata> EventMetadata::clone() const
{
    ErrorSupport errors;
    return fromValue(toValue().get(), &errors);
}

std::unique_ptr<BackgroundServiceEvent> BackgroundServiceEvent::fromValue(protocol::Value* value, ErrorSupport* errors)
{
    if (!value || value->type() != protocol::Value::TypeObject) {
        errors->addError("object expected");
        return nullptr;
    }

    std::unique_ptr<BackgroundServiceEvent> result(new BackgroundServiceEvent());
    protocol::DictionaryValue* object = DictionaryValue::cast(value);
    errors->push();
    protocol::Value* timestampValue = object->get("timestamp");
    errors->setName("timestamp");
    result->m_timestamp = ValueConversions<double>::fromValue(timestampValue, errors);
    protocol::Value* originValue = object->get("origin");
    errors->setName("origin");
    result->m_origin = ValueConversions<String>::fromValue(originValue, errors);
    protocol::Value* serviceWorkerRegistrationIdValue = object->get("serviceWorkerRegistrationId");
    errors->setName("serviceWorkerRegistrationId");
    result->m_serviceWorkerRegistrationId = ValueConversions<String>::fromValue(serviceWorkerRegistrationIdValue, errors);
    protocol::Value* serviceValue = object->get("service");
    errors->setName("service");
    result->m_service = ValueConversions<String>::fromValue(serviceValue, errors);
    protocol::Value* eventNameValue = object->get("eventName");
    errors->setName("eventName");
    result->m_eventName = ValueConversions<String>::fromValue(eventNameValue, errors);
    protocol::Value* instanceIdValue = object->get("instanceId");
    errors->setName("instanceId");
    result->m_instanceId = ValueConversions<String>::fromValue(instanceIdValue, errors);
    protocol::Value* eventMetadataValue = object->get("eventMetadata");
    errors->setName("eventMetadata");
    result->m_eventMetadata = ValueConversions<protocol::Array<protocol::BackgroundService::EventMetadata>>::fromValue(eventMetadataValue, errors);
    errors->pop();
    if (errors->hasErrors())
        return nullptr;
    return result;
}

std::unique_ptr<protocol::DictionaryValue> BackgroundServiceEvent::toValue() const
{
    std::unique_ptr<protocol::DictionaryValue> result = DictionaryValue::create();
    result->setValue("timestamp", ValueConversions<double>::toValue(m_timestamp));
    result->setValue("origin", ValueConversions<String>::toValue(m_origin));
    result->setValue("serviceWorkerRegistrationId", ValueConversions<String>::toValue(m_serviceWorkerRegistrationId));
    result->setValue("service", ValueConversions<String>::toValue(m_service));
    result->setValue("eventName", ValueConversions<String>::toValue(m_eventName));
    result->setValue("instanceId", ValueConversions<String>::toValue(m_instanceId));
    result->setValue("eventMetadata", ValueConversions<protocol::Array<protocol::BackgroundService::EventMetadata>>::toValue(m_eventMetadata.get()));
    return result;
}

std::unique_ptr<BackgroundServiceEvent> BackgroundServiceEvent::clone() const
{
    ErrorSupport errors;
    return fromValue(toValue().get(), &errors);
}

std::unique_ptr<RecordingStateChangedNotification> RecordingStateChangedNotification::fromValue(protocol::Value* value, ErrorSupport* errors)
{
    if (!value || value->type() != protocol::Value::TypeObject) {
        errors->addError("object expected");
        return nullptr;
    }

    std::unique_ptr<RecordingStateChangedNotification> result(new RecordingStateChangedNotification());
    protocol::DictionaryValue* object = DictionaryValue::cast(value);
    errors->push();
    protocol::Value* isRecordingValue = object->get("isRecording");
    errors->setName("isRecording");
    result->m_isRecording = ValueConversions<bool>::fromValue(isRecordingValue, errors);
    protocol::Value* serviceValue = object->get("service");
    errors->setName("service");
    result->m_service = ValueConversions<String>::fromValue(serviceValue, errors);
    errors->pop();
    if (errors->hasErrors())
        return nullptr;
    return result;
}

std::unique_ptr<protocol::DictionaryValue> RecordingStateChangedNotification::toValue() const
{
    std::unique_ptr<protocol::DictionaryValue> result = DictionaryValue::create();
    result->setValue("isRecording", ValueConversions<bool>::toValue(m_isRecording));
    result->setValue("service", ValueConversions<String>::toValue(m_service));
    return result;
}

std::unique_ptr<RecordingStateChangedNotification> RecordingStateChangedNotification::clone() const
{
    ErrorSupport errors;
    return fromValue(toValue().get(), &errors);
}

std::unique_ptr<BackgroundServiceEventReceivedNotification> BackgroundServiceEventReceivedNotification::fromValue(protocol::Value* value, ErrorSupport* errors)
{
    if (!value || value->type() != protocol::Value::TypeObject) {
        errors->addError("object expected");
        return nullptr;
    }

    std::unique_ptr<BackgroundServiceEventReceivedNotification> result(new BackgroundServiceEventReceivedNotification());
    protocol::DictionaryValue* object = DictionaryValue::cast(value);
    errors->push();
    protocol::Value* backgroundServiceEventValue = object->get("backgroundServiceEvent");
    errors->setName("backgroundServiceEvent");
    result->m_backgroundServiceEvent = ValueConversions<protocol::BackgroundService::BackgroundServiceEvent>::fromValue(backgroundServiceEventValue, errors);
    errors->pop();
    if (errors->hasErrors())
        return nullptr;
    return result;
}

std::unique_ptr<protocol::DictionaryValue> BackgroundServiceEventReceivedNotification::toValue() const
{
    std::unique_ptr<protocol::DictionaryValue> result = DictionaryValue::create();
    result->setValue("backgroundServiceEvent", ValueConversions<protocol::BackgroundService::BackgroundServiceEvent>::toValue(m_backgroundServiceEvent.get()));
    return result;
}

std::unique_ptr<BackgroundServiceEventReceivedNotification> BackgroundServiceEventReceivedNotification::clone() const
{
    ErrorSupport errors;
    return fromValue(toValue().get(), &errors);
}

// ------------- Enum values from params.


// ------------- Frontend notifications.

void Frontend::RecordingStateChanged(bool isRecording, const String& service)
{
    if (!m_frontendChannel)
        return;
    std::unique_ptr<RecordingStateChangedNotification> messageData = RecordingStateChangedNotification::Create()
        .SetIsRecording(isRecording)
        .SetService(service)
        .Build();
    m_frontendChannel->sendProtocolNotification(InternalResponse::createNotification("BackgroundService.recordingStateChanged", std::move(messageData)));
}

void Frontend::BackgroundServiceEventReceived(std::unique_ptr<protocol::BackgroundService::BackgroundServiceEvent> backgroundServiceEvent)
{
    if (!m_frontendChannel)
        return;
    std::unique_ptr<BackgroundServiceEventReceivedNotification> messageData = BackgroundServiceEventReceivedNotification::Create()
        .SetBackgroundServiceEvent(std::move(backgroundServiceEvent))
        .Build();
    m_frontendChannel->sendProtocolNotification(InternalResponse::createNotification("BackgroundService.backgroundServiceEventReceived", std::move(messageData)));
}

void Frontend::flush()
{
    m_frontendChannel->flushProtocolNotifications();
}

void Frontend::sendRawJSONNotification(String notification)
{
    m_frontendChannel->sendProtocolNotification(InternalRawNotification::fromJSON(std::move(notification)));
}

void Frontend::sendRawCBORNotification(std::vector<uint8_t> notification)
{
    m_frontendChannel->sendProtocolNotification(InternalRawNotification::fromBinary(std::move(notification)));
}

// --------------------- Dispatcher.

class DispatcherImpl : public protocol::DispatcherBase {
public:
    DispatcherImpl(FrontendChannel* frontendChannel, Backend* backend)
        : DispatcherBase(frontendChannel)
        , m_backend(backend) {
        m_dispatchMap["BackgroundService.startObserving"] = &DispatcherImpl::startObserving;
        m_dispatchMap["BackgroundService.stopObserving"] = &DispatcherImpl::stopObserving;
        m_dispatchMap["BackgroundService.setRecording"] = &DispatcherImpl::setRecording;
        m_dispatchMap["BackgroundService.clearEvents"] = &DispatcherImpl::clearEvents;
    }
    ~DispatcherImpl() override { }
    bool canDispatch(const String& method) override;
    void dispatch(int callId, const String& method, const ProtocolMessage& message, std::unique_ptr<protocol::DictionaryValue> messageObject) override;
    std::unordered_map<String, String>& redirects() { return m_redirects; }

protected:
    using CallHandler = void (DispatcherImpl::*)(int callId, const String& method, const ProtocolMessage& message, std::unique_ptr<DictionaryValue> messageObject, ErrorSupport* errors);
    using DispatchMap = std::unordered_map<String, CallHandler>;
    DispatchMap m_dispatchMap;
    std::unordered_map<String, String> m_redirects;

    void startObserving(int callId, const String& method, const ProtocolMessage& message, std::unique_ptr<DictionaryValue> requestMessageObject, ErrorSupport*);
    void stopObserving(int callId, const String& method, const ProtocolMessage& message, std::unique_ptr<DictionaryValue> requestMessageObject, ErrorSupport*);
    void setRecording(int callId, const String& method, const ProtocolMessage& message, std::unique_ptr<DictionaryValue> requestMessageObject, ErrorSupport*);
    void clearEvents(int callId, const String& method, const ProtocolMessage& message, std::unique_ptr<DictionaryValue> requestMessageObject, ErrorSupport*);

    Backend* m_backend;
};

bool DispatcherImpl::canDispatch(const String& method) {
    return m_dispatchMap.find(method) != m_dispatchMap.end();
}

void DispatcherImpl::dispatch(int callId, const String& method, const ProtocolMessage& message, std::unique_ptr<protocol::DictionaryValue> messageObject)
{
    std::unordered_map<String, CallHandler>::iterator it = m_dispatchMap.find(method);
    DCHECK(it != m_dispatchMap.end());
    protocol::ErrorSupport errors;
    (this->*(it->second))(callId, method, message, std::move(messageObject), &errors);
}


class StartObservingCallbackImpl : public Backend::StartObservingCallback, public DispatcherBase::Callback {
public:
    StartObservingCallbackImpl(std::unique_ptr<DispatcherBase::WeakPtr> backendImpl, int callId, const String& method, const ProtocolMessage& message)
        : DispatcherBase::Callback(std::move(backendImpl), callId, method, message) { }

    void sendSuccess() override
    {
        std::unique_ptr<protocol::DictionaryValue> resultObject = DictionaryValue::create();
        sendIfActive(std::move(resultObject), DispatchResponse::OK());
    }

    void fallThrough() override
    {
        fallThroughIfActive();
    }

    void sendFailure(const DispatchResponse& response) override
    {
        DCHECK(response.status() == DispatchResponse::kError);
        sendIfActive(nullptr, response);
    }
};

void DispatcherImpl::startObserving(int callId, const String& method, const ProtocolMessage& message, std::unique_ptr<DictionaryValue> requestMessageObject, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::DictionaryValue* object = DictionaryValue::cast(requestMessageObject->get("params"));
    errors->push();
    protocol::Value* serviceValue = object ? object->get("service") : nullptr;
    errors->setName("service");
    String in_service = ValueConversions<String>::fromValue(serviceValue, errors);
    errors->pop();
    if (errors->hasErrors()) {
        reportProtocolError(callId, DispatchResponse::kInvalidParams, kInvalidParamsString, errors);
        return;
    }

    std::unique_ptr<DispatcherBase::WeakPtr> weak = weakPtr();
    std::unique_ptr<StartObservingCallbackImpl> callback(new StartObservingCallbackImpl(weakPtr(), callId, method, message));
    m_backend->StartObserving(in_service, std::move(callback));
    return;
}

void DispatcherImpl::stopObserving(int callId, const String& method, const ProtocolMessage& message, std::unique_ptr<DictionaryValue> requestMessageObject, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::DictionaryValue* object = DictionaryValue::cast(requestMessageObject->get("params"));
    errors->push();
    protocol::Value* serviceValue = object ? object->get("service") : nullptr;
    errors->setName("service");
    String in_service = ValueConversions<String>::fromValue(serviceValue, errors);
    errors->pop();
    if (errors->hasErrors()) {
        reportProtocolError(callId, DispatchResponse::kInvalidParams, kInvalidParamsString, errors);
        return;
    }

    std::unique_ptr<DispatcherBase::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->StopObserving(in_service);
    if (response.status() == DispatchResponse::kFallThrough) {
        channel()->fallThrough(callId, method, message);
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(callId, response);
    return;
}

void DispatcherImpl::setRecording(int callId, const String& method, const ProtocolMessage& message, std::unique_ptr<DictionaryValue> requestMessageObject, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::DictionaryValue* object = DictionaryValue::cast(requestMessageObject->get("params"));
    errors->push();
    protocol::Value* shouldRecordValue = object ? object->get("shouldRecord") : nullptr;
    errors->setName("shouldRecord");
    bool in_shouldRecord = ValueConversions<bool>::fromValue(shouldRecordValue, errors);
    protocol::Value* serviceValue = object ? object->get("service") : nullptr;
    errors->setName("service");
    String in_service = ValueConversions<String>::fromValue(serviceValue, errors);
    errors->pop();
    if (errors->hasErrors()) {
        reportProtocolError(callId, DispatchResponse::kInvalidParams, kInvalidParamsString, errors);
        return;
    }

    std::unique_ptr<DispatcherBase::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->SetRecording(in_shouldRecord, in_service);
    if (response.status() == DispatchResponse::kFallThrough) {
        channel()->fallThrough(callId, method, message);
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(callId, response);
    return;
}

void DispatcherImpl::clearEvents(int callId, const String& method, const ProtocolMessage& message, std::unique_ptr<DictionaryValue> requestMessageObject, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::DictionaryValue* object = DictionaryValue::cast(requestMessageObject->get("params"));
    errors->push();
    protocol::Value* serviceValue = object ? object->get("service") : nullptr;
    errors->setName("service");
    String in_service = ValueConversions<String>::fromValue(serviceValue, errors);
    errors->pop();
    if (errors->hasErrors()) {
        reportProtocolError(callId, DispatchResponse::kInvalidParams, kInvalidParamsString, errors);
        return;
    }

    std::unique_ptr<DispatcherBase::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->ClearEvents(in_service);
    if (response.status() == DispatchResponse::kFallThrough) {
        channel()->fallThrough(callId, method, message);
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(callId, response);
    return;
}

// static
void Dispatcher::wire(UberDispatcher* uber, Backend* backend)
{
    std::unique_ptr<DispatcherImpl> dispatcher(new DispatcherImpl(uber->channel(), backend));
    uber->setupRedirects(dispatcher->redirects());
    uber->registerBackend("BackgroundService", std::move(dispatcher));
}

} // BackgroundService
} // namespace content
} // namespace protocol
