// This file is generated by TypeBuilder_h.template.

// Copyright (c) 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef content_protocol_Fetch_h
#define content_protocol_Fetch_h

#include "content/common/content_export.h"
#include "content/browser/devtools/protocol/protocol.h"
// For each imported domain we generate a ValueConversions struct instead of a full domain definition
// and include Domain::API version from there.
#include "content/browser/devtools/protocol/network.h"
#include "content/browser/devtools/protocol/io.h"
#include "content/browser/devtools/protocol/page.h"

namespace content {
namespace protocol {
namespace Fetch {

// ------------- Forward and enum declarations.
using RequestId = String;
using RequestStage = String;
class RequestPattern;
class HeaderEntry;
class AuthChallenge;
class AuthChallengeResponse;
class RequestPausedNotification;
class AuthRequiredNotification;

namespace RequestStageEnum {
CONTENT_EXPORT extern const char Request[];
CONTENT_EXPORT extern const char Response[];
} // namespace RequestStageEnum

// ------------- Type and builder declarations.

class CONTENT_EXPORT RequestPattern : public Serializable{
    PROTOCOL_DISALLOW_COPY(RequestPattern);
public:
    static std::unique_ptr<RequestPattern> fromValue(protocol::Value* value, ErrorSupport* errors);

    ~RequestPattern() override { }

    bool HasUrlPattern() { return m_urlPattern.isJust(); }
    String GetUrlPattern(const String& defaultValue) { return m_urlPattern.isJust() ? m_urlPattern.fromJust() : defaultValue; }
    void SetUrlPattern(const String& value) { m_urlPattern = value; }

    bool HasResourceType() { return m_resourceType.isJust(); }
    String GetResourceType(const String& defaultValue) { return m_resourceType.isJust() ? m_resourceType.fromJust() : defaultValue; }
    void SetResourceType(const String& value) { m_resourceType = value; }

    bool HasRequestStage() { return m_requestStage.isJust(); }
    String GetRequestStage(const String& defaultValue) { return m_requestStage.isJust() ? m_requestStage.fromJust() : defaultValue; }
    void SetRequestStage(const String& value) { m_requestStage = value; }

    std::unique_ptr<protocol::DictionaryValue> toValue() const;
    String serializeToJSON() override { return toValue()->serializeToJSON(); }
    std::vector<uint8_t> serializeToBinary() override { return toValue()->serializeToBinary(); }
    String toJSON() const { return toValue()->toJSONString(); }
    std::unique_ptr<RequestPattern> clone() const;

    template<int STATE>
    class RequestPatternBuilder {
    public:
        enum {
            NoFieldsSet = 0,
            AllFieldsSet = (0)};


        RequestPatternBuilder<STATE>& SetUrlPattern(const String& value)
        {
            m_result->SetUrlPattern(value);
            return *this;
        }

        RequestPatternBuilder<STATE>& SetResourceType(const String& value)
        {
            m_result->SetResourceType(value);
            return *this;
        }

        RequestPatternBuilder<STATE>& SetRequestStage(const String& value)
        {
            m_result->SetRequestStage(value);
            return *this;
        }

        std::unique_ptr<RequestPattern> Build()
        {
            static_assert(STATE == AllFieldsSet, "state should be AllFieldsSet");
            return std::move(m_result);
        }

    private:
        friend class RequestPattern;
        RequestPatternBuilder() : m_result(new RequestPattern()) { }

        template<int STEP> RequestPatternBuilder<STATE | STEP>& castState()
        {
            return *reinterpret_cast<RequestPatternBuilder<STATE | STEP>*>(this);
        }

        std::unique_ptr<protocol::Fetch::RequestPattern> m_result;
    };

    static RequestPatternBuilder<0> Create()
    {
        return RequestPatternBuilder<0>();
    }

private:
    RequestPattern()
    {
    }

    Maybe<String> m_urlPattern;
    Maybe<String> m_resourceType;
    Maybe<String> m_requestStage;
};


class CONTENT_EXPORT HeaderEntry : public Serializable{
    PROTOCOL_DISALLOW_COPY(HeaderEntry);
public:
    static std::unique_ptr<HeaderEntry> fromValue(protocol::Value* value, ErrorSupport* errors);

    ~HeaderEntry() override { }

    String GetName() { return m_name; }
    void SetName(const String& value) { m_name = value; }

    String GetValue() { return m_value; }
    void SetValue(const String& value) { m_value = value; }

    std::unique_ptr<protocol::DictionaryValue> toValue() const;
    String serializeToJSON() override { return toValue()->serializeToJSON(); }
    std::vector<uint8_t> serializeToBinary() override { return toValue()->serializeToBinary(); }
    String toJSON() const { return toValue()->toJSONString(); }
    std::unique_ptr<HeaderEntry> clone() const;

    template<int STATE>
    class HeaderEntryBuilder {
    public:
        enum {
            NoFieldsSet = 0,
            NameSet = 1 << 1,
            ValueSet = 1 << 2,
            AllFieldsSet = (NameSet | ValueSet | 0)};


        HeaderEntryBuilder<STATE | NameSet>& SetName(const String& value)
        {
            static_assert(!(STATE & NameSet), "property name should not be set yet");
            m_result->SetName(value);
            return castState<NameSet>();
        }

        HeaderEntryBuilder<STATE | ValueSet>& SetValue(const String& value)
        {
            static_assert(!(STATE & ValueSet), "property value should not be set yet");
            m_result->SetValue(value);
            return castState<ValueSet>();
        }

        std::unique_ptr<HeaderEntry> Build()
        {
            static_assert(STATE == AllFieldsSet, "state should be AllFieldsSet");
            return std::move(m_result);
        }

    private:
        friend class HeaderEntry;
        HeaderEntryBuilder() : m_result(new HeaderEntry()) { }

        template<int STEP> HeaderEntryBuilder<STATE | STEP>& castState()
        {
            return *reinterpret_cast<HeaderEntryBuilder<STATE | STEP>*>(this);
        }

        std::unique_ptr<protocol::Fetch::HeaderEntry> m_result;
    };

    static HeaderEntryBuilder<0> Create()
    {
        return HeaderEntryBuilder<0>();
    }

private:
    HeaderEntry()
    {
    }

    String m_name;
    String m_value;
};


class CONTENT_EXPORT AuthChallenge : public Serializable{
    PROTOCOL_DISALLOW_COPY(AuthChallenge);
public:
    static std::unique_ptr<AuthChallenge> fromValue(protocol::Value* value, ErrorSupport* errors);

    ~AuthChallenge() override { }

    struct CONTENT_EXPORT SourceEnum {
        static const char* Server;
        static const char* Proxy;
    }; // SourceEnum

    bool HasSource() { return m_source.isJust(); }
    String GetSource(const String& defaultValue) { return m_source.isJust() ? m_source.fromJust() : defaultValue; }
    void SetSource(const String& value) { m_source = value; }

    String GetOrigin() { return m_origin; }
    void SetOrigin(const String& value) { m_origin = value; }

    String GetScheme() { return m_scheme; }
    void SetScheme(const String& value) { m_scheme = value; }

    String GetRealm() { return m_realm; }
    void SetRealm(const String& value) { m_realm = value; }

    std::unique_ptr<protocol::DictionaryValue> toValue() const;
    String serializeToJSON() override { return toValue()->serializeToJSON(); }
    std::vector<uint8_t> serializeToBinary() override { return toValue()->serializeToBinary(); }
    String toJSON() const { return toValue()->toJSONString(); }
    std::unique_ptr<AuthChallenge> clone() const;

    template<int STATE>
    class AuthChallengeBuilder {
    public:
        enum {
            NoFieldsSet = 0,
            OriginSet = 1 << 1,
            SchemeSet = 1 << 2,
            RealmSet = 1 << 3,
            AllFieldsSet = (OriginSet | SchemeSet | RealmSet | 0)};


        AuthChallengeBuilder<STATE>& SetSource(const String& value)
        {
            m_result->SetSource(value);
            return *this;
        }

        AuthChallengeBuilder<STATE | OriginSet>& SetOrigin(const String& value)
        {
            static_assert(!(STATE & OriginSet), "property origin should not be set yet");
            m_result->SetOrigin(value);
            return castState<OriginSet>();
        }

        AuthChallengeBuilder<STATE | SchemeSet>& SetScheme(const String& value)
        {
            static_assert(!(STATE & SchemeSet), "property scheme should not be set yet");
            m_result->SetScheme(value);
            return castState<SchemeSet>();
        }

        AuthChallengeBuilder<STATE | RealmSet>& SetRealm(const String& value)
        {
            static_assert(!(STATE & RealmSet), "property realm should not be set yet");
            m_result->SetRealm(value);
            return castState<RealmSet>();
        }

        std::unique_ptr<AuthChallenge> Build()
        {
            static_assert(STATE == AllFieldsSet, "state should be AllFieldsSet");
            return std::move(m_result);
        }

    private:
        friend class AuthChallenge;
        AuthChallengeBuilder() : m_result(new AuthChallenge()) { }

        template<int STEP> AuthChallengeBuilder<STATE | STEP>& castState()
        {
            return *reinterpret_cast<AuthChallengeBuilder<STATE | STEP>*>(this);
        }

        std::unique_ptr<protocol::Fetch::AuthChallenge> m_result;
    };

    static AuthChallengeBuilder<0> Create()
    {
        return AuthChallengeBuilder<0>();
    }

private:
    AuthChallenge()
    {
    }

    Maybe<String> m_source;
    String m_origin;
    String m_scheme;
    String m_realm;
};


class CONTENT_EXPORT AuthChallengeResponse : public Serializable{
    PROTOCOL_DISALLOW_COPY(AuthChallengeResponse);
public:
    static std::unique_ptr<AuthChallengeResponse> fromValue(protocol::Value* value, ErrorSupport* errors);

    ~AuthChallengeResponse() override { }

    struct CONTENT_EXPORT ResponseEnum {
        static const char* Default;
        static const char* CancelAuth;
        static const char* ProvideCredentials;
    }; // ResponseEnum

    String GetResponse() { return m_response; }
    void SetResponse(const String& value) { m_response = value; }

    bool HasUsername() { return m_username.isJust(); }
    String GetUsername(const String& defaultValue) { return m_username.isJust() ? m_username.fromJust() : defaultValue; }
    void SetUsername(const String& value) { m_username = value; }

    bool HasPassword() { return m_password.isJust(); }
    String GetPassword(const String& defaultValue) { return m_password.isJust() ? m_password.fromJust() : defaultValue; }
    void SetPassword(const String& value) { m_password = value; }

    std::unique_ptr<protocol::DictionaryValue> toValue() const;
    String serializeToJSON() override { return toValue()->serializeToJSON(); }
    std::vector<uint8_t> serializeToBinary() override { return toValue()->serializeToBinary(); }
    String toJSON() const { return toValue()->toJSONString(); }
    std::unique_ptr<AuthChallengeResponse> clone() const;

    template<int STATE>
    class AuthChallengeResponseBuilder {
    public:
        enum {
            NoFieldsSet = 0,
            ResponseSet = 1 << 1,
            AllFieldsSet = (ResponseSet | 0)};


        AuthChallengeResponseBuilder<STATE | ResponseSet>& SetResponse(const String& value)
        {
            static_assert(!(STATE & ResponseSet), "property response should not be set yet");
            m_result->SetResponse(value);
            return castState<ResponseSet>();
        }

        AuthChallengeResponseBuilder<STATE>& SetUsername(const String& value)
        {
            m_result->SetUsername(value);
            return *this;
        }

        AuthChallengeResponseBuilder<STATE>& SetPassword(const String& value)
        {
            m_result->SetPassword(value);
            return *this;
        }

        std::unique_ptr<AuthChallengeResponse> Build()
        {
            static_assert(STATE == AllFieldsSet, "state should be AllFieldsSet");
            return std::move(m_result);
        }

    private:
        friend class AuthChallengeResponse;
        AuthChallengeResponseBuilder() : m_result(new AuthChallengeResponse()) { }

        template<int STEP> AuthChallengeResponseBuilder<STATE | STEP>& castState()
        {
            return *reinterpret_cast<AuthChallengeResponseBuilder<STATE | STEP>*>(this);
        }

        std::unique_ptr<protocol::Fetch::AuthChallengeResponse> m_result;
    };

    static AuthChallengeResponseBuilder<0> Create()
    {
        return AuthChallengeResponseBuilder<0>();
    }

private:
    AuthChallengeResponse()
    {
    }

    String m_response;
    Maybe<String> m_username;
    Maybe<String> m_password;
};


class CONTENT_EXPORT RequestPausedNotification : public Serializable{
    PROTOCOL_DISALLOW_COPY(RequestPausedNotification);
public:
    static std::unique_ptr<RequestPausedNotification> fromValue(protocol::Value* value, ErrorSupport* errors);

    ~RequestPausedNotification() override { }

    String GetRequestId() { return m_requestId; }
    void SetRequestId(const String& value) { m_requestId = value; }

    protocol::Network::Request* GetRequest() { return m_request.get(); }
    void SetRequest(std::unique_ptr<protocol::Network::Request> value) { m_request = std::move(value); }

    String GetFrameId() { return m_frameId; }
    void SetFrameId(const String& value) { m_frameId = value; }

    String GetResourceType() { return m_resourceType; }
    void SetResourceType(const String& value) { m_resourceType = value; }

    bool HasResponseErrorReason() { return m_responseErrorReason.isJust(); }
    String GetResponseErrorReason(const String& defaultValue) { return m_responseErrorReason.isJust() ? m_responseErrorReason.fromJust() : defaultValue; }
    void SetResponseErrorReason(const String& value) { m_responseErrorReason = value; }

    bool HasResponseStatusCode() { return m_responseStatusCode.isJust(); }
    int GetResponseStatusCode(int defaultValue) { return m_responseStatusCode.isJust() ? m_responseStatusCode.fromJust() : defaultValue; }
    void SetResponseStatusCode(int value) { m_responseStatusCode = value; }

    bool HasResponseHeaders() { return m_responseHeaders.isJust(); }
    protocol::Array<protocol::Fetch::HeaderEntry>* GetResponseHeaders(protocol::Array<protocol::Fetch::HeaderEntry>* defaultValue) { return m_responseHeaders.isJust() ? m_responseHeaders.fromJust() : defaultValue; }
    void SetResponseHeaders(std::unique_ptr<protocol::Array<protocol::Fetch::HeaderEntry>> value) { m_responseHeaders = std::move(value); }

    bool HasNetworkId() { return m_networkId.isJust(); }
    String GetNetworkId(const String& defaultValue) { return m_networkId.isJust() ? m_networkId.fromJust() : defaultValue; }
    void SetNetworkId(const String& value) { m_networkId = value; }

    std::unique_ptr<protocol::DictionaryValue> toValue() const;
    String serializeToJSON() override { return toValue()->serializeToJSON(); }
    std::vector<uint8_t> serializeToBinary() override { return toValue()->serializeToBinary(); }
    String toJSON() const { return toValue()->toJSONString(); }
    std::unique_ptr<RequestPausedNotification> clone() const;

    template<int STATE>
    class RequestPausedNotificationBuilder {
    public:
        enum {
            NoFieldsSet = 0,
            RequestIdSet = 1 << 1,
            RequestSet = 1 << 2,
            FrameIdSet = 1 << 3,
            ResourceTypeSet = 1 << 4,
            AllFieldsSet = (RequestIdSet | RequestSet | FrameIdSet | ResourceTypeSet | 0)};


        RequestPausedNotificationBuilder<STATE | RequestIdSet>& SetRequestId(const String& value)
        {
            static_assert(!(STATE & RequestIdSet), "property requestId should not be set yet");
            m_result->SetRequestId(value);
            return castState<RequestIdSet>();
        }

        RequestPausedNotificationBuilder<STATE | RequestSet>& SetRequest(std::unique_ptr<protocol::Network::Request> value)
        {
            static_assert(!(STATE & RequestSet), "property request should not be set yet");
            m_result->SetRequest(std::move(value));
            return castState<RequestSet>();
        }

        RequestPausedNotificationBuilder<STATE | FrameIdSet>& SetFrameId(const String& value)
        {
            static_assert(!(STATE & FrameIdSet), "property frameId should not be set yet");
            m_result->SetFrameId(value);
            return castState<FrameIdSet>();
        }

        RequestPausedNotificationBuilder<STATE | ResourceTypeSet>& SetResourceType(const String& value)
        {
            static_assert(!(STATE & ResourceTypeSet), "property resourceType should not be set yet");
            m_result->SetResourceType(value);
            return castState<ResourceTypeSet>();
        }

        RequestPausedNotificationBuilder<STATE>& SetResponseErrorReason(const String& value)
        {
            m_result->SetResponseErrorReason(value);
            return *this;
        }

        RequestPausedNotificationBuilder<STATE>& SetResponseStatusCode(int value)
        {
            m_result->SetResponseStatusCode(value);
            return *this;
        }

        RequestPausedNotificationBuilder<STATE>& SetResponseHeaders(std::unique_ptr<protocol::Array<protocol::Fetch::HeaderEntry>> value)
        {
            m_result->SetResponseHeaders(std::move(value));
            return *this;
        }

        RequestPausedNotificationBuilder<STATE>& SetNetworkId(const String& value)
        {
            m_result->SetNetworkId(value);
            return *this;
        }

        std::unique_ptr<RequestPausedNotification> Build()
        {
            static_assert(STATE == AllFieldsSet, "state should be AllFieldsSet");
            return std::move(m_result);
        }

    private:
        friend class RequestPausedNotification;
        RequestPausedNotificationBuilder() : m_result(new RequestPausedNotification()) { }

        template<int STEP> RequestPausedNotificationBuilder<STATE | STEP>& castState()
        {
            return *reinterpret_cast<RequestPausedNotificationBuilder<STATE | STEP>*>(this);
        }

        std::unique_ptr<protocol::Fetch::RequestPausedNotification> m_result;
    };

    static RequestPausedNotificationBuilder<0> Create()
    {
        return RequestPausedNotificationBuilder<0>();
    }

private:
    RequestPausedNotification()
    {
    }

    String m_requestId;
    std::unique_ptr<protocol::Network::Request> m_request;
    String m_frameId;
    String m_resourceType;
    Maybe<String> m_responseErrorReason;
    Maybe<int> m_responseStatusCode;
    Maybe<protocol::Array<protocol::Fetch::HeaderEntry>> m_responseHeaders;
    Maybe<String> m_networkId;
};


class CONTENT_EXPORT AuthRequiredNotification : public Serializable{
    PROTOCOL_DISALLOW_COPY(AuthRequiredNotification);
public:
    static std::unique_ptr<AuthRequiredNotification> fromValue(protocol::Value* value, ErrorSupport* errors);

    ~AuthRequiredNotification() override { }

    String GetRequestId() { return m_requestId; }
    void SetRequestId(const String& value) { m_requestId = value; }

    protocol::Network::Request* GetRequest() { return m_request.get(); }
    void SetRequest(std::unique_ptr<protocol::Network::Request> value) { m_request = std::move(value); }

    String GetFrameId() { return m_frameId; }
    void SetFrameId(const String& value) { m_frameId = value; }

    String GetResourceType() { return m_resourceType; }
    void SetResourceType(const String& value) { m_resourceType = value; }

    protocol::Fetch::AuthChallenge* GetAuthChallenge() { return m_authChallenge.get(); }
    void SetAuthChallenge(std::unique_ptr<protocol::Fetch::AuthChallenge> value) { m_authChallenge = std::move(value); }

    std::unique_ptr<protocol::DictionaryValue> toValue() const;
    String serializeToJSON() override { return toValue()->serializeToJSON(); }
    std::vector<uint8_t> serializeToBinary() override { return toValue()->serializeToBinary(); }
    String toJSON() const { return toValue()->toJSONString(); }
    std::unique_ptr<AuthRequiredNotification> clone() const;

    template<int STATE>
    class AuthRequiredNotificationBuilder {
    public:
        enum {
            NoFieldsSet = 0,
            RequestIdSet = 1 << 1,
            RequestSet = 1 << 2,
            FrameIdSet = 1 << 3,
            ResourceTypeSet = 1 << 4,
            AuthChallengeSet = 1 << 5,
            AllFieldsSet = (RequestIdSet | RequestSet | FrameIdSet | ResourceTypeSet | AuthChallengeSet | 0)};


        AuthRequiredNotificationBuilder<STATE | RequestIdSet>& SetRequestId(const String& value)
        {
            static_assert(!(STATE & RequestIdSet), "property requestId should not be set yet");
            m_result->SetRequestId(value);
            return castState<RequestIdSet>();
        }

        AuthRequiredNotificationBuilder<STATE | RequestSet>& SetRequest(std::unique_ptr<protocol::Network::Request> value)
        {
            static_assert(!(STATE & RequestSet), "property request should not be set yet");
            m_result->SetRequest(std::move(value));
            return castState<RequestSet>();
        }

        AuthRequiredNotificationBuilder<STATE | FrameIdSet>& SetFrameId(const String& value)
        {
            static_assert(!(STATE & FrameIdSet), "property frameId should not be set yet");
            m_result->SetFrameId(value);
            return castState<FrameIdSet>();
        }

        AuthRequiredNotificationBuilder<STATE | ResourceTypeSet>& SetResourceType(const String& value)
        {
            static_assert(!(STATE & ResourceTypeSet), "property resourceType should not be set yet");
            m_result->SetResourceType(value);
            return castState<ResourceTypeSet>();
        }

        AuthRequiredNotificationBuilder<STATE | AuthChallengeSet>& SetAuthChallenge(std::unique_ptr<protocol::Fetch::AuthChallenge> value)
        {
            static_assert(!(STATE & AuthChallengeSet), "property authChallenge should not be set yet");
            m_result->SetAuthChallenge(std::move(value));
            return castState<AuthChallengeSet>();
        }

        std::unique_ptr<AuthRequiredNotification> Build()
        {
            static_assert(STATE == AllFieldsSet, "state should be AllFieldsSet");
            return std::move(m_result);
        }

    private:
        friend class AuthRequiredNotification;
        AuthRequiredNotificationBuilder() : m_result(new AuthRequiredNotification()) { }

        template<int STEP> AuthRequiredNotificationBuilder<STATE | STEP>& castState()
        {
            return *reinterpret_cast<AuthRequiredNotificationBuilder<STATE | STEP>*>(this);
        }

        std::unique_ptr<protocol::Fetch::AuthRequiredNotification> m_result;
    };

    static AuthRequiredNotificationBuilder<0> Create()
    {
        return AuthRequiredNotificationBuilder<0>();
    }

private:
    AuthRequiredNotification()
    {
    }

    String m_requestId;
    std::unique_ptr<protocol::Network::Request> m_request;
    String m_frameId;
    String m_resourceType;
    std::unique_ptr<protocol::Fetch::AuthChallenge> m_authChallenge;
};


// ------------- Backend interface.

class CONTENT_EXPORT Backend {
public:
    virtual ~Backend() { }

    virtual DispatchResponse Disable() = 0;
    class CONTENT_EXPORT EnableCallback {
    public:
        virtual void sendSuccess() = 0;
        virtual void sendFailure(const DispatchResponse&) = 0;
        virtual void fallThrough() = 0;
        virtual ~EnableCallback() { }
    };
    virtual void Enable(Maybe<protocol::Array<protocol::Fetch::RequestPattern>> in_patterns, Maybe<bool> in_handleAuthRequests, std::unique_ptr<EnableCallback> callback) = 0;
    class CONTENT_EXPORT FailRequestCallback {
    public:
        virtual void sendSuccess() = 0;
        virtual void sendFailure(const DispatchResponse&) = 0;
        virtual void fallThrough() = 0;
        virtual ~FailRequestCallback() { }
    };
    virtual void FailRequest(const String& in_requestId, const String& in_errorReason, std::unique_ptr<FailRequestCallback> callback) = 0;
    class CONTENT_EXPORT FulfillRequestCallback {
    public:
        virtual void sendSuccess() = 0;
        virtual void sendFailure(const DispatchResponse&) = 0;
        virtual void fallThrough() = 0;
        virtual ~FulfillRequestCallback() { }
    };
    virtual void FulfillRequest(const String& in_requestId, int in_responseCode, std::unique_ptr<protocol::Array<protocol::Fetch::HeaderEntry>> in_responseHeaders, Maybe<Binary> in_body, Maybe<String> in_responsePhrase, std::unique_ptr<FulfillRequestCallback> callback) = 0;
    class CONTENT_EXPORT ContinueRequestCallback {
    public:
        virtual void sendSuccess() = 0;
        virtual void sendFailure(const DispatchResponse&) = 0;
        virtual void fallThrough() = 0;
        virtual ~ContinueRequestCallback() { }
    };
    virtual void ContinueRequest(const String& in_requestId, Maybe<String> in_url, Maybe<String> in_method, Maybe<String> in_postData, Maybe<protocol::Array<protocol::Fetch::HeaderEntry>> in_headers, std::unique_ptr<ContinueRequestCallback> callback) = 0;
    class CONTENT_EXPORT ContinueWithAuthCallback {
    public:
        virtual void sendSuccess() = 0;
        virtual void sendFailure(const DispatchResponse&) = 0;
        virtual void fallThrough() = 0;
        virtual ~ContinueWithAuthCallback() { }
    };
    virtual void ContinueWithAuth(const String& in_requestId, std::unique_ptr<protocol::Fetch::AuthChallengeResponse> in_authChallengeResponse, std::unique_ptr<ContinueWithAuthCallback> callback) = 0;
    class CONTENT_EXPORT GetResponseBodyCallback {
    public:
        virtual void sendSuccess(const String& body, bool base64Encoded) = 0;
        virtual void sendFailure(const DispatchResponse&) = 0;
        virtual void fallThrough() = 0;
        virtual ~GetResponseBodyCallback() { }
    };
    virtual void GetResponseBody(const String& in_requestId, std::unique_ptr<GetResponseBodyCallback> callback) = 0;
    class CONTENT_EXPORT TakeResponseBodyAsStreamCallback {
    public:
        virtual void sendSuccess(const String& stream) = 0;
        virtual void sendFailure(const DispatchResponse&) = 0;
        virtual void fallThrough() = 0;
        virtual ~TakeResponseBodyAsStreamCallback() { }
    };
    virtual void TakeResponseBodyAsStream(const String& in_requestId, std::unique_ptr<TakeResponseBodyAsStreamCallback> callback) = 0;

};

// ------------- Frontend interface.

class CONTENT_EXPORT Frontend {
public:
    explicit Frontend(FrontendChannel* frontendChannel) : m_frontendChannel(frontendChannel) { }
    void RequestPaused(const String& requestId, std::unique_ptr<protocol::Network::Request> request, const String& frameId, const String& resourceType, Maybe<String> responseErrorReason = Maybe<String>(), Maybe<int> responseStatusCode = Maybe<int>(), Maybe<protocol::Array<protocol::Fetch::HeaderEntry>> responseHeaders = Maybe<protocol::Array<protocol::Fetch::HeaderEntry>>(), Maybe<String> networkId = Maybe<String>());
    void AuthRequired(const String& requestId, std::unique_ptr<protocol::Network::Request> request, const String& frameId, const String& resourceType, std::unique_ptr<protocol::Fetch::AuthChallenge> authChallenge);

    void flush();
    void sendRawJSONNotification(String);
    void sendRawCBORNotification(std::vector<uint8_t>);
private:
    FrontendChannel* m_frontendChannel;
};

// ------------- Dispatcher.

class CONTENT_EXPORT Dispatcher {
public:
    static void wire(UberDispatcher*, Backend*);

private:
    Dispatcher() { }
};

// ------------- Metainfo.

class CONTENT_EXPORT Metainfo {
public:
    using BackendClass = Backend;
    using FrontendClass = Frontend;
    using DispatcherClass = Dispatcher;
    static const char domainName[];
    static const char commandPrefix[];
    static const char version[];
};

} // namespace Fetch
} // namespace content
} // namespace protocol

#endif // !defined(content_protocol_Fetch_h)
