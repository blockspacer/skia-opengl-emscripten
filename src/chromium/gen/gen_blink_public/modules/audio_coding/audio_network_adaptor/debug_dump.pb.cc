// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: debug_dump.proto

#include "debug_dump.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_config_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_config_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ControllerManager;
}  // namespace protobuf_config_2eproto
namespace protobuf_debug_5fdump_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_debug_5fdump_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_EncoderRuntimeConfig;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_debug_5fdump_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_NetworkMetrics;
}  // namespace protobuf_debug_5fdump_2eproto
namespace webrtc {
namespace audio_network_adaptor {
namespace debug_dump {
class NetworkMetricsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NetworkMetrics>
      _instance;
} _NetworkMetrics_default_instance_;
class EncoderRuntimeConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EncoderRuntimeConfig>
      _instance;
} _EncoderRuntimeConfig_default_instance_;
class EventDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Event>
      _instance;
} _Event_default_instance_;
}  // namespace debug_dump
}  // namespace audio_network_adaptor
}  // namespace webrtc
namespace protobuf_debug_5fdump_2eproto {
static void InitDefaultsNetworkMetrics() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::webrtc::audio_network_adaptor::debug_dump::_NetworkMetrics_default_instance_;
    new (ptr) ::webrtc::audio_network_adaptor::debug_dump::NetworkMetrics();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::webrtc::audio_network_adaptor::debug_dump::NetworkMetrics::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_NetworkMetrics =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsNetworkMetrics}, {}};

static void InitDefaultsEncoderRuntimeConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::webrtc::audio_network_adaptor::debug_dump::_EncoderRuntimeConfig_default_instance_;
    new (ptr) ::webrtc::audio_network_adaptor::debug_dump::EncoderRuntimeConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::webrtc::audio_network_adaptor::debug_dump::EncoderRuntimeConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_EncoderRuntimeConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEncoderRuntimeConfig}, {}};

static void InitDefaultsEvent() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::webrtc::audio_network_adaptor::debug_dump::_Event_default_instance_;
    new (ptr) ::webrtc::audio_network_adaptor::debug_dump::Event();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::webrtc::audio_network_adaptor::debug_dump::Event::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_Event =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsEvent}, {
      &protobuf_debug_5fdump_2eproto::scc_info_NetworkMetrics.base,
      &protobuf_debug_5fdump_2eproto::scc_info_EncoderRuntimeConfig.base,
      &protobuf_config_2eproto::scc_info_ControllerManager.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_NetworkMetrics.base);
  ::google::protobuf::internal::InitSCC(&scc_info_EncoderRuntimeConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Event.base);
}

}  // namespace protobuf_debug_5fdump_2eproto
namespace webrtc {
namespace audio_network_adaptor {
namespace debug_dump {
bool Event_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Event_Type Event::NETWORK_METRICS;
const Event_Type Event::ENCODER_RUNTIME_CONFIG;
const Event_Type Event::CONTROLLER_MANAGER_CONFIG;
const Event_Type Event::Type_MIN;
const Event_Type Event::Type_MAX;
const int Event::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void NetworkMetrics::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetworkMetrics::kUplinkBandwidthBpsFieldNumber;
const int NetworkMetrics::kUplinkPacketLossFractionFieldNumber;
const int NetworkMetrics::kTargetAudioBitrateBpsFieldNumber;
const int NetworkMetrics::kRttMsFieldNumber;
const int NetworkMetrics::kUplinkRecoverablePacketLossFractionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetworkMetrics::NetworkMetrics()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_debug_5fdump_2eproto::scc_info_NetworkMetrics.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:webrtc.audio_network_adaptor.debug_dump.NetworkMetrics)
}
NetworkMetrics::NetworkMetrics(const NetworkMetrics& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&uplink_bandwidth_bps_, &from.uplink_bandwidth_bps_,
    static_cast<size_t>(reinterpret_cast<char*>(&uplink_recoverable_packet_loss_fraction_) -
    reinterpret_cast<char*>(&uplink_bandwidth_bps_)) + sizeof(uplink_recoverable_packet_loss_fraction_));
  // @@protoc_insertion_point(copy_constructor:webrtc.audio_network_adaptor.debug_dump.NetworkMetrics)
}

void NetworkMetrics::SharedCtor() {
  ::memset(&uplink_bandwidth_bps_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uplink_recoverable_packet_loss_fraction_) -
      reinterpret_cast<char*>(&uplink_bandwidth_bps_)) + sizeof(uplink_recoverable_packet_loss_fraction_));
}

NetworkMetrics::~NetworkMetrics() {
  // @@protoc_insertion_point(destructor:webrtc.audio_network_adaptor.debug_dump.NetworkMetrics)
  SharedDtor();
}

void NetworkMetrics::SharedDtor() {
}

void NetworkMetrics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NetworkMetrics& NetworkMetrics::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_debug_5fdump_2eproto::scc_info_NetworkMetrics.base);
  return *internal_default_instance();
}


void NetworkMetrics::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.audio_network_adaptor.debug_dump.NetworkMetrics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    ::memset(&uplink_bandwidth_bps_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&uplink_recoverable_packet_loss_fraction_) -
        reinterpret_cast<char*>(&uplink_bandwidth_bps_)) + sizeof(uplink_recoverable_packet_loss_fraction_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NetworkMetrics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:webrtc.audio_network_adaptor.debug_dump.NetworkMetrics)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 uplink_bandwidth_bps = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_uplink_bandwidth_bps();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uplink_bandwidth_bps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float uplink_packet_loss_fraction = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_uplink_packet_loss_fraction();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &uplink_packet_loss_fraction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 target_audio_bitrate_bps = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_target_audio_bitrate_bps();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &target_audio_bitrate_bps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 rtt_ms = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_rtt_ms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rtt_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 uplink_recoverable_packet_loss_fraction = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_uplink_recoverable_packet_loss_fraction();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uplink_recoverable_packet_loss_fraction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:webrtc.audio_network_adaptor.debug_dump.NetworkMetrics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:webrtc.audio_network_adaptor.debug_dump.NetworkMetrics)
  return false;
#undef DO_
}

void NetworkMetrics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:webrtc.audio_network_adaptor.debug_dump.NetworkMetrics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 uplink_bandwidth_bps = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uplink_bandwidth_bps(), output);
  }

  // optional float uplink_packet_loss_fraction = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->uplink_packet_loss_fraction(), output);
  }

  // optional int32 target_audio_bitrate_bps = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->target_audio_bitrate_bps(), output);
  }

  // optional int32 rtt_ms = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->rtt_ms(), output);
  }

  // optional int32 uplink_recoverable_packet_loss_fraction = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->uplink_recoverable_packet_loss_fraction(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:webrtc.audio_network_adaptor.debug_dump.NetworkMetrics)
}

size_t NetworkMetrics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.audio_network_adaptor.debug_dump.NetworkMetrics)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 31u) {
    // optional int32 uplink_bandwidth_bps = 1;
    if (has_uplink_bandwidth_bps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uplink_bandwidth_bps());
    }

    // optional float uplink_packet_loss_fraction = 2;
    if (has_uplink_packet_loss_fraction()) {
      total_size += 1 + 4;
    }

    // optional int32 target_audio_bitrate_bps = 3;
    if (has_target_audio_bitrate_bps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->target_audio_bitrate_bps());
    }

    // optional int32 rtt_ms = 4;
    if (has_rtt_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rtt_ms());
    }

    // optional int32 uplink_recoverable_packet_loss_fraction = 5;
    if (has_uplink_recoverable_packet_loss_fraction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uplink_recoverable_packet_loss_fraction());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NetworkMetrics::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NetworkMetrics*>(&from));
}

void NetworkMetrics::MergeFrom(const NetworkMetrics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.audio_network_adaptor.debug_dump.NetworkMetrics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      uplink_bandwidth_bps_ = from.uplink_bandwidth_bps_;
    }
    if (cached_has_bits & 0x00000002u) {
      uplink_packet_loss_fraction_ = from.uplink_packet_loss_fraction_;
    }
    if (cached_has_bits & 0x00000004u) {
      target_audio_bitrate_bps_ = from.target_audio_bitrate_bps_;
    }
    if (cached_has_bits & 0x00000008u) {
      rtt_ms_ = from.rtt_ms_;
    }
    if (cached_has_bits & 0x00000010u) {
      uplink_recoverable_packet_loss_fraction_ = from.uplink_recoverable_packet_loss_fraction_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NetworkMetrics::CopyFrom(const NetworkMetrics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.audio_network_adaptor.debug_dump.NetworkMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkMetrics::IsInitialized() const {
  return true;
}

void NetworkMetrics::Swap(NetworkMetrics* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetworkMetrics::InternalSwap(NetworkMetrics* other) {
  using std::swap;
  swap(uplink_bandwidth_bps_, other->uplink_bandwidth_bps_);
  swap(uplink_packet_loss_fraction_, other->uplink_packet_loss_fraction_);
  swap(target_audio_bitrate_bps_, other->target_audio_bitrate_bps_);
  swap(rtt_ms_, other->rtt_ms_);
  swap(uplink_recoverable_packet_loss_fraction_, other->uplink_recoverable_packet_loss_fraction_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string NetworkMetrics::GetTypeName() const {
  return "webrtc.audio_network_adaptor.debug_dump.NetworkMetrics";
}


// ===================================================================

void EncoderRuntimeConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EncoderRuntimeConfig::kBitrateBpsFieldNumber;
const int EncoderRuntimeConfig::kFrameLengthMsFieldNumber;
const int EncoderRuntimeConfig::kUplinkPacketLossFractionFieldNumber;
const int EncoderRuntimeConfig::kEnableFecFieldNumber;
const int EncoderRuntimeConfig::kEnableDtxFieldNumber;
const int EncoderRuntimeConfig::kNumChannelsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EncoderRuntimeConfig::EncoderRuntimeConfig()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_debug_5fdump_2eproto::scc_info_EncoderRuntimeConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:webrtc.audio_network_adaptor.debug_dump.EncoderRuntimeConfig)
}
EncoderRuntimeConfig::EncoderRuntimeConfig(const EncoderRuntimeConfig& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&bitrate_bps_, &from.bitrate_bps_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_channels_) -
    reinterpret_cast<char*>(&bitrate_bps_)) + sizeof(num_channels_));
  // @@protoc_insertion_point(copy_constructor:webrtc.audio_network_adaptor.debug_dump.EncoderRuntimeConfig)
}

void EncoderRuntimeConfig::SharedCtor() {
  ::memset(&bitrate_bps_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_channels_) -
      reinterpret_cast<char*>(&bitrate_bps_)) + sizeof(num_channels_));
}

EncoderRuntimeConfig::~EncoderRuntimeConfig() {
  // @@protoc_insertion_point(destructor:webrtc.audio_network_adaptor.debug_dump.EncoderRuntimeConfig)
  SharedDtor();
}

void EncoderRuntimeConfig::SharedDtor() {
}

void EncoderRuntimeConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EncoderRuntimeConfig& EncoderRuntimeConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_debug_5fdump_2eproto::scc_info_EncoderRuntimeConfig.base);
  return *internal_default_instance();
}


void EncoderRuntimeConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.audio_network_adaptor.debug_dump.EncoderRuntimeConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    ::memset(&bitrate_bps_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_channels_) -
        reinterpret_cast<char*>(&bitrate_bps_)) + sizeof(num_channels_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool EncoderRuntimeConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:webrtc.audio_network_adaptor.debug_dump.EncoderRuntimeConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 bitrate_bps = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_bitrate_bps();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bitrate_bps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 frame_length_ms = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_frame_length_ms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frame_length_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float uplink_packet_loss_fraction = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_uplink_packet_loss_fraction();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &uplink_packet_loss_fraction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_fec = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_enable_fec();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_fec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_dtx = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_enable_dtx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_dtx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 num_channels = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_num_channels();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_channels_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:webrtc.audio_network_adaptor.debug_dump.EncoderRuntimeConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:webrtc.audio_network_adaptor.debug_dump.EncoderRuntimeConfig)
  return false;
#undef DO_
}

void EncoderRuntimeConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:webrtc.audio_network_adaptor.debug_dump.EncoderRuntimeConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 bitrate_bps = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bitrate_bps(), output);
  }

  // optional int32 frame_length_ms = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->frame_length_ms(), output);
  }

  // optional float uplink_packet_loss_fraction = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->uplink_packet_loss_fraction(), output);
  }

  // optional bool enable_fec = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->enable_fec(), output);
  }

  // optional bool enable_dtx = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->enable_dtx(), output);
  }

  // optional uint32 num_channels = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->num_channels(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:webrtc.audio_network_adaptor.debug_dump.EncoderRuntimeConfig)
}

size_t EncoderRuntimeConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.audio_network_adaptor.debug_dump.EncoderRuntimeConfig)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 63u) {
    // optional int32 bitrate_bps = 1;
    if (has_bitrate_bps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bitrate_bps());
    }

    // optional int32 frame_length_ms = 2;
    if (has_frame_length_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->frame_length_ms());
    }

    // optional float uplink_packet_loss_fraction = 3;
    if (has_uplink_packet_loss_fraction()) {
      total_size += 1 + 4;
    }

    // optional bool enable_fec = 4;
    if (has_enable_fec()) {
      total_size += 1 + 1;
    }

    // optional bool enable_dtx = 5;
    if (has_enable_dtx()) {
      total_size += 1 + 1;
    }

    // optional uint32 num_channels = 6;
    if (has_num_channels()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_channels());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EncoderRuntimeConfig::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EncoderRuntimeConfig*>(&from));
}

void EncoderRuntimeConfig::MergeFrom(const EncoderRuntimeConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.audio_network_adaptor.debug_dump.EncoderRuntimeConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      bitrate_bps_ = from.bitrate_bps_;
    }
    if (cached_has_bits & 0x00000002u) {
      frame_length_ms_ = from.frame_length_ms_;
    }
    if (cached_has_bits & 0x00000004u) {
      uplink_packet_loss_fraction_ = from.uplink_packet_loss_fraction_;
    }
    if (cached_has_bits & 0x00000008u) {
      enable_fec_ = from.enable_fec_;
    }
    if (cached_has_bits & 0x00000010u) {
      enable_dtx_ = from.enable_dtx_;
    }
    if (cached_has_bits & 0x00000020u) {
      num_channels_ = from.num_channels_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EncoderRuntimeConfig::CopyFrom(const EncoderRuntimeConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.audio_network_adaptor.debug_dump.EncoderRuntimeConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EncoderRuntimeConfig::IsInitialized() const {
  return true;
}

void EncoderRuntimeConfig::Swap(EncoderRuntimeConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EncoderRuntimeConfig::InternalSwap(EncoderRuntimeConfig* other) {
  using std::swap;
  swap(bitrate_bps_, other->bitrate_bps_);
  swap(frame_length_ms_, other->frame_length_ms_);
  swap(uplink_packet_loss_fraction_, other->uplink_packet_loss_fraction_);
  swap(enable_fec_, other->enable_fec_);
  swap(enable_dtx_, other->enable_dtx_);
  swap(num_channels_, other->num_channels_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string EncoderRuntimeConfig::GetTypeName() const {
  return "webrtc.audio_network_adaptor.debug_dump.EncoderRuntimeConfig";
}


// ===================================================================

void Event::InitAsDefaultInstance() {
  ::webrtc::audio_network_adaptor::debug_dump::_Event_default_instance_._instance.get_mutable()->network_metrics_ = const_cast< ::webrtc::audio_network_adaptor::debug_dump::NetworkMetrics*>(
      ::webrtc::audio_network_adaptor::debug_dump::NetworkMetrics::internal_default_instance());
  ::webrtc::audio_network_adaptor::debug_dump::_Event_default_instance_._instance.get_mutable()->encoder_runtime_config_ = const_cast< ::webrtc::audio_network_adaptor::debug_dump::EncoderRuntimeConfig*>(
      ::webrtc::audio_network_adaptor::debug_dump::EncoderRuntimeConfig::internal_default_instance());
  ::webrtc::audio_network_adaptor::debug_dump::_Event_default_instance_._instance.get_mutable()->controller_manager_config_ = const_cast< ::webrtc::audio_network_adaptor::config::ControllerManager*>(
      ::webrtc::audio_network_adaptor::config::ControllerManager::internal_default_instance());
}
void Event::clear_controller_manager_config() {
  if (controller_manager_config_ != NULL) controller_manager_config_->Clear();
  clear_has_controller_manager_config();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Event::kTypeFieldNumber;
const int Event::kTimestampFieldNumber;
const int Event::kNetworkMetricsFieldNumber;
const int Event::kEncoderRuntimeConfigFieldNumber;
const int Event::kControllerManagerConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Event::Event()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_debug_5fdump_2eproto::scc_info_Event.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:webrtc.audio_network_adaptor.debug_dump.Event)
}
Event::Event(const Event& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_network_metrics()) {
    network_metrics_ = new ::webrtc::audio_network_adaptor::debug_dump::NetworkMetrics(*from.network_metrics_);
  } else {
    network_metrics_ = NULL;
  }
  if (from.has_encoder_runtime_config()) {
    encoder_runtime_config_ = new ::webrtc::audio_network_adaptor::debug_dump::EncoderRuntimeConfig(*from.encoder_runtime_config_);
  } else {
    encoder_runtime_config_ = NULL;
  }
  if (from.has_controller_manager_config()) {
    controller_manager_config_ = new ::webrtc::audio_network_adaptor::config::ControllerManager(*from.controller_manager_config_);
  } else {
    controller_manager_config_ = NULL;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&type_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:webrtc.audio_network_adaptor.debug_dump.Event)
}

void Event::SharedCtor() {
  ::memset(&network_metrics_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&network_metrics_)) + sizeof(timestamp_));
}

Event::~Event() {
  // @@protoc_insertion_point(destructor:webrtc.audio_network_adaptor.debug_dump.Event)
  SharedDtor();
}

void Event::SharedDtor() {
  if (this != internal_default_instance()) delete network_metrics_;
  if (this != internal_default_instance()) delete encoder_runtime_config_;
  if (this != internal_default_instance()) delete controller_manager_config_;
}

void Event::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Event& Event::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_debug_5fdump_2eproto::scc_info_Event.base);
  return *internal_default_instance();
}


void Event::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.audio_network_adaptor.debug_dump.Event)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(network_metrics_ != NULL);
      network_metrics_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(encoder_runtime_config_ != NULL);
      encoder_runtime_config_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(controller_manager_config_ != NULL);
      controller_manager_config_->Clear();
    }
  }
  if (cached_has_bits & 24u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timestamp_) -
        reinterpret_cast<char*>(&type_)) + sizeof(timestamp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Event::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:webrtc.audio_network_adaptor.debug_dump.Event)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .webrtc.audio_network_adaptor.debug_dump.Event.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::webrtc::audio_network_adaptor::debug_dump::Event_Type_IsValid(value)) {
            set_type(static_cast< ::webrtc::audio_network_adaptor::debug_dump::Event_Type >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .webrtc.audio_network_adaptor.debug_dump.NetworkMetrics network_metrics = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_network_metrics()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .webrtc.audio_network_adaptor.debug_dump.EncoderRuntimeConfig encoder_runtime_config = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_encoder_runtime_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .webrtc.audio_network_adaptor.config.ControllerManager controller_manager_config = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_controller_manager_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:webrtc.audio_network_adaptor.debug_dump.Event)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:webrtc.audio_network_adaptor.debug_dump.Event)
  return false;
#undef DO_
}

void Event::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:webrtc.audio_network_adaptor.debug_dump.Event)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .webrtc.audio_network_adaptor.debug_dump.Event.Type type = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required uint32 timestamp = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->timestamp(), output);
  }

  // optional .webrtc.audio_network_adaptor.debug_dump.NetworkMetrics network_metrics = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->_internal_network_metrics(), output);
  }

  // optional .webrtc.audio_network_adaptor.debug_dump.EncoderRuntimeConfig encoder_runtime_config = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->_internal_encoder_runtime_config(), output);
  }

  // optional .webrtc.audio_network_adaptor.config.ControllerManager controller_manager_config = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->_internal_controller_manager_config(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:webrtc.audio_network_adaptor.debug_dump.Event)
}

size_t Event::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:webrtc.audio_network_adaptor.debug_dump.Event)
  size_t total_size = 0;

  if (has_type()) {
    // required .webrtc.audio_network_adaptor.debug_dump.Event.Type type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  if (has_timestamp()) {
    // required uint32 timestamp = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->timestamp());
  }

  return total_size;
}
size_t Event::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.audio_network_adaptor.debug_dump.Event)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x00000018) ^ 0x00000018) == 0) {  // All required fields are present.
    // required .webrtc.audio_network_adaptor.debug_dump.Event.Type type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());

    // required uint32 timestamp = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->timestamp());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .webrtc.audio_network_adaptor.debug_dump.NetworkMetrics network_metrics = 3;
    if (has_network_metrics()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *network_metrics_);
    }

    // optional .webrtc.audio_network_adaptor.debug_dump.EncoderRuntimeConfig encoder_runtime_config = 4;
    if (has_encoder_runtime_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *encoder_runtime_config_);
    }

    // optional .webrtc.audio_network_adaptor.config.ControllerManager controller_manager_config = 5;
    if (has_controller_manager_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *controller_manager_config_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Event::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Event*>(&from));
}

void Event::MergeFrom(const Event& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.audio_network_adaptor.debug_dump.Event)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_network_metrics()->::webrtc::audio_network_adaptor::debug_dump::NetworkMetrics::MergeFrom(from.network_metrics());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_encoder_runtime_config()->::webrtc::audio_network_adaptor::debug_dump::EncoderRuntimeConfig::MergeFrom(from.encoder_runtime_config());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_controller_manager_config()->::webrtc::audio_network_adaptor::config::ControllerManager::MergeFrom(from.controller_manager_config());
    }
    if (cached_has_bits & 0x00000008u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000010u) {
      timestamp_ = from.timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Event::CopyFrom(const Event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.audio_network_adaptor.debug_dump.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000018) != 0x00000018) return false;
  return true;
}

void Event::Swap(Event* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Event::InternalSwap(Event* other) {
  using std::swap;
  swap(network_metrics_, other->network_metrics_);
  swap(encoder_runtime_config_, other->encoder_runtime_config_);
  swap(controller_manager_config_, other->controller_manager_config_);
  swap(type_, other->type_);
  swap(timestamp_, other->timestamp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Event::GetTypeName() const {
  return "webrtc.audio_network_adaptor.debug_dump.Event";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace debug_dump
}  // namespace audio_network_adaptor
}  // namespace webrtc
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::webrtc::audio_network_adaptor::debug_dump::NetworkMetrics* Arena::CreateMaybeMessage< ::webrtc::audio_network_adaptor::debug_dump::NetworkMetrics >(Arena* arena) {
  return Arena::CreateInternal< ::webrtc::audio_network_adaptor::debug_dump::NetworkMetrics >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::webrtc::audio_network_adaptor::debug_dump::EncoderRuntimeConfig* Arena::CreateMaybeMessage< ::webrtc::audio_network_adaptor::debug_dump::EncoderRuntimeConfig >(Arena* arena) {
  return Arena::CreateInternal< ::webrtc::audio_network_adaptor::debug_dump::EncoderRuntimeConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::webrtc::audio_network_adaptor::debug_dump::Event* Arena::CreateMaybeMessage< ::webrtc::audio_network_adaptor::debug_dump::Event >(Arena* arena) {
  return Arena::CreateInternal< ::webrtc::audio_network_adaptor::debug_dump::Event >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
