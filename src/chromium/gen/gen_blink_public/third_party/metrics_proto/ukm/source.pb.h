// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ukm/source.proto

#ifndef PROTOBUF_INCLUDED_ukm_2fsource_2eproto
#define PROTOBUF_INCLUDED_ukm_2fsource_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_ukm_2fsource_2eproto 

namespace protobuf_ukm_2fsource_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
}  // namespace protobuf_ukm_2fsource_2eproto
namespace ukm {
class Source;
class SourceDefaultTypeInternal;
extern SourceDefaultTypeInternal _Source_default_instance_;
class Source_UrlInfo;
class Source_UrlInfoDefaultTypeInternal;
extern Source_UrlInfoDefaultTypeInternal _Source_UrlInfo_default_instance_;
}  // namespace ukm
namespace google {
namespace protobuf {
template<> ::ukm::Source* Arena::CreateMaybeMessage<::ukm::Source>(Arena*);
template<> ::ukm::Source_UrlInfo* Arena::CreateMaybeMessage<::ukm::Source_UrlInfo>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace ukm {

enum Source_UrlScheme {
  Source_UrlScheme_UNSUPPORTED = 0,
  Source_UrlScheme_HTTP = 1,
  Source_UrlScheme_HTTPS = 2,
  Source_UrlScheme_FTP = 3,
  Source_UrlScheme_ABOUT = 4,
  Source_UrlScheme_CHROME = 5,
  Source_UrlScheme_CHROME_EXTENSION = 6,
  Source_UrlScheme_APP = 7
};
bool Source_UrlScheme_IsValid(int value);
const Source_UrlScheme Source_UrlScheme_UrlScheme_MIN = Source_UrlScheme_UNSUPPORTED;
const Source_UrlScheme Source_UrlScheme_UrlScheme_MAX = Source_UrlScheme_APP;
const int Source_UrlScheme_UrlScheme_ARRAYSIZE = Source_UrlScheme_UrlScheme_MAX + 1;

// ===================================================================

class Source_UrlInfo : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:ukm.Source.UrlInfo) */ {
 public:
  Source_UrlInfo();
  virtual ~Source_UrlInfo();

  Source_UrlInfo(const Source_UrlInfo& from);

  inline Source_UrlInfo& operator=(const Source_UrlInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Source_UrlInfo(Source_UrlInfo&& from) noexcept
    : Source_UrlInfo() {
    *this = ::std::move(from);
  }

  inline Source_UrlInfo& operator=(Source_UrlInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Source_UrlInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Source_UrlInfo* internal_default_instance() {
    return reinterpret_cast<const Source_UrlInfo*>(
               &_Source_UrlInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(Source_UrlInfo* other);
  friend void swap(Source_UrlInfo& a, Source_UrlInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Source_UrlInfo* New() const final {
    return CreateMaybeMessage<Source_UrlInfo>(NULL);
  }

  Source_UrlInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Source_UrlInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const Source_UrlInfo& from);
  void MergeFrom(const Source_UrlInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Source_UrlInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string url = 1;
  bool has_url() const;
  void clear_url();
  static const int kUrlFieldNumber = 1;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // optional int32 previous_url_count = 2;
  bool has_previous_url_count() const;
  void clear_previous_url_count();
  static const int kPreviousUrlCountFieldNumber = 2;
  ::google::protobuf::int32 previous_url_count() const;
  void set_previous_url_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ukm.Source.UrlInfo)
 private:
  void set_has_url();
  void clear_has_url();
  void set_has_previous_url_count();
  void clear_has_previous_url_count();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::int32 previous_url_count_;
  friend struct ::protobuf_ukm_2fsource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Source : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:ukm.Source) */ {
 public:
  Source();
  virtual ~Source();

  Source(const Source& from);

  inline Source& operator=(const Source& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Source(Source&& from) noexcept
    : Source() {
    *this = ::std::move(from);
  }

  inline Source& operator=(Source&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Source& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Source* internal_default_instance() {
    return reinterpret_cast<const Source*>(
               &_Source_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(Source* other);
  friend void swap(Source& a, Source& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Source* New() const final {
    return CreateMaybeMessage<Source>(NULL);
  }

  Source* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Source>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const Source& from);
  void MergeFrom(const Source& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Source* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef Source_UrlInfo UrlInfo;

  typedef Source_UrlScheme UrlScheme;
  static const UrlScheme UNSUPPORTED =
    Source_UrlScheme_UNSUPPORTED;
  static const UrlScheme HTTP =
    Source_UrlScheme_HTTP;
  static const UrlScheme HTTPS =
    Source_UrlScheme_HTTPS;
  static const UrlScheme FTP =
    Source_UrlScheme_FTP;
  static const UrlScheme ABOUT =
    Source_UrlScheme_ABOUT;
  static const UrlScheme CHROME =
    Source_UrlScheme_CHROME;
  static const UrlScheme CHROME_EXTENSION =
    Source_UrlScheme_CHROME_EXTENSION;
  static const UrlScheme APP =
    Source_UrlScheme_APP;
  static inline bool UrlScheme_IsValid(int value) {
    return Source_UrlScheme_IsValid(value);
  }
  static const UrlScheme UrlScheme_MIN =
    Source_UrlScheme_UrlScheme_MIN;
  static const UrlScheme UrlScheme_MAX =
    Source_UrlScheme_UrlScheme_MAX;
  static const int UrlScheme_ARRAYSIZE =
    Source_UrlScheme_UrlScheme_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // repeated .ukm.Source.UrlInfo urls = 8;
  int urls_size() const;
  void clear_urls();
  static const int kUrlsFieldNumber = 8;
  ::ukm::Source_UrlInfo* mutable_urls(int index);
  ::google::protobuf::RepeatedPtrField< ::ukm::Source_UrlInfo >*
      mutable_urls();
  const ::ukm::Source_UrlInfo& urls(int index) const;
  ::ukm::Source_UrlInfo* add_urls();
  const ::google::protobuf::RepeatedPtrField< ::ukm::Source_UrlInfo >&
      urls() const;

  // optional string url = 2;
  bool has_url() const;
  void clear_url();
  static const int kUrlFieldNumber = 2;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // optional string initial_url = 6;
  bool has_initial_url() const;
  void clear_initial_url();
  static const int kInitialUrlFieldNumber = 6;
  const ::std::string& initial_url() const;
  void set_initial_url(const ::std::string& value);
  #if LANG_CXX11
  void set_initial_url(::std::string&& value);
  #endif
  void set_initial_url(const char* value);
  void set_initial_url(const char* value, size_t size);
  ::std::string* mutable_initial_url();
  ::std::string* release_initial_url();
  void set_allocated_initial_url(::std::string* initial_url);

  // optional int64 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // optional int64 navigation_time_msec = 3;
  bool has_navigation_time_msec() const;
  void clear_navigation_time_msec();
  static const int kNavigationTimeMsecFieldNumber = 3;
  ::google::protobuf::int64 navigation_time_msec() const;
  void set_navigation_time_msec(::google::protobuf::int64 value);

  // optional int64 first_contentful_paint_msec = 4 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR bool has_first_contentful_paint_msec() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_first_contentful_paint_msec();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kFirstContentfulPaintMsecFieldNumber = 4;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::google::protobuf::int64 first_contentful_paint_msec() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_first_contentful_paint_msec(::google::protobuf::int64 value);

  // optional int64 tab_id = 10;
  bool has_tab_id() const;
  void clear_tab_id();
  static const int kTabIdFieldNumber = 10;
  ::google::protobuf::int64 tab_id() const;
  void set_tab_id(::google::protobuf::int64 value);

  // optional int64 previous_source_id = 11;
  bool has_previous_source_id() const;
  void clear_previous_source_id();
  static const int kPreviousSourceIdFieldNumber = 11;
  ::google::protobuf::int64 previous_source_id() const;
  void set_previous_source_id(::google::protobuf::int64 value);

  // optional int64 opener_source_id = 12;
  bool has_opener_source_id() const;
  void clear_opener_source_id();
  static const int kOpenerSourceIdFieldNumber = 12;
  ::google::protobuf::int64 opener_source_id() const;
  void set_opener_source_id(::google::protobuf::int64 value);

  // optional bool is_same_document_navigation = 13;
  bool has_is_same_document_navigation() const;
  void clear_is_same_document_navigation();
  static const int kIsSameDocumentNavigationFieldNumber = 13;
  bool is_same_document_navigation() const;
  void set_is_same_document_navigation(bool value);

  // optional bool is_custom_tab = 7;
  bool has_is_custom_tab() const;
  void clear_is_custom_tab();
  static const int kIsCustomTabFieldNumber = 7;
  bool is_custom_tab() const;
  void set_is_custom_tab(bool value);

  // optional int64 previous_same_document_source_id = 14;
  bool has_previous_same_document_source_id() const;
  void clear_previous_same_document_source_id();
  static const int kPreviousSameDocumentSourceIdFieldNumber = 14;
  ::google::protobuf::int64 previous_same_document_source_id() const;
  void set_previous_same_document_source_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:ukm.Source)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_previous_source_id();
  void clear_has_previous_source_id();
  void set_has_previous_same_document_source_id();
  void clear_has_previous_same_document_source_id();
  void set_has_opener_source_id();
  void clear_has_opener_source_id();
  void set_has_is_same_document_navigation();
  void clear_has_is_same_document_navigation();
  void set_has_url();
  void clear_has_url();
  void set_has_initial_url();
  void clear_has_initial_url();
  void set_has_is_custom_tab();
  void clear_has_is_custom_tab();
  void set_has_navigation_time_msec();
  void clear_has_navigation_time_msec();
  void set_has_tab_id();
  void clear_has_tab_id();
  void set_has_first_contentful_paint_msec();
  void clear_has_first_contentful_paint_msec();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ukm::Source_UrlInfo > urls_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::internal::ArenaStringPtr initial_url_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::int64 navigation_time_msec_;
  ::google::protobuf::int64 first_contentful_paint_msec_;
  ::google::protobuf::int64 tab_id_;
  ::google::protobuf::int64 previous_source_id_;
  ::google::protobuf::int64 opener_source_id_;
  bool is_same_document_navigation_;
  bool is_custom_tab_;
  ::google::protobuf::int64 previous_same_document_source_id_;
  friend struct ::protobuf_ukm_2fsource_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Source_UrlInfo

// optional string url = 1;
inline bool Source_UrlInfo::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Source_UrlInfo::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Source_UrlInfo::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Source_UrlInfo::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
inline const ::std::string& Source_UrlInfo::url() const {
  // @@protoc_insertion_point(field_get:ukm.Source.UrlInfo.url)
  return url_.GetNoArena();
}
inline void Source_UrlInfo::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ukm.Source.UrlInfo.url)
}
#if LANG_CXX11
inline void Source_UrlInfo::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ukm.Source.UrlInfo.url)
}
#endif
inline void Source_UrlInfo::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukm.Source.UrlInfo.url)
}
inline void Source_UrlInfo::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukm.Source.UrlInfo.url)
}
inline ::std::string* Source_UrlInfo::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:ukm.Source.UrlInfo.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Source_UrlInfo::release_url() {
  // @@protoc_insertion_point(field_release:ukm.Source.UrlInfo.url)
  if (!has_url()) {
    return NULL;
  }
  clear_has_url();
  return url_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Source_UrlInfo::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:ukm.Source.UrlInfo.url)
}

// optional int32 previous_url_count = 2;
inline bool Source_UrlInfo::has_previous_url_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Source_UrlInfo::set_has_previous_url_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Source_UrlInfo::clear_has_previous_url_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Source_UrlInfo::clear_previous_url_count() {
  previous_url_count_ = 0;
  clear_has_previous_url_count();
}
inline ::google::protobuf::int32 Source_UrlInfo::previous_url_count() const {
  // @@protoc_insertion_point(field_get:ukm.Source.UrlInfo.previous_url_count)
  return previous_url_count_;
}
inline void Source_UrlInfo::set_previous_url_count(::google::protobuf::int32 value) {
  set_has_previous_url_count();
  previous_url_count_ = value;
  // @@protoc_insertion_point(field_set:ukm.Source.UrlInfo.previous_url_count)
}

// -------------------------------------------------------------------

// Source

// optional int64 id = 1;
inline bool Source::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Source::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Source::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Source::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 Source::id() const {
  // @@protoc_insertion_point(field_get:ukm.Source.id)
  return id_;
}
inline void Source::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:ukm.Source.id)
}

// optional int64 previous_source_id = 11;
inline bool Source::has_previous_source_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Source::set_has_previous_source_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Source::clear_has_previous_source_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Source::clear_previous_source_id() {
  previous_source_id_ = GOOGLE_LONGLONG(0);
  clear_has_previous_source_id();
}
inline ::google::protobuf::int64 Source::previous_source_id() const {
  // @@protoc_insertion_point(field_get:ukm.Source.previous_source_id)
  return previous_source_id_;
}
inline void Source::set_previous_source_id(::google::protobuf::int64 value) {
  set_has_previous_source_id();
  previous_source_id_ = value;
  // @@protoc_insertion_point(field_set:ukm.Source.previous_source_id)
}

// optional int64 previous_same_document_source_id = 14;
inline bool Source::has_previous_same_document_source_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Source::set_has_previous_same_document_source_id() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Source::clear_has_previous_same_document_source_id() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Source::clear_previous_same_document_source_id() {
  previous_same_document_source_id_ = GOOGLE_LONGLONG(0);
  clear_has_previous_same_document_source_id();
}
inline ::google::protobuf::int64 Source::previous_same_document_source_id() const {
  // @@protoc_insertion_point(field_get:ukm.Source.previous_same_document_source_id)
  return previous_same_document_source_id_;
}
inline void Source::set_previous_same_document_source_id(::google::protobuf::int64 value) {
  set_has_previous_same_document_source_id();
  previous_same_document_source_id_ = value;
  // @@protoc_insertion_point(field_set:ukm.Source.previous_same_document_source_id)
}

// optional int64 opener_source_id = 12;
inline bool Source::has_opener_source_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Source::set_has_opener_source_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Source::clear_has_opener_source_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Source::clear_opener_source_id() {
  opener_source_id_ = GOOGLE_LONGLONG(0);
  clear_has_opener_source_id();
}
inline ::google::protobuf::int64 Source::opener_source_id() const {
  // @@protoc_insertion_point(field_get:ukm.Source.opener_source_id)
  return opener_source_id_;
}
inline void Source::set_opener_source_id(::google::protobuf::int64 value) {
  set_has_opener_source_id();
  opener_source_id_ = value;
  // @@protoc_insertion_point(field_set:ukm.Source.opener_source_id)
}

// repeated .ukm.Source.UrlInfo urls = 8;
inline int Source::urls_size() const {
  return urls_.size();
}
inline void Source::clear_urls() {
  urls_.Clear();
}
inline ::ukm::Source_UrlInfo* Source::mutable_urls(int index) {
  // @@protoc_insertion_point(field_mutable:ukm.Source.urls)
  return urls_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ukm::Source_UrlInfo >*
Source::mutable_urls() {
  // @@protoc_insertion_point(field_mutable_list:ukm.Source.urls)
  return &urls_;
}
inline const ::ukm::Source_UrlInfo& Source::urls(int index) const {
  // @@protoc_insertion_point(field_get:ukm.Source.urls)
  return urls_.Get(index);
}
inline ::ukm::Source_UrlInfo* Source::add_urls() {
  // @@protoc_insertion_point(field_add:ukm.Source.urls)
  return urls_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ukm::Source_UrlInfo >&
Source::urls() const {
  // @@protoc_insertion_point(field_list:ukm.Source.urls)
  return urls_;
}

// optional bool is_same_document_navigation = 13;
inline bool Source::has_is_same_document_navigation() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Source::set_has_is_same_document_navigation() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Source::clear_has_is_same_document_navigation() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Source::clear_is_same_document_navigation() {
  is_same_document_navigation_ = false;
  clear_has_is_same_document_navigation();
}
inline bool Source::is_same_document_navigation() const {
  // @@protoc_insertion_point(field_get:ukm.Source.is_same_document_navigation)
  return is_same_document_navigation_;
}
inline void Source::set_is_same_document_navigation(bool value) {
  set_has_is_same_document_navigation();
  is_same_document_navigation_ = value;
  // @@protoc_insertion_point(field_set:ukm.Source.is_same_document_navigation)
}

// optional string url = 2;
inline bool Source::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Source::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Source::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Source::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
inline const ::std::string& Source::url() const {
  // @@protoc_insertion_point(field_get:ukm.Source.url)
  return url_.GetNoArena();
}
inline void Source::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ukm.Source.url)
}
#if LANG_CXX11
inline void Source::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ukm.Source.url)
}
#endif
inline void Source::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukm.Source.url)
}
inline void Source::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukm.Source.url)
}
inline ::std::string* Source::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:ukm.Source.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Source::release_url() {
  // @@protoc_insertion_point(field_release:ukm.Source.url)
  if (!has_url()) {
    return NULL;
  }
  clear_has_url();
  return url_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Source::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:ukm.Source.url)
}

// optional string initial_url = 6;
inline bool Source::has_initial_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Source::set_has_initial_url() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Source::clear_has_initial_url() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Source::clear_initial_url() {
  initial_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_initial_url();
}
inline const ::std::string& Source::initial_url() const {
  // @@protoc_insertion_point(field_get:ukm.Source.initial_url)
  return initial_url_.GetNoArena();
}
inline void Source::set_initial_url(const ::std::string& value) {
  set_has_initial_url();
  initial_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ukm.Source.initial_url)
}
#if LANG_CXX11
inline void Source::set_initial_url(::std::string&& value) {
  set_has_initial_url();
  initial_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ukm.Source.initial_url)
}
#endif
inline void Source::set_initial_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_initial_url();
  initial_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukm.Source.initial_url)
}
inline void Source::set_initial_url(const char* value, size_t size) {
  set_has_initial_url();
  initial_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukm.Source.initial_url)
}
inline ::std::string* Source::mutable_initial_url() {
  set_has_initial_url();
  // @@protoc_insertion_point(field_mutable:ukm.Source.initial_url)
  return initial_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Source::release_initial_url() {
  // @@protoc_insertion_point(field_release:ukm.Source.initial_url)
  if (!has_initial_url()) {
    return NULL;
  }
  clear_has_initial_url();
  return initial_url_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Source::set_allocated_initial_url(::std::string* initial_url) {
  if (initial_url != NULL) {
    set_has_initial_url();
  } else {
    clear_has_initial_url();
  }
  initial_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), initial_url);
  // @@protoc_insertion_point(field_set_allocated:ukm.Source.initial_url)
}

// optional bool is_custom_tab = 7;
inline bool Source::has_is_custom_tab() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Source::set_has_is_custom_tab() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Source::clear_has_is_custom_tab() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Source::clear_is_custom_tab() {
  is_custom_tab_ = false;
  clear_has_is_custom_tab();
}
inline bool Source::is_custom_tab() const {
  // @@protoc_insertion_point(field_get:ukm.Source.is_custom_tab)
  return is_custom_tab_;
}
inline void Source::set_is_custom_tab(bool value) {
  set_has_is_custom_tab();
  is_custom_tab_ = value;
  // @@protoc_insertion_point(field_set:ukm.Source.is_custom_tab)
}

// optional int64 navigation_time_msec = 3;
inline bool Source::has_navigation_time_msec() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Source::set_has_navigation_time_msec() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Source::clear_has_navigation_time_msec() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Source::clear_navigation_time_msec() {
  navigation_time_msec_ = GOOGLE_LONGLONG(0);
  clear_has_navigation_time_msec();
}
inline ::google::protobuf::int64 Source::navigation_time_msec() const {
  // @@protoc_insertion_point(field_get:ukm.Source.navigation_time_msec)
  return navigation_time_msec_;
}
inline void Source::set_navigation_time_msec(::google::protobuf::int64 value) {
  set_has_navigation_time_msec();
  navigation_time_msec_ = value;
  // @@protoc_insertion_point(field_set:ukm.Source.navigation_time_msec)
}

// optional int64 tab_id = 10;
inline bool Source::has_tab_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Source::set_has_tab_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Source::clear_has_tab_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Source::clear_tab_id() {
  tab_id_ = GOOGLE_LONGLONG(0);
  clear_has_tab_id();
}
inline ::google::protobuf::int64 Source::tab_id() const {
  // @@protoc_insertion_point(field_get:ukm.Source.tab_id)
  return tab_id_;
}
inline void Source::set_tab_id(::google::protobuf::int64 value) {
  set_has_tab_id();
  tab_id_ = value;
  // @@protoc_insertion_point(field_set:ukm.Source.tab_id)
}

// optional int64 first_contentful_paint_msec = 4 [deprecated = true];
inline bool Source::has_first_contentful_paint_msec() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Source::set_has_first_contentful_paint_msec() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Source::clear_has_first_contentful_paint_msec() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Source::clear_first_contentful_paint_msec() {
  first_contentful_paint_msec_ = GOOGLE_LONGLONG(0);
  clear_has_first_contentful_paint_msec();
}
inline ::google::protobuf::int64 Source::first_contentful_paint_msec() const {
  // @@protoc_insertion_point(field_get:ukm.Source.first_contentful_paint_msec)
  return first_contentful_paint_msec_;
}
inline void Source::set_first_contentful_paint_msec(::google::protobuf::int64 value) {
  set_has_first_contentful_paint_msec();
  first_contentful_paint_msec_ = value;
  // @@protoc_insertion_point(field_set:ukm.Source.first_contentful_paint_msec)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ukm

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ukm::Source_UrlScheme> : ::std::true_type {};

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_ukm_2fsource_2eproto
