// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sampled_profile.proto

#include "sampled_profile.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_call_5fstack_5fprofile_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_call_5fstack_5fprofile_2eproto ::google::protobuf::internal::SCCInfo<6> scc_info_CallStackProfile;
}  // namespace protobuf_call_5fstack_5fprofile_2eproto
namespace protobuf_perf_5fdata_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_perf_5fdata_2eproto ::google::protobuf::internal::SCCInfo<6> scc_info_PerfDataProto;
}  // namespace protobuf_perf_5fdata_2eproto
namespace protobuf_perf_5fstat_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_perf_5fstat_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_PerfStatProto;
}  // namespace protobuf_perf_5fstat_2eproto
namespace protobuf_sampled_5fprofile_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sampled_5fprofile_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SampledProfile_ProcessTypesEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sampled_5fprofile_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SampledProfile_ThreadTypesEntry_DoNotUse;
}  // namespace protobuf_sampled_5fprofile_2eproto
namespace metrics {
class SampledProfile_ProcessTypesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SampledProfile_ProcessTypesEntry_DoNotUse>
      _instance;
} _SampledProfile_ProcessTypesEntry_DoNotUse_default_instance_;
class SampledProfile_ThreadTypesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SampledProfile_ThreadTypesEntry_DoNotUse>
      _instance;
} _SampledProfile_ThreadTypesEntry_DoNotUse_default_instance_;
class SampledProfileDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SampledProfile>
      _instance;
} _SampledProfile_default_instance_;
}  // namespace metrics
namespace protobuf_sampled_5fprofile_2eproto {
static void InitDefaultsSampledProfile_ProcessTypesEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metrics::_SampledProfile_ProcessTypesEntry_DoNotUse_default_instance_;
    new (ptr) ::metrics::SampledProfile_ProcessTypesEntry_DoNotUse();
  }
  ::metrics::SampledProfile_ProcessTypesEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SampledProfile_ProcessTypesEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSampledProfile_ProcessTypesEntry_DoNotUse}, {}};

static void InitDefaultsSampledProfile_ThreadTypesEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metrics::_SampledProfile_ThreadTypesEntry_DoNotUse_default_instance_;
    new (ptr) ::metrics::SampledProfile_ThreadTypesEntry_DoNotUse();
  }
  ::metrics::SampledProfile_ThreadTypesEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SampledProfile_ThreadTypesEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSampledProfile_ThreadTypesEntry_DoNotUse}, {}};

static void InitDefaultsSampledProfile() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metrics::_SampledProfile_default_instance_;
    new (ptr) ::metrics::SampledProfile();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metrics::SampledProfile::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<5> scc_info_SampledProfile =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsSampledProfile}, {
      &protobuf_sampled_5fprofile_2eproto::scc_info_SampledProfile_ProcessTypesEntry_DoNotUse.base,
      &protobuf_sampled_5fprofile_2eproto::scc_info_SampledProfile_ThreadTypesEntry_DoNotUse.base,
      &protobuf_perf_5fdata_2eproto::scc_info_PerfDataProto.base,
      &protobuf_call_5fstack_5fprofile_2eproto::scc_info_CallStackProfile.base,
      &protobuf_perf_5fstat_2eproto::scc_info_PerfStatProto.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_SampledProfile_ProcessTypesEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SampledProfile_ThreadTypesEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SampledProfile.base);
}

}  // namespace protobuf_sampled_5fprofile_2eproto
namespace metrics {
bool SampledProfile_TriggerEvent_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SampledProfile_TriggerEvent SampledProfile::UNKNOWN_TRIGGER_EVENT;
const SampledProfile_TriggerEvent SampledProfile::PERIODIC_COLLECTION;
const SampledProfile_TriggerEvent SampledProfile::RESUME_FROM_SUSPEND;
const SampledProfile_TriggerEvent SampledProfile::RESTORE_SESSION;
const SampledProfile_TriggerEvent SampledProfile::PROCESS_STARTUP;
const SampledProfile_TriggerEvent SampledProfile::JANKY_TASK;
const SampledProfile_TriggerEvent SampledProfile::THREAD_HUNG;
const SampledProfile_TriggerEvent SampledProfile::PERIODIC_HEAP_COLLECTION;
const SampledProfile_TriggerEvent SampledProfile::TriggerEvent_MIN;
const SampledProfile_TriggerEvent SampledProfile::TriggerEvent_MAX;
const int SampledProfile::TriggerEvent_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

SampledProfile_ProcessTypesEntry_DoNotUse::SampledProfile_ProcessTypesEntry_DoNotUse() {}
SampledProfile_ProcessTypesEntry_DoNotUse::SampledProfile_ProcessTypesEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void SampledProfile_ProcessTypesEntry_DoNotUse::MergeFrom(const SampledProfile_ProcessTypesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

SampledProfile_ThreadTypesEntry_DoNotUse::SampledProfile_ThreadTypesEntry_DoNotUse() {}
SampledProfile_ThreadTypesEntry_DoNotUse::SampledProfile_ThreadTypesEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void SampledProfile_ThreadTypesEntry_DoNotUse::MergeFrom(const SampledProfile_ThreadTypesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

void SampledProfile::InitAsDefaultInstance() {
  ::metrics::_SampledProfile_default_instance_._instance.get_mutable()->perf_data_ = const_cast< ::metrics::PerfDataProto*>(
      ::metrics::PerfDataProto::internal_default_instance());
  ::metrics::_SampledProfile_default_instance_._instance.get_mutable()->call_stack_profile_ = const_cast< ::metrics::CallStackProfile*>(
      ::metrics::CallStackProfile::internal_default_instance());
  ::metrics::_SampledProfile_default_instance_._instance.get_mutable()->perf_stat_ = const_cast< ::metrics::PerfStatProto*>(
      ::metrics::PerfStatProto::internal_default_instance());
}
void SampledProfile::clear_perf_data() {
  if (perf_data_ != NULL) perf_data_->Clear();
  clear_has_perf_data();
}
void SampledProfile::clear_call_stack_profile() {
  if (call_stack_profile_ != NULL) call_stack_profile_->Clear();
  clear_has_call_stack_profile();
}
void SampledProfile::clear_perf_stat() {
  if (perf_stat_ != NULL) perf_stat_->Clear();
  clear_has_perf_stat();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SampledProfile::kTriggerEventFieldNumber;
const int SampledProfile::kProcessFieldNumber;
const int SampledProfile::kThreadFieldNumber;
const int SampledProfile::kProcessTypesFieldNumber;
const int SampledProfile::kThreadTypesFieldNumber;
const int SampledProfile::kMsAfterBootFieldNumber;
const int SampledProfile::kMsAfterLoginFieldNumber;
const int SampledProfile::kSuspendDurationMsFieldNumber;
const int SampledProfile::kMsAfterResumeFieldNumber;
const int SampledProfile::kNumTabsRestoredFieldNumber;
const int SampledProfile::kMsAfterRestoreFieldNumber;
const int SampledProfile::kPerfDataFieldNumber;
const int SampledProfile::kCallStackProfileFieldNumber;
const int SampledProfile::kPerfStatFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SampledProfile::SampledProfile()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sampled_5fprofile_2eproto::scc_info_SampledProfile.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.SampledProfile)
}
SampledProfile::SampledProfile(const SampledProfile& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  process_types_.MergeFrom(from.process_types_);
  thread_types_.MergeFrom(from.thread_types_);
  if (from.has_perf_data()) {
    perf_data_ = new ::metrics::PerfDataProto(*from.perf_data_);
  } else {
    perf_data_ = NULL;
  }
  if (from.has_call_stack_profile()) {
    call_stack_profile_ = new ::metrics::CallStackProfile(*from.call_stack_profile_);
  } else {
    call_stack_profile_ = NULL;
  }
  if (from.has_perf_stat()) {
    perf_stat_ = new ::metrics::PerfStatProto(*from.perf_stat_);
  } else {
    perf_stat_ = NULL;
  }
  ::memcpy(&ms_after_boot_, &from.ms_after_boot_,
    static_cast<size_t>(reinterpret_cast<char*>(&thread_) -
    reinterpret_cast<char*>(&ms_after_boot_)) + sizeof(thread_));
  // @@protoc_insertion_point(copy_constructor:metrics.SampledProfile)
}

void SampledProfile::SharedCtor() {
  ::memset(&perf_data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&thread_) -
      reinterpret_cast<char*>(&perf_data_)) + sizeof(thread_));
}

SampledProfile::~SampledProfile() {
  // @@protoc_insertion_point(destructor:metrics.SampledProfile)
  SharedDtor();
}

void SampledProfile::SharedDtor() {
  if (this != internal_default_instance()) delete perf_data_;
  if (this != internal_default_instance()) delete call_stack_profile_;
  if (this != internal_default_instance()) delete perf_stat_;
}

void SampledProfile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SampledProfile& SampledProfile::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sampled_5fprofile_2eproto::scc_info_SampledProfile.base);
  return *internal_default_instance();
}


void SampledProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.SampledProfile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  process_types_.Clear();
  thread_types_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(perf_data_ != NULL);
      perf_data_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(call_stack_profile_ != NULL);
      call_stack_profile_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(perf_stat_ != NULL);
      perf_stat_->Clear();
    }
  }
  if (cached_has_bits & 248u) {
    ::memset(&ms_after_boot_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&suspend_duration_ms_) -
        reinterpret_cast<char*>(&ms_after_boot_)) + sizeof(suspend_duration_ms_));
  }
  if (cached_has_bits & 3840u) {
    ::memset(&ms_after_resume_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&thread_) -
        reinterpret_cast<char*>(&ms_after_resume_)) + sizeof(thread_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SampledProfile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:metrics.SampledProfile)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .metrics.SampledProfile.TriggerEvent trigger_event = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::metrics::SampledProfile_TriggerEvent_IsValid(value)) {
            set_trigger_event(static_cast< ::metrics::SampledProfile_TriggerEvent >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 ms_after_boot = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_ms_after_boot();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ms_after_boot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 ms_after_login = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_ms_after_login();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ms_after_login_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .metrics.PerfDataProto perf_data = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_perf_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 suspend_duration_ms = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_suspend_duration_ms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &suspend_duration_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 ms_after_resume = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_ms_after_resume();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ms_after_resume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_tabs_restored = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_num_tabs_restored();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_tabs_restored_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 ms_after_restore = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_ms_after_restore();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ms_after_restore_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .metrics.CallStackProfile call_stack_profile = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_call_stack_profile()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .metrics.PerfStatProto perf_stat = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_perf_stat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .metrics.Process process = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::metrics::Process_IsValid(value)) {
            set_process(static_cast< ::metrics::Process >(value));
          } else {
            unknown_fields_stream.WriteVarint32(88u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .metrics.Thread thread = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::metrics::Thread_IsValid(value)) {
            set_thread(static_cast< ::metrics::Thread >(value));
          } else {
            unknown_fields_stream.WriteVarint32(96u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<uint32, .metrics.Process> process_types = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          ::std::unique_ptr<SampledProfile_ProcessTypesEntry_DoNotUse> entry(process_types_.NewEntry());
          {
            ::std::string data;
            DO_(::google::protobuf::internal::WireFormatLite::ReadString(input, &data));
            DO_(entry->ParseFromString(data));
            if (::metrics::Process_IsValid(*entry->mutable_value())) {
              (*mutable_process_types())[entry->key()] =
                  static_cast< ::metrics::Process >(*entry->mutable_value());
            } else {
              unknown_fields_stream.WriteVarint32(106u);
              unknown_fields_stream.WriteVarint32(
                  static_cast< ::google::protobuf::uint32>(data.size()));
              unknown_fields_stream.WriteString(data);
            }
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<uint32, .metrics.Thread> thread_types = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          ::std::unique_ptr<SampledProfile_ThreadTypesEntry_DoNotUse> entry(thread_types_.NewEntry());
          {
            ::std::string data;
            DO_(::google::protobuf::internal::WireFormatLite::ReadString(input, &data));
            DO_(entry->ParseFromString(data));
            if (::metrics::Thread_IsValid(*entry->mutable_value())) {
              (*mutable_thread_types())[entry->key()] =
                  static_cast< ::metrics::Thread >(*entry->mutable_value());
            } else {
              unknown_fields_stream.WriteVarint32(114u);
              unknown_fields_stream.WriteVarint32(
                  static_cast< ::google::protobuf::uint32>(data.size()));
              unknown_fields_stream.WriteString(data);
            }
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.SampledProfile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.SampledProfile)
  return false;
#undef DO_
}

void SampledProfile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.SampledProfile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .metrics.SampledProfile.TriggerEvent trigger_event = 1;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->trigger_event(), output);
  }

  // optional int64 ms_after_boot = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->ms_after_boot(), output);
  }

  // optional int64 ms_after_login = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->ms_after_login(), output);
  }

  // optional .metrics.PerfDataProto perf_data = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->_internal_perf_data(), output);
  }

  // optional int64 suspend_duration_ms = 5;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->suspend_duration_ms(), output);
  }

  // optional int64 ms_after_resume = 6;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->ms_after_resume(), output);
  }

  // optional int32 num_tabs_restored = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->num_tabs_restored(), output);
  }

  // optional int64 ms_after_restore = 8;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->ms_after_restore(), output);
  }

  // optional .metrics.CallStackProfile call_stack_profile = 9;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, this->_internal_call_stack_profile(), output);
  }

  // optional .metrics.PerfStatProto perf_stat = 10;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, this->_internal_perf_stat(), output);
  }

  // optional .metrics.Process process = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->process(), output);
  }

  // optional .metrics.Thread thread = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->thread(), output);
  }

  // map<uint32, .metrics.Process> process_types = 13;
  if (!this->process_types().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::metrics::Process >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->process_types().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->process_types().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::metrics::Process >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::metrics::Process >::const_iterator
          it = this->process_types().begin();
          it != this->process_types().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<SampledProfile_ProcessTypesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(process_types_.NewEnumEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            13, *entry, output);
      }
    } else {
      ::std::unique_ptr<SampledProfile_ProcessTypesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::metrics::Process >::const_iterator
          it = this->process_types().begin();
          it != this->process_types().end(); ++it) {
        entry.reset(process_types_.NewEnumEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            13, *entry, output);
      }
    }
  }

  // map<uint32, .metrics.Thread> thread_types = 14;
  if (!this->thread_types().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::metrics::Thread >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->thread_types().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->thread_types().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::metrics::Thread >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::metrics::Thread >::const_iterator
          it = this->thread_types().begin();
          it != this->thread_types().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<SampledProfile_ThreadTypesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(thread_types_.NewEnumEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            14, *entry, output);
      }
    } else {
      ::std::unique_ptr<SampledProfile_ThreadTypesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::metrics::Thread >::const_iterator
          it = this->thread_types().begin();
          it != this->thread_types().end(); ++it) {
        entry.reset(thread_types_.NewEnumEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            14, *entry, output);
      }
    }
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:metrics.SampledProfile)
}

size_t SampledProfile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.SampledProfile)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // map<uint32, .metrics.Process> process_types = 13;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->process_types_size());
  {
    ::std::unique_ptr<SampledProfile_ProcessTypesEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, ::metrics::Process >::const_iterator
        it = this->process_types().begin();
        it != this->process_types().end(); ++it) {
      entry.reset(process_types_.NewEnumEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<uint32, .metrics.Thread> thread_types = 14;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->thread_types_size());
  {
    ::std::unique_ptr<SampledProfile_ThreadTypesEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, ::metrics::Thread >::const_iterator
        it = this->thread_types().begin();
        it != this->thread_types().end(); ++it) {
      entry.reset(thread_types_.NewEnumEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional .metrics.PerfDataProto perf_data = 4;
    if (has_perf_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *perf_data_);
    }

    // optional .metrics.CallStackProfile call_stack_profile = 9;
    if (has_call_stack_profile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *call_stack_profile_);
    }

    // optional .metrics.PerfStatProto perf_stat = 10;
    if (has_perf_stat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *perf_stat_);
    }

    // optional int64 ms_after_boot = 2;
    if (has_ms_after_boot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ms_after_boot());
    }

    // optional int64 ms_after_login = 3;
    if (has_ms_after_login()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ms_after_login());
    }

    // optional .metrics.SampledProfile.TriggerEvent trigger_event = 1;
    if (has_trigger_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->trigger_event());
    }

    // optional int32 num_tabs_restored = 7;
    if (has_num_tabs_restored()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_tabs_restored());
    }

    // optional int64 suspend_duration_ms = 5;
    if (has_suspend_duration_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->suspend_duration_ms());
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional int64 ms_after_resume = 6;
    if (has_ms_after_resume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ms_after_resume());
    }

    // optional int64 ms_after_restore = 8;
    if (has_ms_after_restore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ms_after_restore());
    }

    // optional .metrics.Process process = 11;
    if (has_process()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->process());
    }

    // optional .metrics.Thread thread = 12;
    if (has_thread()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->thread());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SampledProfile::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SampledProfile*>(&from));
}

void SampledProfile::MergeFrom(const SampledProfile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.SampledProfile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  process_types_.MergeFrom(from.process_types_);
  thread_types_.MergeFrom(from.thread_types_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_perf_data()->::metrics::PerfDataProto::MergeFrom(from.perf_data());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_call_stack_profile()->::metrics::CallStackProfile::MergeFrom(from.call_stack_profile());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_perf_stat()->::metrics::PerfStatProto::MergeFrom(from.perf_stat());
    }
    if (cached_has_bits & 0x00000008u) {
      ms_after_boot_ = from.ms_after_boot_;
    }
    if (cached_has_bits & 0x00000010u) {
      ms_after_login_ = from.ms_after_login_;
    }
    if (cached_has_bits & 0x00000020u) {
      trigger_event_ = from.trigger_event_;
    }
    if (cached_has_bits & 0x00000040u) {
      num_tabs_restored_ = from.num_tabs_restored_;
    }
    if (cached_has_bits & 0x00000080u) {
      suspend_duration_ms_ = from.suspend_duration_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      ms_after_resume_ = from.ms_after_resume_;
    }
    if (cached_has_bits & 0x00000200u) {
      ms_after_restore_ = from.ms_after_restore_;
    }
    if (cached_has_bits & 0x00000400u) {
      process_ = from.process_;
    }
    if (cached_has_bits & 0x00000800u) {
      thread_ = from.thread_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SampledProfile::CopyFrom(const SampledProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.SampledProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SampledProfile::IsInitialized() const {
  return true;
}

void SampledProfile::Swap(SampledProfile* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SampledProfile::InternalSwap(SampledProfile* other) {
  using std::swap;
  process_types_.Swap(&other->process_types_);
  thread_types_.Swap(&other->thread_types_);
  swap(perf_data_, other->perf_data_);
  swap(call_stack_profile_, other->call_stack_profile_);
  swap(perf_stat_, other->perf_stat_);
  swap(ms_after_boot_, other->ms_after_boot_);
  swap(ms_after_login_, other->ms_after_login_);
  swap(trigger_event_, other->trigger_event_);
  swap(num_tabs_restored_, other->num_tabs_restored_);
  swap(suspend_duration_ms_, other->suspend_duration_ms_);
  swap(ms_after_resume_, other->ms_after_resume_);
  swap(ms_after_restore_, other->ms_after_restore_);
  swap(process_, other->process_);
  swap(thread_, other->thread_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string SampledProfile::GetTypeName() const {
  return "metrics.SampledProfile";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace metrics
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metrics::SampledProfile_ProcessTypesEntry_DoNotUse* Arena::CreateMaybeMessage< ::metrics::SampledProfile_ProcessTypesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::metrics::SampledProfile_ProcessTypesEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metrics::SampledProfile_ThreadTypesEntry_DoNotUse* Arena::CreateMaybeMessage< ::metrics::SampledProfile_ThreadTypesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::metrics::SampledProfile_ThreadTypesEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metrics::SampledProfile* Arena::CreateMaybeMessage< ::metrics::SampledProfile >(Arena* arena) {
  return Arena::CreateInternal< ::metrics::SampledProfile >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
