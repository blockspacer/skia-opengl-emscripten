// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: perf_data.proto

#include "perf_data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_perf_5fdata_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_perf_5fdata_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PerfDataProto_BranchStackEntry;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_perf_5fdata_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PerfDataProto_EventHeader;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_perf_5fdata_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PerfDataProto_PerfBuildID;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_perf_5fdata_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PerfDataProto_PerfEventAttr;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_perf_5fdata_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PerfDataProto_PerfEventStats;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_perf_5fdata_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PerfDataProto_PerfEventType;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_perf_5fdata_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PerfDataProto_SampleInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_perf_5fdata_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PerfDataProto_StringMetadata_StringAndMd5sumPrefix;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_perf_5fdata_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_PerfDataProto_CommEvent;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_perf_5fdata_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_PerfDataProto_ForkEvent;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_perf_5fdata_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_PerfDataProto_MMapEvent;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_perf_5fdata_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_PerfDataProto_PerfFileAttr;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_perf_5fdata_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_PerfDataProto_SampleEvent;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_perf_5fdata_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_PerfDataProto_StringMetadata;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_perf_5fdata_2eproto ::google::protobuf::internal::SCCInfo<5> scc_info_PerfDataProto_PerfEvent;
}  // namespace protobuf_perf_5fdata_2eproto
namespace metrics {
class PerfDataProto_PerfEventAttrDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PerfDataProto_PerfEventAttr>
      _instance;
} _PerfDataProto_PerfEventAttr_default_instance_;
class PerfDataProto_PerfFileAttrDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PerfDataProto_PerfFileAttr>
      _instance;
} _PerfDataProto_PerfFileAttr_default_instance_;
class PerfDataProto_PerfEventTypeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PerfDataProto_PerfEventType>
      _instance;
} _PerfDataProto_PerfEventType_default_instance_;
class PerfDataProto_SampleInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PerfDataProto_SampleInfo>
      _instance;
} _PerfDataProto_SampleInfo_default_instance_;
class PerfDataProto_CommEventDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PerfDataProto_CommEvent>
      _instance;
} _PerfDataProto_CommEvent_default_instance_;
class PerfDataProto_MMapEventDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PerfDataProto_MMapEvent>
      _instance;
} _PerfDataProto_MMapEvent_default_instance_;
class PerfDataProto_BranchStackEntryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PerfDataProto_BranchStackEntry>
      _instance;
} _PerfDataProto_BranchStackEntry_default_instance_;
class PerfDataProto_SampleEventDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PerfDataProto_SampleEvent>
      _instance;
} _PerfDataProto_SampleEvent_default_instance_;
class PerfDataProto_ForkEventDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PerfDataProto_ForkEvent>
      _instance;
} _PerfDataProto_ForkEvent_default_instance_;
class PerfDataProto_EventHeaderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PerfDataProto_EventHeader>
      _instance;
} _PerfDataProto_EventHeader_default_instance_;
class PerfDataProto_PerfEventDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PerfDataProto_PerfEvent>
      _instance;
} _PerfDataProto_PerfEvent_default_instance_;
class PerfDataProto_PerfEventStatsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PerfDataProto_PerfEventStats>
      _instance;
} _PerfDataProto_PerfEventStats_default_instance_;
class PerfDataProto_PerfBuildIDDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PerfDataProto_PerfBuildID>
      _instance;
} _PerfDataProto_PerfBuildID_default_instance_;
class PerfDataProto_StringMetadata_StringAndMd5sumPrefixDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PerfDataProto_StringMetadata_StringAndMd5sumPrefix>
      _instance;
} _PerfDataProto_StringMetadata_StringAndMd5sumPrefix_default_instance_;
class PerfDataProto_StringMetadataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PerfDataProto_StringMetadata>
      _instance;
} _PerfDataProto_StringMetadata_default_instance_;
class PerfDataProtoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PerfDataProto>
      _instance;
} _PerfDataProto_default_instance_;
}  // namespace metrics
namespace protobuf_perf_5fdata_2eproto {
static void InitDefaultsPerfDataProto_PerfEventAttr() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metrics::_PerfDataProto_PerfEventAttr_default_instance_;
    new (ptr) ::metrics::PerfDataProto_PerfEventAttr();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metrics::PerfDataProto_PerfEventAttr::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PerfDataProto_PerfEventAttr =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPerfDataProto_PerfEventAttr}, {}};

static void InitDefaultsPerfDataProto_PerfFileAttr() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metrics::_PerfDataProto_PerfFileAttr_default_instance_;
    new (ptr) ::metrics::PerfDataProto_PerfFileAttr();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metrics::PerfDataProto_PerfFileAttr::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PerfDataProto_PerfFileAttr =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPerfDataProto_PerfFileAttr}, {
      &protobuf_perf_5fdata_2eproto::scc_info_PerfDataProto_PerfEventAttr.base,}};

static void InitDefaultsPerfDataProto_PerfEventType() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metrics::_PerfDataProto_PerfEventType_default_instance_;
    new (ptr) ::metrics::PerfDataProto_PerfEventType();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metrics::PerfDataProto_PerfEventType::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PerfDataProto_PerfEventType =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPerfDataProto_PerfEventType}, {}};

static void InitDefaultsPerfDataProto_SampleInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metrics::_PerfDataProto_SampleInfo_default_instance_;
    new (ptr) ::metrics::PerfDataProto_SampleInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metrics::PerfDataProto_SampleInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PerfDataProto_SampleInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPerfDataProto_SampleInfo}, {}};

static void InitDefaultsPerfDataProto_CommEvent() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metrics::_PerfDataProto_CommEvent_default_instance_;
    new (ptr) ::metrics::PerfDataProto_CommEvent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metrics::PerfDataProto_CommEvent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PerfDataProto_CommEvent =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPerfDataProto_CommEvent}, {
      &protobuf_perf_5fdata_2eproto::scc_info_PerfDataProto_SampleInfo.base,}};

static void InitDefaultsPerfDataProto_MMapEvent() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metrics::_PerfDataProto_MMapEvent_default_instance_;
    new (ptr) ::metrics::PerfDataProto_MMapEvent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metrics::PerfDataProto_MMapEvent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PerfDataProto_MMapEvent =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPerfDataProto_MMapEvent}, {
      &protobuf_perf_5fdata_2eproto::scc_info_PerfDataProto_SampleInfo.base,}};

static void InitDefaultsPerfDataProto_BranchStackEntry() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metrics::_PerfDataProto_BranchStackEntry_default_instance_;
    new (ptr) ::metrics::PerfDataProto_BranchStackEntry();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metrics::PerfDataProto_BranchStackEntry::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PerfDataProto_BranchStackEntry =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPerfDataProto_BranchStackEntry}, {}};

static void InitDefaultsPerfDataProto_SampleEvent() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metrics::_PerfDataProto_SampleEvent_default_instance_;
    new (ptr) ::metrics::PerfDataProto_SampleEvent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metrics::PerfDataProto_SampleEvent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PerfDataProto_SampleEvent =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPerfDataProto_SampleEvent}, {
      &protobuf_perf_5fdata_2eproto::scc_info_PerfDataProto_BranchStackEntry.base,}};

static void InitDefaultsPerfDataProto_ForkEvent() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metrics::_PerfDataProto_ForkEvent_default_instance_;
    new (ptr) ::metrics::PerfDataProto_ForkEvent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metrics::PerfDataProto_ForkEvent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PerfDataProto_ForkEvent =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPerfDataProto_ForkEvent}, {
      &protobuf_perf_5fdata_2eproto::scc_info_PerfDataProto_SampleInfo.base,}};

static void InitDefaultsPerfDataProto_EventHeader() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metrics::_PerfDataProto_EventHeader_default_instance_;
    new (ptr) ::metrics::PerfDataProto_EventHeader();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metrics::PerfDataProto_EventHeader::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PerfDataProto_EventHeader =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPerfDataProto_EventHeader}, {}};

static void InitDefaultsPerfDataProto_PerfEvent() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metrics::_PerfDataProto_PerfEvent_default_instance_;
    new (ptr) ::metrics::PerfDataProto_PerfEvent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metrics::PerfDataProto_PerfEvent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<5> scc_info_PerfDataProto_PerfEvent =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsPerfDataProto_PerfEvent}, {
      &protobuf_perf_5fdata_2eproto::scc_info_PerfDataProto_EventHeader.base,
      &protobuf_perf_5fdata_2eproto::scc_info_PerfDataProto_MMapEvent.base,
      &protobuf_perf_5fdata_2eproto::scc_info_PerfDataProto_SampleEvent.base,
      &protobuf_perf_5fdata_2eproto::scc_info_PerfDataProto_CommEvent.base,
      &protobuf_perf_5fdata_2eproto::scc_info_PerfDataProto_ForkEvent.base,}};

static void InitDefaultsPerfDataProto_PerfEventStats() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metrics::_PerfDataProto_PerfEventStats_default_instance_;
    new (ptr) ::metrics::PerfDataProto_PerfEventStats();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metrics::PerfDataProto_PerfEventStats::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PerfDataProto_PerfEventStats =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPerfDataProto_PerfEventStats}, {}};

static void InitDefaultsPerfDataProto_PerfBuildID() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metrics::_PerfDataProto_PerfBuildID_default_instance_;
    new (ptr) ::metrics::PerfDataProto_PerfBuildID();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metrics::PerfDataProto_PerfBuildID::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PerfDataProto_PerfBuildID =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPerfDataProto_PerfBuildID}, {}};

static void InitDefaultsPerfDataProto_StringMetadata_StringAndMd5sumPrefix() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metrics::_PerfDataProto_StringMetadata_StringAndMd5sumPrefix_default_instance_;
    new (ptr) ::metrics::PerfDataProto_StringMetadata_StringAndMd5sumPrefix();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metrics::PerfDataProto_StringMetadata_StringAndMd5sumPrefix::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PerfDataProto_StringMetadata_StringAndMd5sumPrefix =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPerfDataProto_StringMetadata_StringAndMd5sumPrefix}, {}};

static void InitDefaultsPerfDataProto_StringMetadata() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metrics::_PerfDataProto_StringMetadata_default_instance_;
    new (ptr) ::metrics::PerfDataProto_StringMetadata();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metrics::PerfDataProto_StringMetadata::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PerfDataProto_StringMetadata =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPerfDataProto_StringMetadata}, {
      &protobuf_perf_5fdata_2eproto::scc_info_PerfDataProto_StringMetadata_StringAndMd5sumPrefix.base,}};

static void InitDefaultsPerfDataProto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metrics::_PerfDataProto_default_instance_;
    new (ptr) ::metrics::PerfDataProto();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metrics::PerfDataProto::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<6> scc_info_PerfDataProto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 6, InitDefaultsPerfDataProto}, {
      &protobuf_perf_5fdata_2eproto::scc_info_PerfDataProto_PerfFileAttr.base,
      &protobuf_perf_5fdata_2eproto::scc_info_PerfDataProto_PerfEvent.base,
      &protobuf_perf_5fdata_2eproto::scc_info_PerfDataProto_PerfEventType.base,
      &protobuf_perf_5fdata_2eproto::scc_info_PerfDataProto_PerfEventStats.base,
      &protobuf_perf_5fdata_2eproto::scc_info_PerfDataProto_PerfBuildID.base,
      &protobuf_perf_5fdata_2eproto::scc_info_PerfDataProto_StringMetadata.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_PerfDataProto_PerfEventAttr.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PerfDataProto_PerfFileAttr.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PerfDataProto_PerfEventType.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PerfDataProto_SampleInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PerfDataProto_CommEvent.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PerfDataProto_MMapEvent.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PerfDataProto_BranchStackEntry.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PerfDataProto_SampleEvent.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PerfDataProto_ForkEvent.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PerfDataProto_EventHeader.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PerfDataProto_PerfEvent.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PerfDataProto_PerfEventStats.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PerfDataProto_PerfBuildID.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PerfDataProto_StringMetadata_StringAndMd5sumPrefix.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PerfDataProto_StringMetadata.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PerfDataProto.base);
}

}  // namespace protobuf_perf_5fdata_2eproto
namespace metrics {

// ===================================================================

void PerfDataProto_PerfEventAttr::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PerfDataProto_PerfEventAttr::kTypeFieldNumber;
const int PerfDataProto_PerfEventAttr::kSizeFieldNumber;
const int PerfDataProto_PerfEventAttr::kConfigFieldNumber;
const int PerfDataProto_PerfEventAttr::kSamplePeriodFieldNumber;
const int PerfDataProto_PerfEventAttr::kSampleFreqFieldNumber;
const int PerfDataProto_PerfEventAttr::kSampleTypeFieldNumber;
const int PerfDataProto_PerfEventAttr::kReadFormatFieldNumber;
const int PerfDataProto_PerfEventAttr::kDisabledFieldNumber;
const int PerfDataProto_PerfEventAttr::kInheritFieldNumber;
const int PerfDataProto_PerfEventAttr::kPinnedFieldNumber;
const int PerfDataProto_PerfEventAttr::kExclusiveFieldNumber;
const int PerfDataProto_PerfEventAttr::kExcludeUserFieldNumber;
const int PerfDataProto_PerfEventAttr::kExcludeKernelFieldNumber;
const int PerfDataProto_PerfEventAttr::kExcludeHvFieldNumber;
const int PerfDataProto_PerfEventAttr::kExcludeIdleFieldNumber;
const int PerfDataProto_PerfEventAttr::kMmapFieldNumber;
const int PerfDataProto_PerfEventAttr::kCommFieldNumber;
const int PerfDataProto_PerfEventAttr::kFreqFieldNumber;
const int PerfDataProto_PerfEventAttr::kInheritStatFieldNumber;
const int PerfDataProto_PerfEventAttr::kEnableOnExecFieldNumber;
const int PerfDataProto_PerfEventAttr::kTaskFieldNumber;
const int PerfDataProto_PerfEventAttr::kWatermarkFieldNumber;
const int PerfDataProto_PerfEventAttr::kPreciseIpFieldNumber;
const int PerfDataProto_PerfEventAttr::kMmapDataFieldNumber;
const int PerfDataProto_PerfEventAttr::kSampleIdAllFieldNumber;
const int PerfDataProto_PerfEventAttr::kExcludeHostFieldNumber;
const int PerfDataProto_PerfEventAttr::kExcludeGuestFieldNumber;
const int PerfDataProto_PerfEventAttr::kWakeupEventsFieldNumber;
const int PerfDataProto_PerfEventAttr::kWakeupWatermarkFieldNumber;
const int PerfDataProto_PerfEventAttr::kBpTypeFieldNumber;
const int PerfDataProto_PerfEventAttr::kBpAddrFieldNumber;
const int PerfDataProto_PerfEventAttr::kConfig1FieldNumber;
const int PerfDataProto_PerfEventAttr::kBpLenFieldNumber;
const int PerfDataProto_PerfEventAttr::kConfig2FieldNumber;
const int PerfDataProto_PerfEventAttr::kBranchSampleTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PerfDataProto_PerfEventAttr::PerfDataProto_PerfEventAttr()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_perf_5fdata_2eproto::scc_info_PerfDataProto_PerfEventAttr.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.PerfDataProto.PerfEventAttr)
}
PerfDataProto_PerfEventAttr::PerfDataProto_PerfEventAttr(const PerfDataProto_PerfEventAttr& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&bp_type_) -
    reinterpret_cast<char*>(&type_)) + sizeof(bp_type_));
  // @@protoc_insertion_point(copy_constructor:metrics.PerfDataProto.PerfEventAttr)
}

void PerfDataProto_PerfEventAttr::SharedCtor() {
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bp_type_) -
      reinterpret_cast<char*>(&type_)) + sizeof(bp_type_));
}

PerfDataProto_PerfEventAttr::~PerfDataProto_PerfEventAttr() {
  // @@protoc_insertion_point(destructor:metrics.PerfDataProto.PerfEventAttr)
  SharedDtor();
}

void PerfDataProto_PerfEventAttr::SharedDtor() {
}

void PerfDataProto_PerfEventAttr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PerfDataProto_PerfEventAttr& PerfDataProto_PerfEventAttr::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_perf_5fdata_2eproto::scc_info_PerfDataProto_PerfEventAttr.base);
  return *internal_default_instance();
}


void PerfDataProto_PerfEventAttr::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.PerfDataProto.PerfEventAttr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&disabled_) -
        reinterpret_cast<char*>(&type_)) + sizeof(disabled_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&inherit_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mmap_) -
        reinterpret_cast<char*>(&inherit_)) + sizeof(mmap_));
  }
  if (cached_has_bits & 16711680u) {
    ::memset(&comm_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&precise_ip_) -
        reinterpret_cast<char*>(&comm_)) + sizeof(precise_ip_));
  }
  if (cached_has_bits & 4278190080u) {
    ::memset(&sample_id_all_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bp_len_) -
        reinterpret_cast<char*>(&sample_id_all_)) + sizeof(bp_len_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 7u) {
    ::memset(&config2_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bp_type_) -
        reinterpret_cast<char*>(&config2_)) + sizeof(bp_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PerfDataProto_PerfEventAttr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:metrics.PerfDataProto.PerfEventAttr)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 size = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 config = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_config();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &config_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 sample_period = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_sample_period();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sample_period_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 sample_freq = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_sample_freq();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sample_freq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 sample_type = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_sample_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sample_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 read_format = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_read_format();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &read_format_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool disabled = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_disabled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool inherit = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_inherit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &inherit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool pinned = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_pinned();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pinned_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool exclusive = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_exclusive();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &exclusive_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool exclude_user = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_exclude_user();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &exclude_user_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool exclude_kernel = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_exclude_kernel();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &exclude_kernel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool exclude_hv = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_exclude_hv();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &exclude_hv_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool exclude_idle = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_exclude_idle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &exclude_idle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool mmap = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_mmap();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mmap_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool comm = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_comm();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &comm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool freq = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          set_has_freq();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &freq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool inherit_stat = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          set_has_inherit_stat();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &inherit_stat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_on_exec = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          set_has_enable_on_exec();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_on_exec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool task = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          set_has_task();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &task_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool watermark = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {
          set_has_watermark();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &watermark_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 precise_ip = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {
          set_has_precise_ip();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &precise_ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool mmap_data = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 192 & 0xFF */)) {
          set_has_mmap_data();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mmap_data_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool sample_id_all = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 200 & 0xFF */)) {
          set_has_sample_id_all();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sample_id_all_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool exclude_host = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 208 & 0xFF */)) {
          set_has_exclude_host();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &exclude_host_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool exclude_guest = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u /* 216 & 0xFF */)) {
          set_has_exclude_guest();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &exclude_guest_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 wakeup_events = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u /* 224 & 0xFF */)) {
          set_has_wakeup_events();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wakeup_events_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 wakeup_watermark = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(232u /* 232 & 0xFF */)) {
          set_has_wakeup_watermark();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wakeup_watermark_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 bp_type = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u /* 240 & 0xFF */)) {
          set_has_bp_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bp_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 bp_addr = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u /* 248 & 0xFF */)) {
          set_has_bp_addr();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bp_addr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 config1 = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(0u /* 256 & 0xFF */)) {
          set_has_config1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &config1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 bp_len = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 264 & 0xFF */)) {
          set_has_bp_len();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bp_len_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 config2 = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 272 & 0xFF */)) {
          set_has_config2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &config2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 branch_sample_type = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 280 & 0xFF */)) {
          set_has_branch_sample_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &branch_sample_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.PerfDataProto.PerfEventAttr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.PerfDataProto.PerfEventAttr)
  return false;
#undef DO_
}

void PerfDataProto_PerfEventAttr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.PerfDataProto.PerfEventAttr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // optional uint32 size = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->size(), output);
  }

  // optional uint64 config = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->config(), output);
  }

  // optional uint64 sample_period = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->sample_period(), output);
  }

  // optional uint64 sample_freq = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->sample_freq(), output);
  }

  // optional uint64 sample_type = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->sample_type(), output);
  }

  // optional uint64 read_format = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->read_format(), output);
  }

  // optional bool disabled = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->disabled(), output);
  }

  // optional bool inherit = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->inherit(), output);
  }

  // optional bool pinned = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->pinned(), output);
  }

  // optional bool exclusive = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->exclusive(), output);
  }

  // optional bool exclude_user = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->exclude_user(), output);
  }

  // optional bool exclude_kernel = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->exclude_kernel(), output);
  }

  // optional bool exclude_hv = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->exclude_hv(), output);
  }

  // optional bool exclude_idle = 15;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->exclude_idle(), output);
  }

  // optional bool mmap = 16;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->mmap(), output);
  }

  // optional bool comm = 17;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->comm(), output);
  }

  // optional bool freq = 18;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->freq(), output);
  }

  // optional bool inherit_stat = 19;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->inherit_stat(), output);
  }

  // optional bool enable_on_exec = 20;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->enable_on_exec(), output);
  }

  // optional bool task = 21;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->task(), output);
  }

  // optional bool watermark = 22;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->watermark(), output);
  }

  // optional uint32 precise_ip = 23;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->precise_ip(), output);
  }

  // optional bool mmap_data = 24;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(24, this->mmap_data(), output);
  }

  // optional bool sample_id_all = 25;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(25, this->sample_id_all(), output);
  }

  // optional bool exclude_host = 26;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(26, this->exclude_host(), output);
  }

  // optional bool exclude_guest = 27;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(27, this->exclude_guest(), output);
  }

  // optional uint32 wakeup_events = 28;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->wakeup_events(), output);
  }

  // optional uint32 wakeup_watermark = 29;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(29, this->wakeup_watermark(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 bp_type = 30;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->bp_type(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint64 bp_addr = 31;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(31, this->bp_addr(), output);
  }

  // optional uint64 config1 = 32;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(32, this->config1(), output);
  }

  // optional uint64 bp_len = 33;
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(33, this->bp_len(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint64 config2 = 34;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(34, this->config2(), output);
  }

  // optional uint64 branch_sample_type = 35;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(35, this->branch_sample_type(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:metrics.PerfDataProto.PerfEventAttr)
}

size_t PerfDataProto_PerfEventAttr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.PerfDataProto.PerfEventAttr)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 255u) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 size = 2;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->size());
    }

    // optional uint64 config = 3;
    if (has_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->config());
    }

    // optional uint64 sample_period = 4;
    if (has_sample_period()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sample_period());
    }

    // optional uint64 sample_freq = 5;
    if (has_sample_freq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sample_freq());
    }

    // optional uint64 sample_type = 6;
    if (has_sample_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sample_type());
    }

    // optional uint64 read_format = 7;
    if (has_read_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->read_format());
    }

    // optional bool disabled = 8;
    if (has_disabled()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional bool inherit = 9;
    if (has_inherit()) {
      total_size += 1 + 1;
    }

    // optional bool pinned = 10;
    if (has_pinned()) {
      total_size += 1 + 1;
    }

    // optional bool exclusive = 11;
    if (has_exclusive()) {
      total_size += 1 + 1;
    }

    // optional bool exclude_user = 12;
    if (has_exclude_user()) {
      total_size += 1 + 1;
    }

    // optional bool exclude_kernel = 13;
    if (has_exclude_kernel()) {
      total_size += 1 + 1;
    }

    // optional bool exclude_hv = 14;
    if (has_exclude_hv()) {
      total_size += 1 + 1;
    }

    // optional bool exclude_idle = 15;
    if (has_exclude_idle()) {
      total_size += 1 + 1;
    }

    // optional bool mmap = 16;
    if (has_mmap()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional bool comm = 17;
    if (has_comm()) {
      total_size += 2 + 1;
    }

    // optional bool freq = 18;
    if (has_freq()) {
      total_size += 2 + 1;
    }

    // optional bool inherit_stat = 19;
    if (has_inherit_stat()) {
      total_size += 2 + 1;
    }

    // optional bool enable_on_exec = 20;
    if (has_enable_on_exec()) {
      total_size += 2 + 1;
    }

    // optional bool task = 21;
    if (has_task()) {
      total_size += 2 + 1;
    }

    // optional bool watermark = 22;
    if (has_watermark()) {
      total_size += 2 + 1;
    }

    // optional bool mmap_data = 24;
    if (has_mmap_data()) {
      total_size += 2 + 1;
    }

    // optional uint32 precise_ip = 23;
    if (has_precise_ip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->precise_ip());
    }

  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    // optional bool sample_id_all = 25;
    if (has_sample_id_all()) {
      total_size += 2 + 1;
    }

    // optional bool exclude_host = 26;
    if (has_exclude_host()) {
      total_size += 2 + 1;
    }

    // optional bool exclude_guest = 27;
    if (has_exclude_guest()) {
      total_size += 2 + 1;
    }

    // optional uint32 wakeup_events = 28;
    if (has_wakeup_events()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wakeup_events());
    }

    // optional uint32 wakeup_watermark = 29;
    if (has_wakeup_watermark()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wakeup_watermark());
    }

    // optional uint64 bp_addr = 31;
    if (has_bp_addr()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bp_addr());
    }

    // optional uint64 config1 = 32;
    if (has_config1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->config1());
    }

    // optional uint64 bp_len = 33;
    if (has_bp_len()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bp_len());
    }

  }
  if (_has_bits_[32 / 32] & 7u) {
    // optional uint64 config2 = 34;
    if (has_config2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->config2());
    }

    // optional uint64 branch_sample_type = 35;
    if (has_branch_sample_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->branch_sample_type());
    }

    // optional uint32 bp_type = 30;
    if (has_bp_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bp_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PerfDataProto_PerfEventAttr::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PerfDataProto_PerfEventAttr*>(&from));
}

void PerfDataProto_PerfEventAttr::MergeFrom(const PerfDataProto_PerfEventAttr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.PerfDataProto.PerfEventAttr)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000002u) {
      size_ = from.size_;
    }
    if (cached_has_bits & 0x00000004u) {
      config_ = from.config_;
    }
    if (cached_has_bits & 0x00000008u) {
      sample_period_ = from.sample_period_;
    }
    if (cached_has_bits & 0x00000010u) {
      sample_freq_ = from.sample_freq_;
    }
    if (cached_has_bits & 0x00000020u) {
      sample_type_ = from.sample_type_;
    }
    if (cached_has_bits & 0x00000040u) {
      read_format_ = from.read_format_;
    }
    if (cached_has_bits & 0x00000080u) {
      disabled_ = from.disabled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      inherit_ = from.inherit_;
    }
    if (cached_has_bits & 0x00000200u) {
      pinned_ = from.pinned_;
    }
    if (cached_has_bits & 0x00000400u) {
      exclusive_ = from.exclusive_;
    }
    if (cached_has_bits & 0x00000800u) {
      exclude_user_ = from.exclude_user_;
    }
    if (cached_has_bits & 0x00001000u) {
      exclude_kernel_ = from.exclude_kernel_;
    }
    if (cached_has_bits & 0x00002000u) {
      exclude_hv_ = from.exclude_hv_;
    }
    if (cached_has_bits & 0x00004000u) {
      exclude_idle_ = from.exclude_idle_;
    }
    if (cached_has_bits & 0x00008000u) {
      mmap_ = from.mmap_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      comm_ = from.comm_;
    }
    if (cached_has_bits & 0x00020000u) {
      freq_ = from.freq_;
    }
    if (cached_has_bits & 0x00040000u) {
      inherit_stat_ = from.inherit_stat_;
    }
    if (cached_has_bits & 0x00080000u) {
      enable_on_exec_ = from.enable_on_exec_;
    }
    if (cached_has_bits & 0x00100000u) {
      task_ = from.task_;
    }
    if (cached_has_bits & 0x00200000u) {
      watermark_ = from.watermark_;
    }
    if (cached_has_bits & 0x00400000u) {
      mmap_data_ = from.mmap_data_;
    }
    if (cached_has_bits & 0x00800000u) {
      precise_ip_ = from.precise_ip_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 4278190080u) {
    if (cached_has_bits & 0x01000000u) {
      sample_id_all_ = from.sample_id_all_;
    }
    if (cached_has_bits & 0x02000000u) {
      exclude_host_ = from.exclude_host_;
    }
    if (cached_has_bits & 0x04000000u) {
      exclude_guest_ = from.exclude_guest_;
    }
    if (cached_has_bits & 0x08000000u) {
      wakeup_events_ = from.wakeup_events_;
    }
    if (cached_has_bits & 0x10000000u) {
      wakeup_watermark_ = from.wakeup_watermark_;
    }
    if (cached_has_bits & 0x20000000u) {
      bp_addr_ = from.bp_addr_;
    }
    if (cached_has_bits & 0x40000000u) {
      config1_ = from.config1_;
    }
    if (cached_has_bits & 0x80000000u) {
      bp_len_ = from.bp_len_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      config2_ = from.config2_;
    }
    if (cached_has_bits & 0x00000002u) {
      branch_sample_type_ = from.branch_sample_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      bp_type_ = from.bp_type_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void PerfDataProto_PerfEventAttr::CopyFrom(const PerfDataProto_PerfEventAttr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.PerfDataProto.PerfEventAttr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerfDataProto_PerfEventAttr::IsInitialized() const {
  return true;
}

void PerfDataProto_PerfEventAttr::Swap(PerfDataProto_PerfEventAttr* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PerfDataProto_PerfEventAttr::InternalSwap(PerfDataProto_PerfEventAttr* other) {
  using std::swap;
  swap(type_, other->type_);
  swap(size_, other->size_);
  swap(config_, other->config_);
  swap(sample_period_, other->sample_period_);
  swap(sample_freq_, other->sample_freq_);
  swap(sample_type_, other->sample_type_);
  swap(read_format_, other->read_format_);
  swap(disabled_, other->disabled_);
  swap(inherit_, other->inherit_);
  swap(pinned_, other->pinned_);
  swap(exclusive_, other->exclusive_);
  swap(exclude_user_, other->exclude_user_);
  swap(exclude_kernel_, other->exclude_kernel_);
  swap(exclude_hv_, other->exclude_hv_);
  swap(exclude_idle_, other->exclude_idle_);
  swap(mmap_, other->mmap_);
  swap(comm_, other->comm_);
  swap(freq_, other->freq_);
  swap(inherit_stat_, other->inherit_stat_);
  swap(enable_on_exec_, other->enable_on_exec_);
  swap(task_, other->task_);
  swap(watermark_, other->watermark_);
  swap(mmap_data_, other->mmap_data_);
  swap(precise_ip_, other->precise_ip_);
  swap(sample_id_all_, other->sample_id_all_);
  swap(exclude_host_, other->exclude_host_);
  swap(exclude_guest_, other->exclude_guest_);
  swap(wakeup_events_, other->wakeup_events_);
  swap(wakeup_watermark_, other->wakeup_watermark_);
  swap(bp_addr_, other->bp_addr_);
  swap(config1_, other->config1_);
  swap(bp_len_, other->bp_len_);
  swap(config2_, other->config2_);
  swap(branch_sample_type_, other->branch_sample_type_);
  swap(bp_type_, other->bp_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string PerfDataProto_PerfEventAttr::GetTypeName() const {
  return "metrics.PerfDataProto.PerfEventAttr";
}


// ===================================================================

void PerfDataProto_PerfFileAttr::InitAsDefaultInstance() {
  ::metrics::_PerfDataProto_PerfFileAttr_default_instance_._instance.get_mutable()->attr_ = const_cast< ::metrics::PerfDataProto_PerfEventAttr*>(
      ::metrics::PerfDataProto_PerfEventAttr::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PerfDataProto_PerfFileAttr::kAttrFieldNumber;
const int PerfDataProto_PerfFileAttr::kIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PerfDataProto_PerfFileAttr::PerfDataProto_PerfFileAttr()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_perf_5fdata_2eproto::scc_info_PerfDataProto_PerfFileAttr.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.PerfDataProto.PerfFileAttr)
}
PerfDataProto_PerfFileAttr::PerfDataProto_PerfFileAttr(const PerfDataProto_PerfFileAttr& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      ids_(from.ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_attr()) {
    attr_ = new ::metrics::PerfDataProto_PerfEventAttr(*from.attr_);
  } else {
    attr_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:metrics.PerfDataProto.PerfFileAttr)
}

void PerfDataProto_PerfFileAttr::SharedCtor() {
  attr_ = NULL;
}

PerfDataProto_PerfFileAttr::~PerfDataProto_PerfFileAttr() {
  // @@protoc_insertion_point(destructor:metrics.PerfDataProto.PerfFileAttr)
  SharedDtor();
}

void PerfDataProto_PerfFileAttr::SharedDtor() {
  if (this != internal_default_instance()) delete attr_;
}

void PerfDataProto_PerfFileAttr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PerfDataProto_PerfFileAttr& PerfDataProto_PerfFileAttr::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_perf_5fdata_2eproto::scc_info_PerfDataProto_PerfFileAttr.base);
  return *internal_default_instance();
}


void PerfDataProto_PerfFileAttr::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.PerfDataProto.PerfFileAttr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(attr_ != NULL);
    attr_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PerfDataProto_PerfFileAttr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:metrics.PerfDataProto.PerfFileAttr)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .metrics.PerfDataProto.PerfEventAttr attr = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_attr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 ids = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16u, input, this->mutable_ids())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.PerfDataProto.PerfFileAttr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.PerfDataProto.PerfFileAttr)
  return false;
#undef DO_
}

void PerfDataProto_PerfFileAttr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.PerfDataProto.PerfFileAttr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .metrics.PerfDataProto.PerfEventAttr attr = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_attr(), output);
  }

  // repeated uint64 ids = 2;
  for (int i = 0, n = this->ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->ids(i), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:metrics.PerfDataProto.PerfFileAttr)
}

size_t PerfDataProto_PerfFileAttr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.PerfDataProto.PerfFileAttr)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // repeated uint64 ids = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->ids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->ids_size());
    total_size += data_size;
  }

  // optional .metrics.PerfDataProto.PerfEventAttr attr = 1;
  if (has_attr()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *attr_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PerfDataProto_PerfFileAttr::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PerfDataProto_PerfFileAttr*>(&from));
}

void PerfDataProto_PerfFileAttr::MergeFrom(const PerfDataProto_PerfFileAttr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.PerfDataProto.PerfFileAttr)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ids_.MergeFrom(from.ids_);
  if (from.has_attr()) {
    mutable_attr()->::metrics::PerfDataProto_PerfEventAttr::MergeFrom(from.attr());
  }
}

void PerfDataProto_PerfFileAttr::CopyFrom(const PerfDataProto_PerfFileAttr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.PerfDataProto.PerfFileAttr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerfDataProto_PerfFileAttr::IsInitialized() const {
  return true;
}

void PerfDataProto_PerfFileAttr::Swap(PerfDataProto_PerfFileAttr* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PerfDataProto_PerfFileAttr::InternalSwap(PerfDataProto_PerfFileAttr* other) {
  using std::swap;
  ids_.InternalSwap(&other->ids_);
  swap(attr_, other->attr_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string PerfDataProto_PerfFileAttr::GetTypeName() const {
  return "metrics.PerfDataProto.PerfFileAttr";
}


// ===================================================================

void PerfDataProto_PerfEventType::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PerfDataProto_PerfEventType::kIdFieldNumber;
const int PerfDataProto_PerfEventType::kNameMd5PrefixFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PerfDataProto_PerfEventType::PerfDataProto_PerfEventType()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_perf_5fdata_2eproto::scc_info_PerfDataProto_PerfEventType.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.PerfDataProto.PerfEventType)
}
PerfDataProto_PerfEventType::PerfDataProto_PerfEventType(const PerfDataProto_PerfEventType& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&name_md5_prefix_) -
    reinterpret_cast<char*>(&id_)) + sizeof(name_md5_prefix_));
  // @@protoc_insertion_point(copy_constructor:metrics.PerfDataProto.PerfEventType)
}

void PerfDataProto_PerfEventType::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&name_md5_prefix_) -
      reinterpret_cast<char*>(&id_)) + sizeof(name_md5_prefix_));
}

PerfDataProto_PerfEventType::~PerfDataProto_PerfEventType() {
  // @@protoc_insertion_point(destructor:metrics.PerfDataProto.PerfEventType)
  SharedDtor();
}

void PerfDataProto_PerfEventType::SharedDtor() {
}

void PerfDataProto_PerfEventType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PerfDataProto_PerfEventType& PerfDataProto_PerfEventType::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_perf_5fdata_2eproto::scc_info_PerfDataProto_PerfEventType.base);
  return *internal_default_instance();
}


void PerfDataProto_PerfEventType::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.PerfDataProto.PerfEventType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&name_md5_prefix_) -
        reinterpret_cast<char*>(&id_)) + sizeof(name_md5_prefix_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PerfDataProto_PerfEventType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:metrics.PerfDataProto.PerfEventType)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 name_md5_prefix = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_name_md5_prefix();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &name_md5_prefix_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.PerfDataProto.PerfEventType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.PerfDataProto.PerfEventType)
  return false;
#undef DO_
}

void PerfDataProto_PerfEventType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.PerfDataProto.PerfEventType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional uint64 name_md5_prefix = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->name_md5_prefix(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:metrics.PerfDataProto.PerfEventType)
}

size_t PerfDataProto_PerfEventType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.PerfDataProto.PerfEventType)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint64 name_md5_prefix = 3;
    if (has_name_md5_prefix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->name_md5_prefix());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PerfDataProto_PerfEventType::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PerfDataProto_PerfEventType*>(&from));
}

void PerfDataProto_PerfEventType::MergeFrom(const PerfDataProto_PerfEventType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.PerfDataProto.PerfEventType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      name_md5_prefix_ = from.name_md5_prefix_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PerfDataProto_PerfEventType::CopyFrom(const PerfDataProto_PerfEventType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.PerfDataProto.PerfEventType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerfDataProto_PerfEventType::IsInitialized() const {
  return true;
}

void PerfDataProto_PerfEventType::Swap(PerfDataProto_PerfEventType* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PerfDataProto_PerfEventType::InternalSwap(PerfDataProto_PerfEventType* other) {
  using std::swap;
  swap(id_, other->id_);
  swap(name_md5_prefix_, other->name_md5_prefix_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string PerfDataProto_PerfEventType::GetTypeName() const {
  return "metrics.PerfDataProto.PerfEventType";
}


// ===================================================================

void PerfDataProto_SampleInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PerfDataProto_SampleInfo::kPidFieldNumber;
const int PerfDataProto_SampleInfo::kTidFieldNumber;
const int PerfDataProto_SampleInfo::kSampleTimeNsFieldNumber;
const int PerfDataProto_SampleInfo::kIdFieldNumber;
const int PerfDataProto_SampleInfo::kCpuFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PerfDataProto_SampleInfo::PerfDataProto_SampleInfo()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_perf_5fdata_2eproto::scc_info_PerfDataProto_SampleInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.PerfDataProto.SampleInfo)
}
PerfDataProto_SampleInfo::PerfDataProto_SampleInfo(const PerfDataProto_SampleInfo& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&pid_, &from.pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&cpu_) -
    reinterpret_cast<char*>(&pid_)) + sizeof(cpu_));
  // @@protoc_insertion_point(copy_constructor:metrics.PerfDataProto.SampleInfo)
}

void PerfDataProto_SampleInfo::SharedCtor() {
  ::memset(&pid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cpu_) -
      reinterpret_cast<char*>(&pid_)) + sizeof(cpu_));
}

PerfDataProto_SampleInfo::~PerfDataProto_SampleInfo() {
  // @@protoc_insertion_point(destructor:metrics.PerfDataProto.SampleInfo)
  SharedDtor();
}

void PerfDataProto_SampleInfo::SharedDtor() {
}

void PerfDataProto_SampleInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PerfDataProto_SampleInfo& PerfDataProto_SampleInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_perf_5fdata_2eproto::scc_info_PerfDataProto_SampleInfo.base);
  return *internal_default_instance();
}


void PerfDataProto_SampleInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.PerfDataProto.SampleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    ::memset(&pid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cpu_) -
        reinterpret_cast<char*>(&pid_)) + sizeof(cpu_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PerfDataProto_SampleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:metrics.PerfDataProto.SampleInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 pid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_pid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_tid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 sample_time_ns = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_sample_time_ns();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sample_time_ns_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 cpu = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_cpu();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cpu_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.PerfDataProto.SampleInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.PerfDataProto.SampleInfo)
  return false;
#undef DO_
}

void PerfDataProto_SampleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.PerfDataProto.SampleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 pid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pid(), output);
  }

  // optional uint32 tid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->tid(), output);
  }

  // optional uint64 sample_time_ns = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->sample_time_ns(), output);
  }

  // optional uint64 id = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->id(), output);
  }

  // optional uint32 cpu = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->cpu(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:metrics.PerfDataProto.SampleInfo)
}

size_t PerfDataProto_SampleInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.PerfDataProto.SampleInfo)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 31u) {
    // optional uint32 pid = 1;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pid());
    }

    // optional uint32 tid = 2;
    if (has_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tid());
    }

    // optional uint64 sample_time_ns = 3;
    if (has_sample_time_ns()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sample_time_ns());
    }

    // optional uint64 id = 4;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint32 cpu = 5;
    if (has_cpu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cpu());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PerfDataProto_SampleInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PerfDataProto_SampleInfo*>(&from));
}

void PerfDataProto_SampleInfo::MergeFrom(const PerfDataProto_SampleInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.PerfDataProto.SampleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      pid_ = from.pid_;
    }
    if (cached_has_bits & 0x00000002u) {
      tid_ = from.tid_;
    }
    if (cached_has_bits & 0x00000004u) {
      sample_time_ns_ = from.sample_time_ns_;
    }
    if (cached_has_bits & 0x00000008u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000010u) {
      cpu_ = from.cpu_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PerfDataProto_SampleInfo::CopyFrom(const PerfDataProto_SampleInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.PerfDataProto.SampleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerfDataProto_SampleInfo::IsInitialized() const {
  return true;
}

void PerfDataProto_SampleInfo::Swap(PerfDataProto_SampleInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PerfDataProto_SampleInfo::InternalSwap(PerfDataProto_SampleInfo* other) {
  using std::swap;
  swap(pid_, other->pid_);
  swap(tid_, other->tid_);
  swap(sample_time_ns_, other->sample_time_ns_);
  swap(id_, other->id_);
  swap(cpu_, other->cpu_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string PerfDataProto_SampleInfo::GetTypeName() const {
  return "metrics.PerfDataProto.SampleInfo";
}


// ===================================================================

void PerfDataProto_CommEvent::InitAsDefaultInstance() {
  ::metrics::_PerfDataProto_CommEvent_default_instance_._instance.get_mutable()->sample_info_ = const_cast< ::metrics::PerfDataProto_SampleInfo*>(
      ::metrics::PerfDataProto_SampleInfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PerfDataProto_CommEvent::kPidFieldNumber;
const int PerfDataProto_CommEvent::kTidFieldNumber;
const int PerfDataProto_CommEvent::kCommMd5PrefixFieldNumber;
const int PerfDataProto_CommEvent::kSampleTimeFieldNumber;
const int PerfDataProto_CommEvent::kSampleInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PerfDataProto_CommEvent::PerfDataProto_CommEvent()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_perf_5fdata_2eproto::scc_info_PerfDataProto_CommEvent.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.PerfDataProto.CommEvent)
}
PerfDataProto_CommEvent::PerfDataProto_CommEvent(const PerfDataProto_CommEvent& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_sample_info()) {
    sample_info_ = new ::metrics::PerfDataProto_SampleInfo(*from.sample_info_);
  } else {
    sample_info_ = NULL;
  }
  ::memcpy(&pid_, &from.pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&sample_time_) -
    reinterpret_cast<char*>(&pid_)) + sizeof(sample_time_));
  // @@protoc_insertion_point(copy_constructor:metrics.PerfDataProto.CommEvent)
}

void PerfDataProto_CommEvent::SharedCtor() {
  ::memset(&sample_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sample_time_) -
      reinterpret_cast<char*>(&sample_info_)) + sizeof(sample_time_));
}

PerfDataProto_CommEvent::~PerfDataProto_CommEvent() {
  // @@protoc_insertion_point(destructor:metrics.PerfDataProto.CommEvent)
  SharedDtor();
}

void PerfDataProto_CommEvent::SharedDtor() {
  if (this != internal_default_instance()) delete sample_info_;
}

void PerfDataProto_CommEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PerfDataProto_CommEvent& PerfDataProto_CommEvent::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_perf_5fdata_2eproto::scc_info_PerfDataProto_CommEvent.base);
  return *internal_default_instance();
}


void PerfDataProto_CommEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.PerfDataProto.CommEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(sample_info_ != NULL);
    sample_info_->Clear();
  }
  if (cached_has_bits & 30u) {
    ::memset(&pid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sample_time_) -
        reinterpret_cast<char*>(&pid_)) + sizeof(sample_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PerfDataProto_CommEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:metrics.PerfDataProto.CommEvent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 pid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_pid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_tid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 comm_md5_prefix = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_comm_md5_prefix();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &comm_md5_prefix_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 sample_time = 5 [deprecated = true];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_sample_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sample_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .metrics.PerfDataProto.SampleInfo sample_info = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sample_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.PerfDataProto.CommEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.PerfDataProto.CommEvent)
  return false;
#undef DO_
}

void PerfDataProto_CommEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.PerfDataProto.CommEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 pid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pid(), output);
  }

  // optional uint32 tid = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->tid(), output);
  }

  // optional uint64 comm_md5_prefix = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->comm_md5_prefix(), output);
  }

  // optional uint64 sample_time = 5 [deprecated = true];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->sample_time(), output);
  }

  // optional .metrics.PerfDataProto.SampleInfo sample_info = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->_internal_sample_info(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:metrics.PerfDataProto.CommEvent)
}

size_t PerfDataProto_CommEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.PerfDataProto.CommEvent)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 31u) {
    // optional .metrics.PerfDataProto.SampleInfo sample_info = 6;
    if (has_sample_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *sample_info_);
    }

    // optional uint32 pid = 1;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pid());
    }

    // optional uint32 tid = 2;
    if (has_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tid());
    }

    // optional uint64 comm_md5_prefix = 4;
    if (has_comm_md5_prefix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->comm_md5_prefix());
    }

    // optional uint64 sample_time = 5 [deprecated = true];
    if (has_sample_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sample_time());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PerfDataProto_CommEvent::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PerfDataProto_CommEvent*>(&from));
}

void PerfDataProto_CommEvent::MergeFrom(const PerfDataProto_CommEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.PerfDataProto.CommEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_sample_info()->::metrics::PerfDataProto_SampleInfo::MergeFrom(from.sample_info());
    }
    if (cached_has_bits & 0x00000002u) {
      pid_ = from.pid_;
    }
    if (cached_has_bits & 0x00000004u) {
      tid_ = from.tid_;
    }
    if (cached_has_bits & 0x00000008u) {
      comm_md5_prefix_ = from.comm_md5_prefix_;
    }
    if (cached_has_bits & 0x00000010u) {
      sample_time_ = from.sample_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PerfDataProto_CommEvent::CopyFrom(const PerfDataProto_CommEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.PerfDataProto.CommEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerfDataProto_CommEvent::IsInitialized() const {
  return true;
}

void PerfDataProto_CommEvent::Swap(PerfDataProto_CommEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PerfDataProto_CommEvent::InternalSwap(PerfDataProto_CommEvent* other) {
  using std::swap;
  swap(sample_info_, other->sample_info_);
  swap(pid_, other->pid_);
  swap(tid_, other->tid_);
  swap(comm_md5_prefix_, other->comm_md5_prefix_);
  swap(sample_time_, other->sample_time_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string PerfDataProto_CommEvent::GetTypeName() const {
  return "metrics.PerfDataProto.CommEvent";
}


// ===================================================================

void PerfDataProto_MMapEvent::InitAsDefaultInstance() {
  ::metrics::_PerfDataProto_MMapEvent_default_instance_._instance.get_mutable()->sample_info_ = const_cast< ::metrics::PerfDataProto_SampleInfo*>(
      ::metrics::PerfDataProto_SampleInfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PerfDataProto_MMapEvent::kPidFieldNumber;
const int PerfDataProto_MMapEvent::kTidFieldNumber;
const int PerfDataProto_MMapEvent::kStartFieldNumber;
const int PerfDataProto_MMapEvent::kLenFieldNumber;
const int PerfDataProto_MMapEvent::kPgoffFieldNumber;
const int PerfDataProto_MMapEvent::kFilenameMd5PrefixFieldNumber;
const int PerfDataProto_MMapEvent::kSampleInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PerfDataProto_MMapEvent::PerfDataProto_MMapEvent()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_perf_5fdata_2eproto::scc_info_PerfDataProto_MMapEvent.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.PerfDataProto.MMapEvent)
}
PerfDataProto_MMapEvent::PerfDataProto_MMapEvent(const PerfDataProto_MMapEvent& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_sample_info()) {
    sample_info_ = new ::metrics::PerfDataProto_SampleInfo(*from.sample_info_);
  } else {
    sample_info_ = NULL;
  }
  ::memcpy(&pid_, &from.pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&filename_md5_prefix_) -
    reinterpret_cast<char*>(&pid_)) + sizeof(filename_md5_prefix_));
  // @@protoc_insertion_point(copy_constructor:metrics.PerfDataProto.MMapEvent)
}

void PerfDataProto_MMapEvent::SharedCtor() {
  ::memset(&sample_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&filename_md5_prefix_) -
      reinterpret_cast<char*>(&sample_info_)) + sizeof(filename_md5_prefix_));
}

PerfDataProto_MMapEvent::~PerfDataProto_MMapEvent() {
  // @@protoc_insertion_point(destructor:metrics.PerfDataProto.MMapEvent)
  SharedDtor();
}

void PerfDataProto_MMapEvent::SharedDtor() {
  if (this != internal_default_instance()) delete sample_info_;
}

void PerfDataProto_MMapEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PerfDataProto_MMapEvent& PerfDataProto_MMapEvent::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_perf_5fdata_2eproto::scc_info_PerfDataProto_MMapEvent.base);
  return *internal_default_instance();
}


void PerfDataProto_MMapEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.PerfDataProto.MMapEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(sample_info_ != NULL);
    sample_info_->Clear();
  }
  if (cached_has_bits & 126u) {
    ::memset(&pid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&filename_md5_prefix_) -
        reinterpret_cast<char*>(&pid_)) + sizeof(filename_md5_prefix_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PerfDataProto_MMapEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:metrics.PerfDataProto.MMapEvent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 pid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_pid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_tid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 start = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_start();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 len = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_len();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &len_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 pgoff = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_pgoff();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pgoff_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 filename_md5_prefix = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_filename_md5_prefix();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &filename_md5_prefix_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .metrics.PerfDataProto.SampleInfo sample_info = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sample_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.PerfDataProto.MMapEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.PerfDataProto.MMapEvent)
  return false;
#undef DO_
}

void PerfDataProto_MMapEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.PerfDataProto.MMapEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 pid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pid(), output);
  }

  // optional uint32 tid = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->tid(), output);
  }

  // optional uint64 start = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->start(), output);
  }

  // optional uint64 len = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->len(), output);
  }

  // optional uint64 pgoff = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->pgoff(), output);
  }

  // optional uint64 filename_md5_prefix = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->filename_md5_prefix(), output);
  }

  // optional .metrics.PerfDataProto.SampleInfo sample_info = 8;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->_internal_sample_info(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:metrics.PerfDataProto.MMapEvent)
}

size_t PerfDataProto_MMapEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.PerfDataProto.MMapEvent)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 127u) {
    // optional .metrics.PerfDataProto.SampleInfo sample_info = 8;
    if (has_sample_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *sample_info_);
    }

    // optional uint32 pid = 1;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pid());
    }

    // optional uint32 tid = 2;
    if (has_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tid());
    }

    // optional uint64 start = 3;
    if (has_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->start());
    }

    // optional uint64 len = 4;
    if (has_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->len());
    }

    // optional uint64 pgoff = 5;
    if (has_pgoff()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pgoff());
    }

    // optional uint64 filename_md5_prefix = 7;
    if (has_filename_md5_prefix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->filename_md5_prefix());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PerfDataProto_MMapEvent::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PerfDataProto_MMapEvent*>(&from));
}

void PerfDataProto_MMapEvent::MergeFrom(const PerfDataProto_MMapEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.PerfDataProto.MMapEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_sample_info()->::metrics::PerfDataProto_SampleInfo::MergeFrom(from.sample_info());
    }
    if (cached_has_bits & 0x00000002u) {
      pid_ = from.pid_;
    }
    if (cached_has_bits & 0x00000004u) {
      tid_ = from.tid_;
    }
    if (cached_has_bits & 0x00000008u) {
      start_ = from.start_;
    }
    if (cached_has_bits & 0x00000010u) {
      len_ = from.len_;
    }
    if (cached_has_bits & 0x00000020u) {
      pgoff_ = from.pgoff_;
    }
    if (cached_has_bits & 0x00000040u) {
      filename_md5_prefix_ = from.filename_md5_prefix_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PerfDataProto_MMapEvent::CopyFrom(const PerfDataProto_MMapEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.PerfDataProto.MMapEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerfDataProto_MMapEvent::IsInitialized() const {
  return true;
}

void PerfDataProto_MMapEvent::Swap(PerfDataProto_MMapEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PerfDataProto_MMapEvent::InternalSwap(PerfDataProto_MMapEvent* other) {
  using std::swap;
  swap(sample_info_, other->sample_info_);
  swap(pid_, other->pid_);
  swap(tid_, other->tid_);
  swap(start_, other->start_);
  swap(len_, other->len_);
  swap(pgoff_, other->pgoff_);
  swap(filename_md5_prefix_, other->filename_md5_prefix_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string PerfDataProto_MMapEvent::GetTypeName() const {
  return "metrics.PerfDataProto.MMapEvent";
}


// ===================================================================

void PerfDataProto_BranchStackEntry::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PerfDataProto_BranchStackEntry::kFromIpFieldNumber;
const int PerfDataProto_BranchStackEntry::kToIpFieldNumber;
const int PerfDataProto_BranchStackEntry::kMispredictedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PerfDataProto_BranchStackEntry::PerfDataProto_BranchStackEntry()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_perf_5fdata_2eproto::scc_info_PerfDataProto_BranchStackEntry.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.PerfDataProto.BranchStackEntry)
}
PerfDataProto_BranchStackEntry::PerfDataProto_BranchStackEntry(const PerfDataProto_BranchStackEntry& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&from_ip_, &from.from_ip_,
    static_cast<size_t>(reinterpret_cast<char*>(&mispredicted_) -
    reinterpret_cast<char*>(&from_ip_)) + sizeof(mispredicted_));
  // @@protoc_insertion_point(copy_constructor:metrics.PerfDataProto.BranchStackEntry)
}

void PerfDataProto_BranchStackEntry::SharedCtor() {
  ::memset(&from_ip_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mispredicted_) -
      reinterpret_cast<char*>(&from_ip_)) + sizeof(mispredicted_));
}

PerfDataProto_BranchStackEntry::~PerfDataProto_BranchStackEntry() {
  // @@protoc_insertion_point(destructor:metrics.PerfDataProto.BranchStackEntry)
  SharedDtor();
}

void PerfDataProto_BranchStackEntry::SharedDtor() {
}

void PerfDataProto_BranchStackEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PerfDataProto_BranchStackEntry& PerfDataProto_BranchStackEntry::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_perf_5fdata_2eproto::scc_info_PerfDataProto_BranchStackEntry.base);
  return *internal_default_instance();
}


void PerfDataProto_BranchStackEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.PerfDataProto.BranchStackEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&from_ip_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mispredicted_) -
        reinterpret_cast<char*>(&from_ip_)) + sizeof(mispredicted_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PerfDataProto_BranchStackEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:metrics.PerfDataProto.BranchStackEntry)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 from_ip = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_from_ip();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &from_ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 to_ip = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_to_ip();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &to_ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool mispredicted = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_mispredicted();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mispredicted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.PerfDataProto.BranchStackEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.PerfDataProto.BranchStackEntry)
  return false;
#undef DO_
}

void PerfDataProto_BranchStackEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.PerfDataProto.BranchStackEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 from_ip = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->from_ip(), output);
  }

  // optional uint64 to_ip = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->to_ip(), output);
  }

  // optional bool mispredicted = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->mispredicted(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:metrics.PerfDataProto.BranchStackEntry)
}

size_t PerfDataProto_BranchStackEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.PerfDataProto.BranchStackEntry)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 7u) {
    // optional uint64 from_ip = 1;
    if (has_from_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->from_ip());
    }

    // optional uint64 to_ip = 2;
    if (has_to_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->to_ip());
    }

    // optional bool mispredicted = 3;
    if (has_mispredicted()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PerfDataProto_BranchStackEntry::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PerfDataProto_BranchStackEntry*>(&from));
}

void PerfDataProto_BranchStackEntry::MergeFrom(const PerfDataProto_BranchStackEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.PerfDataProto.BranchStackEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      from_ip_ = from.from_ip_;
    }
    if (cached_has_bits & 0x00000002u) {
      to_ip_ = from.to_ip_;
    }
    if (cached_has_bits & 0x00000004u) {
      mispredicted_ = from.mispredicted_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PerfDataProto_BranchStackEntry::CopyFrom(const PerfDataProto_BranchStackEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.PerfDataProto.BranchStackEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerfDataProto_BranchStackEntry::IsInitialized() const {
  return true;
}

void PerfDataProto_BranchStackEntry::Swap(PerfDataProto_BranchStackEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PerfDataProto_BranchStackEntry::InternalSwap(PerfDataProto_BranchStackEntry* other) {
  using std::swap;
  swap(from_ip_, other->from_ip_);
  swap(to_ip_, other->to_ip_);
  swap(mispredicted_, other->mispredicted_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string PerfDataProto_BranchStackEntry::GetTypeName() const {
  return "metrics.PerfDataProto.BranchStackEntry";
}


// ===================================================================

void PerfDataProto_SampleEvent::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PerfDataProto_SampleEvent::kIpFieldNumber;
const int PerfDataProto_SampleEvent::kPidFieldNumber;
const int PerfDataProto_SampleEvent::kTidFieldNumber;
const int PerfDataProto_SampleEvent::kSampleTimeNsFieldNumber;
const int PerfDataProto_SampleEvent::kAddrFieldNumber;
const int PerfDataProto_SampleEvent::kIdFieldNumber;
const int PerfDataProto_SampleEvent::kStreamIdFieldNumber;
const int PerfDataProto_SampleEvent::kPeriodFieldNumber;
const int PerfDataProto_SampleEvent::kCpuFieldNumber;
const int PerfDataProto_SampleEvent::kRawSizeFieldNumber;
const int PerfDataProto_SampleEvent::kCallchainFieldNumber;
const int PerfDataProto_SampleEvent::kBranchStackFieldNumber;
const int PerfDataProto_SampleEvent::kWeightFieldNumber;
const int PerfDataProto_SampleEvent::kDataSrcFieldNumber;
const int PerfDataProto_SampleEvent::kTransactionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PerfDataProto_SampleEvent::PerfDataProto_SampleEvent()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_perf_5fdata_2eproto::scc_info_PerfDataProto_SampleEvent.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.PerfDataProto.SampleEvent)
}
PerfDataProto_SampleEvent::PerfDataProto_SampleEvent(const PerfDataProto_SampleEvent& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      callchain_(from.callchain_),
      branch_stack_(from.branch_stack_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ip_, &from.ip_,
    static_cast<size_t>(reinterpret_cast<char*>(&transaction_) -
    reinterpret_cast<char*>(&ip_)) + sizeof(transaction_));
  // @@protoc_insertion_point(copy_constructor:metrics.PerfDataProto.SampleEvent)
}

void PerfDataProto_SampleEvent::SharedCtor() {
  ::memset(&ip_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&transaction_) -
      reinterpret_cast<char*>(&ip_)) + sizeof(transaction_));
}

PerfDataProto_SampleEvent::~PerfDataProto_SampleEvent() {
  // @@protoc_insertion_point(destructor:metrics.PerfDataProto.SampleEvent)
  SharedDtor();
}

void PerfDataProto_SampleEvent::SharedDtor() {
}

void PerfDataProto_SampleEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PerfDataProto_SampleEvent& PerfDataProto_SampleEvent::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_perf_5fdata_2eproto::scc_info_PerfDataProto_SampleEvent.base);
  return *internal_default_instance();
}


void PerfDataProto_SampleEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.PerfDataProto.SampleEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  callchain_.Clear();
  branch_stack_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&ip_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&period_) -
        reinterpret_cast<char*>(&ip_)) + sizeof(period_));
  }
  if (cached_has_bits & 7936u) {
    ::memset(&cpu_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&transaction_) -
        reinterpret_cast<char*>(&cpu_)) + sizeof(transaction_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PerfDataProto_SampleEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:metrics.PerfDataProto.SampleEvent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 ip = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_ip();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 pid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_pid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_tid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 sample_time_ns = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_sample_time_ns();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sample_time_ns_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 addr = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_addr();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &addr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 stream_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_stream_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &stream_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 period = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_period();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &period_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 cpu = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_cpu();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cpu_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 raw_size = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_raw_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &raw_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 callchain = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 88u, input, this->mutable_callchain())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_callchain())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .metrics.PerfDataProto.BranchStackEntry branch_stack = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_branch_stack()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 weight = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 data_src = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_data_src();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &data_src_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 transaction = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_transaction();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &transaction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.PerfDataProto.SampleEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.PerfDataProto.SampleEvent)
  return false;
#undef DO_
}

void PerfDataProto_SampleEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.PerfDataProto.SampleEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 ip = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->ip(), output);
  }

  // optional uint32 pid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pid(), output);
  }

  // optional uint32 tid = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->tid(), output);
  }

  // optional uint64 sample_time_ns = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->sample_time_ns(), output);
  }

  // optional uint64 addr = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->addr(), output);
  }

  // optional uint64 id = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->id(), output);
  }

  // optional uint64 stream_id = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->stream_id(), output);
  }

  // optional uint64 period = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->period(), output);
  }

  // optional uint32 cpu = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->cpu(), output);
  }

  // optional uint32 raw_size = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->raw_size(), output);
  }

  // repeated uint64 callchain = 11;
  for (int i = 0, n = this->callchain_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      11, this->callchain(i), output);
  }

  // repeated .metrics.PerfDataProto.BranchStackEntry branch_stack = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->branch_stack_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      12,
      this->branch_stack(static_cast<int>(i)),
      output);
  }

  // optional uint64 weight = 15;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(15, this->weight(), output);
  }

  // optional uint64 data_src = 16;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(16, this->data_src(), output);
  }

  // optional uint64 transaction = 17;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(17, this->transaction(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:metrics.PerfDataProto.SampleEvent)
}

size_t PerfDataProto_SampleEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.PerfDataProto.SampleEvent)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // repeated uint64 callchain = 11;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->callchain_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->callchain_size());
    total_size += data_size;
  }

  // repeated .metrics.PerfDataProto.BranchStackEntry branch_stack = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->branch_stack_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->branch_stack(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional uint64 ip = 1;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ip());
    }

    // optional uint32 pid = 2;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pid());
    }

    // optional uint32 tid = 3;
    if (has_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tid());
    }

    // optional uint64 sample_time_ns = 4;
    if (has_sample_time_ns()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sample_time_ns());
    }

    // optional uint64 addr = 5;
    if (has_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->addr());
    }

    // optional uint64 id = 6;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint64 stream_id = 7;
    if (has_stream_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->stream_id());
    }

    // optional uint64 period = 8;
    if (has_period()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->period());
    }

  }
  if (_has_bits_[8 / 32] & 7936u) {
    // optional uint32 cpu = 9;
    if (has_cpu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cpu());
    }

    // optional uint32 raw_size = 10;
    if (has_raw_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->raw_size());
    }

    // optional uint64 weight = 15;
    if (has_weight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->weight());
    }

    // optional uint64 data_src = 16;
    if (has_data_src()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->data_src());
    }

    // optional uint64 transaction = 17;
    if (has_transaction()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->transaction());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PerfDataProto_SampleEvent::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PerfDataProto_SampleEvent*>(&from));
}

void PerfDataProto_SampleEvent::MergeFrom(const PerfDataProto_SampleEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.PerfDataProto.SampleEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  callchain_.MergeFrom(from.callchain_);
  branch_stack_.MergeFrom(from.branch_stack_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      ip_ = from.ip_;
    }
    if (cached_has_bits & 0x00000002u) {
      pid_ = from.pid_;
    }
    if (cached_has_bits & 0x00000004u) {
      tid_ = from.tid_;
    }
    if (cached_has_bits & 0x00000008u) {
      sample_time_ns_ = from.sample_time_ns_;
    }
    if (cached_has_bits & 0x00000010u) {
      addr_ = from.addr_;
    }
    if (cached_has_bits & 0x00000020u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000040u) {
      stream_id_ = from.stream_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      period_ = from.period_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 7936u) {
    if (cached_has_bits & 0x00000100u) {
      cpu_ = from.cpu_;
    }
    if (cached_has_bits & 0x00000200u) {
      raw_size_ = from.raw_size_;
    }
    if (cached_has_bits & 0x00000400u) {
      weight_ = from.weight_;
    }
    if (cached_has_bits & 0x00000800u) {
      data_src_ = from.data_src_;
    }
    if (cached_has_bits & 0x00001000u) {
      transaction_ = from.transaction_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PerfDataProto_SampleEvent::CopyFrom(const PerfDataProto_SampleEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.PerfDataProto.SampleEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerfDataProto_SampleEvent::IsInitialized() const {
  return true;
}

void PerfDataProto_SampleEvent::Swap(PerfDataProto_SampleEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PerfDataProto_SampleEvent::InternalSwap(PerfDataProto_SampleEvent* other) {
  using std::swap;
  callchain_.InternalSwap(&other->callchain_);
  CastToBase(&branch_stack_)->InternalSwap(CastToBase(&other->branch_stack_));
  swap(ip_, other->ip_);
  swap(pid_, other->pid_);
  swap(tid_, other->tid_);
  swap(sample_time_ns_, other->sample_time_ns_);
  swap(addr_, other->addr_);
  swap(id_, other->id_);
  swap(stream_id_, other->stream_id_);
  swap(period_, other->period_);
  swap(cpu_, other->cpu_);
  swap(raw_size_, other->raw_size_);
  swap(weight_, other->weight_);
  swap(data_src_, other->data_src_);
  swap(transaction_, other->transaction_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string PerfDataProto_SampleEvent::GetTypeName() const {
  return "metrics.PerfDataProto.SampleEvent";
}


// ===================================================================

void PerfDataProto_ForkEvent::InitAsDefaultInstance() {
  ::metrics::_PerfDataProto_ForkEvent_default_instance_._instance.get_mutable()->sample_info_ = const_cast< ::metrics::PerfDataProto_SampleInfo*>(
      ::metrics::PerfDataProto_SampleInfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PerfDataProto_ForkEvent::kPidFieldNumber;
const int PerfDataProto_ForkEvent::kPpidFieldNumber;
const int PerfDataProto_ForkEvent::kTidFieldNumber;
const int PerfDataProto_ForkEvent::kPtidFieldNumber;
const int PerfDataProto_ForkEvent::kForkTimeNsFieldNumber;
const int PerfDataProto_ForkEvent::kSampleInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PerfDataProto_ForkEvent::PerfDataProto_ForkEvent()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_perf_5fdata_2eproto::scc_info_PerfDataProto_ForkEvent.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.PerfDataProto.ForkEvent)
}
PerfDataProto_ForkEvent::PerfDataProto_ForkEvent(const PerfDataProto_ForkEvent& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_sample_info()) {
    sample_info_ = new ::metrics::PerfDataProto_SampleInfo(*from.sample_info_);
  } else {
    sample_info_ = NULL;
  }
  ::memcpy(&pid_, &from.pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&fork_time_ns_) -
    reinterpret_cast<char*>(&pid_)) + sizeof(fork_time_ns_));
  // @@protoc_insertion_point(copy_constructor:metrics.PerfDataProto.ForkEvent)
}

void PerfDataProto_ForkEvent::SharedCtor() {
  ::memset(&sample_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fork_time_ns_) -
      reinterpret_cast<char*>(&sample_info_)) + sizeof(fork_time_ns_));
}

PerfDataProto_ForkEvent::~PerfDataProto_ForkEvent() {
  // @@protoc_insertion_point(destructor:metrics.PerfDataProto.ForkEvent)
  SharedDtor();
}

void PerfDataProto_ForkEvent::SharedDtor() {
  if (this != internal_default_instance()) delete sample_info_;
}

void PerfDataProto_ForkEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PerfDataProto_ForkEvent& PerfDataProto_ForkEvent::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_perf_5fdata_2eproto::scc_info_PerfDataProto_ForkEvent.base);
  return *internal_default_instance();
}


void PerfDataProto_ForkEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.PerfDataProto.ForkEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(sample_info_ != NULL);
    sample_info_->Clear();
  }
  if (cached_has_bits & 62u) {
    ::memset(&pid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fork_time_ns_) -
        reinterpret_cast<char*>(&pid_)) + sizeof(fork_time_ns_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PerfDataProto_ForkEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:metrics.PerfDataProto.ForkEvent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 pid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_pid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ppid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_ppid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ppid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_tid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ptid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_ptid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ptid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 fork_time_ns = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_fork_time_ns();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fork_time_ns_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .metrics.PerfDataProto.SampleInfo sample_info = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sample_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.PerfDataProto.ForkEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.PerfDataProto.ForkEvent)
  return false;
#undef DO_
}

void PerfDataProto_ForkEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.PerfDataProto.ForkEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 pid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pid(), output);
  }

  // optional uint32 ppid = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ppid(), output);
  }

  // optional uint32 tid = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->tid(), output);
  }

  // optional uint32 ptid = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->ptid(), output);
  }

  // optional uint64 fork_time_ns = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->fork_time_ns(), output);
  }

  // optional .metrics.PerfDataProto.SampleInfo sample_info = 11;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11, this->_internal_sample_info(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:metrics.PerfDataProto.ForkEvent)
}

size_t PerfDataProto_ForkEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.PerfDataProto.ForkEvent)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 63u) {
    // optional .metrics.PerfDataProto.SampleInfo sample_info = 11;
    if (has_sample_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *sample_info_);
    }

    // optional uint32 pid = 1;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pid());
    }

    // optional uint32 ppid = 2;
    if (has_ppid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ppid());
    }

    // optional uint32 tid = 3;
    if (has_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tid());
    }

    // optional uint32 ptid = 4;
    if (has_ptid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ptid());
    }

    // optional uint64 fork_time_ns = 5;
    if (has_fork_time_ns()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fork_time_ns());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PerfDataProto_ForkEvent::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PerfDataProto_ForkEvent*>(&from));
}

void PerfDataProto_ForkEvent::MergeFrom(const PerfDataProto_ForkEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.PerfDataProto.ForkEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_sample_info()->::metrics::PerfDataProto_SampleInfo::MergeFrom(from.sample_info());
    }
    if (cached_has_bits & 0x00000002u) {
      pid_ = from.pid_;
    }
    if (cached_has_bits & 0x00000004u) {
      ppid_ = from.ppid_;
    }
    if (cached_has_bits & 0x00000008u) {
      tid_ = from.tid_;
    }
    if (cached_has_bits & 0x00000010u) {
      ptid_ = from.ptid_;
    }
    if (cached_has_bits & 0x00000020u) {
      fork_time_ns_ = from.fork_time_ns_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PerfDataProto_ForkEvent::CopyFrom(const PerfDataProto_ForkEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.PerfDataProto.ForkEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerfDataProto_ForkEvent::IsInitialized() const {
  return true;
}

void PerfDataProto_ForkEvent::Swap(PerfDataProto_ForkEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PerfDataProto_ForkEvent::InternalSwap(PerfDataProto_ForkEvent* other) {
  using std::swap;
  swap(sample_info_, other->sample_info_);
  swap(pid_, other->pid_);
  swap(ppid_, other->ppid_);
  swap(tid_, other->tid_);
  swap(ptid_, other->ptid_);
  swap(fork_time_ns_, other->fork_time_ns_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string PerfDataProto_ForkEvent::GetTypeName() const {
  return "metrics.PerfDataProto.ForkEvent";
}


// ===================================================================

void PerfDataProto_EventHeader::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PerfDataProto_EventHeader::kTypeFieldNumber;
const int PerfDataProto_EventHeader::kMiscFieldNumber;
const int PerfDataProto_EventHeader::kSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PerfDataProto_EventHeader::PerfDataProto_EventHeader()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_perf_5fdata_2eproto::scc_info_PerfDataProto_EventHeader.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.PerfDataProto.EventHeader)
}
PerfDataProto_EventHeader::PerfDataProto_EventHeader(const PerfDataProto_EventHeader& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&type_)) + sizeof(size_));
  // @@protoc_insertion_point(copy_constructor:metrics.PerfDataProto.EventHeader)
}

void PerfDataProto_EventHeader::SharedCtor() {
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&type_)) + sizeof(size_));
}

PerfDataProto_EventHeader::~PerfDataProto_EventHeader() {
  // @@protoc_insertion_point(destructor:metrics.PerfDataProto.EventHeader)
  SharedDtor();
}

void PerfDataProto_EventHeader::SharedDtor() {
}

void PerfDataProto_EventHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PerfDataProto_EventHeader& PerfDataProto_EventHeader::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_perf_5fdata_2eproto::scc_info_PerfDataProto_EventHeader.base);
  return *internal_default_instance();
}


void PerfDataProto_EventHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.PerfDataProto.EventHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&size_) -
        reinterpret_cast<char*>(&type_)) + sizeof(size_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PerfDataProto_EventHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:metrics.PerfDataProto.EventHeader)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 misc = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_misc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &misc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 size = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.PerfDataProto.EventHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.PerfDataProto.EventHeader)
  return false;
#undef DO_
}

void PerfDataProto_EventHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.PerfDataProto.EventHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // optional uint32 misc = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->misc(), output);
  }

  // optional uint32 size = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->size(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:metrics.PerfDataProto.EventHeader)
}

size_t PerfDataProto_EventHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.PerfDataProto.EventHeader)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 misc = 2;
    if (has_misc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->misc());
    }

    // optional uint32 size = 3;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->size());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PerfDataProto_EventHeader::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PerfDataProto_EventHeader*>(&from));
}

void PerfDataProto_EventHeader::MergeFrom(const PerfDataProto_EventHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.PerfDataProto.EventHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000002u) {
      misc_ = from.misc_;
    }
    if (cached_has_bits & 0x00000004u) {
      size_ = from.size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PerfDataProto_EventHeader::CopyFrom(const PerfDataProto_EventHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.PerfDataProto.EventHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerfDataProto_EventHeader::IsInitialized() const {
  return true;
}

void PerfDataProto_EventHeader::Swap(PerfDataProto_EventHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PerfDataProto_EventHeader::InternalSwap(PerfDataProto_EventHeader* other) {
  using std::swap;
  swap(type_, other->type_);
  swap(misc_, other->misc_);
  swap(size_, other->size_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string PerfDataProto_EventHeader::GetTypeName() const {
  return "metrics.PerfDataProto.EventHeader";
}


// ===================================================================

void PerfDataProto_PerfEvent::InitAsDefaultInstance() {
  ::metrics::_PerfDataProto_PerfEvent_default_instance_._instance.get_mutable()->header_ = const_cast< ::metrics::PerfDataProto_EventHeader*>(
      ::metrics::PerfDataProto_EventHeader::internal_default_instance());
  ::metrics::_PerfDataProto_PerfEvent_default_instance_._instance.get_mutable()->mmap_event_ = const_cast< ::metrics::PerfDataProto_MMapEvent*>(
      ::metrics::PerfDataProto_MMapEvent::internal_default_instance());
  ::metrics::_PerfDataProto_PerfEvent_default_instance_._instance.get_mutable()->sample_event_ = const_cast< ::metrics::PerfDataProto_SampleEvent*>(
      ::metrics::PerfDataProto_SampleEvent::internal_default_instance());
  ::metrics::_PerfDataProto_PerfEvent_default_instance_._instance.get_mutable()->comm_event_ = const_cast< ::metrics::PerfDataProto_CommEvent*>(
      ::metrics::PerfDataProto_CommEvent::internal_default_instance());
  ::metrics::_PerfDataProto_PerfEvent_default_instance_._instance.get_mutable()->fork_event_ = const_cast< ::metrics::PerfDataProto_ForkEvent*>(
      ::metrics::PerfDataProto_ForkEvent::internal_default_instance());
  ::metrics::_PerfDataProto_PerfEvent_default_instance_._instance.get_mutable()->exit_event_ = const_cast< ::metrics::PerfDataProto_ForkEvent*>(
      ::metrics::PerfDataProto_ForkEvent::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PerfDataProto_PerfEvent::kHeaderFieldNumber;
const int PerfDataProto_PerfEvent::kMmapEventFieldNumber;
const int PerfDataProto_PerfEvent::kSampleEventFieldNumber;
const int PerfDataProto_PerfEvent::kCommEventFieldNumber;
const int PerfDataProto_PerfEvent::kForkEventFieldNumber;
const int PerfDataProto_PerfEvent::kExitEventFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PerfDataProto_PerfEvent::PerfDataProto_PerfEvent()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_perf_5fdata_2eproto::scc_info_PerfDataProto_PerfEvent.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.PerfDataProto.PerfEvent)
}
PerfDataProto_PerfEvent::PerfDataProto_PerfEvent(const PerfDataProto_PerfEvent& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::metrics::PerfDataProto_EventHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_mmap_event()) {
    mmap_event_ = new ::metrics::PerfDataProto_MMapEvent(*from.mmap_event_);
  } else {
    mmap_event_ = NULL;
  }
  if (from.has_sample_event()) {
    sample_event_ = new ::metrics::PerfDataProto_SampleEvent(*from.sample_event_);
  } else {
    sample_event_ = NULL;
  }
  if (from.has_comm_event()) {
    comm_event_ = new ::metrics::PerfDataProto_CommEvent(*from.comm_event_);
  } else {
    comm_event_ = NULL;
  }
  if (from.has_fork_event()) {
    fork_event_ = new ::metrics::PerfDataProto_ForkEvent(*from.fork_event_);
  } else {
    fork_event_ = NULL;
  }
  if (from.has_exit_event()) {
    exit_event_ = new ::metrics::PerfDataProto_ForkEvent(*from.exit_event_);
  } else {
    exit_event_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:metrics.PerfDataProto.PerfEvent)
}

void PerfDataProto_PerfEvent::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&exit_event_) -
      reinterpret_cast<char*>(&header_)) + sizeof(exit_event_));
}

PerfDataProto_PerfEvent::~PerfDataProto_PerfEvent() {
  // @@protoc_insertion_point(destructor:metrics.PerfDataProto.PerfEvent)
  SharedDtor();
}

void PerfDataProto_PerfEvent::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete mmap_event_;
  if (this != internal_default_instance()) delete sample_event_;
  if (this != internal_default_instance()) delete comm_event_;
  if (this != internal_default_instance()) delete fork_event_;
  if (this != internal_default_instance()) delete exit_event_;
}

void PerfDataProto_PerfEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PerfDataProto_PerfEvent& PerfDataProto_PerfEvent::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_perf_5fdata_2eproto::scc_info_PerfDataProto_PerfEvent.base);
  return *internal_default_instance();
}


void PerfDataProto_PerfEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.PerfDataProto.PerfEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(header_ != NULL);
      header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(mmap_event_ != NULL);
      mmap_event_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(sample_event_ != NULL);
      sample_event_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(comm_event_ != NULL);
      comm_event_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(fork_event_ != NULL);
      fork_event_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(exit_event_ != NULL);
      exit_event_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PerfDataProto_PerfEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:metrics.PerfDataProto.PerfEvent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .metrics.PerfDataProto.EventHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .metrics.PerfDataProto.MMapEvent mmap_event = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_mmap_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .metrics.PerfDataProto.SampleEvent sample_event = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sample_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .metrics.PerfDataProto.CommEvent comm_event = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_comm_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .metrics.PerfDataProto.ForkEvent fork_event = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_fork_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .metrics.PerfDataProto.ForkEvent exit_event = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_exit_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.PerfDataProto.PerfEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.PerfDataProto.PerfEvent)
  return false;
#undef DO_
}

void PerfDataProto_PerfEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.PerfDataProto.PerfEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .metrics.PerfDataProto.EventHeader header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_header(), output);
  }

  // optional .metrics.PerfDataProto.MMapEvent mmap_event = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->_internal_mmap_event(), output);
  }

  // optional .metrics.PerfDataProto.SampleEvent sample_event = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->_internal_sample_event(), output);
  }

  // optional .metrics.PerfDataProto.CommEvent comm_event = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->_internal_comm_event(), output);
  }

  // optional .metrics.PerfDataProto.ForkEvent fork_event = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->_internal_fork_event(), output);
  }

  // optional .metrics.PerfDataProto.ForkEvent exit_event = 9;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, this->_internal_exit_event(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:metrics.PerfDataProto.PerfEvent)
}

size_t PerfDataProto_PerfEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.PerfDataProto.PerfEvent)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 63u) {
    // optional .metrics.PerfDataProto.EventHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional .metrics.PerfDataProto.MMapEvent mmap_event = 2;
    if (has_mmap_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *mmap_event_);
    }

    // optional .metrics.PerfDataProto.SampleEvent sample_event = 3;
    if (has_sample_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *sample_event_);
    }

    // optional .metrics.PerfDataProto.CommEvent comm_event = 4;
    if (has_comm_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *comm_event_);
    }

    // optional .metrics.PerfDataProto.ForkEvent fork_event = 5;
    if (has_fork_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *fork_event_);
    }

    // optional .metrics.PerfDataProto.ForkEvent exit_event = 9;
    if (has_exit_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *exit_event_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PerfDataProto_PerfEvent::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PerfDataProto_PerfEvent*>(&from));
}

void PerfDataProto_PerfEvent::MergeFrom(const PerfDataProto_PerfEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.PerfDataProto.PerfEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::metrics::PerfDataProto_EventHeader::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_mmap_event()->::metrics::PerfDataProto_MMapEvent::MergeFrom(from.mmap_event());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_sample_event()->::metrics::PerfDataProto_SampleEvent::MergeFrom(from.sample_event());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_comm_event()->::metrics::PerfDataProto_CommEvent::MergeFrom(from.comm_event());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_fork_event()->::metrics::PerfDataProto_ForkEvent::MergeFrom(from.fork_event());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_exit_event()->::metrics::PerfDataProto_ForkEvent::MergeFrom(from.exit_event());
    }
  }
}

void PerfDataProto_PerfEvent::CopyFrom(const PerfDataProto_PerfEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.PerfDataProto.PerfEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerfDataProto_PerfEvent::IsInitialized() const {
  return true;
}

void PerfDataProto_PerfEvent::Swap(PerfDataProto_PerfEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PerfDataProto_PerfEvent::InternalSwap(PerfDataProto_PerfEvent* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(mmap_event_, other->mmap_event_);
  swap(sample_event_, other->sample_event_);
  swap(comm_event_, other->comm_event_);
  swap(fork_event_, other->fork_event_);
  swap(exit_event_, other->exit_event_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string PerfDataProto_PerfEvent::GetTypeName() const {
  return "metrics.PerfDataProto.PerfEvent";
}


// ===================================================================

void PerfDataProto_PerfEventStats::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PerfDataProto_PerfEventStats::kNumEventsReadFieldNumber;
const int PerfDataProto_PerfEventStats::kNumSampleEventsFieldNumber;
const int PerfDataProto_PerfEventStats::kNumMmapEventsFieldNumber;
const int PerfDataProto_PerfEventStats::kNumForkEventsFieldNumber;
const int PerfDataProto_PerfEventStats::kNumExitEventsFieldNumber;
const int PerfDataProto_PerfEventStats::kNumSampleEventsMappedFieldNumber;
const int PerfDataProto_PerfEventStats::kDidRemapFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PerfDataProto_PerfEventStats::PerfDataProto_PerfEventStats()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_perf_5fdata_2eproto::scc_info_PerfDataProto_PerfEventStats.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.PerfDataProto.PerfEventStats)
}
PerfDataProto_PerfEventStats::PerfDataProto_PerfEventStats(const PerfDataProto_PerfEventStats& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&num_events_read_, &from.num_events_read_,
    static_cast<size_t>(reinterpret_cast<char*>(&did_remap_) -
    reinterpret_cast<char*>(&num_events_read_)) + sizeof(did_remap_));
  // @@protoc_insertion_point(copy_constructor:metrics.PerfDataProto.PerfEventStats)
}

void PerfDataProto_PerfEventStats::SharedCtor() {
  ::memset(&num_events_read_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&did_remap_) -
      reinterpret_cast<char*>(&num_events_read_)) + sizeof(did_remap_));
}

PerfDataProto_PerfEventStats::~PerfDataProto_PerfEventStats() {
  // @@protoc_insertion_point(destructor:metrics.PerfDataProto.PerfEventStats)
  SharedDtor();
}

void PerfDataProto_PerfEventStats::SharedDtor() {
}

void PerfDataProto_PerfEventStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PerfDataProto_PerfEventStats& PerfDataProto_PerfEventStats::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_perf_5fdata_2eproto::scc_info_PerfDataProto_PerfEventStats.base);
  return *internal_default_instance();
}


void PerfDataProto_PerfEventStats::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.PerfDataProto.PerfEventStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    ::memset(&num_events_read_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&did_remap_) -
        reinterpret_cast<char*>(&num_events_read_)) + sizeof(did_remap_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PerfDataProto_PerfEventStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:metrics.PerfDataProto.PerfEventStats)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 num_events_read = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_num_events_read();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_events_read_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 num_sample_events = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_num_sample_events();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_sample_events_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 num_mmap_events = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_num_mmap_events();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_mmap_events_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 num_fork_events = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_num_fork_events();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_fork_events_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 num_exit_events = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_num_exit_events();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_exit_events_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 num_sample_events_mapped = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_num_sample_events_mapped();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_sample_events_mapped_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool did_remap = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_did_remap();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &did_remap_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.PerfDataProto.PerfEventStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.PerfDataProto.PerfEventStats)
  return false;
#undef DO_
}

void PerfDataProto_PerfEventStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.PerfDataProto.PerfEventStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 num_events_read = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num_events_read(), output);
  }

  // optional uint32 num_sample_events = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num_sample_events(), output);
  }

  // optional uint32 num_mmap_events = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->num_mmap_events(), output);
  }

  // optional uint32 num_fork_events = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->num_fork_events(), output);
  }

  // optional uint32 num_exit_events = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->num_exit_events(), output);
  }

  // optional uint32 num_sample_events_mapped = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->num_sample_events_mapped(), output);
  }

  // optional bool did_remap = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->did_remap(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:metrics.PerfDataProto.PerfEventStats)
}

size_t PerfDataProto_PerfEventStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.PerfDataProto.PerfEventStats)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 127u) {
    // optional uint32 num_events_read = 1;
    if (has_num_events_read()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_events_read());
    }

    // optional uint32 num_sample_events = 2;
    if (has_num_sample_events()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_sample_events());
    }

    // optional uint32 num_mmap_events = 3;
    if (has_num_mmap_events()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_mmap_events());
    }

    // optional uint32 num_fork_events = 4;
    if (has_num_fork_events()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_fork_events());
    }

    // optional uint32 num_exit_events = 5;
    if (has_num_exit_events()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_exit_events());
    }

    // optional uint32 num_sample_events_mapped = 6;
    if (has_num_sample_events_mapped()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_sample_events_mapped());
    }

    // optional bool did_remap = 7;
    if (has_did_remap()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PerfDataProto_PerfEventStats::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PerfDataProto_PerfEventStats*>(&from));
}

void PerfDataProto_PerfEventStats::MergeFrom(const PerfDataProto_PerfEventStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.PerfDataProto.PerfEventStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      num_events_read_ = from.num_events_read_;
    }
    if (cached_has_bits & 0x00000002u) {
      num_sample_events_ = from.num_sample_events_;
    }
    if (cached_has_bits & 0x00000004u) {
      num_mmap_events_ = from.num_mmap_events_;
    }
    if (cached_has_bits & 0x00000008u) {
      num_fork_events_ = from.num_fork_events_;
    }
    if (cached_has_bits & 0x00000010u) {
      num_exit_events_ = from.num_exit_events_;
    }
    if (cached_has_bits & 0x00000020u) {
      num_sample_events_mapped_ = from.num_sample_events_mapped_;
    }
    if (cached_has_bits & 0x00000040u) {
      did_remap_ = from.did_remap_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PerfDataProto_PerfEventStats::CopyFrom(const PerfDataProto_PerfEventStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.PerfDataProto.PerfEventStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerfDataProto_PerfEventStats::IsInitialized() const {
  return true;
}

void PerfDataProto_PerfEventStats::Swap(PerfDataProto_PerfEventStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PerfDataProto_PerfEventStats::InternalSwap(PerfDataProto_PerfEventStats* other) {
  using std::swap;
  swap(num_events_read_, other->num_events_read_);
  swap(num_sample_events_, other->num_sample_events_);
  swap(num_mmap_events_, other->num_mmap_events_);
  swap(num_fork_events_, other->num_fork_events_);
  swap(num_exit_events_, other->num_exit_events_);
  swap(num_sample_events_mapped_, other->num_sample_events_mapped_);
  swap(did_remap_, other->did_remap_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string PerfDataProto_PerfEventStats::GetTypeName() const {
  return "metrics.PerfDataProto.PerfEventStats";
}


// ===================================================================

void PerfDataProto_PerfBuildID::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PerfDataProto_PerfBuildID::kMiscFieldNumber;
const int PerfDataProto_PerfBuildID::kPidFieldNumber;
const int PerfDataProto_PerfBuildID::kBuildIdHashFieldNumber;
const int PerfDataProto_PerfBuildID::kFilenameMd5PrefixFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PerfDataProto_PerfBuildID::PerfDataProto_PerfBuildID()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_perf_5fdata_2eproto::scc_info_PerfDataProto_PerfBuildID.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.PerfDataProto.PerfBuildID)
}
PerfDataProto_PerfBuildID::PerfDataProto_PerfBuildID(const PerfDataProto_PerfBuildID& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  build_id_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_build_id_hash()) {
    build_id_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.build_id_hash_);
  }
  ::memcpy(&misc_, &from.misc_,
    static_cast<size_t>(reinterpret_cast<char*>(&filename_md5_prefix_) -
    reinterpret_cast<char*>(&misc_)) + sizeof(filename_md5_prefix_));
  // @@protoc_insertion_point(copy_constructor:metrics.PerfDataProto.PerfBuildID)
}

void PerfDataProto_PerfBuildID::SharedCtor() {
  build_id_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&misc_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&filename_md5_prefix_) -
      reinterpret_cast<char*>(&misc_)) + sizeof(filename_md5_prefix_));
}

PerfDataProto_PerfBuildID::~PerfDataProto_PerfBuildID() {
  // @@protoc_insertion_point(destructor:metrics.PerfDataProto.PerfBuildID)
  SharedDtor();
}

void PerfDataProto_PerfBuildID::SharedDtor() {
  build_id_hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PerfDataProto_PerfBuildID::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PerfDataProto_PerfBuildID& PerfDataProto_PerfBuildID::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_perf_5fdata_2eproto::scc_info_PerfDataProto_PerfBuildID.base);
  return *internal_default_instance();
}


void PerfDataProto_PerfBuildID::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.PerfDataProto.PerfBuildID)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    build_id_hash_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 14u) {
    ::memset(&misc_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&filename_md5_prefix_) -
        reinterpret_cast<char*>(&misc_)) + sizeof(filename_md5_prefix_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PerfDataProto_PerfBuildID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:metrics.PerfDataProto.PerfBuildID)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 misc = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_misc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &misc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 pid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_pid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes build_id_hash = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_build_id_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 filename_md5_prefix = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_filename_md5_prefix();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &filename_md5_prefix_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.PerfDataProto.PerfBuildID)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.PerfDataProto.PerfBuildID)
  return false;
#undef DO_
}

void PerfDataProto_PerfBuildID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.PerfDataProto.PerfBuildID)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 misc = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->misc(), output);
  }

  // optional uint32 pid = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pid(), output);
  }

  // optional bytes build_id_hash = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->build_id_hash(), output);
  }

  // optional uint64 filename_md5_prefix = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->filename_md5_prefix(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:metrics.PerfDataProto.PerfBuildID)
}

size_t PerfDataProto_PerfBuildID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.PerfDataProto.PerfBuildID)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 15u) {
    // optional bytes build_id_hash = 3;
    if (has_build_id_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->build_id_hash());
    }

    // optional uint32 misc = 1;
    if (has_misc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->misc());
    }

    // optional uint32 pid = 2;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pid());
    }

    // optional uint64 filename_md5_prefix = 5;
    if (has_filename_md5_prefix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->filename_md5_prefix());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PerfDataProto_PerfBuildID::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PerfDataProto_PerfBuildID*>(&from));
}

void PerfDataProto_PerfBuildID::MergeFrom(const PerfDataProto_PerfBuildID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.PerfDataProto.PerfBuildID)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_build_id_hash();
      build_id_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.build_id_hash_);
    }
    if (cached_has_bits & 0x00000002u) {
      misc_ = from.misc_;
    }
    if (cached_has_bits & 0x00000004u) {
      pid_ = from.pid_;
    }
    if (cached_has_bits & 0x00000008u) {
      filename_md5_prefix_ = from.filename_md5_prefix_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PerfDataProto_PerfBuildID::CopyFrom(const PerfDataProto_PerfBuildID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.PerfDataProto.PerfBuildID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerfDataProto_PerfBuildID::IsInitialized() const {
  return true;
}

void PerfDataProto_PerfBuildID::Swap(PerfDataProto_PerfBuildID* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PerfDataProto_PerfBuildID::InternalSwap(PerfDataProto_PerfBuildID* other) {
  using std::swap;
  build_id_hash_.Swap(&other->build_id_hash_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(misc_, other->misc_);
  swap(pid_, other->pid_);
  swap(filename_md5_prefix_, other->filename_md5_prefix_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string PerfDataProto_PerfBuildID::GetTypeName() const {
  return "metrics.PerfDataProto.PerfBuildID";
}


// ===================================================================

void PerfDataProto_StringMetadata_StringAndMd5sumPrefix::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PerfDataProto_StringMetadata_StringAndMd5sumPrefix::kValueMd5PrefixFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PerfDataProto_StringMetadata_StringAndMd5sumPrefix::PerfDataProto_StringMetadata_StringAndMd5sumPrefix()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_perf_5fdata_2eproto::scc_info_PerfDataProto_StringMetadata_StringAndMd5sumPrefix.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.PerfDataProto.StringMetadata.StringAndMd5sumPrefix)
}
PerfDataProto_StringMetadata_StringAndMd5sumPrefix::PerfDataProto_StringMetadata_StringAndMd5sumPrefix(const PerfDataProto_StringMetadata_StringAndMd5sumPrefix& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_md5_prefix_ = from.value_md5_prefix_;
  // @@protoc_insertion_point(copy_constructor:metrics.PerfDataProto.StringMetadata.StringAndMd5sumPrefix)
}

void PerfDataProto_StringMetadata_StringAndMd5sumPrefix::SharedCtor() {
  value_md5_prefix_ = GOOGLE_ULONGLONG(0);
}

PerfDataProto_StringMetadata_StringAndMd5sumPrefix::~PerfDataProto_StringMetadata_StringAndMd5sumPrefix() {
  // @@protoc_insertion_point(destructor:metrics.PerfDataProto.StringMetadata.StringAndMd5sumPrefix)
  SharedDtor();
}

void PerfDataProto_StringMetadata_StringAndMd5sumPrefix::SharedDtor() {
}

void PerfDataProto_StringMetadata_StringAndMd5sumPrefix::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PerfDataProto_StringMetadata_StringAndMd5sumPrefix& PerfDataProto_StringMetadata_StringAndMd5sumPrefix::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_perf_5fdata_2eproto::scc_info_PerfDataProto_StringMetadata_StringAndMd5sumPrefix.base);
  return *internal_default_instance();
}


void PerfDataProto_StringMetadata_StringAndMd5sumPrefix::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.PerfDataProto.StringMetadata.StringAndMd5sumPrefix)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_md5_prefix_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PerfDataProto_StringMetadata_StringAndMd5sumPrefix::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:metrics.PerfDataProto.StringMetadata.StringAndMd5sumPrefix)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 value_md5_prefix = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_value_md5_prefix();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &value_md5_prefix_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.PerfDataProto.StringMetadata.StringAndMd5sumPrefix)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.PerfDataProto.StringMetadata.StringAndMd5sumPrefix)
  return false;
#undef DO_
}

void PerfDataProto_StringMetadata_StringAndMd5sumPrefix::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.PerfDataProto.StringMetadata.StringAndMd5sumPrefix)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 value_md5_prefix = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->value_md5_prefix(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:metrics.PerfDataProto.StringMetadata.StringAndMd5sumPrefix)
}

size_t PerfDataProto_StringMetadata_StringAndMd5sumPrefix::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.PerfDataProto.StringMetadata.StringAndMd5sumPrefix)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // optional uint64 value_md5_prefix = 2;
  if (has_value_md5_prefix()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->value_md5_prefix());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PerfDataProto_StringMetadata_StringAndMd5sumPrefix::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PerfDataProto_StringMetadata_StringAndMd5sumPrefix*>(&from));
}

void PerfDataProto_StringMetadata_StringAndMd5sumPrefix::MergeFrom(const PerfDataProto_StringMetadata_StringAndMd5sumPrefix& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.PerfDataProto.StringMetadata.StringAndMd5sumPrefix)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_value_md5_prefix()) {
    set_value_md5_prefix(from.value_md5_prefix());
  }
}

void PerfDataProto_StringMetadata_StringAndMd5sumPrefix::CopyFrom(const PerfDataProto_StringMetadata_StringAndMd5sumPrefix& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.PerfDataProto.StringMetadata.StringAndMd5sumPrefix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerfDataProto_StringMetadata_StringAndMd5sumPrefix::IsInitialized() const {
  return true;
}

void PerfDataProto_StringMetadata_StringAndMd5sumPrefix::Swap(PerfDataProto_StringMetadata_StringAndMd5sumPrefix* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PerfDataProto_StringMetadata_StringAndMd5sumPrefix::InternalSwap(PerfDataProto_StringMetadata_StringAndMd5sumPrefix* other) {
  using std::swap;
  swap(value_md5_prefix_, other->value_md5_prefix_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string PerfDataProto_StringMetadata_StringAndMd5sumPrefix::GetTypeName() const {
  return "metrics.PerfDataProto.StringMetadata.StringAndMd5sumPrefix";
}


// ===================================================================

void PerfDataProto_StringMetadata::InitAsDefaultInstance() {
  ::metrics::_PerfDataProto_StringMetadata_default_instance_._instance.get_mutable()->perf_command_line_whole_ = const_cast< ::metrics::PerfDataProto_StringMetadata_StringAndMd5sumPrefix*>(
      ::metrics::PerfDataProto_StringMetadata_StringAndMd5sumPrefix::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PerfDataProto_StringMetadata::kPerfCommandLineWholeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PerfDataProto_StringMetadata::PerfDataProto_StringMetadata()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_perf_5fdata_2eproto::scc_info_PerfDataProto_StringMetadata.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.PerfDataProto.StringMetadata)
}
PerfDataProto_StringMetadata::PerfDataProto_StringMetadata(const PerfDataProto_StringMetadata& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_perf_command_line_whole()) {
    perf_command_line_whole_ = new ::metrics::PerfDataProto_StringMetadata_StringAndMd5sumPrefix(*from.perf_command_line_whole_);
  } else {
    perf_command_line_whole_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:metrics.PerfDataProto.StringMetadata)
}

void PerfDataProto_StringMetadata::SharedCtor() {
  perf_command_line_whole_ = NULL;
}

PerfDataProto_StringMetadata::~PerfDataProto_StringMetadata() {
  // @@protoc_insertion_point(destructor:metrics.PerfDataProto.StringMetadata)
  SharedDtor();
}

void PerfDataProto_StringMetadata::SharedDtor() {
  if (this != internal_default_instance()) delete perf_command_line_whole_;
}

void PerfDataProto_StringMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PerfDataProto_StringMetadata& PerfDataProto_StringMetadata::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_perf_5fdata_2eproto::scc_info_PerfDataProto_StringMetadata.base);
  return *internal_default_instance();
}


void PerfDataProto_StringMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.PerfDataProto.StringMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(perf_command_line_whole_ != NULL);
    perf_command_line_whole_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PerfDataProto_StringMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:metrics.PerfDataProto.StringMetadata)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .metrics.PerfDataProto.StringMetadata.StringAndMd5sumPrefix perf_command_line_whole = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_perf_command_line_whole()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.PerfDataProto.StringMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.PerfDataProto.StringMetadata)
  return false;
#undef DO_
}

void PerfDataProto_StringMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.PerfDataProto.StringMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .metrics.PerfDataProto.StringMetadata.StringAndMd5sumPrefix perf_command_line_whole = 8;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->_internal_perf_command_line_whole(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:metrics.PerfDataProto.StringMetadata)
}

size_t PerfDataProto_StringMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.PerfDataProto.StringMetadata)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // optional .metrics.PerfDataProto.StringMetadata.StringAndMd5sumPrefix perf_command_line_whole = 8;
  if (has_perf_command_line_whole()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *perf_command_line_whole_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PerfDataProto_StringMetadata::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PerfDataProto_StringMetadata*>(&from));
}

void PerfDataProto_StringMetadata::MergeFrom(const PerfDataProto_StringMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.PerfDataProto.StringMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_perf_command_line_whole()) {
    mutable_perf_command_line_whole()->::metrics::PerfDataProto_StringMetadata_StringAndMd5sumPrefix::MergeFrom(from.perf_command_line_whole());
  }
}

void PerfDataProto_StringMetadata::CopyFrom(const PerfDataProto_StringMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.PerfDataProto.StringMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerfDataProto_StringMetadata::IsInitialized() const {
  return true;
}

void PerfDataProto_StringMetadata::Swap(PerfDataProto_StringMetadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PerfDataProto_StringMetadata::InternalSwap(PerfDataProto_StringMetadata* other) {
  using std::swap;
  swap(perf_command_line_whole_, other->perf_command_line_whole_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string PerfDataProto_StringMetadata::GetTypeName() const {
  return "metrics.PerfDataProto.StringMetadata";
}


// ===================================================================

void PerfDataProto::InitAsDefaultInstance() {
  ::metrics::_PerfDataProto_default_instance_._instance.get_mutable()->stats_ = const_cast< ::metrics::PerfDataProto_PerfEventStats*>(
      ::metrics::PerfDataProto_PerfEventStats::internal_default_instance());
  ::metrics::_PerfDataProto_default_instance_._instance.get_mutable()->string_metadata_ = const_cast< ::metrics::PerfDataProto_StringMetadata*>(
      ::metrics::PerfDataProto_StringMetadata::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PerfDataProto::kFileAttrsFieldNumber;
const int PerfDataProto::kEventsFieldNumber;
const int PerfDataProto::kEventTypesFieldNumber;
const int PerfDataProto::kTimestampSecFieldNumber;
const int PerfDataProto::kStatsFieldNumber;
const int PerfDataProto::kBuildIdsFieldNumber;
const int PerfDataProto::kStringMetadataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PerfDataProto::PerfDataProto()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_perf_5fdata_2eproto::scc_info_PerfDataProto.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.PerfDataProto)
}
PerfDataProto::PerfDataProto(const PerfDataProto& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      file_attrs_(from.file_attrs_),
      events_(from.events_),
      build_ids_(from.build_ids_),
      event_types_(from.event_types_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_stats()) {
    stats_ = new ::metrics::PerfDataProto_PerfEventStats(*from.stats_);
  } else {
    stats_ = NULL;
  }
  if (from.has_string_metadata()) {
    string_metadata_ = new ::metrics::PerfDataProto_StringMetadata(*from.string_metadata_);
  } else {
    string_metadata_ = NULL;
  }
  timestamp_sec_ = from.timestamp_sec_;
  // @@protoc_insertion_point(copy_constructor:metrics.PerfDataProto)
}

void PerfDataProto::SharedCtor() {
  ::memset(&stats_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_sec_) -
      reinterpret_cast<char*>(&stats_)) + sizeof(timestamp_sec_));
}

PerfDataProto::~PerfDataProto() {
  // @@protoc_insertion_point(destructor:metrics.PerfDataProto)
  SharedDtor();
}

void PerfDataProto::SharedDtor() {
  if (this != internal_default_instance()) delete stats_;
  if (this != internal_default_instance()) delete string_metadata_;
}

void PerfDataProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PerfDataProto& PerfDataProto::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_perf_5fdata_2eproto::scc_info_PerfDataProto.base);
  return *internal_default_instance();
}


void PerfDataProto::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.PerfDataProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_attrs_.Clear();
  events_.Clear();
  build_ids_.Clear();
  event_types_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(stats_ != NULL);
      stats_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(string_metadata_ != NULL);
      string_metadata_->Clear();
    }
  }
  timestamp_sec_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PerfDataProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:metrics.PerfDataProto)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .metrics.PerfDataProto.PerfFileAttr file_attrs = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_file_attrs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .metrics.PerfDataProto.PerfEvent events = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_events()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 timestamp_sec = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_timestamp_sec();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .metrics.PerfDataProto.PerfEventStats stats = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .metrics.PerfDataProto.PerfBuildID build_ids = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_build_ids()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .metrics.PerfDataProto.PerfEventType event_types = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_event_types()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .metrics.PerfDataProto.StringMetadata string_metadata = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_string_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.PerfDataProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.PerfDataProto)
  return false;
#undef DO_
}

void PerfDataProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.PerfDataProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .metrics.PerfDataProto.PerfFileAttr file_attrs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->file_attrs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1,
      this->file_attrs(static_cast<int>(i)),
      output);
  }

  // repeated .metrics.PerfDataProto.PerfEvent events = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->events_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2,
      this->events(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint64 timestamp_sec = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->timestamp_sec(), output);
  }

  // optional .metrics.PerfDataProto.PerfEventStats stats = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->_internal_stats(), output);
  }

  // repeated .metrics.PerfDataProto.PerfBuildID build_ids = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->build_ids_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7,
      this->build_ids(static_cast<int>(i)),
      output);
  }

  // repeated .metrics.PerfDataProto.PerfEventType event_types = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->event_types_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10,
      this->event_types(static_cast<int>(i)),
      output);
  }

  // optional .metrics.PerfDataProto.StringMetadata string_metadata = 13;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      13, this->_internal_string_metadata(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:metrics.PerfDataProto)
}

size_t PerfDataProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.PerfDataProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // repeated .metrics.PerfDataProto.PerfFileAttr file_attrs = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->file_attrs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->file_attrs(static_cast<int>(i)));
    }
  }

  // repeated .metrics.PerfDataProto.PerfEvent events = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->events_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->events(static_cast<int>(i)));
    }
  }

  // repeated .metrics.PerfDataProto.PerfBuildID build_ids = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->build_ids_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->build_ids(static_cast<int>(i)));
    }
  }

  // repeated .metrics.PerfDataProto.PerfEventType event_types = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->event_types_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->event_types(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional .metrics.PerfDataProto.PerfEventStats stats = 4;
    if (has_stats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *stats_);
    }

    // optional .metrics.PerfDataProto.StringMetadata string_metadata = 13;
    if (has_string_metadata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *string_metadata_);
    }

    // optional uint64 timestamp_sec = 3;
    if (has_timestamp_sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp_sec());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PerfDataProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PerfDataProto*>(&from));
}

void PerfDataProto::MergeFrom(const PerfDataProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.PerfDataProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  file_attrs_.MergeFrom(from.file_attrs_);
  events_.MergeFrom(from.events_);
  build_ids_.MergeFrom(from.build_ids_);
  event_types_.MergeFrom(from.event_types_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_stats()->::metrics::PerfDataProto_PerfEventStats::MergeFrom(from.stats());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_string_metadata()->::metrics::PerfDataProto_StringMetadata::MergeFrom(from.string_metadata());
    }
    if (cached_has_bits & 0x00000004u) {
      timestamp_sec_ = from.timestamp_sec_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PerfDataProto::CopyFrom(const PerfDataProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.PerfDataProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerfDataProto::IsInitialized() const {
  return true;
}

void PerfDataProto::Swap(PerfDataProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PerfDataProto::InternalSwap(PerfDataProto* other) {
  using std::swap;
  CastToBase(&file_attrs_)->InternalSwap(CastToBase(&other->file_attrs_));
  CastToBase(&events_)->InternalSwap(CastToBase(&other->events_));
  CastToBase(&build_ids_)->InternalSwap(CastToBase(&other->build_ids_));
  CastToBase(&event_types_)->InternalSwap(CastToBase(&other->event_types_));
  swap(stats_, other->stats_);
  swap(string_metadata_, other->string_metadata_);
  swap(timestamp_sec_, other->timestamp_sec_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string PerfDataProto::GetTypeName() const {
  return "metrics.PerfDataProto";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace metrics
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metrics::PerfDataProto_PerfEventAttr* Arena::CreateMaybeMessage< ::metrics::PerfDataProto_PerfEventAttr >(Arena* arena) {
  return Arena::CreateInternal< ::metrics::PerfDataProto_PerfEventAttr >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metrics::PerfDataProto_PerfFileAttr* Arena::CreateMaybeMessage< ::metrics::PerfDataProto_PerfFileAttr >(Arena* arena) {
  return Arena::CreateInternal< ::metrics::PerfDataProto_PerfFileAttr >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metrics::PerfDataProto_PerfEventType* Arena::CreateMaybeMessage< ::metrics::PerfDataProto_PerfEventType >(Arena* arena) {
  return Arena::CreateInternal< ::metrics::PerfDataProto_PerfEventType >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metrics::PerfDataProto_SampleInfo* Arena::CreateMaybeMessage< ::metrics::PerfDataProto_SampleInfo >(Arena* arena) {
  return Arena::CreateInternal< ::metrics::PerfDataProto_SampleInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metrics::PerfDataProto_CommEvent* Arena::CreateMaybeMessage< ::metrics::PerfDataProto_CommEvent >(Arena* arena) {
  return Arena::CreateInternal< ::metrics::PerfDataProto_CommEvent >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metrics::PerfDataProto_MMapEvent* Arena::CreateMaybeMessage< ::metrics::PerfDataProto_MMapEvent >(Arena* arena) {
  return Arena::CreateInternal< ::metrics::PerfDataProto_MMapEvent >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metrics::PerfDataProto_BranchStackEntry* Arena::CreateMaybeMessage< ::metrics::PerfDataProto_BranchStackEntry >(Arena* arena) {
  return Arena::CreateInternal< ::metrics::PerfDataProto_BranchStackEntry >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metrics::PerfDataProto_SampleEvent* Arena::CreateMaybeMessage< ::metrics::PerfDataProto_SampleEvent >(Arena* arena) {
  return Arena::CreateInternal< ::metrics::PerfDataProto_SampleEvent >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metrics::PerfDataProto_ForkEvent* Arena::CreateMaybeMessage< ::metrics::PerfDataProto_ForkEvent >(Arena* arena) {
  return Arena::CreateInternal< ::metrics::PerfDataProto_ForkEvent >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metrics::PerfDataProto_EventHeader* Arena::CreateMaybeMessage< ::metrics::PerfDataProto_EventHeader >(Arena* arena) {
  return Arena::CreateInternal< ::metrics::PerfDataProto_EventHeader >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metrics::PerfDataProto_PerfEvent* Arena::CreateMaybeMessage< ::metrics::PerfDataProto_PerfEvent >(Arena* arena) {
  return Arena::CreateInternal< ::metrics::PerfDataProto_PerfEvent >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metrics::PerfDataProto_PerfEventStats* Arena::CreateMaybeMessage< ::metrics::PerfDataProto_PerfEventStats >(Arena* arena) {
  return Arena::CreateInternal< ::metrics::PerfDataProto_PerfEventStats >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metrics::PerfDataProto_PerfBuildID* Arena::CreateMaybeMessage< ::metrics::PerfDataProto_PerfBuildID >(Arena* arena) {
  return Arena::CreateInternal< ::metrics::PerfDataProto_PerfBuildID >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metrics::PerfDataProto_StringMetadata_StringAndMd5sumPrefix* Arena::CreateMaybeMessage< ::metrics::PerfDataProto_StringMetadata_StringAndMd5sumPrefix >(Arena* arena) {
  return Arena::CreateInternal< ::metrics::PerfDataProto_StringMetadata_StringAndMd5sumPrefix >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metrics::PerfDataProto_StringMetadata* Arena::CreateMaybeMessage< ::metrics::PerfDataProto_StringMetadata >(Arena* arena) {
  return Arena::CreateInternal< ::metrics::PerfDataProto_StringMetadata >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::metrics::PerfDataProto* Arena::CreateMaybeMessage< ::metrics::PerfDataProto >(Arena* arena) {
  return Arena::CreateInternal< ::metrics::PerfDataProto >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
