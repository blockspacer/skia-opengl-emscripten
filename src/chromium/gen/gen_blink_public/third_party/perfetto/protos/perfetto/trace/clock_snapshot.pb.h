// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: perfetto/trace/clock_snapshot.proto

#ifndef PROTOBUF_INCLUDED_perfetto_2ftrace_2fclock_5fsnapshot_2eproto
#define PROTOBUF_INCLUDED_perfetto_2ftrace_2fclock_5fsnapshot_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_perfetto_2ftrace_2fclock_5fsnapshot_2eproto 

namespace protobuf_perfetto_2ftrace_2fclock_5fsnapshot_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
}  // namespace protobuf_perfetto_2ftrace_2fclock_5fsnapshot_2eproto
namespace perfetto {
namespace protos {
class ClockSnapshot;
class ClockSnapshotDefaultTypeInternal;
extern ClockSnapshotDefaultTypeInternal _ClockSnapshot_default_instance_;
class ClockSnapshot_Clock;
class ClockSnapshot_ClockDefaultTypeInternal;
extern ClockSnapshot_ClockDefaultTypeInternal _ClockSnapshot_Clock_default_instance_;
}  // namespace protos
}  // namespace perfetto
namespace google {
namespace protobuf {
template<> ::perfetto::protos::ClockSnapshot* Arena::CreateMaybeMessage<::perfetto::protos::ClockSnapshot>(Arena*);
template<> ::perfetto::protos::ClockSnapshot_Clock* Arena::CreateMaybeMessage<::perfetto::protos::ClockSnapshot_Clock>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace perfetto {
namespace protos {

enum ClockSnapshot_Clock_Type {
  ClockSnapshot_Clock_Type_UNKNOWN = 0,
  ClockSnapshot_Clock_Type_REALTIME = 1,
  ClockSnapshot_Clock_Type_REALTIME_COARSE = 2,
  ClockSnapshot_Clock_Type_MONOTONIC = 3,
  ClockSnapshot_Clock_Type_MONOTONIC_COARSE = 4,
  ClockSnapshot_Clock_Type_MONOTONIC_RAW = 5,
  ClockSnapshot_Clock_Type_BOOTTIME = 6,
  ClockSnapshot_Clock_Type_PROCESS_CPUTIME = 7,
  ClockSnapshot_Clock_Type_THREAD_CPUTIME = 8
};
bool ClockSnapshot_Clock_Type_IsValid(int value);
const ClockSnapshot_Clock_Type ClockSnapshot_Clock_Type_Type_MIN = ClockSnapshot_Clock_Type_UNKNOWN;
const ClockSnapshot_Clock_Type ClockSnapshot_Clock_Type_Type_MAX = ClockSnapshot_Clock_Type_THREAD_CPUTIME;
const int ClockSnapshot_Clock_Type_Type_ARRAYSIZE = ClockSnapshot_Clock_Type_Type_MAX + 1;

// ===================================================================

class ClockSnapshot_Clock : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.ClockSnapshot.Clock) */ {
 public:
  ClockSnapshot_Clock();
  virtual ~ClockSnapshot_Clock();

  ClockSnapshot_Clock(const ClockSnapshot_Clock& from);

  inline ClockSnapshot_Clock& operator=(const ClockSnapshot_Clock& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ClockSnapshot_Clock(ClockSnapshot_Clock&& from) noexcept
    : ClockSnapshot_Clock() {
    *this = ::std::move(from);
  }

  inline ClockSnapshot_Clock& operator=(ClockSnapshot_Clock&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ClockSnapshot_Clock& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClockSnapshot_Clock* internal_default_instance() {
    return reinterpret_cast<const ClockSnapshot_Clock*>(
               &_ClockSnapshot_Clock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(ClockSnapshot_Clock* other);
  friend void swap(ClockSnapshot_Clock& a, ClockSnapshot_Clock& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClockSnapshot_Clock* New() const final {
    return CreateMaybeMessage<ClockSnapshot_Clock>(NULL);
  }

  ClockSnapshot_Clock* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ClockSnapshot_Clock>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const ClockSnapshot_Clock& from);
  void MergeFrom(const ClockSnapshot_Clock& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClockSnapshot_Clock* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ClockSnapshot_Clock_Type Type;
  static const Type UNKNOWN =
    ClockSnapshot_Clock_Type_UNKNOWN;
  static const Type REALTIME =
    ClockSnapshot_Clock_Type_REALTIME;
  static const Type REALTIME_COARSE =
    ClockSnapshot_Clock_Type_REALTIME_COARSE;
  static const Type MONOTONIC =
    ClockSnapshot_Clock_Type_MONOTONIC;
  static const Type MONOTONIC_COARSE =
    ClockSnapshot_Clock_Type_MONOTONIC_COARSE;
  static const Type MONOTONIC_RAW =
    ClockSnapshot_Clock_Type_MONOTONIC_RAW;
  static const Type BOOTTIME =
    ClockSnapshot_Clock_Type_BOOTTIME;
  static const Type PROCESS_CPUTIME =
    ClockSnapshot_Clock_Type_PROCESS_CPUTIME;
  static const Type THREAD_CPUTIME =
    ClockSnapshot_Clock_Type_THREAD_CPUTIME;
  static inline bool Type_IsValid(int value) {
    return ClockSnapshot_Clock_Type_IsValid(value);
  }
  static const Type Type_MIN =
    ClockSnapshot_Clock_Type_Type_MIN;
  static const Type Type_MAX =
    ClockSnapshot_Clock_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    ClockSnapshot_Clock_Type_Type_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // optional uint64 timestamp = 2;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  ::google::protobuf::uint64 timestamp() const;
  void set_timestamp(::google::protobuf::uint64 value);

  // optional .perfetto.protos.ClockSnapshot.Clock.Type type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::perfetto::protos::ClockSnapshot_Clock_Type type() const;
  void set_type(::perfetto::protos::ClockSnapshot_Clock_Type value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.ClockSnapshot.Clock)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_timestamp();
  void clear_has_timestamp();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 timestamp_;
  int type_;
  friend struct ::protobuf_perfetto_2ftrace_2fclock_5fsnapshot_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ClockSnapshot : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.ClockSnapshot) */ {
 public:
  ClockSnapshot();
  virtual ~ClockSnapshot();

  ClockSnapshot(const ClockSnapshot& from);

  inline ClockSnapshot& operator=(const ClockSnapshot& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ClockSnapshot(ClockSnapshot&& from) noexcept
    : ClockSnapshot() {
    *this = ::std::move(from);
  }

  inline ClockSnapshot& operator=(ClockSnapshot&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ClockSnapshot& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClockSnapshot* internal_default_instance() {
    return reinterpret_cast<const ClockSnapshot*>(
               &_ClockSnapshot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(ClockSnapshot* other);
  friend void swap(ClockSnapshot& a, ClockSnapshot& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClockSnapshot* New() const final {
    return CreateMaybeMessage<ClockSnapshot>(NULL);
  }

  ClockSnapshot* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ClockSnapshot>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const ClockSnapshot& from);
  void MergeFrom(const ClockSnapshot& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClockSnapshot* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ClockSnapshot_Clock Clock;

  // accessors -------------------------------------------------------

  // repeated .perfetto.protos.ClockSnapshot.Clock clocks = 1;
  int clocks_size() const;
  void clear_clocks();
  static const int kClocksFieldNumber = 1;
  ::perfetto::protos::ClockSnapshot_Clock* mutable_clocks(int index);
  ::google::protobuf::RepeatedPtrField< ::perfetto::protos::ClockSnapshot_Clock >*
      mutable_clocks();
  const ::perfetto::protos::ClockSnapshot_Clock& clocks(int index) const;
  ::perfetto::protos::ClockSnapshot_Clock* add_clocks();
  const ::google::protobuf::RepeatedPtrField< ::perfetto::protos::ClockSnapshot_Clock >&
      clocks() const;

  // @@protoc_insertion_point(class_scope:perfetto.protos.ClockSnapshot)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::perfetto::protos::ClockSnapshot_Clock > clocks_;
  friend struct ::protobuf_perfetto_2ftrace_2fclock_5fsnapshot_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ClockSnapshot_Clock

// optional .perfetto.protos.ClockSnapshot.Clock.Type type = 1;
inline bool ClockSnapshot_Clock::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClockSnapshot_Clock::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClockSnapshot_Clock::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClockSnapshot_Clock::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::perfetto::protos::ClockSnapshot_Clock_Type ClockSnapshot_Clock::type() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ClockSnapshot.Clock.type)
  return static_cast< ::perfetto::protos::ClockSnapshot_Clock_Type >(type_);
}
inline void ClockSnapshot_Clock::set_type(::perfetto::protos::ClockSnapshot_Clock_Type value) {
  assert(::perfetto::protos::ClockSnapshot_Clock_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ClockSnapshot.Clock.type)
}

// optional uint64 timestamp = 2;
inline bool ClockSnapshot_Clock::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClockSnapshot_Clock::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClockSnapshot_Clock::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClockSnapshot_Clock::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::uint64 ClockSnapshot_Clock::timestamp() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ClockSnapshot.Clock.timestamp)
  return timestamp_;
}
inline void ClockSnapshot_Clock::set_timestamp(::google::protobuf::uint64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ClockSnapshot.Clock.timestamp)
}

// -------------------------------------------------------------------

// ClockSnapshot

// repeated .perfetto.protos.ClockSnapshot.Clock clocks = 1;
inline int ClockSnapshot::clocks_size() const {
  return clocks_.size();
}
inline void ClockSnapshot::clear_clocks() {
  clocks_.Clear();
}
inline ::perfetto::protos::ClockSnapshot_Clock* ClockSnapshot::mutable_clocks(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ClockSnapshot.clocks)
  return clocks_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::perfetto::protos::ClockSnapshot_Clock >*
ClockSnapshot::mutable_clocks() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.ClockSnapshot.clocks)
  return &clocks_;
}
inline const ::perfetto::protos::ClockSnapshot_Clock& ClockSnapshot::clocks(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ClockSnapshot.clocks)
  return clocks_.Get(index);
}
inline ::perfetto::protos::ClockSnapshot_Clock* ClockSnapshot::add_clocks() {
  // @@protoc_insertion_point(field_add:perfetto.protos.ClockSnapshot.clocks)
  return clocks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::perfetto::protos::ClockSnapshot_Clock >&
ClockSnapshot::clocks() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.ClockSnapshot.clocks)
  return clocks_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::perfetto::protos::ClockSnapshot_Clock_Type> : ::std::true_type {};

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_perfetto_2ftrace_2fclock_5fsnapshot_2eproto
