// Autogenerated by the ProtoZero compiler plugin. DO NOT EDIT.

#ifndef PERFETTO_PROTOS_PERFETTO_TRACE_FTRACE_FTRACE_EVENT_BUNDLE_PROTO_H_
#define PERFETTO_PROTOS_PERFETTO_TRACE_FTRACE_FTRACE_EVENT_BUNDLE_PROTO_H_

#include <stddef.h>
#include <stdint.h>

#include "perfetto/base/export.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/message.h"

namespace perfetto {
namespace protos {
namespace pbzero {

class FtraceEvent;

class PERFETTO_EXPORT FtraceEventBundle : public ::protozero::Message {
 public:
  enum : int32_t {
    kCpuFieldNumber = 1,
    kEventFieldNumber = 2,
    kOverwriteCountFieldNumber = 3,
  };
  class Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/3, /*HAS_REPEATED_FIELDS=*/true> {
   public:
    Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
    bool has_cpu() const { return at<1>().valid(); }
    uint32_t cpu() const { return at<1>().as_uint32(); }
    bool has_event() const { return at<2>().valid(); }
    ::protozero::RepeatedFieldIterator event() const { return GetRepeated(2); }
    bool has_overwrite_count() const { return at<3>().valid(); }
    uint32_t overwrite_count() const { return at<3>().as_uint32(); }
  };
  void set_cpu(uint32_t value) {
    AppendVarInt(1, value);
  }
  template <typename T = FtraceEvent> T* add_event() {
    return BeginNestedMessage<T>(2);
  }

  void set_overwrite_count(uint32_t value) {
    AppendVarInt(3, value);
  }
};

} // Namespace.
} // Namespace.
} // Namespace.
#endif  // Include guard.
