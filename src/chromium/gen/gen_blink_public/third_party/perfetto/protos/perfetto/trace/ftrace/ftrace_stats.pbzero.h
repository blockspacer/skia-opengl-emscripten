// Autogenerated by the ProtoZero compiler plugin. DO NOT EDIT.

#ifndef PERFETTO_PROTOS_PERFETTO_TRACE_FTRACE_FTRACE_STATS_PROTO_H_
#define PERFETTO_PROTOS_PERFETTO_TRACE_FTRACE_FTRACE_STATS_PROTO_H_

#include <stddef.h>
#include <stdint.h>

#include "perfetto/base/export.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/message.h"

namespace perfetto {
namespace protos {
namespace pbzero {

class FtraceCpuStats;
enum FtraceStats_Phase : int32_t;

enum FtraceStats_Phase : int32_t {
  FtraceStats_Phase_UNSPECIFIED = 0,
  FtraceStats_Phase_START_OF_TRACE = 1,
  FtraceStats_Phase_END_OF_TRACE = 2,
};

class PERFETTO_EXPORT FtraceStats : public ::protozero::Message {
 public:
  enum : int32_t {
    kPhaseFieldNumber = 1,
    kCpuStatsFieldNumber = 2,
  };
  class Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/2, /*HAS_REPEATED_FIELDS=*/true> {
   public:
    Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
    bool has_phase() const { return at<1>().valid(); }
    int32_t phase() const { return at<1>().as_int32(); }
    bool has_cpu_stats() const { return at<2>().valid(); }
    ::protozero::RepeatedFieldIterator cpu_stats() const { return GetRepeated(2); }
  };
  using Phase = ::perfetto::protos::pbzero::FtraceStats_Phase;
  static const Phase UNSPECIFIED = FtraceStats_Phase_UNSPECIFIED;
  static const Phase START_OF_TRACE = FtraceStats_Phase_START_OF_TRACE;
  static const Phase END_OF_TRACE = FtraceStats_Phase_END_OF_TRACE;
  void set_phase(::perfetto::protos::pbzero::FtraceStats_Phase value) {
    AppendTinyVarInt(1, value);
  }
  template <typename T = FtraceCpuStats> T* add_cpu_stats() {
    return BeginNestedMessage<T>(2);
  }

};

class PERFETTO_EXPORT FtraceCpuStats : public ::protozero::Message {
 public:
  enum : int32_t {
    kCpuFieldNumber = 1,
    kEntriesFieldNumber = 2,
    kOverrunFieldNumber = 3,
    kCommitOverrunFieldNumber = 4,
    kBytesReadFieldNumber = 5,
    kOldestEventTsFieldNumber = 6,
    kNowTsFieldNumber = 7,
    kDroppedEventsFieldNumber = 8,
    kReadEventsFieldNumber = 9,
  };
  class Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/9, /*HAS_REPEATED_FIELDS=*/false> {
   public:
    Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
    bool has_cpu() const { return at<1>().valid(); }
    uint64_t cpu() const { return at<1>().as_uint64(); }
    bool has_entries() const { return at<2>().valid(); }
    uint64_t entries() const { return at<2>().as_uint64(); }
    bool has_overrun() const { return at<3>().valid(); }
    uint64_t overrun() const { return at<3>().as_uint64(); }
    bool has_commit_overrun() const { return at<4>().valid(); }
    uint64_t commit_overrun() const { return at<4>().as_uint64(); }
    bool has_bytes_read() const { return at<5>().valid(); }
    uint64_t bytes_read() const { return at<5>().as_uint64(); }
    bool has_oldest_event_ts() const { return at<6>().valid(); }
    double oldest_event_ts() const { return at<6>().as_double(); }
    bool has_now_ts() const { return at<7>().valid(); }
    double now_ts() const { return at<7>().as_double(); }
    bool has_dropped_events() const { return at<8>().valid(); }
    uint64_t dropped_events() const { return at<8>().as_uint64(); }
    bool has_read_events() const { return at<9>().valid(); }
    uint64_t read_events() const { return at<9>().as_uint64(); }
  };
  void set_cpu(uint64_t value) {
    AppendVarInt(1, value);
  }
  void set_entries(uint64_t value) {
    AppendVarInt(2, value);
  }
  void set_overrun(uint64_t value) {
    AppendVarInt(3, value);
  }
  void set_commit_overrun(uint64_t value) {
    AppendVarInt(4, value);
  }
  void set_bytes_read(uint64_t value) {
    AppendVarInt(5, value);
  }
  void set_oldest_event_ts(double value) {
    AppendFixed(6, value);
  }
  void set_now_ts(double value) {
    AppendFixed(7, value);
  }
  void set_dropped_events(uint64_t value) {
    AppendVarInt(8, value);
  }
  void set_read_events(uint64_t value) {
    AppendVarInt(9, value);
  }
};

} // Namespace.
} // Namespace.
} // Namespace.
#endif  // Include guard.
