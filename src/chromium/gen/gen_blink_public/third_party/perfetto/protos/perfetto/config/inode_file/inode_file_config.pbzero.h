// Autogenerated by the ProtoZero compiler plugin. DO NOT EDIT.

#ifndef PERFETTO_PROTOS_PERFETTO_CONFIG_INODE_FILE_INODE_FILE_CONFIG_PROTO_H_
#define PERFETTO_PROTOS_PERFETTO_CONFIG_INODE_FILE_INODE_FILE_CONFIG_PROTO_H_

#include <stddef.h>
#include <stdint.h>

#include "perfetto/base/export.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/message.h"

namespace perfetto {
namespace protos {
namespace pbzero {

class InodeFileConfig_MountPointMappingEntry;

class PERFETTO_EXPORT InodeFileConfig : public ::protozero::Message {
 public:
  enum : int32_t {
    kScanIntervalMsFieldNumber = 1,
    kScanDelayMsFieldNumber = 2,
    kScanBatchSizeFieldNumber = 3,
    kDoNotScanFieldNumber = 4,
    kScanMountPointsFieldNumber = 5,
    kMountPointMappingFieldNumber = 6,
  };
  class Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/6, /*HAS_REPEATED_FIELDS=*/true> {
   public:
    Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
    bool has_scan_interval_ms() const { return at<1>().valid(); }
    uint32_t scan_interval_ms() const { return at<1>().as_uint32(); }
    bool has_scan_delay_ms() const { return at<2>().valid(); }
    uint32_t scan_delay_ms() const { return at<2>().as_uint32(); }
    bool has_scan_batch_size() const { return at<3>().valid(); }
    uint32_t scan_batch_size() const { return at<3>().as_uint32(); }
    bool has_do_not_scan() const { return at<4>().valid(); }
    bool do_not_scan() const { return at<4>().as_bool(); }
    bool has_scan_mount_points() const { return at<5>().valid(); }
    ::protozero::RepeatedFieldIterator scan_mount_points() const { return GetRepeated(5); }
    bool has_mount_point_mapping() const { return at<6>().valid(); }
    ::protozero::RepeatedFieldIterator mount_point_mapping() const { return GetRepeated(6); }
  };
  using MountPointMappingEntry = ::perfetto::protos::pbzero::InodeFileConfig_MountPointMappingEntry;
  void set_scan_interval_ms(uint32_t value) {
    AppendVarInt(1, value);
  }
  void set_scan_delay_ms(uint32_t value) {
    AppendVarInt(2, value);
  }
  void set_scan_batch_size(uint32_t value) {
    AppendVarInt(3, value);
  }
  void set_do_not_scan(bool value) {
    AppendTinyVarInt(4, value);
  }
  void add_scan_mount_points(const char* value) {
    AppendString(5, value);
  }
  // Doesn't check for null terminator.
  // Expects |value| to be at least |size| long.
  void add_scan_mount_points(const char* value, size_t size) {
    AppendBytes(5, value, size);
  }
  template <typename T = InodeFileConfig_MountPointMappingEntry> T* add_mount_point_mapping() {
    return BeginNestedMessage<T>(6);
  }

};

class PERFETTO_EXPORT InodeFileConfig_MountPointMappingEntry : public ::protozero::Message {
 public:
  enum : int32_t {
    kMountpointFieldNumber = 1,
    kScanRootsFieldNumber = 2,
  };
  class Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/2, /*HAS_REPEATED_FIELDS=*/true> {
   public:
    Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
    bool has_mountpoint() const { return at<1>().valid(); }
    ::protozero::ConstChars mountpoint() const { return at<1>().as_string(); }
    bool has_scan_roots() const { return at<2>().valid(); }
    ::protozero::RepeatedFieldIterator scan_roots() const { return GetRepeated(2); }
  };
  void set_mountpoint(const char* value) {
    AppendString(1, value);
  }
  // Doesn't check for null terminator.
  // Expects |value| to be at least |size| long.
  void set_mountpoint(const char* value, size_t size) {
    AppendBytes(1, value, size);
  }
  void add_scan_roots(const char* value) {
    AppendString(2, value);
  }
  // Doesn't check for null terminator.
  // Expects |value| to be at least |size| long.
  void add_scan_roots(const char* value, size_t size) {
    AppendBytes(2, value, size);
  }
};

} // Namespace.
} // Namespace.
} // Namespace.
#endif  // Include guard.
