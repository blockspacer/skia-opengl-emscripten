// Autogenerated by the ProtoZero compiler plugin. DO NOT EDIT.

#ifndef PERFETTO_PROTOS_PERFETTO_TRACE_INTERNED_DATA_INTERNED_DATA_PROTO_H_
#define PERFETTO_PROTOS_PERFETTO_TRACE_INTERNED_DATA_INTERNED_DATA_PROTO_H_

#include <stddef.h>
#include <stdint.h>

#include "perfetto/base/export.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/message.h"

namespace perfetto {
namespace protos {
namespace pbzero {

class DebugAnnotationName;
class EventCategory;
class LegacyEventName;
class SourceLocation;

class PERFETTO_EXPORT InternedData : public ::protozero::Message {
 public:
  enum : int32_t {
    kEventCategoriesFieldNumber = 1,
    kLegacyEventNamesFieldNumber = 2,
    kDebugAnnotationNamesFieldNumber = 3,
    kSourceLocationsFieldNumber = 4,
  };
  class Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/4, /*HAS_REPEATED_FIELDS=*/true> {
   public:
    Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
    bool has_event_categories() const { return at<1>().valid(); }
    ::protozero::RepeatedFieldIterator event_categories() const { return GetRepeated(1); }
    bool has_legacy_event_names() const { return at<2>().valid(); }
    ::protozero::RepeatedFieldIterator legacy_event_names() const { return GetRepeated(2); }
    bool has_debug_annotation_names() const { return at<3>().valid(); }
    ::protozero::RepeatedFieldIterator debug_annotation_names() const { return GetRepeated(3); }
    bool has_source_locations() const { return at<4>().valid(); }
    ::protozero::RepeatedFieldIterator source_locations() const { return GetRepeated(4); }
  };
  template <typename T = EventCategory> T* add_event_categories() {
    return BeginNestedMessage<T>(1);
  }

  template <typename T = LegacyEventName> T* add_legacy_event_names() {
    return BeginNestedMessage<T>(2);
  }

  template <typename T = DebugAnnotationName> T* add_debug_annotation_names() {
    return BeginNestedMessage<T>(3);
  }

  template <typename T = SourceLocation> T* add_source_locations() {
    return BeginNestedMessage<T>(4);
  }

};

} // Namespace.
} // Namespace.
} // Namespace.
#endif  // Include guard.
