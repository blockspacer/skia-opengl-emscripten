// Autogenerated by the ProtoZero compiler plugin. DO NOT EDIT.

#ifndef PERFETTO_PROTOS_PERFETTO_TRACE_TRACE_PACKET_PROTO_H_
#define PERFETTO_PROTOS_PERFETTO_TRACE_TRACE_PACKET_PROTO_H_

#include <stddef.h>
#include <stdint.h>

#include "perfetto/base/export.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/message.h"

namespace perfetto {
namespace protos {
namespace pbzero {

class AndroidLogPacket;
class BatteryCounters;
class ChromeEventBundle;
class ClockSnapshot;
class FtraceEventBundle;
class FtraceStats;
class InodeFileMap;
class InternedData;
class PackagesList;
class PowerRails;
class ProcessDescriptor;
class ProcessStats;
class ProcessTree;
class ProfilePacket;
class SysStats;
class SystemInfo;
class TestEvent;
class ThreadDescriptor;
class TraceConfig;
class TraceStats;
class TrackEvent;
class Trigger;

class PERFETTO_EXPORT TracePacket : public ::protozero::Message {
 public:
  enum : int32_t {
    kTimestampFieldNumber = 8,
    kFtraceEventsFieldNumber = 1,
    kProcessTreeFieldNumber = 2,
    kProcessStatsFieldNumber = 9,
    kInodeFileMapFieldNumber = 4,
    kChromeEventsFieldNumber = 5,
    kClockSnapshotFieldNumber = 6,
    kSysStatsFieldNumber = 7,
    kTrackEventFieldNumber = 11,
    kTraceConfigFieldNumber = 33,
    kFtraceStatsFieldNumber = 34,
    kTraceStatsFieldNumber = 35,
    kProfilePacketFieldNumber = 37,
    kBatteryFieldNumber = 38,
    kPowerRailsFieldNumber = 40,
    kAndroidLogFieldNumber = 39,
    kSystemInfoFieldNumber = 45,
    kTriggerFieldNumber = 46,
    kPackagesListFieldNumber = 47,
    kProcessDescriptorFieldNumber = 43,
    kThreadDescriptorFieldNumber = 44,
    kSynchronizationMarkerFieldNumber = 36,
    kForTestingFieldNumber = 268435455,
    kTrustedUidFieldNumber = 3,
    kTrustedPacketSequenceIdFieldNumber = 10,
    kInternedDataFieldNumber = 12,
    kIncrementalStateClearedFieldNumber = 41,
    kPreviousPacketDroppedFieldNumber = 42,
  };
  class Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/47, /*HAS_REPEATED_FIELDS=*/false> {
   public:
    Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
    bool has_timestamp() const { return at<8>().valid(); }
    uint64_t timestamp() const { return at<8>().as_uint64(); }
    bool has_ftrace_events() const { return at<1>().valid(); }
    ::protozero::ConstBytes ftrace_events() const { return at<1>().as_bytes(); }
    bool has_process_tree() const { return at<2>().valid(); }
    ::protozero::ConstBytes process_tree() const { return at<2>().as_bytes(); }
    bool has_process_stats() const { return at<9>().valid(); }
    ::protozero::ConstBytes process_stats() const { return at<9>().as_bytes(); }
    bool has_inode_file_map() const { return at<4>().valid(); }
    ::protozero::ConstBytes inode_file_map() const { return at<4>().as_bytes(); }
    bool has_chrome_events() const { return at<5>().valid(); }
    ::protozero::ConstBytes chrome_events() const { return at<5>().as_bytes(); }
    bool has_clock_snapshot() const { return at<6>().valid(); }
    ::protozero::ConstBytes clock_snapshot() const { return at<6>().as_bytes(); }
    bool has_sys_stats() const { return at<7>().valid(); }
    ::protozero::ConstBytes sys_stats() const { return at<7>().as_bytes(); }
    bool has_track_event() const { return at<11>().valid(); }
    ::protozero::ConstBytes track_event() const { return at<11>().as_bytes(); }
    bool has_trace_config() const { return at<33>().valid(); }
    ::protozero::ConstBytes trace_config() const { return at<33>().as_bytes(); }
    bool has_ftrace_stats() const { return at<34>().valid(); }
    ::protozero::ConstBytes ftrace_stats() const { return at<34>().as_bytes(); }
    bool has_trace_stats() const { return at<35>().valid(); }
    ::protozero::ConstBytes trace_stats() const { return at<35>().as_bytes(); }
    bool has_profile_packet() const { return at<37>().valid(); }
    ::protozero::ConstBytes profile_packet() const { return at<37>().as_bytes(); }
    bool has_battery() const { return at<38>().valid(); }
    ::protozero::ConstBytes battery() const { return at<38>().as_bytes(); }
    bool has_power_rails() const { return at<40>().valid(); }
    ::protozero::ConstBytes power_rails() const { return at<40>().as_bytes(); }
    bool has_android_log() const { return at<39>().valid(); }
    ::protozero::ConstBytes android_log() const { return at<39>().as_bytes(); }
    bool has_system_info() const { return at<45>().valid(); }
    ::protozero::ConstBytes system_info() const { return at<45>().as_bytes(); }
    bool has_trigger() const { return at<46>().valid(); }
    ::protozero::ConstBytes trigger() const { return at<46>().as_bytes(); }
    bool has_packages_list() const { return at<47>().valid(); }
    ::protozero::ConstBytes packages_list() const { return at<47>().as_bytes(); }
    bool has_process_descriptor() const { return at<43>().valid(); }
    ::protozero::ConstBytes process_descriptor() const { return at<43>().as_bytes(); }
    bool has_thread_descriptor() const { return at<44>().valid(); }
    ::protozero::ConstBytes thread_descriptor() const { return at<44>().as_bytes(); }
    bool has_synchronization_marker() const { return at<36>().valid(); }
    ::protozero::ConstBytes synchronization_marker() const { return at<36>().as_bytes(); }
    // field for_testing omitted because its id is too high
    bool has_trusted_uid() const { return at<3>().valid(); }
    int32_t trusted_uid() const { return at<3>().as_int32(); }
    bool has_trusted_packet_sequence_id() const { return at<10>().valid(); }
    uint32_t trusted_packet_sequence_id() const { return at<10>().as_uint32(); }
    bool has_interned_data() const { return at<12>().valid(); }
    ::protozero::ConstBytes interned_data() const { return at<12>().as_bytes(); }
    bool has_incremental_state_cleared() const { return at<41>().valid(); }
    bool incremental_state_cleared() const { return at<41>().as_bool(); }
    bool has_previous_packet_dropped() const { return at<42>().valid(); }
    bool previous_packet_dropped() const { return at<42>().as_bool(); }
  };
  void set_timestamp(uint64_t value) {
    AppendVarInt(8, value);
  }
  template <typename T = FtraceEventBundle> T* set_ftrace_events() {
    return BeginNestedMessage<T>(1);
  }

  template <typename T = ProcessTree> T* set_process_tree() {
    return BeginNestedMessage<T>(2);
  }

  template <typename T = ProcessStats> T* set_process_stats() {
    return BeginNestedMessage<T>(9);
  }

  template <typename T = InodeFileMap> T* set_inode_file_map() {
    return BeginNestedMessage<T>(4);
  }

  template <typename T = ChromeEventBundle> T* set_chrome_events() {
    return BeginNestedMessage<T>(5);
  }

  template <typename T = ClockSnapshot> T* set_clock_snapshot() {
    return BeginNestedMessage<T>(6);
  }

  template <typename T = SysStats> T* set_sys_stats() {
    return BeginNestedMessage<T>(7);
  }

  template <typename T = TrackEvent> T* set_track_event() {
    return BeginNestedMessage<T>(11);
  }

  template <typename T = TraceConfig> T* set_trace_config() {
    return BeginNestedMessage<T>(33);
  }

  template <typename T = FtraceStats> T* set_ftrace_stats() {
    return BeginNestedMessage<T>(34);
  }

  template <typename T = TraceStats> T* set_trace_stats() {
    return BeginNestedMessage<T>(35);
  }

  template <typename T = ProfilePacket> T* set_profile_packet() {
    return BeginNestedMessage<T>(37);
  }

  template <typename T = BatteryCounters> T* set_battery() {
    return BeginNestedMessage<T>(38);
  }

  template <typename T = PowerRails> T* set_power_rails() {
    return BeginNestedMessage<T>(40);
  }

  template <typename T = AndroidLogPacket> T* set_android_log() {
    return BeginNestedMessage<T>(39);
  }

  template <typename T = SystemInfo> T* set_system_info() {
    return BeginNestedMessage<T>(45);
  }

  template <typename T = Trigger> T* set_trigger() {
    return BeginNestedMessage<T>(46);
  }

  template <typename T = PackagesList> T* set_packages_list() {
    return BeginNestedMessage<T>(47);
  }

  template <typename T = ProcessDescriptor> T* set_process_descriptor() {
    return BeginNestedMessage<T>(43);
  }

  template <typename T = ThreadDescriptor> T* set_thread_descriptor() {
    return BeginNestedMessage<T>(44);
  }

  void set_synchronization_marker(const uint8_t* data, size_t size) {
    AppendBytes(36, data, size);
  }
  template <typename T = TestEvent> T* set_for_testing() {
    return BeginNestedMessage<T>(268435455);
  }

  void set_trusted_uid(int32_t value) {
    AppendVarInt(3, value);
  }
  void set_trusted_packet_sequence_id(uint32_t value) {
    AppendVarInt(10, value);
  }
  template <typename T = InternedData> T* set_interned_data() {
    return BeginNestedMessage<T>(12);
  }

  void set_incremental_state_cleared(bool value) {
    AppendTinyVarInt(41, value);
  }
  void set_previous_packet_dropped(bool value) {
    AppendTinyVarInt(42, value);
  }
};

} // Namespace.
} // Namespace.
} // Namespace.
#endif  // Include guard.
