// Autogenerated by the ProtoZero compiler plugin. DO NOT EDIT.

#ifndef PERFETTO_PROTOS_PERFETTO_TRACE_FTRACE_CGROUP_PROTO_H_
#define PERFETTO_PROTOS_PERFETTO_TRACE_FTRACE_CGROUP_PROTO_H_

#include <stddef.h>
#include <stdint.h>

#include "perfetto/base/export.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/message.h"

namespace perfetto {
namespace protos {
namespace pbzero {


class PERFETTO_EXPORT CgroupSetupRootFtraceEvent : public ::protozero::Message {
 public:
  enum : int32_t {
    kRootFieldNumber = 1,
    kSsMaskFieldNumber = 2,
    kNameFieldNumber = 3,
  };
  class Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/3, /*HAS_REPEATED_FIELDS=*/false> {
   public:
    Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
    bool has_root() const { return at<1>().valid(); }
    int32_t root() const { return at<1>().as_int32(); }
    bool has_ss_mask() const { return at<2>().valid(); }
    uint32_t ss_mask() const { return at<2>().as_uint32(); }
    bool has_name() const { return at<3>().valid(); }
    ::protozero::ConstChars name() const { return at<3>().as_string(); }
  };
  void set_root(int32_t value) {
    AppendVarInt(1, value);
  }
  void set_ss_mask(uint32_t value) {
    AppendVarInt(2, value);
  }
  void set_name(const char* value) {
    AppendString(3, value);
  }
  // Doesn't check for null terminator.
  // Expects |value| to be at least |size| long.
  void set_name(const char* value, size_t size) {
    AppendBytes(3, value, size);
  }
};

class PERFETTO_EXPORT CgroupRenameFtraceEvent : public ::protozero::Message {
 public:
  enum : int32_t {
    kRootFieldNumber = 1,
    kIdFieldNumber = 2,
    kCnameFieldNumber = 3,
  };
  class Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/3, /*HAS_REPEATED_FIELDS=*/false> {
   public:
    Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
    bool has_root() const { return at<1>().valid(); }
    int32_t root() const { return at<1>().as_int32(); }
    bool has_id() const { return at<2>().valid(); }
    int32_t id() const { return at<2>().as_int32(); }
    bool has_cname() const { return at<3>().valid(); }
    ::protozero::ConstChars cname() const { return at<3>().as_string(); }
  };
  void set_root(int32_t value) {
    AppendVarInt(1, value);
  }
  void set_id(int32_t value) {
    AppendVarInt(2, value);
  }
  void set_cname(const char* value) {
    AppendString(3, value);
  }
  // Doesn't check for null terminator.
  // Expects |value| to be at least |size| long.
  void set_cname(const char* value, size_t size) {
    AppendBytes(3, value, size);
  }
};

class PERFETTO_EXPORT CgroupReleaseFtraceEvent : public ::protozero::Message {
 public:
  enum : int32_t {
    kRootFieldNumber = 1,
    kIdFieldNumber = 2,
    kCnameFieldNumber = 3,
  };
  class Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/3, /*HAS_REPEATED_FIELDS=*/false> {
   public:
    Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
    bool has_root() const { return at<1>().valid(); }
    int32_t root() const { return at<1>().as_int32(); }
    bool has_id() const { return at<2>().valid(); }
    int32_t id() const { return at<2>().as_int32(); }
    bool has_cname() const { return at<3>().valid(); }
    ::protozero::ConstChars cname() const { return at<3>().as_string(); }
  };
  void set_root(int32_t value) {
    AppendVarInt(1, value);
  }
  void set_id(int32_t value) {
    AppendVarInt(2, value);
  }
  void set_cname(const char* value) {
    AppendString(3, value);
  }
  // Doesn't check for null terminator.
  // Expects |value| to be at least |size| long.
  void set_cname(const char* value, size_t size) {
    AppendBytes(3, value, size);
  }
};

class PERFETTO_EXPORT CgroupDestroyRootFtraceEvent : public ::protozero::Message {
 public:
  enum : int32_t {
    kRootFieldNumber = 1,
    kSsMaskFieldNumber = 2,
    kNameFieldNumber = 3,
  };
  class Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/3, /*HAS_REPEATED_FIELDS=*/false> {
   public:
    Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
    bool has_root() const { return at<1>().valid(); }
    int32_t root() const { return at<1>().as_int32(); }
    bool has_ss_mask() const { return at<2>().valid(); }
    uint32_t ss_mask() const { return at<2>().as_uint32(); }
    bool has_name() const { return at<3>().valid(); }
    ::protozero::ConstChars name() const { return at<3>().as_string(); }
  };
  void set_root(int32_t value) {
    AppendVarInt(1, value);
  }
  void set_ss_mask(uint32_t value) {
    AppendVarInt(2, value);
  }
  void set_name(const char* value) {
    AppendString(3, value);
  }
  // Doesn't check for null terminator.
  // Expects |value| to be at least |size| long.
  void set_name(const char* value, size_t size) {
    AppendBytes(3, value, size);
  }
};

class PERFETTO_EXPORT CgroupTransferTasksFtraceEvent : public ::protozero::Message {
 public:
  enum : int32_t {
    kDstRootFieldNumber = 1,
    kDstIdFieldNumber = 2,
    kPidFieldNumber = 3,
    kCommFieldNumber = 4,
    kCnameFieldNumber = 5,
  };
  class Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/5, /*HAS_REPEATED_FIELDS=*/false> {
   public:
    Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
    bool has_dst_root() const { return at<1>().valid(); }
    int32_t dst_root() const { return at<1>().as_int32(); }
    bool has_dst_id() const { return at<2>().valid(); }
    int32_t dst_id() const { return at<2>().as_int32(); }
    bool has_pid() const { return at<3>().valid(); }
    int32_t pid() const { return at<3>().as_int32(); }
    bool has_comm() const { return at<4>().valid(); }
    ::protozero::ConstChars comm() const { return at<4>().as_string(); }
    bool has_cname() const { return at<5>().valid(); }
    ::protozero::ConstChars cname() const { return at<5>().as_string(); }
  };
  void set_dst_root(int32_t value) {
    AppendVarInt(1, value);
  }
  void set_dst_id(int32_t value) {
    AppendVarInt(2, value);
  }
  void set_pid(int32_t value) {
    AppendVarInt(3, value);
  }
  void set_comm(const char* value) {
    AppendString(4, value);
  }
  // Doesn't check for null terminator.
  // Expects |value| to be at least |size| long.
  void set_comm(const char* value, size_t size) {
    AppendBytes(4, value, size);
  }
  void set_cname(const char* value) {
    AppendString(5, value);
  }
  // Doesn't check for null terminator.
  // Expects |value| to be at least |size| long.
  void set_cname(const char* value, size_t size) {
    AppendBytes(5, value, size);
  }
};

class PERFETTO_EXPORT CgroupRmdirFtraceEvent : public ::protozero::Message {
 public:
  enum : int32_t {
    kRootFieldNumber = 1,
    kIdFieldNumber = 2,
    kCnameFieldNumber = 3,
  };
  class Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/3, /*HAS_REPEATED_FIELDS=*/false> {
   public:
    Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
    bool has_root() const { return at<1>().valid(); }
    int32_t root() const { return at<1>().as_int32(); }
    bool has_id() const { return at<2>().valid(); }
    int32_t id() const { return at<2>().as_int32(); }
    bool has_cname() const { return at<3>().valid(); }
    ::protozero::ConstChars cname() const { return at<3>().as_string(); }
  };
  void set_root(int32_t value) {
    AppendVarInt(1, value);
  }
  void set_id(int32_t value) {
    AppendVarInt(2, value);
  }
  void set_cname(const char* value) {
    AppendString(3, value);
  }
  // Doesn't check for null terminator.
  // Expects |value| to be at least |size| long.
  void set_cname(const char* value, size_t size) {
    AppendBytes(3, value, size);
  }
};

class PERFETTO_EXPORT CgroupRemountFtraceEvent : public ::protozero::Message {
 public:
  enum : int32_t {
    kRootFieldNumber = 1,
    kSsMaskFieldNumber = 2,
    kNameFieldNumber = 3,
  };
  class Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/3, /*HAS_REPEATED_FIELDS=*/false> {
   public:
    Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
    bool has_root() const { return at<1>().valid(); }
    int32_t root() const { return at<1>().as_int32(); }
    bool has_ss_mask() const { return at<2>().valid(); }
    uint32_t ss_mask() const { return at<2>().as_uint32(); }
    bool has_name() const { return at<3>().valid(); }
    ::protozero::ConstChars name() const { return at<3>().as_string(); }
  };
  void set_root(int32_t value) {
    AppendVarInt(1, value);
  }
  void set_ss_mask(uint32_t value) {
    AppendVarInt(2, value);
  }
  void set_name(const char* value) {
    AppendString(3, value);
  }
  // Doesn't check for null terminator.
  // Expects |value| to be at least |size| long.
  void set_name(const char* value, size_t size) {
    AppendBytes(3, value, size);
  }
};

class PERFETTO_EXPORT CgroupMkdirFtraceEvent : public ::protozero::Message {
 public:
  enum : int32_t {
    kRootFieldNumber = 1,
    kIdFieldNumber = 2,
    kCnameFieldNumber = 3,
  };
  class Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/3, /*HAS_REPEATED_FIELDS=*/false> {
   public:
    Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
    bool has_root() const { return at<1>().valid(); }
    int32_t root() const { return at<1>().as_int32(); }
    bool has_id() const { return at<2>().valid(); }
    int32_t id() const { return at<2>().as_int32(); }
    bool has_cname() const { return at<3>().valid(); }
    ::protozero::ConstChars cname() const { return at<3>().as_string(); }
  };
  void set_root(int32_t value) {
    AppendVarInt(1, value);
  }
  void set_id(int32_t value) {
    AppendVarInt(2, value);
  }
  void set_cname(const char* value) {
    AppendString(3, value);
  }
  // Doesn't check for null terminator.
  // Expects |value| to be at least |size| long.
  void set_cname(const char* value, size_t size) {
    AppendBytes(3, value, size);
  }
};

class PERFETTO_EXPORT CgroupAttachTaskFtraceEvent : public ::protozero::Message {
 public:
  enum : int32_t {
    kDstRootFieldNumber = 1,
    kDstIdFieldNumber = 2,
    kPidFieldNumber = 3,
    kCommFieldNumber = 4,
    kCnameFieldNumber = 5,
  };
  class Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/5, /*HAS_REPEATED_FIELDS=*/false> {
   public:
    Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
    bool has_dst_root() const { return at<1>().valid(); }
    int32_t dst_root() const { return at<1>().as_int32(); }
    bool has_dst_id() const { return at<2>().valid(); }
    int32_t dst_id() const { return at<2>().as_int32(); }
    bool has_pid() const { return at<3>().valid(); }
    int32_t pid() const { return at<3>().as_int32(); }
    bool has_comm() const { return at<4>().valid(); }
    ::protozero::ConstChars comm() const { return at<4>().as_string(); }
    bool has_cname() const { return at<5>().valid(); }
    ::protozero::ConstChars cname() const { return at<5>().as_string(); }
  };
  void set_dst_root(int32_t value) {
    AppendVarInt(1, value);
  }
  void set_dst_id(int32_t value) {
    AppendVarInt(2, value);
  }
  void set_pid(int32_t value) {
    AppendVarInt(3, value);
  }
  void set_comm(const char* value) {
    AppendString(4, value);
  }
  // Doesn't check for null terminator.
  // Expects |value| to be at least |size| long.
  void set_comm(const char* value, size_t size) {
    AppendBytes(4, value, size);
  }
  void set_cname(const char* value) {
    AppendString(5, value);
  }
  // Doesn't check for null terminator.
  // Expects |value| to be at least |size| long.
  void set_cname(const char* value, size_t size) {
    AppendBytes(5, value, size);
  }
};

} // Namespace.
} // Namespace.
} // Namespace.
#endif  // Include guard.
