// Autogenerated by the ProtoZero compiler plugin. DO NOT EDIT.

#ifndef PERFETTO_PROTOS_PERFETTO_CONFIG_DATA_SOURCE_CONFIG_PROTO_H_
#define PERFETTO_PROTOS_PERFETTO_CONFIG_DATA_SOURCE_CONFIG_PROTO_H_

#include <stddef.h>
#include <stdint.h>

#include "perfetto/base/export.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/message.h"

namespace perfetto {
namespace protos {
namespace pbzero {

class AndroidLogConfig;
class AndroidPowerConfig;
class ChromeConfig;
class FtraceConfig;
class HeapprofdConfig;
class InodeFileConfig;
class ProcessStatsConfig;
class SysStatsConfig;
class TestConfig;

class PERFETTO_EXPORT DataSourceConfig : public ::protozero::Message {
 public:
  enum : int32_t {
    kNameFieldNumber = 1,
    kTargetBufferFieldNumber = 2,
    kTraceDurationMsFieldNumber = 3,
    kEnableExtraGuardrailsFieldNumber = 6,
    kTracingSessionIdFieldNumber = 4,
    kFtraceConfigFieldNumber = 100,
    kChromeConfigFieldNumber = 101,
    kInodeFileConfigFieldNumber = 102,
    kProcessStatsConfigFieldNumber = 103,
    kSysStatsConfigFieldNumber = 104,
    kHeapprofdConfigFieldNumber = 105,
    kAndroidPowerConfigFieldNumber = 106,
    kAndroidLogConfigFieldNumber = 107,
    kLegacyConfigFieldNumber = 1000,
    kForTestingFieldNumber = 268435455,
  };
  class Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/107, /*HAS_REPEATED_FIELDS=*/false> {
   public:
    Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
    bool has_name() const { return at<1>().valid(); }
    ::protozero::ConstChars name() const { return at<1>().as_string(); }
    bool has_target_buffer() const { return at<2>().valid(); }
    uint32_t target_buffer() const { return at<2>().as_uint32(); }
    bool has_trace_duration_ms() const { return at<3>().valid(); }
    uint32_t trace_duration_ms() const { return at<3>().as_uint32(); }
    bool has_enable_extra_guardrails() const { return at<6>().valid(); }
    bool enable_extra_guardrails() const { return at<6>().as_bool(); }
    bool has_tracing_session_id() const { return at<4>().valid(); }
    uint64_t tracing_session_id() const { return at<4>().as_uint64(); }
    bool has_ftrace_config() const { return at<100>().valid(); }
    ::protozero::ConstBytes ftrace_config() const { return at<100>().as_bytes(); }
    bool has_chrome_config() const { return at<101>().valid(); }
    ::protozero::ConstBytes chrome_config() const { return at<101>().as_bytes(); }
    bool has_inode_file_config() const { return at<102>().valid(); }
    ::protozero::ConstBytes inode_file_config() const { return at<102>().as_bytes(); }
    bool has_process_stats_config() const { return at<103>().valid(); }
    ::protozero::ConstBytes process_stats_config() const { return at<103>().as_bytes(); }
    bool has_sys_stats_config() const { return at<104>().valid(); }
    ::protozero::ConstBytes sys_stats_config() const { return at<104>().as_bytes(); }
    bool has_heapprofd_config() const { return at<105>().valid(); }
    ::protozero::ConstBytes heapprofd_config() const { return at<105>().as_bytes(); }
    bool has_android_power_config() const { return at<106>().valid(); }
    ::protozero::ConstBytes android_power_config() const { return at<106>().as_bytes(); }
    bool has_android_log_config() const { return at<107>().valid(); }
    ::protozero::ConstBytes android_log_config() const { return at<107>().as_bytes(); }
    // field legacy_config omitted because its id is too high
    // field for_testing omitted because its id is too high
  };
  void set_name(const char* value) {
    AppendString(1, value);
  }
  // Doesn't check for null terminator.
  // Expects |value| to be at least |size| long.
  void set_name(const char* value, size_t size) {
    AppendBytes(1, value, size);
  }
  void set_target_buffer(uint32_t value) {
    AppendVarInt(2, value);
  }
  void set_trace_duration_ms(uint32_t value) {
    AppendVarInt(3, value);
  }
  void set_enable_extra_guardrails(bool value) {
    AppendTinyVarInt(6, value);
  }
  void set_tracing_session_id(uint64_t value) {
    AppendVarInt(4, value);
  }
  template <typename T = FtraceConfig> T* set_ftrace_config() {
    return BeginNestedMessage<T>(100);
  }

  template <typename T = ChromeConfig> T* set_chrome_config() {
    return BeginNestedMessage<T>(101);
  }

  template <typename T = InodeFileConfig> T* set_inode_file_config() {
    return BeginNestedMessage<T>(102);
  }

  template <typename T = ProcessStatsConfig> T* set_process_stats_config() {
    return BeginNestedMessage<T>(103);
  }

  template <typename T = SysStatsConfig> T* set_sys_stats_config() {
    return BeginNestedMessage<T>(104);
  }

  template <typename T = HeapprofdConfig> T* set_heapprofd_config() {
    return BeginNestedMessage<T>(105);
  }

  template <typename T = AndroidPowerConfig> T* set_android_power_config() {
    return BeginNestedMessage<T>(106);
  }

  template <typename T = AndroidLogConfig> T* set_android_log_config() {
    return BeginNestedMessage<T>(107);
  }

  void set_legacy_config(const char* value) {
    AppendString(1000, value);
  }
  // Doesn't check for null terminator.
  // Expects |value| to be at least |size| long.
  void set_legacy_config(const char* value, size_t size) {
    AppendBytes(1000, value, size);
  }
  template <typename T = TestConfig> T* set_for_testing() {
    return BeginNestedMessage<T>(268435455);
  }

};

} // Namespace.
} // Namespace.
} // Namespace.
#endif  // Include guard.
