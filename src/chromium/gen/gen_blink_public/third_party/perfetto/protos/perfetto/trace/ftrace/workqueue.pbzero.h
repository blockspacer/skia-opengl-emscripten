// Autogenerated by the ProtoZero compiler plugin. DO NOT EDIT.

#ifndef PERFETTO_PROTOS_PERFETTO_TRACE_FTRACE_WORKQUEUE_PROTO_H_
#define PERFETTO_PROTOS_PERFETTO_TRACE_FTRACE_WORKQUEUE_PROTO_H_

#include <stddef.h>
#include <stdint.h>

#include "perfetto/base/export.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/message.h"

namespace perfetto {
namespace protos {
namespace pbzero {


class PERFETTO_EXPORT WorkqueueQueueWorkFtraceEvent : public ::protozero::Message {
 public:
  enum : int32_t {
    kWorkFieldNumber = 1,
    kFunctionFieldNumber = 2,
    kWorkqueueFieldNumber = 3,
    kReqCpuFieldNumber = 4,
    kCpuFieldNumber = 5,
  };
  class Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/5, /*HAS_REPEATED_FIELDS=*/false> {
   public:
    Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
    bool has_work() const { return at<1>().valid(); }
    uint64_t work() const { return at<1>().as_uint64(); }
    bool has_function() const { return at<2>().valid(); }
    uint64_t function() const { return at<2>().as_uint64(); }
    bool has_workqueue() const { return at<3>().valid(); }
    uint64_t workqueue() const { return at<3>().as_uint64(); }
    bool has_req_cpu() const { return at<4>().valid(); }
    uint32_t req_cpu() const { return at<4>().as_uint32(); }
    bool has_cpu() const { return at<5>().valid(); }
    uint32_t cpu() const { return at<5>().as_uint32(); }
  };
  void set_work(uint64_t value) {
    AppendVarInt(1, value);
  }
  void set_function(uint64_t value) {
    AppendVarInt(2, value);
  }
  void set_workqueue(uint64_t value) {
    AppendVarInt(3, value);
  }
  void set_req_cpu(uint32_t value) {
    AppendVarInt(4, value);
  }
  void set_cpu(uint32_t value) {
    AppendVarInt(5, value);
  }
};

class PERFETTO_EXPORT WorkqueueExecuteStartFtraceEvent : public ::protozero::Message {
 public:
  enum : int32_t {
    kWorkFieldNumber = 1,
    kFunctionFieldNumber = 2,
  };
  class Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/2, /*HAS_REPEATED_FIELDS=*/false> {
   public:
    Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
    bool has_work() const { return at<1>().valid(); }
    uint64_t work() const { return at<1>().as_uint64(); }
    bool has_function() const { return at<2>().valid(); }
    uint64_t function() const { return at<2>().as_uint64(); }
  };
  void set_work(uint64_t value) {
    AppendVarInt(1, value);
  }
  void set_function(uint64_t value) {
    AppendVarInt(2, value);
  }
};

class PERFETTO_EXPORT WorkqueueExecuteEndFtraceEvent : public ::protozero::Message {
 public:
  enum : int32_t {
    kWorkFieldNumber = 1,
  };
  class Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/1, /*HAS_REPEATED_FIELDS=*/false> {
   public:
    Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
    bool has_work() const { return at<1>().valid(); }
    uint64_t work() const { return at<1>().as_uint64(); }
  };
  void set_work(uint64_t value) {
    AppendVarInt(1, value);
  }
};

class PERFETTO_EXPORT WorkqueueActivateWorkFtraceEvent : public ::protozero::Message {
 public:
  enum : int32_t {
    kWorkFieldNumber = 1,
  };
  class Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/1, /*HAS_REPEATED_FIELDS=*/false> {
   public:
    Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
    bool has_work() const { return at<1>().valid(); }
    uint64_t work() const { return at<1>().as_uint64(); }
  };
  void set_work(uint64_t value) {
    AppendVarInt(1, value);
  }
};

} // Namespace.
} // Namespace.
} // Namespace.
#endif  // Include guard.
