// Autogenerated by the ProtoZero compiler plugin. DO NOT EDIT.

#ifndef PERFETTO_PROTOS_PERFETTO_TRACE_TRACK_EVENT_THREAD_DESCRIPTOR_PROTO_H_
#define PERFETTO_PROTOS_PERFETTO_TRACE_TRACK_EVENT_THREAD_DESCRIPTOR_PROTO_H_

#include <stddef.h>
#include <stdint.h>

#include "perfetto/base/export.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/message.h"

namespace perfetto {
namespace protos {
namespace pbzero {

enum ThreadDescriptor_ChromeThreadType : int32_t;

enum ThreadDescriptor_ChromeThreadType : int32_t {
  ThreadDescriptor_ChromeThreadType_THREAD_UNSPECIFIED = 0,
};

class PERFETTO_EXPORT ThreadDescriptor : public ::protozero::Message {
 public:
  enum : int32_t {
    kPidFieldNumber = 1,
    kTidFieldNumber = 2,
    kLegacySortIndexFieldNumber = 3,
    kChromeThreadTypeFieldNumber = 4,
    kThreadNameFieldNumber = 5,
    kReferenceTimestampUsFieldNumber = 6,
    kReferenceThreadTimeUsFieldNumber = 7,
  };
  class Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/7, /*HAS_REPEATED_FIELDS=*/false> {
   public:
    Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
    bool has_pid() const { return at<1>().valid(); }
    int32_t pid() const { return at<1>().as_int32(); }
    bool has_tid() const { return at<2>().valid(); }
    int32_t tid() const { return at<2>().as_int32(); }
    bool has_legacy_sort_index() const { return at<3>().valid(); }
    int32_t legacy_sort_index() const { return at<3>().as_int32(); }
    bool has_chrome_thread_type() const { return at<4>().valid(); }
    int32_t chrome_thread_type() const { return at<4>().as_int32(); }
    bool has_thread_name() const { return at<5>().valid(); }
    ::protozero::ConstChars thread_name() const { return at<5>().as_string(); }
    bool has_reference_timestamp_us() const { return at<6>().valid(); }
    int64_t reference_timestamp_us() const { return at<6>().as_int64(); }
    bool has_reference_thread_time_us() const { return at<7>().valid(); }
    int64_t reference_thread_time_us() const { return at<7>().as_int64(); }
  };
  using ChromeThreadType = ::perfetto::protos::pbzero::ThreadDescriptor_ChromeThreadType;
  static const ChromeThreadType THREAD_UNSPECIFIED = ThreadDescriptor_ChromeThreadType_THREAD_UNSPECIFIED;
  void set_pid(int32_t value) {
    AppendVarInt(1, value);
  }
  void set_tid(int32_t value) {
    AppendVarInt(2, value);
  }
  void set_legacy_sort_index(int32_t value) {
    AppendVarInt(3, value);
  }
  void set_chrome_thread_type(::perfetto::protos::pbzero::ThreadDescriptor_ChromeThreadType value) {
    AppendTinyVarInt(4, value);
  }
  void set_thread_name(const char* value) {
    AppendString(5, value);
  }
  // Doesn't check for null terminator.
  // Expects |value| to be at least |size| long.
  void set_thread_name(const char* value, size_t size) {
    AppendBytes(5, value, size);
  }
  void set_reference_timestamp_us(int64_t value) {
    AppendVarInt(6, value);
  }
  void set_reference_thread_time_us(int64_t value) {
    AppendVarInt(7, value);
  }
};

} // Namespace.
} // Namespace.
} // Namespace.
#endif  // Include guard.
