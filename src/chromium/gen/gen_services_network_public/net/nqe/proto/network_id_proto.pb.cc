// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: network_id_proto.proto

#include "network_id_proto.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace net {
namespace nqe {
namespace internal {
class NetworkIDProtoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NetworkIDProto>
      _instance;
} _NetworkIDProto_default_instance_;
}  // namespace internal
}  // namespace nqe
}  // namespace net
namespace protobuf_network_5fid_5fproto_2eproto {
static void InitDefaultsNetworkIDProto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::net::nqe::internal::_NetworkIDProto_default_instance_;
    new (ptr) ::net::nqe::internal::NetworkIDProto();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::net::nqe::internal::NetworkIDProto::InitAsDefaultInstance();
}

NET_EXPORT_PRIVATE ::google::protobuf::internal::SCCInfo<0> scc_info_NetworkIDProto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsNetworkIDProto}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_NetworkIDProto.base);
}

}  // namespace protobuf_network_5fid_5fproto_2eproto
namespace net {
namespace nqe {
namespace internal {

// ===================================================================

void NetworkIDProto::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetworkIDProto::kConnectionTypeFieldNumber;
const int NetworkIDProto::kIdFieldNumber;
const int NetworkIDProto::kSignalStrengthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetworkIDProto::NetworkIDProto()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_network_5fid_5fproto_2eproto::scc_info_NetworkIDProto.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:net.nqe.internal.NetworkIDProto)
}
NetworkIDProto::NetworkIDProto(const NetworkIDProto& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  ::memcpy(&connection_type_, &from.connection_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&signal_strength_) -
    reinterpret_cast<char*>(&connection_type_)) + sizeof(signal_strength_));
  // @@protoc_insertion_point(copy_constructor:net.nqe.internal.NetworkIDProto)
}

void NetworkIDProto::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&connection_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&signal_strength_) -
      reinterpret_cast<char*>(&connection_type_)) + sizeof(signal_strength_));
}

NetworkIDProto::~NetworkIDProto() {
  // @@protoc_insertion_point(destructor:net.nqe.internal.NetworkIDProto)
  SharedDtor();
}

void NetworkIDProto::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NetworkIDProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NetworkIDProto& NetworkIDProto::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_network_5fid_5fproto_2eproto::scc_info_NetworkIDProto.base);
  return *internal_default_instance();
}


void NetworkIDProto::Clear() {
// @@protoc_insertion_point(message_clear_start:net.nqe.internal.NetworkIDProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    id_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 6u) {
    ::memset(&connection_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&signal_strength_) -
        reinterpret_cast<char*>(&connection_type_)) + sizeof(signal_strength_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NetworkIDProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:net.nqe.internal.NetworkIDProto)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 connection_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_connection_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &connection_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 signal_strength = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_signal_strength();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &signal_strength_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:net.nqe.internal.NetworkIDProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:net.nqe.internal.NetworkIDProto)
  return false;
#undef DO_
}

void NetworkIDProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:net.nqe.internal.NetworkIDProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 connection_type = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->connection_type(), output);
  }

  // optional string id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->id(), output);
  }

  // optional int32 signal_strength = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->signal_strength(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:net.nqe.internal.NetworkIDProto)
}

size_t NetworkIDProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.nqe.internal.NetworkIDProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 7u) {
    // optional string id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional int32 connection_type = 1;
    if (has_connection_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->connection_type());
    }

    // optional int32 signal_strength = 3;
    if (has_signal_strength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->signal_strength());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NetworkIDProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NetworkIDProto*>(&from));
}

void NetworkIDProto::MergeFrom(const NetworkIDProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.nqe.internal.NetworkIDProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000002u) {
      connection_type_ = from.connection_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      signal_strength_ = from.signal_strength_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NetworkIDProto::CopyFrom(const NetworkIDProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.nqe.internal.NetworkIDProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkIDProto::IsInitialized() const {
  return true;
}

void NetworkIDProto::Swap(NetworkIDProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetworkIDProto::InternalSwap(NetworkIDProto* other) {
  using std::swap;
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(connection_type_, other->connection_type_);
  swap(signal_strength_, other->signal_strength_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string NetworkIDProto::GetTypeName() const {
  return "net.nqe.internal.NetworkIDProto";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace internal
}  // namespace nqe
}  // namespace net
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::net::nqe::internal::NetworkIDProto* Arena::CreateMaybeMessage< ::net::nqe::internal::NetworkIDProto >(Arena* arena) {
  return Arena::CreateInternal< ::net::nqe::internal::NetworkIDProto >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
