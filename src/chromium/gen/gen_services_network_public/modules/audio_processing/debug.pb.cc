// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: debug.proto

#include "debug.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_debug_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_debug_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Config;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_debug_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Init;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_debug_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ReverseStream;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_debug_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RuntimeSetting;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_debug_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Stream;
}  // namespace protobuf_debug_2eproto
namespace webrtc {
namespace audioproc {
class InitDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Init>
      _instance;
} _Init_default_instance_;
class ReverseStreamDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReverseStream>
      _instance;
} _ReverseStream_default_instance_;
class StreamDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Stream>
      _instance;
} _Stream_default_instance_;
class ConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Config>
      _instance;
} _Config_default_instance_;
class RuntimeSettingDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RuntimeSetting>
      _instance;
} _RuntimeSetting_default_instance_;
class EventDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Event>
      _instance;
} _Event_default_instance_;
}  // namespace audioproc
}  // namespace webrtc
namespace protobuf_debug_2eproto {
static void InitDefaultsInit() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::webrtc::audioproc::_Init_default_instance_;
    new (ptr) ::webrtc::audioproc::Init();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::webrtc::audioproc::Init::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Init =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsInit}, {}};

static void InitDefaultsReverseStream() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::webrtc::audioproc::_ReverseStream_default_instance_;
    new (ptr) ::webrtc::audioproc::ReverseStream();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::webrtc::audioproc::ReverseStream::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ReverseStream =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsReverseStream}, {}};

static void InitDefaultsStream() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::webrtc::audioproc::_Stream_default_instance_;
    new (ptr) ::webrtc::audioproc::Stream();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::webrtc::audioproc::Stream::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Stream =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsStream}, {}};

static void InitDefaultsConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::webrtc::audioproc::_Config_default_instance_;
    new (ptr) ::webrtc::audioproc::Config();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::webrtc::audioproc::Config::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Config =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfig}, {}};

static void InitDefaultsRuntimeSetting() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::webrtc::audioproc::_RuntimeSetting_default_instance_;
    new (ptr) ::webrtc::audioproc::RuntimeSetting();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::webrtc::audioproc::RuntimeSetting::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RuntimeSetting =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRuntimeSetting}, {}};

static void InitDefaultsEvent() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::webrtc::audioproc::_Event_default_instance_;
    new (ptr) ::webrtc::audioproc::Event();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::webrtc::audioproc::Event::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<5> scc_info_Event =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsEvent}, {
      &protobuf_debug_2eproto::scc_info_Init.base,
      &protobuf_debug_2eproto::scc_info_ReverseStream.base,
      &protobuf_debug_2eproto::scc_info_Stream.base,
      &protobuf_debug_2eproto::scc_info_Config.base,
      &protobuf_debug_2eproto::scc_info_RuntimeSetting.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Init.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReverseStream.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Stream.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Config.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RuntimeSetting.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Event.base);
}

}  // namespace protobuf_debug_2eproto
namespace webrtc {
namespace audioproc {
bool Event_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Event_Type Event::INIT;
const Event_Type Event::REVERSE_STREAM;
const Event_Type Event::STREAM;
const Event_Type Event::CONFIG;
const Event_Type Event::UNKNOWN_EVENT;
const Event_Type Event::RUNTIME_SETTING;
const Event_Type Event::Type_MIN;
const Event_Type Event::Type_MAX;
const int Event::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void Init::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Init::kSampleRateFieldNumber;
const int Init::kDeviceSampleRateFieldNumber;
const int Init::kNumInputChannelsFieldNumber;
const int Init::kNumOutputChannelsFieldNumber;
const int Init::kNumReverseChannelsFieldNumber;
const int Init::kReverseSampleRateFieldNumber;
const int Init::kOutputSampleRateFieldNumber;
const int Init::kReverseOutputSampleRateFieldNumber;
const int Init::kNumReverseOutputChannelsFieldNumber;
const int Init::kTimestampMsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Init::Init()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_debug_2eproto::scc_info_Init.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:webrtc.audioproc.Init)
}
Init::Init(const Init& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&sample_rate_, &from.sample_rate_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_reverse_output_channels_) -
    reinterpret_cast<char*>(&sample_rate_)) + sizeof(num_reverse_output_channels_));
  // @@protoc_insertion_point(copy_constructor:webrtc.audioproc.Init)
}

void Init::SharedCtor() {
  ::memset(&sample_rate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_reverse_output_channels_) -
      reinterpret_cast<char*>(&sample_rate_)) + sizeof(num_reverse_output_channels_));
}

Init::~Init() {
  // @@protoc_insertion_point(destructor:webrtc.audioproc.Init)
  SharedDtor();
}

void Init::SharedDtor() {
}

void Init::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Init& Init::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_debug_2eproto::scc_info_Init.base);
  return *internal_default_instance();
}


void Init::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.audioproc.Init)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&sample_rate_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&reverse_output_sample_rate_) -
        reinterpret_cast<char*>(&sample_rate_)) + sizeof(reverse_output_sample_rate_));
  }
  if (cached_has_bits & 768u) {
    ::memset(&timestamp_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_reverse_output_channels_) -
        reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(num_reverse_output_channels_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Init::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:webrtc.audioproc.Init)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 sample_rate = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_sample_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sample_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 device_sample_rate = 2 [deprecated = true];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_device_sample_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &device_sample_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_input_channels = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_num_input_channels();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_input_channels_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_output_channels = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_num_output_channels();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_output_channels_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_reverse_channels = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_num_reverse_channels();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_reverse_channels_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 reverse_sample_rate = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_reverse_sample_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reverse_sample_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 output_sample_rate = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_output_sample_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &output_sample_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 reverse_output_sample_rate = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_reverse_output_sample_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reverse_output_sample_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_reverse_output_channels = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_num_reverse_output_channels();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_reverse_output_channels_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 timestamp_ms = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_timestamp_ms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:webrtc.audioproc.Init)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:webrtc.audioproc.Init)
  return false;
#undef DO_
}

void Init::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:webrtc.audioproc.Init)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 sample_rate = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sample_rate(), output);
  }

  // optional int32 device_sample_rate = 2 [deprecated = true];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->device_sample_rate(), output);
  }

  // optional int32 num_input_channels = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num_input_channels(), output);
  }

  // optional int32 num_output_channels = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->num_output_channels(), output);
  }

  // optional int32 num_reverse_channels = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->num_reverse_channels(), output);
  }

  // optional int32 reverse_sample_rate = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->reverse_sample_rate(), output);
  }

  // optional int32 output_sample_rate = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->output_sample_rate(), output);
  }

  // optional int32 reverse_output_sample_rate = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->reverse_output_sample_rate(), output);
  }

  // optional int32 num_reverse_output_channels = 9;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->num_reverse_output_channels(), output);
  }

  // optional int64 timestamp_ms = 10;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->timestamp_ms(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:webrtc.audioproc.Init)
}

size_t Init::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.audioproc.Init)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 255u) {
    // optional int32 sample_rate = 1;
    if (has_sample_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sample_rate());
    }

    // optional int32 device_sample_rate = 2 [deprecated = true];
    if (has_device_sample_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->device_sample_rate());
    }

    // optional int32 num_input_channels = 3;
    if (has_num_input_channels()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_input_channels());
    }

    // optional int32 num_output_channels = 4;
    if (has_num_output_channels()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_output_channels());
    }

    // optional int32 num_reverse_channels = 5;
    if (has_num_reverse_channels()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_reverse_channels());
    }

    // optional int32 reverse_sample_rate = 6;
    if (has_reverse_sample_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reverse_sample_rate());
    }

    // optional int32 output_sample_rate = 7;
    if (has_output_sample_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->output_sample_rate());
    }

    // optional int32 reverse_output_sample_rate = 8;
    if (has_reverse_output_sample_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reverse_output_sample_rate());
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional int64 timestamp_ms = 10;
    if (has_timestamp_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp_ms());
    }

    // optional int32 num_reverse_output_channels = 9;
    if (has_num_reverse_output_channels()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_reverse_output_channels());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Init::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Init*>(&from));
}

void Init::MergeFrom(const Init& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.audioproc.Init)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      sample_rate_ = from.sample_rate_;
    }
    if (cached_has_bits & 0x00000002u) {
      device_sample_rate_ = from.device_sample_rate_;
    }
    if (cached_has_bits & 0x00000004u) {
      num_input_channels_ = from.num_input_channels_;
    }
    if (cached_has_bits & 0x00000008u) {
      num_output_channels_ = from.num_output_channels_;
    }
    if (cached_has_bits & 0x00000010u) {
      num_reverse_channels_ = from.num_reverse_channels_;
    }
    if (cached_has_bits & 0x00000020u) {
      reverse_sample_rate_ = from.reverse_sample_rate_;
    }
    if (cached_has_bits & 0x00000040u) {
      output_sample_rate_ = from.output_sample_rate_;
    }
    if (cached_has_bits & 0x00000080u) {
      reverse_output_sample_rate_ = from.reverse_output_sample_rate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      timestamp_ms_ = from.timestamp_ms_;
    }
    if (cached_has_bits & 0x00000200u) {
      num_reverse_output_channels_ = from.num_reverse_output_channels_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Init::CopyFrom(const Init& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.audioproc.Init)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Init::IsInitialized() const {
  return true;
}

void Init::Swap(Init* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Init::InternalSwap(Init* other) {
  using std::swap;
  swap(sample_rate_, other->sample_rate_);
  swap(device_sample_rate_, other->device_sample_rate_);
  swap(num_input_channels_, other->num_input_channels_);
  swap(num_output_channels_, other->num_output_channels_);
  swap(num_reverse_channels_, other->num_reverse_channels_);
  swap(reverse_sample_rate_, other->reverse_sample_rate_);
  swap(output_sample_rate_, other->output_sample_rate_);
  swap(reverse_output_sample_rate_, other->reverse_output_sample_rate_);
  swap(timestamp_ms_, other->timestamp_ms_);
  swap(num_reverse_output_channels_, other->num_reverse_output_channels_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Init::GetTypeName() const {
  return "webrtc.audioproc.Init";
}


// ===================================================================

void ReverseStream::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReverseStream::kDataFieldNumber;
const int ReverseStream::kChannelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReverseStream::ReverseStream()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_debug_2eproto::scc_info_ReverseStream.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:webrtc.audioproc.ReverseStream)
}
ReverseStream::ReverseStream(const ReverseStream& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      channel_(from.channel_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  // @@protoc_insertion_point(copy_constructor:webrtc.audioproc.ReverseStream)
}

void ReverseStream::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ReverseStream::~ReverseStream() {
  // @@protoc_insertion_point(destructor:webrtc.audioproc.ReverseStream)
  SharedDtor();
}

void ReverseStream::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ReverseStream::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReverseStream& ReverseStream::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_debug_2eproto::scc_info_ReverseStream.base);
  return *internal_default_instance();
}


void ReverseStream::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.audioproc.ReverseStream)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channel_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    data_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ReverseStream::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:webrtc.audioproc.ReverseStream)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes channel = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_channel()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:webrtc.audioproc.ReverseStream)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:webrtc.audioproc.ReverseStream)
  return false;
#undef DO_
}

void ReverseStream::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:webrtc.audioproc.ReverseStream)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes data = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->data(), output);
  }

  // repeated bytes channel = 2;
  for (int i = 0, n = this->channel_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->channel(i), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:webrtc.audioproc.ReverseStream)
}

size_t ReverseStream::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.audioproc.ReverseStream)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // repeated bytes channel = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->channel_size());
  for (int i = 0, n = this->channel_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->channel(i));
  }

  // optional bytes data = 1;
  if (has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReverseStream::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ReverseStream*>(&from));
}

void ReverseStream::MergeFrom(const ReverseStream& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.audioproc.ReverseStream)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  channel_.MergeFrom(from.channel_);
  if (from.has_data()) {
    set_has_data();
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
}

void ReverseStream::CopyFrom(const ReverseStream& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.audioproc.ReverseStream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReverseStream::IsInitialized() const {
  return true;
}

void ReverseStream::Swap(ReverseStream* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReverseStream::InternalSwap(ReverseStream* other) {
  using std::swap;
  channel_.InternalSwap(CastToBase(&other->channel_));
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string ReverseStream::GetTypeName() const {
  return "webrtc.audioproc.ReverseStream";
}


// ===================================================================

void Stream::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Stream::kInputDataFieldNumber;
const int Stream::kOutputDataFieldNumber;
const int Stream::kDelayFieldNumber;
const int Stream::kDriftFieldNumber;
const int Stream::kLevelFieldNumber;
const int Stream::kKeypressFieldNumber;
const int Stream::kInputChannelFieldNumber;
const int Stream::kOutputChannelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Stream::Stream()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_debug_2eproto::scc_info_Stream.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:webrtc.audioproc.Stream)
}
Stream::Stream(const Stream& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      input_channel_(from.input_channel_),
      output_channel_(from.output_channel_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  input_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_input_data()) {
    input_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.input_data_);
  }
  output_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_output_data()) {
    output_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.output_data_);
  }
  ::memcpy(&delay_, &from.delay_,
    static_cast<size_t>(reinterpret_cast<char*>(&keypress_) -
    reinterpret_cast<char*>(&delay_)) + sizeof(keypress_));
  // @@protoc_insertion_point(copy_constructor:webrtc.audioproc.Stream)
}

void Stream::SharedCtor() {
  input_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  output_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&delay_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&keypress_) -
      reinterpret_cast<char*>(&delay_)) + sizeof(keypress_));
}

Stream::~Stream() {
  // @@protoc_insertion_point(destructor:webrtc.audioproc.Stream)
  SharedDtor();
}

void Stream::SharedDtor() {
  input_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  output_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Stream::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Stream& Stream::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_debug_2eproto::scc_info_Stream.base);
  return *internal_default_instance();
}


void Stream::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.audioproc.Stream)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  input_channel_.Clear();
  output_channel_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      input_data_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      output_data_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 60u) {
    ::memset(&delay_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&keypress_) -
        reinterpret_cast<char*>(&delay_)) + sizeof(keypress_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Stream::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:webrtc.audioproc.Stream)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes input_data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_input_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes output_data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_output_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 delay = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_delay();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &delay_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 drift = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_drift();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &drift_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 level = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool keypress = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_keypress();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &keypress_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes input_channel = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_input_channel()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes output_channel = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_output_channel()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:webrtc.audioproc.Stream)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:webrtc.audioproc.Stream)
  return false;
#undef DO_
}

void Stream::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:webrtc.audioproc.Stream)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes input_data = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->input_data(), output);
  }

  // optional bytes output_data = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->output_data(), output);
  }

  // optional int32 delay = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->delay(), output);
  }

  // optional sint32 drift = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->drift(), output);
  }

  // optional int32 level = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->level(), output);
  }

  // optional bool keypress = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->keypress(), output);
  }

  // repeated bytes input_channel = 7;
  for (int i = 0, n = this->input_channel_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->input_channel(i), output);
  }

  // repeated bytes output_channel = 8;
  for (int i = 0, n = this->output_channel_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      8, this->output_channel(i), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:webrtc.audioproc.Stream)
}

size_t Stream::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.audioproc.Stream)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // repeated bytes input_channel = 7;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->input_channel_size());
  for (int i = 0, n = this->input_channel_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->input_channel(i));
  }

  // repeated bytes output_channel = 8;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->output_channel_size());
  for (int i = 0, n = this->output_channel_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->output_channel(i));
  }

  if (_has_bits_[0 / 32] & 63u) {
    // optional bytes input_data = 1;
    if (has_input_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->input_data());
    }

    // optional bytes output_data = 2;
    if (has_output_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->output_data());
    }

    // optional int32 delay = 3;
    if (has_delay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->delay());
    }

    // optional sint32 drift = 4;
    if (has_drift()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->drift());
    }

    // optional int32 level = 5;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional bool keypress = 6;
    if (has_keypress()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Stream::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Stream*>(&from));
}

void Stream::MergeFrom(const Stream& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.audioproc.Stream)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  input_channel_.MergeFrom(from.input_channel_);
  output_channel_.MergeFrom(from.output_channel_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_input_data();
      input_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.input_data_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_output_data();
      output_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.output_data_);
    }
    if (cached_has_bits & 0x00000004u) {
      delay_ = from.delay_;
    }
    if (cached_has_bits & 0x00000008u) {
      drift_ = from.drift_;
    }
    if (cached_has_bits & 0x00000010u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00000020u) {
      keypress_ = from.keypress_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Stream::CopyFrom(const Stream& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.audioproc.Stream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stream::IsInitialized() const {
  return true;
}

void Stream::Swap(Stream* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Stream::InternalSwap(Stream* other) {
  using std::swap;
  input_channel_.InternalSwap(CastToBase(&other->input_channel_));
  output_channel_.InternalSwap(CastToBase(&other->output_channel_));
  input_data_.Swap(&other->input_data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  output_data_.Swap(&other->output_data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(delay_, other->delay_);
  swap(drift_, other->drift_);
  swap(level_, other->level_);
  swap(keypress_, other->keypress_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Stream::GetTypeName() const {
  return "webrtc.audioproc.Stream";
}


// ===================================================================

void Config::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Config::kAecEnabledFieldNumber;
const int Config::kAecDelayAgnosticEnabledFieldNumber;
const int Config::kAecDriftCompensationEnabledFieldNumber;
const int Config::kAecExtendedFilterEnabledFieldNumber;
const int Config::kAecSuppressionLevelFieldNumber;
const int Config::kAecmEnabledFieldNumber;
const int Config::kAecmComfortNoiseEnabledFieldNumber;
const int Config::kAecmRoutingModeFieldNumber;
const int Config::kAgcEnabledFieldNumber;
const int Config::kAgcModeFieldNumber;
const int Config::kAgcLimiterEnabledFieldNumber;
const int Config::kNoiseRobustAgcEnabledFieldNumber;
const int Config::kHpfEnabledFieldNumber;
const int Config::kNsEnabledFieldNumber;
const int Config::kNsLevelFieldNumber;
const int Config::kTransientSuppressionEnabledFieldNumber;
const int Config::kExperimentsDescriptionFieldNumber;
const int Config::kPreAmplifierEnabledFieldNumber;
const int Config::kPreAmplifierFixedGainFactorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Config::Config()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_debug_2eproto::scc_info_Config.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:webrtc.audioproc.Config)
}
Config::Config(const Config& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  experiments_description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_experiments_description()) {
    experiments_description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.experiments_description_);
  }
  ::memcpy(&aec_enabled_, &from.aec_enabled_,
    static_cast<size_t>(reinterpret_cast<char*>(&pre_amplifier_fixed_gain_factor_) -
    reinterpret_cast<char*>(&aec_enabled_)) + sizeof(pre_amplifier_fixed_gain_factor_));
  // @@protoc_insertion_point(copy_constructor:webrtc.audioproc.Config)
}

void Config::SharedCtor() {
  experiments_description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&aec_enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pre_amplifier_fixed_gain_factor_) -
      reinterpret_cast<char*>(&aec_enabled_)) + sizeof(pre_amplifier_fixed_gain_factor_));
}

Config::~Config() {
  // @@protoc_insertion_point(destructor:webrtc.audioproc.Config)
  SharedDtor();
}

void Config::SharedDtor() {
  experiments_description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Config::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Config& Config::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_debug_2eproto::scc_info_Config.base);
  return *internal_default_instance();
}


void Config::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.audioproc.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    experiments_description_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 254u) {
    ::memset(&aec_enabled_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&aecm_enabled_) -
        reinterpret_cast<char*>(&aec_enabled_)) + sizeof(aecm_enabled_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&aecm_comfort_noise_enabled_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&transient_suppression_enabled_) -
        reinterpret_cast<char*>(&aecm_comfort_noise_enabled_)) + sizeof(transient_suppression_enabled_));
  }
  if (cached_has_bits & 458752u) {
    ::memset(&ns_level_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pre_amplifier_fixed_gain_factor_) -
        reinterpret_cast<char*>(&ns_level_)) + sizeof(pre_amplifier_fixed_gain_factor_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:webrtc.audioproc.Config)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool aec_enabled = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_aec_enabled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &aec_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool aec_delay_agnostic_enabled = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_aec_delay_agnostic_enabled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &aec_delay_agnostic_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool aec_drift_compensation_enabled = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_aec_drift_compensation_enabled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &aec_drift_compensation_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool aec_extended_filter_enabled = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_aec_extended_filter_enabled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &aec_extended_filter_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 aec_suppression_level = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_aec_suppression_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &aec_suppression_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool aecm_enabled = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_aecm_enabled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &aecm_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool aecm_comfort_noise_enabled = 7 [deprecated = true];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_aecm_comfort_noise_enabled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &aecm_comfort_noise_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 aecm_routing_mode = 8 [deprecated = true];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_aecm_routing_mode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &aecm_routing_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool agc_enabled = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_agc_enabled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &agc_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 agc_mode = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_agc_mode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &agc_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool agc_limiter_enabled = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_agc_limiter_enabled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &agc_limiter_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool noise_robust_agc_enabled = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_noise_robust_agc_enabled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &noise_robust_agc_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool hpf_enabled = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_hpf_enabled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hpf_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool ns_enabled = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_ns_enabled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ns_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ns_level = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_ns_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ns_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool transient_suppression_enabled = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_transient_suppression_enabled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &transient_suppression_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string experiments_description = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_experiments_description()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool pre_amplifier_enabled = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          set_has_pre_amplifier_enabled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pre_amplifier_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float pre_amplifier_fixed_gain_factor = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(165u /* 165 & 0xFF */)) {
          set_has_pre_amplifier_fixed_gain_factor();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pre_amplifier_fixed_gain_factor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:webrtc.audioproc.Config)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:webrtc.audioproc.Config)
  return false;
#undef DO_
}

void Config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:webrtc.audioproc.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool aec_enabled = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->aec_enabled(), output);
  }

  // optional bool aec_delay_agnostic_enabled = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->aec_delay_agnostic_enabled(), output);
  }

  // optional bool aec_drift_compensation_enabled = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->aec_drift_compensation_enabled(), output);
  }

  // optional bool aec_extended_filter_enabled = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->aec_extended_filter_enabled(), output);
  }

  // optional int32 aec_suppression_level = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->aec_suppression_level(), output);
  }

  // optional bool aecm_enabled = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->aecm_enabled(), output);
  }

  // optional bool aecm_comfort_noise_enabled = 7 [deprecated = true];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->aecm_comfort_noise_enabled(), output);
  }

  // optional int32 aecm_routing_mode = 8 [deprecated = true];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->aecm_routing_mode(), output);
  }

  // optional bool agc_enabled = 9;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->agc_enabled(), output);
  }

  // optional int32 agc_mode = 10;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->agc_mode(), output);
  }

  // optional bool agc_limiter_enabled = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->agc_limiter_enabled(), output);
  }

  // optional bool noise_robust_agc_enabled = 12;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->noise_robust_agc_enabled(), output);
  }

  // optional bool hpf_enabled = 13;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->hpf_enabled(), output);
  }

  // optional bool ns_enabled = 14;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->ns_enabled(), output);
  }

  // optional int32 ns_level = 15;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->ns_level(), output);
  }

  // optional bool transient_suppression_enabled = 16;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->transient_suppression_enabled(), output);
  }

  // optional string experiments_description = 17;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->experiments_description(), output);
  }

  // optional bool pre_amplifier_enabled = 19;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->pre_amplifier_enabled(), output);
  }

  // optional float pre_amplifier_fixed_gain_factor = 20;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(20, this->pre_amplifier_fixed_gain_factor(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:webrtc.audioproc.Config)
}

size_t Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.audioproc.Config)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 255u) {
    // optional string experiments_description = 17;
    if (has_experiments_description()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->experiments_description());
    }

    // optional bool aec_enabled = 1;
    if (has_aec_enabled()) {
      total_size += 1 + 1;
    }

    // optional bool aec_delay_agnostic_enabled = 2;
    if (has_aec_delay_agnostic_enabled()) {
      total_size += 1 + 1;
    }

    // optional bool aec_drift_compensation_enabled = 3;
    if (has_aec_drift_compensation_enabled()) {
      total_size += 1 + 1;
    }

    // optional bool aec_extended_filter_enabled = 4;
    if (has_aec_extended_filter_enabled()) {
      total_size += 1 + 1;
    }

    // optional int32 aec_suppression_level = 5;
    if (has_aec_suppression_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->aec_suppression_level());
    }

    // optional int32 aecm_routing_mode = 8 [deprecated = true];
    if (has_aecm_routing_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->aecm_routing_mode());
    }

    // optional bool aecm_enabled = 6;
    if (has_aecm_enabled()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional bool aecm_comfort_noise_enabled = 7 [deprecated = true];
    if (has_aecm_comfort_noise_enabled()) {
      total_size += 1 + 1;
    }

    // optional bool agc_enabled = 9;
    if (has_agc_enabled()) {
      total_size += 1 + 1;
    }

    // optional bool agc_limiter_enabled = 11;
    if (has_agc_limiter_enabled()) {
      total_size += 1 + 1;
    }

    // optional int32 agc_mode = 10;
    if (has_agc_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->agc_mode());
    }

    // optional bool noise_robust_agc_enabled = 12;
    if (has_noise_robust_agc_enabled()) {
      total_size += 1 + 1;
    }

    // optional bool hpf_enabled = 13;
    if (has_hpf_enabled()) {
      total_size += 1 + 1;
    }

    // optional bool ns_enabled = 14;
    if (has_ns_enabled()) {
      total_size += 1 + 1;
    }

    // optional bool transient_suppression_enabled = 16;
    if (has_transient_suppression_enabled()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[16 / 32] & 458752u) {
    // optional int32 ns_level = 15;
    if (has_ns_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ns_level());
    }

    // optional bool pre_amplifier_enabled = 19;
    if (has_pre_amplifier_enabled()) {
      total_size += 2 + 1;
    }

    // optional float pre_amplifier_fixed_gain_factor = 20;
    if (has_pre_amplifier_fixed_gain_factor()) {
      total_size += 2 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Config::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Config*>(&from));
}

void Config::MergeFrom(const Config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.audioproc.Config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_experiments_description();
      experiments_description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.experiments_description_);
    }
    if (cached_has_bits & 0x00000002u) {
      aec_enabled_ = from.aec_enabled_;
    }
    if (cached_has_bits & 0x00000004u) {
      aec_delay_agnostic_enabled_ = from.aec_delay_agnostic_enabled_;
    }
    if (cached_has_bits & 0x00000008u) {
      aec_drift_compensation_enabled_ = from.aec_drift_compensation_enabled_;
    }
    if (cached_has_bits & 0x00000010u) {
      aec_extended_filter_enabled_ = from.aec_extended_filter_enabled_;
    }
    if (cached_has_bits & 0x00000020u) {
      aec_suppression_level_ = from.aec_suppression_level_;
    }
    if (cached_has_bits & 0x00000040u) {
      aecm_routing_mode_ = from.aecm_routing_mode_;
    }
    if (cached_has_bits & 0x00000080u) {
      aecm_enabled_ = from.aecm_enabled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      aecm_comfort_noise_enabled_ = from.aecm_comfort_noise_enabled_;
    }
    if (cached_has_bits & 0x00000200u) {
      agc_enabled_ = from.agc_enabled_;
    }
    if (cached_has_bits & 0x00000400u) {
      agc_limiter_enabled_ = from.agc_limiter_enabled_;
    }
    if (cached_has_bits & 0x00000800u) {
      agc_mode_ = from.agc_mode_;
    }
    if (cached_has_bits & 0x00001000u) {
      noise_robust_agc_enabled_ = from.noise_robust_agc_enabled_;
    }
    if (cached_has_bits & 0x00002000u) {
      hpf_enabled_ = from.hpf_enabled_;
    }
    if (cached_has_bits & 0x00004000u) {
      ns_enabled_ = from.ns_enabled_;
    }
    if (cached_has_bits & 0x00008000u) {
      transient_suppression_enabled_ = from.transient_suppression_enabled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 458752u) {
    if (cached_has_bits & 0x00010000u) {
      ns_level_ = from.ns_level_;
    }
    if (cached_has_bits & 0x00020000u) {
      pre_amplifier_enabled_ = from.pre_amplifier_enabled_;
    }
    if (cached_has_bits & 0x00040000u) {
      pre_amplifier_fixed_gain_factor_ = from.pre_amplifier_fixed_gain_factor_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Config::CopyFrom(const Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.audioproc.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Config::IsInitialized() const {
  return true;
}

void Config::Swap(Config* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Config::InternalSwap(Config* other) {
  using std::swap;
  experiments_description_.Swap(&other->experiments_description_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(aec_enabled_, other->aec_enabled_);
  swap(aec_delay_agnostic_enabled_, other->aec_delay_agnostic_enabled_);
  swap(aec_drift_compensation_enabled_, other->aec_drift_compensation_enabled_);
  swap(aec_extended_filter_enabled_, other->aec_extended_filter_enabled_);
  swap(aec_suppression_level_, other->aec_suppression_level_);
  swap(aecm_routing_mode_, other->aecm_routing_mode_);
  swap(aecm_enabled_, other->aecm_enabled_);
  swap(aecm_comfort_noise_enabled_, other->aecm_comfort_noise_enabled_);
  swap(agc_enabled_, other->agc_enabled_);
  swap(agc_limiter_enabled_, other->agc_limiter_enabled_);
  swap(agc_mode_, other->agc_mode_);
  swap(noise_robust_agc_enabled_, other->noise_robust_agc_enabled_);
  swap(hpf_enabled_, other->hpf_enabled_);
  swap(ns_enabled_, other->ns_enabled_);
  swap(transient_suppression_enabled_, other->transient_suppression_enabled_);
  swap(ns_level_, other->ns_level_);
  swap(pre_amplifier_enabled_, other->pre_amplifier_enabled_);
  swap(pre_amplifier_fixed_gain_factor_, other->pre_amplifier_fixed_gain_factor_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Config::GetTypeName() const {
  return "webrtc.audioproc.Config";
}


// ===================================================================

void RuntimeSetting::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RuntimeSetting::kCapturePreGainFieldNumber;
const int RuntimeSetting::kCustomRenderProcessingSettingFieldNumber;
const int RuntimeSetting::kCaptureFixedPostGainFieldNumber;
const int RuntimeSetting::kPlayoutVolumeChangeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RuntimeSetting::RuntimeSetting()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_debug_2eproto::scc_info_RuntimeSetting.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:webrtc.audioproc.RuntimeSetting)
}
RuntimeSetting::RuntimeSetting(const RuntimeSetting& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&capture_pre_gain_, &from.capture_pre_gain_,
    static_cast<size_t>(reinterpret_cast<char*>(&playout_volume_change_) -
    reinterpret_cast<char*>(&capture_pre_gain_)) + sizeof(playout_volume_change_));
  // @@protoc_insertion_point(copy_constructor:webrtc.audioproc.RuntimeSetting)
}

void RuntimeSetting::SharedCtor() {
  ::memset(&capture_pre_gain_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&playout_volume_change_) -
      reinterpret_cast<char*>(&capture_pre_gain_)) + sizeof(playout_volume_change_));
}

RuntimeSetting::~RuntimeSetting() {
  // @@protoc_insertion_point(destructor:webrtc.audioproc.RuntimeSetting)
  SharedDtor();
}

void RuntimeSetting::SharedDtor() {
}

void RuntimeSetting::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RuntimeSetting& RuntimeSetting::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_debug_2eproto::scc_info_RuntimeSetting.base);
  return *internal_default_instance();
}


void RuntimeSetting::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.audioproc.RuntimeSetting)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&capture_pre_gain_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&playout_volume_change_) -
        reinterpret_cast<char*>(&capture_pre_gain_)) + sizeof(playout_volume_change_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RuntimeSetting::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:webrtc.audioproc.RuntimeSetting)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float capture_pre_gain = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_capture_pre_gain();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &capture_pre_gain_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float custom_render_processing_setting = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_custom_render_processing_setting();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &custom_render_processing_setting_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float capture_fixed_post_gain = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_capture_fixed_post_gain();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &capture_fixed_post_gain_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 playout_volume_change = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_playout_volume_change();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playout_volume_change_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:webrtc.audioproc.RuntimeSetting)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:webrtc.audioproc.RuntimeSetting)
  return false;
#undef DO_
}

void RuntimeSetting::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:webrtc.audioproc.RuntimeSetting)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float capture_pre_gain = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->capture_pre_gain(), output);
  }

  // optional float custom_render_processing_setting = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->custom_render_processing_setting(), output);
  }

  // optional float capture_fixed_post_gain = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->capture_fixed_post_gain(), output);
  }

  // optional int32 playout_volume_change = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->playout_volume_change(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:webrtc.audioproc.RuntimeSetting)
}

size_t RuntimeSetting::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.audioproc.RuntimeSetting)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 15u) {
    // optional float capture_pre_gain = 1;
    if (has_capture_pre_gain()) {
      total_size += 1 + 4;
    }

    // optional float custom_render_processing_setting = 2;
    if (has_custom_render_processing_setting()) {
      total_size += 1 + 4;
    }

    // optional float capture_fixed_post_gain = 3;
    if (has_capture_fixed_post_gain()) {
      total_size += 1 + 4;
    }

    // optional int32 playout_volume_change = 4;
    if (has_playout_volume_change()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playout_volume_change());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RuntimeSetting::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RuntimeSetting*>(&from));
}

void RuntimeSetting::MergeFrom(const RuntimeSetting& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.audioproc.RuntimeSetting)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      capture_pre_gain_ = from.capture_pre_gain_;
    }
    if (cached_has_bits & 0x00000002u) {
      custom_render_processing_setting_ = from.custom_render_processing_setting_;
    }
    if (cached_has_bits & 0x00000004u) {
      capture_fixed_post_gain_ = from.capture_fixed_post_gain_;
    }
    if (cached_has_bits & 0x00000008u) {
      playout_volume_change_ = from.playout_volume_change_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RuntimeSetting::CopyFrom(const RuntimeSetting& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.audioproc.RuntimeSetting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RuntimeSetting::IsInitialized() const {
  return true;
}

void RuntimeSetting::Swap(RuntimeSetting* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RuntimeSetting::InternalSwap(RuntimeSetting* other) {
  using std::swap;
  swap(capture_pre_gain_, other->capture_pre_gain_);
  swap(custom_render_processing_setting_, other->custom_render_processing_setting_);
  swap(capture_fixed_post_gain_, other->capture_fixed_post_gain_);
  swap(playout_volume_change_, other->playout_volume_change_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string RuntimeSetting::GetTypeName() const {
  return "webrtc.audioproc.RuntimeSetting";
}


// ===================================================================

void Event::InitAsDefaultInstance() {
  ::webrtc::audioproc::_Event_default_instance_._instance.get_mutable()->init_ = const_cast< ::webrtc::audioproc::Init*>(
      ::webrtc::audioproc::Init::internal_default_instance());
  ::webrtc::audioproc::_Event_default_instance_._instance.get_mutable()->reverse_stream_ = const_cast< ::webrtc::audioproc::ReverseStream*>(
      ::webrtc::audioproc::ReverseStream::internal_default_instance());
  ::webrtc::audioproc::_Event_default_instance_._instance.get_mutable()->stream_ = const_cast< ::webrtc::audioproc::Stream*>(
      ::webrtc::audioproc::Stream::internal_default_instance());
  ::webrtc::audioproc::_Event_default_instance_._instance.get_mutable()->config_ = const_cast< ::webrtc::audioproc::Config*>(
      ::webrtc::audioproc::Config::internal_default_instance());
  ::webrtc::audioproc::_Event_default_instance_._instance.get_mutable()->runtime_setting_ = const_cast< ::webrtc::audioproc::RuntimeSetting*>(
      ::webrtc::audioproc::RuntimeSetting::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Event::kTypeFieldNumber;
const int Event::kInitFieldNumber;
const int Event::kReverseStreamFieldNumber;
const int Event::kStreamFieldNumber;
const int Event::kConfigFieldNumber;
const int Event::kRuntimeSettingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Event::Event()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_debug_2eproto::scc_info_Event.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:webrtc.audioproc.Event)
}
Event::Event(const Event& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_init()) {
    init_ = new ::webrtc::audioproc::Init(*from.init_);
  } else {
    init_ = NULL;
  }
  if (from.has_reverse_stream()) {
    reverse_stream_ = new ::webrtc::audioproc::ReverseStream(*from.reverse_stream_);
  } else {
    reverse_stream_ = NULL;
  }
  if (from.has_stream()) {
    stream_ = new ::webrtc::audioproc::Stream(*from.stream_);
  } else {
    stream_ = NULL;
  }
  if (from.has_config()) {
    config_ = new ::webrtc::audioproc::Config(*from.config_);
  } else {
    config_ = NULL;
  }
  if (from.has_runtime_setting()) {
    runtime_setting_ = new ::webrtc::audioproc::RuntimeSetting(*from.runtime_setting_);
  } else {
    runtime_setting_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:webrtc.audioproc.Event)
}

void Event::SharedCtor() {
  ::memset(&init_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&init_)) + sizeof(type_));
}

Event::~Event() {
  // @@protoc_insertion_point(destructor:webrtc.audioproc.Event)
  SharedDtor();
}

void Event::SharedDtor() {
  if (this != internal_default_instance()) delete init_;
  if (this != internal_default_instance()) delete reverse_stream_;
  if (this != internal_default_instance()) delete stream_;
  if (this != internal_default_instance()) delete config_;
  if (this != internal_default_instance()) delete runtime_setting_;
}

void Event::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Event& Event::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_debug_2eproto::scc_info_Event.base);
  return *internal_default_instance();
}


void Event::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.audioproc.Event)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(init_ != NULL);
      init_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(reverse_stream_ != NULL);
      reverse_stream_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(stream_ != NULL);
      stream_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(config_ != NULL);
      config_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(runtime_setting_ != NULL);
      runtime_setting_->Clear();
    }
  }
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Event::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:webrtc.audioproc.Event)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .webrtc.audioproc.Event.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::webrtc::audioproc::Event_Type_IsValid(value)) {
            set_type(static_cast< ::webrtc::audioproc::Event_Type >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .webrtc.audioproc.Init init = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_init()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .webrtc.audioproc.ReverseStream reverse_stream = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_reverse_stream()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .webrtc.audioproc.Stream stream = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_stream()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .webrtc.audioproc.Config config = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .webrtc.audioproc.RuntimeSetting runtime_setting = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_runtime_setting()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:webrtc.audioproc.Event)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:webrtc.audioproc.Event)
  return false;
#undef DO_
}

void Event::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:webrtc.audioproc.Event)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .webrtc.audioproc.Event.Type type = 1;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .webrtc.audioproc.Init init = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->_internal_init(), output);
  }

  // optional .webrtc.audioproc.ReverseStream reverse_stream = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->_internal_reverse_stream(), output);
  }

  // optional .webrtc.audioproc.Stream stream = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->_internal_stream(), output);
  }

  // optional .webrtc.audioproc.Config config = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->_internal_config(), output);
  }

  // optional .webrtc.audioproc.RuntimeSetting runtime_setting = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->_internal_runtime_setting(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:webrtc.audioproc.Event)
}

size_t Event::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.audioproc.Event)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required .webrtc.audioproc.Event.Type type = 1;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional .webrtc.audioproc.Init init = 2;
    if (has_init()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *init_);
    }

    // optional .webrtc.audioproc.ReverseStream reverse_stream = 3;
    if (has_reverse_stream()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *reverse_stream_);
    }

    // optional .webrtc.audioproc.Stream stream = 4;
    if (has_stream()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *stream_);
    }

    // optional .webrtc.audioproc.Config config = 5;
    if (has_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *config_);
    }

    // optional .webrtc.audioproc.RuntimeSetting runtime_setting = 6;
    if (has_runtime_setting()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *runtime_setting_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Event::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Event*>(&from));
}

void Event::MergeFrom(const Event& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.audioproc.Event)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_init()->::webrtc::audioproc::Init::MergeFrom(from.init());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_reverse_stream()->::webrtc::audioproc::ReverseStream::MergeFrom(from.reverse_stream());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_stream()->::webrtc::audioproc::Stream::MergeFrom(from.stream());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_config()->::webrtc::audioproc::Config::MergeFrom(from.config());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_runtime_setting()->::webrtc::audioproc::RuntimeSetting::MergeFrom(from.runtime_setting());
    }
    if (cached_has_bits & 0x00000020u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Event::CopyFrom(const Event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.audioproc.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000020) != 0x00000020) return false;
  return true;
}

void Event::Swap(Event* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Event::InternalSwap(Event* other) {
  using std::swap;
  swap(init_, other->init_);
  swap(reverse_stream_, other->reverse_stream_);
  swap(stream_, other->stream_);
  swap(config_, other->config_);
  swap(runtime_setting_, other->runtime_setting_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Event::GetTypeName() const {
  return "webrtc.audioproc.Event";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace audioproc
}  // namespace webrtc
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::webrtc::audioproc::Init* Arena::CreateMaybeMessage< ::webrtc::audioproc::Init >(Arena* arena) {
  return Arena::CreateInternal< ::webrtc::audioproc::Init >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::webrtc::audioproc::ReverseStream* Arena::CreateMaybeMessage< ::webrtc::audioproc::ReverseStream >(Arena* arena) {
  return Arena::CreateInternal< ::webrtc::audioproc::ReverseStream >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::webrtc::audioproc::Stream* Arena::CreateMaybeMessage< ::webrtc::audioproc::Stream >(Arena* arena) {
  return Arena::CreateInternal< ::webrtc::audioproc::Stream >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::webrtc::audioproc::Config* Arena::CreateMaybeMessage< ::webrtc::audioproc::Config >(Arena* arena) {
  return Arena::CreateInternal< ::webrtc::audioproc::Config >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::webrtc::audioproc::RuntimeSetting* Arena::CreateMaybeMessage< ::webrtc::audioproc::RuntimeSetting >(Arena* arena) {
  return Arena::CreateInternal< ::webrtc::audioproc::RuntimeSetting >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::webrtc::audioproc::Event* Arena::CreateMaybeMessage< ::webrtc::audioproc::Event >(Arena* arena) {
  return Arena::CreateInternal< ::webrtc::audioproc::Event >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
