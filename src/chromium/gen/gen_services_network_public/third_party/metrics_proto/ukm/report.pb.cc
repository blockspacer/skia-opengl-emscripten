// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ukm/report.proto

#include "ukm/report.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_system_5fprofile_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_system_5fprofile_2eproto ::google::protobuf::internal::SCCInfo<13> scc_info_SystemProfileProto;
}  // namespace protobuf_system_5fprofile_2eproto
namespace protobuf_ukm_2faggregate_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ukm_2faggregate_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Aggregate;
}  // namespace protobuf_ukm_2faggregate_2eproto
namespace protobuf_ukm_2fentry_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ukm_2fentry_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Entry;
}  // namespace protobuf_ukm_2fentry_2eproto
namespace protobuf_ukm_2freport_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ukm_2freport_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Report_SourceCounts;
}  // namespace protobuf_ukm_2freport_2eproto
namespace protobuf_ukm_2fsource_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ukm_2fsource_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Source;
}  // namespace protobuf_ukm_2fsource_2eproto
namespace ukm {
class Report_SourceCountsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Report_SourceCounts>
      _instance;
} _Report_SourceCounts_default_instance_;
class ReportDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Report>
      _instance;
} _Report_default_instance_;
}  // namespace ukm
namespace protobuf_ukm_2freport_2eproto {
static void InitDefaultsReport_SourceCounts() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ukm::_Report_SourceCounts_default_instance_;
    new (ptr) ::ukm::Report_SourceCounts();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ukm::Report_SourceCounts::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Report_SourceCounts =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsReport_SourceCounts}, {}};

static void InitDefaultsReport() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ukm::_Report_default_instance_;
    new (ptr) ::ukm::Report();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ukm::Report::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<5> scc_info_Report =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsReport}, {
      &protobuf_system_5fprofile_2eproto::scc_info_SystemProfileProto.base,
      &protobuf_ukm_2fsource_2eproto::scc_info_Source.base,
      &protobuf_ukm_2freport_2eproto::scc_info_Report_SourceCounts.base,
      &protobuf_ukm_2fentry_2eproto::scc_info_Entry.base,
      &protobuf_ukm_2faggregate_2eproto::scc_info_Aggregate.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Report_SourceCounts.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Report.base);
}

}  // namespace protobuf_ukm_2freport_2eproto
namespace ukm {
bool Report_LogRotationReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Report_LogRotationReason Report::UNKNOWN;
const Report_LogRotationReason Report::SCHEDULED_ROTATION;
const Report_LogRotationReason Report::BACKGROUNDED;
const Report_LogRotationReason Report::SHUTDOWN;
const Report_LogRotationReason Report::LogRotationReason_MIN;
const Report_LogRotationReason Report::LogRotationReason_MAX;
const int Report::LogRotationReason_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void Report_SourceCounts::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Report_SourceCounts::kObservedFieldNumber;
const int Report_SourceCounts::kNavigationSourcesFieldNumber;
const int Report_SourceCounts::kUnmatchedSourcesFieldNumber;
const int Report_SourceCounts::kCarryoverSourcesFieldNumber;
const int Report_SourceCounts::kDeferredSourcesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Report_SourceCounts::Report_SourceCounts()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ukm_2freport_2eproto::scc_info_Report_SourceCounts.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ukm.Report.SourceCounts)
}
Report_SourceCounts::Report_SourceCounts(const Report_SourceCounts& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&observed_, &from.observed_,
    static_cast<size_t>(reinterpret_cast<char*>(&deferred_sources_) -
    reinterpret_cast<char*>(&observed_)) + sizeof(deferred_sources_));
  // @@protoc_insertion_point(copy_constructor:ukm.Report.SourceCounts)
}

void Report_SourceCounts::SharedCtor() {
  ::memset(&observed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&deferred_sources_) -
      reinterpret_cast<char*>(&observed_)) + sizeof(deferred_sources_));
}

Report_SourceCounts::~Report_SourceCounts() {
  // @@protoc_insertion_point(destructor:ukm.Report.SourceCounts)
  SharedDtor();
}

void Report_SourceCounts::SharedDtor() {
}

void Report_SourceCounts::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Report_SourceCounts& Report_SourceCounts::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ukm_2freport_2eproto::scc_info_Report_SourceCounts.base);
  return *internal_default_instance();
}


void Report_SourceCounts::Clear() {
// @@protoc_insertion_point(message_clear_start:ukm.Report.SourceCounts)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    ::memset(&observed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&deferred_sources_) -
        reinterpret_cast<char*>(&observed_)) + sizeof(deferred_sources_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Report_SourceCounts::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:ukm.Report.SourceCounts)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 observed = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_observed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &observed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 navigation_sources = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_navigation_sources();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &navigation_sources_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 unmatched_sources = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_unmatched_sources();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unmatched_sources_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 carryover_sources = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_carryover_sources();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &carryover_sources_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 deferred_sources = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_deferred_sources();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deferred_sources_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ukm.Report.SourceCounts)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ukm.Report.SourceCounts)
  return false;
#undef DO_
}

void Report_SourceCounts::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ukm.Report.SourceCounts)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 observed = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->observed(), output);
  }

  // optional int32 navigation_sources = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->navigation_sources(), output);
  }

  // optional int32 unmatched_sources = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->unmatched_sources(), output);
  }

  // optional int32 carryover_sources = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->carryover_sources(), output);
  }

  // optional int32 deferred_sources = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->deferred_sources(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:ukm.Report.SourceCounts)
}

size_t Report_SourceCounts::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ukm.Report.SourceCounts)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 31u) {
    // optional int32 observed = 1;
    if (has_observed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->observed());
    }

    // optional int32 navigation_sources = 2;
    if (has_navigation_sources()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->navigation_sources());
    }

    // optional int32 unmatched_sources = 3;
    if (has_unmatched_sources()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->unmatched_sources());
    }

    // optional int32 carryover_sources = 4;
    if (has_carryover_sources()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->carryover_sources());
    }

    // optional int32 deferred_sources = 5;
    if (has_deferred_sources()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->deferred_sources());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Report_SourceCounts::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Report_SourceCounts*>(&from));
}

void Report_SourceCounts::MergeFrom(const Report_SourceCounts& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ukm.Report.SourceCounts)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      observed_ = from.observed_;
    }
    if (cached_has_bits & 0x00000002u) {
      navigation_sources_ = from.navigation_sources_;
    }
    if (cached_has_bits & 0x00000004u) {
      unmatched_sources_ = from.unmatched_sources_;
    }
    if (cached_has_bits & 0x00000008u) {
      carryover_sources_ = from.carryover_sources_;
    }
    if (cached_has_bits & 0x00000010u) {
      deferred_sources_ = from.deferred_sources_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Report_SourceCounts::CopyFrom(const Report_SourceCounts& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ukm.Report.SourceCounts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Report_SourceCounts::IsInitialized() const {
  return true;
}

void Report_SourceCounts::Swap(Report_SourceCounts* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Report_SourceCounts::InternalSwap(Report_SourceCounts* other) {
  using std::swap;
  swap(observed_, other->observed_);
  swap(navigation_sources_, other->navigation_sources_);
  swap(unmatched_sources_, other->unmatched_sources_);
  swap(carryover_sources_, other->carryover_sources_);
  swap(deferred_sources_, other->deferred_sources_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Report_SourceCounts::GetTypeName() const {
  return "ukm.Report.SourceCounts";
}


// ===================================================================

void Report::InitAsDefaultInstance() {
  ::ukm::_Report_default_instance_._instance.get_mutable()->system_profile_ = const_cast< ::metrics::SystemProfileProto*>(
      ::metrics::SystemProfileProto::internal_default_instance());
  ::ukm::_Report_default_instance_._instance.get_mutable()->source_counts_ = const_cast< ::ukm::Report_SourceCounts*>(
      ::ukm::Report_SourceCounts::internal_default_instance());
}
void Report::clear_system_profile() {
  if (system_profile_ != NULL) system_profile_->Clear();
  clear_has_system_profile();
}
void Report::clear_sources() {
  sources_.Clear();
}
void Report::clear_entries() {
  entries_.Clear();
}
void Report::clear_aggregates() {
  aggregates_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Report::kClientIdFieldNumber;
const int Report::kSessionIdFieldNumber;
const int Report::kReportIdFieldNumber;
const int Report::kIsContinuousFieldNumber;
const int Report::kLogRotationReasonFieldNumber;
const int Report::kSystemProfileFieldNumber;
const int Report::kSourcesFieldNumber;
const int Report::kSourceCountsFieldNumber;
const int Report::kEntriesFieldNumber;
const int Report::kAggregatesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Report::Report()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ukm_2freport_2eproto::scc_info_Report.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ukm.Report)
}
Report::Report(const Report& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      sources_(from.sources_),
      entries_(from.entries_),
      aggregates_(from.aggregates_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_system_profile()) {
    system_profile_ = new ::metrics::SystemProfileProto(*from.system_profile_);
  } else {
    system_profile_ = NULL;
  }
  if (from.has_source_counts()) {
    source_counts_ = new ::ukm::Report_SourceCounts(*from.source_counts_);
  } else {
    source_counts_ = NULL;
  }
  ::memcpy(&client_id_, &from.client_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&log_rotation_reason_) -
    reinterpret_cast<char*>(&client_id_)) + sizeof(log_rotation_reason_));
  // @@protoc_insertion_point(copy_constructor:ukm.Report)
}

void Report::SharedCtor() {
  ::memset(&system_profile_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&log_rotation_reason_) -
      reinterpret_cast<char*>(&system_profile_)) + sizeof(log_rotation_reason_));
}

Report::~Report() {
  // @@protoc_insertion_point(destructor:ukm.Report)
  SharedDtor();
}

void Report::SharedDtor() {
  if (this != internal_default_instance()) delete system_profile_;
  if (this != internal_default_instance()) delete source_counts_;
}

void Report::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Report& Report::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ukm_2freport_2eproto::scc_info_Report.base);
  return *internal_default_instance();
}


void Report::Clear() {
// @@protoc_insertion_point(message_clear_start:ukm.Report)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sources_.Clear();
  entries_.Clear();
  aggregates_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(system_profile_ != NULL);
      system_profile_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(source_counts_ != NULL);
      source_counts_->Clear();
    }
  }
  if (cached_has_bits & 124u) {
    ::memset(&client_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&log_rotation_reason_) -
        reinterpret_cast<char*>(&client_id_)) + sizeof(log_rotation_reason_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Report::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:ukm.Report)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 client_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_client_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &client_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .metrics.SystemProfileProto system_profile = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_system_profile()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ukm.Source sources = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_sources()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ukm.Entry entries = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_entries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 session_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_session_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &session_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 report_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_report_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &report_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ukm.Aggregate aggregates = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_aggregates()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_continuous = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_is_continuous();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_continuous_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ukm.Report.LogRotationReason log_rotation_reason = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ukm::Report_LogRotationReason_IsValid(value)) {
            set_log_rotation_reason(static_cast< ::ukm::Report_LogRotationReason >(value));
          } else {
            unknown_fields_stream.WriteVarint32(72u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ukm.Report.SourceCounts source_counts = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_source_counts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ukm.Report)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ukm.Report)
  return false;
#undef DO_
}

void Report::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ukm.Report)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 client_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->client_id(), output);
  }

  // optional .metrics.SystemProfileProto system_profile = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->_internal_system_profile(), output);
  }

  // repeated .ukm.Source sources = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sources_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3,
      this->sources(static_cast<int>(i)),
      output);
  }

  // repeated .ukm.Entry entries = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->entries_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4,
      this->entries(static_cast<int>(i)),
      output);
  }

  // optional int32 session_id = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->session_id(), output);
  }

  // optional int32 report_id = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->report_id(), output);
  }

  // repeated .ukm.Aggregate aggregates = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->aggregates_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7,
      this->aggregates(static_cast<int>(i)),
      output);
  }

  // optional bool is_continuous = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->is_continuous(), output);
  }

  // optional .ukm.Report.LogRotationReason log_rotation_reason = 9;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->log_rotation_reason(), output);
  }

  // optional .ukm.Report.SourceCounts source_counts = 10;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, this->_internal_source_counts(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:ukm.Report)
}

size_t Report::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ukm.Report)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // repeated .ukm.Source sources = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->sources_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->sources(static_cast<int>(i)));
    }
  }

  // repeated .ukm.Entry entries = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->entries_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->entries(static_cast<int>(i)));
    }
  }

  // repeated .ukm.Aggregate aggregates = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->aggregates_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->aggregates(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 127u) {
    // optional .metrics.SystemProfileProto system_profile = 2;
    if (has_system_profile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *system_profile_);
    }

    // optional .ukm.Report.SourceCounts source_counts = 10;
    if (has_source_counts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *source_counts_);
    }

    // optional fixed64 client_id = 1;
    if (has_client_id()) {
      total_size += 1 + 8;
    }

    // optional int32 session_id = 5;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->session_id());
    }

    // optional int32 report_id = 6;
    if (has_report_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->report_id());
    }

    // optional bool is_continuous = 8;
    if (has_is_continuous()) {
      total_size += 1 + 1;
    }

    // optional .ukm.Report.LogRotationReason log_rotation_reason = 9;
    if (has_log_rotation_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->log_rotation_reason());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Report::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Report*>(&from));
}

void Report::MergeFrom(const Report& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ukm.Report)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sources_.MergeFrom(from.sources_);
  entries_.MergeFrom(from.entries_);
  aggregates_.MergeFrom(from.aggregates_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_system_profile()->::metrics::SystemProfileProto::MergeFrom(from.system_profile());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_source_counts()->::ukm::Report_SourceCounts::MergeFrom(from.source_counts());
    }
    if (cached_has_bits & 0x00000004u) {
      client_id_ = from.client_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      session_id_ = from.session_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      report_id_ = from.report_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_continuous_ = from.is_continuous_;
    }
    if (cached_has_bits & 0x00000040u) {
      log_rotation_reason_ = from.log_rotation_reason_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Report::CopyFrom(const Report& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ukm.Report)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Report::IsInitialized() const {
  return true;
}

void Report::Swap(Report* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Report::InternalSwap(Report* other) {
  using std::swap;
  CastToBase(&sources_)->InternalSwap(CastToBase(&other->sources_));
  CastToBase(&entries_)->InternalSwap(CastToBase(&other->entries_));
  CastToBase(&aggregates_)->InternalSwap(CastToBase(&other->aggregates_));
  swap(system_profile_, other->system_profile_);
  swap(source_counts_, other->source_counts_);
  swap(client_id_, other->client_id_);
  swap(session_id_, other->session_id_);
  swap(report_id_, other->report_id_);
  swap(is_continuous_, other->is_continuous_);
  swap(log_rotation_reason_, other->log_rotation_reason_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Report::GetTypeName() const {
  return "ukm.Report";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ukm
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ukm::Report_SourceCounts* Arena::CreateMaybeMessage< ::ukm::Report_SourceCounts >(Arena* arena) {
  return Arena::CreateInternal< ::ukm::Report_SourceCounts >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ukm::Report* Arena::CreateMaybeMessage< ::ukm::Report >(Arena* arena) {
  return Arena::CreateInternal< ::ukm::Report >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
