// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: perfetto/trace/chrome/chrome_trace_event.proto

#ifndef PROTOBUF_INCLUDED_perfetto_2ftrace_2fchrome_2fchrome_5ftrace_5fevent_2eproto
#define PROTOBUF_INCLUDED_perfetto_2ftrace_2fchrome_2fchrome_5ftrace_5fevent_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_perfetto_2ftrace_2fchrome_2fchrome_5ftrace_5fevent_2eproto 

namespace protobuf_perfetto_2ftrace_2fchrome_2fchrome_5ftrace_5fevent_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[7];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
}  // namespace protobuf_perfetto_2ftrace_2fchrome_2fchrome_5ftrace_5fevent_2eproto
namespace perfetto {
namespace protos {
class ChromeEventBundle;
class ChromeEventBundleDefaultTypeInternal;
extern ChromeEventBundleDefaultTypeInternal _ChromeEventBundle_default_instance_;
class ChromeLegacyJsonTrace;
class ChromeLegacyJsonTraceDefaultTypeInternal;
extern ChromeLegacyJsonTraceDefaultTypeInternal _ChromeLegacyJsonTrace_default_instance_;
class ChromeMetadata;
class ChromeMetadataDefaultTypeInternal;
extern ChromeMetadataDefaultTypeInternal _ChromeMetadata_default_instance_;
class ChromeStringTableEntry;
class ChromeStringTableEntryDefaultTypeInternal;
extern ChromeStringTableEntryDefaultTypeInternal _ChromeStringTableEntry_default_instance_;
class ChromeTraceEvent;
class ChromeTraceEventDefaultTypeInternal;
extern ChromeTraceEventDefaultTypeInternal _ChromeTraceEvent_default_instance_;
class ChromeTraceEvent_Arg;
class ChromeTraceEvent_ArgDefaultTypeInternal;
extern ChromeTraceEvent_ArgDefaultTypeInternal _ChromeTraceEvent_Arg_default_instance_;
class ChromeTracedValue;
class ChromeTracedValueDefaultTypeInternal;
extern ChromeTracedValueDefaultTypeInternal _ChromeTracedValue_default_instance_;
}  // namespace protos
}  // namespace perfetto
namespace google {
namespace protobuf {
template<> ::perfetto::protos::ChromeEventBundle* Arena::CreateMaybeMessage<::perfetto::protos::ChromeEventBundle>(Arena*);
template<> ::perfetto::protos::ChromeLegacyJsonTrace* Arena::CreateMaybeMessage<::perfetto::protos::ChromeLegacyJsonTrace>(Arena*);
template<> ::perfetto::protos::ChromeMetadata* Arena::CreateMaybeMessage<::perfetto::protos::ChromeMetadata>(Arena*);
template<> ::perfetto::protos::ChromeStringTableEntry* Arena::CreateMaybeMessage<::perfetto::protos::ChromeStringTableEntry>(Arena*);
template<> ::perfetto::protos::ChromeTraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::ChromeTraceEvent>(Arena*);
template<> ::perfetto::protos::ChromeTraceEvent_Arg* Arena::CreateMaybeMessage<::perfetto::protos::ChromeTraceEvent_Arg>(Arena*);
template<> ::perfetto::protos::ChromeTracedValue* Arena::CreateMaybeMessage<::perfetto::protos::ChromeTracedValue>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace perfetto {
namespace protos {

enum ChromeTracedValue_NestedType {
  ChromeTracedValue_NestedType_DICT = 0,
  ChromeTracedValue_NestedType_ARRAY = 1
};
bool ChromeTracedValue_NestedType_IsValid(int value);
const ChromeTracedValue_NestedType ChromeTracedValue_NestedType_NestedType_MIN = ChromeTracedValue_NestedType_DICT;
const ChromeTracedValue_NestedType ChromeTracedValue_NestedType_NestedType_MAX = ChromeTracedValue_NestedType_ARRAY;
const int ChromeTracedValue_NestedType_NestedType_ARRAYSIZE = ChromeTracedValue_NestedType_NestedType_MAX + 1;

enum ChromeLegacyJsonTrace_TraceType {
  ChromeLegacyJsonTrace_TraceType_USER_TRACE = 0,
  ChromeLegacyJsonTrace_TraceType_SYSTEM_TRACE = 1
};
bool ChromeLegacyJsonTrace_TraceType_IsValid(int value);
const ChromeLegacyJsonTrace_TraceType ChromeLegacyJsonTrace_TraceType_TraceType_MIN = ChromeLegacyJsonTrace_TraceType_USER_TRACE;
const ChromeLegacyJsonTrace_TraceType ChromeLegacyJsonTrace_TraceType_TraceType_MAX = ChromeLegacyJsonTrace_TraceType_SYSTEM_TRACE;
const int ChromeLegacyJsonTrace_TraceType_TraceType_ARRAYSIZE = ChromeLegacyJsonTrace_TraceType_TraceType_MAX + 1;

// ===================================================================

class ChromeTracedValue : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.ChromeTracedValue) */ {
 public:
  ChromeTracedValue();
  virtual ~ChromeTracedValue();

  ChromeTracedValue(const ChromeTracedValue& from);

  inline ChromeTracedValue& operator=(const ChromeTracedValue& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChromeTracedValue(ChromeTracedValue&& from) noexcept
    : ChromeTracedValue() {
    *this = ::std::move(from);
  }

  inline ChromeTracedValue& operator=(ChromeTracedValue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ChromeTracedValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChromeTracedValue* internal_default_instance() {
    return reinterpret_cast<const ChromeTracedValue*>(
               &_ChromeTracedValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(ChromeTracedValue* other);
  friend void swap(ChromeTracedValue& a, ChromeTracedValue& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChromeTracedValue* New() const final {
    return CreateMaybeMessage<ChromeTracedValue>(NULL);
  }

  ChromeTracedValue* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ChromeTracedValue>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const ChromeTracedValue& from);
  void MergeFrom(const ChromeTracedValue& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ChromeTracedValue* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ChromeTracedValue_NestedType NestedType;
  static const NestedType DICT =
    ChromeTracedValue_NestedType_DICT;
  static const NestedType ARRAY =
    ChromeTracedValue_NestedType_ARRAY;
  static inline bool NestedType_IsValid(int value) {
    return ChromeTracedValue_NestedType_IsValid(value);
  }
  static const NestedType NestedType_MIN =
    ChromeTracedValue_NestedType_NestedType_MIN;
  static const NestedType NestedType_MAX =
    ChromeTracedValue_NestedType_NestedType_MAX;
  static const int NestedType_ARRAYSIZE =
    ChromeTracedValue_NestedType_NestedType_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // repeated string dict_keys = 2;
  int dict_keys_size() const;
  void clear_dict_keys();
  static const int kDictKeysFieldNumber = 2;
  const ::std::string& dict_keys(int index) const;
  ::std::string* mutable_dict_keys(int index);
  void set_dict_keys(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_dict_keys(int index, ::std::string&& value);
  #endif
  void set_dict_keys(int index, const char* value);
  void set_dict_keys(int index, const char* value, size_t size);
  ::std::string* add_dict_keys();
  void add_dict_keys(const ::std::string& value);
  #if LANG_CXX11
  void add_dict_keys(::std::string&& value);
  #endif
  void add_dict_keys(const char* value);
  void add_dict_keys(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& dict_keys() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_dict_keys();

  // repeated .perfetto.protos.ChromeTracedValue dict_values = 3;
  int dict_values_size() const;
  void clear_dict_values();
  static const int kDictValuesFieldNumber = 3;
  ::perfetto::protos::ChromeTracedValue* mutable_dict_values(int index);
  ::google::protobuf::RepeatedPtrField< ::perfetto::protos::ChromeTracedValue >*
      mutable_dict_values();
  const ::perfetto::protos::ChromeTracedValue& dict_values(int index) const;
  ::perfetto::protos::ChromeTracedValue* add_dict_values();
  const ::google::protobuf::RepeatedPtrField< ::perfetto::protos::ChromeTracedValue >&
      dict_values() const;

  // repeated .perfetto.protos.ChromeTracedValue array_values = 4;
  int array_values_size() const;
  void clear_array_values();
  static const int kArrayValuesFieldNumber = 4;
  ::perfetto::protos::ChromeTracedValue* mutable_array_values(int index);
  ::google::protobuf::RepeatedPtrField< ::perfetto::protos::ChromeTracedValue >*
      mutable_array_values();
  const ::perfetto::protos::ChromeTracedValue& array_values(int index) const;
  ::perfetto::protos::ChromeTracedValue* add_array_values();
  const ::google::protobuf::RepeatedPtrField< ::perfetto::protos::ChromeTracedValue >&
      array_values() const;

  // optional string string_value = 8;
  bool has_string_value() const;
  void clear_string_value();
  static const int kStringValueFieldNumber = 8;
  const ::std::string& string_value() const;
  void set_string_value(const ::std::string& value);
  #if LANG_CXX11
  void set_string_value(::std::string&& value);
  #endif
  void set_string_value(const char* value);
  void set_string_value(const char* value, size_t size);
  ::std::string* mutable_string_value();
  ::std::string* release_string_value();
  void set_allocated_string_value(::std::string* string_value);

  // optional .perfetto.protos.ChromeTracedValue.NestedType nested_type = 1;
  bool has_nested_type() const;
  void clear_nested_type();
  static const int kNestedTypeFieldNumber = 1;
  ::perfetto::protos::ChromeTracedValue_NestedType nested_type() const;
  void set_nested_type(::perfetto::protos::ChromeTracedValue_NestedType value);

  // optional int32 int_value = 5;
  bool has_int_value() const;
  void clear_int_value();
  static const int kIntValueFieldNumber = 5;
  ::google::protobuf::int32 int_value() const;
  void set_int_value(::google::protobuf::int32 value);

  // optional double double_value = 6;
  bool has_double_value() const;
  void clear_double_value();
  static const int kDoubleValueFieldNumber = 6;
  double double_value() const;
  void set_double_value(double value);

  // optional bool bool_value = 7;
  bool has_bool_value() const;
  void clear_bool_value();
  static const int kBoolValueFieldNumber = 7;
  bool bool_value() const;
  void set_bool_value(bool value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.ChromeTracedValue)
 private:
  void set_has_nested_type();
  void clear_has_nested_type();
  void set_has_int_value();
  void clear_has_int_value();
  void set_has_double_value();
  void clear_has_double_value();
  void set_has_bool_value();
  void clear_has_bool_value();
  void set_has_string_value();
  void clear_has_string_value();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> dict_keys_;
  ::google::protobuf::RepeatedPtrField< ::perfetto::protos::ChromeTracedValue > dict_values_;
  ::google::protobuf::RepeatedPtrField< ::perfetto::protos::ChromeTracedValue > array_values_;
  ::google::protobuf::internal::ArenaStringPtr string_value_;
  int nested_type_;
  ::google::protobuf::int32 int_value_;
  double double_value_;
  bool bool_value_;
  friend struct ::protobuf_perfetto_2ftrace_2fchrome_2fchrome_5ftrace_5fevent_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ChromeStringTableEntry : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.ChromeStringTableEntry) */ {
 public:
  ChromeStringTableEntry();
  virtual ~ChromeStringTableEntry();

  ChromeStringTableEntry(const ChromeStringTableEntry& from);

  inline ChromeStringTableEntry& operator=(const ChromeStringTableEntry& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChromeStringTableEntry(ChromeStringTableEntry&& from) noexcept
    : ChromeStringTableEntry() {
    *this = ::std::move(from);
  }

  inline ChromeStringTableEntry& operator=(ChromeStringTableEntry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ChromeStringTableEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChromeStringTableEntry* internal_default_instance() {
    return reinterpret_cast<const ChromeStringTableEntry*>(
               &_ChromeStringTableEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(ChromeStringTableEntry* other);
  friend void swap(ChromeStringTableEntry& a, ChromeStringTableEntry& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChromeStringTableEntry* New() const final {
    return CreateMaybeMessage<ChromeStringTableEntry>(NULL);
  }

  ChromeStringTableEntry* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ChromeStringTableEntry>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const ChromeStringTableEntry& from);
  void MergeFrom(const ChromeStringTableEntry& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ChromeStringTableEntry* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string value = 1;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 1;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // optional int32 index = 2;
  bool has_index() const;
  void clear_index();
  static const int kIndexFieldNumber = 2;
  ::google::protobuf::int32 index() const;
  void set_index(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.ChromeStringTableEntry)
 private:
  void set_has_value();
  void clear_has_value();
  void set_has_index();
  void clear_has_index();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  ::google::protobuf::int32 index_;
  friend struct ::protobuf_perfetto_2ftrace_2fchrome_2fchrome_5ftrace_5fevent_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ChromeTraceEvent_Arg : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.ChromeTraceEvent.Arg) */ {
 public:
  ChromeTraceEvent_Arg();
  virtual ~ChromeTraceEvent_Arg();

  ChromeTraceEvent_Arg(const ChromeTraceEvent_Arg& from);

  inline ChromeTraceEvent_Arg& operator=(const ChromeTraceEvent_Arg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChromeTraceEvent_Arg(ChromeTraceEvent_Arg&& from) noexcept
    : ChromeTraceEvent_Arg() {
    *this = ::std::move(from);
  }

  inline ChromeTraceEvent_Arg& operator=(ChromeTraceEvent_Arg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ChromeTraceEvent_Arg& default_instance();

  enum ValueCase {
    kBoolValue = 2,
    kUintValue = 3,
    kIntValue = 4,
    kDoubleValue = 5,
    kStringValue = 6,
    kPointerValue = 7,
    kJsonValue = 8,
    kTracedValue = 10,
    VALUE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChromeTraceEvent_Arg* internal_default_instance() {
    return reinterpret_cast<const ChromeTraceEvent_Arg*>(
               &_ChromeTraceEvent_Arg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(ChromeTraceEvent_Arg* other);
  friend void swap(ChromeTraceEvent_Arg& a, ChromeTraceEvent_Arg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChromeTraceEvent_Arg* New() const final {
    return CreateMaybeMessage<ChromeTraceEvent_Arg>(NULL);
  }

  ChromeTraceEvent_Arg* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ChromeTraceEvent_Arg>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const ChromeTraceEvent_Arg& from);
  void MergeFrom(const ChromeTraceEvent_Arg& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ChromeTraceEvent_Arg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional uint32 name_index = 9;
  bool has_name_index() const;
  void clear_name_index();
  static const int kNameIndexFieldNumber = 9;
  ::google::protobuf::uint32 name_index() const;
  void set_name_index(::google::protobuf::uint32 value);

  // optional bool bool_value = 2;
  bool has_bool_value() const;
  void clear_bool_value();
  static const int kBoolValueFieldNumber = 2;
  bool bool_value() const;
  void set_bool_value(bool value);

  // optional uint64 uint_value = 3;
  bool has_uint_value() const;
  void clear_uint_value();
  static const int kUintValueFieldNumber = 3;
  ::google::protobuf::uint64 uint_value() const;
  void set_uint_value(::google::protobuf::uint64 value);

  // optional int64 int_value = 4;
  bool has_int_value() const;
  void clear_int_value();
  static const int kIntValueFieldNumber = 4;
  ::google::protobuf::int64 int_value() const;
  void set_int_value(::google::protobuf::int64 value);

  // optional double double_value = 5;
  bool has_double_value() const;
  void clear_double_value();
  static const int kDoubleValueFieldNumber = 5;
  double double_value() const;
  void set_double_value(double value);

  // optional string string_value = 6;
  bool has_string_value() const;
  void clear_string_value();
  static const int kStringValueFieldNumber = 6;
  const ::std::string& string_value() const;
  void set_string_value(const ::std::string& value);
  #if LANG_CXX11
  void set_string_value(::std::string&& value);
  #endif
  void set_string_value(const char* value);
  void set_string_value(const char* value, size_t size);
  ::std::string* mutable_string_value();
  ::std::string* release_string_value();
  void set_allocated_string_value(::std::string* string_value);

  // optional uint64 pointer_value = 7;
  bool has_pointer_value() const;
  void clear_pointer_value();
  static const int kPointerValueFieldNumber = 7;
  ::google::protobuf::uint64 pointer_value() const;
  void set_pointer_value(::google::protobuf::uint64 value);

  // optional string json_value = 8;
  bool has_json_value() const;
  void clear_json_value();
  static const int kJsonValueFieldNumber = 8;
  const ::std::string& json_value() const;
  void set_json_value(const ::std::string& value);
  #if LANG_CXX11
  void set_json_value(::std::string&& value);
  #endif
  void set_json_value(const char* value);
  void set_json_value(const char* value, size_t size);
  ::std::string* mutable_json_value();
  ::std::string* release_json_value();
  void set_allocated_json_value(::std::string* json_value);

  // optional .perfetto.protos.ChromeTracedValue traced_value = 10;
  bool has_traced_value() const;
  void clear_traced_value();
  static const int kTracedValueFieldNumber = 10;
  private:
  const ::perfetto::protos::ChromeTracedValue& _internal_traced_value() const;
  public:
  const ::perfetto::protos::ChromeTracedValue& traced_value() const;
  ::perfetto::protos::ChromeTracedValue* release_traced_value();
  ::perfetto::protos::ChromeTracedValue* mutable_traced_value();
  void set_allocated_traced_value(::perfetto::protos::ChromeTracedValue* traced_value);

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:perfetto.protos.ChromeTraceEvent.Arg)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_bool_value();
  void set_has_uint_value();
  void set_has_int_value();
  void set_has_double_value();
  void set_has_string_value();
  void set_has_pointer_value();
  void set_has_json_value();
  void set_has_traced_value();
  void set_has_name_index();
  void clear_has_name_index();

  inline bool has_value() const;
  inline void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint32 name_index_;
  union ValueUnion {
    ValueUnion() {}
    bool bool_value_;
    ::google::protobuf::uint64 uint_value_;
    ::google::protobuf::int64 int_value_;
    double double_value_;
    ::google::protobuf::internal::ArenaStringPtr string_value_;
    ::google::protobuf::uint64 pointer_value_;
    ::google::protobuf::internal::ArenaStringPtr json_value_;
    ::perfetto::protos::ChromeTracedValue* traced_value_;
  } value_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_perfetto_2ftrace_2fchrome_2fchrome_5ftrace_5fevent_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ChromeTraceEvent : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.ChromeTraceEvent) */ {
 public:
  ChromeTraceEvent();
  virtual ~ChromeTraceEvent();

  ChromeTraceEvent(const ChromeTraceEvent& from);

  inline ChromeTraceEvent& operator=(const ChromeTraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChromeTraceEvent(ChromeTraceEvent&& from) noexcept
    : ChromeTraceEvent() {
    *this = ::std::move(from);
  }

  inline ChromeTraceEvent& operator=(ChromeTraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ChromeTraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChromeTraceEvent* internal_default_instance() {
    return reinterpret_cast<const ChromeTraceEvent*>(
               &_ChromeTraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(ChromeTraceEvent* other);
  friend void swap(ChromeTraceEvent& a, ChromeTraceEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChromeTraceEvent* New() const final {
    return CreateMaybeMessage<ChromeTraceEvent>(NULL);
  }

  ChromeTraceEvent* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ChromeTraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const ChromeTraceEvent& from);
  void MergeFrom(const ChromeTraceEvent& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ChromeTraceEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ChromeTraceEvent_Arg Arg;

  // accessors -------------------------------------------------------

  // repeated .perfetto.protos.ChromeTraceEvent.Arg args = 14;
  int args_size() const;
  void clear_args();
  static const int kArgsFieldNumber = 14;
  ::perfetto::protos::ChromeTraceEvent_Arg* mutable_args(int index);
  ::google::protobuf::RepeatedPtrField< ::perfetto::protos::ChromeTraceEvent_Arg >*
      mutable_args();
  const ::perfetto::protos::ChromeTraceEvent_Arg& args(int index) const;
  ::perfetto::protos::ChromeTraceEvent_Arg* add_args();
  const ::google::protobuf::RepeatedPtrField< ::perfetto::protos::ChromeTraceEvent_Arg >&
      args() const;

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string scope = 7;
  bool has_scope() const;
  void clear_scope();
  static const int kScopeFieldNumber = 7;
  const ::std::string& scope() const;
  void set_scope(const ::std::string& value);
  #if LANG_CXX11
  void set_scope(::std::string&& value);
  #endif
  void set_scope(const char* value);
  void set_scope(const char* value, size_t size);
  ::std::string* mutable_scope();
  ::std::string* release_scope();
  void set_allocated_scope(::std::string* scope);

  // optional string category_group_name = 10;
  bool has_category_group_name() const;
  void clear_category_group_name();
  static const int kCategoryGroupNameFieldNumber = 10;
  const ::std::string& category_group_name() const;
  void set_category_group_name(const ::std::string& value);
  #if LANG_CXX11
  void set_category_group_name(::std::string&& value);
  #endif
  void set_category_group_name(const char* value);
  void set_category_group_name(const char* value, size_t size);
  ::std::string* mutable_category_group_name();
  ::std::string* release_category_group_name();
  void set_allocated_category_group_name(::std::string* category_group_name);

  // optional int64 timestamp = 2;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // optional int32 phase = 3;
  bool has_phase() const;
  void clear_phase();
  static const int kPhaseFieldNumber = 3;
  ::google::protobuf::int32 phase() const;
  void set_phase(::google::protobuf::int32 value);

  // optional int32 thread_id = 4;
  bool has_thread_id() const;
  void clear_thread_id();
  static const int kThreadIdFieldNumber = 4;
  ::google::protobuf::int32 thread_id() const;
  void set_thread_id(::google::protobuf::int32 value);

  // optional int64 duration = 5;
  bool has_duration() const;
  void clear_duration();
  static const int kDurationFieldNumber = 5;
  ::google::protobuf::int64 duration() const;
  void set_duration(::google::protobuf::int64 value);

  // optional int64 thread_duration = 6;
  bool has_thread_duration() const;
  void clear_thread_duration();
  static const int kThreadDurationFieldNumber = 6;
  ::google::protobuf::int64 thread_duration() const;
  void set_thread_duration(::google::protobuf::int64 value);

  // optional uint64 id = 8;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 8;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // optional uint32 flags = 9;
  bool has_flags() const;
  void clear_flags();
  static const int kFlagsFieldNumber = 9;
  ::google::protobuf::uint32 flags() const;
  void set_flags(::google::protobuf::uint32 value);

  // optional int32 process_id = 11;
  bool has_process_id() const;
  void clear_process_id();
  static const int kProcessIdFieldNumber = 11;
  ::google::protobuf::int32 process_id() const;
  void set_process_id(::google::protobuf::int32 value);

  // optional int64 thread_timestamp = 12;
  bool has_thread_timestamp() const;
  void clear_thread_timestamp();
  static const int kThreadTimestampFieldNumber = 12;
  ::google::protobuf::int64 thread_timestamp() const;
  void set_thread_timestamp(::google::protobuf::int64 value);

  // optional uint64 bind_id = 13;
  bool has_bind_id() const;
  void clear_bind_id();
  static const int kBindIdFieldNumber = 13;
  ::google::protobuf::uint64 bind_id() const;
  void set_bind_id(::google::protobuf::uint64 value);

  // optional uint32 name_index = 15;
  bool has_name_index() const;
  void clear_name_index();
  static const int kNameIndexFieldNumber = 15;
  ::google::protobuf::uint32 name_index() const;
  void set_name_index(::google::protobuf::uint32 value);

  // optional uint32 category_group_name_index = 16;
  bool has_category_group_name_index() const;
  void clear_category_group_name_index();
  static const int kCategoryGroupNameIndexFieldNumber = 16;
  ::google::protobuf::uint32 category_group_name_index() const;
  void set_category_group_name_index(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.ChromeTraceEvent)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_timestamp();
  void clear_has_timestamp();
  void set_has_phase();
  void clear_has_phase();
  void set_has_thread_id();
  void clear_has_thread_id();
  void set_has_duration();
  void clear_has_duration();
  void set_has_thread_duration();
  void clear_has_thread_duration();
  void set_has_scope();
  void clear_has_scope();
  void set_has_id();
  void clear_has_id();
  void set_has_flags();
  void clear_has_flags();
  void set_has_category_group_name();
  void clear_has_category_group_name();
  void set_has_process_id();
  void clear_has_process_id();
  void set_has_thread_timestamp();
  void clear_has_thread_timestamp();
  void set_has_bind_id();
  void clear_has_bind_id();
  void set_has_name_index();
  void clear_has_name_index();
  void set_has_category_group_name_index();
  void clear_has_category_group_name_index();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::perfetto::protos::ChromeTraceEvent_Arg > args_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr scope_;
  ::google::protobuf::internal::ArenaStringPtr category_group_name_;
  ::google::protobuf::int64 timestamp_;
  ::google::protobuf::int32 phase_;
  ::google::protobuf::int32 thread_id_;
  ::google::protobuf::int64 duration_;
  ::google::protobuf::int64 thread_duration_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint32 flags_;
  ::google::protobuf::int32 process_id_;
  ::google::protobuf::int64 thread_timestamp_;
  ::google::protobuf::uint64 bind_id_;
  ::google::protobuf::uint32 name_index_;
  ::google::protobuf::uint32 category_group_name_index_;
  friend struct ::protobuf_perfetto_2ftrace_2fchrome_2fchrome_5ftrace_5fevent_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ChromeMetadata : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.ChromeMetadata) */ {
 public:
  ChromeMetadata();
  virtual ~ChromeMetadata();

  ChromeMetadata(const ChromeMetadata& from);

  inline ChromeMetadata& operator=(const ChromeMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChromeMetadata(ChromeMetadata&& from) noexcept
    : ChromeMetadata() {
    *this = ::std::move(from);
  }

  inline ChromeMetadata& operator=(ChromeMetadata&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ChromeMetadata& default_instance();

  enum ValueCase {
    kStringValue = 2,
    kBoolValue = 3,
    kIntValue = 4,
    kJsonValue = 5,
    VALUE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChromeMetadata* internal_default_instance() {
    return reinterpret_cast<const ChromeMetadata*>(
               &_ChromeMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(ChromeMetadata* other);
  friend void swap(ChromeMetadata& a, ChromeMetadata& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChromeMetadata* New() const final {
    return CreateMaybeMessage<ChromeMetadata>(NULL);
  }

  ChromeMetadata* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ChromeMetadata>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const ChromeMetadata& from);
  void MergeFrom(const ChromeMetadata& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ChromeMetadata* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string string_value = 2;
  bool has_string_value() const;
  void clear_string_value();
  static const int kStringValueFieldNumber = 2;
  const ::std::string& string_value() const;
  void set_string_value(const ::std::string& value);
  #if LANG_CXX11
  void set_string_value(::std::string&& value);
  #endif
  void set_string_value(const char* value);
  void set_string_value(const char* value, size_t size);
  ::std::string* mutable_string_value();
  ::std::string* release_string_value();
  void set_allocated_string_value(::std::string* string_value);

  // optional bool bool_value = 3;
  bool has_bool_value() const;
  void clear_bool_value();
  static const int kBoolValueFieldNumber = 3;
  bool bool_value() const;
  void set_bool_value(bool value);

  // optional int64 int_value = 4;
  bool has_int_value() const;
  void clear_int_value();
  static const int kIntValueFieldNumber = 4;
  ::google::protobuf::int64 int_value() const;
  void set_int_value(::google::protobuf::int64 value);

  // optional string json_value = 5;
  bool has_json_value() const;
  void clear_json_value();
  static const int kJsonValueFieldNumber = 5;
  const ::std::string& json_value() const;
  void set_json_value(const ::std::string& value);
  #if LANG_CXX11
  void set_json_value(::std::string&& value);
  #endif
  void set_json_value(const char* value);
  void set_json_value(const char* value, size_t size);
  ::std::string* mutable_json_value();
  ::std::string* release_json_value();
  void set_allocated_json_value(::std::string* json_value);

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:perfetto.protos.ChromeMetadata)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_string_value();
  void set_has_bool_value();
  void set_has_int_value();
  void set_has_json_value();

  inline bool has_value() const;
  inline void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  union ValueUnion {
    ValueUnion() {}
    ::google::protobuf::internal::ArenaStringPtr string_value_;
    bool bool_value_;
    ::google::protobuf::int64 int_value_;
    ::google::protobuf::internal::ArenaStringPtr json_value_;
  } value_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_perfetto_2ftrace_2fchrome_2fchrome_5ftrace_5fevent_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ChromeLegacyJsonTrace : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.ChromeLegacyJsonTrace) */ {
 public:
  ChromeLegacyJsonTrace();
  virtual ~ChromeLegacyJsonTrace();

  ChromeLegacyJsonTrace(const ChromeLegacyJsonTrace& from);

  inline ChromeLegacyJsonTrace& operator=(const ChromeLegacyJsonTrace& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChromeLegacyJsonTrace(ChromeLegacyJsonTrace&& from) noexcept
    : ChromeLegacyJsonTrace() {
    *this = ::std::move(from);
  }

  inline ChromeLegacyJsonTrace& operator=(ChromeLegacyJsonTrace&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ChromeLegacyJsonTrace& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChromeLegacyJsonTrace* internal_default_instance() {
    return reinterpret_cast<const ChromeLegacyJsonTrace*>(
               &_ChromeLegacyJsonTrace_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(ChromeLegacyJsonTrace* other);
  friend void swap(ChromeLegacyJsonTrace& a, ChromeLegacyJsonTrace& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChromeLegacyJsonTrace* New() const final {
    return CreateMaybeMessage<ChromeLegacyJsonTrace>(NULL);
  }

  ChromeLegacyJsonTrace* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ChromeLegacyJsonTrace>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const ChromeLegacyJsonTrace& from);
  void MergeFrom(const ChromeLegacyJsonTrace& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ChromeLegacyJsonTrace* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ChromeLegacyJsonTrace_TraceType TraceType;
  static const TraceType USER_TRACE =
    ChromeLegacyJsonTrace_TraceType_USER_TRACE;
  static const TraceType SYSTEM_TRACE =
    ChromeLegacyJsonTrace_TraceType_SYSTEM_TRACE;
  static inline bool TraceType_IsValid(int value) {
    return ChromeLegacyJsonTrace_TraceType_IsValid(value);
  }
  static const TraceType TraceType_MIN =
    ChromeLegacyJsonTrace_TraceType_TraceType_MIN;
  static const TraceType TraceType_MAX =
    ChromeLegacyJsonTrace_TraceType_TraceType_MAX;
  static const int TraceType_ARRAYSIZE =
    ChromeLegacyJsonTrace_TraceType_TraceType_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // optional string data = 2;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const char* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // optional .perfetto.protos.ChromeLegacyJsonTrace.TraceType type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::perfetto::protos::ChromeLegacyJsonTrace_TraceType type() const;
  void set_type(::perfetto::protos::ChromeLegacyJsonTrace_TraceType value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.ChromeLegacyJsonTrace)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_data();
  void clear_has_data();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  int type_;
  friend struct ::protobuf_perfetto_2ftrace_2fchrome_2fchrome_5ftrace_5fevent_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ChromeEventBundle : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.ChromeEventBundle) */ {
 public:
  ChromeEventBundle();
  virtual ~ChromeEventBundle();

  ChromeEventBundle(const ChromeEventBundle& from);

  inline ChromeEventBundle& operator=(const ChromeEventBundle& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChromeEventBundle(ChromeEventBundle&& from) noexcept
    : ChromeEventBundle() {
    *this = ::std::move(from);
  }

  inline ChromeEventBundle& operator=(ChromeEventBundle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ChromeEventBundle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChromeEventBundle* internal_default_instance() {
    return reinterpret_cast<const ChromeEventBundle*>(
               &_ChromeEventBundle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(ChromeEventBundle* other);
  friend void swap(ChromeEventBundle& a, ChromeEventBundle& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChromeEventBundle* New() const final {
    return CreateMaybeMessage<ChromeEventBundle>(NULL);
  }

  ChromeEventBundle* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ChromeEventBundle>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const ChromeEventBundle& from);
  void MergeFrom(const ChromeEventBundle& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ChromeEventBundle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .perfetto.protos.ChromeTraceEvent trace_events = 1 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR int trace_events_size() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_trace_events();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kTraceEventsFieldNumber = 1;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::perfetto::protos::ChromeTraceEvent* mutable_trace_events(int index);
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::google::protobuf::RepeatedPtrField< ::perfetto::protos::ChromeTraceEvent >*
      mutable_trace_events();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR const ::perfetto::protos::ChromeTraceEvent& trace_events(int index) const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::perfetto::protos::ChromeTraceEvent* add_trace_events();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR const ::google::protobuf::RepeatedPtrField< ::perfetto::protos::ChromeTraceEvent >&
      trace_events() const;

  // repeated .perfetto.protos.ChromeMetadata metadata = 2;
  int metadata_size() const;
  void clear_metadata();
  static const int kMetadataFieldNumber = 2;
  ::perfetto::protos::ChromeMetadata* mutable_metadata(int index);
  ::google::protobuf::RepeatedPtrField< ::perfetto::protos::ChromeMetadata >*
      mutable_metadata();
  const ::perfetto::protos::ChromeMetadata& metadata(int index) const;
  ::perfetto::protos::ChromeMetadata* add_metadata();
  const ::google::protobuf::RepeatedPtrField< ::perfetto::protos::ChromeMetadata >&
      metadata() const;

  // repeated .perfetto.protos.ChromeStringTableEntry string_table = 3 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR int string_table_size() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_string_table();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kStringTableFieldNumber = 3;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::perfetto::protos::ChromeStringTableEntry* mutable_string_table(int index);
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::google::protobuf::RepeatedPtrField< ::perfetto::protos::ChromeStringTableEntry >*
      mutable_string_table();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR const ::perfetto::protos::ChromeStringTableEntry& string_table(int index) const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::perfetto::protos::ChromeStringTableEntry* add_string_table();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR const ::google::protobuf::RepeatedPtrField< ::perfetto::protos::ChromeStringTableEntry >&
      string_table() const;

  // repeated string legacy_ftrace_output = 4;
  int legacy_ftrace_output_size() const;
  void clear_legacy_ftrace_output();
  static const int kLegacyFtraceOutputFieldNumber = 4;
  const ::std::string& legacy_ftrace_output(int index) const;
  ::std::string* mutable_legacy_ftrace_output(int index);
  void set_legacy_ftrace_output(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_legacy_ftrace_output(int index, ::std::string&& value);
  #endif
  void set_legacy_ftrace_output(int index, const char* value);
  void set_legacy_ftrace_output(int index, const char* value, size_t size);
  ::std::string* add_legacy_ftrace_output();
  void add_legacy_ftrace_output(const ::std::string& value);
  #if LANG_CXX11
  void add_legacy_ftrace_output(::std::string&& value);
  #endif
  void add_legacy_ftrace_output(const char* value);
  void add_legacy_ftrace_output(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& legacy_ftrace_output() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_legacy_ftrace_output();

  // repeated .perfetto.protos.ChromeLegacyJsonTrace legacy_json_trace = 5;
  int legacy_json_trace_size() const;
  void clear_legacy_json_trace();
  static const int kLegacyJsonTraceFieldNumber = 5;
  ::perfetto::protos::ChromeLegacyJsonTrace* mutable_legacy_json_trace(int index);
  ::google::protobuf::RepeatedPtrField< ::perfetto::protos::ChromeLegacyJsonTrace >*
      mutable_legacy_json_trace();
  const ::perfetto::protos::ChromeLegacyJsonTrace& legacy_json_trace(int index) const;
  ::perfetto::protos::ChromeLegacyJsonTrace* add_legacy_json_trace();
  const ::google::protobuf::RepeatedPtrField< ::perfetto::protos::ChromeLegacyJsonTrace >&
      legacy_json_trace() const;

  // @@protoc_insertion_point(class_scope:perfetto.protos.ChromeEventBundle)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::perfetto::protos::ChromeTraceEvent > trace_events_;
  ::google::protobuf::RepeatedPtrField< ::perfetto::protos::ChromeMetadata > metadata_;
  ::google::protobuf::RepeatedPtrField< ::perfetto::protos::ChromeStringTableEntry > string_table_;
  ::google::protobuf::RepeatedPtrField< ::std::string> legacy_ftrace_output_;
  ::google::protobuf::RepeatedPtrField< ::perfetto::protos::ChromeLegacyJsonTrace > legacy_json_trace_;
  friend struct ::protobuf_perfetto_2ftrace_2fchrome_2fchrome_5ftrace_5fevent_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ChromeTracedValue

// optional .perfetto.protos.ChromeTracedValue.NestedType nested_type = 1;
inline bool ChromeTracedValue::has_nested_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChromeTracedValue::set_has_nested_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChromeTracedValue::clear_has_nested_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChromeTracedValue::clear_nested_type() {
  nested_type_ = 0;
  clear_has_nested_type();
}
inline ::perfetto::protos::ChromeTracedValue_NestedType ChromeTracedValue::nested_type() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTracedValue.nested_type)
  return static_cast< ::perfetto::protos::ChromeTracedValue_NestedType >(nested_type_);
}
inline void ChromeTracedValue::set_nested_type(::perfetto::protos::ChromeTracedValue_NestedType value) {
  assert(::perfetto::protos::ChromeTracedValue_NestedType_IsValid(value));
  set_has_nested_type();
  nested_type_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeTracedValue.nested_type)
}

// repeated string dict_keys = 2;
inline int ChromeTracedValue::dict_keys_size() const {
  return dict_keys_.size();
}
inline void ChromeTracedValue::clear_dict_keys() {
  dict_keys_.Clear();
}
inline const ::std::string& ChromeTracedValue::dict_keys(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTracedValue.dict_keys)
  return dict_keys_.Get(index);
}
inline ::std::string* ChromeTracedValue::mutable_dict_keys(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ChromeTracedValue.dict_keys)
  return dict_keys_.Mutable(index);
}
inline void ChromeTracedValue::set_dict_keys(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeTracedValue.dict_keys)
  dict_keys_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ChromeTracedValue::set_dict_keys(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeTracedValue.dict_keys)
  dict_keys_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ChromeTracedValue::set_dict_keys(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  dict_keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:perfetto.protos.ChromeTracedValue.dict_keys)
}
inline void ChromeTracedValue::set_dict_keys(int index, const char* value, size_t size) {
  dict_keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.ChromeTracedValue.dict_keys)
}
inline ::std::string* ChromeTracedValue::add_dict_keys() {
  // @@protoc_insertion_point(field_add_mutable:perfetto.protos.ChromeTracedValue.dict_keys)
  return dict_keys_.Add();
}
inline void ChromeTracedValue::add_dict_keys(const ::std::string& value) {
  dict_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.ChromeTracedValue.dict_keys)
}
#if LANG_CXX11
inline void ChromeTracedValue::add_dict_keys(::std::string&& value) {
  dict_keys_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:perfetto.protos.ChromeTracedValue.dict_keys)
}
#endif
inline void ChromeTracedValue::add_dict_keys(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  dict_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:perfetto.protos.ChromeTracedValue.dict_keys)
}
inline void ChromeTracedValue::add_dict_keys(const char* value, size_t size) {
  dict_keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:perfetto.protos.ChromeTracedValue.dict_keys)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ChromeTracedValue::dict_keys() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.ChromeTracedValue.dict_keys)
  return dict_keys_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ChromeTracedValue::mutable_dict_keys() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.ChromeTracedValue.dict_keys)
  return &dict_keys_;
}

// repeated .perfetto.protos.ChromeTracedValue dict_values = 3;
inline int ChromeTracedValue::dict_values_size() const {
  return dict_values_.size();
}
inline void ChromeTracedValue::clear_dict_values() {
  dict_values_.Clear();
}
inline ::perfetto::protos::ChromeTracedValue* ChromeTracedValue::mutable_dict_values(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ChromeTracedValue.dict_values)
  return dict_values_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::perfetto::protos::ChromeTracedValue >*
ChromeTracedValue::mutable_dict_values() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.ChromeTracedValue.dict_values)
  return &dict_values_;
}
inline const ::perfetto::protos::ChromeTracedValue& ChromeTracedValue::dict_values(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTracedValue.dict_values)
  return dict_values_.Get(index);
}
inline ::perfetto::protos::ChromeTracedValue* ChromeTracedValue::add_dict_values() {
  // @@protoc_insertion_point(field_add:perfetto.protos.ChromeTracedValue.dict_values)
  return dict_values_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::perfetto::protos::ChromeTracedValue >&
ChromeTracedValue::dict_values() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.ChromeTracedValue.dict_values)
  return dict_values_;
}

// repeated .perfetto.protos.ChromeTracedValue array_values = 4;
inline int ChromeTracedValue::array_values_size() const {
  return array_values_.size();
}
inline void ChromeTracedValue::clear_array_values() {
  array_values_.Clear();
}
inline ::perfetto::protos::ChromeTracedValue* ChromeTracedValue::mutable_array_values(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ChromeTracedValue.array_values)
  return array_values_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::perfetto::protos::ChromeTracedValue >*
ChromeTracedValue::mutable_array_values() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.ChromeTracedValue.array_values)
  return &array_values_;
}
inline const ::perfetto::protos::ChromeTracedValue& ChromeTracedValue::array_values(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTracedValue.array_values)
  return array_values_.Get(index);
}
inline ::perfetto::protos::ChromeTracedValue* ChromeTracedValue::add_array_values() {
  // @@protoc_insertion_point(field_add:perfetto.protos.ChromeTracedValue.array_values)
  return array_values_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::perfetto::protos::ChromeTracedValue >&
ChromeTracedValue::array_values() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.ChromeTracedValue.array_values)
  return array_values_;
}

// optional int32 int_value = 5;
inline bool ChromeTracedValue::has_int_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChromeTracedValue::set_has_int_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChromeTracedValue::clear_has_int_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChromeTracedValue::clear_int_value() {
  int_value_ = 0;
  clear_has_int_value();
}
inline ::google::protobuf::int32 ChromeTracedValue::int_value() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTracedValue.int_value)
  return int_value_;
}
inline void ChromeTracedValue::set_int_value(::google::protobuf::int32 value) {
  set_has_int_value();
  int_value_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeTracedValue.int_value)
}

// optional double double_value = 6;
inline bool ChromeTracedValue::has_double_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChromeTracedValue::set_has_double_value() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ChromeTracedValue::clear_has_double_value() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ChromeTracedValue::clear_double_value() {
  double_value_ = 0;
  clear_has_double_value();
}
inline double ChromeTracedValue::double_value() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTracedValue.double_value)
  return double_value_;
}
inline void ChromeTracedValue::set_double_value(double value) {
  set_has_double_value();
  double_value_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeTracedValue.double_value)
}

// optional bool bool_value = 7;
inline bool ChromeTracedValue::has_bool_value() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ChromeTracedValue::set_has_bool_value() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ChromeTracedValue::clear_has_bool_value() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ChromeTracedValue::clear_bool_value() {
  bool_value_ = false;
  clear_has_bool_value();
}
inline bool ChromeTracedValue::bool_value() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTracedValue.bool_value)
  return bool_value_;
}
inline void ChromeTracedValue::set_bool_value(bool value) {
  set_has_bool_value();
  bool_value_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeTracedValue.bool_value)
}

// optional string string_value = 8;
inline bool ChromeTracedValue::has_string_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChromeTracedValue::set_has_string_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChromeTracedValue::clear_has_string_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChromeTracedValue::clear_string_value() {
  string_value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_string_value();
}
inline const ::std::string& ChromeTracedValue::string_value() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTracedValue.string_value)
  return string_value_.GetNoArena();
}
inline void ChromeTracedValue::set_string_value(const ::std::string& value) {
  set_has_string_value();
  string_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeTracedValue.string_value)
}
#if LANG_CXX11
inline void ChromeTracedValue::set_string_value(::std::string&& value) {
  set_has_string_value();
  string_value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.ChromeTracedValue.string_value)
}
#endif
inline void ChromeTracedValue::set_string_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_string_value();
  string_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.ChromeTracedValue.string_value)
}
inline void ChromeTracedValue::set_string_value(const char* value, size_t size) {
  set_has_string_value();
  string_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.ChromeTracedValue.string_value)
}
inline ::std::string* ChromeTracedValue::mutable_string_value() {
  set_has_string_value();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ChromeTracedValue.string_value)
  return string_value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChromeTracedValue::release_string_value() {
  // @@protoc_insertion_point(field_release:perfetto.protos.ChromeTracedValue.string_value)
  if (!has_string_value()) {
    return NULL;
  }
  clear_has_string_value();
  return string_value_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChromeTracedValue::set_allocated_string_value(::std::string* string_value) {
  if (string_value != NULL) {
    set_has_string_value();
  } else {
    clear_has_string_value();
  }
  string_value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), string_value);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.ChromeTracedValue.string_value)
}

// -------------------------------------------------------------------

// ChromeStringTableEntry

// optional string value = 1;
inline bool ChromeStringTableEntry::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChromeStringTableEntry::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChromeStringTableEntry::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChromeStringTableEntry::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
inline const ::std::string& ChromeStringTableEntry::value() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeStringTableEntry.value)
  return value_.GetNoArena();
}
inline void ChromeStringTableEntry::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeStringTableEntry.value)
}
#if LANG_CXX11
inline void ChromeStringTableEntry::set_value(::std::string&& value) {
  set_has_value();
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.ChromeStringTableEntry.value)
}
#endif
inline void ChromeStringTableEntry::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.ChromeStringTableEntry.value)
}
inline void ChromeStringTableEntry::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.ChromeStringTableEntry.value)
}
inline ::std::string* ChromeStringTableEntry::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ChromeStringTableEntry.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChromeStringTableEntry::release_value() {
  // @@protoc_insertion_point(field_release:perfetto.protos.ChromeStringTableEntry.value)
  if (!has_value()) {
    return NULL;
  }
  clear_has_value();
  return value_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChromeStringTableEntry::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.ChromeStringTableEntry.value)
}

// optional int32 index = 2;
inline bool ChromeStringTableEntry::has_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChromeStringTableEntry::set_has_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChromeStringTableEntry::clear_has_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChromeStringTableEntry::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 ChromeStringTableEntry::index() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeStringTableEntry.index)
  return index_;
}
inline void ChromeStringTableEntry::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeStringTableEntry.index)
}

// -------------------------------------------------------------------

// ChromeTraceEvent_Arg

// optional string name = 1;
inline bool ChromeTraceEvent_Arg::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChromeTraceEvent_Arg::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChromeTraceEvent_Arg::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChromeTraceEvent_Arg::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& ChromeTraceEvent_Arg::name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTraceEvent.Arg.name)
  return name_.GetNoArena();
}
inline void ChromeTraceEvent_Arg::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeTraceEvent.Arg.name)
}
#if LANG_CXX11
inline void ChromeTraceEvent_Arg::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.ChromeTraceEvent.Arg.name)
}
#endif
inline void ChromeTraceEvent_Arg::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.ChromeTraceEvent.Arg.name)
}
inline void ChromeTraceEvent_Arg::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.ChromeTraceEvent.Arg.name)
}
inline ::std::string* ChromeTraceEvent_Arg::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ChromeTraceEvent.Arg.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChromeTraceEvent_Arg::release_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.ChromeTraceEvent.Arg.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChromeTraceEvent_Arg::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.ChromeTraceEvent.Arg.name)
}

// optional bool bool_value = 2;
inline bool ChromeTraceEvent_Arg::has_bool_value() const {
  return value_case() == kBoolValue;
}
inline void ChromeTraceEvent_Arg::set_has_bool_value() {
  _oneof_case_[0] = kBoolValue;
}
inline void ChromeTraceEvent_Arg::clear_bool_value() {
  if (has_bool_value()) {
    value_.bool_value_ = false;
    clear_has_value();
  }
}
inline bool ChromeTraceEvent_Arg::bool_value() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTraceEvent.Arg.bool_value)
  if (has_bool_value()) {
    return value_.bool_value_;
  }
  return false;
}
inline void ChromeTraceEvent_Arg::set_bool_value(bool value) {
  if (!has_bool_value()) {
    clear_value();
    set_has_bool_value();
  }
  value_.bool_value_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeTraceEvent.Arg.bool_value)
}

// optional uint64 uint_value = 3;
inline bool ChromeTraceEvent_Arg::has_uint_value() const {
  return value_case() == kUintValue;
}
inline void ChromeTraceEvent_Arg::set_has_uint_value() {
  _oneof_case_[0] = kUintValue;
}
inline void ChromeTraceEvent_Arg::clear_uint_value() {
  if (has_uint_value()) {
    value_.uint_value_ = GOOGLE_ULONGLONG(0);
    clear_has_value();
  }
}
inline ::google::protobuf::uint64 ChromeTraceEvent_Arg::uint_value() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTraceEvent.Arg.uint_value)
  if (has_uint_value()) {
    return value_.uint_value_;
  }
  return GOOGLE_ULONGLONG(0);
}
inline void ChromeTraceEvent_Arg::set_uint_value(::google::protobuf::uint64 value) {
  if (!has_uint_value()) {
    clear_value();
    set_has_uint_value();
  }
  value_.uint_value_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeTraceEvent.Arg.uint_value)
}

// optional int64 int_value = 4;
inline bool ChromeTraceEvent_Arg::has_int_value() const {
  return value_case() == kIntValue;
}
inline void ChromeTraceEvent_Arg::set_has_int_value() {
  _oneof_case_[0] = kIntValue;
}
inline void ChromeTraceEvent_Arg::clear_int_value() {
  if (has_int_value()) {
    value_.int_value_ = GOOGLE_LONGLONG(0);
    clear_has_value();
  }
}
inline ::google::protobuf::int64 ChromeTraceEvent_Arg::int_value() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTraceEvent.Arg.int_value)
  if (has_int_value()) {
    return value_.int_value_;
  }
  return GOOGLE_LONGLONG(0);
}
inline void ChromeTraceEvent_Arg::set_int_value(::google::protobuf::int64 value) {
  if (!has_int_value()) {
    clear_value();
    set_has_int_value();
  }
  value_.int_value_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeTraceEvent.Arg.int_value)
}

// optional double double_value = 5;
inline bool ChromeTraceEvent_Arg::has_double_value() const {
  return value_case() == kDoubleValue;
}
inline void ChromeTraceEvent_Arg::set_has_double_value() {
  _oneof_case_[0] = kDoubleValue;
}
inline void ChromeTraceEvent_Arg::clear_double_value() {
  if (has_double_value()) {
    value_.double_value_ = 0;
    clear_has_value();
  }
}
inline double ChromeTraceEvent_Arg::double_value() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTraceEvent.Arg.double_value)
  if (has_double_value()) {
    return value_.double_value_;
  }
  return 0;
}
inline void ChromeTraceEvent_Arg::set_double_value(double value) {
  if (!has_double_value()) {
    clear_value();
    set_has_double_value();
  }
  value_.double_value_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeTraceEvent.Arg.double_value)
}

// optional string string_value = 6;
inline bool ChromeTraceEvent_Arg::has_string_value() const {
  return value_case() == kStringValue;
}
inline void ChromeTraceEvent_Arg::set_has_string_value() {
  _oneof_case_[0] = kStringValue;
}
inline void ChromeTraceEvent_Arg::clear_string_value() {
  if (has_string_value()) {
    value_.string_value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_value();
  }
}
inline const ::std::string& ChromeTraceEvent_Arg::string_value() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTraceEvent.Arg.string_value)
  if (has_string_value()) {
    return value_.string_value_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void ChromeTraceEvent_Arg::set_string_value(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeTraceEvent.Arg.string_value)
  if (!has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeTraceEvent.Arg.string_value)
}
#if LANG_CXX11
inline void ChromeTraceEvent_Arg::set_string_value(::std::string&& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeTraceEvent.Arg.string_value)
  if (!has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.ChromeTraceEvent.Arg.string_value)
}
#endif
inline void ChromeTraceEvent_Arg::set_string_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.ChromeTraceEvent.Arg.string_value)
}
inline void ChromeTraceEvent_Arg::set_string_value(const char* value, size_t size) {
  if (!has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.ChromeTraceEvent.Arg.string_value)
}
inline ::std::string* ChromeTraceEvent_Arg::mutable_string_value() {
  if (!has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ChromeTraceEvent.Arg.string_value)
  return value_.string_value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChromeTraceEvent_Arg::release_string_value() {
  // @@protoc_insertion_point(field_release:perfetto.protos.ChromeTraceEvent.Arg.string_value)
  if (has_string_value()) {
    clear_has_value();
    return value_.string_value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void ChromeTraceEvent_Arg::set_allocated_string_value(::std::string* string_value) {
  if (!has_string_value()) {
    value_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_value();
  if (string_value != NULL) {
    set_has_string_value();
    value_.string_value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), string_value);
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.ChromeTraceEvent.Arg.string_value)
}

// optional uint64 pointer_value = 7;
inline bool ChromeTraceEvent_Arg::has_pointer_value() const {
  return value_case() == kPointerValue;
}
inline void ChromeTraceEvent_Arg::set_has_pointer_value() {
  _oneof_case_[0] = kPointerValue;
}
inline void ChromeTraceEvent_Arg::clear_pointer_value() {
  if (has_pointer_value()) {
    value_.pointer_value_ = GOOGLE_ULONGLONG(0);
    clear_has_value();
  }
}
inline ::google::protobuf::uint64 ChromeTraceEvent_Arg::pointer_value() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTraceEvent.Arg.pointer_value)
  if (has_pointer_value()) {
    return value_.pointer_value_;
  }
  return GOOGLE_ULONGLONG(0);
}
inline void ChromeTraceEvent_Arg::set_pointer_value(::google::protobuf::uint64 value) {
  if (!has_pointer_value()) {
    clear_value();
    set_has_pointer_value();
  }
  value_.pointer_value_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeTraceEvent.Arg.pointer_value)
}

// optional string json_value = 8;
inline bool ChromeTraceEvent_Arg::has_json_value() const {
  return value_case() == kJsonValue;
}
inline void ChromeTraceEvent_Arg::set_has_json_value() {
  _oneof_case_[0] = kJsonValue;
}
inline void ChromeTraceEvent_Arg::clear_json_value() {
  if (has_json_value()) {
    value_.json_value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_value();
  }
}
inline const ::std::string& ChromeTraceEvent_Arg::json_value() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTraceEvent.Arg.json_value)
  if (has_json_value()) {
    return value_.json_value_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void ChromeTraceEvent_Arg::set_json_value(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeTraceEvent.Arg.json_value)
  if (!has_json_value()) {
    clear_value();
    set_has_json_value();
    value_.json_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.json_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeTraceEvent.Arg.json_value)
}
#if LANG_CXX11
inline void ChromeTraceEvent_Arg::set_json_value(::std::string&& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeTraceEvent.Arg.json_value)
  if (!has_json_value()) {
    clear_value();
    set_has_json_value();
    value_.json_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.json_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.ChromeTraceEvent.Arg.json_value)
}
#endif
inline void ChromeTraceEvent_Arg::set_json_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_json_value()) {
    clear_value();
    set_has_json_value();
    value_.json_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.json_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.ChromeTraceEvent.Arg.json_value)
}
inline void ChromeTraceEvent_Arg::set_json_value(const char* value, size_t size) {
  if (!has_json_value()) {
    clear_value();
    set_has_json_value();
    value_.json_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.json_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.ChromeTraceEvent.Arg.json_value)
}
inline ::std::string* ChromeTraceEvent_Arg::mutable_json_value() {
  if (!has_json_value()) {
    clear_value();
    set_has_json_value();
    value_.json_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ChromeTraceEvent.Arg.json_value)
  return value_.json_value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChromeTraceEvent_Arg::release_json_value() {
  // @@protoc_insertion_point(field_release:perfetto.protos.ChromeTraceEvent.Arg.json_value)
  if (has_json_value()) {
    clear_has_value();
    return value_.json_value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void ChromeTraceEvent_Arg::set_allocated_json_value(::std::string* json_value) {
  if (!has_json_value()) {
    value_.json_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_value();
  if (json_value != NULL) {
    set_has_json_value();
    value_.json_value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), json_value);
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.ChromeTraceEvent.Arg.json_value)
}

// optional .perfetto.protos.ChromeTracedValue traced_value = 10;
inline bool ChromeTraceEvent_Arg::has_traced_value() const {
  return value_case() == kTracedValue;
}
inline void ChromeTraceEvent_Arg::set_has_traced_value() {
  _oneof_case_[0] = kTracedValue;
}
inline void ChromeTraceEvent_Arg::clear_traced_value() {
  if (has_traced_value()) {
    delete value_.traced_value_;
    clear_has_value();
  }
}
inline const ::perfetto::protos::ChromeTracedValue& ChromeTraceEvent_Arg::_internal_traced_value() const {
  return *value_.traced_value_;
}
inline ::perfetto::protos::ChromeTracedValue* ChromeTraceEvent_Arg::release_traced_value() {
  // @@protoc_insertion_point(field_release:perfetto.protos.ChromeTraceEvent.Arg.traced_value)
  if (has_traced_value()) {
    clear_has_value();
      ::perfetto::protos::ChromeTracedValue* temp = value_.traced_value_;
    value_.traced_value_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::perfetto::protos::ChromeTracedValue& ChromeTraceEvent_Arg::traced_value() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTraceEvent.Arg.traced_value)
  return has_traced_value()
      ? *value_.traced_value_
      : *reinterpret_cast< ::perfetto::protos::ChromeTracedValue*>(&::perfetto::protos::_ChromeTracedValue_default_instance_);
}
inline ::perfetto::protos::ChromeTracedValue* ChromeTraceEvent_Arg::mutable_traced_value() {
  if (!has_traced_value()) {
    clear_value();
    set_has_traced_value();
    value_.traced_value_ = CreateMaybeMessage< ::perfetto::protos::ChromeTracedValue >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ChromeTraceEvent.Arg.traced_value)
  return value_.traced_value_;
}

// optional uint32 name_index = 9;
inline bool ChromeTraceEvent_Arg::has_name_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChromeTraceEvent_Arg::set_has_name_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChromeTraceEvent_Arg::clear_has_name_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChromeTraceEvent_Arg::clear_name_index() {
  name_index_ = 0u;
  clear_has_name_index();
}
inline ::google::protobuf::uint32 ChromeTraceEvent_Arg::name_index() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTraceEvent.Arg.name_index)
  return name_index_;
}
inline void ChromeTraceEvent_Arg::set_name_index(::google::protobuf::uint32 value) {
  set_has_name_index();
  name_index_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeTraceEvent.Arg.name_index)
}

inline bool ChromeTraceEvent_Arg::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void ChromeTraceEvent_Arg::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline ChromeTraceEvent_Arg::ValueCase ChromeTraceEvent_Arg::value_case() const {
  return ChromeTraceEvent_Arg::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ChromeTraceEvent

// optional string name = 1;
inline bool ChromeTraceEvent::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChromeTraceEvent::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChromeTraceEvent::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChromeTraceEvent::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& ChromeTraceEvent::name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTraceEvent.name)
  return name_.GetNoArena();
}
inline void ChromeTraceEvent::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeTraceEvent.name)
}
#if LANG_CXX11
inline void ChromeTraceEvent::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.ChromeTraceEvent.name)
}
#endif
inline void ChromeTraceEvent::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.ChromeTraceEvent.name)
}
inline void ChromeTraceEvent::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.ChromeTraceEvent.name)
}
inline ::std::string* ChromeTraceEvent::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ChromeTraceEvent.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChromeTraceEvent::release_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.ChromeTraceEvent.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChromeTraceEvent::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.ChromeTraceEvent.name)
}

// optional int64 timestamp = 2;
inline bool ChromeTraceEvent::has_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChromeTraceEvent::set_has_timestamp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ChromeTraceEvent::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ChromeTraceEvent::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::int64 ChromeTraceEvent::timestamp() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTraceEvent.timestamp)
  return timestamp_;
}
inline void ChromeTraceEvent::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeTraceEvent.timestamp)
}

// optional int32 phase = 3;
inline bool ChromeTraceEvent::has_phase() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ChromeTraceEvent::set_has_phase() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ChromeTraceEvent::clear_has_phase() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ChromeTraceEvent::clear_phase() {
  phase_ = 0;
  clear_has_phase();
}
inline ::google::protobuf::int32 ChromeTraceEvent::phase() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTraceEvent.phase)
  return phase_;
}
inline void ChromeTraceEvent::set_phase(::google::protobuf::int32 value) {
  set_has_phase();
  phase_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeTraceEvent.phase)
}

// optional int32 thread_id = 4;
inline bool ChromeTraceEvent::has_thread_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ChromeTraceEvent::set_has_thread_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ChromeTraceEvent::clear_has_thread_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ChromeTraceEvent::clear_thread_id() {
  thread_id_ = 0;
  clear_has_thread_id();
}
inline ::google::protobuf::int32 ChromeTraceEvent::thread_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTraceEvent.thread_id)
  return thread_id_;
}
inline void ChromeTraceEvent::set_thread_id(::google::protobuf::int32 value) {
  set_has_thread_id();
  thread_id_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeTraceEvent.thread_id)
}

// optional int64 duration = 5;
inline bool ChromeTraceEvent::has_duration() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ChromeTraceEvent::set_has_duration() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ChromeTraceEvent::clear_has_duration() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ChromeTraceEvent::clear_duration() {
  duration_ = GOOGLE_LONGLONG(0);
  clear_has_duration();
}
inline ::google::protobuf::int64 ChromeTraceEvent::duration() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTraceEvent.duration)
  return duration_;
}
inline void ChromeTraceEvent::set_duration(::google::protobuf::int64 value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeTraceEvent.duration)
}

// optional int64 thread_duration = 6;
inline bool ChromeTraceEvent::has_thread_duration() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ChromeTraceEvent::set_has_thread_duration() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ChromeTraceEvent::clear_has_thread_duration() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ChromeTraceEvent::clear_thread_duration() {
  thread_duration_ = GOOGLE_LONGLONG(0);
  clear_has_thread_duration();
}
inline ::google::protobuf::int64 ChromeTraceEvent::thread_duration() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTraceEvent.thread_duration)
  return thread_duration_;
}
inline void ChromeTraceEvent::set_thread_duration(::google::protobuf::int64 value) {
  set_has_thread_duration();
  thread_duration_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeTraceEvent.thread_duration)
}

// optional string scope = 7;
inline bool ChromeTraceEvent::has_scope() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChromeTraceEvent::set_has_scope() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChromeTraceEvent::clear_has_scope() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChromeTraceEvent::clear_scope() {
  scope_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_scope();
}
inline const ::std::string& ChromeTraceEvent::scope() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTraceEvent.scope)
  return scope_.GetNoArena();
}
inline void ChromeTraceEvent::set_scope(const ::std::string& value) {
  set_has_scope();
  scope_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeTraceEvent.scope)
}
#if LANG_CXX11
inline void ChromeTraceEvent::set_scope(::std::string&& value) {
  set_has_scope();
  scope_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.ChromeTraceEvent.scope)
}
#endif
inline void ChromeTraceEvent::set_scope(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_scope();
  scope_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.ChromeTraceEvent.scope)
}
inline void ChromeTraceEvent::set_scope(const char* value, size_t size) {
  set_has_scope();
  scope_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.ChromeTraceEvent.scope)
}
inline ::std::string* ChromeTraceEvent::mutable_scope() {
  set_has_scope();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ChromeTraceEvent.scope)
  return scope_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChromeTraceEvent::release_scope() {
  // @@protoc_insertion_point(field_release:perfetto.protos.ChromeTraceEvent.scope)
  if (!has_scope()) {
    return NULL;
  }
  clear_has_scope();
  return scope_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChromeTraceEvent::set_allocated_scope(::std::string* scope) {
  if (scope != NULL) {
    set_has_scope();
  } else {
    clear_has_scope();
  }
  scope_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), scope);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.ChromeTraceEvent.scope)
}

// optional uint64 id = 8;
inline bool ChromeTraceEvent::has_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ChromeTraceEvent::set_has_id() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ChromeTraceEvent::clear_has_id() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ChromeTraceEvent::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 ChromeTraceEvent::id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTraceEvent.id)
  return id_;
}
inline void ChromeTraceEvent::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeTraceEvent.id)
}

// optional uint32 flags = 9;
inline bool ChromeTraceEvent::has_flags() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ChromeTraceEvent::set_has_flags() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ChromeTraceEvent::clear_has_flags() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ChromeTraceEvent::clear_flags() {
  flags_ = 0u;
  clear_has_flags();
}
inline ::google::protobuf::uint32 ChromeTraceEvent::flags() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTraceEvent.flags)
  return flags_;
}
inline void ChromeTraceEvent::set_flags(::google::protobuf::uint32 value) {
  set_has_flags();
  flags_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeTraceEvent.flags)
}

// optional string category_group_name = 10;
inline bool ChromeTraceEvent::has_category_group_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChromeTraceEvent::set_has_category_group_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChromeTraceEvent::clear_has_category_group_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChromeTraceEvent::clear_category_group_name() {
  category_group_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_category_group_name();
}
inline const ::std::string& ChromeTraceEvent::category_group_name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTraceEvent.category_group_name)
  return category_group_name_.GetNoArena();
}
inline void ChromeTraceEvent::set_category_group_name(const ::std::string& value) {
  set_has_category_group_name();
  category_group_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeTraceEvent.category_group_name)
}
#if LANG_CXX11
inline void ChromeTraceEvent::set_category_group_name(::std::string&& value) {
  set_has_category_group_name();
  category_group_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.ChromeTraceEvent.category_group_name)
}
#endif
inline void ChromeTraceEvent::set_category_group_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_category_group_name();
  category_group_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.ChromeTraceEvent.category_group_name)
}
inline void ChromeTraceEvent::set_category_group_name(const char* value, size_t size) {
  set_has_category_group_name();
  category_group_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.ChromeTraceEvent.category_group_name)
}
inline ::std::string* ChromeTraceEvent::mutable_category_group_name() {
  set_has_category_group_name();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ChromeTraceEvent.category_group_name)
  return category_group_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChromeTraceEvent::release_category_group_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.ChromeTraceEvent.category_group_name)
  if (!has_category_group_name()) {
    return NULL;
  }
  clear_has_category_group_name();
  return category_group_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChromeTraceEvent::set_allocated_category_group_name(::std::string* category_group_name) {
  if (category_group_name != NULL) {
    set_has_category_group_name();
  } else {
    clear_has_category_group_name();
  }
  category_group_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), category_group_name);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.ChromeTraceEvent.category_group_name)
}

// optional int32 process_id = 11;
inline bool ChromeTraceEvent::has_process_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ChromeTraceEvent::set_has_process_id() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ChromeTraceEvent::clear_has_process_id() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ChromeTraceEvent::clear_process_id() {
  process_id_ = 0;
  clear_has_process_id();
}
inline ::google::protobuf::int32 ChromeTraceEvent::process_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTraceEvent.process_id)
  return process_id_;
}
inline void ChromeTraceEvent::set_process_id(::google::protobuf::int32 value) {
  set_has_process_id();
  process_id_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeTraceEvent.process_id)
}

// optional int64 thread_timestamp = 12;
inline bool ChromeTraceEvent::has_thread_timestamp() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ChromeTraceEvent::set_has_thread_timestamp() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ChromeTraceEvent::clear_has_thread_timestamp() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ChromeTraceEvent::clear_thread_timestamp() {
  thread_timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_thread_timestamp();
}
inline ::google::protobuf::int64 ChromeTraceEvent::thread_timestamp() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTraceEvent.thread_timestamp)
  return thread_timestamp_;
}
inline void ChromeTraceEvent::set_thread_timestamp(::google::protobuf::int64 value) {
  set_has_thread_timestamp();
  thread_timestamp_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeTraceEvent.thread_timestamp)
}

// optional uint64 bind_id = 13;
inline bool ChromeTraceEvent::has_bind_id() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ChromeTraceEvent::set_has_bind_id() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ChromeTraceEvent::clear_has_bind_id() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ChromeTraceEvent::clear_bind_id() {
  bind_id_ = GOOGLE_ULONGLONG(0);
  clear_has_bind_id();
}
inline ::google::protobuf::uint64 ChromeTraceEvent::bind_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTraceEvent.bind_id)
  return bind_id_;
}
inline void ChromeTraceEvent::set_bind_id(::google::protobuf::uint64 value) {
  set_has_bind_id();
  bind_id_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeTraceEvent.bind_id)
}

// repeated .perfetto.protos.ChromeTraceEvent.Arg args = 14;
inline int ChromeTraceEvent::args_size() const {
  return args_.size();
}
inline void ChromeTraceEvent::clear_args() {
  args_.Clear();
}
inline ::perfetto::protos::ChromeTraceEvent_Arg* ChromeTraceEvent::mutable_args(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ChromeTraceEvent.args)
  return args_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::perfetto::protos::ChromeTraceEvent_Arg >*
ChromeTraceEvent::mutable_args() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.ChromeTraceEvent.args)
  return &args_;
}
inline const ::perfetto::protos::ChromeTraceEvent_Arg& ChromeTraceEvent::args(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTraceEvent.args)
  return args_.Get(index);
}
inline ::perfetto::protos::ChromeTraceEvent_Arg* ChromeTraceEvent::add_args() {
  // @@protoc_insertion_point(field_add:perfetto.protos.ChromeTraceEvent.args)
  return args_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::perfetto::protos::ChromeTraceEvent_Arg >&
ChromeTraceEvent::args() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.ChromeTraceEvent.args)
  return args_;
}

// optional uint32 name_index = 15;
inline bool ChromeTraceEvent::has_name_index() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ChromeTraceEvent::set_has_name_index() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ChromeTraceEvent::clear_has_name_index() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ChromeTraceEvent::clear_name_index() {
  name_index_ = 0u;
  clear_has_name_index();
}
inline ::google::protobuf::uint32 ChromeTraceEvent::name_index() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTraceEvent.name_index)
  return name_index_;
}
inline void ChromeTraceEvent::set_name_index(::google::protobuf::uint32 value) {
  set_has_name_index();
  name_index_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeTraceEvent.name_index)
}

// optional uint32 category_group_name_index = 16;
inline bool ChromeTraceEvent::has_category_group_name_index() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ChromeTraceEvent::set_has_category_group_name_index() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ChromeTraceEvent::clear_has_category_group_name_index() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ChromeTraceEvent::clear_category_group_name_index() {
  category_group_name_index_ = 0u;
  clear_has_category_group_name_index();
}
inline ::google::protobuf::uint32 ChromeTraceEvent::category_group_name_index() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTraceEvent.category_group_name_index)
  return category_group_name_index_;
}
inline void ChromeTraceEvent::set_category_group_name_index(::google::protobuf::uint32 value) {
  set_has_category_group_name_index();
  category_group_name_index_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeTraceEvent.category_group_name_index)
}

// -------------------------------------------------------------------

// ChromeMetadata

// optional string name = 1;
inline bool ChromeMetadata::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChromeMetadata::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChromeMetadata::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChromeMetadata::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& ChromeMetadata::name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeMetadata.name)
  return name_.GetNoArena();
}
inline void ChromeMetadata::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeMetadata.name)
}
#if LANG_CXX11
inline void ChromeMetadata::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.ChromeMetadata.name)
}
#endif
inline void ChromeMetadata::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.ChromeMetadata.name)
}
inline void ChromeMetadata::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.ChromeMetadata.name)
}
inline ::std::string* ChromeMetadata::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ChromeMetadata.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChromeMetadata::release_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.ChromeMetadata.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChromeMetadata::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.ChromeMetadata.name)
}

// optional string string_value = 2;
inline bool ChromeMetadata::has_string_value() const {
  return value_case() == kStringValue;
}
inline void ChromeMetadata::set_has_string_value() {
  _oneof_case_[0] = kStringValue;
}
inline void ChromeMetadata::clear_string_value() {
  if (has_string_value()) {
    value_.string_value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_value();
  }
}
inline const ::std::string& ChromeMetadata::string_value() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeMetadata.string_value)
  if (has_string_value()) {
    return value_.string_value_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void ChromeMetadata::set_string_value(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeMetadata.string_value)
  if (!has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeMetadata.string_value)
}
#if LANG_CXX11
inline void ChromeMetadata::set_string_value(::std::string&& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeMetadata.string_value)
  if (!has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.ChromeMetadata.string_value)
}
#endif
inline void ChromeMetadata::set_string_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.ChromeMetadata.string_value)
}
inline void ChromeMetadata::set_string_value(const char* value, size_t size) {
  if (!has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.ChromeMetadata.string_value)
}
inline ::std::string* ChromeMetadata::mutable_string_value() {
  if (!has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ChromeMetadata.string_value)
  return value_.string_value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChromeMetadata::release_string_value() {
  // @@protoc_insertion_point(field_release:perfetto.protos.ChromeMetadata.string_value)
  if (has_string_value()) {
    clear_has_value();
    return value_.string_value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void ChromeMetadata::set_allocated_string_value(::std::string* string_value) {
  if (!has_string_value()) {
    value_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_value();
  if (string_value != NULL) {
    set_has_string_value();
    value_.string_value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), string_value);
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.ChromeMetadata.string_value)
}

// optional bool bool_value = 3;
inline bool ChromeMetadata::has_bool_value() const {
  return value_case() == kBoolValue;
}
inline void ChromeMetadata::set_has_bool_value() {
  _oneof_case_[0] = kBoolValue;
}
inline void ChromeMetadata::clear_bool_value() {
  if (has_bool_value()) {
    value_.bool_value_ = false;
    clear_has_value();
  }
}
inline bool ChromeMetadata::bool_value() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeMetadata.bool_value)
  if (has_bool_value()) {
    return value_.bool_value_;
  }
  return false;
}
inline void ChromeMetadata::set_bool_value(bool value) {
  if (!has_bool_value()) {
    clear_value();
    set_has_bool_value();
  }
  value_.bool_value_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeMetadata.bool_value)
}

// optional int64 int_value = 4;
inline bool ChromeMetadata::has_int_value() const {
  return value_case() == kIntValue;
}
inline void ChromeMetadata::set_has_int_value() {
  _oneof_case_[0] = kIntValue;
}
inline void ChromeMetadata::clear_int_value() {
  if (has_int_value()) {
    value_.int_value_ = GOOGLE_LONGLONG(0);
    clear_has_value();
  }
}
inline ::google::protobuf::int64 ChromeMetadata::int_value() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeMetadata.int_value)
  if (has_int_value()) {
    return value_.int_value_;
  }
  return GOOGLE_LONGLONG(0);
}
inline void ChromeMetadata::set_int_value(::google::protobuf::int64 value) {
  if (!has_int_value()) {
    clear_value();
    set_has_int_value();
  }
  value_.int_value_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeMetadata.int_value)
}

// optional string json_value = 5;
inline bool ChromeMetadata::has_json_value() const {
  return value_case() == kJsonValue;
}
inline void ChromeMetadata::set_has_json_value() {
  _oneof_case_[0] = kJsonValue;
}
inline void ChromeMetadata::clear_json_value() {
  if (has_json_value()) {
    value_.json_value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_value();
  }
}
inline const ::std::string& ChromeMetadata::json_value() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeMetadata.json_value)
  if (has_json_value()) {
    return value_.json_value_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void ChromeMetadata::set_json_value(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeMetadata.json_value)
  if (!has_json_value()) {
    clear_value();
    set_has_json_value();
    value_.json_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.json_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeMetadata.json_value)
}
#if LANG_CXX11
inline void ChromeMetadata::set_json_value(::std::string&& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeMetadata.json_value)
  if (!has_json_value()) {
    clear_value();
    set_has_json_value();
    value_.json_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.json_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.ChromeMetadata.json_value)
}
#endif
inline void ChromeMetadata::set_json_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_json_value()) {
    clear_value();
    set_has_json_value();
    value_.json_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.json_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.ChromeMetadata.json_value)
}
inline void ChromeMetadata::set_json_value(const char* value, size_t size) {
  if (!has_json_value()) {
    clear_value();
    set_has_json_value();
    value_.json_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.json_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.ChromeMetadata.json_value)
}
inline ::std::string* ChromeMetadata::mutable_json_value() {
  if (!has_json_value()) {
    clear_value();
    set_has_json_value();
    value_.json_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ChromeMetadata.json_value)
  return value_.json_value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChromeMetadata::release_json_value() {
  // @@protoc_insertion_point(field_release:perfetto.protos.ChromeMetadata.json_value)
  if (has_json_value()) {
    clear_has_value();
    return value_.json_value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void ChromeMetadata::set_allocated_json_value(::std::string* json_value) {
  if (!has_json_value()) {
    value_.json_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_value();
  if (json_value != NULL) {
    set_has_json_value();
    value_.json_value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), json_value);
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.ChromeMetadata.json_value)
}

inline bool ChromeMetadata::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void ChromeMetadata::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline ChromeMetadata::ValueCase ChromeMetadata::value_case() const {
  return ChromeMetadata::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ChromeLegacyJsonTrace

// optional .perfetto.protos.ChromeLegacyJsonTrace.TraceType type = 1;
inline bool ChromeLegacyJsonTrace::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChromeLegacyJsonTrace::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChromeLegacyJsonTrace::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChromeLegacyJsonTrace::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::perfetto::protos::ChromeLegacyJsonTrace_TraceType ChromeLegacyJsonTrace::type() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeLegacyJsonTrace.type)
  return static_cast< ::perfetto::protos::ChromeLegacyJsonTrace_TraceType >(type_);
}
inline void ChromeLegacyJsonTrace::set_type(::perfetto::protos::ChromeLegacyJsonTrace_TraceType value) {
  assert(::perfetto::protos::ChromeLegacyJsonTrace_TraceType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeLegacyJsonTrace.type)
}

// optional string data = 2;
inline bool ChromeLegacyJsonTrace::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChromeLegacyJsonTrace::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChromeLegacyJsonTrace::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChromeLegacyJsonTrace::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
inline const ::std::string& ChromeLegacyJsonTrace::data() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeLegacyJsonTrace.data)
  return data_.GetNoArena();
}
inline void ChromeLegacyJsonTrace::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeLegacyJsonTrace.data)
}
#if LANG_CXX11
inline void ChromeLegacyJsonTrace::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.ChromeLegacyJsonTrace.data)
}
#endif
inline void ChromeLegacyJsonTrace::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.ChromeLegacyJsonTrace.data)
}
inline void ChromeLegacyJsonTrace::set_data(const char* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.ChromeLegacyJsonTrace.data)
}
inline ::std::string* ChromeLegacyJsonTrace::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ChromeLegacyJsonTrace.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChromeLegacyJsonTrace::release_data() {
  // @@protoc_insertion_point(field_release:perfetto.protos.ChromeLegacyJsonTrace.data)
  if (!has_data()) {
    return NULL;
  }
  clear_has_data();
  return data_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChromeLegacyJsonTrace::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.ChromeLegacyJsonTrace.data)
}

// -------------------------------------------------------------------

// ChromeEventBundle

// repeated .perfetto.protos.ChromeTraceEvent trace_events = 1 [deprecated = true];
inline int ChromeEventBundle::trace_events_size() const {
  return trace_events_.size();
}
inline void ChromeEventBundle::clear_trace_events() {
  trace_events_.Clear();
}
inline ::perfetto::protos::ChromeTraceEvent* ChromeEventBundle::mutable_trace_events(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ChromeEventBundle.trace_events)
  return trace_events_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::perfetto::protos::ChromeTraceEvent >*
ChromeEventBundle::mutable_trace_events() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.ChromeEventBundle.trace_events)
  return &trace_events_;
}
inline const ::perfetto::protos::ChromeTraceEvent& ChromeEventBundle::trace_events(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeEventBundle.trace_events)
  return trace_events_.Get(index);
}
inline ::perfetto::protos::ChromeTraceEvent* ChromeEventBundle::add_trace_events() {
  // @@protoc_insertion_point(field_add:perfetto.protos.ChromeEventBundle.trace_events)
  return trace_events_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::perfetto::protos::ChromeTraceEvent >&
ChromeEventBundle::trace_events() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.ChromeEventBundle.trace_events)
  return trace_events_;
}

// repeated .perfetto.protos.ChromeMetadata metadata = 2;
inline int ChromeEventBundle::metadata_size() const {
  return metadata_.size();
}
inline void ChromeEventBundle::clear_metadata() {
  metadata_.Clear();
}
inline ::perfetto::protos::ChromeMetadata* ChromeEventBundle::mutable_metadata(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ChromeEventBundle.metadata)
  return metadata_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::perfetto::protos::ChromeMetadata >*
ChromeEventBundle::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.ChromeEventBundle.metadata)
  return &metadata_;
}
inline const ::perfetto::protos::ChromeMetadata& ChromeEventBundle::metadata(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeEventBundle.metadata)
  return metadata_.Get(index);
}
inline ::perfetto::protos::ChromeMetadata* ChromeEventBundle::add_metadata() {
  // @@protoc_insertion_point(field_add:perfetto.protos.ChromeEventBundle.metadata)
  return metadata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::perfetto::protos::ChromeMetadata >&
ChromeEventBundle::metadata() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.ChromeEventBundle.metadata)
  return metadata_;
}

// repeated string legacy_ftrace_output = 4;
inline int ChromeEventBundle::legacy_ftrace_output_size() const {
  return legacy_ftrace_output_.size();
}
inline void ChromeEventBundle::clear_legacy_ftrace_output() {
  legacy_ftrace_output_.Clear();
}
inline const ::std::string& ChromeEventBundle::legacy_ftrace_output(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeEventBundle.legacy_ftrace_output)
  return legacy_ftrace_output_.Get(index);
}
inline ::std::string* ChromeEventBundle::mutable_legacy_ftrace_output(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ChromeEventBundle.legacy_ftrace_output)
  return legacy_ftrace_output_.Mutable(index);
}
inline void ChromeEventBundle::set_legacy_ftrace_output(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeEventBundle.legacy_ftrace_output)
  legacy_ftrace_output_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ChromeEventBundle::set_legacy_ftrace_output(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeEventBundle.legacy_ftrace_output)
  legacy_ftrace_output_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ChromeEventBundle::set_legacy_ftrace_output(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  legacy_ftrace_output_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:perfetto.protos.ChromeEventBundle.legacy_ftrace_output)
}
inline void ChromeEventBundle::set_legacy_ftrace_output(int index, const char* value, size_t size) {
  legacy_ftrace_output_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.ChromeEventBundle.legacy_ftrace_output)
}
inline ::std::string* ChromeEventBundle::add_legacy_ftrace_output() {
  // @@protoc_insertion_point(field_add_mutable:perfetto.protos.ChromeEventBundle.legacy_ftrace_output)
  return legacy_ftrace_output_.Add();
}
inline void ChromeEventBundle::add_legacy_ftrace_output(const ::std::string& value) {
  legacy_ftrace_output_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.ChromeEventBundle.legacy_ftrace_output)
}
#if LANG_CXX11
inline void ChromeEventBundle::add_legacy_ftrace_output(::std::string&& value) {
  legacy_ftrace_output_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:perfetto.protos.ChromeEventBundle.legacy_ftrace_output)
}
#endif
inline void ChromeEventBundle::add_legacy_ftrace_output(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  legacy_ftrace_output_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:perfetto.protos.ChromeEventBundle.legacy_ftrace_output)
}
inline void ChromeEventBundle::add_legacy_ftrace_output(const char* value, size_t size) {
  legacy_ftrace_output_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:perfetto.protos.ChromeEventBundle.legacy_ftrace_output)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ChromeEventBundle::legacy_ftrace_output() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.ChromeEventBundle.legacy_ftrace_output)
  return legacy_ftrace_output_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ChromeEventBundle::mutable_legacy_ftrace_output() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.ChromeEventBundle.legacy_ftrace_output)
  return &legacy_ftrace_output_;
}

// repeated .perfetto.protos.ChromeLegacyJsonTrace legacy_json_trace = 5;
inline int ChromeEventBundle::legacy_json_trace_size() const {
  return legacy_json_trace_.size();
}
inline void ChromeEventBundle::clear_legacy_json_trace() {
  legacy_json_trace_.Clear();
}
inline ::perfetto::protos::ChromeLegacyJsonTrace* ChromeEventBundle::mutable_legacy_json_trace(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ChromeEventBundle.legacy_json_trace)
  return legacy_json_trace_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::perfetto::protos::ChromeLegacyJsonTrace >*
ChromeEventBundle::mutable_legacy_json_trace() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.ChromeEventBundle.legacy_json_trace)
  return &legacy_json_trace_;
}
inline const ::perfetto::protos::ChromeLegacyJsonTrace& ChromeEventBundle::legacy_json_trace(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeEventBundle.legacy_json_trace)
  return legacy_json_trace_.Get(index);
}
inline ::perfetto::protos::ChromeLegacyJsonTrace* ChromeEventBundle::add_legacy_json_trace() {
  // @@protoc_insertion_point(field_add:perfetto.protos.ChromeEventBundle.legacy_json_trace)
  return legacy_json_trace_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::perfetto::protos::ChromeLegacyJsonTrace >&
ChromeEventBundle::legacy_json_trace() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.ChromeEventBundle.legacy_json_trace)
  return legacy_json_trace_;
}

// repeated .perfetto.protos.ChromeStringTableEntry string_table = 3 [deprecated = true];
inline int ChromeEventBundle::string_table_size() const {
  return string_table_.size();
}
inline void ChromeEventBundle::clear_string_table() {
  string_table_.Clear();
}
inline ::perfetto::protos::ChromeStringTableEntry* ChromeEventBundle::mutable_string_table(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ChromeEventBundle.string_table)
  return string_table_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::perfetto::protos::ChromeStringTableEntry >*
ChromeEventBundle::mutable_string_table() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.ChromeEventBundle.string_table)
  return &string_table_;
}
inline const ::perfetto::protos::ChromeStringTableEntry& ChromeEventBundle::string_table(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeEventBundle.string_table)
  return string_table_.Get(index);
}
inline ::perfetto::protos::ChromeStringTableEntry* ChromeEventBundle::add_string_table() {
  // @@protoc_insertion_point(field_add:perfetto.protos.ChromeEventBundle.string_table)
  return string_table_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::perfetto::protos::ChromeStringTableEntry >&
ChromeEventBundle::string_table() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.ChromeEventBundle.string_table)
  return string_table_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::perfetto::protos::ChromeTracedValue_NestedType> : ::std::true_type {};
template <> struct is_proto_enum< ::perfetto::protos::ChromeLegacyJsonTrace_TraceType> : ::std::true_type {};

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_perfetto_2ftrace_2fchrome_2fchrome_5ftrace_5fevent_2eproto
