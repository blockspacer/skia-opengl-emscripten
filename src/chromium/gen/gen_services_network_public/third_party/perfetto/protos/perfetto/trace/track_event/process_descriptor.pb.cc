// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: perfetto/trace/track_event/process_descriptor.proto

#include "perfetto/trace/track_event/process_descriptor.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace perfetto {
namespace protos {
class ProcessDescriptorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ProcessDescriptor>
      _instance;
} _ProcessDescriptor_default_instance_;
}  // namespace protos
}  // namespace perfetto
namespace protobuf_perfetto_2ftrace_2ftrack_5fevent_2fprocess_5fdescriptor_2eproto {
static void InitDefaultsProcessDescriptor() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_ProcessDescriptor_default_instance_;
    new (ptr) ::perfetto::protos::ProcessDescriptor();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::ProcessDescriptor::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ProcessDescriptor =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsProcessDescriptor}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_ProcessDescriptor.base);
}

}  // namespace protobuf_perfetto_2ftrace_2ftrack_5fevent_2fprocess_5fdescriptor_2eproto
namespace perfetto {
namespace protos {
bool ProcessDescriptor_ChromeProcessType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ProcessDescriptor_ChromeProcessType ProcessDescriptor::PROCESS_UNSPECIFIED;
const ProcessDescriptor_ChromeProcessType ProcessDescriptor::PROCESS_BROWSER;
const ProcessDescriptor_ChromeProcessType ProcessDescriptor::PROCESS_RENDERER;
const ProcessDescriptor_ChromeProcessType ProcessDescriptor::PROCESS_UTILITY;
const ProcessDescriptor_ChromeProcessType ProcessDescriptor::PROCESS_ZYGOTE;
const ProcessDescriptor_ChromeProcessType ProcessDescriptor::PROCESS_SANDBOX_HELPER;
const ProcessDescriptor_ChromeProcessType ProcessDescriptor::PROCESS_GPU;
const ProcessDescriptor_ChromeProcessType ProcessDescriptor::PROCESS_PPAPI_PLUGIN;
const ProcessDescriptor_ChromeProcessType ProcessDescriptor::PROCESS_PPAPI_BROKER;
const ProcessDescriptor_ChromeProcessType ProcessDescriptor::ChromeProcessType_MIN;
const ProcessDescriptor_ChromeProcessType ProcessDescriptor::ChromeProcessType_MAX;
const int ProcessDescriptor::ChromeProcessType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void ProcessDescriptor::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProcessDescriptor::kPidFieldNumber;
const int ProcessDescriptor::kCmdlineFieldNumber;
const int ProcessDescriptor::kLegacySortIndexFieldNumber;
const int ProcessDescriptor::kChromeProcessTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProcessDescriptor::ProcessDescriptor()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_perfetto_2ftrace_2ftrack_5fevent_2fprocess_5fdescriptor_2eproto::scc_info_ProcessDescriptor.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.ProcessDescriptor)
}
ProcessDescriptor::ProcessDescriptor(const ProcessDescriptor& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      cmdline_(from.cmdline_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&pid_, &from.pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&chrome_process_type_) -
    reinterpret_cast<char*>(&pid_)) + sizeof(chrome_process_type_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.ProcessDescriptor)
}

void ProcessDescriptor::SharedCtor() {
  ::memset(&pid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chrome_process_type_) -
      reinterpret_cast<char*>(&pid_)) + sizeof(chrome_process_type_));
}

ProcessDescriptor::~ProcessDescriptor() {
  // @@protoc_insertion_point(destructor:perfetto.protos.ProcessDescriptor)
  SharedDtor();
}

void ProcessDescriptor::SharedDtor() {
}

void ProcessDescriptor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProcessDescriptor& ProcessDescriptor::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_perfetto_2ftrace_2ftrack_5fevent_2fprocess_5fdescriptor_2eproto::scc_info_ProcessDescriptor.base);
  return *internal_default_instance();
}


void ProcessDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.ProcessDescriptor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cmdline_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&pid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&chrome_process_type_) -
        reinterpret_cast<char*>(&pid_)) + sizeof(chrome_process_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ProcessDescriptor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.ProcessDescriptor)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 pid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_pid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string cmdline = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_cmdline()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 legacy_sort_index = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_legacy_sort_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &legacy_sort_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.ProcessDescriptor.ChromeProcessType chrome_process_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::perfetto::protos::ProcessDescriptor_ChromeProcessType_IsValid(value)) {
            set_chrome_process_type(static_cast< ::perfetto::protos::ProcessDescriptor_ChromeProcessType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(32u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.ProcessDescriptor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.ProcessDescriptor)
  return false;
#undef DO_
}

void ProcessDescriptor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.ProcessDescriptor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 pid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pid(), output);
  }

  // repeated string cmdline = 2;
  for (int i = 0, n = this->cmdline_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->cmdline(i), output);
  }

  // optional int32 legacy_sort_index = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->legacy_sort_index(), output);
  }

  // optional .perfetto.protos.ProcessDescriptor.ChromeProcessType chrome_process_type = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->chrome_process_type(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.ProcessDescriptor)
}

size_t ProcessDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.ProcessDescriptor)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // repeated string cmdline = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->cmdline_size());
  for (int i = 0, n = this->cmdline_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->cmdline(i));
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 pid = 1;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pid());
    }

    // optional int32 legacy_sort_index = 3;
    if (has_legacy_sort_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->legacy_sort_index());
    }

    // optional .perfetto.protos.ProcessDescriptor.ChromeProcessType chrome_process_type = 4;
    if (has_chrome_process_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->chrome_process_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProcessDescriptor::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ProcessDescriptor*>(&from));
}

void ProcessDescriptor::MergeFrom(const ProcessDescriptor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.ProcessDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cmdline_.MergeFrom(from.cmdline_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      pid_ = from.pid_;
    }
    if (cached_has_bits & 0x00000002u) {
      legacy_sort_index_ = from.legacy_sort_index_;
    }
    if (cached_has_bits & 0x00000004u) {
      chrome_process_type_ = from.chrome_process_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProcessDescriptor::CopyFrom(const ProcessDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.ProcessDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessDescriptor::IsInitialized() const {
  return true;
}

void ProcessDescriptor::Swap(ProcessDescriptor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProcessDescriptor::InternalSwap(ProcessDescriptor* other) {
  using std::swap;
  cmdline_.InternalSwap(CastToBase(&other->cmdline_));
  swap(pid_, other->pid_);
  swap(legacy_sort_index_, other->legacy_sort_index_);
  swap(chrome_process_type_, other->chrome_process_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string ProcessDescriptor::GetTypeName() const {
  return "perfetto.protos.ProcessDescriptor";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::perfetto::protos::ProcessDescriptor* Arena::CreateMaybeMessage< ::perfetto::protos::ProcessDescriptor >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::ProcessDescriptor >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
