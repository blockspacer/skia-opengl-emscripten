// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: perfetto/config/ftrace/ftrace_config.proto

#ifndef PROTOBUF_INCLUDED_perfetto_2fconfig_2fftrace_2fftrace_5fconfig_2eproto
#define PROTOBUF_INCLUDED_perfetto_2fconfig_2fftrace_2fftrace_5fconfig_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_perfetto_2fconfig_2fftrace_2fftrace_5fconfig_2eproto 

namespace protobuf_perfetto_2fconfig_2fftrace_2fftrace_5fconfig_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
}  // namespace protobuf_perfetto_2fconfig_2fftrace_2fftrace_5fconfig_2eproto
namespace perfetto {
namespace protos {
class FtraceConfig;
class FtraceConfigDefaultTypeInternal;
extern FtraceConfigDefaultTypeInternal _FtraceConfig_default_instance_;
}  // namespace protos
}  // namespace perfetto
namespace google {
namespace protobuf {
template<> ::perfetto::protos::FtraceConfig* Arena::CreateMaybeMessage<::perfetto::protos::FtraceConfig>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace perfetto {
namespace protos {

// ===================================================================

class FtraceConfig : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.FtraceConfig) */ {
 public:
  FtraceConfig();
  virtual ~FtraceConfig();

  FtraceConfig(const FtraceConfig& from);

  inline FtraceConfig& operator=(const FtraceConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FtraceConfig(FtraceConfig&& from) noexcept
    : FtraceConfig() {
    *this = ::std::move(from);
  }

  inline FtraceConfig& operator=(FtraceConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const FtraceConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FtraceConfig* internal_default_instance() {
    return reinterpret_cast<const FtraceConfig*>(
               &_FtraceConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(FtraceConfig* other);
  friend void swap(FtraceConfig& a, FtraceConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FtraceConfig* New() const final {
    return CreateMaybeMessage<FtraceConfig>(NULL);
  }

  FtraceConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FtraceConfig>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const FtraceConfig& from);
  void MergeFrom(const FtraceConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FtraceConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string ftrace_events = 1;
  int ftrace_events_size() const;
  void clear_ftrace_events();
  static const int kFtraceEventsFieldNumber = 1;
  const ::std::string& ftrace_events(int index) const;
  ::std::string* mutable_ftrace_events(int index);
  void set_ftrace_events(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_ftrace_events(int index, ::std::string&& value);
  #endif
  void set_ftrace_events(int index, const char* value);
  void set_ftrace_events(int index, const char* value, size_t size);
  ::std::string* add_ftrace_events();
  void add_ftrace_events(const ::std::string& value);
  #if LANG_CXX11
  void add_ftrace_events(::std::string&& value);
  #endif
  void add_ftrace_events(const char* value);
  void add_ftrace_events(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& ftrace_events() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_ftrace_events();

  // repeated string atrace_categories = 2;
  int atrace_categories_size() const;
  void clear_atrace_categories();
  static const int kAtraceCategoriesFieldNumber = 2;
  const ::std::string& atrace_categories(int index) const;
  ::std::string* mutable_atrace_categories(int index);
  void set_atrace_categories(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_atrace_categories(int index, ::std::string&& value);
  #endif
  void set_atrace_categories(int index, const char* value);
  void set_atrace_categories(int index, const char* value, size_t size);
  ::std::string* add_atrace_categories();
  void add_atrace_categories(const ::std::string& value);
  #if LANG_CXX11
  void add_atrace_categories(::std::string&& value);
  #endif
  void add_atrace_categories(const char* value);
  void add_atrace_categories(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& atrace_categories() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_atrace_categories();

  // repeated string atrace_apps = 3;
  int atrace_apps_size() const;
  void clear_atrace_apps();
  static const int kAtraceAppsFieldNumber = 3;
  const ::std::string& atrace_apps(int index) const;
  ::std::string* mutable_atrace_apps(int index);
  void set_atrace_apps(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_atrace_apps(int index, ::std::string&& value);
  #endif
  void set_atrace_apps(int index, const char* value);
  void set_atrace_apps(int index, const char* value, size_t size);
  ::std::string* add_atrace_apps();
  void add_atrace_apps(const ::std::string& value);
  #if LANG_CXX11
  void add_atrace_apps(::std::string&& value);
  #endif
  void add_atrace_apps(const char* value);
  void add_atrace_apps(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& atrace_apps() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_atrace_apps();

  // optional uint32 buffer_size_kb = 10;
  bool has_buffer_size_kb() const;
  void clear_buffer_size_kb();
  static const int kBufferSizeKbFieldNumber = 10;
  ::google::protobuf::uint32 buffer_size_kb() const;
  void set_buffer_size_kb(::google::protobuf::uint32 value);

  // optional uint32 drain_period_ms = 11;
  bool has_drain_period_ms() const;
  void clear_drain_period_ms();
  static const int kDrainPeriodMsFieldNumber = 11;
  ::google::protobuf::uint32 drain_period_ms() const;
  void set_drain_period_ms(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.FtraceConfig)
 private:
  void set_has_buffer_size_kb();
  void clear_has_buffer_size_kb();
  void set_has_drain_period_ms();
  void clear_has_drain_period_ms();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> ftrace_events_;
  ::google::protobuf::RepeatedPtrField< ::std::string> atrace_categories_;
  ::google::protobuf::RepeatedPtrField< ::std::string> atrace_apps_;
  ::google::protobuf::uint32 buffer_size_kb_;
  ::google::protobuf::uint32 drain_period_ms_;
  friend struct ::protobuf_perfetto_2fconfig_2fftrace_2fftrace_5fconfig_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FtraceConfig

// repeated string ftrace_events = 1;
inline int FtraceConfig::ftrace_events_size() const {
  return ftrace_events_.size();
}
inline void FtraceConfig::clear_ftrace_events() {
  ftrace_events_.Clear();
}
inline const ::std::string& FtraceConfig::ftrace_events(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceConfig.ftrace_events)
  return ftrace_events_.Get(index);
}
inline ::std::string* FtraceConfig::mutable_ftrace_events(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceConfig.ftrace_events)
  return ftrace_events_.Mutable(index);
}
inline void FtraceConfig::set_ftrace_events(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceConfig.ftrace_events)
  ftrace_events_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void FtraceConfig::set_ftrace_events(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceConfig.ftrace_events)
  ftrace_events_.Mutable(index)->assign(std::move(value));
}
#endif
inline void FtraceConfig::set_ftrace_events(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  ftrace_events_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:perfetto.protos.FtraceConfig.ftrace_events)
}
inline void FtraceConfig::set_ftrace_events(int index, const char* value, size_t size) {
  ftrace_events_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.FtraceConfig.ftrace_events)
}
inline ::std::string* FtraceConfig::add_ftrace_events() {
  // @@protoc_insertion_point(field_add_mutable:perfetto.protos.FtraceConfig.ftrace_events)
  return ftrace_events_.Add();
}
inline void FtraceConfig::add_ftrace_events(const ::std::string& value) {
  ftrace_events_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.FtraceConfig.ftrace_events)
}
#if LANG_CXX11
inline void FtraceConfig::add_ftrace_events(::std::string&& value) {
  ftrace_events_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:perfetto.protos.FtraceConfig.ftrace_events)
}
#endif
inline void FtraceConfig::add_ftrace_events(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  ftrace_events_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:perfetto.protos.FtraceConfig.ftrace_events)
}
inline void FtraceConfig::add_ftrace_events(const char* value, size_t size) {
  ftrace_events_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:perfetto.protos.FtraceConfig.ftrace_events)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
FtraceConfig::ftrace_events() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.FtraceConfig.ftrace_events)
  return ftrace_events_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
FtraceConfig::mutable_ftrace_events() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.FtraceConfig.ftrace_events)
  return &ftrace_events_;
}

// repeated string atrace_categories = 2;
inline int FtraceConfig::atrace_categories_size() const {
  return atrace_categories_.size();
}
inline void FtraceConfig::clear_atrace_categories() {
  atrace_categories_.Clear();
}
inline const ::std::string& FtraceConfig::atrace_categories(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceConfig.atrace_categories)
  return atrace_categories_.Get(index);
}
inline ::std::string* FtraceConfig::mutable_atrace_categories(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceConfig.atrace_categories)
  return atrace_categories_.Mutable(index);
}
inline void FtraceConfig::set_atrace_categories(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceConfig.atrace_categories)
  atrace_categories_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void FtraceConfig::set_atrace_categories(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceConfig.atrace_categories)
  atrace_categories_.Mutable(index)->assign(std::move(value));
}
#endif
inline void FtraceConfig::set_atrace_categories(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  atrace_categories_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:perfetto.protos.FtraceConfig.atrace_categories)
}
inline void FtraceConfig::set_atrace_categories(int index, const char* value, size_t size) {
  atrace_categories_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.FtraceConfig.atrace_categories)
}
inline ::std::string* FtraceConfig::add_atrace_categories() {
  // @@protoc_insertion_point(field_add_mutable:perfetto.protos.FtraceConfig.atrace_categories)
  return atrace_categories_.Add();
}
inline void FtraceConfig::add_atrace_categories(const ::std::string& value) {
  atrace_categories_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.FtraceConfig.atrace_categories)
}
#if LANG_CXX11
inline void FtraceConfig::add_atrace_categories(::std::string&& value) {
  atrace_categories_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:perfetto.protos.FtraceConfig.atrace_categories)
}
#endif
inline void FtraceConfig::add_atrace_categories(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  atrace_categories_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:perfetto.protos.FtraceConfig.atrace_categories)
}
inline void FtraceConfig::add_atrace_categories(const char* value, size_t size) {
  atrace_categories_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:perfetto.protos.FtraceConfig.atrace_categories)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
FtraceConfig::atrace_categories() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.FtraceConfig.atrace_categories)
  return atrace_categories_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
FtraceConfig::mutable_atrace_categories() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.FtraceConfig.atrace_categories)
  return &atrace_categories_;
}

// repeated string atrace_apps = 3;
inline int FtraceConfig::atrace_apps_size() const {
  return atrace_apps_.size();
}
inline void FtraceConfig::clear_atrace_apps() {
  atrace_apps_.Clear();
}
inline const ::std::string& FtraceConfig::atrace_apps(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceConfig.atrace_apps)
  return atrace_apps_.Get(index);
}
inline ::std::string* FtraceConfig::mutable_atrace_apps(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceConfig.atrace_apps)
  return atrace_apps_.Mutable(index);
}
inline void FtraceConfig::set_atrace_apps(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceConfig.atrace_apps)
  atrace_apps_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void FtraceConfig::set_atrace_apps(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceConfig.atrace_apps)
  atrace_apps_.Mutable(index)->assign(std::move(value));
}
#endif
inline void FtraceConfig::set_atrace_apps(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  atrace_apps_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:perfetto.protos.FtraceConfig.atrace_apps)
}
inline void FtraceConfig::set_atrace_apps(int index, const char* value, size_t size) {
  atrace_apps_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.FtraceConfig.atrace_apps)
}
inline ::std::string* FtraceConfig::add_atrace_apps() {
  // @@protoc_insertion_point(field_add_mutable:perfetto.protos.FtraceConfig.atrace_apps)
  return atrace_apps_.Add();
}
inline void FtraceConfig::add_atrace_apps(const ::std::string& value) {
  atrace_apps_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.FtraceConfig.atrace_apps)
}
#if LANG_CXX11
inline void FtraceConfig::add_atrace_apps(::std::string&& value) {
  atrace_apps_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:perfetto.protos.FtraceConfig.atrace_apps)
}
#endif
inline void FtraceConfig::add_atrace_apps(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  atrace_apps_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:perfetto.protos.FtraceConfig.atrace_apps)
}
inline void FtraceConfig::add_atrace_apps(const char* value, size_t size) {
  atrace_apps_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:perfetto.protos.FtraceConfig.atrace_apps)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
FtraceConfig::atrace_apps() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.FtraceConfig.atrace_apps)
  return atrace_apps_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
FtraceConfig::mutable_atrace_apps() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.FtraceConfig.atrace_apps)
  return &atrace_apps_;
}

// optional uint32 buffer_size_kb = 10;
inline bool FtraceConfig::has_buffer_size_kb() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FtraceConfig::set_has_buffer_size_kb() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FtraceConfig::clear_has_buffer_size_kb() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FtraceConfig::clear_buffer_size_kb() {
  buffer_size_kb_ = 0u;
  clear_has_buffer_size_kb();
}
inline ::google::protobuf::uint32 FtraceConfig::buffer_size_kb() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceConfig.buffer_size_kb)
  return buffer_size_kb_;
}
inline void FtraceConfig::set_buffer_size_kb(::google::protobuf::uint32 value) {
  set_has_buffer_size_kb();
  buffer_size_kb_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceConfig.buffer_size_kb)
}

// optional uint32 drain_period_ms = 11;
inline bool FtraceConfig::has_drain_period_ms() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FtraceConfig::set_has_drain_period_ms() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FtraceConfig::clear_has_drain_period_ms() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FtraceConfig::clear_drain_period_ms() {
  drain_period_ms_ = 0u;
  clear_has_drain_period_ms();
}
inline ::google::protobuf::uint32 FtraceConfig::drain_period_ms() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceConfig.drain_period_ms)
  return drain_period_ms_;
}
inline void FtraceConfig::set_drain_period_ms(::google::protobuf::uint32 value) {
  set_has_drain_period_ms();
  drain_period_ms_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceConfig.drain_period_ms)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_perfetto_2fconfig_2fftrace_2fftrace_5fconfig_2eproto
