// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: perfetto/trace/trusted_packet.proto

#include "perfetto/trace/trusted_packet.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_perfetto_2fcommon_2ftrace_5fstats_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_perfetto_2fcommon_2ftrace_5fstats_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_TraceStats;
}  // namespace protobuf_perfetto_2fcommon_2ftrace_5fstats_2eproto
namespace protobuf_perfetto_2fconfig_2ftrace_5fconfig_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_perfetto_2fconfig_2ftrace_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<7> scc_info_TraceConfig;
}  // namespace protobuf_perfetto_2fconfig_2ftrace_5fconfig_2eproto
namespace protobuf_perfetto_2ftrace_2fclock_5fsnapshot_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_perfetto_2ftrace_2fclock_5fsnapshot_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ClockSnapshot;
}  // namespace protobuf_perfetto_2ftrace_2fclock_5fsnapshot_2eproto
namespace protobuf_perfetto_2ftrace_2fsystem_5finfo_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_perfetto_2ftrace_2fsystem_5finfo_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_SystemInfo;
}  // namespace protobuf_perfetto_2ftrace_2fsystem_5finfo_2eproto
namespace protobuf_perfetto_2ftrace_2ftrigger_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_perfetto_2ftrace_2ftrigger_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Trigger;
}  // namespace protobuf_perfetto_2ftrace_2ftrigger_2eproto
namespace perfetto {
namespace protos {
class TrustedPacketDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TrustedPacket>
      _instance;
  ::google::protobuf::int32 trusted_uid_;
  ::google::protobuf::uint32 trusted_packet_sequence_id_;
} _TrustedPacket_default_instance_;
}  // namespace protos
}  // namespace perfetto
namespace protobuf_perfetto_2ftrace_2ftrusted_5fpacket_2eproto {
static void InitDefaultsTrustedPacket() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_TrustedPacket_default_instance_;
    new (ptr) ::perfetto::protos::TrustedPacket();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::TrustedPacket::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<5> scc_info_TrustedPacket =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsTrustedPacket}, {
      &protobuf_perfetto_2ftrace_2fclock_5fsnapshot_2eproto::scc_info_ClockSnapshot.base,
      &protobuf_perfetto_2fconfig_2ftrace_5fconfig_2eproto::scc_info_TraceConfig.base,
      &protobuf_perfetto_2fcommon_2ftrace_5fstats_2eproto::scc_info_TraceStats.base,
      &protobuf_perfetto_2ftrace_2fsystem_5finfo_2eproto::scc_info_SystemInfo.base,
      &protobuf_perfetto_2ftrace_2ftrigger_2eproto::scc_info_Trigger.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_TrustedPacket.base);
}

}  // namespace protobuf_perfetto_2ftrace_2ftrusted_5fpacket_2eproto
namespace perfetto {
namespace protos {

// ===================================================================

void TrustedPacket::InitAsDefaultInstance() {
  ::perfetto::protos::_TrustedPacket_default_instance_._instance.get_mutable()->clock_snapshot_ = const_cast< ::perfetto::protos::ClockSnapshot*>(
      ::perfetto::protos::ClockSnapshot::internal_default_instance());
  ::perfetto::protos::_TrustedPacket_default_instance_._instance.get_mutable()->trace_config_ = const_cast< ::perfetto::protos::TraceConfig*>(
      ::perfetto::protos::TraceConfig::internal_default_instance());
  ::perfetto::protos::_TrustedPacket_default_instance_._instance.get_mutable()->trace_stats_ = const_cast< ::perfetto::protos::TraceStats*>(
      ::perfetto::protos::TraceStats::internal_default_instance());
  ::perfetto::protos::_TrustedPacket_default_instance_._instance.get_mutable()->system_info_ = const_cast< ::perfetto::protos::SystemInfo*>(
      ::perfetto::protos::SystemInfo::internal_default_instance());
  ::perfetto::protos::_TrustedPacket_default_instance_._instance.get_mutable()->trigger_ = const_cast< ::perfetto::protos::Trigger*>(
      ::perfetto::protos::Trigger::internal_default_instance());
}
void TrustedPacket::clear_clock_snapshot() {
  if (GetArenaNoVirtual() == NULL && clock_snapshot_ != NULL) {
    delete clock_snapshot_;
  }
  clock_snapshot_ = NULL;
}
void TrustedPacket::clear_trace_config() {
  if (GetArenaNoVirtual() == NULL && trace_config_ != NULL) {
    delete trace_config_;
  }
  trace_config_ = NULL;
}
void TrustedPacket::clear_trace_stats() {
  if (GetArenaNoVirtual() == NULL && trace_stats_ != NULL) {
    delete trace_stats_;
  }
  trace_stats_ = NULL;
}
void TrustedPacket::clear_system_info() {
  if (GetArenaNoVirtual() == NULL && system_info_ != NULL) {
    delete system_info_;
  }
  system_info_ = NULL;
}
void TrustedPacket::clear_trigger() {
  if (GetArenaNoVirtual() == NULL && trigger_ != NULL) {
    delete trigger_;
  }
  trigger_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrustedPacket::kTrustedUidFieldNumber;
const int TrustedPacket::kTrustedPacketSequenceIdFieldNumber;
const int TrustedPacket::kClockSnapshotFieldNumber;
const int TrustedPacket::kTimestampFieldNumber;
const int TrustedPacket::kTraceConfigFieldNumber;
const int TrustedPacket::kTraceStatsFieldNumber;
const int TrustedPacket::kSynchronizationMarkerFieldNumber;
const int TrustedPacket::kPreviousPacketDroppedFieldNumber;
const int TrustedPacket::kSystemInfoFieldNumber;
const int TrustedPacket::kTriggerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrustedPacket::TrustedPacket()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_perfetto_2ftrace_2ftrusted_5fpacket_2eproto::scc_info_TrustedPacket.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.TrustedPacket)
}
TrustedPacket::TrustedPacket(const TrustedPacket& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  synchronization_marker_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.synchronization_marker().size() > 0) {
    synchronization_marker_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.synchronization_marker_);
  }
  if (from.has_clock_snapshot()) {
    clock_snapshot_ = new ::perfetto::protos::ClockSnapshot(*from.clock_snapshot_);
  } else {
    clock_snapshot_ = NULL;
  }
  if (from.has_trace_config()) {
    trace_config_ = new ::perfetto::protos::TraceConfig(*from.trace_config_);
  } else {
    trace_config_ = NULL;
  }
  if (from.has_trace_stats()) {
    trace_stats_ = new ::perfetto::protos::TraceStats(*from.trace_stats_);
  } else {
    trace_stats_ = NULL;
  }
  if (from.has_system_info()) {
    system_info_ = new ::perfetto::protos::SystemInfo(*from.system_info_);
  } else {
    system_info_ = NULL;
  }
  if (from.has_trigger()) {
    trigger_ = new ::perfetto::protos::Trigger(*from.trigger_);
  } else {
    trigger_ = NULL;
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&previous_packet_dropped_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(previous_packet_dropped_));
  clear_has_optional_trusted_uid();
  switch (from.optional_trusted_uid_case()) {
    case kTrustedUid: {
      set_trusted_uid(from.trusted_uid());
      break;
    }
    case OPTIONAL_TRUSTED_UID_NOT_SET: {
      break;
    }
  }
  clear_has_optional_trusted_packet_sequence_id();
  switch (from.optional_trusted_packet_sequence_id_case()) {
    case kTrustedPacketSequenceId: {
      set_trusted_packet_sequence_id(from.trusted_packet_sequence_id());
      break;
    }
    case OPTIONAL_TRUSTED_PACKET_SEQUENCE_ID_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TrustedPacket)
}

void TrustedPacket::SharedCtor() {
  synchronization_marker_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&clock_snapshot_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&previous_packet_dropped_) -
      reinterpret_cast<char*>(&clock_snapshot_)) + sizeof(previous_packet_dropped_));
  clear_has_optional_trusted_uid();
  clear_has_optional_trusted_packet_sequence_id();
}

TrustedPacket::~TrustedPacket() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TrustedPacket)
  SharedDtor();
}

void TrustedPacket::SharedDtor() {
  synchronization_marker_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete clock_snapshot_;
  if (this != internal_default_instance()) delete trace_config_;
  if (this != internal_default_instance()) delete trace_stats_;
  if (this != internal_default_instance()) delete system_info_;
  if (this != internal_default_instance()) delete trigger_;
  if (has_optional_trusted_uid()) {
    clear_optional_trusted_uid();
  }
  if (has_optional_trusted_packet_sequence_id()) {
    clear_optional_trusted_packet_sequence_id();
  }
}

void TrustedPacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrustedPacket& TrustedPacket::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_perfetto_2ftrace_2ftrusted_5fpacket_2eproto::scc_info_TrustedPacket.base);
  return *internal_default_instance();
}


void TrustedPacket::clear_optional_trusted_uid() {
// @@protoc_insertion_point(one_of_clear_start:perfetto.protos.TrustedPacket)
  switch (optional_trusted_uid_case()) {
    case kTrustedUid: {
      // No need to clear
      break;
    }
    case OPTIONAL_TRUSTED_UID_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = OPTIONAL_TRUSTED_UID_NOT_SET;
}

void TrustedPacket::clear_optional_trusted_packet_sequence_id() {
// @@protoc_insertion_point(one_of_clear_start:perfetto.protos.TrustedPacket)
  switch (optional_trusted_packet_sequence_id_case()) {
    case kTrustedPacketSequenceId: {
      // No need to clear
      break;
    }
    case OPTIONAL_TRUSTED_PACKET_SEQUENCE_ID_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = OPTIONAL_TRUSTED_PACKET_SEQUENCE_ID_NOT_SET;
}


void TrustedPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TrustedPacket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  synchronization_marker_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && clock_snapshot_ != NULL) {
    delete clock_snapshot_;
  }
  clock_snapshot_ = NULL;
  if (GetArenaNoVirtual() == NULL && trace_config_ != NULL) {
    delete trace_config_;
  }
  trace_config_ = NULL;
  if (GetArenaNoVirtual() == NULL && trace_stats_ != NULL) {
    delete trace_stats_;
  }
  trace_stats_ = NULL;
  if (GetArenaNoVirtual() == NULL && system_info_ != NULL) {
    delete system_info_;
  }
  system_info_ = NULL;
  if (GetArenaNoVirtual() == NULL && trigger_ != NULL) {
    delete trigger_;
  }
  trigger_ = NULL;
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&previous_packet_dropped_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(previous_packet_dropped_));
  clear_optional_trusted_uid();
  clear_optional_trusted_packet_sequence_id();
  _internal_metadata_.Clear();
}

bool TrustedPacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.TrustedPacket)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 trusted_uid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          clear_optional_trusted_uid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &optional_trusted_uid_.trusted_uid_)));
          set_has_trusted_uid();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .perfetto.protos.ClockSnapshot clock_snapshot = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_clock_snapshot()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 timestamp = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 trusted_packet_sequence_id = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          clear_optional_trusted_packet_sequence_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &optional_trusted_packet_sequence_id_.trusted_packet_sequence_id_)));
          set_has_trusted_packet_sequence_id();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .perfetto.protos.TraceConfig trace_config = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 266 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_trace_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .perfetto.protos.TraceStats trace_stats = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 282 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_trace_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes synchronization_marker = 36;
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 290 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_synchronization_marker()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool previous_packet_dropped = 42;
      case 42: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 336 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &previous_packet_dropped_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .perfetto.protos.SystemInfo system_info = 45;
      case 45: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 362 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_system_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .perfetto.protos.Trigger trigger = 46;
      case 46: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 370 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_trigger()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.TrustedPacket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.TrustedPacket)
  return false;
#undef DO_
}

void TrustedPacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.TrustedPacket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 trusted_uid = 3;
  if (has_trusted_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->trusted_uid(), output);
  }

  // .perfetto.protos.ClockSnapshot clock_snapshot = 6;
  if (this->has_clock_snapshot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->_internal_clock_snapshot(), output);
  }

  // uint64 timestamp = 8;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->timestamp(), output);
  }

  // uint32 trusted_packet_sequence_id = 10;
  if (has_trusted_packet_sequence_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->trusted_packet_sequence_id(), output);
  }

  // .perfetto.protos.TraceConfig trace_config = 33;
  if (this->has_trace_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      33, this->_internal_trace_config(), output);
  }

  // .perfetto.protos.TraceStats trace_stats = 35;
  if (this->has_trace_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      35, this->_internal_trace_stats(), output);
  }

  // bytes synchronization_marker = 36;
  if (this->synchronization_marker().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      36, this->synchronization_marker(), output);
  }

  // bool previous_packet_dropped = 42;
  if (this->previous_packet_dropped() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(42, this->previous_packet_dropped(), output);
  }

  // .perfetto.protos.SystemInfo system_info = 45;
  if (this->has_system_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      45, this->_internal_system_info(), output);
  }

  // .perfetto.protos.Trigger trigger = 46;
  if (this->has_trigger()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      46, this->_internal_trigger(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.TrustedPacket)
}

size_t TrustedPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TrustedPacket)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // bytes synchronization_marker = 36;
  if (this->synchronization_marker().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->synchronization_marker());
  }

  // .perfetto.protos.ClockSnapshot clock_snapshot = 6;
  if (this->has_clock_snapshot()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *clock_snapshot_);
  }

  // .perfetto.protos.TraceConfig trace_config = 33;
  if (this->has_trace_config()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *trace_config_);
  }

  // .perfetto.protos.TraceStats trace_stats = 35;
  if (this->has_trace_stats()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *trace_stats_);
  }

  // .perfetto.protos.SystemInfo system_info = 45;
  if (this->has_system_info()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *system_info_);
  }

  // .perfetto.protos.Trigger trigger = 46;
  if (this->has_trigger()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *trigger_);
  }

  // uint64 timestamp = 8;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp());
  }

  // bool previous_packet_dropped = 42;
  if (this->previous_packet_dropped() != 0) {
    total_size += 2 + 1;
  }

  switch (optional_trusted_uid_case()) {
    // int32 trusted_uid = 3;
    case kTrustedUid: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->trusted_uid());
      break;
    }
    case OPTIONAL_TRUSTED_UID_NOT_SET: {
      break;
    }
  }
  switch (optional_trusted_packet_sequence_id_case()) {
    // uint32 trusted_packet_sequence_id = 10;
    case kTrustedPacketSequenceId: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->trusted_packet_sequence_id());
      break;
    }
    case OPTIONAL_TRUSTED_PACKET_SEQUENCE_ID_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrustedPacket::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TrustedPacket*>(&from));
}

void TrustedPacket::MergeFrom(const TrustedPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TrustedPacket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.synchronization_marker().size() > 0) {

    synchronization_marker_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.synchronization_marker_);
  }
  if (from.has_clock_snapshot()) {
    mutable_clock_snapshot()->::perfetto::protos::ClockSnapshot::MergeFrom(from.clock_snapshot());
  }
  if (from.has_trace_config()) {
    mutable_trace_config()->::perfetto::protos::TraceConfig::MergeFrom(from.trace_config());
  }
  if (from.has_trace_stats()) {
    mutable_trace_stats()->::perfetto::protos::TraceStats::MergeFrom(from.trace_stats());
  }
  if (from.has_system_info()) {
    mutable_system_info()->::perfetto::protos::SystemInfo::MergeFrom(from.system_info());
  }
  if (from.has_trigger()) {
    mutable_trigger()->::perfetto::protos::Trigger::MergeFrom(from.trigger());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.previous_packet_dropped() != 0) {
    set_previous_packet_dropped(from.previous_packet_dropped());
  }
  switch (from.optional_trusted_uid_case()) {
    case kTrustedUid: {
      set_trusted_uid(from.trusted_uid());
      break;
    }
    case OPTIONAL_TRUSTED_UID_NOT_SET: {
      break;
    }
  }
  switch (from.optional_trusted_packet_sequence_id_case()) {
    case kTrustedPacketSequenceId: {
      set_trusted_packet_sequence_id(from.trusted_packet_sequence_id());
      break;
    }
    case OPTIONAL_TRUSTED_PACKET_SEQUENCE_ID_NOT_SET: {
      break;
    }
  }
}

void TrustedPacket::CopyFrom(const TrustedPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TrustedPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrustedPacket::IsInitialized() const {
  return true;
}

void TrustedPacket::Swap(TrustedPacket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrustedPacket::InternalSwap(TrustedPacket* other) {
  using std::swap;
  synchronization_marker_.Swap(&other->synchronization_marker_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(clock_snapshot_, other->clock_snapshot_);
  swap(trace_config_, other->trace_config_);
  swap(trace_stats_, other->trace_stats_);
  swap(system_info_, other->system_info_);
  swap(trigger_, other->trigger_);
  swap(timestamp_, other->timestamp_);
  swap(previous_packet_dropped_, other->previous_packet_dropped_);
  swap(optional_trusted_uid_, other->optional_trusted_uid_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(optional_trusted_packet_sequence_id_, other->optional_trusted_packet_sequence_id_);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string TrustedPacket::GetTypeName() const {
  return "perfetto.protos.TrustedPacket";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::perfetto::protos::TrustedPacket* Arena::CreateMaybeMessage< ::perfetto::protos::TrustedPacket >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::TrustedPacket >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
