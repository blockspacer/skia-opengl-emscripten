// Autogenerated by the ProtoZero compiler plugin. DO NOT EDIT.

#ifndef PERFETTO_PROTOS_PERFETTO_TRACE_PS_PROCESS_TREE_PROTO_H_
#define PERFETTO_PROTOS_PERFETTO_TRACE_PS_PROCESS_TREE_PROTO_H_

#include <stddef.h>
#include <stdint.h>

#include "perfetto/base/export.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/message.h"

namespace perfetto {
namespace protos {
namespace pbzero {

class ProcessTree_Process;
class ProcessTree_Thread;

class PERFETTO_EXPORT ProcessTree : public ::protozero::Message {
 public:
  enum : int32_t {
    kProcessesFieldNumber = 1,
    kThreadsFieldNumber = 2,
  };
  class Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/2, /*HAS_REPEATED_FIELDS=*/true> {
   public:
    Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
    bool has_processes() const { return at<1>().valid(); }
    ::protozero::RepeatedFieldIterator processes() const { return GetRepeated(1); }
    bool has_threads() const { return at<2>().valid(); }
    ::protozero::RepeatedFieldIterator threads() const { return GetRepeated(2); }
  };
  using Thread = ::perfetto::protos::pbzero::ProcessTree_Thread;
  using Process = ::perfetto::protos::pbzero::ProcessTree_Process;
  template <typename T = ProcessTree_Process> T* add_processes() {
    return BeginNestedMessage<T>(1);
  }

  template <typename T = ProcessTree_Thread> T* add_threads() {
    return BeginNestedMessage<T>(2);
  }

};

class PERFETTO_EXPORT ProcessTree_Process : public ::protozero::Message {
 public:
  enum : int32_t {
    kPidFieldNumber = 1,
    kPpidFieldNumber = 2,
    kCmdlineFieldNumber = 3,
    kThreadsDeprecatedFieldNumber = 4,
  };
  class Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/4, /*HAS_REPEATED_FIELDS=*/true> {
   public:
    Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
    bool has_pid() const { return at<1>().valid(); }
    int32_t pid() const { return at<1>().as_int32(); }
    bool has_ppid() const { return at<2>().valid(); }
    int32_t ppid() const { return at<2>().as_int32(); }
    bool has_cmdline() const { return at<3>().valid(); }
    ::protozero::RepeatedFieldIterator cmdline() const { return GetRepeated(3); }
    bool has_threads_deprecated() const { return at<4>().valid(); }
    ::protozero::RepeatedFieldIterator threads_deprecated() const { return GetRepeated(4); }
  };
  void set_pid(int32_t value) {
    AppendVarInt(1, value);
  }
  void set_ppid(int32_t value) {
    AppendVarInt(2, value);
  }
  void add_cmdline(const char* value) {
    AppendString(3, value);
  }
  // Doesn't check for null terminator.
  // Expects |value| to be at least |size| long.
  void add_cmdline(const char* value, size_t size) {
    AppendBytes(3, value, size);
  }
  template <typename T = ProcessTree_Thread> T* add_threads_deprecated() {
    return BeginNestedMessage<T>(4);
  }

};

class PERFETTO_EXPORT ProcessTree_Thread : public ::protozero::Message {
 public:
  enum : int32_t {
    kTidFieldNumber = 1,
    kTgidFieldNumber = 3,
    kNameFieldNumber = 2,
  };
  class Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/3, /*HAS_REPEATED_FIELDS=*/false> {
   public:
    Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
    bool has_tid() const { return at<1>().valid(); }
    int32_t tid() const { return at<1>().as_int32(); }
    bool has_tgid() const { return at<3>().valid(); }
    int32_t tgid() const { return at<3>().as_int32(); }
    bool has_name() const { return at<2>().valid(); }
    ::protozero::ConstChars name() const { return at<2>().as_string(); }
  };
  void set_tid(int32_t value) {
    AppendVarInt(1, value);
  }
  void set_tgid(int32_t value) {
    AppendVarInt(3, value);
  }
  void set_name(const char* value) {
    AppendString(2, value);
  }
  // Doesn't check for null terminator.
  // Expects |value| to be at least |size| long.
  void set_name(const char* value, size_t size) {
    AppendBytes(2, value, size);
  }
};

} // Namespace.
} // Namespace.
} // Namespace.
#endif  // Include guard.
