include_guard( DIRECTORY )

set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
# == NOTE: place set(ENABLE_*) before all checks ==

set(ENABLE_ZLIB TRUE CACHE BOOL "ENABLE_ZLIB")
set(USE_SYSTEM_ZLIB TRUE CACHE BOOL "USE_SYSTEM_ZLIB")

# khronos
if (TARGET_EMSCRIPTEN)
  set(ENABLE_KHRONOS FALSE) # TODO
  set(GLESv2_lib "GLESv2")
elseif(TARGET_LINUX)
  set(ENABLE_KHRONOS TRUE) # TODO
  set(GLESv2_lib "GLESv2")
elseif(TARGET_WINDOWS)
  set(ENABLE_KHRONOS TRUE) # TODO
else()
  message(FATAL_ERROR "platform not supported")
endif()

if(ENABLE_KHRONOS)
  set(khronos_LIB khronos)
else()
  set(khronos_LIB "")
endif(ENABLE_KHRONOS)

if(ENABLE_NATIVE_HTML)
  set(ENABLE_SKIA_EXT FALSE)
else()
  set(ENABLE_SKIA_EXT TRUE)
endif()

message(STATUS "khronos_LIB=${khronos_LIB}")

# you can disable all logic to profile bundle size/memory for some OS
set(ENABLE_MAIN TRUE CACHE BOOL "ENABLE_MAIN")
set(USE_LIBPNG TRUE CACHE BOOL "USE_LIBPNG")

message(STATUS "CMAKE_BUILD_TYPE = ${CMAKE_BUILD_TYPE}")
IF( NOT CMAKE_BUILD_TYPE )
   SET( CMAKE_BUILD_TYPE Debug ... FORCE )
ENDIF()

# SKIA
set(ENABLE_SKIA TRUE CACHE BOOL "ENABLE_SKIA")
set(ENABLE_SKSG FALSE CACHE BOOL "ENABLE_SKSG")
set(ENABLE_SKIA_UTILS FALSE CACHE BOOL "ENABLE_SKIA_UTILS") # required by skottie
set(ENABLE_SKOTTIE FALSE CACHE BOOL "ENABLE_SKOTTIE") # requires sksg
# see https://github.com/google/skia/blob/81abc43e6f0b1a789e1bf116820c8ede68d778ab/modules/skshaper/BUILD.gn#L23
set(ENABLE_SKSHAPER FALSE CACHE BOOL "ENABLE_SKSHAPER")

# TODO Use SKIA GrContext (enable SK_GPU) for native & WASM
# NOTE: SK_GPU takes +3Mib
set(FORCE_DISABLE_SK_GPU FALSE CACHE BOOL "FORCE_DISABLE_SK_GPU")
if(FORCE_DISABLE_SK_GPU)
  set(USE_SK_GPU FALSE)
endif(FORCE_DISABLE_SK_GPU)
message(STATUS "USE_SK_GPU=${USE_SK_GPU}")

# WebAssembly
set(ENABLE_WASM TRUE CACHE BOOL "ENABLE_WASM")
if(NOT ENABLE_WASM)
  message(FATAL_ERROR "only WASM build supported for now")
endif(NOT ENABLE_WASM)
# SIMD
#set(ENABLE_SIMD TRUE)
set(ENABLE_SIMD FALSE CACHE BOOL "ENABLE_SIMD")
# PTHREADS
set(ENABLE_WEB_PTHREADS TRUE CACHE BOOL "ENABLE_WEB_PTHREADS")
if(TARGET_EMSCRIPTEN)
  message(STATUS "ENABLE_WEB_PTHREADS=${ENABLE_WEB_PTHREADS}")
endif(TARGET_EMSCRIPTEN)
#
set(ENABLE_WEBGL2 TRUE CACHE BOOL "ENABLE_WEB_PTHREADS")
#set(ENABLE_WEBGL1 TRUE) # TODO
set(ENABLE_WEBGL_DEBUG_CHECKS TRUE CACHE BOOL "ENABLE_WEBGL_DEBUG_CHECKS") # only in debug

set(USE_ICU TRUE CACHE BOOL "USE_ICU")
set(ENABLE_LIBYUV TRUE CACHE BOOL "ENABLE_LIBYUV")
set(ENABLE_ICCJPEG TRUE CACHE BOOL "ENABLE_ICCJPEG")
set(ENABLE_LIBWEBP FALSE CACHE BOOL "ENABLE_LIBWEBP")
set(ENABLE_GRE2 TRUE CACHE BOOL "ENABLE_GRE2")
set(ENABLE_GLIBXML FALSE CACHE BOOL "ENABLE_GLIBXML")
set(ENABLE_HARFBUZZ TRUE CACHE BOOL "ENABLE_HARFBUZZ")
if(ENABLE_HARFBUZZ AND NOT USE_ICU)
  message(FATAL_ERROR "HARFBUZZ requires ICU")
endif()

set(USE_LIBJPEG_TURBO TRUE CACHE BOOL "USE_LIBJPEG_TURBO")

# fontconfig used by UI_GFX
set(ENABLE_FONTCONFIG FALSE CACHE BOOL "ENABLE_FONTCONFIG")
if(ENABLE_FONTCONFIG AND TARGET_EMSCRIPTEN)
  message(FATAL_ERROR "disable fontconfig on emscripten platform")
endif(ENABLE_FONTCONFIG AND TARGET_EMSCRIPTEN)
if(NOT ENABLE_FONTCONFIG)
  set(COMMON_FLAGS "${COMMON_FLAGS} -DDISABLE_FONTCONFIG=1")
endif(NOT ENABLE_FONTCONFIG)

set(COMMON_THIRDPARTY_DIR ${CMAKE_CURRENT_SOURCE_DIR}/thirdparty/)

set(ENABLE_CMAKE_COMPILE_WARNINGS TRUE CACHE BOOL "ENABLE_CMAKE_COMPILE_WARNINGS")

if(USE_ICU)
  set(COMMON_FLAGS "${COMMON_FLAGS} -DHAS_ICU=1")
  set(USE_CUSTOM_ICU TRUE)
  if(USE_CUSTOM_ICU)
    set(COMMON_FLAGS "${COMMON_FLAGS} -DUSE_CUSTOM_ICU=1")
    set(CUSTOM_ICU_LIB chromium_icu) # see icu.cmake
  else(USE_CUSTOM_ICU)
    set(CUSTOM_ICU_LIB icu) # platform specific
  endif(USE_CUSTOM_ICU)
endif(USE_ICU)

if(NOT DEFINED CUSTOM_ICU_LIB)
  message(FATAL_ERROR "CUSTOM_ICU_LIB must be defined")
endif(NOT DEFINED CUSTOM_ICU_LIB)

if (TARGET_EMSCRIPTEN AND NOT ENABLE_NATIVE_HTML)
  list(APPEND CXTPL_EXTRA_ARGS "-extra-arg=-DPLATFORM_NAME=\"WEBGL\"")
  list(APPEND CXTPL_EXTRA_ARGS "-extra-arg=-DPLATFORM_TYPE=PlatformType::WEBGL")
elseif (TARGET_EMSCRIPTEN AND ENABLE_NATIVE_HTML)
  list(APPEND CXTPL_EXTRA_ARGS "-extra-arg=-DPLATFORM_NAME=\"HTML5\"")
  list(APPEND CXTPL_EXTRA_ARGS "-extra-arg=-DPLATFORM_TYPE=PlatformType::HTML5")
elseif(TARGET_LINUX)
  list(APPEND CXTPL_EXTRA_ARGS "-extra-arg=-DPLATFORM_NAME=\"LINUX\"")
  list(APPEND CXTPL_EXTRA_ARGS "-extra-arg=-DPLATFORM_TYPE=PlatformType::LINUX")
elseif(TARGET_WINDOWS)
  list(APPEND CXTPL_EXTRA_ARGS "-extra-arg=-DPLATFORM_NAME=\"WIN\"")
  list(APPEND CXTPL_EXTRA_ARGS "-extra-arg=-DPLATFORM_TYPE=PlatformType::WIN")
else()
  message(FATAL_ERROR "platform not supported")
endif()

if(TARGET_EMSCRIPTEN)
  set(USE_OPENGL_LIB FALSE) # no system OPENGL for wasm
elseif(TARGET_WINDOWS OR TARGET_LINUX)
  set(USE_OPENGL_LIB TRUE)
else()
  message(FATAL_ERROR "platform not supported")
endif()
if(TARGET_EMSCRIPTEN)
  set(USE_OPENGLES2_LIB FALSE) # no system OPENGLES for wasm
  set(USE_OPENGL_LIB FALSE)
elseif(TARGET_LINUX OR TARGET_WINDOWS)
  set(USE_OPENGLES2_LIB FALSE) # TODO
  set(USE_OPENGL_LIB TRUE)
else()
  message(FATAL_ERROR "platform not supported")
endif()

# TODO: GL_GLEXT_PROTOTYPES

if(NOT USE_OPENGL_LIB)
  # make OpenGL optional
  set(FOUND_OPENGL_LIBRARIES "")
  set(FOUND_OPENGL_INCLUDE_DIR "")
endif()

# Mandatory dependencies
find_program(PYTHON_FOUND python)
if(NOT PYTHON_FOUND)
  message(FATAL_ERROR "\"python\" is required, please install it !")
else()
  message(STATUS "\"python\" found...")
endif(NOT PYTHON_FOUND)
